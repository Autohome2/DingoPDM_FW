
DingoPDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000162a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08016434  08016434  00026434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016be8  08016be8  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08016be8  08016be8  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016be8  08016be8  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016be8  08016be8  00026be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016bec  08016bec  00026bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08016bf0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005130  200001e4  08016dd4  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005314  08016dd4  00035314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032c70  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070bb  00000000  00000000  00062e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026e0  00000000  00000000  00069f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002358  00000000  00000000  0006c620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fb8  00000000  00000000  0006e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037744  00000000  00000000  00098930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daf28  00000000  00000000  000d0074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aaf9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7e0  00000000  00000000  001aafec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801641c 	.word	0x0801641c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0801641c 	.word	0x0801641c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <EvaluateCANInput>:
 */

#include "can_input.h"

uint8_t EvaluateCANInput(CAN_RxHeaderTypeDef* stRxHeader, uint8_t nRxData[8], PdmConfig_CanInput_t *in, uint16_t* nResult)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	603b      	str	r3, [r7, #0]
  if(!in->nEnabled)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <EvaluateCANInput+0x1a>
    return 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e0a6      	b.n	8000bb4 <EvaluateCANInput+0x168>
  if(stRxHeader->StdId != in->nId)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	8852      	ldrh	r2, [r2, #2]
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d001      	beq.n	8000a76 <EvaluateCANInput+0x2a>
    return 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e09e      	b.n	8000bb4 <EvaluateCANInput+0x168>

  uint16_t nSelected;

  //8 bit
  if(in->nHighByte == 0)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	88db      	ldrh	r3, [r3, #6]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d107      	bne.n	8000a8e <EvaluateCANInput+0x42>
  {
    nSelected = nRxData[in->nLowByte];
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	889b      	ldrh	r3, [r3, #4]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	82fb      	strh	r3, [r7, #22]
 8000a8c:	e011      	b.n	8000ab2 <EvaluateCANInput+0x66>
  }
  else
  {
    nSelected = (nRxData[in->nHighByte] << 8) + nRxData[in->nLowByte];
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	88db      	ldrh	r3, [r3, #6]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4413      	add	r3, r2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	889b      	ldrh	r3, [r3, #4]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	440b      	add	r3, r1
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	4413      	add	r3, r2
 8000ab0:	82fb      	strh	r3, [r7, #22]
  }

  switch(in->eOperator)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7a1b      	ldrb	r3, [r3, #8]
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d87b      	bhi.n	8000bb2 <EvaluateCANInput+0x166>
 8000aba:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <EvaluateCANInput+0x74>)
 8000abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac0:	08000ad5 	.word	0x08000ad5
 8000ac4:	08000ae3 	.word	0x08000ae3
 8000ac8:	08000afd 	.word	0x08000afd
 8000acc:	08000b17 	.word	0x08000b17
 8000ad0:	08000b5d 	.word	0x08000b5d
  {
  case OPER_EQUAL:
    *nResult = nSelected & 0xFF;
 8000ad4:	8afb      	ldrh	r3, [r7, #22]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	801a      	strh	r2, [r3, #0]
    return 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e068      	b.n	8000bb4 <EvaluateCANInput+0x168>

  case OPER_GREATER_THAN:
    *nResult = nSelected > in->nOnVal;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	895b      	ldrh	r3, [r3, #10]
 8000ae6:	8afa      	ldrh	r2, [r7, #22]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	bf8c      	ite	hi
 8000aec:	2301      	movhi	r3, #1
 8000aee:	2300      	movls	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	801a      	strh	r2, [r3, #0]
    return 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e05b      	b.n	8000bb4 <EvaluateCANInput+0x168>

  case OPER_LESS_THAN:
    *nResult = nSelected < in->nOnVal;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	895b      	ldrh	r3, [r3, #10]
 8000b00:	8afa      	ldrh	r2, [r7, #22]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	bf34      	ite	cc
 8000b06:	2301      	movcc	r3, #1
 8000b08:	2300      	movcs	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	801a      	strh	r2, [r3, #0]
    return 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e04e      	b.n	8000bb4 <EvaluateCANInput+0x168>

  case OPER_BITWISE_AND:
    if (in->eMode == MODE_NUM)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	7b1b      	ldrb	r3, [r3, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d107      	bne.n	8000b2e <EvaluateCANInput+0xe2>
      *nResult = (nSelected & in->nOnVal);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	895a      	ldrh	r2, [r3, #10]
 8000b22:	8afb      	ldrh	r3, [r7, #22]
 8000b24:	4013      	ands	r3, r2
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	801a      	strh	r2, [r3, #0]
 8000b2c:	e014      	b.n	8000b58 <EvaluateCANInput+0x10c>
    else
      CheckPushbutton(&in->ePbConfig, in->eMode, ((nSelected & in->nOnVal) > 0), nResult, NO_DEBOUNCE);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f103 0010 	add.w	r0, r3, #16
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	7b19      	ldrb	r1, [r3, #12]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	895a      	ldrh	r2, [r3, #10]
 8000b3c:	8afb      	ldrh	r3, [r7, #22]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	bf14      	ite	ne
 8000b46:	2301      	movne	r3, #1
 8000b48:	2300      	moveq	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	2300      	movs	r3, #0
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	f006 ff6e 	bl	8007a34 <CheckPushbutton>
    return 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e02b      	b.n	8000bb4 <EvaluateCANInput+0x168>

  case OPER_BITWISE_NAND:
    if (in->eMode == MODE_NUM)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7b1b      	ldrb	r3, [r3, #12]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10f      	bne.n	8000b84 <EvaluateCANInput+0x138>
      *nResult = (nSelected & !in->nOnVal);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	895b      	ldrh	r3, [r3, #10]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf0c      	ite	eq
 8000b6c:	2301      	moveq	r3, #1
 8000b6e:	2300      	movne	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	801a      	strh	r2, [r3, #0]
 8000b82:	e014      	b.n	8000bae <EvaluateCANInput+0x162>
    else
      CheckPushbutton(&in->ePbConfig, in->eMode, !((nSelected & in->nOnVal) > 0), nResult, NO_DEBOUNCE);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f103 0010 	add.w	r0, r3, #16
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7b19      	ldrb	r1, [r3, #12]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	895a      	ldrh	r2, [r3, #10]
 8000b92:	8afb      	ldrh	r3, [r7, #22]
 8000b94:	4013      	ands	r3, r2
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bf0c      	ite	eq
 8000b9c:	2301      	moveq	r3, #1
 8000b9e:	2300      	movne	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f006 ff43 	bl	8007a34 <CheckPushbutton>
    return 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e000      	b.n	8000bb4 <EvaluateCANInput+0x168>
  }

  return 0;
 8000bb2:	2300      	movs	r3, #0

}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bc4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bc8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d013      	beq.n	8000bfc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000bd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bd8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000bdc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d00b      	beq.n	8000bfc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000be4:	e000      	b.n	8000be8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000be6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000be8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f9      	beq.n	8000be6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000bf2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <USBD_CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUSBD, USBD_TxBuffer, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	4905      	ldr	r1, [pc, #20]	; (8000c28 <USBD_CDC_Init+0x1c>)
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <USBD_CDC_Init+0x20>)
 8000c16:	f010 fb2e 	bl	8011276 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUSBD, USBD_RxBuffer);
 8000c1a:	4905      	ldr	r1, [pc, #20]	; (8000c30 <USBD_CDC_Init+0x24>)
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <USBD_CDC_Init+0x20>)
 8000c1e:	f010 fb44 	bl	80112aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200018a8 	.word	0x200018a8
 8000c2c:	200020a8 	.word	0x200020a8
 8000c30:	200010a8 	.word	0x200010a8

08000c34 <USBD_CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_DeInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return (USBD_OK);
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <USBD_CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Control(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	4613      	mov	r3, r2
 8000c52:	80bb      	strh	r3, [r7, #4]
  switch(cmd)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b23      	cmp	r3, #35	; 0x23
 8000c58:	d866      	bhi.n	8000d28 <USBD_CDC_Control+0xe4>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <USBD_CDC_Control+0x1c>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000d29 	.word	0x08000d29
 8000c64:	08000d29 	.word	0x08000d29
 8000c68:	08000d29 	.word	0x08000d29
 8000c6c:	08000d29 	.word	0x08000d29
 8000c70:	08000d29 	.word	0x08000d29
 8000c74:	08000d29 	.word	0x08000d29
 8000c78:	08000d29 	.word	0x08000d29
 8000c7c:	08000d29 	.word	0x08000d29
 8000c80:	08000d29 	.word	0x08000d29
 8000c84:	08000d29 	.word	0x08000d29
 8000c88:	08000d29 	.word	0x08000d29
 8000c8c:	08000d29 	.word	0x08000d29
 8000c90:	08000d29 	.word	0x08000d29
 8000c94:	08000d29 	.word	0x08000d29
 8000c98:	08000d29 	.word	0x08000d29
 8000c9c:	08000d29 	.word	0x08000d29
 8000ca0:	08000d29 	.word	0x08000d29
 8000ca4:	08000d29 	.word	0x08000d29
 8000ca8:	08000d29 	.word	0x08000d29
 8000cac:	08000d29 	.word	0x08000d29
 8000cb0:	08000d29 	.word	0x08000d29
 8000cb4:	08000d29 	.word	0x08000d29
 8000cb8:	08000d29 	.word	0x08000d29
 8000cbc:	08000d29 	.word	0x08000d29
 8000cc0:	08000d29 	.word	0x08000d29
 8000cc4:	08000d29 	.word	0x08000d29
 8000cc8:	08000d29 	.word	0x08000d29
 8000ccc:	08000d29 	.word	0x08000d29
 8000cd0:	08000d29 	.word	0x08000d29
 8000cd4:	08000d29 	.word	0x08000d29
 8000cd8:	08000d29 	.word	0x08000d29
 8000cdc:	08000d29 	.word	0x08000d29
 8000ce0:	08000d29 	.word	0x08000d29
 8000ce4:	08000cf1 	.word	0x08000cf1
 8000ce8:	08000d29 	.word	0x08000d29
 8000cec:	08000d29 	.word	0x08000d29
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(115200);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(115200 >> 8);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	22c2      	movs	r2, #194	; 0xc2
 8000cfc:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(115200 >> 16);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3302      	adds	r3, #2
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(115200 >> 24);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	3303      	adds	r3, #3
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0; //Stop bits (1)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0; //Parity (none)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	3305      	adds	r3, #5
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8; //Number of bits (8)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	3306      	adds	r3, #6
 8000d22:	2208      	movs	r2, #8
 8000d24:	701a      	strb	r2, [r3, #0]
    break;
 8000d26:	e000      	b.n	8000d2a <USBD_CDC_Control+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000d28:	bf00      	nop
  }

  return (USBD_OK);
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <USBD_CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Receive(uint8_t* Buf, uint32_t *Len)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b090      	sub	sp, #64	; 0x40
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  MsgQueueRx_t stMsg;
  stMsg.eMsgSrc = USB_RX;
 8000d42:	2301      	movs	r3, #1
 8000d44:	733b      	strb	r3, [r7, #12]
  stMsg.nCRC = 0xFFFFFFFF;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  stMsg.nRxLen = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  for(uint8_t i=0; i<*Len; i++){
 8000d52:	2300      	movs	r3, #0
 8000d54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000d58:	e019      	b.n	8000d8e <USBD_CDC_Receive+0x56>
    if(i < 8){
 8000d5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d5e:	2b07      	cmp	r3, #7
 8000d60:	d810      	bhi.n	8000d84 <USBD_CDC_Receive+0x4c>
      stMsg.nRxData[i] = Buf[i];
 8000d62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	441a      	add	r2, r3
 8000d6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d6e:	7812      	ldrb	r2, [r2, #0]
 8000d70:	3340      	adds	r3, #64	; 0x40
 8000d72:	443b      	add	r3, r7
 8000d74:	f803 2c14 	strb.w	r2, [r3, #-20]
      stMsg.nRxLen++;
 8000d78:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  for(uint8_t i=0; i<*Len; i++){
 8000d84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000d8e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3df      	bcc.n	8000d5a <USBD_CDC_Receive+0x22>
    }
  }

  osMessageQueuePut(qMsgQueueRx, &stMsg, 0U, 0U);
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <USBD_CDC_Receive+0x8c>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f107 010c 	add.w	r1, r7, #12
 8000da2:	2300      	movs	r3, #0
 8000da4:	2200      	movs	r2, #0
 8000da6:	f011 fd55 	bl	8012854 <osMessageQueuePut>

  USBD_CDC_SetRxBuffer(&hUSBD, &Buf[0]);
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <USBD_CDC_Receive+0x90>)
 8000dae:	f010 fa7c 	bl	80112aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUSBD);
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <USBD_CDC_Receive+0x90>)
 8000db4:	f010 fabc 	bl	8011330 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3740      	adds	r7, #64	; 0x40
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000adc 	.word	0x20000adc
 8000dc8:	200020a8 	.word	0x200020a8

08000dcc <USBD_CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t USBD_CDC_Transmit(uint8_t* Buf, uint16_t Len)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUSBD.pClassData;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <USBD_CDC_Transmit+0x48>)
 8000dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8000de2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <USBD_CDC_Transmit+0x26>
    return USBD_BUSY;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00b      	b.n	8000e0a <USBD_CDC_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUSBD, Buf, Len);
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	461a      	mov	r2, r3
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <USBD_CDC_Transmit+0x48>)
 8000dfa:	f010 fa3c 	bl	8011276 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUSBD);
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <USBD_CDC_Transmit+0x48>)
 8000e00:	f010 fa67 	bl	80112d2 <USBD_CDC_TransmitPacket>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
  return result;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200020a8 	.word	0x200020a8

08000e18 <HAL_CAN_RxFifo0MsgPendingCallback>:

//========================================================================
// CAN Receive Callback
//========================================================================
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &stCanRxHeader, nCanRxData) != HAL_OK)
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000e22:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e24:	2100      	movs	r1, #0
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f008 f9bc 	bl	80091a4 <HAL_CAN_GetRxMessage>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000e32:	f002 fc93 	bl	800375c <Error_Handler>
  }

  //Store latest receive time
  //Use to determine connection status
  nLastCanUpdate = HAL_GetTick();
 8000e36:	f006 fe9d 	bl	8007b74 <HAL_GetTick>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000e3e:	6013      	str	r3, [r2, #0]

  MsgQueueRx_t stMsg;
  stMsg.eMsgSrc = CAN_RX;
 8000e40:	2300      	movs	r3, #0
 8000e42:	723b      	strb	r3, [r7, #8]
  stMsg.nRxLen = (uint8_t)stCanRxHeader.DLC;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  memcpy(&stMsg.stCanRxHeader, &stCanRxHeader, sizeof(stCanRxHeader));
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e50:	f107 040c 	add.w	r4, r7, #12
 8000e54:	461d      	mov	r5, r3
 8000e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  memcpy(&stMsg.nRxData, &nCanRxData, sizeof(nCanRxData));
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000e64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e6c:	e883 0003 	stmia.w	r3, {r0, r1}
  osMessageQueuePut(qMsgQueueRx, &stMsg, 0U, 0U);
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	f107 0108 	add.w	r1, r7, #8
 8000e78:	2300      	movs	r3, #0
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f011 fcea 	bl	8012854 <osMessageQueuePut>

}
 8000e80:	bf00      	nop
 8000e82:	3738      	adds	r7, #56	; 0x38
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bdb0      	pop	{r4, r5, r7, pc}
 8000e88:	20000e30 	.word	0x20000e30
 8000e8c:	20000e0c 	.word	0x20000e0c
 8000e90:	20000e3c 	.word	0x20000e3c
 8000e94:	20000adc 	.word	0x20000adc

08000e98 <PdmMainTask>:
//========================================================================
//========================================================================
// MAIN
//========================================================================
//========================================================================
void PdmMainTask(osThreadId_t* thisThreadId, ADC_HandleTypeDef* hadc1, ADC_HandleTypeDef* hadc4, RTC_HandleTypeDef* hrtc, CRC_HandleTypeDef* hcrc){
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	603b      	str	r3, [r7, #0]

  HAL_ADC_Start_DMA(hadc1, (uint32_t*) nAdc1Data, ADC_1_COUNT);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	497b      	ldr	r1, [pc, #492]	; (8001098 <PdmMainTask+0x200>)
 8000eaa:	68b8      	ldr	r0, [r7, #8]
 8000eac:	f007 f86c 	bl	8007f88 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(hadc4, (uint32_t*) nAdc4Data, ADC_4_COUNT);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	497a      	ldr	r1, [pc, #488]	; (800109c <PdmMainTask+0x204>)
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f007 f867 	bl	8007f88 <HAL_ADC_Start_DMA>

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUSBD, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4978      	ldr	r1, [pc, #480]	; (80010a0 <PdmMainTask+0x208>)
 8000ebe:	4879      	ldr	r0, [pc, #484]	; (80010a4 <PdmMainTask+0x20c>)
 8000ec0:	f010 fa60 	bl	8011384 <USBD_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <PdmMainTask+0x36>
  {
    Error_Handler();
 8000eca:	f002 fc47 	bl	800375c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUSBD, &USBD_CDC) != USBD_OK)
 8000ece:	4976      	ldr	r1, [pc, #472]	; (80010a8 <PdmMainTask+0x210>)
 8000ed0:	4874      	ldr	r0, [pc, #464]	; (80010a4 <PdmMainTask+0x20c>)
 8000ed2:	f010 fa82 	bl	80113da <USBD_RegisterClass>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <PdmMainTask+0x48>
  {
    Error_Handler();
 8000edc:	f002 fc3e 	bl	800375c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUSBD, &USBD_Interface_PDM) != USBD_OK)
 8000ee0:	4972      	ldr	r1, [pc, #456]	; (80010ac <PdmMainTask+0x214>)
 8000ee2:	4870      	ldr	r0, [pc, #448]	; (80010a4 <PdmMainTask+0x20c>)
 8000ee4:	f010 f9b0 	bl	8011248 <USBD_CDC_RegisterInterface>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <PdmMainTask+0x5a>
  {
    Error_Handler();
 8000eee:	f002 fc35 	bl	800375c <Error_Handler>
  }
  if (USBD_Start(&hUSBD) != USBD_OK)
 8000ef2:	486c      	ldr	r0, [pc, #432]	; (80010a4 <PdmMainTask+0x20c>)
 8000ef4:	f010 fa8b 	bl	801140e <USBD_Start>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <PdmMainTask+0x6a>
  {
    Error_Handler();
 8000efe:	f002 fc2d 	bl	800375c <Error_Handler>
    //=====================================================================================================
    // ADC channels
    // ADC1 = Vbat and device temperature
    // ADC4 = Battery sense
    //=====================================================================================================
    nBattSense = (uint16_t)(((float)nAdc4Data[0]) * 0.0519 - 11.3);
 8000f02:	4b66      	ldr	r3, [pc, #408]	; (800109c <PdmMainTask+0x204>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	ee07 3a90 	vmov	s15, r3
 8000f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f10:	ee17 0a90 	vmov	r0, s15
 8000f14:	f7ff fac0 	bl	8000498 <__aeabi_f2d>
 8000f18:	a35b      	add	r3, pc, #364	; (adr r3, 8001088 <PdmMainTask+0x1f0>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	f7ff fb13 	bl	8000548 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4610      	mov	r0, r2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	a359      	add	r3, pc, #356	; (adr r3, 8001090 <PdmMainTask+0x1f8>)
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	f7ff f952 	bl	80001d8 <__aeabi_dsub>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f7ff fd16 	bl	800096c <__aeabi_d2uiz>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	4b5a      	ldr	r3, [pc, #360]	; (80010b0 <PdmMainTask+0x218>)
 8000f46:	801a      	strh	r2, [r3, #0]
    nStmTemp = (uint16_t)((80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8000f48:	4b5a      	ldr	r3, [pc, #360]	; (80010b4 <PdmMainTask+0x21c>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f54:	4b58      	ldr	r3, [pc, #352]	; (80010b8 <PdmMainTask+0x220>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f64:	ee17 0a90 	vmov	r0, s15
 8000f68:	f7ff fa96 	bl	8000498 <__aeabi_f2d>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	f04f 0000 	mov.w	r0, #0
 8000f74:	4951      	ldr	r1, [pc, #324]	; (80010bc <PdmMainTask+0x224>)
 8000f76:	f7ff fc11 	bl	800079c <__aeabi_ddiv>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4614      	mov	r4, r2
 8000f80:	461d      	mov	r5, r3
                          (((float)nAdc1Data[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0) * 10.0);
 8000f82:	4b45      	ldr	r3, [pc, #276]	; (8001098 <PdmMainTask+0x200>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f90:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <PdmMainTask+0x220>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa0:	ee17 0a90 	vmov	r0, s15
 8000fa4:	f7ff fa78 	bl	8000498 <__aeabi_f2d>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
    nStmTemp = (uint16_t)((80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8000fac:	4620      	mov	r0, r4
 8000fae:	4629      	mov	r1, r5
 8000fb0:	f7ff faca 	bl	8000548 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
                          (((float)nAdc1Data[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0) * 10.0);
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <PdmMainTask+0x228>)
 8000fc2:	f7ff f90b 	bl	80001dc <__adddf3>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b3c      	ldr	r3, [pc, #240]	; (80010c4 <PdmMainTask+0x22c>)
 8000fd4:	f7ff fab8 	bl	8000548 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
    nStmTemp = (uint16_t)((80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fcc4 	bl	800096c <__aeabi_d2uiz>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <PdmMainTask+0x230>)
 8000fea:	801a      	strh	r2, [r3, #0]

    //=====================================================================================================
    // CANBoard check connection
    //=====================================================================================================
    CANBoardCheckConnection(&stCANBoard_RX);
 8000fec:	4837      	ldr	r0, [pc, #220]	; (80010cc <PdmMainTask+0x234>)
 8000fee:	f005 fe31 	bl	8006c54 <CANBoardCheckConnection>

    //=====================================================================================================
    // USB Connection
    //=====================================================================================================
    if( (USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && !bUsbConnected){
 8000ff2:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <PdmMainTask+0x238>)
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00f      	beq.n	800101e <PdmMainTask+0x186>
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <PdmMainTask+0x23c>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f083 0301 	eor.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d008      	beq.n	800101e <PdmMainTask+0x186>
      //USB_PULLUP_GPIO_Port->ODR |= USB_PULLUP_Pin;
      HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001012:	482f      	ldr	r0, [pc, #188]	; (80010d0 <PdmMainTask+0x238>)
 8001014:	f009 f928 	bl	800a268 <HAL_GPIO_WritePin>
      bUsbConnected = true;
 8001018:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <PdmMainTask+0x23c>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
    }

    if( !(USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && bUsbConnected){
 800101e:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <PdmMainTask+0x238>)
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10c      	bne.n	8001044 <PdmMainTask+0x1ac>
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <PdmMainTask+0x23c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d008      	beq.n	8001044 <PdmMainTask+0x1ac>
      //USB_PULLUP_GPIO_Port->ODR &= ~USB_PULLUP_Pin;
      HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001038:	4825      	ldr	r0, [pc, #148]	; (80010d0 <PdmMainTask+0x238>)
 800103a:	f009 f915 	bl	800a268 <HAL_GPIO_WritePin>
      bUsbConnected = false;
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <PdmMainTask+0x23c>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
    }

    nILTotal = 0;
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <PdmMainTask+0x240>)
 8001046:	2200      	movs	r2, #0
 8001048:	801a      	strh	r2, [r3, #0]
    for(int i=0;i<PDM_NUM_OUTPUTS;i++)
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e013      	b.n	8001078 <PdmMainTask+0x1e0>
      nILTotal += pf[i].nIL;
 8001050:	4922      	ldr	r1, [pc, #136]	; (80010dc <PdmMainTask+0x244>)
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4613      	mov	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	1a9b      	subs	r3, r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	3320      	adds	r3, #32
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <PdmMainTask+0x240>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	4413      	add	r3, r2
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <PdmMainTask+0x240>)
 8001070:	801a      	strh	r2, [r3, #0]
    for(int i=0;i<PDM_NUM_OUTPUTS;i++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	2b0b      	cmp	r3, #11
 800107c:	dde8      	ble.n	8001050 <PdmMainTask+0x1b8>

#ifdef MEAS_HEAP_USE
    __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

    osDelay(MAIN_TASK_DELAY);
 800107e:	2064      	movs	r0, #100	; 0x64
 8001080:	f011 fb34 	bl	80126ec <osDelay>
    nBattSense = (uint16_t)(((float)nAdc4Data[0]) * 0.0519 - 11.3);
 8001084:	e73d      	b.n	8000f02 <PdmMainTask+0x6a>
 8001086:	bf00      	nop
 8001088:	05532618 	.word	0x05532618
 800108c:	3faa92a3 	.word	0x3faa92a3
 8001090:	9999999a 	.word	0x9999999a
 8001094:	40269999 	.word	0x40269999
 8001098:	20000dcc 	.word	0x20000dcc
 800109c:	20000dd0 	.word	0x20000dd0
 80010a0:	20000130 	.word	0x20000130
 80010a4:	200020a8 	.word	0x200020a8
 80010a8:	20000028 	.word	0x20000028
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000dd2 	.word	0x20000dd2
 80010b4:	1ffff7c2 	.word	0x1ffff7c2
 80010b8:	1ffff7b8 	.word	0x1ffff7b8
 80010bc:	40540000 	.word	0x40540000
 80010c0:	403e0000 	.word	0x403e0000
 80010c4:	40240000 	.word	0x40240000
 80010c8:	20000dd4 	.word	0x20000dd4
 80010cc:	20000e40 	.word	0x20000e40
 80010d0:	48000400 	.word	0x48000400
 80010d4:	20000dc0 	.word	0x20000dc0
 80010d8:	20000d8c 	.word	0x20000d8c
 80010dc:	20000aec 	.word	0x20000aec

080010e0 <InputLogic>:
    //Debug GPIO
    //EXTRA3_GPIO_Port->ODR ^= EXTRA3_Pin;
  }
}

void InputLogic(){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e012      	b.n	8001112 <InputLogic+0x32>
    EvaluateInput(&stPdmConfig.stInput[i], &nPdmInputs[i]);
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	4613      	mov	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	1a9b      	subs	r3, r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	3308      	adds	r3, #8
 80010f8:	4a4a      	ldr	r2, [pc, #296]	; (8001224 <InputLogic+0x144>)
 80010fa:	441a      	add	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4949      	ldr	r1, [pc, #292]	; (8001228 <InputLogic+0x148>)
 8001102:	440b      	add	r3, r1
 8001104:	4619      	mov	r1, r3
 8001106:	4610      	mov	r0, r2
 8001108:	f005 f843 	bl	8006192 <EvaluateInput>
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b07      	cmp	r3, #7
 8001116:	dde9      	ble.n	80010ec <InputLogic+0xc>

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	e012      	b.n	8001144 <InputLogic+0x64>
    EvaluateVirtInput(&stPdmConfig.stVirtualInput[i], &nVirtInputs[i]);
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	33e8      	adds	r3, #232	; 0xe8
 800112a:	4a3e      	ldr	r2, [pc, #248]	; (8001224 <InputLogic+0x144>)
 800112c:	441a      	add	r2, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	493e      	ldr	r1, [pc, #248]	; (800122c <InputLogic+0x14c>)
 8001134:	440b      	add	r3, r1
 8001136:	4619      	mov	r1, r3
 8001138:	4610      	mov	r0, r2
 800113a:	f005 fbd7 	bl	80068ec <EvaluateVirtInput>
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	3301      	adds	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	2b13      	cmp	r3, #19
 8001148:	dde9      	ble.n	800111e <InputLogic+0x3e>

  //Map profet state to integer for use as virtual input pointer
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e020      	b.n	8001192 <InputLogic+0xb2>
    nOutputs[i] = pf[i].eState == ON;
 8001150:	4937      	ldr	r1, [pc, #220]	; (8001230 <InputLogic+0x150>)
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4613      	mov	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	1a9b      	subs	r3, r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	440b      	add	r3, r1
 800115e:	3301      	adds	r3, #1
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b01      	cmp	r3, #1
 8001166:	bf0c      	ite	eq
 8001168:	2301      	moveq	r3, #1
 800116a:	2300      	movne	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	b299      	uxth	r1, r3
 8001170:	4a30      	ldr	r2, [pc, #192]	; (8001234 <InputLogic+0x154>)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    EvaluateStarter(&stPdmConfig.stStarter, i, &nStarterDisable[i]);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	b2d9      	uxtb	r1, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4a2d      	ldr	r2, [pc, #180]	; (8001238 <InputLogic+0x158>)
 8001182:	4413      	add	r3, r2
 8001184:	461a      	mov	r2, r3
 8001186:	482d      	ldr	r0, [pc, #180]	; (800123c <InputLogic+0x15c>)
 8001188:	f005 f829 	bl	80061de <EvaluateStarter>
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	3301      	adds	r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b0b      	cmp	r3, #11
 8001196:	dddb      	ble.n	8001150 <InputLogic+0x70>
  }

  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	e023      	b.n	80011e6 <InputLogic+0x106>
      if( (stPdmConfig.stFlasher[0].nOutput != i) &&
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <InputLogic+0x144>)
 80011a0:	f893 3525 	ldrb.w	r3, [r3, #1317]	; 0x525
 80011a4:	461a      	mov	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d019      	beq.n	80011e0 <InputLogic+0x100>
          (stPdmConfig.stFlasher[1].nOutput != i) &&
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <InputLogic+0x144>)
 80011ae:	f893 353d 	ldrb.w	r3, [r3, #1341]	; 0x53d
 80011b2:	461a      	mov	r2, r3
      if( (stPdmConfig.stFlasher[0].nOutput != i) &&
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d012      	beq.n	80011e0 <InputLogic+0x100>
          (stPdmConfig.stFlasher[2].nOutput != i) &&
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <InputLogic+0x144>)
 80011bc:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 80011c0:	461a      	mov	r2, r3
          (stPdmConfig.stFlasher[1].nOutput != i) &&
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00b      	beq.n	80011e0 <InputLogic+0x100>
          (stPdmConfig.stFlasher[3].nOutput != i))
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <InputLogic+0x144>)
 80011ca:	f893 356d 	ldrb.w	r3, [r3, #1389]	; 0x56d
 80011ce:	461a      	mov	r2, r3
          (stPdmConfig.stFlasher[2].nOutput != i) &&
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d004      	beq.n	80011e0 <InputLogic+0x100>
        nOutputFlasher[i] = 1;
 80011d6:	4a1a      	ldr	r2, [pc, #104]	; (8001240 <InputLogic+0x160>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	2101      	movs	r1, #1
 80011dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b0b      	cmp	r3, #11
 80011ea:	ddd8      	ble.n	800119e <InputLogic+0xbe>
  }
  for(int i=0; i<PDM_NUM_FLASHERS; i++){
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	e00f      	b.n	8001212 <InputLogic+0x132>
    EvaluateFlasher(&stPdmConfig.stFlasher[i], nOutputFlasher);
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <InputLogic+0x144>)
 8001202:	4413      	add	r3, r2
 8001204:	490e      	ldr	r1, [pc, #56]	; (8001240 <InputLogic+0x160>)
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fdba 	bl	8002d80 <EvaluateFlasher>
  for(int i=0; i<PDM_NUM_FLASHERS; i++){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3301      	adds	r3, #1
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b03      	cmp	r3, #3
 8001216:	ddec      	ble.n	80011f2 <InputLogic+0x112>
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000200 	.word	0x20000200
 8001228:	20000fe8 	.word	0x20000fe8
 800122c:	20001034 	.word	0x20001034
 8001230:	20000aec 	.word	0x20000aec
 8001234:	2000105c 	.word	0x2000105c
 8001238:	20001074 	.word	0x20001074
 800123c:	20000778 	.word	0x20000778
 8001240:	2000108c 	.word	0x2000108c

08001244 <OutputLogic>:

void OutputLogic(){
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
  //Copy output logic to profet requested state
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	e03f      	b.n	80012d0 <OutputLogic+0x8c>
  {
    if(eDevMode == DEVICE_AUTO){
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <OutputLogic+0xa0>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d126      	bne.n	80012a6 <OutputLogic+0x62>
      pf[i].eReqState = (ProfetStateTypeDef)(*stPdmConfig.stOutput[i].pInput && nStarterDisable[i] && nOutputFlasher[i]);
 8001258:	4923      	ldr	r1, [pc, #140]	; (80012e8 <OutputLogic+0xa4>)
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00d      	beq.n	800128e <OutputLogic+0x4a>
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <OutputLogic+0xa8>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <OutputLogic+0x4a>
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <OutputLogic+0xac>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <OutputLogic+0x4a>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <OutputLogic+0x4c>
 800128e:	2300      	movs	r3, #0
 8001290:	b2d8      	uxtb	r0, r3
 8001292:	4918      	ldr	r1, [pc, #96]	; (80012f4 <OutputLogic+0xb0>)
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	1a9b      	subs	r3, r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	440b      	add	r3, r1
 80012a0:	3302      	adds	r3, #2
 80012a2:	4602      	mov	r2, r0
 80012a4:	701a      	strb	r2, [r3, #0]
    }
    if(eDevMode == DEVICE_MANUAL){
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <OutputLogic+0xa0>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10d      	bne.n	80012ca <OutputLogic+0x86>
      pf[i].eReqState = (ProfetStateTypeDef)nManualOutputs[i];
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <OutputLogic+0xb4>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	7818      	ldrb	r0, [r3, #0]
 80012b6:	490f      	ldr	r1, [pc, #60]	; (80012f4 <OutputLogic+0xb0>)
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	3302      	adds	r3, #2
 80012c6:	4602      	mov	r2, r0
 80012c8:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3301      	adds	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b0b      	cmp	r3, #11
 80012d4:	ddbc      	ble.n	8001250 <OutputLogic+0xc>
    }
  }
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	20000ae8 	.word	0x20000ae8
 80012e8:	20000200 	.word	0x20000200
 80012ec:	20001074 	.word	0x20001074
 80012f0:	2000108c 	.word	0x2000108c
 80012f4:	20000aec 	.word	0x20000aec
 80012f8:	2000236c 	.word	0x2000236c

080012fc <I2CTask>:

void I2CTask(osThreadId_t* thisThreadId, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  //=====================================================================================================
  // MCP9808 Temperature Sensor Configuration
  //=====================================================================================================
  if(MCP9808_Init(hi2c1, MCP9808_ADDRESS) != MCP9808_OK)
 8001308:	2118      	movs	r1, #24
 800130a:	68b8      	ldr	r0, [r7, #8]
 800130c:	f005 fccc 	bl	8006ca8 <MCP9808_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	d002      	beq.n	800131c <I2CTask+0x20>
    printf("MCP9808 Init FAIL\n");
 8001316:	48a5      	ldr	r0, [pc, #660]	; (80015ac <I2CTask+0x2b0>)
 8001318:	f014 fbf0 	bl	8015afc <puts>

  MCP9808_SetResolution(hi2c1, MCP9808_ADDRESS, MCP9808_RESOLUTION_0_5DEG);
 800131c:	2200      	movs	r2, #0
 800131e:	2118      	movs	r1, #24
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f005 fd63 	bl	8006dec <MCP9808_SetResolution>

  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_UPPER_TEMP, BOARD_TEMP_MAX) != MCP9808_OK)
 8001326:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 80015b0 <I2CTask+0x2b4>
 800132a:	2202      	movs	r2, #2
 800132c:	2118      	movs	r1, #24
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f005 fd70 	bl	8006e14 <MCP9808_SetLimit>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d002      	beq.n	8001340 <I2CTask+0x44>
    printf("MCP9808 Set Upper Limit Failed\n");
 800133a:	489e      	ldr	r0, [pc, #632]	; (80015b4 <I2CTask+0x2b8>)
 800133c:	f014 fbde 	bl	8015afc <puts>
  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_LOWER_TEMP, BOARD_TEMP_MIN) != MCP9808_OK)
 8001340:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80015b8 <I2CTask+0x2bc>
 8001344:	2203      	movs	r2, #3
 8001346:	2118      	movs	r1, #24
 8001348:	68b8      	ldr	r0, [r7, #8]
 800134a:	f005 fd63 	bl	8006e14 <MCP9808_SetLimit>
 800134e:	4603      	mov	r3, r0
 8001350:	2b01      	cmp	r3, #1
 8001352:	d002      	beq.n	800135a <I2CTask+0x5e>
    printf("MCP9808 Set Lower Limit Failed\n");
 8001354:	4899      	ldr	r0, [pc, #612]	; (80015bc <I2CTask+0x2c0>)
 8001356:	f014 fbd1 	bl	8015afc <puts>
  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_CRIT_TEMP, BOARD_TEMP_CRIT) != MCP9808_OK)
 800135a:	ed9f 0a99 	vldr	s0, [pc, #612]	; 80015c0 <I2CTask+0x2c4>
 800135e:	2204      	movs	r2, #4
 8001360:	2118      	movs	r1, #24
 8001362:	68b8      	ldr	r0, [r7, #8]
 8001364:	f005 fd56 	bl	8006e14 <MCP9808_SetLimit>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d002      	beq.n	8001374 <I2CTask+0x78>
    printf("MCP9808 Set Critical Limit Failed\n");
 800136e:	4895      	ldr	r0, [pc, #596]	; (80015c4 <I2CTask+0x2c8>)
 8001370:	f014 fbc4 	bl	8015afc <puts>
  //Setup configuration
  //Enable alert pin
  //Lock Tupper/Tlower window settings
  //Lock Tcrit settings
  //Set Tupper/Tlower hysteresis to +1.5 deg C
  MCP9808_Write16(hi2c1, MCP9808_ADDRESS, MCP9808_REG_CONFIG, (MCP9808_REG_CONFIG_ALERTCTRL | MCP9808_REG_CONFIG_WINLOCKED | MCP9808_REG_CONFIG_CRITLOCKED | MCP9808_REG_CONFIG_HYST_1_5));
 8001374:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 8001378:	2201      	movs	r2, #1
 800137a:	2118      	movs	r1, #24
 800137c:	68b8      	ldr	r0, [r7, #8]
 800137e:	f005 fe01 	bl	8006f84 <MCP9808_Write16>

  //=====================================================================================================
  // PCAL9554B User Input Configuration
  //=====================================================================================================
  //Set configuration registers (all to input = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_CFG, 0xFF);
 8001382:	23ff      	movs	r3, #255	; 0xff
 8001384:	2203      	movs	r2, #3
 8001386:	2120      	movs	r1, #32
 8001388:	68b8      	ldr	r0, [r7, #8]
 800138a:	f005 fffb 	bl	8007384 <PCAL9554B_WriteReg8>
  //Set latch register (no latch = 0)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_IN_LATCH, 0x00);
 800138e:	2300      	movs	r3, #0
 8001390:	2242      	movs	r2, #66	; 0x42
 8001392:	2120      	movs	r1, #32
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f005 fff5 	bl	8007384 <PCAL9554B_WriteReg8>
  //Set pullup/pulldown enable register (all enable = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_PU_PD_ENABLE, 0xFF);
 800139a:	23ff      	movs	r3, #255	; 0xff
 800139c:	2243      	movs	r2, #67	; 0x43
 800139e:	2120      	movs	r1, #32
 80013a0:	68b8      	ldr	r0, [r7, #8]
 80013a2:	f005 ffef 	bl	8007384 <PCAL9554B_WriteReg8>
  //Set pullup/pulldown selection register (all to pullup = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_PU_PD_SELECT, 0xFF);
 80013a6:	23ff      	movs	r3, #255	; 0xff
 80013a8:	2244      	movs	r2, #68	; 0x44
 80013aa:	2120      	movs	r1, #32
 80013ac:	68b8      	ldr	r0, [r7, #8]
 80013ae:	f005 ffe9 	bl	8007384 <PCAL9554B_WriteReg8>
  //Set interrupt mask (all to disable interrupt = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_INT_MASK, 0xFF);
 80013b2:	23ff      	movs	r3, #255	; 0xff
 80013b4:	2245      	movs	r2, #69	; 0x45
 80013b6:	2120      	movs	r1, #32
 80013b8:	68b8      	ldr	r0, [r7, #8]
 80013ba:	f005 ffe3 	bl	8007384 <PCAL9554B_WriteReg8>


  //=====================================================================================================
  // PCA9539 Profet GPIO Configuration
  //=====================================================================================================
  HAL_GPIO_WritePin(PF_RESET_Port, PF_RESET_Pin, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2110      	movs	r1, #16
 80013c2:	4881      	ldr	r0, [pc, #516]	; (80015c8 <I2CTask+0x2cc>)
 80013c4:	f008 ff50 	bl	800a268 <HAL_GPIO_WritePin>
  //Set all outputs to push-pull
  PCA9539_WriteReg8(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT_CONFIG, 0x00);
 80013c8:	2300      	movs	r3, #0
 80013ca:	224f      	movs	r2, #79	; 0x4f
 80013cc:	2174      	movs	r1, #116	; 0x74
 80013ce:	68b8      	ldr	r0, [r7, #8]
 80013d0:	f005 fe68 	bl	80070a4 <PCA9539_WriteReg8>
  //Set configuration registers (all to output)
  PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_CONFIG_PORT0, 0x0000);
 80013d4:	2300      	movs	r3, #0
 80013d6:	2206      	movs	r2, #6
 80013d8:	2174      	movs	r1, #116	; 0x74
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	f005 fe82 	bl	80070e4 <PCA9539_WriteReg16>
  //Enable all pullup/pulldown
  PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_PU_PD_ENABLE_PORT0, 0x0000);
 80013e0:	2300      	movs	r3, #0
 80013e2:	2246      	movs	r2, #70	; 0x46
 80013e4:	2174      	movs	r1, #116	; 0x74
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f005 fe7c 	bl	80070e4 <PCA9539_WriteReg16>
  //Set all outputs to pulldown
  PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_PU_PD_SELECT_PORT0, 0x0000);
 80013ec:	2300      	movs	r3, #0
 80013ee:	2248      	movs	r2, #72	; 0x48
 80013f0:	2174      	movs	r1, #116	; 0x74
 80013f2:	68b8      	ldr	r0, [r7, #8]
 80013f4:	f005 fe76 	bl	80070e4 <PCA9539_WriteReg16>

  //=====================================================================================================
  // ADS1x15 Analog In Configuration
  //=====================================================================================================
  stAdcPfBank1.deviceType = ADS1015;
 80013f8:	4b74      	ldr	r3, [pc, #464]	; (80015cc <I2CTask+0x2d0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
  stAdcPfBank1.bitShift = 0;
 80013fe:	4b73      	ldr	r3, [pc, #460]	; (80015cc <I2CTask+0x2d0>)
 8001400:	2200      	movs	r2, #0
 8001402:	715a      	strb	r2, [r3, #5]
  stAdcPfBank1.gain = GAIN_ONE;
 8001404:	4b71      	ldr	r3, [pc, #452]	; (80015cc <I2CTask+0x2d0>)
 8001406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800140a:	805a      	strh	r2, [r3, #2]
  stAdcPfBank1.dataRate = ADS1015_DATARATE_3300SPS;
 800140c:	4b6f      	ldr	r3, [pc, #444]	; (80015cc <I2CTask+0x2d0>)
 800140e:	22c0      	movs	r2, #192	; 0xc0
 8001410:	711a      	strb	r2, [r3, #4]

  //=====================================================================================================
  // PCA9539 Profet GPIO Configuration
  //=====================================================================================================
  //Set all outputs to push-pull
  PCA9539_WriteReg8(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT_CONFIG, 0x00);
 8001412:	2300      	movs	r3, #0
 8001414:	224f      	movs	r2, #79	; 0x4f
 8001416:	2174      	movs	r1, #116	; 0x74
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f005 fe43 	bl	80070a4 <PCA9539_WriteReg8>
  //Set configuration registers (all to output)
  PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_CONFIG_PORT0, 0x0000);
 800141e:	2300      	movs	r3, #0
 8001420:	2206      	movs	r2, #6
 8001422:	2174      	movs	r1, #116	; 0x74
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f005 fe5d 	bl	80070e4 <PCA9539_WriteReg16>
  //Enable all pullup/pulldown
  PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_PU_PD_ENABLE_PORT0, 0x0000);
 800142a:	2300      	movs	r3, #0
 800142c:	2246      	movs	r2, #70	; 0x46
 800142e:	2174      	movs	r1, #116	; 0x74
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f005 fe57 	bl	80070e4 <PCA9539_WriteReg16>
  //Set all outputs to pulldown
  PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_PU_PD_SELECT_PORT0, 0x0000);
 8001436:	2300      	movs	r3, #0
 8001438:	2248      	movs	r2, #72	; 0x48
 800143a:	2174      	movs	r1, #116	; 0x74
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f005 fe51 	bl	80070e4 <PCA9539_WriteReg16>

  //=====================================================================================================
  // ADS1x15 Analog In Configuration
  //=====================================================================================================
  stAdcPfBank2.deviceType = ADS1015;
 8001442:	4b63      	ldr	r3, [pc, #396]	; (80015d0 <I2CTask+0x2d4>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
  stAdcPfBank2.bitShift = 0;
 8001448:	4b61      	ldr	r3, [pc, #388]	; (80015d0 <I2CTask+0x2d4>)
 800144a:	2200      	movs	r2, #0
 800144c:	715a      	strb	r2, [r3, #5]
  stAdcPfBank2.gain = GAIN_ONE;
 800144e:	4b60      	ldr	r3, [pc, #384]	; (80015d0 <I2CTask+0x2d4>)
 8001450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001454:	805a      	strh	r2, [r3, #2]
  stAdcPfBank2.dataRate = ADS1015_DATARATE_3300SPS;
 8001456:	4b5e      	ldr	r3, [pc, #376]	; (80015d0 <I2CTask+0x2d4>)
 8001458:	22c0      	movs	r2, #192	; 0xc0
 800145a:	711a      	strb	r2, [r3, #4]

  //=====================================================================================================
  // PCA9635 LED Configuration
  //=====================================================================================================
  //Send configuration, set to blink/flasher
  PCA9635_Init(hi2c2, PCA9635_ADDRESS, PCA9635_BLINK);
 800145c:	2201      	movs	r2, #1
 800145e:	2130      	movs	r1, #48	; 0x30
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f005 fe65 	bl	8007130 <PCA9635_Init>

  //Set flashing frequency
  PCA9635_SetGroupFreq(hi2c2, PCA9635_ADDRESS, PCA9635_FLASH_FREQ);
 8001466:	2202      	movs	r2, #2
 8001468:	2130      	movs	r1, #48	; 0x30
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f005 fecd 	bl	800720a <PCA9635_SetGroupFreq>

  //Set PWM duty cycle for each channel (overriden by group PWM)
  for(int i=0; i<PDM_NUM_LEDS; i++){
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
 8001474:	e009      	b.n	800148a <I2CTask+0x18e>
    PCA9635_SetPWM(hi2c2, PCA9635_ADDRESS, i, 255);
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	b2da      	uxtb	r2, r3
 800147a:	23ff      	movs	r3, #255	; 0xff
 800147c:	2130      	movs	r1, #48	; 0x30
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f005 fe83 	bl	800718a <PCA9635_SetPWM>
  for(int i=0; i<PDM_NUM_LEDS; i++){
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	3301      	adds	r3, #1
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	2b0f      	cmp	r3, #15
 800148e:	ddf2      	ble.n	8001476 <I2CTask+0x17a>
  }

  //Set flashing duty cycle
  PCA9635_SetGroupPWM(hi2c2, PCA9635_ADDRESS, PCA9635_FLASH_DUTY_CYCLE); //Have to set individual brightness levels first
 8001490:	2280      	movs	r2, #128	; 0x80
 8001492:	2130      	movs	r1, #48	; 0x30
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f005 fe9d 	bl	80071d4 <PCA9635_SetGroupPWM>

  //Start LED test sequence
  nLEDTestSeqIndex = 1;
 800149a:	4b4e      	ldr	r3, [pc, #312]	; (80015d4 <I2CTask+0x2d8>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
  nLEDTestSeqLastTime = HAL_GetTick();
 80014a0:	f006 fb68 	bl	8007b74 <HAL_GetTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a4c      	ldr	r2, [pc, #304]	; (80015d8 <I2CTask+0x2dc>)
 80014a8:	6013      	str	r3, [r2, #0]
  for(;;)
  {
   //=====================================================================================================
   // PCAL9554B User Input
   //=====================================================================================================
   nUserDigInputRaw = PCAL9554B_ReadReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_IN_PORT);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2120      	movs	r1, #32
 80014ae:	68b8      	ldr	r0, [r7, #8]
 80014b0:	f005 ff88 	bl	80073c4 <PCAL9554B_ReadReg8>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b48      	ldr	r3, [pc, #288]	; (80015dc <I2CTask+0x2e0>)
 80014ba:	701a      	strb	r2, [r3, #0]
   nUserDigInput[0] = !((nUserDigInputRaw & 0x08) >> 3);
 80014bc:	4b47      	ldr	r3, [pc, #284]	; (80015dc <I2CTask+0x2e0>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <I2CTask+0x2e4>)
 80014d2:	701a      	strb	r2, [r3, #0]
   nUserDigInput[1] = !((nUserDigInputRaw & 0x04) >> 2);
 80014d4:	4b41      	ldr	r3, [pc, #260]	; (80015dc <I2CTask+0x2e0>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <I2CTask+0x2e4>)
 80014ea:	705a      	strb	r2, [r3, #1]
   nUserDigInput[2] = !((nUserDigInputRaw & 0x02) >> 1);
 80014ec:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <I2CTask+0x2e0>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf0c      	ite	eq
 80014f8:	2301      	moveq	r3, #1
 80014fa:	2300      	movne	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <I2CTask+0x2e4>)
 8001502:	709a      	strb	r2, [r3, #2]
   nUserDigInput[3] = !(nUserDigInputRaw & 0x01);
 8001504:	4b35      	ldr	r3, [pc, #212]	; (80015dc <I2CTask+0x2e0>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf0c      	ite	eq
 8001510:	2301      	moveq	r3, #1
 8001512:	2300      	movne	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <I2CTask+0x2e4>)
 800151a:	70da      	strb	r2, [r3, #3]
   nUserDigInput[4] = !((nUserDigInputRaw & 0x10) >> 4);
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <I2CTask+0x2e0>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	f003 0310 	and.w	r3, r3, #16
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <I2CTask+0x2e4>)
 8001532:	711a      	strb	r2, [r3, #4]
   nUserDigInput[5] = !((nUserDigInputRaw & 0x20) >> 5);
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <I2CTask+0x2e0>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	f003 0320 	and.w	r3, r3, #32
 800153c:	2b00      	cmp	r3, #0
 800153e:	bf0c      	ite	eq
 8001540:	2301      	moveq	r3, #1
 8001542:	2300      	movne	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <I2CTask+0x2e4>)
 800154a:	715a      	strb	r2, [r3, #5]
   nUserDigInput[6] = !((nUserDigInputRaw & 0x40) >> 6);
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <I2CTask+0x2e0>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf0c      	ite	eq
 8001558:	2301      	moveq	r3, #1
 800155a:	2300      	movne	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <I2CTask+0x2e4>)
 8001562:	719a      	strb	r2, [r3, #6]
   nUserDigInput[7] = !((nUserDigInputRaw & 0x80) >> 7);
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <I2CTask+0x2e0>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b25b      	sxtb	r3, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	b2db      	uxtb	r3, r3
 800156e:	09db      	lsrs	r3, r3, #7
 8001570:	b2db      	uxtb	r3, r3
 8001572:	461a      	mov	r2, r3
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <I2CTask+0x2e4>)
 8001576:	71da      	strb	r2, [r3, #7]
   //=====================================================================================================
   // Set Profet
   // DSEL to channel 1
   // Enable all DEN
   //=====================================================================================================
   pfGpioBank1 &= ~PF_BANK1_DSEL;
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <I2CTask+0x2e8>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <I2CTask+0x2e8>)
 8001584:	801a      	strh	r2, [r3, #0]
   pfGpioBank1 |= PF_BANK1_DEN;
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <I2CTask+0x2e8>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 800158e:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <I2CTask+0x2e8>)
 8001596:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <I2CTask+0x2e8>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	2202      	movs	r2, #2
 800159e:	2174      	movs	r1, #116	; 0x74
 80015a0:	68b8      	ldr	r0, [r7, #8]
 80015a2:	f005 fd9f 	bl	80070e4 <PCA9539_WriteReg16>

   //=====================================================================================================
   // ADS1x15 Analog Input
   //=====================================================================================================
   for(int i = 0; i < 4; i++){
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	e042      	b.n	8001632 <I2CTask+0x336>
 80015ac:	08016434 	.word	0x08016434
 80015b0:	42480000 	.word	0x42480000
 80015b4:	08016448 	.word	0x08016448
 80015b8:	00000000 	.word	0x00000000
 80015bc:	08016468 	.word	0x08016468
 80015c0:	42a00000 	.word	0x42a00000
 80015c4:	08016488 	.word	0x08016488
 80015c8:	48000400 	.word	0x48000400
 80015cc:	20000da4 	.word	0x20000da4
 80015d0:	20000dac 	.word	0x20000dac
 80015d4:	20000de8 	.word	0x20000de8
 80015d8:	20000df0 	.word	0x20000df0
 80015dc:	20000db4 	.word	0x20000db4
 80015e0:	20000db8 	.word	0x20000db8
 80015e4:	20000d8e 	.word	0x20000d8e
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, i);
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4a8e      	ldr	r2, [pc, #568]	; (8001828 <I2CTask+0x52c>)
 80015ee:	2148      	movs	r1, #72	; 0x48
 80015f0:	68b8      	ldr	r0, [r7, #8]
 80015f2:	f005 fa73 	bl	8006adc <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	2104      	movs	r1, #4
 80015fa:	488c      	ldr	r0, [pc, #560]	; (800182c <I2CTask+0x530>)
 80015fc:	f008 fe34 	bl	800a268 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 8001600:	2002      	movs	r0, #2
 8001602:	f011 f873 	bl	80126ec <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2104      	movs	r1, #4
 800160a:	4888      	ldr	r0, [pc, #544]	; (800182c <I2CTask+0x530>)
 800160c:	f008 fe2c 	bl	800a268 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, &nPfISBank1Raw[i]) != HAL_OK)
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4a86      	ldr	r2, [pc, #536]	; (8001830 <I2CTask+0x534>)
 8001616:	4413      	add	r3, r2
 8001618:	4a83      	ldr	r2, [pc, #524]	; (8001828 <I2CTask+0x52c>)
 800161a:	2148      	movs	r1, #72	; 0x48
 800161c:	68b8      	ldr	r0, [r7, #8]
 800161e:	f005 fad9 	bl	8006bd4 <ADS1x15_ReadADC>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <I2CTask+0x330>
     {
       Error_Handler();
 8001628:	f002 f898 	bl	800375c <Error_Handler>
   for(int i = 0; i < 4; i++){
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	3301      	adds	r3, #1
 8001630:	623b      	str	r3, [r7, #32]
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b03      	cmp	r3, #3
 8001636:	ddd7      	ble.n	80015e8 <I2CTask+0x2ec>
     }
   }

   Profet_UpdateIS(&pf[0], nPfISBank1Raw[3]);
 8001638:	4b7d      	ldr	r3, [pc, #500]	; (8001830 <I2CTask+0x534>)
 800163a:	88db      	ldrh	r3, [r3, #6]
 800163c:	4619      	mov	r1, r3
 800163e:	487d      	ldr	r0, [pc, #500]	; (8001834 <I2CTask+0x538>)
 8001640:	f006 f93a 	bl	80078b8 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[1], nPfISBank1Raw[2]);
 8001644:	4b7a      	ldr	r3, [pc, #488]	; (8001830 <I2CTask+0x534>)
 8001646:	889b      	ldrh	r3, [r3, #4]
 8001648:	4619      	mov	r1, r3
 800164a:	487b      	ldr	r0, [pc, #492]	; (8001838 <I2CTask+0x53c>)
 800164c:	f006 f934 	bl	80078b8 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[2], nPfISBank1Raw[1]);
 8001650:	4b77      	ldr	r3, [pc, #476]	; (8001830 <I2CTask+0x534>)
 8001652:	885b      	ldrh	r3, [r3, #2]
 8001654:	4619      	mov	r1, r3
 8001656:	4879      	ldr	r0, [pc, #484]	; (800183c <I2CTask+0x540>)
 8001658:	f006 f92e 	bl	80078b8 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[4], nPfISBank1Raw[0]);
 800165c:	4b74      	ldr	r3, [pc, #464]	; (8001830 <I2CTask+0x534>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	4877      	ldr	r0, [pc, #476]	; (8001840 <I2CTask+0x544>)
 8001664:	f006 f928 	bl	80078b8 <Profet_UpdateIS>

   //=====================================================================================================
   //Flip Profet DSEL to channel 2
   //=====================================================================================================
   pfGpioBank1 |= PF_BANK1_DSEL;
 8001668:	4b76      	ldr	r3, [pc, #472]	; (8001844 <I2CTask+0x548>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8001670:	b29a      	uxth	r2, r3
 8001672:	4b74      	ldr	r3, [pc, #464]	; (8001844 <I2CTask+0x548>)
 8001674:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 8001676:	4b73      	ldr	r3, [pc, #460]	; (8001844 <I2CTask+0x548>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	2202      	movs	r2, #2
 800167c:	2174      	movs	r1, #116	; 0x74
 800167e:	68b8      	ldr	r0, [r7, #8]
 8001680:	f005 fd30 	bl	80070e4 <PCA9539_WriteReg16>

   for(int i = 0; i < 2; i++){
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	e024      	b.n	80016d4 <I2CTask+0x3d8>
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, i);
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4a66      	ldr	r2, [pc, #408]	; (8001828 <I2CTask+0x52c>)
 8001690:	2148      	movs	r1, #72	; 0x48
 8001692:	68b8      	ldr	r0, [r7, #8]
 8001694:	f005 fa22 	bl	8006adc <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2104      	movs	r1, #4
 800169c:	4863      	ldr	r0, [pc, #396]	; (800182c <I2CTask+0x530>)
 800169e:	f008 fde3 	bl	800a268 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 80016a2:	2002      	movs	r0, #2
 80016a4:	f011 f822 	bl	80126ec <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2104      	movs	r1, #4
 80016ac:	485f      	ldr	r0, [pc, #380]	; (800182c <I2CTask+0x530>)
 80016ae:	f008 fddb 	bl	800a268 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, &nPfISBank1Raw[i]) != HAL_OK)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4a5e      	ldr	r2, [pc, #376]	; (8001830 <I2CTask+0x534>)
 80016b8:	4413      	add	r3, r2
 80016ba:	4a5b      	ldr	r2, [pc, #364]	; (8001828 <I2CTask+0x52c>)
 80016bc:	2148      	movs	r1, #72	; 0x48
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	f005 fa88 	bl	8006bd4 <ADS1x15_ReadADC>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <I2CTask+0x3d2>
     {
        Error_Handler();
 80016ca:	f002 f847 	bl	800375c <Error_Handler>
   for(int i = 0; i < 2; i++){
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3301      	adds	r3, #1
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	ddd7      	ble.n	800168a <I2CTask+0x38e>
   }

   //=====================================================================================================
   // Scale to IS Values
   //=====================================================================================================
   Profet_UpdateIS(&pf[3], nPfISBank1Raw[1]);
 80016da:	4b55      	ldr	r3, [pc, #340]	; (8001830 <I2CTask+0x534>)
 80016dc:	885b      	ldrh	r3, [r3, #2]
 80016de:	4619      	mov	r1, r3
 80016e0:	4859      	ldr	r0, [pc, #356]	; (8001848 <I2CTask+0x54c>)
 80016e2:	f006 f8e9 	bl	80078b8 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[5], nPfISBank1Raw[0]);
 80016e6:	4b52      	ldr	r3, [pc, #328]	; (8001830 <I2CTask+0x534>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	4619      	mov	r1, r3
 80016ec:	4857      	ldr	r0, [pc, #348]	; (800184c <I2CTask+0x550>)
 80016ee:	f006 f8e3 	bl	80078b8 <Profet_UpdateIS>
   //=====================================================================================================
   // Profet I2C GPIO
   // PCA9555
   // PF1-6 Bank 1
   //=====================================================================================================
   InputLogic();
 80016f2:	f7ff fcf5 	bl	80010e0 <InputLogic>
   OutputLogic();
 80016f6:	f7ff fda5 	bl	8001244 <OutputLogic>
   PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 80016fa:	4b52      	ldr	r3, [pc, #328]	; (8001844 <I2CTask+0x548>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	2202      	movs	r2, #2
 8001700:	2174      	movs	r1, #116	; 0x74
 8001702:	68b8      	ldr	r0, [r7, #8]
 8001704:	f005 fcee 	bl	80070e4 <PCA9539_WriteReg16>

   //=====================================================================================================
   // MCP9808 temperature sensor
   //=====================================================================================================
   fBoardTempC = MCP9808_ReadTempC(hi2c1, MCP9808_ADDRESS);
 8001708:	2118      	movs	r1, #24
 800170a:	68b8      	ldr	r0, [r7, #8]
 800170c:	f005 faf8 	bl	8006d00 <MCP9808_ReadTempC>
 8001710:	eef0 7a40 	vmov.f32	s15, s0
 8001714:	4b4e      	ldr	r3, [pc, #312]	; (8001850 <I2CTask+0x554>)
 8001716:	edc3 7a00 	vstr	s15, [r3]
   fBoardTempF = MCP9808_ConvertToF(fBoardTempC);
 800171a:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <I2CTask+0x554>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	eeb0 0a67 	vmov.f32	s0, s15
 8001724:	f005 fb2e 	bl	8006d84 <MCP9808_ConvertToF>
 8001728:	eef0 7a40 	vmov.f32	s15, s0
 800172c:	4b49      	ldr	r3, [pc, #292]	; (8001854 <I2CTask+0x558>)
 800172e:	edc3 7a00 	vstr	s15, [r3]

   if(MCP9808_GetOvertemp()) printf("*******MCP9808 Overtemp Detected*******\n");
 8001732:	f005 fcab 	bl	800708c <MCP9808_GetOvertemp>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <I2CTask+0x446>
 800173c:	4846      	ldr	r0, [pc, #280]	; (8001858 <I2CTask+0x55c>)
 800173e:	f014 f9dd 	bl	8015afc <puts>
   if(MCP9808_GetCriticalTemp()) printf("*******MCP9808 CRITICAL Overtemp Detected*******\n");
 8001742:	f005 fc97 	bl	8007074 <MCP9808_GetCriticalTemp>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <I2CTask+0x456>
 800174c:	4843      	ldr	r0, [pc, #268]	; (800185c <I2CTask+0x560>)
 800174e:	f014 f9d5 	bl	8015afc <puts>
   //=====================================================================================================
   // Set Profet
   // DSEL to channel 1
   // Enable all DEN
   //=====================================================================================================
   pfGpioBank2 &= ~PF_BANK2_DSEL;
 8001752:	4b43      	ldr	r3, [pc, #268]	; (8001860 <I2CTask+0x564>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	f423 7308 	bic.w	r3, r3, #544	; 0x220
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b40      	ldr	r3, [pc, #256]	; (8001860 <I2CTask+0x564>)
 800175e:	801a      	strh	r2, [r3, #0]
   pfGpioBank2 |= PF_BANK2_DEN;
 8001760:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <I2CTask+0x564>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
 8001768:	f043 0305 	orr.w	r3, r3, #5
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <I2CTask+0x564>)
 8001770:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 8001772:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <I2CTask+0x564>)
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	2202      	movs	r2, #2
 8001778:	2174      	movs	r1, #116	; 0x74
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f005 fcb2 	bl	80070e4 <PCA9539_WriteReg16>

   //=====================================================================================================
   // ADS1115 Analog Input
   //=====================================================================================================
   for(int i = 0; i < 4; i++){
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	e024      	b.n	80017d0 <I2CTask+0x4d4>
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, i);
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	4a36      	ldr	r2, [pc, #216]	; (8001864 <I2CTask+0x568>)
 800178c:	2148      	movs	r1, #72	; 0x48
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f005 f9a4 	bl	8006adc <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 8001794:	2201      	movs	r2, #1
 8001796:	2104      	movs	r1, #4
 8001798:	4824      	ldr	r0, [pc, #144]	; (800182c <I2CTask+0x530>)
 800179a:	f008 fd65 	bl	800a268 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 800179e:	2002      	movs	r0, #2
 80017a0:	f010 ffa4 	bl	80126ec <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2104      	movs	r1, #4
 80017a8:	4820      	ldr	r0, [pc, #128]	; (800182c <I2CTask+0x530>)
 80017aa:	f008 fd5d 	bl	800a268 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, &nPfISBank2Raw[i]) != HAL_OK)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4a2d      	ldr	r2, [pc, #180]	; (8001868 <I2CTask+0x56c>)
 80017b4:	4413      	add	r3, r2
 80017b6:	4a2b      	ldr	r2, [pc, #172]	; (8001864 <I2CTask+0x568>)
 80017b8:	2148      	movs	r1, #72	; 0x48
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f005 fa0a 	bl	8006bd4 <ADS1x15_ReadADC>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <I2CTask+0x4ce>
     {
       Error_Handler();
 80017c6:	f001 ffc9 	bl	800375c <Error_Handler>
   for(int i = 0; i < 4; i++){
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	3301      	adds	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	ddd7      	ble.n	8001786 <I2CTask+0x48a>
     }
   }

   Profet_UpdateIS(&pf[6], nPfISBank2Raw[0]);
 80017d6:	4b24      	ldr	r3, [pc, #144]	; (8001868 <I2CTask+0x56c>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	4619      	mov	r1, r3
 80017dc:	4823      	ldr	r0, [pc, #140]	; (800186c <I2CTask+0x570>)
 80017de:	f006 f86b 	bl	80078b8 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[7], nPfISBank2Raw[1]);
 80017e2:	4b21      	ldr	r3, [pc, #132]	; (8001868 <I2CTask+0x56c>)
 80017e4:	885b      	ldrh	r3, [r3, #2]
 80017e6:	4619      	mov	r1, r3
 80017e8:	4821      	ldr	r0, [pc, #132]	; (8001870 <I2CTask+0x574>)
 80017ea:	f006 f865 	bl	80078b8 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[9], nPfISBank2Raw[2]);
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <I2CTask+0x56c>)
 80017f0:	889b      	ldrh	r3, [r3, #4]
 80017f2:	4619      	mov	r1, r3
 80017f4:	481f      	ldr	r0, [pc, #124]	; (8001874 <I2CTask+0x578>)
 80017f6:	f006 f85f 	bl	80078b8 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[11], nPfISBank2Raw[3]);
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <I2CTask+0x56c>)
 80017fc:	88db      	ldrh	r3, [r3, #6]
 80017fe:	4619      	mov	r1, r3
 8001800:	481d      	ldr	r0, [pc, #116]	; (8001878 <I2CTask+0x57c>)
 8001802:	f006 f859 	bl	80078b8 <Profet_UpdateIS>

   //=====================================================================================================
   //Flip Profet DSEL to channel 2
   //=====================================================================================================
   pfGpioBank2 |= PF_BANK2_DSEL;
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <I2CTask+0x564>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	f443 7308 	orr.w	r3, r3, #544	; 0x220
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <I2CTask+0x564>)
 8001812:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <I2CTask+0x564>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	2202      	movs	r2, #2
 800181a:	2174      	movs	r1, #116	; 0x74
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f005 fc61 	bl	80070e4 <PCA9539_WriteReg16>

   for(int i = 0; i < 2; i++){
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e051      	b.n	80018cc <I2CTask+0x5d0>
 8001828:	20000da4 	.word	0x20000da4
 800182c:	48000400 	.word	0x48000400
 8001830:	20000d94 	.word	0x20000d94
 8001834:	20000aec 	.word	0x20000aec
 8001838:	20000b24 	.word	0x20000b24
 800183c:	20000b5c 	.word	0x20000b5c
 8001840:	20000bcc 	.word	0x20000bcc
 8001844:	20000d8e 	.word	0x20000d8e
 8001848:	20000b94 	.word	0x20000b94
 800184c:	20000c04 	.word	0x20000c04
 8001850:	20000dc4 	.word	0x20000dc4
 8001854:	20000dc8 	.word	0x20000dc8
 8001858:	080164ac 	.word	0x080164ac
 800185c:	080164d4 	.word	0x080164d4
 8001860:	20000d90 	.word	0x20000d90
 8001864:	20000dac 	.word	0x20000dac
 8001868:	20000d9c 	.word	0x20000d9c
 800186c:	20000c3c 	.word	0x20000c3c
 8001870:	20000c74 	.word	0x20000c74
 8001874:	20000ce4 	.word	0x20000ce4
 8001878:	20000d54 	.word	0x20000d54
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, i+2);
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	3302      	adds	r3, #2
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4a64      	ldr	r2, [pc, #400]	; (8001a18 <I2CTask+0x71c>)
 8001886:	2148      	movs	r1, #72	; 0x48
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f005 f927 	bl	8006adc <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	2104      	movs	r1, #4
 8001892:	4862      	ldr	r0, [pc, #392]	; (8001a1c <I2CTask+0x720>)
 8001894:	f008 fce8 	bl	800a268 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 8001898:	2002      	movs	r0, #2
 800189a:	f010 ff27 	bl	80126ec <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2104      	movs	r1, #4
 80018a2:	485e      	ldr	r0, [pc, #376]	; (8001a1c <I2CTask+0x720>)
 80018a4:	f008 fce0 	bl	800a268 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, &nPfISBank2Raw[i+2]) != HAL_OK)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3302      	adds	r3, #2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4a5c      	ldr	r2, [pc, #368]	; (8001a20 <I2CTask+0x724>)
 80018b0:	4413      	add	r3, r2
 80018b2:	4a59      	ldr	r2, [pc, #356]	; (8001a18 <I2CTask+0x71c>)
 80018b4:	2148      	movs	r1, #72	; 0x48
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f005 f98c 	bl	8006bd4 <ADS1x15_ReadADC>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <I2CTask+0x5ca>
     {
       Error_Handler();
 80018c2:	f001 ff4b 	bl	800375c <Error_Handler>
   for(int i = 0; i < 2; i++){
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	ddd4      	ble.n	800187c <I2CTask+0x580>
   }

   //=====================================================================================================
   // Scale to IS Values
   //=====================================================================================================
   Profet_UpdateIS(&pf[8], nPfISBank2Raw[2]);
 80018d2:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <I2CTask+0x724>)
 80018d4:	889b      	ldrh	r3, [r3, #4]
 80018d6:	4619      	mov	r1, r3
 80018d8:	4852      	ldr	r0, [pc, #328]	; (8001a24 <I2CTask+0x728>)
 80018da:	f005 ffed 	bl	80078b8 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[10], nPfISBank2Raw[3]);
 80018de:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <I2CTask+0x724>)
 80018e0:	88db      	ldrh	r3, [r3, #6]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4850      	ldr	r0, [pc, #320]	; (8001a28 <I2CTask+0x72c>)
 80018e6:	f005 ffe7 	bl	80078b8 <Profet_UpdateIS>
   // Profet I2C GPIO
   // PCA9555
   // PF1-6 Bank 1
   // PF7-12 Bank 2
   //=====================================================================================================
   InputLogic();
 80018ea:	f7ff fbf9 	bl	80010e0 <InputLogic>
   OutputLogic();
 80018ee:	f7ff fca9 	bl	8001244 <OutputLogic>
   PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 80018f2:	4b4e      	ldr	r3, [pc, #312]	; (8001a2c <I2CTask+0x730>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	2202      	movs	r2, #2
 80018f8:	2174      	movs	r1, #116	; 0x74
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f005 fbf2 	bl	80070e4 <PCA9539_WriteReg16>

   //=====================================================================================================
   // Status LEDs
   //=====================================================================================================
   if(nLEDTestSeqIndex > 0)
 8001900:	4b4b      	ldr	r3, [pc, #300]	; (8001a30 <I2CTask+0x734>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d02b      	beq.n	8001960 <I2CTask+0x664>
   {
     nLEDTestSeqValues = (0x00000001 << ((nLEDTestSeqIndex-1)*2));
 8001908:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <I2CTask+0x734>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3b01      	subs	r3, #1
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2201      	movs	r2, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	461a      	mov	r2, r3
 8001918:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <I2CTask+0x738>)
 800191a:	601a      	str	r2, [r3, #0]

     PCA9635_SetAllNum(hi2c2, PCA9635_ADDRESS, nLEDTestSeqValues);
 800191c:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <I2CTask+0x738>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	2130      	movs	r1, #48	; 0x30
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f005 fc8b 	bl	8007240 <PCA9635_SetAllNum>

     if((HAL_GetTick() - nLEDTestSeqLastTime) > LED_TEST_SEQ_DELAY)
 800192a:	f006 f923 	bl	8007b74 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <I2CTask+0x73c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b32      	cmp	r3, #50	; 0x32
 8001938:	d90a      	bls.n	8001950 <I2CTask+0x654>
     {
       nLEDTestSeqLastTime = HAL_GetTick();
 800193a:	f006 f91b 	bl	8007b74 <HAL_GetTick>
 800193e:	4603      	mov	r3, r0
 8001940:	4a3d      	ldr	r2, [pc, #244]	; (8001a38 <I2CTask+0x73c>)
 8001942:	6013      	str	r3, [r2, #0]
       nLEDTestSeqIndex++;
 8001944:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <I2CTask+0x734>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	b2da      	uxtb	r2, r3
 800194c:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <I2CTask+0x734>)
 800194e:	701a      	strb	r2, [r3, #0]
     }

     //Last step
     if(nLEDTestSeqIndex > 16)
 8001950:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <I2CTask+0x734>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b10      	cmp	r3, #16
 8001956:	d950      	bls.n	80019fa <I2CTask+0x6fe>
       nLEDTestSeqIndex = 0;
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <I2CTask+0x734>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e04c      	b.n	80019fa <I2CTask+0x6fe>
   }
   else
   {
     for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	e00f      	b.n	8001986 <I2CTask+0x68a>
       SetPfStatusLed(&eStatusLeds[i], &pf[i]);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4a34      	ldr	r2, [pc, #208]	; (8001a3c <I2CTask+0x740>)
 800196a:	1898      	adds	r0, r3, r2
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4613      	mov	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4a32      	ldr	r2, [pc, #200]	; (8001a40 <I2CTask+0x744>)
 8001978:	4413      	add	r3, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f000 fed8 	bl	8002730 <SetPfStatusLed>
     for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	3301      	adds	r3, #1
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b0b      	cmp	r3, #11
 800198a:	ddec      	ble.n	8001966 <I2CTask+0x66a>
     }
     eStatusLeds[12] = (eDevMode == DEVICE_AUTO) + ((eDevMode == DEVICE_MANUAL) * LED_FLASH);              //State
 800198c:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <I2CTask+0x748>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <I2CTask+0x748>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <I2CTask+0x6ac>
 80019a4:	2303      	movs	r3, #3
 80019a6:	e000      	b.n	80019aa <I2CTask+0x6ae>
 80019a8:	2300      	movs	r3, #0
 80019aa:	4413      	add	r3, r2
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <I2CTask+0x740>)
 80019b0:	731a      	strb	r2, [r3, #12]
     eStatusLeds[13] = bUsbConnected;   //USB
 80019b2:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <I2CTask+0x74c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <I2CTask+0x740>)
 80019ba:	735a      	strb	r2, [r3, #13]
     eStatusLeds[14] = (HAL_GetTick() - nLastCanUpdate) < 1000;              //CAN
 80019bc:	f006 f8da 	bl	8007b74 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <I2CTask+0x750>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019cc:	4293      	cmp	r3, r2
 80019ce:	bf94      	ite	ls
 80019d0:	2301      	movls	r3, #1
 80019d2:	2300      	movhi	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <I2CTask+0x740>)
 80019da:	739a      	strb	r2, [r3, #14]
     eStatusLeds[15] = (eDevState == DEVICE_ERROR);   //Fault
 80019dc:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <I2CTask+0x754>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <I2CTask+0x740>)
 80019ee:	73da      	strb	r2, [r3, #15]
     PCA9635_SetAll(hi2c2, PCA9635_ADDRESS, eStatusLeds);
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <I2CTask+0x740>)
 80019f2:	2130      	movs	r1, #48	; 0x30
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f005 fc4a 	bl	800728e <PCA9635_SetAll>
   }

   //Debug GPIO
   HAL_GPIO_TogglePin(EXTRA1_GPIO_Port, EXTRA1_Pin);
 80019fa:	2104      	movs	r1, #4
 80019fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a00:	f008 fc4a 	bl	800a298 <HAL_GPIO_TogglePin>
   HAL_GPIO_TogglePin(EXTRA3_GPIO_Port, EXTRA3_Pin);
 8001a04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0c:	f008 fc44 	bl	800a298 <HAL_GPIO_TogglePin>

#ifdef MEAS_HEAP_USE
   __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

   osDelay(I2C_TASK_DELAY);
 8001a10:	2005      	movs	r0, #5
 8001a12:	f010 fe6b 	bl	80126ec <osDelay>
   nUserDigInputRaw = PCAL9554B_ReadReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_IN_PORT);
 8001a16:	e548      	b.n	80014aa <I2CTask+0x1ae>
 8001a18:	20000dac 	.word	0x20000dac
 8001a1c:	48000400 	.word	0x48000400
 8001a20:	20000d9c 	.word	0x20000d9c
 8001a24:	20000cac 	.word	0x20000cac
 8001a28:	20000d1c 	.word	0x20000d1c
 8001a2c:	20000d90 	.word	0x20000d90
 8001a30:	20000de8 	.word	0x20000de8
 8001a34:	20000dec 	.word	0x20000dec
 8001a38:	20000df0 	.word	0x20000df0
 8001a3c:	20000dd8 	.word	0x20000dd8
 8001a40:	20000aec 	.word	0x20000aec
 8001a44:	20000ae8 	.word	0x20000ae8
 8001a48:	20000dc0 	.word	0x20000dc0
 8001a4c:	20000e3c 	.word	0x20000e3c
 8001a50:	20000ae9 	.word	0x20000ae9

08001a54 <ProfetSMTask>:
 }
}


void ProfetSMTask(osThreadId_t* thisThreadId)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b0a9      	sub	sp, #164	; 0xa4
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  Profet_Init();
 8001a5c:	f000 feb0 	bl	80027c0 <Profet_Init>

  MsgQueueUsbTx_t stMsgUsbTx;
  MsgQueueCanTx_t stMsgCanTx;

  RTC_TimeTypeDef stTime = {0};
 8001a60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef stDate = {0};
 8001a70:	2300      	movs	r3, #0
 8001a72:	64bb      	str	r3, [r7, #72]	; 0x48

  uint8_t nSend;

  for(;;){
    for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a7a:	e00f      	b.n	8001a9c <ProfetSMTask+0x48>
      Profet_SM(&pf[i]);
 8001a7c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a80:	4613      	mov	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	1a9b      	subs	r3, r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4aad      	ldr	r2, [pc, #692]	; (8001d40 <ProfetSMTask+0x2ec>)
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f005 feaf 	bl	80077f0 <Profet_SM>
    for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8001a92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a96:	3301      	adds	r3, #1
 8001a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aa0:	2b0b      	cmp	r3, #11
 8001aa2:	ddeb      	ble.n	8001a7c <ProfetSMTask+0x28>
    }
    //WiperSM(&stWiper);
    MsgQueueRx_t stMsgRx;
    osStatus_t eStatus;

    nMsgCnt = osMessageQueueGetCount(qMsgQueueRx);
 8001aa4:	4ba7      	ldr	r3, [pc, #668]	; (8001d44 <ProfetSMTask+0x2f0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f010 ffb9 	bl	8012a20 <osMessageQueueGetCount>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4aa5      	ldr	r2, [pc, #660]	; (8001d48 <ProfetSMTask+0x2f4>)
 8001ab2:	6013      	str	r3, [r2, #0]
    if(nMsgCnt == 16)
      EXTRA2_GPIO_Port->ODR |= EXTRA2_Pin;
    else
      EXTRA2_GPIO_Port->ODR &= ~EXTRA2_Pin;
*/
    eStatus = osMessageQueueGet(qMsgQueueRx, &stMsgRx, NULL, 0U);
 8001ab4:	4ba3      	ldr	r3, [pc, #652]	; (8001d44 <ProfetSMTask+0x2f0>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	f107 010c 	add.w	r1, r7, #12
 8001abc:	2300      	movs	r3, #0
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f010 ff3c 	bl	801293c <osMessageQueueGet>
 8001ac4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if(eStatus == osOK){
 8001ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f040 834a 	bne.w	8002166 <ProfetSMTask+0x712>
      if(stMsgRx.eMsgSrc == CAN_RX){
 8001ad2:	7b3b      	ldrb	r3, [r7, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d126      	bne.n	8001b26 <ProfetSMTask+0xd2>
        for(int i=0; i<PDM_NUM_CAN_INPUTS; i++){
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ade:	e01e      	b.n	8001b1e <ProfetSMTask+0xca>
          EvaluateCANInput(&stMsgRx.stCanRxHeader, stMsgRx.nRxData, &stPdmConfig.stCanInput[i], &nCanInputs[i]);
 8001ae0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8001af0:	4a96      	ldr	r2, [pc, #600]	; (8001d4c <ProfetSMTask+0x2f8>)
 8001af2:	4413      	add	r3, r2
 8001af4:	1d1a      	adds	r2, r3, #4
 8001af6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4994      	ldr	r1, [pc, #592]	; (8001d50 <ProfetSMTask+0x2fc>)
 8001afe:	185c      	adds	r4, r3, r1
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	f103 0120 	add.w	r1, r3, #32
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	1d18      	adds	r0, r3, #4
 8001b0e:	4623      	mov	r3, r4
 8001b10:	f7fe ff9c 	bl	8000a4c <EvaluateCANInput>
        for(int i=0; i<PDM_NUM_CAN_INPUTS; i++){
 8001b14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b22:	2b1d      	cmp	r3, #29
 8001b24:	dddc      	ble.n	8001ae0 <ProfetSMTask+0x8c>
        }
      }
      if((stMsgRx.eMsgSrc == CAN_RX && stMsgRx.stCanRxHeader.StdId == stPdmConfig.stCanOutput.nBaseId + 21) || (stMsgRx.eMsgSrc == USB_RX)){
 8001b26:	7b3b      	ldrb	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d106      	bne.n	8001b3a <ProfetSMTask+0xe6>
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4a87      	ldr	r2, [pc, #540]	; (8001d4c <ProfetSMTask+0x2f8>)
 8001b30:	f8b2 28d6 	ldrh.w	r2, [r2, #2262]	; 0x8d6
 8001b34:	3215      	adds	r2, #21
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d003      	beq.n	8001b42 <ProfetSMTask+0xee>
 8001b3a:	7b3b      	ldrb	r3, [r7, #12]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	f040 8312 	bne.w	8002166 <ProfetSMTask+0x712>
        //EXTRA2_GPIO_Port->ODR ^= EXTRA2_Pin;

        nSend = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

        switch((MsgQueueRxCmd_t)stMsgRx.nRxData[0]){
 8001b48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b4c:	3b42      	subs	r3, #66	; 0x42
 8001b4e:	2b12      	cmp	r3, #18
 8001b50:	f200 8301 	bhi.w	8002156 <ProfetSMTask+0x702>
 8001b54:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <ProfetSMTask+0x108>)
 8001b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5a:	bf00      	nop
 8001b5c:	08001ba9 	.word	0x08001ba9
 8001b60:	08002157 	.word	0x08002157
 8001b64:	08002157 	.word	0x08002157
 8001b68:	08002157 	.word	0x08002157
 8001b6c:	08002157 	.word	0x08002157
 8001b70:	08002157 	.word	0x08002157
 8001b74:	08002157 	.word	0x08002157
 8001b78:	08002157 	.word	0x08002157
 8001b7c:	08002157 	.word	0x08002157
 8001b80:	08002157 	.word	0x08002157
 8001b84:	08002157 	.word	0x08002157
 8001b88:	08001c47 	.word	0x08001c47
 8001b8c:	08002157 	.word	0x08002157
 8001b90:	08002157 	.word	0x08002157
 8001b94:	08002157 	.word	0x08002157
 8001b98:	08001d65 	.word	0x08001d65
 8001b9c:	08001fa1 	.word	0x08001fa1
 8001ba0:	08002157 	.word	0x08002157
 8001ba4:	08002079 	.word	0x08002079

            //Burn Settings
            // 'B'
            case MSG_RX_BURN_SETTINGS:
              //Check special number sequence
              if(stMsgRx.nRxLen == 4){
 8001ba8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	f040 82dc 	bne.w	800216a <ProfetSMTask+0x716>
                if((stMsgRx.nRxData[1] == 1) && (stMsgRx.nRxData[2] == 23) && (stMsgRx.nRxData[3] == 20)){
 8001bb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	f040 82d7 	bne.w	800216a <ProfetSMTask+0x716>
 8001bbc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001bc0:	2b17      	cmp	r3, #23
 8001bc2:	f040 82d2 	bne.w	800216a <ProfetSMTask+0x716>
 8001bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bca:	2b14      	cmp	r3, #20
 8001bcc:	f040 82cd 	bne.w	800216a <ProfetSMTask+0x716>
                  //Write settings to FRAM
                  //uint8_t nRet = PdmConfig_Write(hi2c2, MB85RC_ADDRESS, &stPdmConfig);
                  //TODO: Use flag to I2C task

                  stMsgUsbTx.nTxLen = 2;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                  stMsgCanTx.stTxHeader.DLC = 2;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	673b      	str	r3, [r7, #112]	; 0x70

                  stMsgUsbTx.nTxData[0] = MSG_TX_BURN_SETTINGS;
 8001bda:	2362      	movs	r3, #98	; 0x62
 8001bdc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
                  stMsgUsbTx.nTxData[1] = 0;// nRet;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
                  stMsgUsbTx.nTxData[2] = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                  stMsgUsbTx.nTxData[3] = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                  stMsgUsbTx.nTxData[4] = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                  stMsgUsbTx.nTxData[5] = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                  stMsgUsbTx.nTxData[6] = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                  stMsgUsbTx.nTxData[7] = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                  stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001c0a:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <ProfetSMTask+0x2f8>)
 8001c0c:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8001c10:	3314      	adds	r3, #20
 8001c12:	663b      	str	r3, [r7, #96]	; 0x60

                  memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001c14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c18:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001c1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c20:	e883 0003 	stmia.w	r3, {r0, r1}

                  osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001c24:	4b4b      	ldr	r3, [pc, #300]	; (8001d54 <ProfetSMTask+0x300>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f010 fe10 	bl	8012854 <osMessageQueuePut>
                  osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001c34:	4b48      	ldr	r3, [pc, #288]	; (8001d58 <ProfetSMTask+0x304>)
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f010 fe08 	bl	8012854 <osMessageQueuePut>
                }
              }
            break;
 8001c44:	e291      	b.n	800216a <ProfetSMTask+0x716>

           //Set Mode
           // 'M'
           case MSG_RX_SET_MODE:
             if(stMsgRx.nRxLen == 2){
 8001c46:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d133      	bne.n	8001cb6 <ProfetSMTask+0x262>
               switch(eDevMode){
 8001c4e:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <ProfetSMTask+0x308>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <ProfetSMTask+0x208>
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d01d      	beq.n	8001c96 <ProfetSMTask+0x242>
 8001c5a:	e029      	b.n	8001cb0 <ProfetSMTask+0x25c>
               case DEVICE_AUTO:
                 if(stMsgRx.nRxData[1] & 0x01){ //Manual sent
 8001c5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <ProfetSMTask+0x256>
                   for(int i=0; i<12; i++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c6e:	e00a      	b.n	8001c86 <ProfetSMTask+0x232>
                     nManualOutputs[i] = 0;
 8001c70:	4a3b      	ldr	r2, [pc, #236]	; (8001d60 <ProfetSMTask+0x30c>)
 8001c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c76:	4413      	add	r3, r2
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
                   for(int i=0; i<12; i++)
 8001c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c80:	3301      	adds	r3, #1
 8001c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c8a:	2b0b      	cmp	r3, #11
 8001c8c:	ddf0      	ble.n	8001c70 <ProfetSMTask+0x21c>
                   eDevMode = DEVICE_MANUAL;
 8001c8e:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <ProfetSMTask+0x308>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 8001c94:	e009      	b.n	8001caa <ProfetSMTask+0x256>

               case DEVICE_MANUAL:
                 if(!(stMsgRx.nRxData[1] & 0x01)){ //Auto sent
 8001c96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d105      	bne.n	8001cae <ProfetSMTask+0x25a>
                   eDevMode = DEVICE_AUTO;
 8001ca2:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <ProfetSMTask+0x308>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 8001ca8:	e001      	b.n	8001cae <ProfetSMTask+0x25a>
                 break;
 8001caa:	bf00      	nop
 8001cac:	e000      	b.n	8001cb0 <ProfetSMTask+0x25c>
                 break;
 8001cae:	bf00      	nop
               }
               nSend = 1;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
             }

             if((stMsgRx.nRxLen == 1) || (nSend)){
 8001cb6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d004      	beq.n	8001cc8 <ProfetSMTask+0x274>
 8001cbe:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8253 	beq.w	800216e <ProfetSMTask+0x71a>
               stMsgUsbTx.nTxLen = 2;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgCanTx.stTxHeader.DLC = 2;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	673b      	str	r3, [r7, #112]	; 0x70

               stMsgUsbTx.nTxData[0] = MSG_TX_SET_MODE;
 8001cd2:	236d      	movs	r3, #109	; 0x6d
 8001cd4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
               stMsgUsbTx.nTxData[1] = (uint8_t)eDevMode;
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <ProfetSMTask+0x308>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
               stMsgUsbTx.nTxData[2] = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
               stMsgUsbTx.nTxData[3] = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
               stMsgUsbTx.nTxData[4] = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
               stMsgUsbTx.nTxData[5] = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
               stMsgUsbTx.nTxData[6] = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
               stMsgUsbTx.nTxData[7] = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <ProfetSMTask+0x2f8>)
 8001d06:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8001d0a:	3314      	adds	r3, #20
 8001d0c:	663b      	str	r3, [r7, #96]	; 0x60

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001d0e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d12:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001d16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d1a:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <ProfetSMTask+0x300>)
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001d26:	2300      	movs	r3, #0
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f010 fd93 	bl	8012854 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <ProfetSMTask+0x304>)
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001d36:	2300      	movs	r3, #0
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f010 fd8b 	bl	8012854 <osMessageQueuePut>
             }
           break;
 8001d3e:	e216      	b.n	800216e <ProfetSMTask+0x71a>
 8001d40:	20000aec 	.word	0x20000aec
 8001d44:	20000adc 	.word	0x20000adc
 8001d48:	200010a4 	.word	0x200010a4
 8001d4c:	20000200 	.word	0x20000200
 8001d50:	20000ff8 	.word	0x20000ff8
 8001d54:	20000ae0 	.word	0x20000ae0
 8001d58:	20000ae4 	.word	0x20000ae4
 8001d5c:	20000ae8 	.word	0x20000ae8
 8001d60:	2000236c 	.word	0x2000236c


           //Force Outputs
           // 'Q'
           case MSG_RX_FORCE_OUTPUTS:
             if(stMsgRx.nRxLen == 7){
 8001d64:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d68:	2b07      	cmp	r3, #7
 8001d6a:	d16b      	bne.n	8001e44 <ProfetSMTask+0x3f0>
               if(eDevMode == DEVICE_MANUAL){
 8001d6c:	4b87      	ldr	r3, [pc, #540]	; (8001f8c <ProfetSMTask+0x538>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d167      	bne.n	8001e44 <ProfetSMTask+0x3f0>
                 nManualOutputs[0] = (stMsgRx.nRxData[1] & 0x01);
 8001d74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b84      	ldr	r3, [pc, #528]	; (8001f90 <ProfetSMTask+0x53c>)
 8001d80:	701a      	strb	r2, [r3, #0]
                 nManualOutputs[1] = (stMsgRx.nRxData[1] & 0x02) >> 1;
 8001d82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d86:	105b      	asrs	r3, r3, #1
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b7f      	ldr	r3, [pc, #508]	; (8001f90 <ProfetSMTask+0x53c>)
 8001d92:	705a      	strb	r2, [r3, #1]
                 nManualOutputs[2] = (stMsgRx.nRxData[1] & 0x04) >> 2;
 8001d94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d98:	109b      	asrs	r3, r3, #2
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b7b      	ldr	r3, [pc, #492]	; (8001f90 <ProfetSMTask+0x53c>)
 8001da4:	709a      	strb	r2, [r3, #2]
                 nManualOutputs[3] = (stMsgRx.nRxData[1] & 0x08) >> 3;
 8001da6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001daa:	10db      	asrs	r3, r3, #3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <ProfetSMTask+0x53c>)
 8001db6:	70da      	strb	r2, [r3, #3]
                 nManualOutputs[4] = (stMsgRx.nRxData[1] & 0x10) >> 4;
 8001db8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dbc:	111b      	asrs	r3, r3, #4
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b72      	ldr	r3, [pc, #456]	; (8001f90 <ProfetSMTask+0x53c>)
 8001dc8:	711a      	strb	r2, [r3, #4]
                 nManualOutputs[5] = (stMsgRx.nRxData[1] & 0x20) >> 5;
 8001dca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dce:	115b      	asrs	r3, r3, #5
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b6d      	ldr	r3, [pc, #436]	; (8001f90 <ProfetSMTask+0x53c>)
 8001dda:	715a      	strb	r2, [r3, #5]
                 nManualOutputs[6] = (stMsgRx.nRxData[1] & 0x40) >> 6;
 8001ddc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001de0:	119b      	asrs	r3, r3, #6
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b69      	ldr	r3, [pc, #420]	; (8001f90 <ProfetSMTask+0x53c>)
 8001dec:	719a      	strb	r2, [r3, #6]
                 nManualOutputs[7] = (stMsgRx.nRxData[1] & 0x80) >> 7;
 8001dee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001df2:	09db      	lsrs	r3, r3, #7
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <ProfetSMTask+0x53c>)
 8001df8:	71da      	strb	r2, [r3, #7]
                 nManualOutputs[8] = (stMsgRx.nRxData[2] & 0x01);
 8001dfa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b62      	ldr	r3, [pc, #392]	; (8001f90 <ProfetSMTask+0x53c>)
 8001e06:	721a      	strb	r2, [r3, #8]
                 nManualOutputs[9] = (stMsgRx.nRxData[2] & 0x02) >> 1;
 8001e08:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e0c:	105b      	asrs	r3, r3, #1
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b5e      	ldr	r3, [pc, #376]	; (8001f90 <ProfetSMTask+0x53c>)
 8001e18:	725a      	strb	r2, [r3, #9]
                 nManualOutputs[10] = (stMsgRx.nRxData[2] & 0x04) >> 2;
 8001e1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e1e:	109b      	asrs	r3, r3, #2
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <ProfetSMTask+0x53c>)
 8001e2a:	729a      	strb	r2, [r3, #10]
                 nManualOutputs[11] = (stMsgRx.nRxData[2] & 0x08) >> 3;
 8001e2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e30:	10db      	asrs	r3, r3, #3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b55      	ldr	r3, [pc, #340]	; (8001f90 <ProfetSMTask+0x53c>)
 8001e3c:	72da      	strb	r2, [r3, #11]
                 nSend = 1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
               }
             }
             if((stMsgRx.nRxLen == 1) || (nSend)){
 8001e44:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d004      	beq.n	8001e56 <ProfetSMTask+0x402>
 8001e4c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 818e 	beq.w	8002172 <ProfetSMTask+0x71e>
               stMsgUsbTx.nTxLen = 7;
 8001e56:	2307      	movs	r3, #7
 8001e58:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgCanTx.stTxHeader.DLC = 7;
 8001e5c:	2307      	movs	r3, #7
 8001e5e:	673b      	str	r3, [r7, #112]	; 0x70

               stMsgUsbTx.nTxData[0] = MSG_TX_FORCE_OUTPUTS;
 8001e60:	2371      	movs	r3, #113	; 0x71
 8001e62:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8001e66:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <ProfetSMTask+0x53c>)
 8001e68:	79db      	ldrb	r3, [r3, #7]
 8001e6a:	01db      	lsls	r3, r3, #7
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b48      	ldr	r3, [pc, #288]	; (8001f90 <ProfetSMTask+0x53c>)
 8001e70:	799b      	ldrb	r3, [r3, #6]
 8001e72:	019b      	lsls	r3, r3, #6
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <ProfetSMTask+0x53c>)
 8001e82:	795b      	ldrb	r3, [r3, #5]
 8001e84:	015b      	lsls	r3, r3, #5
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8001e8e:	4413      	add	r3, r2
 8001e90:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8001e92:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <ProfetSMTask+0x53c>)
 8001e94:	791b      	ldrb	r3, [r3, #4]
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8001ea4:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <ProfetSMTask+0x53c>)
 8001ea6:	78db      	ldrb	r3, [r3, #3]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	b2db      	uxtb	r3, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8001eb6:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <ProfetSMTask+0x53c>)
 8001eb8:	789b      	ldrb	r3, [r3, #2]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[1] & 0x01) << 1) + (nManualOutputs[0] & 0x01);
 8001ec8:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <ProfetSMTask+0x53c>)
 8001eca:	785b      	ldrb	r3, [r3, #1]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	b2db      	uxtb	r3, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[1] & 0x01) << 1) + (nManualOutputs[0] & 0x01);
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <ProfetSMTask+0x53c>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8001ee8:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8001eec:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <ProfetSMTask+0x53c>)
 8001eee:	7adb      	ldrb	r3, [r3, #11]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	b25b      	sxtb	r3, r3
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	b25a      	sxtb	r2, r3
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <ProfetSMTask+0x53c>)
 8001efc:	7a9b      	ldrb	r3, [r3, #10]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	b25b      	sxtb	r3, r3
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	b25b      	sxtb	r3, r3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b25b      	sxtb	r3, r3
 8001f0c:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[9] & 0x01) << 1) + (nManualOutputs[8] & 0x01);
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <ProfetSMTask+0x53c>)
 8001f10:	7a5b      	ldrb	r3, [r3, #9]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[9] & 0x01) << 1) + (nManualOutputs[8] & 0x01);
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <ProfetSMTask+0x53c>)
 8001f22:	7a1b      	ldrb	r3, [r3, #8]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8001f2e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

               //TODO:Add manual output modes
               stMsgUsbTx.nTxData[3] = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
               stMsgUsbTx.nTxData[4] = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
               stMsgUsbTx.nTxData[5] = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
               stMsgUsbTx.nTxData[6] = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
               stMsgUsbTx.nTxData[7] = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <ProfetSMTask+0x540>)
 8001f52:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8001f56:	3314      	adds	r3, #20
 8001f58:	663b      	str	r3, [r7, #96]	; 0x60

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001f5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f5e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f66:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <ProfetSMTask+0x544>)
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001f72:	2300      	movs	r3, #0
 8001f74:	2200      	movs	r2, #0
 8001f76:	f010 fc6d 	bl	8012854 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <ProfetSMTask+0x548>)
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001f82:	2300      	movs	r3, #0
 8001f84:	2200      	movs	r2, #0
 8001f86:	f010 fc65 	bl	8012854 <osMessageQueuePut>
             }
           break;
 8001f8a:	e0f2      	b.n	8002172 <ProfetSMTask+0x71e>
 8001f8c:	20000ae8 	.word	0x20000ae8
 8001f90:	2000236c 	.word	0x2000236c
 8001f94:	20000200 	.word	0x20000200
 8001f98:	20000ae0 	.word	0x20000ae0
 8001f9c:	20000ae4 	.word	0x20000ae4

           //Set Reporting
           // 'R'
           case MSG_RX_SET_REPORTING:
             if(stMsgRx.nRxLen == 3){
 8001fa0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d118      	bne.n	8001fda <ProfetSMTask+0x586>
               nReportingOn = stMsgRx.nRxData[1] & 0x01;
 8001fa8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b80      	ldr	r3, [pc, #512]	; (80021b4 <ProfetSMTask+0x760>)
 8001fb4:	701a      	strb	r2, [r3, #0]
               nReportingDelay = stMsgRx.nRxData[2] * 100;
 8001fb6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	0091      	lsls	r1, r2, #2
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <ProfetSMTask+0x764>)
 8001fd2:	801a      	strh	r2, [r3, #0]
               nSend = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
             }
             if((stMsgRx.nRxLen == 1) || (nSend)){
 8001fda:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d004      	beq.n	8001fec <ProfetSMTask+0x598>
 8001fe2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80c5 	beq.w	8002176 <ProfetSMTask+0x722>
               stMsgUsbTx.nTxLen = 3;
 8001fec:	2303      	movs	r3, #3
 8001fee:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgCanTx.stTxHeader.DLC = 3;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	673b      	str	r3, [r7, #112]	; 0x70

               stMsgUsbTx.nTxData[0] = MSG_TX_SET_REPORTING;
 8001ff6:	2372      	movs	r3, #114	; 0x72
 8001ff8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
               stMsgUsbTx.nTxData[1] = (nReportingOn & 0x01);
 8001ffc:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <ProfetSMTask+0x760>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
               stMsgUsbTx.nTxData[2] = (uint8_t)(nReportingDelay / 100);
 800200a:	4b6b      	ldr	r3, [pc, #428]	; (80021b8 <ProfetSMTask+0x764>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	4a6b      	ldr	r2, [pc, #428]	; (80021bc <ProfetSMTask+0x768>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	b29b      	uxth	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
               stMsgUsbTx.nTxData[3] = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
               stMsgUsbTx.nTxData[4] = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
               stMsgUsbTx.nTxData[5] = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
               stMsgUsbTx.nTxData[6] = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
               stMsgUsbTx.nTxData[7] = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 800203c:	4b60      	ldr	r3, [pc, #384]	; (80021c0 <ProfetSMTask+0x76c>)
 800203e:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8002042:	3314      	adds	r3, #20
 8002044:	663b      	str	r3, [r7, #96]	; 0x60

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8002046:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800204a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800204e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002052:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8002056:	4b5b      	ldr	r3, [pc, #364]	; (80021c4 <ProfetSMTask+0x770>)
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800205e:	2300      	movs	r3, #0
 8002060:	2200      	movs	r2, #0
 8002062:	f010 fbf7 	bl	8012854 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8002066:	4b58      	ldr	r3, [pc, #352]	; (80021c8 <ProfetSMTask+0x774>)
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800206e:	2300      	movs	r3, #0
 8002070:	2200      	movs	r2, #0
 8002072:	f010 fbef 	bl	8012854 <osMessageQueuePut>
             }
           break;
 8002076:	e07e      	b.n	8002176 <ProfetSMTask+0x722>

           //Set Time
           // 'T'
           case MSG_RX_SET_TIME:
             if(stMsgRx.nRxLen == 7){
 8002078:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800207c:	2b07      	cmp	r3, #7
 800207e:	d121      	bne.n	80020c4 <ProfetSMTask+0x670>
               stTime.Hours = stMsgRx.nRxData[1];
 8002080:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002084:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
               stTime.Minutes = stMsgRx.nRxData[2];
 8002088:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800208c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
               stTime.Seconds = stMsgRx.nRxData[3];
 8002090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002094:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
               stTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002098:	2300      	movs	r3, #0
 800209a:	65bb      	str	r3, [r7, #88]	; 0x58
               stTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	65fb      	str	r3, [r7, #92]	; 0x5c

               stDate.Year = stMsgRx.nRxData[4];
 80020a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80020a4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
               stDate.Month = stMsgRx.nRxData[5];
 80020a8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80020ac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
               stDate.Date = stMsgRx.nRxData[6];
 80020b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80020b4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
               stDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

               //HAL_RTC_SetTime(hrtc, &stTime, RTC_FORMAT_BCD);
               //HAL_RTC_SetDate(hrtc, &stDate, RTC_FORMAT_BCD);
               //TODO: Use flag to Main task
               nSend = 1;
 80020be:	2301      	movs	r3, #1
 80020c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
             }

             if((stMsgRx.nRxLen == 1) || nSend){
 80020c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d003      	beq.n	80020d4 <ProfetSMTask+0x680>
 80020cc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d052      	beq.n	800217a <ProfetSMTask+0x726>
                 //HAL_RTC_GetTime(hrtc, &stTime, RTC_FORMAT_BCD);
                 //HAL_RTC_GetDate(hrtc, &stDate, RTC_FORMAT_BCD);
                 //TODO: Use flag to Main task

                 stMsgUsbTx.nTxLen = 7;
 80020d4:	2307      	movs	r3, #7
 80020d6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                 stMsgCanTx.stTxHeader.DLC = 7;
 80020da:	2307      	movs	r3, #7
 80020dc:	673b      	str	r3, [r7, #112]	; 0x70

                 stMsgUsbTx.nTxData[0] = MSG_TX_SET_TIME;
 80020de:	2374      	movs	r3, #116	; 0x74
 80020e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
                 stMsgUsbTx.nTxData[1] = stTime.Hours;
 80020e4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80020e8:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
                 stMsgUsbTx.nTxData[2] = stTime.Minutes;
 80020ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020f0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                 stMsgUsbTx.nTxData[3] = stTime.Seconds;
 80020f4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80020f8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                 stMsgUsbTx.nTxData[4] = stDate.Year;
 80020fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002100:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                 stMsgUsbTx.nTxData[5] = stDate.Month;
 8002104:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002108:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                 stMsgUsbTx.nTxData[6] = stDate.Date;
 800210c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002110:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                 stMsgUsbTx.nTxData[7] = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                 stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <ProfetSMTask+0x76c>)
 800211c:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8002120:	3314      	adds	r3, #20
 8002122:	663b      	str	r3, [r7, #96]	; 0x60

                 memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8002124:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002128:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800212c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002130:	e883 0003 	stmia.w	r3, {r0, r1}

                 osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8002134:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <ProfetSMTask+0x770>)
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800213c:	2300      	movs	r3, #0
 800213e:	2200      	movs	r2, #0
 8002140:	f010 fb88 	bl	8012854 <osMessageQueuePut>
                 osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8002144:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <ProfetSMTask+0x774>)
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800214c:	2300      	movs	r3, #0
 800214e:	2200      	movs	r2, #0
 8002150:	f010 fb80 	bl	8012854 <osMessageQueuePut>
             }


             break;
 8002154:	e011      	b.n	800217a <ProfetSMTask+0x726>

           default:
             PdmConfig_Set(&stPdmConfig, &stMsgRx, &qMsgQueueUsbTx, &qMsgQueueCanTx);
 8002156:	f107 010c 	add.w	r1, r7, #12
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <ProfetSMTask+0x774>)
 800215c:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <ProfetSMTask+0x770>)
 800215e:	4818      	ldr	r0, [pc, #96]	; (80021c0 <ProfetSMTask+0x76c>)
 8002160:	f001 fb04 	bl	800376c <PdmConfig_Set>
             break;
 8002164:	e00a      	b.n	800217c <ProfetSMTask+0x728>
        }
      }
 8002166:	bf00      	nop
 8002168:	e008      	b.n	800217c <ProfetSMTask+0x728>
            break;
 800216a:	bf00      	nop
 800216c:	e006      	b.n	800217c <ProfetSMTask+0x728>
           break;
 800216e:	bf00      	nop
 8002170:	e004      	b.n	800217c <ProfetSMTask+0x728>
           break;
 8002172:	bf00      	nop
 8002174:	e002      	b.n	800217c <ProfetSMTask+0x728>
           break;
 8002176:	bf00      	nop
 8002178:	e000      	b.n	800217c <ProfetSMTask+0x728>
             break;
 800217a:	bf00      	nop
    }

    MsgQueueUsbTx_t stMsgTx;
    if(osMessageQueueGet(qMsgQueueUsbTx, &stMsgTx, NULL, 0U) == osOK){
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <ProfetSMTask+0x770>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002184:	2300      	movs	r3, #0
 8002186:	2200      	movs	r2, #0
 8002188:	f010 fbd8 	bl	801293c <osMessageQueueGet>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <ProfetSMTask+0x758>
      if(bUsbConnected){
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <ProfetSMTask+0x778>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <ProfetSMTask+0x758>
        //memcpy(&nUsbMsgTx, &stMsgTx.nTxData, stMsgTx.nTxLen);
        //nUsbMsgTx[stMsgTx.nTxLen] = '\r';
        if(USBD_CDC_Transmit((uint8_t*)stMsgTx.nTxData, stMsgTx.nTxLen) != USBD_OK){
 800219a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800219e:	b29a      	uxth	r2, r3
 80021a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fe10 	bl	8000dcc <USBD_CDC_Transmit>

#ifdef MEAS_HEAP_USE
    __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

    osDelay(5);
 80021ac:	2005      	movs	r0, #5
 80021ae:	f010 fa9d 	bl	80126ec <osDelay>
  for(;;){
 80021b2:	e45f      	b.n	8001a74 <ProfetSMTask+0x20>
 80021b4:	20002378 	.word	0x20002378
 80021b8:	2000237a 	.word	0x2000237a
 80021bc:	51eb851f 	.word	0x51eb851f
 80021c0:	20000200 	.word	0x20000200
 80021c4:	20000ae0 	.word	0x20000ae0
 80021c8:	20000ae4 	.word	0x20000ae4
 80021cc:	20000dc0 	.word	0x20000dc0

080021d0 <CanTxTask>:
  }

}

void CanTxTask(osThreadId_t* thisThreadId, CAN_HandleTypeDef* hcan)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b096      	sub	sp, #88	; 0x58
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  //Configure the CAN Filter
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	643b      	str	r3, [r7, #64]	; 0x40
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80021de:	2300      	movs	r3, #0
 80021e0:	647b      	str	r3, [r7, #68]	; 0x44
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80021e2:	2301      	movs	r3, #1
 80021e4:	64bb      	str	r3, [r7, #72]	; 0x48
  sFilterConfig.FilterIdHigh = 0x0000;
 80021e6:	2300      	movs	r3, #0
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sFilterConfig.FilterIdLow = 0x0000;
 80021ea:	2300      	movs	r3, #0
 80021ec:	633b      	str	r3, [r7, #48]	; 0x30
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80021ee:	2300      	movs	r3, #0
 80021f0:	637b      	str	r3, [r7, #52]	; 0x34
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80021f2:	2300      	movs	r3, #0
 80021f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sFilterConfig.FilterActivation = ENABLE;
 80021fa:	2301      	movs	r3, #1
 80021fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sFilterConfig.SlaveStartFilterBank = 14;
 80021fe:	230e      	movs	r3, #14
 8002200:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8002202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002206:	4619      	mov	r1, r3
 8002208:	6838      	ldr	r0, [r7, #0]
 800220a:	f006 fde2 	bl	8008dd2 <HAL_CAN_ConfigFilter>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <CanTxTask+0x48>
  {
    /* Filter configuration Error */
    Error_Handler();
 8002214:	f001 faa2 	bl	800375c <Error_Handler>
  }

  //Start the CAN periphera
  if (HAL_CAN_Start(hcan) != HAL_OK)
 8002218:	6838      	ldr	r0, [r7, #0]
 800221a:	f006 fea4 	bl	8008f66 <HAL_CAN_Start>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <CanTxTask+0x58>
  {
    /* Start Error */
    Error_Handler();
 8002224:	f001 fa9a 	bl	800375c <Error_Handler>
  }

  //Activate CAN RX notification
  if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002228:	2102      	movs	r1, #2
 800222a:	6838      	ldr	r0, [r7, #0]
 800222c:	f007 f8cc 	bl	80093c8 <HAL_CAN_ActivateNotification>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <CanTxTask+0x6a>
  {
    /* Notification Error */
    Error_Handler();
 8002236:	f001 fa91 	bl	800375c <Error_Handler>
  }

  //Configure Transmission
  stCanTxHeader.StdId = 1620;
 800223a:	4ba9      	ldr	r3, [pc, #676]	; (80024e0 <CanTxTask+0x310>)
 800223c:	f240 6254 	movw	r2, #1620	; 0x654
 8002240:	601a      	str	r2, [r3, #0]
  stCanTxHeader.ExtId = 0;
 8002242:	4ba7      	ldr	r3, [pc, #668]	; (80024e0 <CanTxTask+0x310>)
 8002244:	2200      	movs	r2, #0
 8002246:	605a      	str	r2, [r3, #4]
  stCanTxHeader.RTR = CAN_RTR_DATA;
 8002248:	4ba5      	ldr	r3, [pc, #660]	; (80024e0 <CanTxTask+0x310>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  stCanTxHeader.IDE = CAN_ID_STD;
 800224e:	4ba4      	ldr	r3, [pc, #656]	; (80024e0 <CanTxTask+0x310>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  stCanTxHeader.DLC = 8;
 8002254:	4ba2      	ldr	r3, [pc, #648]	; (80024e0 <CanTxTask+0x310>)
 8002256:	2208      	movs	r2, #8
 8002258:	611a      	str	r2, [r3, #16]
  stCanTxHeader.TransmitGlobalTime = DISABLE;
 800225a:	4ba1      	ldr	r3, [pc, #644]	; (80024e0 <CanTxTask+0x310>)
 800225c:	2200      	movs	r2, #0
 800225e:	751a      	strb	r2, [r3, #20]

  for(;;){
    if(stPdmConfig.stCanOutput.nEnabled &&
 8002260:	4ba0      	ldr	r3, [pc, #640]	; (80024e4 <CanTxTask+0x314>)
 8002262:	f893 38d4 	ldrb.w	r3, [r3, #2260]	; 0x8d4
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8253 	beq.w	8002712 <CanTxTask+0x542>
        (stPdmConfig.stCanOutput.nUpdateTime > 0) &&
 800226c:	4b9d      	ldr	r3, [pc, #628]	; (80024e4 <CanTxTask+0x314>)
 800226e:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
    if(stPdmConfig.stCanOutput.nEnabled &&
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 824d 	beq.w	8002712 <CanTxTask+0x542>
        stPdmConfig.stCanOutput.nBaseId > 0 &&
 8002278:	4b9a      	ldr	r3, [pc, #616]	; (80024e4 <CanTxTask+0x314>)
 800227a:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
        (stPdmConfig.stCanOutput.nUpdateTime > 0) &&
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8247 	beq.w	8002712 <CanTxTask+0x542>
        stPdmConfig.stCanOutput.nBaseId < 2048){
 8002284:	4b97      	ldr	r3, [pc, #604]	; (80024e4 <CanTxTask+0x314>)
 8002286:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
        stPdmConfig.stCanOutput.nBaseId > 0 &&
 800228a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800228e:	f080 8240 	bcs.w	8002712 <CanTxTask+0x542>

      MsgQueueCanTx_t stMsgTx;
      osStatus_t stStatus;
      //Keep sending queued messages until empty
      do{
        stStatus = osMessageQueueGet(qMsgQueueCanTx, &stMsgTx, NULL, 0U);
 8002292:	4b95      	ldr	r3, [pc, #596]	; (80024e8 <CanTxTask+0x318>)
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	f107 010c 	add.w	r1, r7, #12
 800229a:	2300      	movs	r3, #0
 800229c:	2200      	movs	r2, #0
 800229e:	f010 fb4d 	bl	801293c <osMessageQueueGet>
 80022a2:	6578      	str	r0, [r7, #84]	; 0x54
        if(stStatus == osOK){
 80022a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d11d      	bne.n	80022e6 <CanTxTask+0x116>
          stMsgTx.stTxHeader.ExtId = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
          stMsgTx.stTxHeader.IDE = CAN_ID_STD;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
          stMsgTx.stTxHeader.RTR = CAN_RTR_DATA;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
          stMsgTx.stTxHeader.TransmitGlobalTime = DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 3020 	strb.w	r3, [r7, #32]

          if(HAL_CAN_AddTxMessage(hcan, &stMsgTx.stTxHeader, stMsgTx.nTxData, &nCanTxMailbox) != HAL_OK){
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	f103 0218 	add.w	r2, r3, #24
 80022c4:	f107 010c 	add.w	r1, r7, #12
 80022c8:	4b88      	ldr	r3, [pc, #544]	; (80024ec <CanTxTask+0x31c>)
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	f006 fe8f 	bl	8008fee <HAL_CAN_AddTxMessage>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <CanTxTask+0x116>
            //Send failed - add back to queue
            osMessageQueuePut(qMsgQueueCanTx, &stMsgTx, 0U, 0U);
 80022d6:	4b84      	ldr	r3, [pc, #528]	; (80024e8 <CanTxTask+0x318>)
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	f107 010c 	add.w	r1, r7, #12
 80022de:	2300      	movs	r3, #0
 80022e0:	2200      	movs	r2, #0
 80022e2:	f010 fab7 	bl	8012854 <osMessageQueuePut>
          }
        }
      }while(stStatus == osOK);
 80022e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0d2      	beq.n	8002292 <CanTxTask+0xc2>


      //=======================================================
      //Build Msg 0 (Analog inputs 1-4)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 0;
 80022ec:	4b7d      	ldr	r3, [pc, #500]	; (80024e4 <CanTxTask+0x314>)
 80022ee:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b7a      	ldr	r3, [pc, #488]	; (80024e0 <CanTxTask+0x310>)
 80022f6:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 80022f8:	4b79      	ldr	r3, [pc, #484]	; (80024e0 <CanTxTask+0x310>)
 80022fa:	2208      	movs	r2, #8
 80022fc:	611a      	str	r2, [r3, #16]
      //nCanTxData[7] = nAiBank1Raw[3];

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 80022fe:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <CanTxTask+0x31c>)
 8002300:	4a7b      	ldr	r2, [pc, #492]	; (80024f0 <CanTxTask+0x320>)
 8002302:	4977      	ldr	r1, [pc, #476]	; (80024e0 <CanTxTask+0x310>)
 8002304:	6838      	ldr	r0, [r7, #0]
 8002306:	f006 fe72 	bl	8008fee <HAL_CAN_AddTxMessage>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <CanTxTask+0x144>
        Error_Handler();
 8002310:	f001 fa24 	bl	800375c <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8002314:	2005      	movs	r0, #5
 8002316:	f010 f9e9 	bl	80126ec <osDelay>

      //=======================================================
      //Build Msg 1 (Analog inputs 5-6)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 1;
 800231a:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <CanTxTask+0x314>)
 800231c:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8002320:	3301      	adds	r3, #1
 8002322:	461a      	mov	r2, r3
 8002324:	4b6e      	ldr	r3, [pc, #440]	; (80024e0 <CanTxTask+0x310>)
 8002326:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8002328:	4b6d      	ldr	r3, [pc, #436]	; (80024e0 <CanTxTask+0x310>)
 800232a:	2208      	movs	r2, #8
 800232c:	611a      	str	r2, [r3, #16]
      //nCanTxData[7] = 0;

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 800232e:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <CanTxTask+0x31c>)
 8002330:	4a6f      	ldr	r2, [pc, #444]	; (80024f0 <CanTxTask+0x320>)
 8002332:	496b      	ldr	r1, [pc, #428]	; (80024e0 <CanTxTask+0x310>)
 8002334:	6838      	ldr	r0, [r7, #0]
 8002336:	f006 fe5a 	bl	8008fee <HAL_CAN_AddTxMessage>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <CanTxTask+0x174>
        Error_Handler();
 8002340:	f001 fa0c 	bl	800375c <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8002344:	2005      	movs	r0, #5
 8002346:	f010 f9d1 	bl	80126ec <osDelay>

      //=======================================================
      //Build Msg 2 (Device status)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 2;
 800234a:	4b66      	ldr	r3, [pc, #408]	; (80024e4 <CanTxTask+0x314>)
 800234c:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8002350:	3302      	adds	r3, #2
 8002352:	461a      	mov	r2, r3
 8002354:	4b62      	ldr	r3, [pc, #392]	; (80024e0 <CanTxTask+0x310>)
 8002356:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8002358:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <CanTxTask+0x310>)
 800235a:	2208      	movs	r2, #8
 800235c:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = eDevState;
 800235e:	4b65      	ldr	r3, [pc, #404]	; (80024f4 <CanTxTask+0x324>)
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <CanTxTask+0x320>)
 8002364:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = 0;
 8002366:	4b62      	ldr	r3, [pc, #392]	; (80024f0 <CanTxTask+0x320>)
 8002368:	2200      	movs	r2, #0
 800236a:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = nILTotal >> 8;
 800236c:	4b62      	ldr	r3, [pc, #392]	; (80024f8 <CanTxTask+0x328>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	b29b      	uxth	r3, r3
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b5d      	ldr	r3, [pc, #372]	; (80024f0 <CanTxTask+0x320>)
 800237a:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = nILTotal;
 800237c:	4b5e      	ldr	r3, [pc, #376]	; (80024f8 <CanTxTask+0x328>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b5a      	ldr	r3, [pc, #360]	; (80024f0 <CanTxTask+0x320>)
 8002386:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = nBattSense >> 8;
 8002388:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <CanTxTask+0x32c>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	b29b      	uxth	r3, r3
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	b29b      	uxth	r3, r3
 8002392:	b2da      	uxtb	r2, r3
 8002394:	4b56      	ldr	r3, [pc, #344]	; (80024f0 <CanTxTask+0x320>)
 8002396:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = nBattSense;
 8002398:	4b58      	ldr	r3, [pc, #352]	; (80024fc <CanTxTask+0x32c>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <CanTxTask+0x320>)
 80023a2:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = (uint16_t)fBoardTempC >> 8;
 80023a4:	4b56      	ldr	r3, [pc, #344]	; (8002500 <CanTxTask+0x330>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ae:	ee17 3a90 	vmov	r3, s15
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <CanTxTask+0x320>)
 80023bc:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = (uint16_t)fBoardTempC;
 80023be:	4b50      	ldr	r3, [pc, #320]	; (8002500 <CanTxTask+0x330>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c8:	ee17 3a90 	vmov	r3, s15
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <CanTxTask+0x320>)
 80023d2:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 80023d4:	4b45      	ldr	r3, [pc, #276]	; (80024ec <CanTxTask+0x31c>)
 80023d6:	4a46      	ldr	r2, [pc, #280]	; (80024f0 <CanTxTask+0x320>)
 80023d8:	4941      	ldr	r1, [pc, #260]	; (80024e0 <CanTxTask+0x310>)
 80023da:	6838      	ldr	r0, [r7, #0]
 80023dc:	f006 fe07 	bl	8008fee <HAL_CAN_AddTxMessage>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <CanTxTask+0x21a>
        Error_Handler();
 80023e6:	f001 f9b9 	bl	800375c <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 80023ea:	2005      	movs	r0, #5
 80023ec:	f010 f97e 	bl	80126ec <osDelay>

      //=======================================================
      //Build Msg 3 (Out 1-4 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 3;
 80023f0:	4b3c      	ldr	r3, [pc, #240]	; (80024e4 <CanTxTask+0x314>)
 80023f2:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80023f6:	3303      	adds	r3, #3
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <CanTxTask+0x310>)
 80023fc:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 80023fe:	4b38      	ldr	r3, [pc, #224]	; (80024e0 <CanTxTask+0x310>)
 8002400:	2208      	movs	r2, #8
 8002402:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[0].nIL >> 8;
 8002404:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <CanTxTask+0x334>)
 8002406:	8c1b      	ldrh	r3, [r3, #32]
 8002408:	b29b      	uxth	r3, r3
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	b29b      	uxth	r3, r3
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b37      	ldr	r3, [pc, #220]	; (80024f0 <CanTxTask+0x320>)
 8002412:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[0].nIL;
 8002414:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <CanTxTask+0x334>)
 8002416:	8c1b      	ldrh	r3, [r3, #32]
 8002418:	b29b      	uxth	r3, r3
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b34      	ldr	r3, [pc, #208]	; (80024f0 <CanTxTask+0x320>)
 800241e:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[1].nIL >> 8;
 8002420:	4b38      	ldr	r3, [pc, #224]	; (8002504 <CanTxTask+0x334>)
 8002422:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002426:	b29b      	uxth	r3, r3
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	b29b      	uxth	r3, r3
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <CanTxTask+0x320>)
 8002430:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[1].nIL;
 8002432:	4b34      	ldr	r3, [pc, #208]	; (8002504 <CanTxTask+0x334>)
 8002434:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002438:	b29b      	uxth	r3, r3
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b2c      	ldr	r3, [pc, #176]	; (80024f0 <CanTxTask+0x320>)
 800243e:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[2].nIL >> 8;
 8002440:	4b30      	ldr	r3, [pc, #192]	; (8002504 <CanTxTask+0x334>)
 8002442:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8002446:	b29b      	uxth	r3, r3
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	b29b      	uxth	r3, r3
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <CanTxTask+0x320>)
 8002450:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[2].nIL;
 8002452:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <CanTxTask+0x334>)
 8002454:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8002458:	b29b      	uxth	r3, r3
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <CanTxTask+0x320>)
 800245e:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[3].nIL >> 8;
 8002460:	4b28      	ldr	r3, [pc, #160]	; (8002504 <CanTxTask+0x334>)
 8002462:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8002466:	b29b      	uxth	r3, r3
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	b29b      	uxth	r3, r3
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <CanTxTask+0x320>)
 8002470:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[3].nIL;
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <CanTxTask+0x334>)
 8002474:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8002478:	b29b      	uxth	r3, r3
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <CanTxTask+0x320>)
 800247e:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8002480:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <CanTxTask+0x31c>)
 8002482:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <CanTxTask+0x320>)
 8002484:	4916      	ldr	r1, [pc, #88]	; (80024e0 <CanTxTask+0x310>)
 8002486:	6838      	ldr	r0, [r7, #0]
 8002488:	f006 fdb1 	bl	8008fee <HAL_CAN_AddTxMessage>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <CanTxTask+0x2c6>
        Error_Handler();
 8002492:	f001 f963 	bl	800375c <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8002496:	2005      	movs	r0, #5
 8002498:	f010 f928 	bl	80126ec <osDelay>

      //=======================================================
      //Build Msg 4 (Out 5-8 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 4;
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <CanTxTask+0x314>)
 800249e:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80024a2:	3304      	adds	r3, #4
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <CanTxTask+0x310>)
 80024a8:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <CanTxTask+0x310>)
 80024ac:	2208      	movs	r2, #8
 80024ae:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[4].nIL >> 8;
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <CanTxTask+0x334>)
 80024b2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <CanTxTask+0x320>)
 80024c0:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[4].nIL;
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <CanTxTask+0x334>)
 80024c4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <CanTxTask+0x320>)
 80024ce:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[5].nIL >> 8;
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <CanTxTask+0x334>)
 80024d2:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	b29b      	uxth	r3, r3
 80024dc:	e014      	b.n	8002508 <CanTxTask+0x338>
 80024de:	bf00      	nop
 80024e0:	20000df4 	.word	0x20000df4
 80024e4:	20000200 	.word	0x20000200
 80024e8:	20000ae4 	.word	0x20000ae4
 80024ec:	20000e38 	.word	0x20000e38
 80024f0:	20000e28 	.word	0x20000e28
 80024f4:	20000ae9 	.word	0x20000ae9
 80024f8:	20000d8c 	.word	0x20000d8c
 80024fc:	20000dd2 	.word	0x20000dd2
 8002500:	20000dc4 	.word	0x20000dc4
 8002504:	20000aec 	.word	0x20000aec
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b84      	ldr	r3, [pc, #528]	; (800271c <CanTxTask+0x54c>)
 800250c:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[5].nIL;
 800250e:	4b84      	ldr	r3, [pc, #528]	; (8002720 <CanTxTask+0x550>)
 8002510:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 8002514:	b29b      	uxth	r3, r3
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b80      	ldr	r3, [pc, #512]	; (800271c <CanTxTask+0x54c>)
 800251a:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[6].nIL >> 8;
 800251c:	4b80      	ldr	r3, [pc, #512]	; (8002720 <CanTxTask+0x550>)
 800251e:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8002522:	b29b      	uxth	r3, r3
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	b29b      	uxth	r3, r3
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b7c      	ldr	r3, [pc, #496]	; (800271c <CanTxTask+0x54c>)
 800252c:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[6].nIL;
 800252e:	4b7c      	ldr	r3, [pc, #496]	; (8002720 <CanTxTask+0x550>)
 8002530:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8002534:	b29b      	uxth	r3, r3
 8002536:	b2da      	uxtb	r2, r3
 8002538:	4b78      	ldr	r3, [pc, #480]	; (800271c <CanTxTask+0x54c>)
 800253a:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[7].nIL >> 8;
 800253c:	4b78      	ldr	r3, [pc, #480]	; (8002720 <CanTxTask+0x550>)
 800253e:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8002542:	b29b      	uxth	r3, r3
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	b29b      	uxth	r3, r3
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4b74      	ldr	r3, [pc, #464]	; (800271c <CanTxTask+0x54c>)
 800254c:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[7].nIL;
 800254e:	4b74      	ldr	r3, [pc, #464]	; (8002720 <CanTxTask+0x550>)
 8002550:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8002554:	b29b      	uxth	r3, r3
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b70      	ldr	r3, [pc, #448]	; (800271c <CanTxTask+0x54c>)
 800255a:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 800255c:	4b71      	ldr	r3, [pc, #452]	; (8002724 <CanTxTask+0x554>)
 800255e:	4a6f      	ldr	r2, [pc, #444]	; (800271c <CanTxTask+0x54c>)
 8002560:	4971      	ldr	r1, [pc, #452]	; (8002728 <CanTxTask+0x558>)
 8002562:	6838      	ldr	r0, [r7, #0]
 8002564:	f006 fd43 	bl	8008fee <HAL_CAN_AddTxMessage>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <CanTxTask+0x3a2>
        Error_Handler();
 800256e:	f001 f8f5 	bl	800375c <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8002572:	2005      	movs	r0, #5
 8002574:	f010 f8ba 	bl	80126ec <osDelay>

      //=======================================================
      //Build Msg 5 (Out 9-12 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 5;
 8002578:	4b6c      	ldr	r3, [pc, #432]	; (800272c <CanTxTask+0x55c>)
 800257a:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 800257e:	3305      	adds	r3, #5
 8002580:	461a      	mov	r2, r3
 8002582:	4b69      	ldr	r3, [pc, #420]	; (8002728 <CanTxTask+0x558>)
 8002584:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8002586:	4b68      	ldr	r3, [pc, #416]	; (8002728 <CanTxTask+0x558>)
 8002588:	2208      	movs	r2, #8
 800258a:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[8].nIL >> 8;
 800258c:	4b64      	ldr	r3, [pc, #400]	; (8002720 <CanTxTask+0x550>)
 800258e:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 8002592:	b29b      	uxth	r3, r3
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	b29b      	uxth	r3, r3
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b60      	ldr	r3, [pc, #384]	; (800271c <CanTxTask+0x54c>)
 800259c:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[8].nIL;
 800259e:	4b60      	ldr	r3, [pc, #384]	; (8002720 <CanTxTask+0x550>)
 80025a0:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	4b5c      	ldr	r3, [pc, #368]	; (800271c <CanTxTask+0x54c>)
 80025aa:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[9].nIL >> 8;
 80025ac:	4b5c      	ldr	r3, [pc, #368]	; (8002720 <CanTxTask+0x550>)
 80025ae:	f8b3 3218 	ldrh.w	r3, [r3, #536]	; 0x218
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b58      	ldr	r3, [pc, #352]	; (800271c <CanTxTask+0x54c>)
 80025bc:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[9].nIL;
 80025be:	4b58      	ldr	r3, [pc, #352]	; (8002720 <CanTxTask+0x550>)
 80025c0:	f8b3 3218 	ldrh.w	r3, [r3, #536]	; 0x218
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	4b54      	ldr	r3, [pc, #336]	; (800271c <CanTxTask+0x54c>)
 80025ca:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[10].nIL >> 8;
 80025cc:	4b54      	ldr	r3, [pc, #336]	; (8002720 <CanTxTask+0x550>)
 80025ce:	f8b3 3250 	ldrh.w	r3, [r3, #592]	; 0x250
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4b50      	ldr	r3, [pc, #320]	; (800271c <CanTxTask+0x54c>)
 80025dc:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[10].nIL;
 80025de:	4b50      	ldr	r3, [pc, #320]	; (8002720 <CanTxTask+0x550>)
 80025e0:	f8b3 3250 	ldrh.w	r3, [r3, #592]	; 0x250
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b4c      	ldr	r3, [pc, #304]	; (800271c <CanTxTask+0x54c>)
 80025ea:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[11].nIL >> 8;
 80025ec:	4b4c      	ldr	r3, [pc, #304]	; (8002720 <CanTxTask+0x550>)
 80025ee:	f8b3 3288 	ldrh.w	r3, [r3, #648]	; 0x288
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b48      	ldr	r3, [pc, #288]	; (800271c <CanTxTask+0x54c>)
 80025fc:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[11].nIL;
 80025fe:	4b48      	ldr	r3, [pc, #288]	; (8002720 <CanTxTask+0x550>)
 8002600:	f8b3 3288 	ldrh.w	r3, [r3, #648]	; 0x288
 8002604:	b29b      	uxth	r3, r3
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b44      	ldr	r3, [pc, #272]	; (800271c <CanTxTask+0x54c>)
 800260a:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 800260c:	4b45      	ldr	r3, [pc, #276]	; (8002724 <CanTxTask+0x554>)
 800260e:	4a43      	ldr	r2, [pc, #268]	; (800271c <CanTxTask+0x54c>)
 8002610:	4945      	ldr	r1, [pc, #276]	; (8002728 <CanTxTask+0x558>)
 8002612:	6838      	ldr	r0, [r7, #0]
 8002614:	f006 fceb 	bl	8008fee <HAL_CAN_AddTxMessage>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <CanTxTask+0x452>
        Error_Handler();
 800261e:	f001 f89d 	bl	800375c <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8002622:	2005      	movs	r0, #5
 8002624:	f010 f862 	bl	80126ec <osDelay>

      //=======================================================
      //Build Msg 6 (Out 1-12 Status)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 6;
 8002628:	4b40      	ldr	r3, [pc, #256]	; (800272c <CanTxTask+0x55c>)
 800262a:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 800262e:	3306      	adds	r3, #6
 8002630:	461a      	mov	r2, r3
 8002632:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <CanTxTask+0x558>)
 8002634:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8002636:	4b3c      	ldr	r3, [pc, #240]	; (8002728 <CanTxTask+0x558>)
 8002638:	2208      	movs	r2, #8
 800263a:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = (pf[1].eState << 4) + pf[0].eState;
 800263c:	4b38      	ldr	r3, [pc, #224]	; (8002720 <CanTxTask+0x550>)
 800263e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002642:	b2db      	uxtb	r3, r3
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	b2da      	uxtb	r2, r3
 8002648:	4b35      	ldr	r3, [pc, #212]	; (8002720 <CanTxTask+0x550>)
 800264a:	785b      	ldrb	r3, [r3, #1]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	4413      	add	r3, r2
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b32      	ldr	r3, [pc, #200]	; (800271c <CanTxTask+0x54c>)
 8002654:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = (pf[3].eState << 4) + pf[2].eState;
 8002656:	4b32      	ldr	r3, [pc, #200]	; (8002720 <CanTxTask+0x550>)
 8002658:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800265c:	b2db      	uxtb	r3, r3
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <CanTxTask+0x550>)
 8002664:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4413      	add	r3, r2
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b2b      	ldr	r3, [pc, #172]	; (800271c <CanTxTask+0x54c>)
 8002670:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = (pf[5].eState << 4) + pf[4].eState;
 8002672:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <CanTxTask+0x550>)
 8002674:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8002678:	b2db      	uxtb	r3, r3
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4b28      	ldr	r3, [pc, #160]	; (8002720 <CanTxTask+0x550>)
 8002680:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	4413      	add	r3, r2
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <CanTxTask+0x54c>)
 800268c:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = (pf[7].eState << 4) + pf[6].eState;
 800268e:	4b24      	ldr	r3, [pc, #144]	; (8002720 <CanTxTask+0x550>)
 8002690:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8002694:	b2db      	uxtb	r3, r3
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4b21      	ldr	r3, [pc, #132]	; (8002720 <CanTxTask+0x550>)
 800269c:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <CanTxTask+0x54c>)
 80026a8:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = (pf[9].eState << 4) + pf[8].eState;
 80026aa:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <CanTxTask+0x550>)
 80026ac:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <CanTxTask+0x550>)
 80026b8:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	4413      	add	r3, r2
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4b16      	ldr	r3, [pc, #88]	; (800271c <CanTxTask+0x54c>)
 80026c4:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = (pf[11].eState << 4) + pf[10].eState;
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <CanTxTask+0x550>)
 80026c8:	f893 3269 	ldrb.w	r3, [r3, #617]	; 0x269
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <CanTxTask+0x550>)
 80026d4:	f893 3231 	ldrb.w	r3, [r3, #561]	; 0x231
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4413      	add	r3, r2
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <CanTxTask+0x54c>)
 80026e0:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = 0;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <CanTxTask+0x54c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = 0;
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <CanTxTask+0x54c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <CanTxTask+0x554>)
 80026f0:	4a0a      	ldr	r2, [pc, #40]	; (800271c <CanTxTask+0x54c>)
 80026f2:	490d      	ldr	r1, [pc, #52]	; (8002728 <CanTxTask+0x558>)
 80026f4:	6838      	ldr	r0, [r7, #0]
 80026f6:	f006 fc7a 	bl	8008fee <HAL_CAN_AddTxMessage>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <CanTxTask+0x534>
        Error_Handler();
 8002700:	f001 f82c 	bl	800375c <Error_Handler>

#ifdef MEAS_HEAP_USE
      __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

      osDelay(stPdmConfig.stCanOutput.nUpdateTime);
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <CanTxTask+0x55c>)
 8002706:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
 800270a:	4618      	mov	r0, r3
 800270c:	f00f ffee 	bl	80126ec <osDelay>
        stPdmConfig.stCanOutput.nBaseId < 2048){
 8002710:	e002      	b.n	8002718 <CanTxTask+0x548>
    }
    else{
      osDelay(50);
 8002712:	2032      	movs	r0, #50	; 0x32
 8002714:	f00f ffea 	bl	80126ec <osDelay>
    if(stPdmConfig.stCanOutput.nEnabled &&
 8002718:	e5a2      	b.n	8002260 <CanTxTask+0x90>
 800271a:	bf00      	nop
 800271c:	20000e28 	.word	0x20000e28
 8002720:	20000aec 	.word	0x20000aec
 8002724:	20000e38 	.word	0x20000e38
 8002728:	20000df4 	.word	0x20000df4
 800272c:	20000200 	.word	0x20000200

08002730 <SetPfStatusLed>:

  }
}

void SetPfStatusLed(PCA9635_LEDOnState_t *ledState, volatile ProfetTypeDef *profet)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  //0 = Off
  //1 = On
  //3 = Flash
  *ledState = (profet->eState == ON) +          //On
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	785b      	ldrb	r3, [r3, #1]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
              (profet->eState == IN_RUSH) +     //On
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	785b      	ldrb	r3, [r3, #1]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	bf0c      	ite	eq
 8002756:	2301      	moveq	r3, #1
 8002758:	2300      	movne	r3, #0
 800275a:	b2db      	uxtb	r3, r3
  *ledState = (profet->eState == ON) +          //On
 800275c:	4413      	add	r3, r2
 800275e:	b2db      	uxtb	r3, r3
              (profet->eState == OVERCURRENT)   * LED_FLASH +
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	7852      	ldrb	r2, [r2, #1]
 8002764:	b2d2      	uxtb	r2, r2
              (profet->eState == IN_RUSH) +     //On
 8002766:	2a04      	cmp	r2, #4
 8002768:	d101      	bne.n	800276e <SetPfStatusLed+0x3e>
 800276a:	2203      	movs	r2, #3
 800276c:	e000      	b.n	8002770 <SetPfStatusLed+0x40>
 800276e:	2200      	movs	r2, #0
 8002770:	4413      	add	r3, r2
 8002772:	b2db      	uxtb	r3, r3
              (profet->eState == SHORT_CIRCUIT) * LED_FLASH +
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	7852      	ldrb	r2, [r2, #1]
 8002778:	b2d2      	uxtb	r2, r2
              (profet->eState == OVERCURRENT)   * LED_FLASH +
 800277a:	2a03      	cmp	r2, #3
 800277c:	d101      	bne.n	8002782 <SetPfStatusLed+0x52>
 800277e:	2203      	movs	r2, #3
 8002780:	e000      	b.n	8002784 <SetPfStatusLed+0x54>
 8002782:	2200      	movs	r2, #0
 8002784:	4413      	add	r3, r2
 8002786:	b2db      	uxtb	r3, r3
              (profet->eState == SUSPENDED)     * LED_FLASH +
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	7852      	ldrb	r2, [r2, #1]
 800278c:	b2d2      	uxtb	r2, r2
              (profet->eState == SHORT_CIRCUIT) * LED_FLASH +
 800278e:	2a06      	cmp	r2, #6
 8002790:	d101      	bne.n	8002796 <SetPfStatusLed+0x66>
 8002792:	2203      	movs	r2, #3
 8002794:	e000      	b.n	8002798 <SetPfStatusLed+0x68>
 8002796:	2200      	movs	r2, #0
 8002798:	4413      	add	r3, r2
 800279a:	b2db      	uxtb	r3, r3
              (profet->eState == FAULT)         * LED_FLASH;
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	7852      	ldrb	r2, [r2, #1]
 80027a0:	b2d2      	uxtb	r2, r2
              (profet->eState == SUSPENDED)     * LED_FLASH +
 80027a2:	2a05      	cmp	r2, #5
 80027a4:	d101      	bne.n	80027aa <SetPfStatusLed+0x7a>
 80027a6:	2203      	movs	r2, #3
 80027a8:	e000      	b.n	80027ac <SetPfStatusLed+0x7c>
 80027aa:	2200      	movs	r2, #0
 80027ac:	4413      	add	r3, r2
 80027ae:	b2da      	uxtb	r2, r3
  *ledState = (profet->eState == ON) +          //On
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	701a      	strb	r2, [r3, #0]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <Profet_Init>:

void Profet_Init(){
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0

  pf[0].eModel = BTS7002_1EPP;
 80027c4:	4b8a      	ldr	r3, [pc, #552]	; (80029f0 <Profet_Init+0x230>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
  pf[0].nNum = 0;
 80027ca:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <Profet_Init+0x230>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	809a      	strh	r2, [r3, #4]
  pf[0].nIN_Port = &pfGpioBank1;
 80027d0:	4b87      	ldr	r3, [pc, #540]	; (80029f0 <Profet_Init+0x230>)
 80027d2:	4a88      	ldr	r2, [pc, #544]	; (80029f4 <Profet_Init+0x234>)
 80027d4:	609a      	str	r2, [r3, #8]
  pf[0].nIN_Pin = 0x0080;
 80027d6:	4b86      	ldr	r3, [pc, #536]	; (80029f0 <Profet_Init+0x230>)
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	819a      	strh	r2, [r3, #12]
  pf[0].fKilis = 2.286;
 80027dc:	4b84      	ldr	r3, [pc, #528]	; (80029f0 <Profet_Init+0x230>)
 80027de:	4a86      	ldr	r2, [pc, #536]	; (80029f8 <Profet_Init+0x238>)
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34

  pf[1].eModel = BTS7002_1EPP;
 80027e2:	4b83      	ldr	r3, [pc, #524]	; (80029f0 <Profet_Init+0x230>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pf[1].nNum = 1;
 80027ea:	4b81      	ldr	r3, [pc, #516]	; (80029f0 <Profet_Init+0x230>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  pf[1].nIN_Port = &pfGpioBank1;
 80027f0:	4b7f      	ldr	r3, [pc, #508]	; (80029f0 <Profet_Init+0x230>)
 80027f2:	4a80      	ldr	r2, [pc, #512]	; (80029f4 <Profet_Init+0x234>)
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
  pf[1].nIN_Pin = 0x0002;
 80027f6:	4b7e      	ldr	r3, [pc, #504]	; (80029f0 <Profet_Init+0x230>)
 80027f8:	2202      	movs	r2, #2
 80027fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  pf[1].fKilis = 2.286;
 80027fe:	4b7c      	ldr	r3, [pc, #496]	; (80029f0 <Profet_Init+0x230>)
 8002800:	4a7d      	ldr	r2, [pc, #500]	; (80029f8 <Profet_Init+0x238>)
 8002802:	66da      	str	r2, [r3, #108]	; 0x6c

  pf[2].eModel = BTS7008_2EPA_CH1;
 8002804:	4b7a      	ldr	r3, [pc, #488]	; (80029f0 <Profet_Init+0x230>)
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  pf[2].nNum = 2;
 800280c:	4b78      	ldr	r3, [pc, #480]	; (80029f0 <Profet_Init+0x230>)
 800280e:	2202      	movs	r2, #2
 8002810:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  pf[2].nIN_Port = &pfGpioBank1;
 8002814:	4b76      	ldr	r3, [pc, #472]	; (80029f0 <Profet_Init+0x230>)
 8002816:	4a77      	ldr	r2, [pc, #476]	; (80029f4 <Profet_Init+0x234>)
 8002818:	679a      	str	r2, [r3, #120]	; 0x78
  pf[2].nIN_Pin = 0x8000;
 800281a:	4b75      	ldr	r3, [pc, #468]	; (80029f0 <Profet_Init+0x230>)
 800281c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002820:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
  pf[2].fKilis = 0.554;
 8002824:	4b72      	ldr	r3, [pc, #456]	; (80029f0 <Profet_Init+0x230>)
 8002826:	4a75      	ldr	r2, [pc, #468]	; (80029fc <Profet_Init+0x23c>)
 8002828:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  pf[3].eModel = BTS7008_2EPA_CH2;
 800282c:	4b70      	ldr	r3, [pc, #448]	; (80029f0 <Profet_Init+0x230>)
 800282e:	2202      	movs	r2, #2
 8002830:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
  pf[3].eState = OFF;
 8002834:	4b6e      	ldr	r3, [pc, #440]	; (80029f0 <Profet_Init+0x230>)
 8002836:	2200      	movs	r2, #0
 8002838:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
  pf[3].nNum = 3;
 800283c:	4b6c      	ldr	r3, [pc, #432]	; (80029f0 <Profet_Init+0x230>)
 800283e:	2203      	movs	r2, #3
 8002840:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  pf[3].nIN_Port = &pfGpioBank1;
 8002844:	4b6a      	ldr	r3, [pc, #424]	; (80029f0 <Profet_Init+0x230>)
 8002846:	4a6b      	ldr	r2, [pc, #428]	; (80029f4 <Profet_Init+0x234>)
 8002848:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  pf[3].nIN_Pin = 0x1000;
 800284c:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <Profet_Init+0x230>)
 800284e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002852:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  pf[3].fKilis = 0.554;
 8002856:	4b66      	ldr	r3, [pc, #408]	; (80029f0 <Profet_Init+0x230>)
 8002858:	4a68      	ldr	r2, [pc, #416]	; (80029fc <Profet_Init+0x23c>)
 800285a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  pf[4].eModel = BTS7008_2EPA_CH1;
 800285e:	4b64      	ldr	r3, [pc, #400]	; (80029f0 <Profet_Init+0x230>)
 8002860:	2201      	movs	r2, #1
 8002862:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  pf[4].eState = OFF;
 8002866:	4b62      	ldr	r3, [pc, #392]	; (80029f0 <Profet_Init+0x230>)
 8002868:	2200      	movs	r2, #0
 800286a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  pf[4].nNum = 4;
 800286e:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <Profet_Init+0x230>)
 8002870:	2204      	movs	r2, #4
 8002872:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
  pf[4].nIN_Port = &pfGpioBank1;
 8002876:	4b5e      	ldr	r3, [pc, #376]	; (80029f0 <Profet_Init+0x230>)
 8002878:	4a5e      	ldr	r2, [pc, #376]	; (80029f4 <Profet_Init+0x234>)
 800287a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  pf[4].nIN_Pin = 0x0800;
 800287e:	4b5c      	ldr	r3, [pc, #368]	; (80029f0 <Profet_Init+0x230>)
 8002880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002884:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  pf[4].fKilis = 0.554;
 8002888:	4b59      	ldr	r3, [pc, #356]	; (80029f0 <Profet_Init+0x230>)
 800288a:	4a5c      	ldr	r2, [pc, #368]	; (80029fc <Profet_Init+0x23c>)
 800288c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  pf[5].eModel = BTS7008_2EPA_CH2;
 8002890:	4b57      	ldr	r3, [pc, #348]	; (80029f0 <Profet_Init+0x230>)
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
  pf[5].eState = OFF;
 8002898:	4b55      	ldr	r3, [pc, #340]	; (80029f0 <Profet_Init+0x230>)
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  pf[5].nNum = 5;
 80028a0:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <Profet_Init+0x230>)
 80028a2:	2205      	movs	r2, #5
 80028a4:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
  pf[5].nIN_Port = &pfGpioBank1;
 80028a8:	4b51      	ldr	r3, [pc, #324]	; (80029f0 <Profet_Init+0x230>)
 80028aa:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <Profet_Init+0x234>)
 80028ac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  pf[5].nIN_Pin = 0x0100;
 80028b0:	4b4f      	ldr	r3, [pc, #316]	; (80029f0 <Profet_Init+0x230>)
 80028b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028b6:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
  pf[5].fKilis = 0.554;
 80028ba:	4b4d      	ldr	r3, [pc, #308]	; (80029f0 <Profet_Init+0x230>)
 80028bc:	4a4f      	ldr	r2, [pc, #316]	; (80029fc <Profet_Init+0x23c>)
 80028be:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  pf[6].eModel = BTS7002_1EPP;
 80028c2:	4b4b      	ldr	r3, [pc, #300]	; (80029f0 <Profet_Init+0x230>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  pf[6].eState = OFF;
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <Profet_Init+0x230>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  pf[6].nNum = 6;
 80028d2:	4b47      	ldr	r3, [pc, #284]	; (80029f0 <Profet_Init+0x230>)
 80028d4:	2206      	movs	r2, #6
 80028d6:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
  pf[6].nIN_Port = &pfGpioBank2;
 80028da:	4b45      	ldr	r3, [pc, #276]	; (80029f0 <Profet_Init+0x230>)
 80028dc:	4a48      	ldr	r2, [pc, #288]	; (8002a00 <Profet_Init+0x240>)
 80028de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pf[6].nIN_Pin = 0x0002;
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <Profet_Init+0x230>)
 80028e4:	2202      	movs	r2, #2
 80028e6:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
  pf[6].fKilis = 2.286;
 80028ea:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <Profet_Init+0x230>)
 80028ec:	4a42      	ldr	r2, [pc, #264]	; (80029f8 <Profet_Init+0x238>)
 80028ee:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

  pf[7].eModel = BTS7002_1EPP;
 80028f2:	4b3f      	ldr	r3, [pc, #252]	; (80029f0 <Profet_Init+0x230>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
  pf[7].eState = OFF;
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <Profet_Init+0x230>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  pf[7].nNum = 7;
 8002902:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <Profet_Init+0x230>)
 8002904:	2207      	movs	r2, #7
 8002906:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pf[7].nIN_Port = &pfGpioBank2;
 800290a:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <Profet_Init+0x230>)
 800290c:	4a3c      	ldr	r2, [pc, #240]	; (8002a00 <Profet_Init+0x240>)
 800290e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  pf[7].nIN_Pin = 0x0008;
 8002912:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <Profet_Init+0x230>)
 8002914:	2208      	movs	r2, #8
 8002916:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
  pf[7].fKilis = 2.286;
 800291a:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <Profet_Init+0x230>)
 800291c:	4a36      	ldr	r2, [pc, #216]	; (80029f8 <Profet_Init+0x238>)
 800291e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

  pf[8].eModel = BTS7008_2EPA_CH1;
 8002922:	4b33      	ldr	r3, [pc, #204]	; (80029f0 <Profet_Init+0x230>)
 8002924:	2201      	movs	r2, #1
 8002926:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
  pf[8].eState = OFF;
 800292a:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <Profet_Init+0x230>)
 800292c:	2200      	movs	r2, #0
 800292e:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  pf[8].nNum = 8;
 8002932:	4b2f      	ldr	r3, [pc, #188]	; (80029f0 <Profet_Init+0x230>)
 8002934:	2208      	movs	r2, #8
 8002936:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  pf[8].nIN_Port = &pfGpioBank2;
 800293a:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <Profet_Init+0x230>)
 800293c:	4a30      	ldr	r2, [pc, #192]	; (8002a00 <Profet_Init+0x240>)
 800293e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  pf[8].nIN_Pin = 0x0010;
 8002942:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <Profet_Init+0x230>)
 8002944:	2210      	movs	r2, #16
 8002946:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
  pf[8].fKilis = 0.554;
 800294a:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <Profet_Init+0x230>)
 800294c:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <Profet_Init+0x23c>)
 800294e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  pf[9].eModel = BTS7008_2EPA_CH2;
 8002952:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <Profet_Init+0x230>)
 8002954:	2202      	movs	r2, #2
 8002956:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  pf[9].eState = OFF;
 800295a:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <Profet_Init+0x230>)
 800295c:	2200      	movs	r2, #0
 800295e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
  pf[9].nNum = 9;
 8002962:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <Profet_Init+0x230>)
 8002964:	2209      	movs	r2, #9
 8002966:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
  pf[9].nIN_Port = &pfGpioBank2;
 800296a:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <Profet_Init+0x230>)
 800296c:	4a24      	ldr	r2, [pc, #144]	; (8002a00 <Profet_Init+0x240>)
 800296e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  pf[9].nIN_Pin = 0x0080;
 8002972:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <Profet_Init+0x230>)
 8002974:	2280      	movs	r2, #128	; 0x80
 8002976:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
  pf[9].fKilis = 0.554;
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <Profet_Init+0x230>)
 800297c:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <Profet_Init+0x23c>)
 800297e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

  pf[10].eModel = BTS7008_2EPA_CH1;
 8002982:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <Profet_Init+0x230>)
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
  pf[10].eState = OFF;
 800298a:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <Profet_Init+0x230>)
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
  pf[10].nNum = 10;
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <Profet_Init+0x230>)
 8002994:	220a      	movs	r2, #10
 8002996:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
  pf[10].nIN_Port = &pfGpioBank2;
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <Profet_Init+0x230>)
 800299c:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <Profet_Init+0x240>)
 800299e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  pf[10].nIN_Pin = 0x0100;
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <Profet_Init+0x230>)
 80029a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a8:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
  pf[10].fKilis = 0.554;
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <Profet_Init+0x230>)
 80029ae:	4a13      	ldr	r2, [pc, #76]	; (80029fc <Profet_Init+0x23c>)
 80029b0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

  pf[11].eModel = BTS7008_2EPA_CH2;
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <Profet_Init+0x230>)
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
  pf[11].eState = OFF;
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <Profet_Init+0x230>)
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
  pf[11].nNum = 11;
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <Profet_Init+0x230>)
 80029c6:	220b      	movs	r2, #11
 80029c8:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
  pf[11].nIN_Port = &pfGpioBank2;
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <Profet_Init+0x230>)
 80029ce:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <Profet_Init+0x240>)
 80029d0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
  pf[11].nIN_Pin = 0x0800;
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <Profet_Init+0x230>)
 80029d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029da:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
  pf[11].fKilis = 0.554;
 80029de:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <Profet_Init+0x230>)
 80029e0:	4a06      	ldr	r2, [pc, #24]	; (80029fc <Profet_Init+0x23c>)
 80029e2:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	20000aec 	.word	0x20000aec
 80029f4:	20000d8e 	.word	0x20000d8e
 80029f8:	40124dd3 	.word	0x40124dd3
 80029fc:	3f0dd2f2 	.word	0x3f0dd2f2
 8002a00:	20000d90 	.word	0x20000d90

08002a04 <_write>:


//Overwrite printf _write to send to ITM_SendChar
int _write(int file, char *ptr, int len){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  int i=0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  for(i=0; i<len; i++){
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	e009      	b.n	8002a2e <_write+0x2a>
    ITM_SendChar((*ptr++));
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	60ba      	str	r2, [r7, #8]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe f8ca 	bl	8000bbc <ITM_SendChar>
  for(i=0; i<len; i++){
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	dbf1      	blt.n	8002a1a <_write+0x16>
  }
  return len;
 8002a36:	687b      	ldr	r3, [r7, #4]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <ReadPdmConfig>:

uint8_t ReadPdmConfig()
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
  PdmConfig_SetDefault(&stPdmConfig);
 8002a46:	48a0      	ldr	r0, [pc, #640]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002a48:	f002 f9e0 	bl	8004e0c <PdmConfig_SetDefault>
  }
  */

  //Map the variable map first before using
  //User inputs
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a50:	e00b      	b.n	8002a6a <ReadPdmConfig+0x2a>
    pVariableMap[i+1] = &nPdmInputs[i];
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	3301      	adds	r3, #1
 8002a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a58:	0052      	lsls	r2, r2, #1
 8002a5a:	499c      	ldr	r1, [pc, #624]	; (8002ccc <ReadPdmConfig+0x28c>)
 8002a5c:	440a      	add	r2, r1
 8002a5e:	499c      	ldr	r1, [pc, #624]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	3301      	adds	r3, #1
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	2b07      	cmp	r3, #7
 8002a6e:	ddf0      	ble.n	8002a52 <ReadPdmConfig+0x12>

  //CAN inputs
  for(int i=0; i<PDM_NUM_CAN_INPUTS; i++)
 8002a70:	2300      	movs	r3, #0
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	e00b      	b.n	8002a8e <ReadPdmConfig+0x4e>
    pVariableMap[i + 9] = &nCanInputs[i];
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	3309      	adds	r3, #9
 8002a7a:	6a3a      	ldr	r2, [r7, #32]
 8002a7c:	0052      	lsls	r2, r2, #1
 8002a7e:	4995      	ldr	r1, [pc, #596]	; (8002cd4 <ReadPdmConfig+0x294>)
 8002a80:	440a      	add	r2, r1
 8002a82:	4993      	ldr	r1, [pc, #588]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_CAN_INPUTS; i++)
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	623b      	str	r3, [r7, #32]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	2b1d      	cmp	r3, #29
 8002a92:	ddf0      	ble.n	8002a76 <ReadPdmConfig+0x36>

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	e00b      	b.n	8002ab2 <ReadPdmConfig+0x72>
    pVariableMap[i + 39] = &nVirtInputs[i];
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3327      	adds	r3, #39	; 0x27
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	0052      	lsls	r2, r2, #1
 8002aa2:	498d      	ldr	r1, [pc, #564]	; (8002cd8 <ReadPdmConfig+0x298>)
 8002aa4:	440a      	add	r2, r1
 8002aa6:	498a      	ldr	r1, [pc, #552]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	2b13      	cmp	r3, #19
 8002ab6:	ddf0      	ble.n	8002a9a <ReadPdmConfig+0x5a>

  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	e00b      	b.n	8002ad6 <ReadPdmConfig+0x96>
  {
    pVariableMap[i + 59] = &nOutputs[i];
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	333b      	adds	r3, #59	; 0x3b
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	0052      	lsls	r2, r2, #1
 8002ac6:	4985      	ldr	r1, [pc, #532]	; (8002cdc <ReadPdmConfig+0x29c>)
 8002ac8:	440a      	add	r2, r1
 8002aca:	4981      	ldr	r1, [pc, #516]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b0b      	cmp	r3, #11
 8002ada:	ddf0      	ble.n	8002abe <ReadPdmConfig+0x7e>
  }

  pVariableMap[71] = &stWiper.nSlowOut;
 8002adc:	4b7c      	ldr	r3, [pc, #496]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002ade:	4a80      	ldr	r2, [pc, #512]	; (8002ce0 <ReadPdmConfig+0x2a0>)
 8002ae0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  pVariableMap[72] = &stWiper.nFastOut;
 8002ae4:	4b7a      	ldr	r3, [pc, #488]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002ae6:	4a7f      	ldr	r2, [pc, #508]	; (8002ce4 <ReadPdmConfig+0x2a4>)
 8002ae8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120


  //Assign variable map values
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	e01a      	b.n	8002b28 <ReadPdmConfig+0xe8>
  {
    stPdmConfig.stOutput[i].pInput = pVariableMap[stPdmConfig.stOutput[i].nInput];
 8002af2:	4975      	ldr	r1, [pc, #468]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b71      	ldr	r3, [pc, #452]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002b0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b0e:	486e      	ldr	r0, [pc, #440]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4403      	add	r3, r0
 8002b1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b20:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	3301      	adds	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2b0b      	cmp	r3, #11
 8002b2c:	dde1      	ble.n	8002af2 <ReadPdmConfig+0xb2>
  }

  //Map input values to config structure
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	e00e      	b.n	8002b52 <ReadPdmConfig+0x112>
  {
    stPdmConfig.stInput[i].pInput = &nUserDigInput[i];
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4a6c      	ldr	r2, [pc, #432]	; (8002ce8 <ReadPdmConfig+0x2a8>)
 8002b38:	1899      	adds	r1, r3, r2
 8002b3a:	4863      	ldr	r0, [pc, #396]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4403      	add	r3, r0
 8002b48:	330c      	adds	r3, #12
 8002b4a:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b07      	cmp	r3, #7
 8002b56:	dded      	ble.n	8002b34 <ReadPdmConfig+0xf4>
  }

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	e044      	b.n	8002be8 <ReadPdmConfig+0x1a8>
  {
    stPdmConfig.stVirtualInput[i].pVar0 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar0];
 8002b5e:	495a      	ldr	r1, [pc, #360]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	33ea      	adds	r3, #234	; 0xea
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002b74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b78:	4853      	ldr	r0, [pc, #332]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4403      	add	r3, r0
 8002b86:	33ec      	adds	r3, #236	; 0xec
 8002b88:	6019      	str	r1, [r3, #0]
    stPdmConfig.stVirtualInput[i].pVar1 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar1];
 8002b8a:	494f      	ldr	r1, [pc, #316]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	33f2      	adds	r3, #242	; 0xf2
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b4c      	ldr	r3, [pc, #304]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ba4:	4848      	ldr	r0, [pc, #288]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4403      	add	r3, r0
 8002bb2:	33f4      	adds	r3, #244	; 0xf4
 8002bb4:	6019      	str	r1, [r3, #0]
    stPdmConfig.stVirtualInput[i].pVar2 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar2];
 8002bb6:	4944      	ldr	r1, [pc, #272]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	33fa      	adds	r3, #250	; 0xfa
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4b41      	ldr	r3, [pc, #260]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002bcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bd0:	483d      	ldr	r0, [pc, #244]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4403      	add	r3, r0
 8002bde:	33fc      	adds	r3, #252	; 0xfc
 8002be0:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3301      	adds	r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b13      	cmp	r3, #19
 8002bec:	ddb7      	ble.n	8002b5e <ReadPdmConfig+0x11e>
  }

  stWiper.eMode = stPdmConfig.stWiper.nMode;
 8002bee:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002bf0:	f893 24f9 	ldrb.w	r2, [r3, #1273]	; 0x4f9
 8002bf4:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <ReadPdmConfig+0x2ac>)
 8002bf6:	701a      	strb	r2, [r3, #0]
  stWiper.pSlowInput = pVariableMap[stPdmConfig.stWiper.nSlowInput];
 8002bf8:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002bfa:	f893 34fa 	ldrb.w	r3, [r3, #1274]	; 0x4fa
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b33      	ldr	r3, [pc, #204]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c06:	4a39      	ldr	r2, [pc, #228]	; (8002cec <ReadPdmConfig+0x2ac>)
 8002c08:	6253      	str	r3, [r2, #36]	; 0x24
  stWiper.pFastInput = pVariableMap[stPdmConfig.stWiper.nFastInput];
 8002c0a:	4b2f      	ldr	r3, [pc, #188]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002c0c:	f893 34fb 	ldrb.w	r3, [r3, #1275]	; 0x4fb
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c18:	4a34      	ldr	r2, [pc, #208]	; (8002cec <ReadPdmConfig+0x2ac>)
 8002c1a:	6293      	str	r3, [r2, #40]	; 0x28
  stWiper.pInterInput = pVariableMap[stPdmConfig.stWiper.nInterInput];
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002c1e:	f893 34fc 	ldrb.w	r3, [r3, #1276]	; 0x4fc
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2a:	4a30      	ldr	r2, [pc, #192]	; (8002cec <ReadPdmConfig+0x2ac>)
 8002c2c:	62d3      	str	r3, [r2, #44]	; 0x2c
  stWiper.pSwipeInput = pVariableMap[stPdmConfig.stWiper.nSwipeInput];
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002c30:	f893 3501 	ldrb.w	r3, [r3, #1281]	; 0x501
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3c:	4a2b      	ldr	r2, [pc, #172]	; (8002cec <ReadPdmConfig+0x2ac>)
 8002c3e:	6193      	str	r3, [r2, #24]
  stWiper.pOnSw = pVariableMap[stPdmConfig.stWiper.nOnInput];
 8002c40:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002c42:	f893 34fd 	ldrb.w	r3, [r3, #1277]	; 0x4fd
 8002c46:	461a      	mov	r2, r3
 8002c48:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c4e:	4a27      	ldr	r2, [pc, #156]	; (8002cec <ReadPdmConfig+0x2ac>)
 8002c50:	6413      	str	r3, [r2, #64]	; 0x40
  stWiper.pParkSw = pVariableMap[stPdmConfig.stWiper.nParkInput];
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002c54:	f893 34ff 	ldrb.w	r3, [r3, #1279]	; 0x4ff
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c60:	4a22      	ldr	r2, [pc, #136]	; (8002cec <ReadPdmConfig+0x2ac>)
 8002c62:	6093      	str	r3, [r2, #8]
  stWiper.pSpeedInput = pVariableMap[stPdmConfig.stWiper.nSpeedInput];
 8002c64:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002c66:	f893 34fe 	ldrb.w	r3, [r3, #1278]	; 0x4fe
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c72:	4a1e      	ldr	r2, [pc, #120]	; (8002cec <ReadPdmConfig+0x2ac>)
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
  stWiper.pWashInput = pVariableMap[stPdmConfig.stWiper.nWashInput];
 8002c76:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002c78:	f893 3502 	ldrb.w	r3, [r3, #1282]	; 0x502
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <ReadPdmConfig+0x290>)
 8002c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c84:	4a19      	ldr	r2, [pc, #100]	; (8002cec <ReadPdmConfig+0x2ac>)
 8002c86:	61d3      	str	r3, [r2, #28]
  stWiper.nWashWipeCycles = stPdmConfig.stWiper.nWashWipeCycles;
 8002c88:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002c8a:	f893 2503 	ldrb.w	r2, [r3, #1283]	; 0x503
 8002c8e:	4b17      	ldr	r3, [pc, #92]	; (8002cec <ReadPdmConfig+0x2ac>)
 8002c90:	f883 2020 	strb.w	r2, [r3, #32]
  for(int i=0; i<PDM_NUM_WIPER_INTER_DELAYS; i++)
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	e010      	b.n	8002cbc <ReadPdmConfig+0x27c>
    stWiper.nInterDelays[i] = stPdmConfig.stWiper.nIntermitTime[i];
 8002c9a:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <ReadPdmConfig+0x288>)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4413      	add	r3, r2
 8002ca6:	8899      	ldrh	r1, [r3, #4]
 8002ca8:	4a10      	ldr	r2, [pc, #64]	; (8002cec <ReadPdmConfig+0x2ac>)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	3304      	adds	r3, #4
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	460a      	mov	r2, r1
 8002cb4:	809a      	strh	r2, [r3, #4]
  for(int i=0; i<PDM_NUM_WIPER_INTER_DELAYS; i++)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	ddeb      	ble.n	8002c9a <ReadPdmConfig+0x25a>
  for(int i=0; i<PDM_NUM_WIPER_SPEED_MAP; i++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	e022      	b.n	8002d0e <ReadPdmConfig+0x2ce>
 8002cc8:	20000200 	.word	0x20000200
 8002ccc:	20000fe8 	.word	0x20000fe8
 8002cd0:	20000ec4 	.word	0x20000ec4
 8002cd4:	20000ff8 	.word	0x20000ff8
 8002cd8:	20001034 	.word	0x20001034
 8002cdc:	2000105c 	.word	0x2000105c
 8002ce0:	20000e76 	.word	0x20000e76
 8002ce4:	20000e78 	.word	0x20000e78
 8002ce8:	20000db8 	.word	0x20000db8
 8002cec:	20000e74 	.word	0x20000e74
    stWiper.eSpeedMap[i] = (WiperSpeed_t)stPdmConfig.stWiper.nSpeedMap[i];
 8002cf0:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <ReadPdmConfig+0x334>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8002cfa:	7819      	ldrb	r1, [r3, #0]
 8002cfc:	4a1e      	ldr	r2, [pc, #120]	; (8002d78 <ReadPdmConfig+0x338>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	3334      	adds	r3, #52	; 0x34
 8002d04:	460a      	mov	r2, r1
 8002d06:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<PDM_NUM_WIPER_SPEED_MAP; i++)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b07      	cmp	r3, #7
 8002d12:	dded      	ble.n	8002cf0 <ReadPdmConfig+0x2b0>

  stPdmConfig.stStarter.pInput = pVariableMap[stPdmConfig.stStarter.nInput];
 8002d14:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <ReadPdmConfig+0x334>)
 8002d16:	f893 3579 	ldrb.w	r3, [r3, #1401]	; 0x579
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <ReadPdmConfig+0x33c>)
 8002d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d22:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <ReadPdmConfig+0x334>)
 8002d24:	f8c2 357c 	str.w	r3, [r2, #1404]	; 0x57c

  for(int i=0; i<PDM_NUM_FLASHERS; i++)
 8002d28:	2300      	movs	r3, #0
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	e01a      	b.n	8002d64 <ReadPdmConfig+0x324>
    stPdmConfig.stFlasher[i].pInput = pVariableMap[stPdmConfig.stFlasher[i].nInput];
 8002d2e:	4911      	ldr	r1, [pc, #68]	; (8002d74 <ReadPdmConfig+0x334>)
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f203 5319 	addw	r3, r3, #1305	; 0x519
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <ReadPdmConfig+0x33c>)
 8002d46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d4a:	480a      	ldr	r0, [pc, #40]	; (8002d74 <ReadPdmConfig+0x334>)
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4403      	add	r3, r0
 8002d58:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8002d5c:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_FLASHERS; i++)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	dde1      	ble.n	8002d2e <ReadPdmConfig+0x2ee>


  return PDM_OK;
 8002d6a:	2301      	movs	r3, #1

}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3728      	adds	r7, #40	; 0x28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000200 	.word	0x20000200
 8002d78:	20000e74 	.word	0x20000e74
 8002d7c:	20000ec4 	.word	0x20000ec4

08002d80 <EvaluateFlasher>:
 */

#include "flasher.h"

void EvaluateFlasher(PdmConfig_Flasher_t* pFlasher, uint16_t pResult[12])
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  if(!pFlasher->nEnabled){
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d107      	bne.n	8002da2 <EvaluateFlasher+0x22>
    pResult[pFlasher->nOutput] = 1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7b5b      	ldrb	r3, [r3, #13]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	801a      	strh	r2, [r3, #0]
    return;
 8002da0:	e048      	b.n	8002e34 <EvaluateFlasher+0xb4>
  }
  if(!*pFlasher->pInput){
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <EvaluateFlasher+0x3c>
    pResult[pFlasher->nOutput] = 1;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	7b5b      	ldrb	r3, [r3, #13]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	2201      	movs	r2, #1
 8002db8:	801a      	strh	r2, [r3, #0]
    return;
 8002dba:	e03b      	b.n	8002e34 <EvaluateFlasher+0xb4>
  }

  if((pResult[pFlasher->nOutput] == 0) && ((HAL_GetTick() - pFlasher->nTimeOff) > pFlasher->nFlashOffTime)){
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7b5b      	ldrb	r3, [r3, #13]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d115      	bne.n	8002df8 <EvaluateFlasher+0x78>
 8002dcc:	f004 fed2 	bl	8007b74 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	8952      	ldrh	r2, [r2, #10]
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d90b      	bls.n	8002df8 <EvaluateFlasher+0x78>
    pResult[pFlasher->nOutput] = 1;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7b5b      	ldrb	r3, [r3, #13]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	4413      	add	r3, r2
 8002dea:	2201      	movs	r2, #1
 8002dec:	801a      	strh	r2, [r3, #0]
    pFlasher->nTimeOn = HAL_GetTick();
 8002dee:	f004 fec1 	bl	8007b74 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	615a      	str	r2, [r3, #20]
  }
  if((pResult[pFlasher->nOutput] == 1) && ((HAL_GetTick() - pFlasher->nTimeOn) > pFlasher->nFlashOnTime)){
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7b5b      	ldrb	r3, [r3, #13]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	4413      	add	r3, r2
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d115      	bne.n	8002e34 <EvaluateFlasher+0xb4>
 8002e08:	f004 feb4 	bl	8007b74 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	8912      	ldrh	r2, [r2, #8]
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d90b      	bls.n	8002e34 <EvaluateFlasher+0xb4>
    pResult[pFlasher->nOutput] = 0;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7b5b      	ldrb	r3, [r3, #13]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	4413      	add	r3, r2
 8002e26:	2200      	movs	r2, #0
 8002e28:	801a      	strh	r2, [r3, #0]
    pFlasher->nTimeOff = HAL_GetTick();
 8002e2a:	f004 fea3 	bl	8007b74 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	611a      	str	r2, [r3, #16]
  }

}
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e40:	f004 fe6e 	bl	8007b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e44:	f000 f8a0 	bl	8002f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e48:	f000 fb52 	bl	80034f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e4c:	f000 fb1e 	bl	800348c <MX_DMA_Init>
  MX_ADC4_Init();
 8002e50:	f000 f982 	bl	8003158 <MX_ADC4_Init>
  MX_CAN_Init();
 8002e54:	f000 f9de 	bl	8003214 <MX_CAN_Init>
  MX_I2C2_Init();
 8002e58:	f000 fa74 	bl	8003344 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002e5c:	f000 fad8 	bl	8003410 <MX_SPI1_Init>
  MX_RTC_Init();
 8002e60:	f000 fab0 	bl	80033c4 <MX_RTC_Init>
  MX_I2C1_Init();
 8002e64:	f000 fa2e 	bl	80032c4 <MX_I2C1_Init>
  MX_CRC_Init();
 8002e68:	f000 fa0a 	bl	8003280 <MX_CRC_Init>
  MX_ADC1_Init();
 8002e6c:	f000 f904 	bl	8003078 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002e70:	f00f fb2a 	bl	80124c8 <osKernelInitialize>
  //if(osTimerStart(KickIWDGHandle, 1300) != osOK)
  //  Error_Handler();
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  qMsgQueueRx = osMessageQueueNew(MSGQUEUE_RX_SIZE, sizeof(MsgQueueRx_t), NULL);
 8002e74:	2200      	movs	r2, #0
 8002e76:	2130      	movs	r1, #48	; 0x30
 8002e78:	2010      	movs	r0, #16
 8002e7a:	f00f fc65 	bl	8012748 <osMessageQueueNew>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4a32      	ldr	r2, [pc, #200]	; (8002f4c <main+0x110>)
 8002e82:	6013      	str	r3, [r2, #0]
  if(qMsgQueueRx == NULL){
 8002e84:	4b31      	ldr	r3, [pc, #196]	; (8002f4c <main+0x110>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <main+0x54>
    //TODO: Message queue not created
    Error_Handler();
 8002e8c:	f000 fc66 	bl	800375c <Error_Handler>
  }

  qMsgQueueUsbTx = osMessageQueueNew(MSGQUEUE_TX_SIZE, sizeof(MsgQueueUsbTx_t), NULL);
 8002e90:	2200      	movs	r2, #0
 8002e92:	2109      	movs	r1, #9
 8002e94:	2010      	movs	r0, #16
 8002e96:	f00f fc57 	bl	8012748 <osMessageQueueNew>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4a2c      	ldr	r2, [pc, #176]	; (8002f50 <main+0x114>)
 8002e9e:	6013      	str	r3, [r2, #0]
  if(qMsgQueueUsbTx == NULL){
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <main+0x114>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <main+0x70>
    //TODO: Message queue not created
    Error_Handler();
 8002ea8:	f000 fc58 	bl	800375c <Error_Handler>
  }

  qMsgQueueCanTx = osMessageQueueNew(MSGQUEUE_TX_SIZE, sizeof(MsgQueueCanTx_t), NULL);
 8002eac:	2200      	movs	r2, #0
 8002eae:	2120      	movs	r1, #32
 8002eb0:	2010      	movs	r0, #16
 8002eb2:	f00f fc49 	bl	8012748 <osMessageQueueNew>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4a26      	ldr	r2, [pc, #152]	; (8002f54 <main+0x118>)
 8002eba:	6013      	str	r3, [r2, #0]
  if(qMsgQueueCanTx == NULL){
 8002ebc:	4b25      	ldr	r3, [pc, #148]	; (8002f54 <main+0x118>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <main+0x8c>
    //TODO: Message queue not created
    Error_Handler();
 8002ec4:	f000 fc4a 	bl	800375c <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002ec8:	4a23      	ldr	r2, [pc, #140]	; (8002f58 <main+0x11c>)
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4823      	ldr	r0, [pc, #140]	; (8002f5c <main+0x120>)
 8002ece:	f00f fb63 	bl	8012598 <osThreadNew>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <main+0x124>)
 8002ed6:	6013      	str	r3, [r2, #0]

  /* creation of i2cTask */
  i2cTaskHandle = osThreadNew(StartI2CTask, NULL, &i2cTask_attributes);
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <main+0x128>)
 8002eda:	2100      	movs	r1, #0
 8002edc:	4822      	ldr	r0, [pc, #136]	; (8002f68 <main+0x12c>)
 8002ede:	f00f fb5b 	bl	8012598 <osThreadNew>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4a21      	ldr	r2, [pc, #132]	; (8002f6c <main+0x130>)
 8002ee6:	6013      	str	r3, [r2, #0]

  /* creation of profetSMTask */
  profetSMTaskHandle = osThreadNew(StartProfetSMTask, NULL, &profetSMTask_attributes);
 8002ee8:	4a21      	ldr	r2, [pc, #132]	; (8002f70 <main+0x134>)
 8002eea:	2100      	movs	r1, #0
 8002eec:	4821      	ldr	r0, [pc, #132]	; (8002f74 <main+0x138>)
 8002eee:	f00f fb53 	bl	8012598 <osThreadNew>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <main+0x13c>)
 8002ef6:	6013      	str	r3, [r2, #0]

  /* creation of canTxTask */
  canTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &canTxTask_attributes);
 8002ef8:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <main+0x140>)
 8002efa:	2100      	movs	r1, #0
 8002efc:	4820      	ldr	r0, [pc, #128]	; (8002f80 <main+0x144>)
 8002efe:	f00f fb4b 	bl	8012598 <osThreadNew>
 8002f02:	4603      	mov	r3, r0
 8002f04:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <main+0x148>)
 8002f06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if(defaultTaskHandle == 0x0)
 8002f08:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <main+0x124>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <main+0xd8>
    Error_Handler();
 8002f10:	f000 fc24 	bl	800375c <Error_Handler>

  if(i2cTaskHandle == 0x0)
 8002f14:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <main+0x130>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <main+0xe4>
    Error_Handler();
 8002f1c:	f000 fc1e 	bl	800375c <Error_Handler>

  if(profetSMTaskHandle == 0x0)
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <main+0x13c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <main+0xf0>
    Error_Handler();
 8002f28:	f000 fc18 	bl	800375c <Error_Handler>

  if(canTxTaskHandle == 0x0)
 8002f2c:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <main+0x148>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <main+0xfc>
    Error_Handler();
 8002f34:	f000 fc12 	bl	800375c <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  if(ReadPdmConfig() != PDM_OK)
 8002f38:	f7ff fd82 	bl	8002a40 <ReadPdmConfig>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d001      	beq.n	8002f46 <main+0x10a>
    Error_Handler();
 8002f42:	f000 fc0b 	bl	800375c <Error_Handler>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002f46:	f00f faf3 	bl	8012530 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f4a:	e7fe      	b.n	8002f4a <main+0x10e>
 8002f4c:	20000adc 	.word	0x20000adc
 8002f50:	20000ae0 	.word	0x20000ae0
 8002f54:	20000ae4 	.word	0x20000ae4
 8002f58:	080165a4 	.word	0x080165a4
 8002f5c:	08003695 	.word	0x08003695
 8002f60:	2000260c 	.word	0x2000260c
 8002f64:	080165c8 	.word	0x080165c8
 8002f68:	080036c9 	.word	0x080036c9
 8002f6c:	20002610 	.word	0x20002610
 8002f70:	080165ec 	.word	0x080165ec
 8002f74:	080036f1 	.word	0x080036f1
 8002f78:	20002614 	.word	0x20002614
 8002f7c:	08016610 	.word	0x08016610
 8002f80:	0800370d 	.word	0x0800370d
 8002f84:	20002618 	.word	0x20002618

08002f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b09e      	sub	sp, #120	; 0x78
 8002f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f92:	2228      	movs	r2, #40	; 0x28
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f012 fd3a 	bl	8015a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fac:	463b      	mov	r3, r7
 8002fae:	223c      	movs	r2, #60	; 0x3c
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f012 fd2c 	bl	8015a10 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002fb8:	f009 fb74 	bl	800c6a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002fbc:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <SystemClock_Config+0xe8>)
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4a2b      	ldr	r2, [pc, #172]	; (8003070 <SystemClock_Config+0xe8>)
 8002fc2:	f023 0318 	bic.w	r3, r3, #24
 8002fc6:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002fc8:	2307      	movs	r3, #7
 8002fca:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fd0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fde:	2310      	movs	r3, #16
 8002fe0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fe6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002fec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ff0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f009 fb64 	bl	800c6c4 <HAL_RCC_OscConfig>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8003002:	f000 fbab 	bl	800375c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003006:	230f      	movs	r3, #15
 8003008:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800300a:	2302      	movs	r3, #2
 800300c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800300e:	2300      	movs	r3, #0
 8003010:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003018:	2300      	movs	r3, #0
 800301a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800301c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003020:	2102      	movs	r1, #2
 8003022:	4618      	mov	r0, r3
 8003024:	f00a fb8c 	bl	800d740 <HAL_RCC_ClockConfig>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800302e:	f000 fb95 	bl	800375c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <SystemClock_Config+0xec>)
 8003034:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_RTC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800303a:	2300      	movs	r3, #0
 800303c:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800303e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003042:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003044:	2300      	movs	r3, #0
 8003046:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003048:	463b      	mov	r3, r7
 800304a:	4618      	mov	r0, r3
 800304c:	f00a fdf0 	bl	800dc30 <HAL_RCCEx_PeriphCLKConfig>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8003056:	f000 fb81 	bl	800375c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800305a:	2200      	movs	r2, #0
 800305c:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8003060:	2000      	movs	r0, #0
 8003062:	f00a fce9 	bl	800da38 <HAL_RCC_MCOConfig>
}
 8003066:	bf00      	nop
 8003068:	3778      	adds	r7, #120	; 0x78
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000
 8003074:	00030060 	.word	0x00030060

08003078 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800307e:	f107 031c 	add.w	r3, r7, #28
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800308a:	1d3b      	adds	r3, r7, #4
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	611a      	str	r2, [r3, #16]
 8003098:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800309a:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <MX_ADC1_Init+0xdc>)
 800309c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80030a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80030a2:	4b2c      	ldr	r3, [pc, #176]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80030a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80030b0:	4b28      	ldr	r3, [pc, #160]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80030b6:	4b27      	ldr	r3, [pc, #156]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030bc:	4b25      	ldr	r3, [pc, #148]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030c4:	4b23      	ldr	r3, [pc, #140]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030ca:	4b22      	ldr	r3, [pc, #136]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030d0:	4b20      	ldr	r3, [pc, #128]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80030d6:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030d8:	2201      	movs	r2, #1
 80030da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030e6:	2204      	movs	r2, #4
 80030e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80030ea:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80030f0:	4b18      	ldr	r3, [pc, #96]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80030f6:	4817      	ldr	r0, [pc, #92]	; (8003154 <MX_ADC1_Init+0xdc>)
 80030f8:	f004 fd66 	bl	8007bc8 <HAL_ADC_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003102:	f000 fb2b 	bl	800375c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800310a:	f107 031c 	add.w	r3, r7, #28
 800310e:	4619      	mov	r1, r3
 8003110:	4810      	ldr	r0, [pc, #64]	; (8003154 <MX_ADC1_Init+0xdc>)
 8003112:	f005 fb41 	bl	8008798 <HAL_ADCEx_MultiModeConfigChannel>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800311c:	f000 fb1e 	bl	800375c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003120:	2310      	movs	r3, #16
 8003122:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003124:	2301      	movs	r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003128:	2300      	movs	r3, #0
 800312a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800312c:	2307      	movs	r3, #7
 800312e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	4619      	mov	r1, r3
 800313c:	4805      	ldr	r0, [pc, #20]	; (8003154 <MX_ADC1_Init+0xdc>)
 800313e:	f005 f83f 	bl	80081c0 <HAL_ADC_ConfigChannel>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8003148:	f000 fb08 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800314c:	bf00      	nop
 800314e:	3728      	adds	r7, #40	; 0x28
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	2000237c 	.word	0x2000237c

08003158 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800315e:	463b      	mov	r3, r7
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
 800316c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800316e:	4b27      	ldr	r3, [pc, #156]	; (800320c <MX_ADC4_Init+0xb4>)
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <MX_ADC4_Init+0xb8>)
 8003172:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <MX_ADC4_Init+0xb4>)
 8003176:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800317a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800317c:	4b23      	ldr	r3, [pc, #140]	; (800320c <MX_ADC4_Init+0xb4>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <MX_ADC4_Init+0xb4>)
 8003184:	2200      	movs	r2, #0
 8003186:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8003188:	4b20      	ldr	r3, [pc, #128]	; (800320c <MX_ADC4_Init+0xb4>)
 800318a:	2201      	movs	r2, #1
 800318c:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <MX_ADC4_Init+0xb4>)
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003196:	4b1d      	ldr	r3, [pc, #116]	; (800320c <MX_ADC4_Init+0xb4>)
 8003198:	2200      	movs	r2, #0
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800319c:	4b1b      	ldr	r3, [pc, #108]	; (800320c <MX_ADC4_Init+0xb4>)
 800319e:	2201      	movs	r2, #1
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <MX_ADC4_Init+0xb4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80031a8:	4b18      	ldr	r3, [pc, #96]	; (800320c <MX_ADC4_Init+0xb4>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80031ae:	4b17      	ldr	r3, [pc, #92]	; (800320c <MX_ADC4_Init+0xb4>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <MX_ADC4_Init+0xb4>)
 80031b8:	2204      	movs	r2, #4
 80031ba:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <MX_ADC4_Init+0xb4>)
 80031be:	2200      	movs	r2, #0
 80031c0:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80031c2:	4b12      	ldr	r3, [pc, #72]	; (800320c <MX_ADC4_Init+0xb4>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80031c8:	4810      	ldr	r0, [pc, #64]	; (800320c <MX_ADC4_Init+0xb4>)
 80031ca:	f004 fcfd 	bl	8007bc8 <HAL_ADC_Init>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 80031d4:	f000 fac2 	bl	800375c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80031d8:	2303      	movs	r3, #3
 80031da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031dc:	2301      	movs	r3, #1
 80031de:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80031e4:	2307      	movs	r3, #7
 80031e6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80031f0:	463b      	mov	r3, r7
 80031f2:	4619      	mov	r1, r3
 80031f4:	4805      	ldr	r0, [pc, #20]	; (800320c <MX_ADC4_Init+0xb4>)
 80031f6:	f004 ffe3 	bl	80081c0 <HAL_ADC_ConfigChannel>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 8003200:	f000 faac 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8003204:	bf00      	nop
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	200023cc 	.word	0x200023cc
 8003210:	50000500 	.word	0x50000500

08003214 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8003218:	4b17      	ldr	r3, [pc, #92]	; (8003278 <MX_CAN_Init+0x64>)
 800321a:	4a18      	ldr	r2, [pc, #96]	; (800327c <MX_CAN_Init+0x68>)
 800321c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <MX_CAN_Init+0x64>)
 8003220:	2204      	movs	r2, #4
 8003222:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <MX_CAN_Init+0x64>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800322a:	4b13      	ldr	r3, [pc, #76]	; (8003278 <MX_CAN_Init+0x64>)
 800322c:	2200      	movs	r2, #0
 800322e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8003230:	4b11      	ldr	r3, [pc, #68]	; (8003278 <MX_CAN_Init+0x64>)
 8003232:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003236:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <MX_CAN_Init+0x64>)
 800323a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800323e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003240:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <MX_CAN_Init+0x64>)
 8003242:	2200      	movs	r2, #0
 8003244:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003246:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <MX_CAN_Init+0x64>)
 8003248:	2200      	movs	r2, #0
 800324a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <MX_CAN_Init+0x64>)
 800324e:	2200      	movs	r2, #0
 8003250:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <MX_CAN_Init+0x64>)
 8003254:	2200      	movs	r2, #0
 8003256:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <MX_CAN_Init+0x64>)
 800325a:	2200      	movs	r2, #0
 800325c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <MX_CAN_Init+0x64>)
 8003260:	2200      	movs	r2, #0
 8003262:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003264:	4804      	ldr	r0, [pc, #16]	; (8003278 <MX_CAN_Init+0x64>)
 8003266:	f005 fcb9 	bl	8008bdc <HAL_CAN_Init>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8003270:	f000 fa74 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}
 8003278:	200024a4 	.word	0x200024a4
 800327c:	40006400 	.word	0x40006400

08003280 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003284:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <MX_CRC_Init+0x3c>)
 8003286:	4a0e      	ldr	r2, [pc, #56]	; (80032c0 <MX_CRC_Init+0x40>)
 8003288:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <MX_CRC_Init+0x3c>)
 800328c:	2200      	movs	r2, #0
 800328e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <MX_CRC_Init+0x3c>)
 8003292:	2200      	movs	r2, #0
 8003294:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <MX_CRC_Init+0x3c>)
 8003298:	2220      	movs	r2, #32
 800329a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800329c:	4b07      	ldr	r3, [pc, #28]	; (80032bc <MX_CRC_Init+0x3c>)
 800329e:	2280      	movs	r2, #128	; 0x80
 80032a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <MX_CRC_Init+0x3c>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80032a8:	4804      	ldr	r0, [pc, #16]	; (80032bc <MX_CRC_Init+0x3c>)
 80032aa:	f006 fbc5 	bl	8009a38 <HAL_CRC_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80032b4:	f000 fa52 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	200024cc 	.word	0x200024cc
 80032c0:	40023000 	.word	0x40023000

080032c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032c8:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <MX_I2C1_Init+0x74>)
 80032ca:	4a1c      	ldr	r2, [pc, #112]	; (800333c <MX_I2C1_Init+0x78>)
 80032cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300208;// 0x00702681;
 80032ce:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <MX_I2C1_Init+0x74>)
 80032d0:	4a1b      	ldr	r2, [pc, #108]	; (8003340 <MX_I2C1_Init+0x7c>)
 80032d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80032d4:	4b18      	ldr	r3, [pc, #96]	; (8003338 <MX_I2C1_Init+0x74>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032da:	4b17      	ldr	r3, [pc, #92]	; (8003338 <MX_I2C1_Init+0x74>)
 80032dc:	2201      	movs	r2, #1
 80032de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032e0:	4b15      	ldr	r3, [pc, #84]	; (8003338 <MX_I2C1_Init+0x74>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80032e6:	4b14      	ldr	r3, [pc, #80]	; (8003338 <MX_I2C1_Init+0x74>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <MX_I2C1_Init+0x74>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <MX_I2C1_Init+0x74>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <MX_I2C1_Init+0x74>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032fe:	480e      	ldr	r0, [pc, #56]	; (8003338 <MX_I2C1_Init+0x74>)
 8003300:	f006 ffe4 	bl	800a2cc <HAL_I2C_Init>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800330a:	f000 fa27 	bl	800375c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800330e:	2100      	movs	r1, #0
 8003310:	4809      	ldr	r0, [pc, #36]	; (8003338 <MX_I2C1_Init+0x74>)
 8003312:	f007 fc45 	bl	800aba0 <HAL_I2CEx_ConfigAnalogFilter>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800331c:	f000 fa1e 	bl	800375c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003320:	2100      	movs	r1, #0
 8003322:	4805      	ldr	r0, [pc, #20]	; (8003338 <MX_I2C1_Init+0x74>)
 8003324:	f007 fc87 	bl	800ac36 <HAL_I2CEx_ConfigDigitalFilter>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800332e:	f000 fa15 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	200024f0 	.word	0x200024f0
 800333c:	40005400 	.word	0x40005400
 8003340:	00300208 	.word	0x00300208

08003344 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003348:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <MX_I2C2_Init+0x74>)
 800334a:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <MX_I2C2_Init+0x78>)
 800334c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300208;// 0x00702681;
 800334e:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003350:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <MX_I2C2_Init+0x7c>)
 8003352:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003354:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800335a:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <MX_I2C2_Init+0x74>)
 800335c:	2201      	movs	r2, #1
 800335e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003360:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003368:	2200      	movs	r2, #0
 800336a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <MX_I2C2_Init+0x74>)
 800336e:	2200      	movs	r2, #0
 8003370:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003374:	2200      	movs	r2, #0
 8003376:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <MX_I2C2_Init+0x74>)
 800337a:	2200      	movs	r2, #0
 800337c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800337e:	480e      	ldr	r0, [pc, #56]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003380:	f006 ffa4 	bl	800a2cc <HAL_I2C_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800338a:	f000 f9e7 	bl	800375c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800338e:	2100      	movs	r1, #0
 8003390:	4809      	ldr	r0, [pc, #36]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003392:	f007 fc05 	bl	800aba0 <HAL_I2CEx_ConfigAnalogFilter>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800339c:	f000 f9de 	bl	800375c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80033a0:	2100      	movs	r1, #0
 80033a2:	4805      	ldr	r0, [pc, #20]	; (80033b8 <MX_I2C2_Init+0x74>)
 80033a4:	f007 fc47 	bl	800ac36 <HAL_I2CEx_ConfigDigitalFilter>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80033ae:	f000 f9d5 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	2000253c 	.word	0x2000253c
 80033bc:	40005800 	.word	0x40005800
 80033c0:	00300208 	.word	0x00300208

080033c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <MX_RTC_Init+0x44>)
 80033ca:	4a10      	ldr	r2, [pc, #64]	; (800340c <MX_RTC_Init+0x48>)
 80033cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <MX_RTC_Init+0x44>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <MX_RTC_Init+0x44>)
 80033d6:	227f      	movs	r2, #127	; 0x7f
 80033d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <MX_RTC_Init+0x44>)
 80033dc:	22ff      	movs	r2, #255	; 0xff
 80033de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <MX_RTC_Init+0x44>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <MX_RTC_Init+0x44>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <MX_RTC_Init+0x44>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80033f2:	4805      	ldr	r0, [pc, #20]	; (8003408 <MX_RTC_Init+0x44>)
 80033f4:	f00a fdcc 	bl	800df90 <HAL_RTC_Init>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80033fe:	f000 f9ad 	bl	800375c <Error_Handler>
  /* USER CODE END Check_RTC_BKUP */
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20002588 	.word	0x20002588
 800340c:	40002800 	.word	0x40002800

08003410 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <MX_SPI1_Init+0x74>)
 8003416:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <MX_SPI1_Init+0x78>)
 8003418:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800341a:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <MX_SPI1_Init+0x74>)
 800341c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003420:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <MX_SPI1_Init+0x74>)
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003428:	4b16      	ldr	r3, [pc, #88]	; (8003484 <MX_SPI1_Init+0x74>)
 800342a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800342e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <MX_SPI1_Init+0x74>)
 8003432:	2200      	movs	r2, #0
 8003434:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <MX_SPI1_Init+0x74>)
 8003438:	2200      	movs	r2, #0
 800343a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <MX_SPI1_Init+0x74>)
 800343e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003442:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <MX_SPI1_Init+0x74>)
 8003446:	2208      	movs	r2, #8
 8003448:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800344a:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <MX_SPI1_Init+0x74>)
 800344c:	2200      	movs	r2, #0
 800344e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <MX_SPI1_Init+0x74>)
 8003452:	2200      	movs	r2, #0
 8003454:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <MX_SPI1_Init+0x74>)
 8003458:	2200      	movs	r2, #0
 800345a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <MX_SPI1_Init+0x74>)
 800345e:	2207      	movs	r2, #7
 8003460:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <MX_SPI1_Init+0x74>)
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <MX_SPI1_Init+0x74>)
 800346a:	2208      	movs	r2, #8
 800346c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800346e:	4805      	ldr	r0, [pc, #20]	; (8003484 <MX_SPI1_Init+0x74>)
 8003470:	f00a fe73 	bl	800e15a <HAL_SPI_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800347a:	f000 f96f 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200025a8 	.word	0x200025a8
 8003488:	40013000 	.word	0x40013000

0800348c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003492:	4b16      	ldr	r3, [pc, #88]	; (80034ec <MX_DMA_Init+0x60>)
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	4a15      	ldr	r2, [pc, #84]	; (80034ec <MX_DMA_Init+0x60>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6153      	str	r3, [r2, #20]
 800349e:	4b13      	ldr	r3, [pc, #76]	; (80034ec <MX_DMA_Init+0x60>)
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <MX_DMA_Init+0x60>)
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <MX_DMA_Init+0x60>)
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	6153      	str	r3, [r2, #20]
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <MX_DMA_Init+0x60>)
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80034c2:	2200      	movs	r2, #0
 80034c4:	2105      	movs	r1, #5
 80034c6:	200b      	movs	r0, #11
 80034c8:	f006 fa8c 	bl	80099e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80034cc:	200b      	movs	r0, #11
 80034ce:	f006 faa5 	bl	8009a1c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 80034d2:	2200      	movs	r2, #0
 80034d4:	2105      	movs	r1, #5
 80034d6:	2039      	movs	r0, #57	; 0x39
 80034d8:	f006 fa84 	bl	80099e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80034dc:	2039      	movs	r0, #57	; 0x39
 80034de:	f006 fa9d 	bl	8009a1c <HAL_NVIC_EnableIRQ>

}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000

080034f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f6:	f107 0314 	add.w	r3, r7, #20
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003506:	4b55      	ldr	r3, [pc, #340]	; (800365c <MX_GPIO_Init+0x16c>)
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	4a54      	ldr	r2, [pc, #336]	; (800365c <MX_GPIO_Init+0x16c>)
 800350c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003510:	6153      	str	r3, [r2, #20]
 8003512:	4b52      	ldr	r3, [pc, #328]	; (800365c <MX_GPIO_Init+0x16c>)
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800351e:	4b4f      	ldr	r3, [pc, #316]	; (800365c <MX_GPIO_Init+0x16c>)
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	4a4e      	ldr	r2, [pc, #312]	; (800365c <MX_GPIO_Init+0x16c>)
 8003524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003528:	6153      	str	r3, [r2, #20]
 800352a:	4b4c      	ldr	r3, [pc, #304]	; (800365c <MX_GPIO_Init+0x16c>)
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003536:	4b49      	ldr	r3, [pc, #292]	; (800365c <MX_GPIO_Init+0x16c>)
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	4a48      	ldr	r2, [pc, #288]	; (800365c <MX_GPIO_Init+0x16c>)
 800353c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003540:	6153      	str	r3, [r2, #20]
 8003542:	4b46      	ldr	r3, [pc, #280]	; (800365c <MX_GPIO_Init+0x16c>)
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800354e:	4b43      	ldr	r3, [pc, #268]	; (800365c <MX_GPIO_Init+0x16c>)
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	4a42      	ldr	r2, [pc, #264]	; (800365c <MX_GPIO_Init+0x16c>)
 8003554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003558:	6153      	str	r3, [r2, #20]
 800355a:	4b40      	ldr	r3, [pc, #256]	; (800365c <MX_GPIO_Init+0x16c>)
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOA, EXTRA1_Pin|EXTRA3_Pin, GPIO_PIN_RESET);
 8003566:	2200      	movs	r2, #0
 8003568:	f248 0104 	movw	r1, #32772	; 0x8004
 800356c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003570:	f006 fe7a 	bl	800a268 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, EXTRA2_Pin|PF_RESET_Pin|USB_PULLUP_Pin, GPIO_PIN_RESET);
 8003574:	2200      	movs	r2, #0
 8003576:	f640 0114 	movw	r1, #2068	; 0x814
 800357a:	4839      	ldr	r0, [pc, #228]	; (8003660 <MX_GPIO_Init+0x170>)
 800357c:	f006 fe74 	bl	800a268 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = EXTRA1_Pin;
 8003580:	2304      	movs	r3, #4
 8003582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003584:	2301      	movs	r3, #1
 8003586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003588:	2302      	movs	r3, #2
 800358a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358c:	2300      	movs	r3, #0
 800358e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRA1_GPIO_Port, &GPIO_InitStruct);
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	4619      	mov	r1, r3
 8003596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800359a:	f006 fceb 	bl	8009f74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = EXTRA3_Pin;
 800359e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a4:	2301      	movs	r3, #1
 80035a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035a8:	2302      	movs	r3, #2
 80035aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ac:	2300      	movs	r3, #0
 80035ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRA3_GPIO_Port, &GPIO_InitStruct);
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	4619      	mov	r1, r3
 80035b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ba:	f006 fcdb 	bl	8009f74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = EXTRA2_Pin;
 80035be:	2304      	movs	r3, #4
 80035c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035c2:	2301      	movs	r3, #1
 80035c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035c6:	2302      	movs	r3, #2
 80035c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ca:	2300      	movs	r3, #0
 80035cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRA2_GPIO_Port, &GPIO_InitStruct);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4619      	mov	r1, r3
 80035d4:	4822      	ldr	r0, [pc, #136]	; (8003660 <MX_GPIO_Init+0x170>)
 80035d6:	f006 fccd 	bl	8009f74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PF_RESET_Pin;
 80035da:	2310      	movs	r3, #16
 80035dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035de:	2301      	movs	r3, #1
 80035e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e6:	2300      	movs	r3, #0
 80035e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PF_RESET_Port, &GPIO_InitStruct);
 80035ea:	f107 0314 	add.w	r3, r7, #20
 80035ee:	4619      	mov	r1, r3
 80035f0:	481b      	ldr	r0, [pc, #108]	; (8003660 <MX_GPIO_Init+0x170>)
 80035f2:	f006 fcbf 	bl	8009f74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80035f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003600:	2302      	movs	r3, #2
 8003602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4619      	mov	r1, r3
 800360a:	4815      	ldr	r0, [pc, #84]	; (8003660 <MX_GPIO_Init+0x170>)
 800360c:	f006 fcb2 	bl	8009f74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USB_PULLUP_Pin;
 8003610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003616:	2311      	movs	r3, #17
 8003618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361e:	2300      	movs	r3, #0
 8003620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PULLUP_GPIO_Port, &GPIO_InitStruct);
 8003622:	f107 0314 	add.w	r3, r7, #20
 8003626:	4619      	mov	r1, r3
 8003628:	480d      	ldr	r0, [pc, #52]	; (8003660 <MX_GPIO_Init+0x170>)
 800362a:	f006 fca3 	bl	8009f74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800362e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	2302      	movs	r3, #2
 8003636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363c:	2300      	movs	r3, #0
 800363e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003640:	2300      	movs	r3, #0
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003644:	f107 0314 	add.w	r3, r7, #20
 8003648:	4619      	mov	r1, r3
 800364a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800364e:	f006 fc91 	bl	8009f74 <HAL_GPIO_Init>

}
 8003652:	bf00      	nop
 8003654:	3728      	adds	r7, #40	; 0x28
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	48000400 	.word	0x48000400

08003664 <ConfigureRunTimeCounter>:

/* USER CODE BEGIN 4 */
#if( configGENERATE_RUN_TIME_STATS == 1)
  void ConfigureRunTimeCounter(void)
  {
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
    nRunTimeCount = 0;
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <ConfigureRunTimeCounter+0x14>)
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
  }
 800366e:	bf00      	nop
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	2000261c 	.word	0x2000261c

0800367c <GetRunTimeCounter>:

  uint32_t GetRunTimeCounter(void)
  {
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
    return nRunTimeCount;
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <GetRunTimeCounter+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
  }
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	2000261c 	.word	0x2000261c

08003694 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af02      	add	r7, sp, #8
 800369a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  PdmMainTask(&defaultTaskHandle, &hadc1, &hadc4, &hrtc, &hcrc);
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <StartDefaultTask+0x20>)
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <StartDefaultTask+0x24>)
 80036a2:	4a06      	ldr	r2, [pc, #24]	; (80036bc <StartDefaultTask+0x28>)
 80036a4:	4906      	ldr	r1, [pc, #24]	; (80036c0 <StartDefaultTask+0x2c>)
 80036a6:	4807      	ldr	r0, [pc, #28]	; (80036c4 <StartDefaultTask+0x30>)
 80036a8:	f7fd fbf6 	bl	8000e98 <PdmMainTask>
  /* USER CODE END 5 */
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200024cc 	.word	0x200024cc
 80036b8:	20002588 	.word	0x20002588
 80036bc:	200023cc 	.word	0x200023cc
 80036c0:	2000237c 	.word	0x2000237c
 80036c4:	2000260c 	.word	0x2000260c

080036c8 <StartI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CTask */
void StartI2CTask(void *argument)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CTask */
  I2CTask(&i2cTaskHandle, &hi2c1, &hi2c2);
 80036d0:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <StartI2CTask+0x1c>)
 80036d2:	4905      	ldr	r1, [pc, #20]	; (80036e8 <StartI2CTask+0x20>)
 80036d4:	4805      	ldr	r0, [pc, #20]	; (80036ec <StartI2CTask+0x24>)
 80036d6:	f7fd fe11 	bl	80012fc <I2CTask>
  /* USER CODE END StartI2CTask */
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	2000253c 	.word	0x2000253c
 80036e8:	200024f0 	.word	0x200024f0
 80036ec:	20002610 	.word	0x20002610

080036f0 <StartProfetSMTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProfetSMTask */
void StartProfetSMTask(void *argument)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProfetSMTask */
  ProfetSMTask(&profetSMTaskHandle);
 80036f8:	4803      	ldr	r0, [pc, #12]	; (8003708 <StartProfetSMTask+0x18>)
 80036fa:	f7fe f9ab 	bl	8001a54 <ProfetSMTask>
  /* USER CODE END StartProfetSMTask */
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20002614 	.word	0x20002614

0800370c <StartCanTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanTxTask */
void StartCanTxTask(void *argument)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanTxTask */
  /* Infinite loop */
  CanTxTask(&canTxTaskHandle, &hcan);
 8003714:	4903      	ldr	r1, [pc, #12]	; (8003724 <StartCanTxTask+0x18>)
 8003716:	4804      	ldr	r0, [pc, #16]	; (8003728 <StartCanTxTask+0x1c>)
 8003718:	f7fe fd5a 	bl	80021d0 <CanTxTask>
  /* USER CODE END StartCanTxTask */
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	200024a4 	.word	0x200024a4
 8003728:	20002618 	.word	0x20002618

0800372c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a06      	ldr	r2, [pc, #24]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d106      	bne.n	800374c <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
 800373e:	f004 fa05 	bl	8007b4c <HAL_IncTick>
    #if( configGENERATE_RUN_TIME_STATS == 1)
      nRunTimeCount = nRunTimeCount + 1;
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	4a03      	ldr	r2, [pc, #12]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800374a:	6013      	str	r3, [r2, #0]
    #endif
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40001000 	.word	0x40001000
 8003758:	2000261c 	.word	0x2000261c

0800375c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __NOP();
 8003760:	bf00      	nop
  /* USER CODE END Error_Handler_Debug */
}
 8003762:	bf00      	nop
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <PdmConfig_Set>:
  MB85RC_Write(hi2c, nAddr, 0x0, (uint8_t*)pConfig, sizeof(*pConfig));

  return 1;
}

uint8_t PdmConfig_Set(PdmConfig_t* pConfig, MsgQueueRx_t* stMsgRx, osMessageQueueId_t* qMsgQueueUsbTx, osMessageQueueId_t* qMsgQueueCanTx){
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]

  nSend = 0;
 800377a:	4b6a      	ldr	r3, [pc, #424]	; (8003924 <PdmConfig_Set+0x1b8>)
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]

  switch((MsgQueueRxCmd_t)stMsgRx->nRxData[0]){
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003786:	3b43      	subs	r3, #67	; 0x43
 8003788:	2b16      	cmp	r3, #22
 800378a:	f201 82f4 	bhi.w	8004d76 <PdmConfig_Set+0x160a>
 800378e:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <PdmConfig_Set+0x28>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037f1 	.word	0x080037f1
 8003798:	08004829 	.word	0x08004829
 800379c:	08004d77 	.word	0x08004d77
 80037a0:	08004d77 	.word	0x08004d77
 80037a4:	08004d77 	.word	0x08004d77
 80037a8:	080045bd 	.word	0x080045bd
 80037ac:	08003935 	.word	0x08003935
 80037b0:	08004d77 	.word	0x08004d77
 80037b4:	08004d77 	.word	0x08004d77
 80037b8:	08003917 	.word	0x08003917
 80037bc:	08004d77 	.word	0x08004d77
 80037c0:	08004a9d 	.word	0x08004a9d
 80037c4:	08003acd 	.word	0x08003acd
 80037c8:	08004275 	.word	0x08004275
 80037cc:	08004d77 	.word	0x08004d77
 80037d0:	08004d77 	.word	0x08004d77
 80037d4:	08004d77 	.word	0x08004d77
 80037d8:	08004d77 	.word	0x08004d77
 80037dc:	08003dd9 	.word	0x08003dd9
 80037e0:	08004d29 	.word	0x08004d29
 80037e4:	08004107 	.word	0x08004107
 80037e8:	08004d77 	.word	0x08004d77
 80037ec:	08004417 	.word	0x08004417

    //Set CAN Settings
    // 'C'
    case MSG_RX_SET_CAN:
      if(stMsgRx->nRxLen == 5){
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037f6:	2b05      	cmp	r3, #5
 80037f8:	d13c      	bne.n	8003874 <PdmConfig_Set+0x108>

        pConfig->stDevConfig.nCanEnabled = stMsgRx->nRxData[1] & 0x01;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	b2da      	uxtb	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	705a      	strb	r2, [r3, #1]
        pConfig->stCanOutput.nEnabled = (stMsgRx->nRxData[1] & 0x02) >> 1;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003810:	105b      	asrs	r3, r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	b2da      	uxtb	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
        pConfig->stDevConfig.nCanSpeed = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	b2da      	uxtb	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	709a      	strb	r2, [r3, #2]

        pConfig->stCanOutput.nBaseId = (stMsgRx->nRxData[2] << 8) + stMsgRx->nRxData[3];
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003834:	b29b      	uxth	r3, r3
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	b29a      	uxth	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003840:	b29b      	uxth	r3, r3
 8003842:	4413      	add	r3, r2
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f8a3 28d6 	strh.w	r2, [r3, #2262]	; 0x8d6
        pConfig->stCanOutput.nUpdateTime = stMsgRx->nRxData[4] * 100;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003852:	b29b      	uxth	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	0092      	lsls	r2, r2, #2
 8003858:	4413      	add	r3, r2
 800385a:	461a      	mov	r2, r3
 800385c:	0091      	lsls	r1, r2, #2
 800385e:	461a      	mov	r2, r3
 8003860:	460b      	mov	r3, r1
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f8a3 28d8 	strh.w	r2, [r3, #2264]	; 0x8d8
        nSend = 1;
 800386e:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <PdmConfig_Set+0x1b8>)
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
      }

      if((stMsgRx->nRxLen == 1) || (nSend)){
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800387a:	2b01      	cmp	r3, #1
 800387c:	d004      	beq.n	8003888 <PdmConfig_Set+0x11c>
 800387e:	4b29      	ldr	r3, [pc, #164]	; (8003924 <PdmConfig_Set+0x1b8>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f001 8279 	beq.w	8004d7a <PdmConfig_Set+0x160e>
        stMsgUsbTx.nTxLen = 5;
 8003888:	4b27      	ldr	r3, [pc, #156]	; (8003928 <PdmConfig_Set+0x1bc>)
 800388a:	2205      	movs	r2, #5
 800388c:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 800388e:	4b27      	ldr	r3, [pc, #156]	; (800392c <PdmConfig_Set+0x1c0>)
 8003890:	2205      	movs	r2, #5
 8003892:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_CAN;
 8003894:	4b24      	ldr	r3, [pc, #144]	; (8003928 <PdmConfig_Set+0x1bc>)
 8003896:	2263      	movs	r2, #99	; 0x63
 8003898:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stDevConfig.nCanSpeed & 0x0F) << 4) + ((pConfig->stCanOutput.nEnabled & 0x01) << 1) + (pConfig->stDevConfig.nCanEnabled & 0x01);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	789b      	ldrb	r3, [r3, #2]
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 38d4 	ldrb.w	r3, [r3, #2260]	; 0x8d4
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	785b      	ldrb	r3, [r3, #1]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	4413      	add	r3, r2
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	4b18      	ldr	r3, [pc, #96]	; (8003928 <PdmConfig_Set+0x1bc>)
 80038c6:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)((pConfig->stCanOutput.nBaseId & 0xFF00) >> 8);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	4b14      	ldr	r3, [pc, #80]	; (8003928 <PdmConfig_Set+0x1bc>)
 80038d6:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stCanOutput.nBaseId & 0x00FF);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <PdmConfig_Set+0x1bc>)
 80038e2:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)((pConfig->stCanOutput.nUpdateTime) / 100);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
 80038ea:	4a11      	ldr	r2, [pc, #68]	; (8003930 <PdmConfig_Set+0x1c4>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	095b      	lsrs	r3, r3, #5
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <PdmConfig_Set+0x1bc>)
 80038f8:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <PdmConfig_Set+0x1bc>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <PdmConfig_Set+0x1bc>)
 8003902:	2200      	movs	r2, #0
 8003904:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <PdmConfig_Set+0x1bc>)
 8003908:	2200      	movs	r2, #0
 800390a:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <PdmConfig_Set+0x1b8>)
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
      }
    break;
 8003912:	f001 ba32 	b.w	8004d7a <PdmConfig_Set+0x160e>
    // 'L'
    case MSG_RX_SET_LOGGING:
      if(stMsgRx->nRxLen == 3){
        //TODO:Send response
      }
      if((stMsgRx->nRxLen == 1) || (nSend)){
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800391c:	2b01      	cmp	r3, #1

      }
    break;
 800391e:	f001 ba4a 	b.w	8004db6 <PdmConfig_Set+0x164a>
 8003922:	bf00      	nop
 8003924:	2000264c 	.word	0x2000264c
 8003928:	20002620 	.word	0x20002620
 800392c:	2000262c 	.word	0x2000262c
 8003930:	51eb851f 	.word	0x51eb851f

    //Set Input Settings
    // 'I'
    case MSG_RX_SET_INPUTS:
      if(stMsgRx->nRxLen == 3){
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800393a:	2b03      	cmp	r3, #3
 800393c:	d14e      	bne.n	80039dc <PdmConfig_Set+0x270>
        nInNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	b2da      	uxtb	r2, r3
 8003948:	4b5b      	ldr	r3, [pc, #364]	; (8003ab8 <PdmConfig_Set+0x34c>)
 800394a:	701a      	strb	r2, [r3, #0]
        if(nInNum < PDM_NUM_INPUTS){
 800394c:	4b5a      	ldr	r3, [pc, #360]	; (8003ab8 <PdmConfig_Set+0x34c>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b07      	cmp	r3, #7
 8003952:	d843      	bhi.n	80039dc <PdmConfig_Set+0x270>
          pConfig->stInput[nInNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800395a:	4a57      	ldr	r2, [pc, #348]	; (8003ab8 <PdmConfig_Set+0x34c>)
 800395c:	7812      	ldrb	r2, [r2, #0]
 800395e:	4611      	mov	r1, r2
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	b2d8      	uxtb	r0, r3
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	460b      	mov	r3, r1
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	1a5b      	subs	r3, r3, r1
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	3308      	adds	r3, #8
 8003974:	4602      	mov	r2, r0
 8003976:	701a      	strb	r2, [r3, #0]
          pConfig->stInput[nInNum].eMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800397e:	105b      	asrs	r3, r3, #1
 8003980:	b2db      	uxtb	r3, r3
 8003982:	4a4d      	ldr	r2, [pc, #308]	; (8003ab8 <PdmConfig_Set+0x34c>)
 8003984:	7812      	ldrb	r2, [r2, #0]
 8003986:	4611      	mov	r1, r2
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	b2d8      	uxtb	r0, r3
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	460b      	mov	r3, r1
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	1a5b      	subs	r3, r3, r1
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	3310      	adds	r3, #16
 800399c:	4602      	mov	r2, r0
 800399e:	701a      	strb	r2, [r3, #0]
          //TODO:Include binary on level on V3 PCB
          //pConfig->stInput[nInNum].nOnLevel = (stMsgRx->nRxData[1] & 0x08) >> 3;
          pConfig->stInput[nInNum].nDebounceTime = stMsgRx->nRxData[2] * 100;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	4b43      	ldr	r3, [pc, #268]	; (8003ab8 <PdmConfig_Set+0x34c>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	4619      	mov	r1, r3
 80039ae:	4613      	mov	r3, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	0092      	lsls	r2, r2, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	461a      	mov	r2, r3
 80039b8:	0090      	lsls	r0, r2, #2
 80039ba:	461a      	mov	r2, r3
 80039bc:	4603      	mov	r3, r0
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	b298      	uxth	r0, r3
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	460b      	mov	r3, r1
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	1a5b      	subs	r3, r3, r1
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	3322      	adds	r3, #34	; 0x22
 80039d2:	4602      	mov	r2, r0
 80039d4:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 80039d6:	4b39      	ldr	r3, [pc, #228]	; (8003abc <PdmConfig_Set+0x350>)
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d10d      	bne.n	8003a02 <PdmConfig_Set+0x296>
        nInNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	4b31      	ldr	r3, [pc, #196]	; (8003ab8 <PdmConfig_Set+0x34c>)
 80039f2:	701a      	strb	r2, [r3, #0]
        if(nInNum < PDM_NUM_INPUTS){
 80039f4:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <PdmConfig_Set+0x34c>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b07      	cmp	r3, #7
 80039fa:	d802      	bhi.n	8003a02 <PdmConfig_Set+0x296>
          nSend = 1;
 80039fc:	4b2f      	ldr	r3, [pc, #188]	; (8003abc <PdmConfig_Set+0x350>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8003a02:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <PdmConfig_Set+0x350>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f001 81b9 	beq.w	8004d7e <PdmConfig_Set+0x1612>
        stMsgUsbTx.nTxLen = 3;
 8003a0c:	4b2c      	ldr	r3, [pc, #176]	; (8003ac0 <PdmConfig_Set+0x354>)
 8003a0e:	2203      	movs	r2, #3
 8003a10:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 3;
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <PdmConfig_Set+0x358>)
 8003a14:	2203      	movs	r2, #3
 8003a16:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_INPUTS;
 8003a18:	4b29      	ldr	r3, [pc, #164]	; (8003ac0 <PdmConfig_Set+0x354>)
 8003a1a:	2269      	movs	r2, #105	; 0x69
 8003a1c:	701a      	strb	r2, [r3, #0]
        //TODO:Add binary On Level on V3 PCB
        stMsgUsbTx.nTxData[1] = ((nInNum & 0x0F) << 4) + ((pConfig->stInput[nInNum].eMode & 0x03) << 2) + (pConfig->stInput[nInNum].nEnabled & 0x01);
 8003a1e:	4b26      	ldr	r3, [pc, #152]	; (8003ab8 <PdmConfig_Set+0x34c>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <PdmConfig_Set+0x34c>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	68f9      	ldr	r1, [r7, #12]
 8003a2e:	4603      	mov	r3, r0
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	1a1b      	subs	r3, r3, r0
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	3310      	adds	r3, #16
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	4413      	add	r3, r2
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <PdmConfig_Set+0x34c>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	68f9      	ldr	r1, [r7, #12]
 8003a52:	4603      	mov	r3, r0
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	1a1b      	subs	r3, r3, r0
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <PdmConfig_Set+0x354>)
 8003a6c:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)(pConfig->stInput[nInNum].nDebounceTime / 100);
 8003a6e:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <PdmConfig_Set+0x34c>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	4619      	mov	r1, r3
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	460b      	mov	r3, r1
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	1a5b      	subs	r3, r3, r1
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	3322      	adds	r3, #34	; 0x22
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	4a10      	ldr	r2, [pc, #64]	; (8003ac8 <PdmConfig_Set+0x35c>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <PdmConfig_Set+0x354>)
 8003a92:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = 0;
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <PdmConfig_Set+0x354>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = 0;
 8003a9a:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <PdmConfig_Set+0x354>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8003aa0:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <PdmConfig_Set+0x354>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8003aa6:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <PdmConfig_Set+0x354>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <PdmConfig_Set+0x354>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	71da      	strb	r2, [r3, #7]
      }

    break;
 8003ab2:	f001 b964 	b.w	8004d7e <PdmConfig_Set+0x1612>
 8003ab6:	bf00      	nop
 8003ab8:	2000264d 	.word	0x2000264d
 8003abc:	2000264c 	.word	0x2000264c
 8003ac0:	20002620 	.word	0x20002620
 8003ac4:	2000262c 	.word	0x2000262c
 8003ac8:	51eb851f 	.word	0x51eb851f

    //Set Output Settings
    // 'O'
    case MSG_RX_SET_OUTPUTS:
      if(stMsgRx->nRxLen == 8){
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	f040 80bb 	bne.w	8003c4e <PdmConfig_Set+0x4e2>
        nOutNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	4bb7      	ldr	r3, [pc, #732]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003ae4:	701a      	strb	r2, [r3, #0]
        if(nOutNum < PDM_NUM_OUTPUTS){
 8003ae6:	4bb6      	ldr	r3, [pc, #728]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b0b      	cmp	r3, #11
 8003aec:	f200 80af 	bhi.w	8003c4e <PdmConfig_Set+0x4e2>
          pConfig->stOutput[nOutNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003af6:	4ab2      	ldr	r2, [pc, #712]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003af8:	7812      	ldrb	r2, [r2, #0]
 8003afa:	4611      	mov	r1, r2
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	b2d8      	uxtb	r0, r3
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	460b      	mov	r3, r1
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b12:	4602      	mov	r2, r0
 8003b14:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInput = stMsgRx->nRxData[2];
 8003b16:	4baa      	ldr	r3, [pc, #680]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	460b      	mov	r3, r1
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8003b32:	4602      	mov	r2, r0
 8003b34:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nCurrentLimit = stMsgRx->nRxData[3] / 10;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003b3c:	4aa1      	ldr	r2, [pc, #644]	; (8003dc4 <PdmConfig_Set+0x658>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	08db      	lsrs	r3, r3, #3
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4b9e      	ldr	r3, [pc, #632]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	b290      	uxth	r0, r2
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	460b      	mov	r3, r1
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8003b5e:	4602      	mov	r2, r0
 8003b60:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].eResetMode = (stMsgRx->nRxData[4] & 0x0F);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b68:	4a95      	ldr	r2, [pc, #596]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003b6a:	7812      	ldrb	r2, [r2, #0]
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	b2d8      	uxtb	r0, r3
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	460b      	mov	r3, r1
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	f203 4316 	addw	r3, r3, #1046	; 0x416
 8003b84:	4602      	mov	r2, r0
 8003b86:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nResetLimit = (stMsgRx->nRxData[4] & 0xF0) >> 4;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b8e:	4a8c      	ldr	r2, [pc, #560]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	4611      	mov	r1, r2
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	b2d8      	uxtb	r0, r3
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f203 431a 	addw	r3, r3, #1050	; 0x41a
 8003ba8:	4602      	mov	r2, r0
 8003baa:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nResetTime = stMsgRx->nRxData[5] * 100;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	4b82      	ldr	r3, [pc, #520]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4613      	mov	r3, r2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	0092      	lsls	r2, r2, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	0090      	lsls	r0, r2, #2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	b298      	uxth	r0, r3
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8003be0:	4602      	mov	r2, r0
 8003be2:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInrushLimit = stMsgRx->nRxData[6] / 10;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003bea:	4a76      	ldr	r2, [pc, #472]	; (8003dc4 <PdmConfig_Set+0x658>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	08db      	lsrs	r3, r3, #3
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	4b72      	ldr	r3, [pc, #456]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	b290      	uxth	r0, r2
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInrushTime = stMsgRx->nRxData[7] * 100;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	4b69      	ldr	r3, [pc, #420]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4613      	mov	r3, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	0092      	lsls	r2, r2, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	461a      	mov	r2, r3
 8003c28:	0090      	lsls	r0, r2, #2
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	b298      	uxth	r0, r3
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	460b      	mov	r3, r1
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8003c44:	4602      	mov	r2, r0
 8003c46:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 8003c48:	4b5f      	ldr	r3, [pc, #380]	; (8003dc8 <PdmConfig_Set+0x65c>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d10d      	bne.n	8003c74 <PdmConfig_Set+0x508>
        nOutNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	4b57      	ldr	r3, [pc, #348]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003c64:	701a      	strb	r2, [r3, #0]
        if(nOutNum < PDM_NUM_OUTPUTS){
 8003c66:	4b56      	ldr	r3, [pc, #344]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b0b      	cmp	r3, #11
 8003c6c:	d802      	bhi.n	8003c74 <PdmConfig_Set+0x508>
          nSend = 1;
 8003c6e:	4b56      	ldr	r3, [pc, #344]	; (8003dc8 <PdmConfig_Set+0x65c>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8003c74:	4b54      	ldr	r3, [pc, #336]	; (8003dc8 <PdmConfig_Set+0x65c>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f001 8082 	beq.w	8004d82 <PdmConfig_Set+0x1616>
        stMsgUsbTx.nTxLen = 8;
 8003c7e:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <PdmConfig_Set+0x660>)
 8003c80:	2208      	movs	r2, #8
 8003c82:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 8;
 8003c84:	4b52      	ldr	r3, [pc, #328]	; (8003dd0 <PdmConfig_Set+0x664>)
 8003c86:	2208      	movs	r2, #8
 8003c88:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_OUTPUTS;
 8003c8a:	4b50      	ldr	r3, [pc, #320]	; (8003dcc <PdmConfig_Set+0x660>)
 8003c8c:	226f      	movs	r2, #111	; 0x6f
 8003c8e:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((nOutNum & 0x0F) << 4) + (pConfig->stOutput[nOutNum].nEnabled & 0x01);
 8003c90:	4b4b      	ldr	r3, [pc, #300]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	4b49      	ldr	r3, [pc, #292]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4403      	add	r3, r0
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4b44      	ldr	r3, [pc, #272]	; (8003dcc <PdmConfig_Set+0x660>)
 8003cbc:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stOutput[nOutNum].nInput;
 8003cbe:	4b40      	ldr	r3, [pc, #256]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8003cd4:	781a      	ldrb	r2, [r3, #0]
 8003cd6:	4b3d      	ldr	r3, [pc, #244]	; (8003dcc <PdmConfig_Set+0x660>)
 8003cd8:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stOutput[nOutNum].nCurrentLimit * 10);
 8003cda:	4b39      	ldr	r3, [pc, #228]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	0092      	lsls	r2, r2, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	4b33      	ldr	r3, [pc, #204]	; (8003dcc <PdmConfig_Set+0x660>)
 8003d00:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stOutput[nOutNum].nResetLimit & 0x0F) << 4) + (pConfig->stOutput[nOutNum].eResetMode & 0x0F);
 8003d02:	4b2f      	ldr	r3, [pc, #188]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	4619      	mov	r1, r3
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	f203 431a 	addw	r3, r3, #1050	; 0x41a
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4b28      	ldr	r3, [pc, #160]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	68f9      	ldr	r1, [r7, #12]
 8003d26:	4603      	mov	r3, r0
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4403      	add	r3, r0
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	f203 4316 	addw	r3, r3, #1046	; 0x416
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <PdmConfig_Set+0x660>)
 8003d42:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stOutput[nOutNum].nResetTime / 100);
 8003d44:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <PdmConfig_Set+0x668>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <PdmConfig_Set+0x660>)
 8003d6a:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stOutput[nOutNum].nInrushLimit * 10);
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	4619      	mov	r1, r3
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	460b      	mov	r3, r1
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	0092      	lsls	r2, r2, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <PdmConfig_Set+0x660>)
 8003d92:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = (uint8_t)(pConfig->stOutput[nOutNum].nInrushTime / 100);
 8003d94:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <PdmConfig_Set+0x654>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <PdmConfig_Set+0x668>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <PdmConfig_Set+0x660>)
 8003dba:	71da      	strb	r2, [r3, #7]
      }
    break;
 8003dbc:	f000 bfe1 	b.w	8004d82 <PdmConfig_Set+0x1616>
 8003dc0:	2000264e 	.word	0x2000264e
 8003dc4:	cccccccd 	.word	0xcccccccd
 8003dc8:	2000264c 	.word	0x2000264c
 8003dcc:	20002620 	.word	0x20002620
 8003dd0:	2000262c 	.word	0x2000262c
 8003dd4:	51eb851f 	.word	0x51eb851f

    //Set Virtual Input Settings
    // 'U'
    case MSG_RX_SET_VIRTUAL_INPUTS:
      if(stMsgRx->nRxLen == 7){
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dde:	2b07      	cmp	r3, #7
 8003de0:	f040 80c0 	bne.w	8003f64 <PdmConfig_Set+0x7f8>
        nVirtInNum = (stMsgRx->nRxData[2]);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003dea:	4bbb      	ldr	r3, [pc, #748]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003dec:	701a      	strb	r2, [r3, #0]
        if(nVirtInNum < PDM_NUM_VIRT_INPUTS){
 8003dee:	4bba      	ldr	r3, [pc, #744]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b13      	cmp	r3, #19
 8003df4:	f200 80b6 	bhi.w	8003f64 <PdmConfig_Set+0x7f8>
          pConfig->stVirtualInput[nVirtInNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dfe:	4ab6      	ldr	r2, [pc, #728]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003e00:	7812      	ldrb	r2, [r2, #0]
 8003e02:	4611      	mov	r1, r2
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	b2d8      	uxtb	r0, r3
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	33e8      	adds	r3, #232	; 0xe8
 8003e18:	4602      	mov	r2, r0
 8003e1a:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot0 = (stMsgRx->nRxData[1] & 0x02) >> 1;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e22:	105b      	asrs	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	4aac      	ldr	r2, [pc, #688]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003e28:	7812      	ldrb	r2, [r2, #0]
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	b2d8      	uxtb	r0, r3
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	460b      	mov	r3, r1
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	33e9      	adds	r3, #233	; 0xe9
 8003e40:	4602      	mov	r2, r0
 8003e42:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot1 = (stMsgRx->nRxData[1] & 0x04) >> 2;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e4a:	109b      	asrs	r3, r3, #2
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	4aa2      	ldr	r2, [pc, #648]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003e50:	7812      	ldrb	r2, [r2, #0]
 8003e52:	4611      	mov	r1, r2
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	b2d8      	uxtb	r0, r3
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	33f1      	adds	r3, #241	; 0xf1
 8003e68:	4602      	mov	r2, r0
 8003e6a:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot2 = (stMsgRx->nRxData[1] & 0x08) >> 3;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e72:	10db      	asrs	r3, r3, #3
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	4a98      	ldr	r2, [pc, #608]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003e78:	7812      	ldrb	r2, [r2, #0]
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	b2d8      	uxtb	r0, r3
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	460b      	mov	r3, r1
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	33f9      	adds	r3, #249	; 0xf9
 8003e90:	4602      	mov	r2, r0
 8003e92:	701a      	strb	r2, [r3, #0]

          pConfig->stVirtualInput[nVirtInNum].nVar0 = stMsgRx->nRxData[3];
 8003e94:	4b90      	ldr	r3, [pc, #576]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	33ea      	adds	r3, #234	; 0xea
 8003eae:	4602      	mov	r2, r0
 8003eb0:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nVar1 = stMsgRx->nRxData[4];
 8003eb2:	4b89      	ldr	r3, [pc, #548]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4413      	add	r3, r2
 8003eca:	33f2      	adds	r3, #242	; 0xf2
 8003ecc:	4602      	mov	r2, r0
 8003ece:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nVar2 = stMsgRx->nRxData[5];
 8003ed0:	4b81      	ldr	r3, [pc, #516]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	33fa      	adds	r3, #250	; 0xfa
 8003eea:	4602      	mov	r2, r0
 8003eec:	701a      	strb	r2, [r3, #0]

          pConfig->stVirtualInput[nVirtInNum].eCond0 = (stMsgRx->nRxData[6] & 0x03);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ef4:	4a78      	ldr	r2, [pc, #480]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003ef6:	7812      	ldrb	r2, [r2, #0]
 8003ef8:	4611      	mov	r1, r2
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	b2d8      	uxtb	r0, r3
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	460b      	mov	r3, r1
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	33f0      	adds	r3, #240	; 0xf0
 8003f0e:	4602      	mov	r2, r0
 8003f10:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].eCond1 = (stMsgRx->nRxData[6] & 0x0C) >> 2;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003f18:	109b      	asrs	r3, r3, #2
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	4a6e      	ldr	r2, [pc, #440]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003f1e:	7812      	ldrb	r2, [r2, #0]
 8003f20:	4611      	mov	r1, r2
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	b2d8      	uxtb	r0, r3
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	33f8      	adds	r3, #248	; 0xf8
 8003f36:	4602      	mov	r2, r0
 8003f38:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].eMode = (stMsgRx->nRxData[6] & 0xC0) >> 6;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003f40:	4a65      	ldr	r2, [pc, #404]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003f42:	7812      	ldrb	r2, [r2, #0]
 8003f44:	4611      	mov	r1, r2
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	b2d8      	uxtb	r0, r3
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	701a      	strb	r2, [r3, #0]
          nSend = 1;
 8003f5e:	4b5f      	ldr	r3, [pc, #380]	; (80040dc <PdmConfig_Set+0x970>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d10b      	bne.n	8003f86 <PdmConfig_Set+0x81a>
        nVirtInNum = (stMsgRx->nRxData[1]);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8003f74:	4b58      	ldr	r3, [pc, #352]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003f76:	701a      	strb	r2, [r3, #0]
        if(nVirtInNum < PDM_NUM_VIRT_INPUTS){
 8003f78:	4b57      	ldr	r3, [pc, #348]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b13      	cmp	r3, #19
 8003f7e:	d802      	bhi.n	8003f86 <PdmConfig_Set+0x81a>
          nSend = 1;
 8003f80:	4b56      	ldr	r3, [pc, #344]	; (80040dc <PdmConfig_Set+0x970>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8003f86:	4b55      	ldr	r3, [pc, #340]	; (80040dc <PdmConfig_Set+0x970>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 8704 	beq.w	8004d98 <PdmConfig_Set+0x162c>
        stMsgUsbTx.nTxLen = 7;
 8003f90:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <PdmConfig_Set+0x974>)
 8003f92:	2207      	movs	r2, #7
 8003f94:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 8003f96:	4b53      	ldr	r3, [pc, #332]	; (80040e4 <PdmConfig_Set+0x978>)
 8003f98:	2207      	movs	r2, #7
 8003f9a:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_VIRTUAL_INPUTS;
 8003f9c:	4b50      	ldr	r3, [pc, #320]	; (80040e0 <PdmConfig_Set+0x974>)
 8003f9e:	2275      	movs	r2, #117	; 0x75
 8003fa0:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 8003fa2:	4b4d      	ldr	r3, [pc, #308]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	460b      	mov	r3, r1
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	33f9      	adds	r3, #249	; 0xf9
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	b25b      	sxtb	r3, r3
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	b25a      	sxtb	r2, r3
 8003fc2:	4b45      	ldr	r3, [pc, #276]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	68f9      	ldr	r1, [r7, #12]
 8003fca:	4603      	mov	r3, r0
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4403      	add	r3, r0
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	440b      	add	r3, r1
 8003fd4:	33f1      	adds	r3, #241	; 0xf1
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	b25b      	sxtb	r3, r3
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	b25b      	sxtb	r3, r3
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	b25b      	sxtb	r3, r3
 8003fe6:	b2da      	uxtb	r2, r3
                                ((pConfig->stVirtualInput[nVirtInNum].nNot0 & 0x01) << 1) + (pConfig->stVirtualInput[nVirtInNum].nEnabled & 0x01);
 8003fe8:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <PdmConfig_Set+0x96c>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4403      	add	r3, r0
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	440b      	add	r3, r1
 8003ffa:	33e9      	adds	r3, #233	; 0xe9
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	b2db      	uxtb	r3, r3
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 8004008:	4413      	add	r3, r2
 800400a:	b2da      	uxtb	r2, r3
                                ((pConfig->stVirtualInput[nVirtInNum].nNot0 & 0x01) << 1) + (pConfig->stVirtualInput[nVirtInNum].nEnabled & 0x01);
 800400c:	4b32      	ldr	r3, [pc, #200]	; (80040d8 <PdmConfig_Set+0x96c>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	68f9      	ldr	r1, [r7, #12]
 8004014:	4603      	mov	r3, r0
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4403      	add	r3, r0
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	440b      	add	r3, r1
 800401e:	33e8      	adds	r3, #232	; 0xe8
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	b2db      	uxtb	r3, r3
 8004028:	4413      	add	r3, r2
 800402a:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 800402c:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <PdmConfig_Set+0x974>)
 800402e:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = nVirtInNum;
 8004030:	4b29      	ldr	r3, [pc, #164]	; (80040d8 <PdmConfig_Set+0x96c>)
 8004032:	781a      	ldrb	r2, [r3, #0]
 8004034:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <PdmConfig_Set+0x974>)
 8004036:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stVirtualInput[nVirtInNum].nVar0;
 8004038:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <PdmConfig_Set+0x96c>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	4619      	mov	r1, r3
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	460b      	mov	r3, r1
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	33ea      	adds	r3, #234	; 0xea
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <PdmConfig_Set+0x974>)
 8004050:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = pConfig->stVirtualInput[nVirtInNum].nVar1;
 8004052:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <PdmConfig_Set+0x96c>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	4619      	mov	r1, r3
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	460b      	mov	r3, r1
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4413      	add	r3, r2
 8004064:	33f2      	adds	r3, #242	; 0xf2
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <PdmConfig_Set+0x974>)
 800406a:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = pConfig->stVirtualInput[nVirtInNum].nVar2;
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <PdmConfig_Set+0x96c>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	4619      	mov	r1, r3
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	460b      	mov	r3, r1
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4413      	add	r3, r2
 800407e:	33fa      	adds	r3, #250	; 0xfa
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <PdmConfig_Set+0x974>)
 8004084:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = ((pConfig->stVirtualInput[nVirtInNum].eMode & 0x0F) << 4) + ((pConfig->stVirtualInput[nVirtInNum].eCond0 & 0x03) << 2) +
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <PdmConfig_Set+0x96c>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	4619      	mov	r1, r3
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	460b      	mov	r3, r1
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <PdmConfig_Set+0x96c>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	68f9      	ldr	r1, [r7, #12]
 80040aa:	4603      	mov	r3, r0
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4403      	add	r3, r0
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	440b      	add	r3, r1
 80040b4:	33f0      	adds	r3, #240	; 0xf0
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f003 030c 	and.w	r3, r3, #12
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	b2da      	uxtb	r2, r3
                                (pConfig->stVirtualInput[nVirtInNum].eCond1 & 0x03);
 80040c6:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <PdmConfig_Set+0x96c>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	68f9      	ldr	r1, [r7, #12]
 80040ce:	4603      	mov	r3, r0
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4403      	add	r3, r0
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	e007      	b.n	80040e8 <PdmConfig_Set+0x97c>
 80040d8:	2000264f 	.word	0x2000264f
 80040dc:	2000264c 	.word	0x2000264c
 80040e0:	20002620 	.word	0x20002620
 80040e4:	2000262c 	.word	0x2000262c
 80040e8:	440b      	add	r3, r1
 80040ea:	33f8      	adds	r3, #248	; 0xf8
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[6] = ((pConfig->stVirtualInput[nVirtInNum].eMode & 0x0F) << 4) + ((pConfig->stVirtualInput[nVirtInNum].eCond0 & 0x03) << 2) +
 80040f4:	4413      	add	r3, r2
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	4b5b      	ldr	r3, [pc, #364]	; (8004268 <PdmConfig_Set+0xafc>)
 80040fa:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 80040fc:	4b5a      	ldr	r3, [pc, #360]	; (8004268 <PdmConfig_Set+0xafc>)
 80040fe:	2200      	movs	r2, #0
 8004100:	71da      	strb	r2, [r3, #7]
      }
    break;
 8004102:	f000 be49 	b.w	8004d98 <PdmConfig_Set+0x162c>

    //Set Wiper Settings
    // 'W'
    case MSG_RX_SET_WIPER:
      if(stMsgRx->nRxLen == 8){
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800410c:	2b08      	cmp	r3, #8
 800410e:	d152      	bne.n	80041b6 <PdmConfig_Set+0xa4a>
        pConfig->stWiper.nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	b2da      	uxtb	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
        pConfig->stWiper.nMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004128:	105b      	asrs	r3, r3, #1
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	b2da      	uxtb	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
        pConfig->stWiper.nParkStopLevel = (stMsgRx->nRxData[1] & 0x08) >> 3;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800413e:	10db      	asrs	r3, r3, #3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
        pConfig->stWiper.nWashWipeCycles = (stMsgRx->nRxData[1] * 0xF0) >> 4;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004154:	461a      	mov	r2, r3
 8004156:	4613      	mov	r3, r2
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	111b      	asrs	r3, r3, #4
 8004160:	b2da      	uxtb	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503

        pConfig->stWiper.nSlowInput = stMsgRx->nRxData[2];
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa

        pConfig->stWiper.nFastInput = stMsgRx->nRxData[3];
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb

        pConfig->stWiper.nInterInput = stMsgRx->nRxData[4];
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc

        pConfig->stWiper.nOnInput = stMsgRx->nRxData[5];
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f883 24fd 	strb.w	r2, [r3, #1277]	; 0x4fd

        pConfig->stWiper.nParkInput = stMsgRx->nRxData[6];
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff

        pConfig->stWiper.nWashInput = stMsgRx->nRxData[7];
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
        nSend = 1;
 80041b0:	4b2e      	ldr	r3, [pc, #184]	; (800426c <PdmConfig_Set+0xb00>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d004      	beq.n	80041ca <PdmConfig_Set+0xa5e>
 80041c0:	4b2a      	ldr	r3, [pc, #168]	; (800426c <PdmConfig_Set+0xb00>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 85e9 	beq.w	8004d9c <PdmConfig_Set+0x1630>
        stMsgUsbTx.nTxLen = 8;
 80041ca:	4b27      	ldr	r3, [pc, #156]	; (8004268 <PdmConfig_Set+0xafc>)
 80041cc:	2208      	movs	r2, #8
 80041ce:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 8;
 80041d0:	4b27      	ldr	r3, [pc, #156]	; (8004270 <PdmConfig_Set+0xb04>)
 80041d2:	2208      	movs	r2, #8
 80041d4:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER;
 80041d6:	4b24      	ldr	r3, [pc, #144]	; (8004268 <PdmConfig_Set+0xafc>)
 80041d8:	2277      	movs	r2, #119	; 0x77
 80041da:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f893 3503 	ldrb.w	r3, [r3, #1283]	; 0x503
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	b2da      	uxtb	r2, r3
                                ((pConfig->stWiper.nMode & 0x03) << 2) + (pConfig->stWiper.nEnabled & 0x01);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 34f9 	ldrb.w	r3, [r3, #1273]	; 0x4f9
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f003 030c 	and.w	r3, r3, #12
 8004208:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 800420a:	4413      	add	r3, r2
 800420c:	b2da      	uxtb	r2, r3
                                ((pConfig->stWiper.nMode & 0x03) << 2) + (pConfig->stWiper.nEnabled & 0x01);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 34f8 	ldrb.w	r3, [r3, #1272]	; 0x4f8
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	4413      	add	r3, r2
 800421c:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 800421e:	4b12      	ldr	r3, [pc, #72]	; (8004268 <PdmConfig_Set+0xafc>)
 8004220:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stWiper.nSlowInput;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 24fa 	ldrb.w	r2, [r3, #1274]	; 0x4fa
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <PdmConfig_Set+0xafc>)
 800422a:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stWiper.nFastInput;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 24fb 	ldrb.w	r2, [r3, #1275]	; 0x4fb
 8004232:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <PdmConfig_Set+0xafc>)
 8004234:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = pConfig->stWiper.nInterInput;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 24fc 	ldrb.w	r2, [r3, #1276]	; 0x4fc
 800423c:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <PdmConfig_Set+0xafc>)
 800423e:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = pConfig->stWiper.nOnInput;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 24fd 	ldrb.w	r2, [r3, #1277]	; 0x4fd
 8004246:	4b08      	ldr	r3, [pc, #32]	; (8004268 <PdmConfig_Set+0xafc>)
 8004248:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = pConfig->stWiper.nParkInput;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f893 24ff 	ldrb.w	r2, [r3, #1279]	; 0x4ff
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <PdmConfig_Set+0xafc>)
 8004252:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = pConfig->stWiper.nWashInput;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 2502 	ldrb.w	r2, [r3, #1282]	; 0x502
 800425a:	4b03      	ldr	r3, [pc, #12]	; (8004268 <PdmConfig_Set+0xafc>)
 800425c:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 800425e:	4b03      	ldr	r3, [pc, #12]	; (800426c <PdmConfig_Set+0xb00>)
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004264:	f000 bd9a 	b.w	8004d9c <PdmConfig_Set+0x1630>
 8004268:	20002620 	.word	0x20002620
 800426c:	2000264c 	.word	0x2000264c
 8004270:	2000262c 	.word	0x2000262c

    //Set Wiper Speed Settings
    // 'P'
    case MSG_RX_SET_WIPER_SPEED:
      if(stMsgRx->nRxLen == 7){
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800427a:	2b07      	cmp	r3, #7
 800427c:	d16a      	bne.n	8004354 <PdmConfig_Set+0xbe8>
        pConfig->stWiper.nSwipeInput = stMsgRx->nRxData[1];
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501

        pConfig->stWiper.nSpeedInput = stMsgRx->nRxData[2];
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe

        pConfig->stWiper.nSpeedMap[0] = (stMsgRx->nRxData[3] * 0x0F);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800429c:	461a      	mov	r2, r3
 800429e:	0112      	lsls	r2, r2, #4
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
        pConfig->stWiper.nSpeedMap[1] = (stMsgRx->nRxData[3] * 0xF0) >> 4;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80042b0:	461a      	mov	r2, r3
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	111b      	asrs	r3, r3, #4
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505

        pConfig->stWiper.nSpeedMap[2] = (stMsgRx->nRxData[4] * 0x0F);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042ca:	461a      	mov	r2, r3
 80042cc:	0112      	lsls	r2, r2, #4
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
        pConfig->stWiper.nSpeedMap[3] = (stMsgRx->nRxData[4] * 0xF0) >> 4;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042de:	461a      	mov	r2, r3
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	111b      	asrs	r3, r3, #4
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507

        pConfig->stWiper.nSpeedMap[4] = (stMsgRx->nRxData[5] * 0x0F);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042f8:	461a      	mov	r2, r3
 80042fa:	0112      	lsls	r2, r2, #4
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
        pConfig->stWiper.nSpeedMap[5] = (stMsgRx->nRxData[5] * 0xF0) >> 4;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800430c:	461a      	mov	r2, r3
 800430e:	4613      	mov	r3, r2
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	111b      	asrs	r3, r3, #4
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509

        pConfig->stWiper.nSpeedMap[6] = (stMsgRx->nRxData[6] * 0x0F);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004326:	461a      	mov	r2, r3
 8004328:	0112      	lsls	r2, r2, #4
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	b2da      	uxtb	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
        pConfig->stWiper.nSpeedMap[7] = (stMsgRx->nRxData[6] * 0xF0) >> 4;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800433a:	461a      	mov	r2, r3
 800433c:	4613      	mov	r3, r2
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	111b      	asrs	r3, r3, #4
 8004346:	b2da      	uxtb	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
        nSend = 1;
 800434e:	4b97      	ldr	r3, [pc, #604]	; (80045ac <PdmConfig_Set+0xe40>)
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800435a:	2b01      	cmp	r3, #1
 800435c:	d004      	beq.n	8004368 <PdmConfig_Set+0xbfc>
 800435e:	4b93      	ldr	r3, [pc, #588]	; (80045ac <PdmConfig_Set+0xe40>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 851c 	beq.w	8004da0 <PdmConfig_Set+0x1634>
        stMsgUsbTx.nTxLen = 7;
 8004368:	4b91      	ldr	r3, [pc, #580]	; (80045b0 <PdmConfig_Set+0xe44>)
 800436a:	2207      	movs	r2, #7
 800436c:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 800436e:	4b91      	ldr	r3, [pc, #580]	; (80045b4 <PdmConfig_Set+0xe48>)
 8004370:	2207      	movs	r2, #7
 8004372:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER_SPEED;
 8004374:	4b8e      	ldr	r3, [pc, #568]	; (80045b0 <PdmConfig_Set+0xe44>)
 8004376:	2270      	movs	r2, #112	; 0x70
 8004378:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = pConfig->stWiper.nSwipeInput;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 2501 	ldrb.w	r2, [r3, #1281]	; 0x501
 8004380:	4b8b      	ldr	r3, [pc, #556]	; (80045b0 <PdmConfig_Set+0xe44>)
 8004382:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stWiper.nSpeedInput;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 24fe 	ldrb.w	r2, [r3, #1278]	; 0x4fe
 800438a:	4b89      	ldr	r3, [pc, #548]	; (80045b0 <PdmConfig_Set+0xe44>)
 800438c:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = ((pConfig->stWiper.nSpeedMap[1] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[0] & 0x0F);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	4b81      	ldr	r3, [pc, #516]	; (80045b0 <PdmConfig_Set+0xe44>)
 80043aa:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stWiper.nSpeedMap[3] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[2] & 0x0F);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 3507 	ldrb.w	r3, [r3, #1287]	; 0x507
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	4b7a      	ldr	r3, [pc, #488]	; (80045b0 <PdmConfig_Set+0xe44>)
 80043c8:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = ((pConfig->stWiper.nSpeedMap[5] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[4] & 0x0F);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 3509 	ldrb.w	r3, [r3, #1289]	; 0x509
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 3508 	ldrb.w	r3, [r3, #1288]	; 0x508
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	4413      	add	r3, r2
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	4b72      	ldr	r3, [pc, #456]	; (80045b0 <PdmConfig_Set+0xe44>)
 80043e6:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = ((pConfig->stWiper.nSpeedMap[7] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[6] & 0x0F);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 350b 	ldrb.w	r3, [r3, #1291]	; 0x50b
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 350a 	ldrb.w	r3, [r3, #1290]	; 0x50a
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	4413      	add	r3, r2
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4b6b      	ldr	r3, [pc, #428]	; (80045b0 <PdmConfig_Set+0xe44>)
 8004404:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004406:	4b6a      	ldr	r3, [pc, #424]	; (80045b0 <PdmConfig_Set+0xe44>)
 8004408:	2200      	movs	r2, #0
 800440a:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 800440c:	4b67      	ldr	r3, [pc, #412]	; (80045ac <PdmConfig_Set+0xe40>)
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004412:	f000 bcc5 	b.w	8004da0 <PdmConfig_Set+0x1634>

    //Set Wiper Intermit Delays Settings
    // 'Y'
    case MSG_RX_SET_WIPER_DELAYS:
      if(stMsgRx->nRxLen == 7){
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800441c:	2b07      	cmp	r3, #7
 800441e:	d168      	bne.n	80044f2 <PdmConfig_Set+0xd86>
        pConfig->stWiper.nIntermitTime[0] = stMsgRx->nRxData[1] * 100;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004426:	b29b      	uxth	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	0092      	lsls	r2, r2, #2
 800442c:	4413      	add	r3, r2
 800442e:	461a      	mov	r2, r3
 8004430:	0091      	lsls	r1, r2, #2
 8004432:	461a      	mov	r2, r3
 8004434:	460b      	mov	r3, r1
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
        pConfig->stWiper.nIntermitTime[1] = stMsgRx->nRxData[2] * 100;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004448:	b29b      	uxth	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	0092      	lsls	r2, r2, #2
 800444e:	4413      	add	r3, r2
 8004450:	461a      	mov	r2, r3
 8004452:	0091      	lsls	r1, r2, #2
 8004454:	461a      	mov	r2, r3
 8004456:	460b      	mov	r3, r1
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f8a3 250e 	strh.w	r2, [r3, #1294]	; 0x50e
        pConfig->stWiper.nIntermitTime[2] = stMsgRx->nRxData[3] * 100;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800446a:	b29b      	uxth	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	0092      	lsls	r2, r2, #2
 8004470:	4413      	add	r3, r2
 8004472:	461a      	mov	r2, r3
 8004474:	0091      	lsls	r1, r2, #2
 8004476:	461a      	mov	r2, r3
 8004478:	460b      	mov	r3, r1
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8a3 2510 	strh.w	r2, [r3, #1296]	; 0x510
        pConfig->stWiper.nIntermitTime[3] = stMsgRx->nRxData[4] * 100;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800448c:	b29b      	uxth	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	0092      	lsls	r2, r2, #2
 8004492:	4413      	add	r3, r2
 8004494:	461a      	mov	r2, r3
 8004496:	0091      	lsls	r1, r2, #2
 8004498:	461a      	mov	r2, r3
 800449a:	460b      	mov	r3, r1
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8a3 2512 	strh.w	r2, [r3, #1298]	; 0x512
        pConfig->stWiper.nIntermitTime[4] = stMsgRx->nRxData[5] * 100;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	0092      	lsls	r2, r2, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	461a      	mov	r2, r3
 80044b8:	0091      	lsls	r1, r2, #2
 80044ba:	461a      	mov	r2, r3
 80044bc:	460b      	mov	r3, r1
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
        pConfig->stWiper.nIntermitTime[5] = stMsgRx->nRxData[6] * 100;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	0092      	lsls	r2, r2, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	461a      	mov	r2, r3
 80044da:	0091      	lsls	r1, r2, #2
 80044dc:	461a      	mov	r2, r3
 80044de:	460b      	mov	r3, r1
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f8a3 2516 	strh.w	r2, [r3, #1302]	; 0x516
        nSend = 1;
 80044ec:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <PdmConfig_Set+0xe40>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d004      	beq.n	8004506 <PdmConfig_Set+0xd9a>
 80044fc:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <PdmConfig_Set+0xe40>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 844f 	beq.w	8004da4 <PdmConfig_Set+0x1638>
        stMsgUsbTx.nTxLen = 7;
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <PdmConfig_Set+0xe44>)
 8004508:	2207      	movs	r2, #7
 800450a:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 800450c:	4b29      	ldr	r3, [pc, #164]	; (80045b4 <PdmConfig_Set+0xe48>)
 800450e:	2207      	movs	r2, #7
 8004510:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER_DELAYS;
 8004512:	4b27      	ldr	r3, [pc, #156]	; (80045b0 <PdmConfig_Set+0xe44>)
 8004514:	2279      	movs	r2, #121	; 0x79
 8004516:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (uint8_t)(pConfig->stWiper.nIntermitTime[0] / 100);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8b3 350c 	ldrh.w	r3, [r3, #1292]	; 0x50c
 800451e:	4a26      	ldr	r2, [pc, #152]	; (80045b8 <PdmConfig_Set+0xe4c>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	b29b      	uxth	r3, r3
 8004528:	b2da      	uxtb	r2, r3
 800452a:	4b21      	ldr	r3, [pc, #132]	; (80045b0 <PdmConfig_Set+0xe44>)
 800452c:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)(pConfig->stWiper.nIntermitTime[1] / 100);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f8b3 350e 	ldrh.w	r3, [r3, #1294]	; 0x50e
 8004534:	4a20      	ldr	r2, [pc, #128]	; (80045b8 <PdmConfig_Set+0xe4c>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	b29b      	uxth	r3, r3
 800453e:	b2da      	uxtb	r2, r3
 8004540:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <PdmConfig_Set+0xe44>)
 8004542:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stWiper.nIntermitTime[2] / 100);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 800454a:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <PdmConfig_Set+0xe4c>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	b29b      	uxth	r3, r3
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <PdmConfig_Set+0xe44>)
 8004558:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stWiper.nIntermitTime[3] / 100);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f8b3 3512 	ldrh.w	r3, [r3, #1298]	; 0x512
 8004560:	4a15      	ldr	r2, [pc, #84]	; (80045b8 <PdmConfig_Set+0xe4c>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	b29b      	uxth	r3, r3
 800456a:	b2da      	uxtb	r2, r3
 800456c:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <PdmConfig_Set+0xe44>)
 800456e:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stWiper.nIntermitTime[4] / 100);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 8004576:	4a10      	ldr	r2, [pc, #64]	; (80045b8 <PdmConfig_Set+0xe4c>)
 8004578:	fba2 2303 	umull	r2, r3, r2, r3
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	b29b      	uxth	r3, r3
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <PdmConfig_Set+0xe44>)
 8004584:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stWiper.nIntermitTime[5] / 100);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f8b3 3516 	ldrh.w	r3, [r3, #1302]	; 0x516
 800458c:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <PdmConfig_Set+0xe4c>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	b29b      	uxth	r3, r3
 8004596:	b2da      	uxtb	r2, r3
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <PdmConfig_Set+0xe44>)
 800459a:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <PdmConfig_Set+0xe44>)
 800459e:	2200      	movs	r2, #0
 80045a0:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 80045a2:	4b02      	ldr	r3, [pc, #8]	; (80045ac <PdmConfig_Set+0xe40>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	701a      	strb	r2, [r3, #0]
      }
    break;
 80045a8:	e3fc      	b.n	8004da4 <PdmConfig_Set+0x1638>
 80045aa:	bf00      	nop
 80045ac:	2000264c 	.word	0x2000264c
 80045b0:	20002620 	.word	0x20002620
 80045b4:	2000262c 	.word	0x2000262c
 80045b8:	51eb851f 	.word	0x51eb851f

    //Set Flasher Settings
    // 'H'
    case MSG_RX_SET_FLASHER:
      if(stMsgRx->nRxLen == 6){
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045c2:	2b06      	cmp	r3, #6
 80045c4:	f040 808f 	bne.w	80046e6 <PdmConfig_Set+0xf7a>
        nFlasherNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	4b90      	ldr	r3, [pc, #576]	; (8004814 <PdmConfig_Set+0x10a8>)
 80045d4:	701a      	strb	r2, [r3, #0]
        if(nFlasherNum < PDM_NUM_FLASHERS){
 80045d6:	4b8f      	ldr	r3, [pc, #572]	; (8004814 <PdmConfig_Set+0x10a8>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b03      	cmp	r3, #3
 80045dc:	f200 8083 	bhi.w	80046e6 <PdmConfig_Set+0xf7a>
          pConfig->stFlasher[nFlasherNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045e6:	4a8b      	ldr	r2, [pc, #556]	; (8004814 <PdmConfig_Set+0x10a8>)
 80045e8:	7812      	ldrb	r2, [r2, #0]
 80045ea:	4611      	mov	r1, r2
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	b2d8      	uxtb	r0, r3
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	460b      	mov	r3, r1
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	440b      	add	r3, r1
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8004602:	4602      	mov	r2, r0
 8004604:	701a      	strb	r2, [r3, #0]
          pConfig->stFlasher[nFlasherNum].nSingleCycle = (stMsgRx->nRxData[1] & 0x02) >> 1;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800460c:	105b      	asrs	r3, r3, #1
 800460e:	b2db      	uxtb	r3, r3
 8004610:	4a80      	ldr	r2, [pc, #512]	; (8004814 <PdmConfig_Set+0x10a8>)
 8004612:	7812      	ldrb	r2, [r2, #0]
 8004614:	4611      	mov	r1, r2
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	b2d8      	uxtb	r0, r3
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	460b      	mov	r3, r1
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	440b      	add	r3, r1
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800462c:	4602      	mov	r2, r0
 800462e:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nInput = stMsgRx->nRxData[2];
 8004630:	4b78      	ldr	r3, [pc, #480]	; (8004814 <PdmConfig_Set+0x10a8>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	4619      	mov	r1, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	460b      	mov	r3, r1
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	440b      	add	r3, r1
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4413      	add	r3, r2
 8004648:	f203 5319 	addw	r3, r3, #1305	; 0x519
 800464c:	4602      	mov	r2, r0
 800464e:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nOutput = stMsgRx->nRxData[3];
 8004650:	4b70      	ldr	r3, [pc, #448]	; (8004814 <PdmConfig_Set+0x10a8>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	4619      	mov	r1, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	460b      	mov	r3, r1
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	440b      	add	r3, r1
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4413      	add	r3, r2
 8004668:	f203 5325 	addw	r3, r3, #1317	; 0x525
 800466c:	4602      	mov	r2, r0
 800466e:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nFlashOnTime = stMsgRx->nRxData[4] * 100;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004676:	b29a      	uxth	r2, r3
 8004678:	4b66      	ldr	r3, [pc, #408]	; (8004814 <PdmConfig_Set+0x10a8>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	4619      	mov	r1, r3
 800467e:	4613      	mov	r3, r2
 8004680:	461a      	mov	r2, r3
 8004682:	0092      	lsls	r2, r2, #2
 8004684:	4413      	add	r3, r2
 8004686:	461a      	mov	r2, r3
 8004688:	0090      	lsls	r0, r2, #2
 800468a:	461a      	mov	r2, r3
 800468c:	4603      	mov	r3, r0
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	b298      	uxth	r0, r3
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	460b      	mov	r3, r1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	440b      	add	r3, r1
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80046a4:	4602      	mov	r2, r0
 80046a6:	801a      	strh	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nFlashOffTime = stMsgRx->nRxData[5] * 100;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	4b58      	ldr	r3, [pc, #352]	; (8004814 <PdmConfig_Set+0x10a8>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	4613      	mov	r3, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	0092      	lsls	r2, r2, #2
 80046bc:	4413      	add	r3, r2
 80046be:	461a      	mov	r2, r3
 80046c0:	0090      	lsls	r0, r2, #2
 80046c2:	461a      	mov	r2, r3
 80046c4:	4603      	mov	r3, r0
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	b298      	uxth	r0, r3
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	460b      	mov	r3, r1
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	440b      	add	r3, r1
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	f203 5322 	addw	r3, r3, #1314	; 0x522
 80046dc:	4602      	mov	r2, r0
 80046de:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 80046e0:	4b4d      	ldr	r3, [pc, #308]	; (8004818 <PdmConfig_Set+0x10ac>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d10d      	bne.n	800470c <PdmConfig_Set+0xfa0>
        nFlasherNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	4b46      	ldr	r3, [pc, #280]	; (8004814 <PdmConfig_Set+0x10a8>)
 80046fc:	701a      	strb	r2, [r3, #0]
        if(nFlasherNum < PDM_NUM_FLASHERS){
 80046fe:	4b45      	ldr	r3, [pc, #276]	; (8004814 <PdmConfig_Set+0x10a8>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b03      	cmp	r3, #3
 8004704:	d802      	bhi.n	800470c <PdmConfig_Set+0xfa0>
          nSend = 1;
 8004706:	4b44      	ldr	r3, [pc, #272]	; (8004818 <PdmConfig_Set+0x10ac>)
 8004708:	2201      	movs	r2, #1
 800470a:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 800470c:	4b42      	ldr	r3, [pc, #264]	; (8004818 <PdmConfig_Set+0x10ac>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8349 	beq.w	8004da8 <PdmConfig_Set+0x163c>
        stMsgUsbTx.nTxLen = 6;
 8004716:	4b41      	ldr	r3, [pc, #260]	; (800481c <PdmConfig_Set+0x10b0>)
 8004718:	2206      	movs	r2, #6
 800471a:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 6;
 800471c:	4b40      	ldr	r3, [pc, #256]	; (8004820 <PdmConfig_Set+0x10b4>)
 800471e:	2206      	movs	r2, #6
 8004720:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_FLASHER;
 8004722:	4b3e      	ldr	r3, [pc, #248]	; (800481c <PdmConfig_Set+0x10b0>)
 8004724:	2268      	movs	r2, #104	; 0x68
 8004726:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((nFlasherNum & 0x0F) << 4) + ((pConfig->stFlasher[nFlasherNum].nSingleCycle & 0x01) << 1) +
 8004728:	4b3a      	ldr	r3, [pc, #232]	; (8004814 <PdmConfig_Set+0x10a8>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	b2da      	uxtb	r2, r3
 8004730:	4b38      	ldr	r3, [pc, #224]	; (8004814 <PdmConfig_Set+0x10a8>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	68f9      	ldr	r1, [r7, #12]
 8004738:	4603      	mov	r3, r0
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4403      	add	r3, r0
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	440b      	add	r3, r1
 8004742:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	b2db      	uxtb	r3, r3
 8004752:	4413      	add	r3, r2
 8004754:	b2da      	uxtb	r2, r3
                                (pConfig->stFlasher[nFlasherNum].nEnabled & 0x01);
 8004756:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <PdmConfig_Set+0x10a8>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	68f9      	ldr	r1, [r7, #12]
 800475e:	4603      	mov	r3, r0
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4403      	add	r3, r0
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	440b      	add	r3, r1
 8004768:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((nFlasherNum & 0x0F) << 4) + ((pConfig->stFlasher[nFlasherNum].nSingleCycle & 0x01) << 1) +
 8004774:	4413      	add	r3, r2
 8004776:	b2da      	uxtb	r2, r3
 8004778:	4b28      	ldr	r3, [pc, #160]	; (800481c <PdmConfig_Set+0x10b0>)
 800477a:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stFlasher[nFlasherNum].nInput;
 800477c:	4b25      	ldr	r3, [pc, #148]	; (8004814 <PdmConfig_Set+0x10a8>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	4619      	mov	r1, r3
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	460b      	mov	r3, r1
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	440b      	add	r3, r1
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	f203 5319 	addw	r3, r3, #1305	; 0x519
 8004792:	781a      	ldrb	r2, [r3, #0]
 8004794:	4b21      	ldr	r3, [pc, #132]	; (800481c <PdmConfig_Set+0x10b0>)
 8004796:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stFlasher[nFlasherNum].nOutput;
 8004798:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <PdmConfig_Set+0x10a8>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	4619      	mov	r1, r3
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	460b      	mov	r3, r1
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	440b      	add	r3, r1
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	f203 5325 	addw	r3, r3, #1317	; 0x525
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	4b1a      	ldr	r3, [pc, #104]	; (800481c <PdmConfig_Set+0x10b0>)
 80047b2:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stFlasher[nFlasherNum].nFlashOnTime / 100);
 80047b4:	4b17      	ldr	r3, [pc, #92]	; (8004814 <PdmConfig_Set+0x10a8>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	4619      	mov	r1, r3
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	460b      	mov	r3, r1
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	440b      	add	r3, r1
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	4a15      	ldr	r2, [pc, #84]	; (8004824 <PdmConfig_Set+0x10b8>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	4b10      	ldr	r3, [pc, #64]	; (800481c <PdmConfig_Set+0x10b0>)
 80047da:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stFlasher[nFlasherNum].nFlashOffTime / 100);
 80047dc:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <PdmConfig_Set+0x10a8>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	4619      	mov	r1, r3
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	460b      	mov	r3, r1
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	440b      	add	r3, r1
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4413      	add	r3, r2
 80047ee:	f203 5322 	addw	r3, r3, #1314	; 0x522
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	4a0b      	ldr	r2, [pc, #44]	; (8004824 <PdmConfig_Set+0x10b8>)
 80047f6:	fba2 2303 	umull	r2, r3, r2, r3
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <PdmConfig_Set+0x10b0>)
 8004802:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <PdmConfig_Set+0x10b0>)
 8004806:	2200      	movs	r2, #0
 8004808:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 800480a:	4b04      	ldr	r3, [pc, #16]	; (800481c <PdmConfig_Set+0x10b0>)
 800480c:	2200      	movs	r2, #0
 800480e:	71da      	strb	r2, [r3, #7]
      }
    break;
 8004810:	e2ca      	b.n	8004da8 <PdmConfig_Set+0x163c>
 8004812:	bf00      	nop
 8004814:	20002650 	.word	0x20002650
 8004818:	2000264c 	.word	0x2000264c
 800481c:	20002620 	.word	0x20002620
 8004820:	2000262c 	.word	0x2000262c
 8004824:	51eb851f 	.word	0x51eb851f

    //Set Starter Disable Settings
    // 'D'
    case MSG_RX_SET_STARTER:
      if(stMsgRx->nRxLen == 5){
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800482e:	2b05      	cmp	r3, #5
 8004830:	f040 808f 	bne.w	8004952 <PdmConfig_Set+0x11e6>
        pConfig->stStarter.nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	b2da      	uxtb	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578

        pConfig->stStarter.nInput = stMsgRx->nRxData[2];
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579

        pConfig->stStarter.nDisableOut[0] = (stMsgRx->nRxData[3] & 0x01);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	b2da      	uxtb	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
        pConfig->stStarter.nDisableOut[1] = (stMsgRx->nRxData[3] & 0x02) >> 1;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800486a:	105b      	asrs	r3, r3, #1
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	b2da      	uxtb	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
        pConfig->stStarter.nDisableOut[2] = (stMsgRx->nRxData[3] & 0x04) >> 2;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004880:	109b      	asrs	r3, r3, #2
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	b2da      	uxtb	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
        pConfig->stStarter.nDisableOut[3] = (stMsgRx->nRxData[3] & 0x08) >> 3;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004896:	10db      	asrs	r3, r3, #3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
        pConfig->stStarter.nDisableOut[4] = (stMsgRx->nRxData[3] & 0x10) >> 4;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80048ac:	111b      	asrs	r3, r3, #4
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
        pConfig->stStarter.nDisableOut[5] = (stMsgRx->nRxData[3] & 0x20) >> 5;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80048c2:	115b      	asrs	r3, r3, #5
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
        pConfig->stStarter.nDisableOut[6] = (stMsgRx->nRxData[3] & 0x40) >> 6;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80048d8:	119b      	asrs	r3, r3, #6
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f883 2586 	strb.w	r2, [r3, #1414]	; 0x586
        pConfig->stStarter.nDisableOut[7] = (stMsgRx->nRxData[3] & 0x80) >> 7;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80048ee:	09db      	lsrs	r3, r3, #7
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f883 2587 	strb.w	r2, [r3, #1415]	; 0x587

        pConfig->stStarter.nDisableOut[8] = (stMsgRx->nRxData[4] & 0x01);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	b2da      	uxtb	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f883 2588 	strb.w	r2, [r3, #1416]	; 0x588
        pConfig->stStarter.nDisableOut[9] = (stMsgRx->nRxData[4] & 0x02) >> 1;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004910:	105b      	asrs	r3, r3, #1
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
        pConfig->stStarter.nDisableOut[10] = (stMsgRx->nRxData[4] & 0x04) >> 2;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004926:	109b      	asrs	r3, r3, #2
 8004928:	b2db      	uxtb	r3, r3
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	b2da      	uxtb	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
        pConfig->stStarter.nDisableOut[11] = (stMsgRx->nRxData[4] & 0x08) >> 3;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800493c:	10db      	asrs	r3, r3, #3
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	b2da      	uxtb	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f883 258b 	strb.w	r2, [r3, #1419]	; 0x58b
        nSend = 1;
 800494c:	4b50      	ldr	r3, [pc, #320]	; (8004a90 <PdmConfig_Set+0x1324>)
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
      }

      if((stMsgRx->nRxLen == 1) || nSend){
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004958:	2b01      	cmp	r3, #1
 800495a:	d004      	beq.n	8004966 <PdmConfig_Set+0x11fa>
 800495c:	4b4c      	ldr	r3, [pc, #304]	; (8004a90 <PdmConfig_Set+0x1324>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 8223 	beq.w	8004dac <PdmConfig_Set+0x1640>
        stMsgUsbTx.nTxLen = 5;
 8004966:	4b4b      	ldr	r3, [pc, #300]	; (8004a94 <PdmConfig_Set+0x1328>)
 8004968:	2205      	movs	r2, #5
 800496a:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 800496c:	4b4a      	ldr	r3, [pc, #296]	; (8004a98 <PdmConfig_Set+0x132c>)
 800496e:	2205      	movs	r2, #5
 8004970:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_STARTER;
 8004972:	4b48      	ldr	r3, [pc, #288]	; (8004a94 <PdmConfig_Set+0x1328>)
 8004974:	2264      	movs	r2, #100	; 0x64
 8004976:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (pConfig->stStarter.nEnabled & 0x01);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3578 	ldrb.w	r3, [r3, #1400]	; 0x578
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	b2da      	uxtb	r2, r3
 8004984:	4b43      	ldr	r3, [pc, #268]	; (8004a94 <PdmConfig_Set+0x1328>)
 8004986:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stStarter.nInput;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 2579 	ldrb.w	r2, [r3, #1401]	; 0x579
 800498e:	4b41      	ldr	r3, [pc, #260]	; (8004a94 <PdmConfig_Set+0x1328>)
 8004990:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 3587 	ldrb.w	r3, [r3, #1415]	; 0x587
 8004998:	01db      	lsls	r3, r3, #7
 800499a:	b2da      	uxtb	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3586 	ldrb.w	r3, [r3, #1414]	; 0x586
 80049a2:	019b      	lsls	r3, r3, #6
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	4413      	add	r3, r2
 80049ae:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 3585 	ldrb.w	r3, [r3, #1413]	; 0x585
 80049b6:	015b      	lsls	r3, r3, #5
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 80049c0:	4413      	add	r3, r2
 80049c2:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 3584 	ldrb.w	r3, [r3, #1412]	; 0x584
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 3583 	ldrb.w	r3, [r3, #1411]	; 0x583
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	b2db      	uxtb	r3, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 80049e8:	4413      	add	r3, r2
 80049ea:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 3582 	ldrb.w	r3, [r3, #1410]	; 0x582
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[1] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[0] & 0x01);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 3581 	ldrb.w	r3, [r3, #1409]	; 0x581
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	b2db      	uxtb	r3, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8004a10:	4413      	add	r3, r2
 8004a12:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[1] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[0] & 0x01);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 3580 	ldrb.w	r3, [r3, #1408]	; 0x580
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 8004a24:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <PdmConfig_Set+0x1328>)
 8004a26:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 358b 	ldrb.w	r3, [r3, #1419]	; 0x58b
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	b25b      	sxtb	r3, r3
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	b25a      	sxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 358a 	ldrb.w	r3, [r3, #1418]	; 0x58a
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	b25b      	sxtb	r3, r3
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	b25b      	sxtb	r3, r3
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	b25b      	sxtb	r3, r3
 8004a4c:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[9] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[8] & 0x01);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 3589 	ldrb.w	r3, [r3, #1417]	; 0x589
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8004a5e:	4413      	add	r3, r2
 8004a60:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[9] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[8] & 0x01);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 3588 	ldrb.w	r3, [r3, #1416]	; 0x588
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8004a72:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <PdmConfig_Set+0x1328>)
 8004a74:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <PdmConfig_Set+0x1328>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <PdmConfig_Set+0x1328>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004a82:	4b04      	ldr	r3, [pc, #16]	; (8004a94 <PdmConfig_Set+0x1328>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8004a88:	4b01      	ldr	r3, [pc, #4]	; (8004a90 <PdmConfig_Set+0x1324>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004a8e:	e18d      	b.n	8004dac <PdmConfig_Set+0x1640>
 8004a90:	2000264c 	.word	0x2000264c
 8004a94:	20002620 	.word	0x20002620
 8004a98:	2000262c 	.word	0x2000262c

    //Set CAN Input Settings
    // 'N'
    case MSG_RX_SET_CAN_INPUTS:
       if(stMsgRx->nRxLen == 7){
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aa2:	2b07      	cmp	r3, #7
 8004aa4:	f040 8097 	bne.w	8004bd6 <PdmConfig_Set+0x146a>
         nCanInputNum = (stMsgRx->nRxData[2]);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004aae:	4bb6      	ldr	r3, [pc, #728]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004ab0:	701a      	strb	r2, [r3, #0]
         if(nCanInputNum < PDM_NUM_CAN_INPUTS){
 8004ab2:	4bb5      	ldr	r3, [pc, #724]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b1d      	cmp	r3, #29
 8004ab8:	f200 808d 	bhi.w	8004bd6 <PdmConfig_Set+0x146a>
           pConfig->stCanInput[nCanInputNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ac2:	4ab1      	ldr	r2, [pc, #708]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	b2d8      	uxtb	r0, r3
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	1a5b      	subs	r3, r3, r1
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8004ade:	4602      	mov	r2, r0
 8004ae0:	701a      	strb	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].eMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ae8:	105b      	asrs	r3, r3, #1
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	4aa6      	ldr	r2, [pc, #664]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004aee:	7812      	ldrb	r2, [r2, #0]
 8004af0:	4611      	mov	r1, r2
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	b2d8      	uxtb	r0, r3
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	460b      	mov	r3, r1
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	1a5b      	subs	r3, r3, r1
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8004b08:	4602      	mov	r2, r0
 8004b0a:	701a      	strb	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].eOperator = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b12:	4a9d      	ldr	r2, [pc, #628]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004b14:	7812      	ldrb	r2, [r2, #0]
 8004b16:	4611      	mov	r1, r2
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	b2d8      	uxtb	r0, r3
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	1a5b      	subs	r3, r3, r1
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	f203 5394 	addw	r3, r3, #1428	; 0x594
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	701a      	strb	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nId = (stMsgRx->nRxData[3] << 8) + stMsgRx->nRxData[4];
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	4990      	ldr	r1, [pc, #576]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004b46:	7809      	ldrb	r1, [r1, #0]
 8004b48:	4413      	add	r3, r2
 8004b4a:	b298      	uxth	r0, r3
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	1a5b      	subs	r3, r3, r1
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	801a      	strh	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nLowByte = (stMsgRx->nRxData[5] & 0x0F);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	4a87      	ldr	r2, [pc, #540]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004b6a:	7812      	ldrb	r2, [r2, #0]
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	b298      	uxth	r0, r3
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	460b      	mov	r3, r1
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	1a5b      	subs	r3, r3, r1
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8004b84:	4602      	mov	r2, r0
 8004b86:	801a      	strh	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].nHighByte = (stMsgRx->nRxData[5] & 0xF0) >> 4;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	4b7d      	ldr	r3, [pc, #500]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	4619      	mov	r1, r3
 8004b98:	b290      	uxth	r0, r2
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	1a5b      	subs	r3, r3, r1
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f203 5392 	addw	r3, r3, #1426	; 0x592
 8004baa:	4602      	mov	r2, r0
 8004bac:	801a      	strh	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nOnVal = stMsgRx->nRxData[6];
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004bb4:	4b74      	ldr	r3, [pc, #464]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	b290      	uxth	r0, r2
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	1a5b      	subs	r3, r3, r1
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f203 5396 	addw	r3, r3, #1430	; 0x596
 8004bcc:	4602      	mov	r2, r0
 8004bce:	801a      	strh	r2, [r3, #0]

           nSend = 1;
 8004bd0:	4b6e      	ldr	r3, [pc, #440]	; (8004d8c <PdmConfig_Set+0x1620>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	701a      	strb	r2, [r3, #0]
         }
       }

       if(stMsgRx->nRxLen == 2){
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d10b      	bne.n	8004bf8 <PdmConfig_Set+0x148c>
          nCanInputNum = (stMsgRx->nRxData[1]);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004be6:	4b68      	ldr	r3, [pc, #416]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004be8:	701a      	strb	r2, [r3, #0]
          if(nCanInputNum < PDM_NUM_CAN_INPUTS){
 8004bea:	4b67      	ldr	r3, [pc, #412]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b1d      	cmp	r3, #29
 8004bf0:	d802      	bhi.n	8004bf8 <PdmConfig_Set+0x148c>
            nSend = 1;
 8004bf2:	4b66      	ldr	r3, [pc, #408]	; (8004d8c <PdmConfig_Set+0x1620>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	701a      	strb	r2, [r3, #0]
          }
       }

       if(nSend){
 8004bf8:	4b64      	ldr	r3, [pc, #400]	; (8004d8c <PdmConfig_Set+0x1620>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80d7 	beq.w	8004db0 <PdmConfig_Set+0x1644>
         stMsgUsbTx.nTxLen = 7;
 8004c02:	4b63      	ldr	r3, [pc, #396]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004c04:	2207      	movs	r2, #7
 8004c06:	721a      	strb	r2, [r3, #8]
         stMsgCanTx.stTxHeader.DLC = 7;
 8004c08:	4b62      	ldr	r3, [pc, #392]	; (8004d94 <PdmConfig_Set+0x1628>)
 8004c0a:	2207      	movs	r2, #7
 8004c0c:	611a      	str	r2, [r3, #16]

         stMsgUsbTx.nTxData[0] = MSG_TX_SET_CAN_INPUTS;
 8004c0e:	4b60      	ldr	r3, [pc, #384]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004c10:	226e      	movs	r2, #110	; 0x6e
 8004c12:	701a      	strb	r2, [r3, #0]
         stMsgUsbTx.nTxData[1] = ((pConfig->stCanInput[nCanInputNum].eOperator & 0x0F) << 4) + ((pConfig->stCanInput[nCanInputNum].eMode & 0x03) << 1) +
 8004c14:	4b5c      	ldr	r3, [pc, #368]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	1a5b      	subs	r3, r3, r1
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	f203 5394 	addw	r3, r3, #1428	; 0x594
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	4b55      	ldr	r3, [pc, #340]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	68f9      	ldr	r1, [r7, #12]
 8004c38:	4603      	mov	r3, r0
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	1a1b      	subs	r3, r3, r0
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f003 0306 	and.w	r3, r3, #6
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	4413      	add	r3, r2
 8004c54:	b2da      	uxtb	r2, r3
                                 (pConfig->stCanInput[nCanInputNum].nEnabled & 0x01);
 8004c56:	4b4c      	ldr	r3, [pc, #304]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	68f9      	ldr	r1, [r7, #12]
 8004c5e:	4603      	mov	r3, r0
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	1a1b      	subs	r3, r3, r0
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	b2db      	uxtb	r3, r3
         stMsgUsbTx.nTxData[1] = ((pConfig->stCanInput[nCanInputNum].eOperator & 0x0F) << 4) + ((pConfig->stCanInput[nCanInputNum].eMode & 0x03) << 1) +
 8004c74:	4413      	add	r3, r2
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	4b45      	ldr	r3, [pc, #276]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004c7a:	705a      	strb	r2, [r3, #1]
         stMsgUsbTx.nTxData[2] = nCanInputNum;
 8004c7c:	4b42      	ldr	r3, [pc, #264]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004c7e:	781a      	ldrb	r2, [r3, #0]
 8004c80:	4b43      	ldr	r3, [pc, #268]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004c82:	709a      	strb	r2, [r3, #2]
         stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nId >> 8);
 8004c84:	4b40      	ldr	r3, [pc, #256]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	1a5b      	subs	r3, r3, r1
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	0a1b      	lsrs	r3, r3, #8
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	4b3b      	ldr	r3, [pc, #236]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004ca4:	70da      	strb	r2, [r3, #3]
         stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nId & 0xFF);
 8004ca6:	4b38      	ldr	r3, [pc, #224]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	4619      	mov	r1, r3
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	1a5b      	subs	r3, r3, r1
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	4b33      	ldr	r3, [pc, #204]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004cc2:	711a      	strb	r2, [r3, #4]
         stMsgUsbTx.nTxData[5] = ((pConfig->stCanInput[nCanInputNum].nHighByte & 0xF) << 4) + (pConfig->stCanInput[nCanInputNum].nLowByte & 0xF);
 8004cc4:	4b30      	ldr	r3, [pc, #192]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	1a5b      	subs	r3, r3, r1
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f203 5392 	addw	r3, r3, #1426	; 0x592
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	4b29      	ldr	r3, [pc, #164]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	68f9      	ldr	r1, [r7, #12]
 8004ce8:	4603      	mov	r3, r0
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	1a1b      	subs	r3, r3, r0
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	4413      	add	r3, r2
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	4b22      	ldr	r3, [pc, #136]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004d06:	715a      	strb	r2, [r3, #5]
         stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nOnVal);
 8004d08:	4b1f      	ldr	r3, [pc, #124]	; (8004d88 <PdmConfig_Set+0x161c>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	460b      	mov	r3, r1
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	1a5b      	subs	r3, r3, r1
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	f203 5396 	addw	r3, r3, #1430	; 0x596
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004d24:	719a      	strb	r2, [r3, #6]
       }
    break;
 8004d26:	e043      	b.n	8004db0 <PdmConfig_Set+0x1644>

    //Get Version
    // 'V'
    case MSG_RX_GET_VERSION:
      if(stMsgRx->nRxLen == 1){
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d140      	bne.n	8004db4 <PdmConfig_Set+0x1648>
        nSend = 1;
 8004d32:	4b16      	ldr	r3, [pc, #88]	; (8004d8c <PdmConfig_Set+0x1620>)
 8004d34:	2201      	movs	r2, #1
 8004d36:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxLen = 5;
 8004d38:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004d3a:	2205      	movs	r2, #5
 8004d3c:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 8004d3e:	4b15      	ldr	r3, [pc, #84]	; (8004d94 <PdmConfig_Set+0x1628>)
 8004d40:	2205      	movs	r2, #5
 8004d42:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_GET_VERSION;
 8004d44:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004d46:	2276      	movs	r2, #118	; 0x76
 8004d48:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (uint8_t)PDM_MAJOR_VERSION;
 8004d4a:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)PDM_MINOR_VERSION;
 8004d50:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(PDM_BUILD >> 8);
 8004d56:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(PDM_BUILD & 0xFF);
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8004d62:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8004d68:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004d6e:	4b08      	ldr	r3, [pc, #32]	; (8004d90 <PdmConfig_Set+0x1624>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	71da      	strb	r2, [r3, #7]
      }
    break;
 8004d74:	e01e      	b.n	8004db4 <PdmConfig_Set+0x1648>

    default:
      return 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e03e      	b.n	8004df8 <PdmConfig_Set+0x168c>
    break;
 8004d7a:	bf00      	nop
 8004d7c:	e01b      	b.n	8004db6 <PdmConfig_Set+0x164a>
    break;
 8004d7e:	bf00      	nop
 8004d80:	e019      	b.n	8004db6 <PdmConfig_Set+0x164a>
    break;
 8004d82:	bf00      	nop
 8004d84:	e017      	b.n	8004db6 <PdmConfig_Set+0x164a>
 8004d86:	bf00      	nop
 8004d88:	20002651 	.word	0x20002651
 8004d8c:	2000264c 	.word	0x2000264c
 8004d90:	20002620 	.word	0x20002620
 8004d94:	2000262c 	.word	0x2000262c
    break;
 8004d98:	bf00      	nop
 8004d9a:	e00c      	b.n	8004db6 <PdmConfig_Set+0x164a>
    break;
 8004d9c:	bf00      	nop
 8004d9e:	e00a      	b.n	8004db6 <PdmConfig_Set+0x164a>
    break;
 8004da0:	bf00      	nop
 8004da2:	e008      	b.n	8004db6 <PdmConfig_Set+0x164a>
    break;
 8004da4:	bf00      	nop
 8004da6:	e006      	b.n	8004db6 <PdmConfig_Set+0x164a>
    break;
 8004da8:	bf00      	nop
 8004daa:	e004      	b.n	8004db6 <PdmConfig_Set+0x164a>
    break;
 8004dac:	bf00      	nop
 8004dae:	e002      	b.n	8004db6 <PdmConfig_Set+0x164a>
    break;
 8004db0:	bf00      	nop
 8004db2:	e000      	b.n	8004db6 <PdmConfig_Set+0x164a>
    break;
 8004db4:	bf00      	nop
    }

  if(nSend){
 8004db6:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <PdmConfig_Set+0x1694>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d01b      	beq.n	8004df6 <PdmConfig_Set+0x168a>
    stMsgCanTx.stTxHeader.StdId = pConfig->stCanOutput.nBaseId + 20;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8004dc4:	3314      	adds	r3, #20
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4b0e      	ldr	r3, [pc, #56]	; (8004e04 <PdmConfig_Set+0x1698>)
 8004dca:	601a      	str	r2, [r3, #0]

    memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8004dcc:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <PdmConfig_Set+0x1698>)
 8004dce:	4a0e      	ldr	r2, [pc, #56]	; (8004e08 <PdmConfig_Set+0x169c>)
 8004dd0:	3318      	adds	r3, #24
 8004dd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dd6:	e883 0003 	stmia.w	r3, {r0, r1}

    osMessageQueuePut(*qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	2300      	movs	r3, #0
 8004de0:	2200      	movs	r2, #0
 8004de2:	4909      	ldr	r1, [pc, #36]	; (8004e08 <PdmConfig_Set+0x169c>)
 8004de4:	f00d fd36 	bl	8012854 <osMessageQueuePut>
    osMessageQueuePut(*qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	2300      	movs	r3, #0
 8004dee:	2200      	movs	r2, #0
 8004df0:	4904      	ldr	r1, [pc, #16]	; (8004e04 <PdmConfig_Set+0x1698>)
 8004df2:	f00d fd2f 	bl	8012854 <osMessageQueuePut>
  }

  return 1;
 8004df6:	2301      	movs	r3, #1

}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	2000264c 	.word	0x2000264c
 8004e04:	2000262c 	.word	0x2000262c
 8004e08:	20002620 	.word	0x20002620

08004e0c <PdmConfig_SetDefault>:

void PdmConfig_SetDefault(PdmConfig_t* pConfig){
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  //Device Configuration
  pConfig->stDevConfig.nVersion = 3;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2203      	movs	r2, #3
 8004e18:	701a      	strb	r2, [r3, #0]
  pConfig->stDevConfig.nCanEnabled = 1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	705a      	strb	r2, [r3, #1]
  pConfig->stDevConfig.nCanSpeed = 6;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2206      	movs	r2, #6
 8004e24:	709a      	strb	r2, [r3, #2]

  //Logging
  pConfig->stLogging.nUpdateTime = 1000;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e2c:	809a      	strh	r2, [r3, #4]

  //Inputs
  pConfig->stInput[0].nEnabled = 1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	721a      	strb	r2, [r3, #8]
  pConfig->stInput[0].eMode = MODE_MOMENTARY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	741a      	strb	r2, [r3, #16]
  pConfig->stInput[0].nOnLevel = 0;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	841a      	strh	r2, [r3, #32]
  pConfig->stInput[0].nDebounceTime = 20;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2214      	movs	r2, #20
 8004e44:	845a      	strh	r2, [r3, #34]	; 0x22

  pConfig->stInput[1].nEnabled = 1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pConfig->stInput[1].eMode = MODE_MOMENTARY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pConfig->stInput[1].nOnLevel = 0;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  pConfig->stInput[1].nDebounceTime = 20;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2214      	movs	r2, #20
 8004e60:	87da      	strh	r2, [r3, #62]	; 0x3e

  pConfig->stInput[2].nEnabled = 1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pConfig->stInput[2].eMode = MODE_MOMENTARY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  pConfig->stInput[2].nOnLevel = 0;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  pConfig->stInput[2].nDebounceTime = 20;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2214      	movs	r2, #20
 8004e7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  pConfig->stInput[3].nEnabled = 1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  pConfig->stInput[3].eMode = MODE_MOMENTARY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  pConfig->stInput[3].nOnLevel = 0;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  pConfig->stInput[3].nDebounceTime = 20;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2214      	movs	r2, #20
 8004e9e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

  pConfig->stInput[4].nEnabled = 1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  pConfig->stInput[4].eMode = MODE_MOMENTARY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  pConfig->stInput[4].nOnLevel = 0;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  pConfig->stInput[4].nDebounceTime = 20;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2214      	movs	r2, #20
 8004ebe:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92

  pConfig->stInput[5].nEnabled = 1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  pConfig->stInput[5].eMode = MODE_MOMENTARY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  pConfig->stInput[5].nOnLevel = 0;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  pConfig->stInput[5].nDebounceTime = 20;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2214      	movs	r2, #20
 8004ede:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

  pConfig->stInput[6].nEnabled = 1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  pConfig->stInput[6].eMode = MODE_MOMENTARY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
  pConfig->stInput[6].nOnLevel = 0;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
  pConfig->stInput[6].nDebounceTime = 20;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2214      	movs	r2, #20
 8004efe:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

  pConfig->stInput[7].nEnabled = 1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  pConfig->stInput[7].eMode = MODE_MOMENTARY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
  pConfig->stInput[7].nOnLevel = 0;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
  pConfig->stInput[7].nDebounceTime = 20;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2214      	movs	r2, #20
 8004f1e:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6

  //Outputs
  pConfig->stOutput[0].nEnabled = 1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
  pConfig->stOutput[0].nInput = 1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
  pConfig->stOutput[0].nCurrentLimit = 250;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	22fa      	movs	r2, #250	; 0xfa
 8004f36:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
  pConfig->stOutput[0].nInrushLimit = 300;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f40:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
  pConfig->stOutput[0].nInrushTime = 2000;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004f4a:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
  pConfig->stOutput[0].eResetMode = RESET_ENDLESS;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
  pConfig->stOutput[0].nResetTime = 1000;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f5c:	f8a3 2418 	strh.w	r2, [r3, #1048]	; 0x418
  pConfig->stOutput[0].nResetLimit = 1;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a

  pConfig->stOutput[1].nEnabled = 1;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
  pConfig->stOutput[1].nInput = 2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
  pConfig->stOutput[1].nCurrentLimit = 150;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2296      	movs	r2, #150	; 0x96
 8004f7c:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
  pConfig->stOutput[1].nInrushLimit = 300;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f86:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
  pConfig->stOutput[1].nInrushTime = 2000;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004f90:	f8a3 2428 	strh.w	r2, [r3, #1064]	; 0x428
  pConfig->stOutput[1].eResetMode = RESET_ENDLESS;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
  pConfig->stOutput[1].nResetTime = 1000;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fa2:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
  pConfig->stOutput[1].nResetLimit = 2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

  pConfig->stOutput[2].nEnabled = 1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
  pConfig->stOutput[2].nInput = 3;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2203      	movs	r2, #3
 8004fba:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
  pConfig->stOutput[2].nCurrentLimit = 80;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2250      	movs	r2, #80	; 0x50
 8004fc2:	f8a3 2438 	strh.w	r2, [r3, #1080]	; 0x438
  pConfig->stOutput[2].nInrushLimit = 160;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	22a0      	movs	r2, #160	; 0xa0
 8004fca:	f8a3 243a 	strh.w	r2, [r3, #1082]	; 0x43a
  pConfig->stOutput[2].nInrushTime = 2000;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004fd4:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
  pConfig->stOutput[2].eResetMode = RESET_ENDLESS;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
  pConfig->stOutput[2].nResetTime = 1000;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fe6:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440
  pConfig->stOutput[2].nResetLimit = 3;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2203      	movs	r2, #3
 8004fee:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442

  pConfig->stOutput[3].nEnabled = 1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
  pConfig->stOutput[3].nInput = 4;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
  pConfig->stOutput[3].nCurrentLimit = 80;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2250      	movs	r2, #80	; 0x50
 8005006:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
  pConfig->stOutput[3].nInrushLimit = 160;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	22a0      	movs	r2, #160	; 0xa0
 800500e:	f8a3 244e 	strh.w	r2, [r3, #1102]	; 0x44e
  pConfig->stOutput[3].nInrushTime = 2000;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005018:	f8a3 2450 	strh.w	r2, [r3, #1104]	; 0x450
  pConfig->stOutput[3].eResetMode = RESET_ENDLESS;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
  pConfig->stOutput[3].nResetTime = 1000;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800502a:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
  pConfig->stOutput[3].nResetLimit = 2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456

  pConfig->stOutput[4].nEnabled = 1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
  pConfig->stOutput[4].nInput = 5;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2205      	movs	r2, #5
 8005042:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
  pConfig->stOutput[4].nCurrentLimit = 80;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2250      	movs	r2, #80	; 0x50
 800504a:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
  pConfig->stOutput[4].nInrushLimit = 160;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	22a0      	movs	r2, #160	; 0xa0
 8005052:	f8a3 2462 	strh.w	r2, [r3, #1122]	; 0x462
  pConfig->stOutput[4].nInrushTime = 2000;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800505c:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
  pConfig->stOutput[4].eResetMode = RESET_ENDLESS;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
  pConfig->stOutput[4].nResetTime = 1000;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800506e:	f8a3 2468 	strh.w	r2, [r3, #1128]	; 0x468
  pConfig->stOutput[4].nResetLimit = 2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a

  pConfig->stOutput[5].nEnabled = 1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 246c 	strb.w	r2, [r3, #1132]	; 0x46c
  pConfig->stOutput[5].nInput = 6;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2206      	movs	r2, #6
 8005086:	f883 246d 	strb.w	r2, [r3, #1133]	; 0x46d
  pConfig->stOutput[5].nCurrentLimit = 80;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2250      	movs	r2, #80	; 0x50
 800508e:	f8a3 2474 	strh.w	r2, [r3, #1140]	; 0x474
  pConfig->stOutput[5].nInrushLimit = 160;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	22a0      	movs	r2, #160	; 0xa0
 8005096:	f8a3 2476 	strh.w	r2, [r3, #1142]	; 0x476
  pConfig->stOutput[5].nInrushTime = 2000;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80050a0:	f8a3 2478 	strh.w	r2, [r3, #1144]	; 0x478
  pConfig->stOutput[5].eResetMode = RESET_ENDLESS;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
  pConfig->stOutput[5].nResetTime = 1000;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050b2:	f8a3 247c 	strh.w	r2, [r3, #1148]	; 0x47c
  pConfig->stOutput[5].nResetLimit = 2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e

  pConfig->stOutput[6].nEnabled = 1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
  pConfig->stOutput[6].nInput = 7;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2207      	movs	r2, #7
 80050ca:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
  pConfig->stOutput[6].nCurrentLimit = 150;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2296      	movs	r2, #150	; 0x96
 80050d2:	f8a3 2488 	strh.w	r2, [r3, #1160]	; 0x488
  pConfig->stOutput[6].nInrushLimit = 300;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050dc:	f8a3 248a 	strh.w	r2, [r3, #1162]	; 0x48a
  pConfig->stOutput[6].nInrushTime = 2000;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80050e6:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
  pConfig->stOutput[6].eResetMode = RESET_ENDLESS;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2202      	movs	r2, #2
 80050ee:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
  pConfig->stOutput[6].nResetTime = 1000;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050f8:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
  pConfig->stOutput[6].nResetLimit = 2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492

  pConfig->stOutput[7].nEnabled = 1;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  pConfig->stOutput[7].nInput = 8;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2208      	movs	r2, #8
 8005110:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
  pConfig->stOutput[7].nCurrentLimit = 150;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2296      	movs	r2, #150	; 0x96
 8005118:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
  pConfig->stOutput[7].nInrushLimit = 300;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005122:	f8a3 249e 	strh.w	r2, [r3, #1182]	; 0x49e
  pConfig->stOutput[7].nInrushTime = 2000;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800512c:	f8a3 24a0 	strh.w	r2, [r3, #1184]	; 0x4a0
  pConfig->stOutput[7].eResetMode = RESET_ENDLESS;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
  pConfig->stOutput[7].nResetTime = 1000;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800513e:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
  pConfig->stOutput[7].nResetLimit = 2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6

  pConfig->stOutput[8].nEnabled = 1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
  pConfig->stOutput[8].nInput = 1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
  pConfig->stOutput[8].nCurrentLimit = 80;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2250      	movs	r2, #80	; 0x50
 800515e:	f8a3 24b0 	strh.w	r2, [r3, #1200]	; 0x4b0
  pConfig->stOutput[8].nInrushLimit = 160;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	22a0      	movs	r2, #160	; 0xa0
 8005166:	f8a3 24b2 	strh.w	r2, [r3, #1202]	; 0x4b2
  pConfig->stOutput[8].nInrushTime = 2000;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005170:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
  pConfig->stOutput[8].eResetMode = RESET_ENDLESS;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
  pConfig->stOutput[8].nResetTime = 1000;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005182:	f8a3 24b8 	strh.w	r2, [r3, #1208]	; 0x4b8
  pConfig->stOutput[8].nResetLimit = 2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba

  pConfig->stOutput[9].nEnabled = 1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  pConfig->stOutput[9].nInput = 2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  pConfig->stOutput[9].nCurrentLimit = 80;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2250      	movs	r2, #80	; 0x50
 80051a2:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
  pConfig->stOutput[9].nInrushLimit = 160;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	22a0      	movs	r2, #160	; 0xa0
 80051aa:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6
  pConfig->stOutput[9].nInrushTime = 2000;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80051b4:	f8a3 24c8 	strh.w	r2, [r3, #1224]	; 0x4c8
  pConfig->stOutput[9].eResetMode = RESET_ENDLESS;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
  pConfig->stOutput[9].nResetTime = 1000;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051c6:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
  pConfig->stOutput[9].nResetLimit = 2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce

  pConfig->stOutput[10].nEnabled = 1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
  pConfig->stOutput[10].nInput = 7;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2207      	movs	r2, #7
 80051de:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
  pConfig->stOutput[10].nCurrentLimit = 80;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2250      	movs	r2, #80	; 0x50
 80051e6:	f8a3 24d8 	strh.w	r2, [r3, #1240]	; 0x4d8
  pConfig->stOutput[10].nInrushLimit = 160;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	22a0      	movs	r2, #160	; 0xa0
 80051ee:	f8a3 24da 	strh.w	r2, [r3, #1242]	; 0x4da
  pConfig->stOutput[10].nInrushTime = 2000;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80051f8:	f8a3 24dc 	strh.w	r2, [r3, #1244]	; 0x4dc
  pConfig->stOutput[10].eResetMode = RESET_ENDLESS;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
  pConfig->stOutput[10].nResetTime = 1000;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800520a:	f8a3 24e0 	strh.w	r2, [r3, #1248]	; 0x4e0
  pConfig->stOutput[10].nResetLimit = 2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2202      	movs	r2, #2
 8005212:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2

  pConfig->stOutput[11].nEnabled = 1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
  pConfig->stOutput[11].nInput = 8;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2208      	movs	r2, #8
 8005222:	f883 24e5 	strb.w	r2, [r3, #1253]	; 0x4e5
  pConfig->stOutput[11].nCurrentLimit = 80;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2250      	movs	r2, #80	; 0x50
 800522a:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
  pConfig->stOutput[11].nInrushLimit = 160;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	22a0      	movs	r2, #160	; 0xa0
 8005232:	f8a3 24ee 	strh.w	r2, [r3, #1262]	; 0x4ee
  pConfig->stOutput[11].nInrushTime = 2000;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800523c:	f8a3 24f0 	strh.w	r2, [r3, #1264]	; 0x4f0
  pConfig->stOutput[11].eResetMode = RESET_ENDLESS;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
  pConfig->stOutput[11].nResetTime = 1000;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800524e:	f8a3 24f4 	strh.w	r2, [r3, #1268]	; 0x4f4
  pConfig->stOutput[11].nResetLimit = 2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2202      	movs	r2, #2
 8005256:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6

  //Virtual Inputs
  pConfig->stVirtualInput[0].nEnabled = 0;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
  pConfig->stVirtualInput[0].nNot0 = 0;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
  pConfig->stVirtualInput[0].nVar0 = 10;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	220a      	movs	r2, #10
 800526e:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
  pConfig->stVirtualInput[0].eCond0 = COND_AND;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  pConfig->stVirtualInput[0].nNot1 = 1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
  pConfig->stVirtualInput[0].nVar1 = 63;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	223f      	movs	r2, #63	; 0x3f
 8005286:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
  pConfig->stVirtualInput[0].eCond1 = COND_OR;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
  pConfig->stVirtualInput[0].nNot2 = 0;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  pConfig->stVirtualInput[0].nVar2 = 0;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
  pConfig->stVirtualInput[0].eMode = MODE_LATCHING;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

  pConfig->stVirtualInput[1].nEnabled = 0;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
  pConfig->stVirtualInput[1].nNot0 = 0;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  pConfig->stVirtualInput[1].nVar0 = 11;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	220b      	movs	r2, #11
 80052be:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pConfig->stVirtualInput[1].eCond0 = COND_AND;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
  pConfig->stVirtualInput[1].nNot1 = 1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  pConfig->stVirtualInput[1].nVar1 = 62;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	223e      	movs	r2, #62	; 0x3e
 80052d6:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  pConfig->stVirtualInput[1].eCond1 = COND_OR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
  pConfig->stVirtualInput[1].nNot2 = 0;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
  pConfig->stVirtualInput[1].nVar2 = 0;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
  pConfig->stVirtualInput[1].eMode = MODE_LATCHING;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

  pConfig->stVirtualInput[2].nEnabled = 0;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
  pConfig->stVirtualInput[2].nNot0 = 0;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
  pConfig->stVirtualInput[2].nVar0 = 0;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
  pConfig->stVirtualInput[2].eCond0 = COND_AND;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  pConfig->stVirtualInput[2].nNot1 = 0;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
  pConfig->stVirtualInput[2].nVar1 = 0;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  pConfig->stVirtualInput[2].eCond1 = COND_OR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
  pConfig->stVirtualInput[2].nNot2 = 0;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
  pConfig->stVirtualInput[2].nVar2 = 0;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
  pConfig->stVirtualInput[2].eMode = MODE_MOMENTARY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

  pConfig->stVirtualInput[3].nEnabled = 0;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  pConfig->stVirtualInput[3].nNot0 = 0;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
  pConfig->stVirtualInput[3].nVar0 = 0;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
  pConfig->stVirtualInput[3].eCond0 = COND_AND;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  pConfig->stVirtualInput[3].nNot1 = 0;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  pConfig->stVirtualInput[3].nVar1 = 0;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
  pConfig->stVirtualInput[3].eCond1 = COND_OR;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
  pConfig->stVirtualInput[3].nNot2 = 0;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
  pConfig->stVirtualInput[3].nVar2 = 0;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
  pConfig->stVirtualInput[3].eMode = MODE_MOMENTARY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

  pConfig->stVirtualInput[4].nEnabled = 0;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
  pConfig->stVirtualInput[4].nNot0 = 0;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  pConfig->stVirtualInput[4].nVar0 = 0;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  pConfig->stVirtualInput[4].eCond0 = COND_AND;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
  pConfig->stVirtualInput[4].nNot1 = 0;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
  pConfig->stVirtualInput[4].nVar1 = 0;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
  pConfig->stVirtualInput[4].eCond1 = COND_OR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
  pConfig->stVirtualInput[4].nNot2 = 0;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
  pConfig->stVirtualInput[4].nVar2 = 0;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
  pConfig->stVirtualInput[4].eMode = MODE_MOMENTARY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0

  pConfig->stVirtualInput[5].nEnabled = 0;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
  pConfig->stVirtualInput[5].nNot0 = 0;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
  pConfig->stVirtualInput[5].nVar0 = 0;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
  pConfig->stVirtualInput[5].eCond0 = COND_AND;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
  pConfig->stVirtualInput[5].nNot1 = 0;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
  pConfig->stVirtualInput[5].nVar1 = 0;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  pConfig->stVirtualInput[5].eCond1 = COND_OR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
  pConfig->stVirtualInput[5].nNot2 = 0;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  pConfig->stVirtualInput[5].nVar2 = 0;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
  pConfig->stVirtualInput[5].eMode = MODE_MOMENTARY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

  pConfig->stVirtualInput[6].nEnabled = 0;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
  pConfig->stVirtualInput[6].nNot0 = 0;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
  pConfig->stVirtualInput[6].nVar0 = 0;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
  pConfig->stVirtualInput[6].eCond0 = COND_AND;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
  pConfig->stVirtualInput[6].nNot1 = 0;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
  pConfig->stVirtualInput[6].nVar1 = 0;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
  pConfig->stVirtualInput[6].eCond1 = COND_OR;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
  pConfig->stVirtualInput[6].nNot2 = 0;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
  pConfig->stVirtualInput[6].nVar2 = 0;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
  pConfig->stVirtualInput[6].eMode = MODE_MOMENTARY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0

  pConfig->stVirtualInput[7].nEnabled = 0;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  pConfig->stVirtualInput[7].nNot0 = 0;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  pConfig->stVirtualInput[7].nVar0 = 0;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
  pConfig->stVirtualInput[7].eCond0 = COND_AND;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
  pConfig->stVirtualInput[7].nNot1 = 0;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
  pConfig->stVirtualInput[7].nVar1 = 0;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
  pConfig->stVirtualInput[7].eCond1 = COND_OR;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
  pConfig->stVirtualInput[7].nNot2 = 0;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  pConfig->stVirtualInput[7].nVar2 = 0;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
  pConfig->stVirtualInput[7].eMode = MODE_MOMENTARY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

  pConfig->stVirtualInput[8].nEnabled = 0;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  pConfig->stVirtualInput[8].nNot0 = 0;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  pConfig->stVirtualInput[8].nVar0 = 0;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
  pConfig->stVirtualInput[8].eCond0 = COND_AND;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
  pConfig->stVirtualInput[8].nNot1 = 0;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
  pConfig->stVirtualInput[8].nVar1 = 0;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
  pConfig->stVirtualInput[8].eCond1 = COND_OR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  pConfig->stVirtualInput[8].nNot2 = 0;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
  pConfig->stVirtualInput[8].nVar2 = 0;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
  pConfig->stVirtualInput[8].eMode = MODE_MOMENTARY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

  pConfig->stVirtualInput[9].nEnabled = 0;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
  pConfig->stVirtualInput[9].nNot0 = 0;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
  pConfig->stVirtualInput[9].nVar0 = 0;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
  pConfig->stVirtualInput[9].eCond0 = COND_AND;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
  pConfig->stVirtualInput[9].nNot1 = 0;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
  pConfig->stVirtualInput[9].nVar1 = 0;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
  pConfig->stVirtualInput[9].eCond1 = COND_OR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  pConfig->stVirtualInput[9].nNot2 = 0;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  pConfig->stVirtualInput[9].nVar2 = 0;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  pConfig->stVirtualInput[9].eMode = MODE_MOMENTARY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268

  pConfig->stVirtualInput[10].nEnabled = 0;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
  pConfig->stVirtualInput[10].nNot0 = 0;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
  pConfig->stVirtualInput[10].nVar0 = 0;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
  pConfig->stVirtualInput[10].eCond0 = COND_AND;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
  pConfig->stVirtualInput[10].nNot1 = 0;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
  pConfig->stVirtualInput[10].nVar1 = 0;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
  pConfig->stVirtualInput[10].eCond1 = COND_OR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
  pConfig->stVirtualInput[10].nNot2 = 0;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
  pConfig->stVirtualInput[10].nVar2 = 0;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
  pConfig->stVirtualInput[10].eMode = MODE_MOMENTARY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  pConfig->stVirtualInput[11].nEnabled = 0;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
  pConfig->stVirtualInput[11].nNot0 = 0;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
  pConfig->stVirtualInput[11].nVar0 = 0;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
  pConfig->stVirtualInput[11].eCond0 = COND_AND;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  pConfig->stVirtualInput[11].nNot1 = 0;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  pConfig->stVirtualInput[11].nVar1 = 0;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
  pConfig->stVirtualInput[11].eCond1 = COND_OR;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
  pConfig->stVirtualInput[11].nNot2 = 0;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
  pConfig->stVirtualInput[11].nVar2 = 0;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
  pConfig->stVirtualInput[11].eMode = MODE_MOMENTARY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  pConfig->stVirtualInput[12].nEnabled = 0;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
  pConfig->stVirtualInput[12].nNot0 = 0;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
  pConfig->stVirtualInput[12].nVar0 = 0;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
  pConfig->stVirtualInput[12].eCond0 = COND_AND;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
  pConfig->stVirtualInput[12].nNot1 = 0;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
  pConfig->stVirtualInput[12].nVar1 = 0;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
  pConfig->stVirtualInput[12].eCond1 = COND_OR;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
  pConfig->stVirtualInput[12].nNot2 = 0;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
  pConfig->stVirtualInput[12].nVar2 = 0;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
  pConfig->stVirtualInput[12].eMode = MODE_MOMENTARY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  pConfig->stVirtualInput[13].nEnabled = 0;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
  pConfig->stVirtualInput[13].nNot0 = 0;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
  pConfig->stVirtualInput[13].nVar0 = 0;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
  pConfig->stVirtualInput[13].eCond0 = COND_AND;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  pConfig->stVirtualInput[13].nNot1 = 0;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
  pConfig->stVirtualInput[13].nVar1 = 0;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
  pConfig->stVirtualInput[13].eCond1 = COND_OR;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  pConfig->stVirtualInput[13].nNot2 = 0;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
  pConfig->stVirtualInput[13].nVar2 = 0;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
  pConfig->stVirtualInput[13].eMode = MODE_MOMENTARY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308

  pConfig->stVirtualInput[14].nEnabled = 0;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  pConfig->stVirtualInput[14].nNot0 = 0;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  pConfig->stVirtualInput[14].nVar0 = 0;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
  pConfig->stVirtualInput[14].eCond0 = COND_AND;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  pConfig->stVirtualInput[14].nNot1 = 0;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  pConfig->stVirtualInput[14].nVar1 = 0;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  pConfig->stVirtualInput[14].eCond1 = COND_OR;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  pConfig->stVirtualInput[14].nNot2 = 0;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
  pConfig->stVirtualInput[14].nVar2 = 0;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
  pConfig->stVirtualInput[14].eMode = MODE_MOMENTARY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330

  pConfig->stVirtualInput[15].nEnabled = 0;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
  pConfig->stVirtualInput[15].nNot0 = 0;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
  pConfig->stVirtualInput[15].nVar0 = 0;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
  pConfig->stVirtualInput[15].eCond0 = COND_AND;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
  pConfig->stVirtualInput[15].nNot1 = 0;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
  pConfig->stVirtualInput[15].nVar1 = 0;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
  pConfig->stVirtualInput[15].eCond1 = COND_OR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
  pConfig->stVirtualInput[15].nNot2 = 0;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
  pConfig->stVirtualInput[15].nVar2 = 0;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
  pConfig->stVirtualInput[15].eMode = MODE_MOMENTARY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

  pConfig->stVirtualInput[16].nEnabled = 0;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
  pConfig->stVirtualInput[16].nNot0 = 0;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
  pConfig->stVirtualInput[16].nVar0 = 0;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
  pConfig->stVirtualInput[16].eCond0 = COND_AND;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  pConfig->stVirtualInput[16].nNot1 = 0;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
  pConfig->stVirtualInput[16].nVar1 = 0;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
  pConfig->stVirtualInput[16].eCond1 = COND_OR;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
  pConfig->stVirtualInput[16].nNot2 = 0;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
  pConfig->stVirtualInput[16].nVar2 = 0;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
  pConfig->stVirtualInput[16].eMode = MODE_MOMENTARY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380

  pConfig->stVirtualInput[17].nEnabled = 0;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
  pConfig->stVirtualInput[17].nNot0 = 0;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
  pConfig->stVirtualInput[17].nVar0 = 0;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
  pConfig->stVirtualInput[17].eCond0 = COND_AND;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
  pConfig->stVirtualInput[17].nNot1 = 0;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
  pConfig->stVirtualInput[17].nVar1 = 0;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
  pConfig->stVirtualInput[17].eCond1 = COND_OR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
  pConfig->stVirtualInput[17].nNot2 = 0;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
  pConfig->stVirtualInput[17].nVar2 = 0;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
  pConfig->stVirtualInput[17].eMode = MODE_MOMENTARY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8

  pConfig->stVirtualInput[18].nEnabled = 0;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  pConfig->stVirtualInput[18].nNot0 = 0;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  pConfig->stVirtualInput[18].nVar0 = 0;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
  pConfig->stVirtualInput[18].eCond0 = COND_AND;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
  pConfig->stVirtualInput[18].nNot1 = 0;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
  pConfig->stVirtualInput[18].nVar1 = 0;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
  pConfig->stVirtualInput[18].eCond1 = COND_OR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
  pConfig->stVirtualInput[18].nNot2 = 0;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
  pConfig->stVirtualInput[18].nVar2 = 0;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
  pConfig->stVirtualInput[18].eMode = MODE_MOMENTARY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0

  pConfig->stVirtualInput[19].nEnabled = 0;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
  pConfig->stVirtualInput[19].nNot0 = 0;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
  pConfig->stVirtualInput[19].nVar0 = 0;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
  pConfig->stVirtualInput[19].eCond0 = COND_AND;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  pConfig->stVirtualInput[19].nNot1 = 0;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
  pConfig->stVirtualInput[19].nVar1 = 0;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
  pConfig->stVirtualInput[19].eCond1 = COND_OR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
  pConfig->stVirtualInput[19].nNot2 = 0;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
  pConfig->stVirtualInput[19].nVar2 = 0;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
  pConfig->stVirtualInput[19].eMode = MODE_MOMENTARY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8

  //Wiper
  pConfig->stWiper.nEnabled = 0;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
  pConfig->stWiper.nMode = 2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2202      	movs	r2, #2
 80058a6:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
  pConfig->stWiper.nSlowInput = 0;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
  pConfig->stWiper.nFastInput = 0;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
  pConfig->stWiper.nInterInput = 0;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
  pConfig->stWiper.nOnInput = 15;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	220f      	movs	r2, #15
 80058c6:	f883 24fd 	strb.w	r2, [r3, #1277]	; 0x4fd
  pConfig->stWiper.nSpeedInput = 7;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2207      	movs	r2, #7
 80058ce:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
  pConfig->stWiper.nParkInput = 1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
  pConfig->stWiper.nParkStopLevel = 0;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  pConfig->stWiper.nSwipeInput = 4;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2204      	movs	r2, #4
 80058e6:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
  pConfig->stWiper.nWashInput = 14;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	220e      	movs	r2, #14
 80058ee:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
  pConfig->stWiper.nWashWipeCycles = 2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
  pConfig->stWiper.nSpeedMap[0] = 3;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2203      	movs	r2, #3
 80058fe:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
  pConfig->stWiper.nSpeedMap[1] = 4;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2204      	movs	r2, #4
 8005906:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
  pConfig->stWiper.nSpeedMap[2] = 5;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2205      	movs	r2, #5
 800590e:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
  pConfig->stWiper.nSpeedMap[3] = 6;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2206      	movs	r2, #6
 8005916:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
  pConfig->stWiper.nSpeedMap[4] = 7;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2207      	movs	r2, #7
 800591e:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
  pConfig->stWiper.nSpeedMap[5] = 8;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2208      	movs	r2, #8
 8005926:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
  pConfig->stWiper.nSpeedMap[6] = 1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
  pConfig->stWiper.nSpeedMap[7] = 2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
  pConfig->stWiper.nIntermitTime[0] = 1000;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005940:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
  pConfig->stWiper.nIntermitTime[1] = 2000;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800594a:	f8a3 250e 	strh.w	r2, [r3, #1294]	; 0x50e
  pConfig->stWiper.nIntermitTime[2] = 3000;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005954:	f8a3 2510 	strh.w	r2, [r3, #1296]	; 0x510
  pConfig->stWiper.nIntermitTime[3] = 4000;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800595e:	f8a3 2512 	strh.w	r2, [r3, #1298]	; 0x512
  pConfig->stWiper.nIntermitTime[4] = 5000;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f241 3288 	movw	r2, #5000	; 0x1388
 8005968:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
  pConfig->stWiper.nIntermitTime[5] = 6000;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f241 7270 	movw	r2, #6000	; 0x1770
 8005972:	f8a3 2516 	strh.w	r2, [r3, #1302]	; 0x516

  //Flasher
  pConfig->stFlasher[0].nEnabled = 1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
  pConfig->stFlasher[0].nInput = 7;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2207      	movs	r2, #7
 8005982:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
  pConfig->stFlasher[0].nFlashOnTime = 500;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800598c:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
  pConfig->stFlasher[0].nFlashOffTime = 500;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005996:	f8a3 2522 	strh.w	r2, [r3, #1314]	; 0x522
  pConfig->stFlasher[0].nSingleCycle = 0;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
  pConfig->stFlasher[0].nOutput = 10;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	220a      	movs	r2, #10
 80059a6:	f883 2525 	strb.w	r2, [r3, #1317]	; 0x525

  pConfig->stFlasher[1].nEnabled = 1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
  pConfig->stFlasher[1].nInput = 8;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2208      	movs	r2, #8
 80059b6:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
  pConfig->stFlasher[1].nFlashOnTime = 250;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	22fa      	movs	r2, #250	; 0xfa
 80059be:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
  pConfig->stFlasher[1].nFlashOffTime = 250;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	22fa      	movs	r2, #250	; 0xfa
 80059c6:	f8a3 253a 	strh.w	r2, [r3, #1338]	; 0x53a
  pConfig->stFlasher[1].nSingleCycle = 0;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
  pConfig->stFlasher[1].nOutput = 11;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	220b      	movs	r2, #11
 80059d6:	f883 253d 	strb.w	r2, [r3, #1341]	; 0x53d

  pConfig->stFlasher[2].nEnabled = 0;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
  pConfig->stFlasher[2].nInput = 0;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
  pConfig->stFlasher[2].nFlashOnTime = 0;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8a3 2550 	strh.w	r2, [r3, #1360]	; 0x550
  pConfig->stFlasher[2].nFlashOffTime = 0;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8a3 2552 	strh.w	r2, [r3, #1362]	; 0x552
  pConfig->stFlasher[2].nSingleCycle = 0;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
  pConfig->stFlasher[2].nOutput = 0;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2555 	strb.w	r2, [r3, #1365]	; 0x555

  pConfig->stFlasher[3].nEnabled = 0;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
  pConfig->stFlasher[3].nInput = 0;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
  pConfig->stFlasher[3].nFlashOnTime = 0;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f8a3 2568 	strh.w	r2, [r3, #1384]	; 0x568
  pConfig->stFlasher[3].nFlashOffTime = 0;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8a3 256a 	strh.w	r2, [r3, #1386]	; 0x56a
  pConfig->stFlasher[3].nSingleCycle = 0;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 256c 	strb.w	r2, [r3, #1388]	; 0x56c
  pConfig->stFlasher[3].nOutput = 0;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 256d 	strb.w	r2, [r3, #1389]	; 0x56d

  //Starter
  pConfig->stStarter.nEnabled = 0;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
  pConfig->stStarter.nInput = 8;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2208      	movs	r2, #8
 8005a46:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
  pConfig->stStarter.nDisableOut[0] = 0;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
  pConfig->stStarter.nDisableOut[1] = 1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
  pConfig->stStarter.nDisableOut[2] = 0;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
  pConfig->stStarter.nDisableOut[3] = 0;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
  pConfig->stStarter.nDisableOut[4] = 0;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
  pConfig->stStarter.nDisableOut[5] = 0;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
  pConfig->stStarter.nDisableOut[6] = 0;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2586 	strb.w	r2, [r3, #1414]	; 0x586
  pConfig->stStarter.nDisableOut[7] = 0;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2587 	strb.w	r2, [r3, #1415]	; 0x587
  pConfig->stStarter.nDisableOut[8] = 0;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2588 	strb.w	r2, [r3, #1416]	; 0x588
  pConfig->stStarter.nDisableOut[9] = 0;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
  pConfig->stStarter.nDisableOut[10] = 0;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
  pConfig->stStarter.nDisableOut[11] = 0;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 258b 	strb.w	r2, [r3, #1419]	; 0x58b

  //CAN Input
  pConfig->stCanInput[0].nEnabled = 1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 258c 	strb.w	r2, [r3, #1420]	; 0x58c
  pConfig->stCanInput[0].nId = 1602;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f240 6242 	movw	r2, #1602	; 0x642
 8005ab8:	f8a3 258e 	strh.w	r2, [r3, #1422]	; 0x58e
  pConfig->stCanInput[0].nLowByte = 0;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8a3 2590 	strh.w	r2, [r3, #1424]	; 0x590
  pConfig->stCanInput[0].nHighByte = 0;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8a3 2592 	strh.w	r2, [r3, #1426]	; 0x592
  pConfig->stCanInput[0].eOperator = OPER_BITWISE_AND;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2203      	movs	r2, #3
 8005ad0:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
  pConfig->stCanInput[0].nOnVal = 0xF;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	220f      	movs	r2, #15
 8005ad8:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
  pConfig->stCanInput[0].eMode = MODE_NUM;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598

  pConfig->stCanInput[1].nEnabled = 1;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
  pConfig->stCanInput[1].nId = 1602;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f240 6242 	movw	r2, #1602	; 0x642
 8005af2:	f8a3 25aa 	strh.w	r2, [r3, #1450]	; 0x5aa
  pConfig->stCanInput[1].nLowByte = 4;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2204      	movs	r2, #4
 8005afa:	f8a3 25ac 	strh.w	r2, [r3, #1452]	; 0x5ac
  pConfig->stCanInput[1].nHighByte = 0;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8a3 25ae 	strh.w	r2, [r3, #1454]	; 0x5ae
  pConfig->stCanInput[1].eOperator = OPER_BITWISE_AND;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2203      	movs	r2, #3
 8005b0a:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
  pConfig->stCanInput[1].nOnVal = 0x1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f8a3 25b2 	strh.w	r2, [r3, #1458]	; 0x5b2
  pConfig->stCanInput[1].eMode = MODE_MOMENTARY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4

  pConfig->stCanInput[2].nEnabled = 1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 25c4 	strb.w	r2, [r3, #1476]	; 0x5c4
  pConfig->stCanInput[2].nId = 1602;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f240 6242 	movw	r2, #1602	; 0x642
 8005b2c:	f8a3 25c6 	strh.w	r2, [r3, #1478]	; 0x5c6
  pConfig->stCanInput[2].nLowByte = 4;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2204      	movs	r2, #4
 8005b34:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
  pConfig->stCanInput[2].nHighByte = 0;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8a3 25ca 	strh.w	r2, [r3, #1482]	; 0x5ca
  pConfig->stCanInput[2].eOperator = OPER_BITWISE_AND;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2203      	movs	r2, #3
 8005b44:	f883 25cc 	strb.w	r2, [r3, #1484]	; 0x5cc
  pConfig->stCanInput[2].nOnVal = 0x2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f8a3 25ce 	strh.w	r2, [r3, #1486]	; 0x5ce
  pConfig->stCanInput[2].eMode = MODE_MOMENTARY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0

  pConfig->stCanInput[3].nEnabled = 1;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
  pConfig->stCanInput[3].nId = 1602;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f240 6242 	movw	r2, #1602	; 0x642
 8005b66:	f8a3 25e2 	strh.w	r2, [r3, #1506]	; 0x5e2
  pConfig->stCanInput[3].nLowByte = 4;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	f8a3 25e4 	strh.w	r2, [r3, #1508]	; 0x5e4
  pConfig->stCanInput[3].nHighByte = 0;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8a3 25e6 	strh.w	r2, [r3, #1510]	; 0x5e6
  pConfig->stCanInput[3].eOperator = OPER_BITWISE_AND;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2203      	movs	r2, #3
 8005b7e:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
  pConfig->stCanInput[3].nOnVal = 0x4;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2204      	movs	r2, #4
 8005b86:	f8a3 25ea 	strh.w	r2, [r3, #1514]	; 0x5ea
  pConfig->stCanInput[3].eMode = MODE_MOMENTARY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec

  pConfig->stCanInput[4].nEnabled = 1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
  pConfig->stCanInput[4].nId = 1602;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f240 6242 	movw	r2, #1602	; 0x642
 8005ba0:	f8a3 25fe 	strh.w	r2, [r3, #1534]	; 0x5fe
  pConfig->stCanInput[4].nLowByte = 4;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
  pConfig->stCanInput[4].nHighByte = 0;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
  pConfig->stCanInput[4].eOperator = OPER_BITWISE_AND;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
  pConfig->stCanInput[4].nOnVal = 0x8;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2208      	movs	r2, #8
 8005bc0:	f8a3 2606 	strh.w	r2, [r3, #1542]	; 0x606
  pConfig->stCanInput[4].eMode = MODE_MOMENTARY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608

  pConfig->stCanInput[5].nEnabled = 1;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
  pConfig->stCanInput[5].nId = 1602;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f240 6242 	movw	r2, #1602	; 0x642
 8005bda:	f8a3 261a 	strh.w	r2, [r3, #1562]	; 0x61a
  pConfig->stCanInput[5].nLowByte = 4;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2204      	movs	r2, #4
 8005be2:	f8a3 261c 	strh.w	r2, [r3, #1564]	; 0x61c
  pConfig->stCanInput[5].nHighByte = 0;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8a3 261e 	strh.w	r2, [r3, #1566]	; 0x61e
  pConfig->stCanInput[5].eOperator = OPER_BITWISE_AND;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
  pConfig->stCanInput[5].nOnVal = 0x10;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2210      	movs	r2, #16
 8005bfa:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
  pConfig->stCanInput[5].eMode = MODE_LATCHING;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

  pConfig->stCanInput[6].nEnabled = 1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
  pConfig->stCanInput[6].nId = 1602;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f240 6242 	movw	r2, #1602	; 0x642
 8005c14:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
  pConfig->stCanInput[6].nLowByte = 4;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
  pConfig->stCanInput[6].nHighByte = 0;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
  pConfig->stCanInput[6].eOperator = OPER_BITWISE_AND;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
  pConfig->stCanInput[6].nOnVal = 0x20;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f8a3 263e 	strh.w	r2, [r3, #1598]	; 0x63e
  pConfig->stCanInput[6].eMode = MODE_LATCHING;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

  pConfig->stCanInput[7].nEnabled = 1;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2650 	strb.w	r2, [r3, #1616]	; 0x650
  pConfig->stCanInput[7].nId = 1602;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f240 6242 	movw	r2, #1602	; 0x642
 8005c4e:	f8a3 2652 	strh.w	r2, [r3, #1618]	; 0x652
  pConfig->stCanInput[7].nLowByte = 4;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2204      	movs	r2, #4
 8005c56:	f8a3 2654 	strh.w	r2, [r3, #1620]	; 0x654
  pConfig->stCanInput[7].nHighByte = 0;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8a3 2656 	strh.w	r2, [r3, #1622]	; 0x656
  pConfig->stCanInput[7].eOperator = OPER_BITWISE_AND;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2203      	movs	r2, #3
 8005c66:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
  pConfig->stCanInput[7].nOnVal = 0x40;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2240      	movs	r2, #64	; 0x40
 8005c6e:	f8a3 265a 	strh.w	r2, [r3, #1626]	; 0x65a
  pConfig->stCanInput[7].eMode = MODE_MOMENTARY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c

  pConfig->stCanInput[8].nEnabled = 1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
  pConfig->stCanInput[8].nId = 1602;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f240 6242 	movw	r2, #1602	; 0x642
 8005c88:	f8a3 266e 	strh.w	r2, [r3, #1646]	; 0x66e
  pConfig->stCanInput[8].nLowByte = 4;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2204      	movs	r2, #4
 8005c90:	f8a3 2670 	strh.w	r2, [r3, #1648]	; 0x670
  pConfig->stCanInput[8].nHighByte = 0;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8a3 2672 	strh.w	r2, [r3, #1650]	; 0x672
  pConfig->stCanInput[8].eOperator = OPER_BITWISE_AND;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
  pConfig->stCanInput[8].nOnVal = 0x80;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2280      	movs	r2, #128	; 0x80
 8005ca8:	f8a3 2676 	strh.w	r2, [r3, #1654]	; 0x676
  pConfig->stCanInput[8].eMode = MODE_LATCHING;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678

  pConfig->stCanInput[9].nEnabled = 1;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
  pConfig->stCanInput[9].nId = 1620;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f240 6254 	movw	r2, #1620	; 0x654
 8005cc2:	f8a3 268a 	strh.w	r2, [r3, #1674]	; 0x68a
  pConfig->stCanInput[9].nLowByte = 4;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2204      	movs	r2, #4
 8005cca:	f8a3 268c 	strh.w	r2, [r3, #1676]	; 0x68c
  pConfig->stCanInput[9].nHighByte = 5;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2205      	movs	r2, #5
 8005cd2:	f8a3 268e 	strh.w	r2, [r3, #1678]	; 0x68e
  pConfig->stCanInput[9].eOperator = OPER_EQUAL;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
  pConfig->stCanInput[9].nOnVal = 1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f8a3 2692 	strh.w	r2, [r3, #1682]	; 0x692
  pConfig->stCanInput[9].eMode = MODE_NUM;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694

  pConfig->stCanInput[10].nEnabled = 1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
  pConfig->stCanInput[10].nId = 1620;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f240 6254 	movw	r2, #1620	; 0x654
 8005cfc:	f8a3 26a6 	strh.w	r2, [r3, #1702]	; 0x6a6
  pConfig->stCanInput[10].nLowByte = 2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f8a3 26a8 	strh.w	r2, [r3, #1704]	; 0x6a8
  pConfig->stCanInput[10].nHighByte = 3;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	f8a3 26aa 	strh.w	r2, [r3, #1706]	; 0x6aa
  pConfig->stCanInput[10].eOperator = OPER_EQUAL;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
  pConfig->stCanInput[10].nOnVal = 1;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f8a3 26ae 	strh.w	r2, [r3, #1710]	; 0x6ae
  pConfig->stCanInput[10].eMode = MODE_NUM;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0

  pConfig->stCanInput[11].nEnabled = 1;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 26c0 	strb.w	r2, [r3, #1728]	; 0x6c0
  pConfig->stCanInput[11].nId = 1620;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f240 6254 	movw	r2, #1620	; 0x654
 8005d36:	f8a3 26c2 	strh.w	r2, [r3, #1730]	; 0x6c2
  pConfig->stCanInput[11].nLowByte = 0;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f8a3 26c4 	strh.w	r2, [r3, #1732]	; 0x6c4
  pConfig->stCanInput[11].nHighByte = 1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f8a3 26c6 	strh.w	r2, [r3, #1734]	; 0x6c6
  pConfig->stCanInput[11].eOperator = OPER_EQUAL;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 26c8 	strb.w	r2, [r3, #1736]	; 0x6c8
  pConfig->stCanInput[11].nOnVal = 1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f8a3 26ca 	strh.w	r2, [r3, #1738]	; 0x6ca
  pConfig->stCanInput[11].eMode = MODE_NUM;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc

  pConfig->stCanInput[12].nEnabled = 1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
  pConfig->stCanInput[12].nId = 1620;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f240 6254 	movw	r2, #1620	; 0x654
 8005d70:	f8a3 26de 	strh.w	r2, [r3, #1758]	; 0x6de
  pConfig->stCanInput[12].nLowByte = 6;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2206      	movs	r2, #6
 8005d78:	f8a3 26e0 	strh.w	r2, [r3, #1760]	; 0x6e0
  pConfig->stCanInput[12].nHighByte = 7;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2207      	movs	r2, #7
 8005d80:	f8a3 26e2 	strh.w	r2, [r3, #1762]	; 0x6e2
  pConfig->stCanInput[12].eOperator = OPER_EQUAL;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
  pConfig->stCanInput[12].nOnVal = 1;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
  pConfig->stCanInput[12].eMode = MODE_NUM;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8

  pConfig->stCanInput[13].nEnabled = 1;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
  pConfig->stCanInput[13].nId = 1621;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f240 6255 	movw	r2, #1621	; 0x655
 8005daa:	f8a3 26fa 	strh.w	r2, [r3, #1786]	; 0x6fa
  pConfig->stCanInput[13].nLowByte = 0;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f8a3 26fc 	strh.w	r2, [r3, #1788]	; 0x6fc
  pConfig->stCanInput[13].nHighByte = 1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f8a3 26fe 	strh.w	r2, [r3, #1790]	; 0x6fe
  pConfig->stCanInput[13].eOperator = OPER_EQUAL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
  pConfig->stCanInput[13].nOnVal = 1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f8a3 2702 	strh.w	r2, [r3, #1794]	; 0x702
  pConfig->stCanInput[13].eMode = MODE_NUM;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704

  pConfig->stCanInput[14].nEnabled = 1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
  pConfig->stCanInput[14].nId = 1621;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f240 6255 	movw	r2, #1621	; 0x655
 8005de4:	f8a3 2716 	strh.w	r2, [r3, #1814]	; 0x716
  pConfig->stCanInput[14].nLowByte = 2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f8a3 2718 	strh.w	r2, [r3, #1816]	; 0x718
  pConfig->stCanInput[14].nHighByte = 3;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2203      	movs	r2, #3
 8005df4:	f8a3 271a 	strh.w	r2, [r3, #1818]	; 0x71a
  pConfig->stCanInput[14].eOperator = OPER_EQUAL;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
  pConfig->stCanInput[14].nOnVal = 1;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f8a3 271e 	strh.w	r2, [r3, #1822]	; 0x71e
  pConfig->stCanInput[14].eMode = MODE_NUM;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720

  pConfig->stCanInput[15].nEnabled = 1;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
  pConfig->stCanInput[15].nId = 1622;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f240 6256 	movw	r2, #1622	; 0x656
 8005e1e:	f8a3 2732 	strh.w	r2, [r3, #1842]	; 0x732
  pConfig->stCanInput[15].nLowByte = 0;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
  pConfig->stCanInput[15].nHighByte = 0;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f8a3 2736 	strh.w	r2, [r3, #1846]	; 0x736
  pConfig->stCanInput[15].eOperator = OPER_BITWISE_AND;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2203      	movs	r2, #3
 8005e36:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
  pConfig->stCanInput[15].nOnVal = 0x01;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f8a3 273a 	strh.w	r2, [r3, #1850]	; 0x73a
  pConfig->stCanInput[15].eMode = MODE_MOMENTARY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c

  pConfig->stCanInput[16].nEnabled = 1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
  pConfig->stCanInput[16].nId = 1622;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f240 6256 	movw	r2, #1622	; 0x656
 8005e58:	f8a3 274e 	strh.w	r2, [r3, #1870]	; 0x74e
  pConfig->stCanInput[16].nLowByte = 0;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8a3 2750 	strh.w	r2, [r3, #1872]	; 0x750
  pConfig->stCanInput[16].nHighByte = 0;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8a3 2752 	strh.w	r2, [r3, #1874]	; 0x752
  pConfig->stCanInput[16].eOperator = OPER_BITWISE_AND;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2203      	movs	r2, #3
 8005e70:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
  pConfig->stCanInput[16].nOnVal = 0x02;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
  pConfig->stCanInput[16].eMode = MODE_MOMENTARY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758

  pConfig->stCanInput[17].nEnabled = 1;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
  pConfig->stCanInput[17].nId = 1622;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f240 6256 	movw	r2, #1622	; 0x656
 8005e92:	f8a3 276a 	strh.w	r2, [r3, #1898]	; 0x76a
  pConfig->stCanInput[17].nLowByte = 0;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f8a3 276c 	strh.w	r2, [r3, #1900]	; 0x76c
  pConfig->stCanInput[17].nHighByte = 0;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8a3 276e 	strh.w	r2, [r3, #1902]	; 0x76e
  pConfig->stCanInput[17].eOperator = OPER_BITWISE_AND;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
  pConfig->stCanInput[17].nOnVal = 0x04;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2204      	movs	r2, #4
 8005eb2:	f8a3 2772 	strh.w	r2, [r3, #1906]	; 0x772
  pConfig->stCanInput[17].eMode = MODE_MOMENTARY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774

  pConfig->stCanInput[18].nEnabled = 1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
  pConfig->stCanInput[18].nId = 1622;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f240 6256 	movw	r2, #1622	; 0x656
 8005ecc:	f8a3 2786 	strh.w	r2, [r3, #1926]	; 0x786
  pConfig->stCanInput[18].nLowByte = 0;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8a3 2788 	strh.w	r2, [r3, #1928]	; 0x788
  pConfig->stCanInput[18].nHighByte = 0;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8a3 278a 	strh.w	r2, [r3, #1930]	; 0x78a
  pConfig->stCanInput[18].eOperator = OPER_BITWISE_AND;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
  pConfig->stCanInput[18].nOnVal = 0x08;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2208      	movs	r2, #8
 8005eec:	f8a3 278e 	strh.w	r2, [r3, #1934]	; 0x78e
  pConfig->stCanInput[18].eMode = MODE_MOMENTARY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790

  pConfig->stCanInput[19].nEnabled = 1;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
  pConfig->stCanInput[19].nId = 1622;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f240 6256 	movw	r2, #1622	; 0x656
 8005f06:	f8a3 27a2 	strh.w	r2, [r3, #1954]	; 0x7a2
  pConfig->stCanInput[19].nLowByte = 0;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8a3 27a4 	strh.w	r2, [r3, #1956]	; 0x7a4
  pConfig->stCanInput[19].nHighByte = 0;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f8a3 27a6 	strh.w	r2, [r3, #1958]	; 0x7a6
  pConfig->stCanInput[19].eOperator = OPER_BITWISE_AND;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
  pConfig->stCanInput[19].nOnVal = 0x10;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2210      	movs	r2, #16
 8005f26:	f8a3 27aa 	strh.w	r2, [r3, #1962]	; 0x7aa
  pConfig->stCanInput[19].eMode = MODE_MOMENTARY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 27ac 	strb.w	r2, [r3, #1964]	; 0x7ac

  pConfig->stCanInput[20].nEnabled = 1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 27bc 	strb.w	r2, [r3, #1980]	; 0x7bc
  pConfig->stCanInput[20].nId = 1622;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f240 6256 	movw	r2, #1622	; 0x656
 8005f40:	f8a3 27be 	strh.w	r2, [r3, #1982]	; 0x7be
  pConfig->stCanInput[20].nLowByte = 0;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8a3 27c0 	strh.w	r2, [r3, #1984]	; 0x7c0
  pConfig->stCanInput[20].nHighByte = 0;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8a3 27c2 	strh.w	r2, [r3, #1986]	; 0x7c2
  pConfig->stCanInput[20].eOperator = OPER_BITWISE_AND;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2203      	movs	r2, #3
 8005f58:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
  pConfig->stCanInput[20].nOnVal = 0x20;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f8a3 27c6 	strh.w	r2, [r3, #1990]	; 0x7c6
  pConfig->stCanInput[20].eMode = MODE_MOMENTARY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8

  pConfig->stCanInput[21].nEnabled = 1;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
  pConfig->stCanInput[21].nId = 1622;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f240 6256 	movw	r2, #1622	; 0x656
 8005f7a:	f8a3 27da 	strh.w	r2, [r3, #2010]	; 0x7da
  pConfig->stCanInput[21].nLowByte = 0;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f8a3 27dc 	strh.w	r2, [r3, #2012]	; 0x7dc
  pConfig->stCanInput[21].nHighByte = 0;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8a3 27de 	strh.w	r2, [r3, #2014]	; 0x7de
  pConfig->stCanInput[21].eOperator = OPER_BITWISE_AND;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2203      	movs	r2, #3
 8005f92:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
  pConfig->stCanInput[21].nOnVal = 0x40;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2240      	movs	r2, #64	; 0x40
 8005f9a:	f8a3 27e2 	strh.w	r2, [r3, #2018]	; 0x7e2
  pConfig->stCanInput[21].eMode = MODE_MOMENTARY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 27e4 	strb.w	r2, [r3, #2020]	; 0x7e4

  pConfig->stCanInput[22].nEnabled = 1;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
  pConfig->stCanInput[22].nId = 1622;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f240 6256 	movw	r2, #1622	; 0x656
 8005fb4:	f8a3 27f6 	strh.w	r2, [r3, #2038]	; 0x7f6
  pConfig->stCanInput[22].nLowByte = 0;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8a3 27f8 	strh.w	r2, [r3, #2040]	; 0x7f8
  pConfig->stCanInput[22].nHighByte = 0;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8a3 27fa 	strh.w	r2, [r3, #2042]	; 0x7fa
  pConfig->stCanInput[22].eOperator = OPER_BITWISE_AND;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2203      	movs	r2, #3
 8005fcc:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
  pConfig->stCanInput[22].nOnVal = 0x80;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2280      	movs	r2, #128	; 0x80
 8005fd4:	f8a3 27fe 	strh.w	r2, [r3, #2046]	; 0x7fe
  pConfig->stCanInput[22].eMode = MODE_MOMENTARY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800

  pConfig->stCanInput[23].nEnabled = 1;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
  pConfig->stCanInput[23].nId = 1622;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f240 6256 	movw	r2, #1622	; 0x656
 8005fee:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
  pConfig->stCanInput[23].nLowByte = 1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f8a3 2814 	strh.w	r2, [r3, #2068]	; 0x814
  pConfig->stCanInput[23].nHighByte = 0;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f8a3 2816 	strh.w	r2, [r3, #2070]	; 0x816
  pConfig->stCanInput[23].eOperator = OPER_BITWISE_AND;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2203      	movs	r2, #3
 8006006:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
  pConfig->stCanInput[23].nOnVal = 0x01;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f8a3 281a 	strh.w	r2, [r3, #2074]	; 0x81a
  pConfig->stCanInput[23].eMode = MODE_MOMENTARY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c

  pConfig->stCanInput[24].nEnabled = 1;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 282c 	strb.w	r2, [r3, #2092]	; 0x82c
  pConfig->stCanInput[24].nId = 1622;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f240 6256 	movw	r2, #1622	; 0x656
 8006028:	f8a3 282e 	strh.w	r2, [r3, #2094]	; 0x82e
  pConfig->stCanInput[24].nLowByte = 1;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f8a3 2830 	strh.w	r2, [r3, #2096]	; 0x830
  pConfig->stCanInput[24].nHighByte = 0;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8a3 2832 	strh.w	r2, [r3, #2098]	; 0x832
  pConfig->stCanInput[24].eOperator = OPER_BITWISE_AND;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2203      	movs	r2, #3
 8006040:	f883 2834 	strb.w	r2, [r3, #2100]	; 0x834
  pConfig->stCanInput[24].nOnVal = 0x02;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f8a3 2836 	strh.w	r2, [r3, #2102]	; 0x836
  pConfig->stCanInput[24].eMode = MODE_MOMENTARY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838

  pConfig->stCanInput[25].nEnabled = 0;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
  pConfig->stCanInput[25].nId = 0;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f8a3 284a 	strh.w	r2, [r3, #2122]	; 0x84a
  pConfig->stCanInput[25].nLowByte = 0;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f8a3 284c 	strh.w	r2, [r3, #2124]	; 0x84c
  pConfig->stCanInput[25].nHighByte = 0;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f8a3 284e 	strh.w	r2, [r3, #2126]	; 0x84e
  pConfig->stCanInput[25].eOperator = OPER_EQUAL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
  pConfig->stCanInput[25].nOnVal = 0;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f8a3 2852 	strh.w	r2, [r3, #2130]	; 0x852
  pConfig->stCanInput[25].eMode = MODE_MOMENTARY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854

  pConfig->stCanInput[26].nEnabled = 0;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
  pConfig->stCanInput[26].nId = 0;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f8a3 2866 	strh.w	r2, [r3, #2150]	; 0x866
  pConfig->stCanInput[26].nLowByte = 0;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8a3 2868 	strh.w	r2, [r3, #2152]	; 0x868
  pConfig->stCanInput[26].nHighByte = 0;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8a3 286a 	strh.w	r2, [r3, #2154]	; 0x86a
  pConfig->stCanInput[26].eOperator = OPER_EQUAL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 286c 	strb.w	r2, [r3, #2156]	; 0x86c
  pConfig->stCanInput[26].nOnVal = 0;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f8a3 286e 	strh.w	r2, [r3, #2158]	; 0x86e
  pConfig->stCanInput[26].eMode = MODE_MOMENTARY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2870 	strb.w	r2, [r3, #2160]	; 0x870

  pConfig->stCanInput[27].nEnabled = 0;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
  pConfig->stCanInput[27].nId = 0;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8a3 2882 	strh.w	r2, [r3, #2178]	; 0x882
  pConfig->stCanInput[27].nLowByte = 0;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8a3 2884 	strh.w	r2, [r3, #2180]	; 0x884
  pConfig->stCanInput[27].nHighByte = 0;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8a3 2886 	strh.w	r2, [r3, #2182]	; 0x886
  pConfig->stCanInput[27].eOperator = OPER_EQUAL;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
  pConfig->stCanInput[27].nOnVal = 0;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8a3 288a 	strh.w	r2, [r3, #2186]	; 0x88a
  pConfig->stCanInput[27].eMode = MODE_MOMENTARY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c

  pConfig->stCanInput[28].nEnabled = 0;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
  pConfig->stCanInput[28].nId = 0;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f8a3 289e 	strh.w	r2, [r3, #2206]	; 0x89e
  pConfig->stCanInput[28].nLowByte = 0;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8a3 28a0 	strh.w	r2, [r3, #2208]	; 0x8a0
  pConfig->stCanInput[28].nHighByte = 0;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f8a3 28a2 	strh.w	r2, [r3, #2210]	; 0x8a2
  pConfig->stCanInput[28].eOperator = OPER_EQUAL;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
  pConfig->stCanInput[28].nOnVal = 0;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f8a3 28a6 	strh.w	r2, [r3, #2214]	; 0x8a6
  pConfig->stCanInput[28].eMode = MODE_MOMENTARY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 28a8 	strb.w	r2, [r3, #2216]	; 0x8a8

  pConfig->stCanInput[29].nEnabled = 0;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
  pConfig->stCanInput[29].nId = 0;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8a3 28ba 	strh.w	r2, [r3, #2234]	; 0x8ba
  pConfig->stCanInput[29].nLowByte = 0;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f8a3 28bc 	strh.w	r2, [r3, #2236]	; 0x8bc
  pConfig->stCanInput[29].nHighByte = 0;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f8a3 28be 	strh.w	r2, [r3, #2238]	; 0x8be
  pConfig->stCanInput[29].eOperator = OPER_EQUAL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 28c0 	strb.w	r2, [r3, #2240]	; 0x8c0
  pConfig->stCanInput[29].nOnVal = 0;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f8a3 28c2 	strh.w	r2, [r3, #2242]	; 0x8c2
  pConfig->stCanInput[29].eMode = MODE_MOMENTARY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4

  //CAN Output
  pConfig->stCanOutput.nEnabled = 0;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
  pConfig->stCanOutput.nBaseId = 2000;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800617a:	f8a3 28d6 	strh.w	r2, [r3, #2262]	; 0x8d6
  pConfig->stCanOutput.nUpdateTime = 50;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2232      	movs	r2, #50	; 0x32
 8006182:	f8a3 28d8 	strh.w	r2, [r3, #2264]	; 0x8d8
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <EvaluateInput>:
 */

#include "pdm_input.h"

void EvaluateInput(PdmConfig_Input_t *pIn, uint16_t* pResult)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b086      	sub	sp, #24
 8006196:	af02      	add	r7, sp, #8
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  if(!pIn->nEnabled)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d018      	beq.n	80061d6 <EvaluateInput+0x44>
    return;

  uint16_t nLogicResult;

  nLogicResult = *pIn->pInput > pIn->nOnLevel;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8b1b      	ldrh	r3, [r3, #24]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	bf8c      	ite	hi
 80061b4:	2301      	movhi	r3, #1
 80061b6:	2300      	movls	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	81fb      	strh	r3, [r7, #14]

  CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nLogicResult, pResult, pIn->nDebounceTime);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f103 000c 	add.w	r0, r3, #12
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	7a19      	ldrb	r1, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	8b5b      	ldrh	r3, [r3, #26]
 80061ca:	89fa      	ldrh	r2, [r7, #14]
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	f001 fc30 	bl	8007a34 <CheckPushbutton>
 80061d4:	e000      	b.n	80061d8 <EvaluateInput+0x46>
    return;
 80061d6:	bf00      	nop
}
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <EvaluateStarter>:
 */

#include "starter.h"

void EvaluateStarter(PdmConfig_Starter_t *pStarter, uint8_t nIndex, uint16_t* pResult)
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	460b      	mov	r3, r1
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	72fb      	strb	r3, [r7, #11]
    if(!pStarter->nEnabled)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d103      	bne.n	80061fc <EvaluateStarter+0x1e>
      *pResult = 1;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	801a      	strh	r2, [r3, #0]
    else
      *pResult = !(pStarter->nDisableOut[nIndex] && *pStarter->pInput);
}
 80061fa:	e010      	b.n	800621e <EvaluateStarter+0x40>
      *pResult = !(pStarter->nDisableOut[nIndex] && *pStarter->pInput);
 80061fc:	7afb      	ldrb	r3, [r7, #11]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	7a1b      	ldrb	r3, [r3, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d004      	beq.n	8006212 <EvaluateStarter+0x34>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <EvaluateStarter+0x38>
 8006212:	2301      	movs	r3, #1
 8006214:	e000      	b.n	8006218 <EvaluateStarter+0x3a>
 8006216:	2300      	movs	r3, #0
 8006218:	b29a      	uxth	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	801a      	strh	r2, [r3, #0]
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006232:	4b11      	ldr	r3, [pc, #68]	; (8006278 <HAL_MspInit+0x4c>)
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	4a10      	ldr	r2, [pc, #64]	; (8006278 <HAL_MspInit+0x4c>)
 8006238:	f043 0301 	orr.w	r3, r3, #1
 800623c:	6193      	str	r3, [r2, #24]
 800623e:	4b0e      	ldr	r3, [pc, #56]	; (8006278 <HAL_MspInit+0x4c>)
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	607b      	str	r3, [r7, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800624a:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <HAL_MspInit+0x4c>)
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	4a0a      	ldr	r2, [pc, #40]	; (8006278 <HAL_MspInit+0x4c>)
 8006250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006254:	61d3      	str	r3, [r2, #28]
 8006256:	4b08      	ldr	r3, [pc, #32]	; (8006278 <HAL_MspInit+0x4c>)
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006262:	2200      	movs	r2, #0
 8006264:	210f      	movs	r1, #15
 8006266:	f06f 0001 	mvn.w	r0, #1
 800626a:	f003 fbbb 	bl	80099e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	40021000 	.word	0x40021000

0800627c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	; 0x28
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006284:	f107 0314 	add.w	r3, r7, #20
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	605a      	str	r2, [r3, #4]
 800628e:	609a      	str	r2, [r3, #8]
 8006290:	60da      	str	r2, [r3, #12]
 8006292:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800629c:	d134      	bne.n	8006308 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800629e:	4b45      	ldr	r3, [pc, #276]	; (80063b4 <HAL_ADC_MspInit+0x138>)
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	4a44      	ldr	r2, [pc, #272]	; (80063b4 <HAL_ADC_MspInit+0x138>)
 80062a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a8:	6153      	str	r3, [r2, #20]
 80062aa:	4b42      	ldr	r3, [pc, #264]	; (80063b4 <HAL_ADC_MspInit+0x138>)
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b2:	613b      	str	r3, [r7, #16]
 80062b4:	693b      	ldr	r3, [r7, #16]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80062b6:	4b40      	ldr	r3, [pc, #256]	; (80063b8 <HAL_ADC_MspInit+0x13c>)
 80062b8:	4a40      	ldr	r2, [pc, #256]	; (80063bc <HAL_ADC_MspInit+0x140>)
 80062ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062bc:	4b3e      	ldr	r3, [pc, #248]	; (80063b8 <HAL_ADC_MspInit+0x13c>)
 80062be:	2200      	movs	r2, #0
 80062c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80062c2:	4b3d      	ldr	r3, [pc, #244]	; (80063b8 <HAL_ADC_MspInit+0x13c>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80062c8:	4b3b      	ldr	r3, [pc, #236]	; (80063b8 <HAL_ADC_MspInit+0x13c>)
 80062ca:	2280      	movs	r2, #128	; 0x80
 80062cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80062ce:	4b3a      	ldr	r3, [pc, #232]	; (80063b8 <HAL_ADC_MspInit+0x13c>)
 80062d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80062d6:	4b38      	ldr	r3, [pc, #224]	; (80063b8 <HAL_ADC_MspInit+0x13c>)
 80062d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80062de:	4b36      	ldr	r3, [pc, #216]	; (80063b8 <HAL_ADC_MspInit+0x13c>)
 80062e0:	2220      	movs	r2, #32
 80062e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80062e4:	4b34      	ldr	r3, [pc, #208]	; (80063b8 <HAL_ADC_MspInit+0x13c>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80062ea:	4833      	ldr	r0, [pc, #204]	; (80063b8 <HAL_ADC_MspInit+0x13c>)
 80062ec:	f003 fc8e 	bl	8009c0c <HAL_DMA_Init>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 80062f6:	f7fd fa31 	bl	800375c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a2e      	ldr	r2, [pc, #184]	; (80063b8 <HAL_ADC_MspInit+0x13c>)
 80062fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006300:	4a2d      	ldr	r2, [pc, #180]	; (80063b8 <HAL_ADC_MspInit+0x13c>)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8006306:	e051      	b.n	80063ac <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC4)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a2c      	ldr	r2, [pc, #176]	; (80063c0 <HAL_ADC_MspInit+0x144>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d14c      	bne.n	80063ac <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8006312:	4b28      	ldr	r3, [pc, #160]	; (80063b4 <HAL_ADC_MspInit+0x138>)
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	4a27      	ldr	r2, [pc, #156]	; (80063b4 <HAL_ADC_MspInit+0x138>)
 8006318:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800631c:	6153      	str	r3, [r2, #20]
 800631e:	4b25      	ldr	r3, [pc, #148]	; (80063b4 <HAL_ADC_MspInit+0x138>)
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800632a:	4b22      	ldr	r3, [pc, #136]	; (80063b4 <HAL_ADC_MspInit+0x138>)
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	4a21      	ldr	r2, [pc, #132]	; (80063b4 <HAL_ADC_MspInit+0x138>)
 8006330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006334:	6153      	str	r3, [r2, #20]
 8006336:	4b1f      	ldr	r3, [pc, #124]	; (80063b4 <HAL_ADC_MspInit+0x138>)
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800633e:	60bb      	str	r3, [r7, #8]
 8006340:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BATT_SENSE_Pin;
 8006342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006348:	2303      	movs	r3, #3
 800634a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800634c:	2300      	movs	r3, #0
 800634e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8006350:	f107 0314 	add.w	r3, r7, #20
 8006354:	4619      	mov	r1, r3
 8006356:	481b      	ldr	r0, [pc, #108]	; (80063c4 <HAL_ADC_MspInit+0x148>)
 8006358:	f003 fe0c 	bl	8009f74 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 800635c:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <HAL_ADC_MspInit+0x14c>)
 800635e:	4a1b      	ldr	r2, [pc, #108]	; (80063cc <HAL_ADC_MspInit+0x150>)
 8006360:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006362:	4b19      	ldr	r3, [pc, #100]	; (80063c8 <HAL_ADC_MspInit+0x14c>)
 8006364:	2200      	movs	r2, #0
 8006366:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8006368:	4b17      	ldr	r3, [pc, #92]	; (80063c8 <HAL_ADC_MspInit+0x14c>)
 800636a:	2200      	movs	r2, #0
 800636c:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800636e:	4b16      	ldr	r3, [pc, #88]	; (80063c8 <HAL_ADC_MspInit+0x14c>)
 8006370:	2280      	movs	r2, #128	; 0x80
 8006372:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006374:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <HAL_ADC_MspInit+0x14c>)
 8006376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800637a:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800637c:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <HAL_ADC_MspInit+0x14c>)
 800637e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006382:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8006384:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <HAL_ADC_MspInit+0x14c>)
 8006386:	2220      	movs	r2, #32
 8006388:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800638a:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <HAL_ADC_MspInit+0x14c>)
 800638c:	2200      	movs	r2, #0
 800638e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8006390:	480d      	ldr	r0, [pc, #52]	; (80063c8 <HAL_ADC_MspInit+0x14c>)
 8006392:	f003 fc3b 	bl	8009c0c <HAL_DMA_Init>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <HAL_ADC_MspInit+0x124>
      Error_Handler();
 800639c:	f7fd f9de 	bl	800375c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a09      	ldr	r2, [pc, #36]	; (80063c8 <HAL_ADC_MspInit+0x14c>)
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38
 80063a6:	4a08      	ldr	r2, [pc, #32]	; (80063c8 <HAL_ADC_MspInit+0x14c>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6253      	str	r3, [r2, #36]	; 0x24
}
 80063ac:	bf00      	nop
 80063ae:	3728      	adds	r7, #40	; 0x28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40021000 	.word	0x40021000
 80063b8:	2000241c 	.word	0x2000241c
 80063bc:	40020008 	.word	0x40020008
 80063c0:	50000500 	.word	0x50000500
 80063c4:	48000400 	.word	0x48000400
 80063c8:	20002460 	.word	0x20002460
 80063cc:	4002041c 	.word	0x4002041c

080063d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	; 0x28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d8:	f107 0314 	add.w	r3, r7, #20
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	609a      	str	r2, [r3, #8]
 80063e4:	60da      	str	r2, [r3, #12]
 80063e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1b      	ldr	r2, [pc, #108]	; (800645c <HAL_CAN_MspInit+0x8c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d130      	bne.n	8006454 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80063f2:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <HAL_CAN_MspInit+0x90>)
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	4a1a      	ldr	r2, [pc, #104]	; (8006460 <HAL_CAN_MspInit+0x90>)
 80063f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063fc:	61d3      	str	r3, [r2, #28]
 80063fe:	4b18      	ldr	r3, [pc, #96]	; (8006460 <HAL_CAN_MspInit+0x90>)
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800640a:	4b15      	ldr	r3, [pc, #84]	; (8006460 <HAL_CAN_MspInit+0x90>)
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	4a14      	ldr	r2, [pc, #80]	; (8006460 <HAL_CAN_MspInit+0x90>)
 8006410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006414:	6153      	str	r3, [r2, #20]
 8006416:	4b12      	ldr	r3, [pc, #72]	; (8006460 <HAL_CAN_MspInit+0x90>)
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006422:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006428:	2302      	movs	r3, #2
 800642a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800642c:	2300      	movs	r3, #0
 800642e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006430:	2303      	movs	r3, #3
 8006432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8006434:	2309      	movs	r3, #9
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006438:	f107 0314 	add.w	r3, r7, #20
 800643c:	4619      	mov	r1, r3
 800643e:	4809      	ldr	r0, [pc, #36]	; (8006464 <HAL_CAN_MspInit+0x94>)
 8006440:	f003 fd98 	bl	8009f74 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8006444:	2200      	movs	r2, #0
 8006446:	2105      	movs	r1, #5
 8006448:	2014      	movs	r0, #20
 800644a:	f003 facb 	bl	80099e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800644e:	2014      	movs	r0, #20
 8006450:	f003 fae4 	bl	8009a1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8006454:	bf00      	nop
 8006456:	3728      	adds	r7, #40	; 0x28
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40006400 	.word	0x40006400
 8006460:	40021000 	.word	0x40021000
 8006464:	48000400 	.word	0x48000400

08006468 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a0a      	ldr	r2, [pc, #40]	; (80064a0 <HAL_CRC_MspInit+0x38>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d10b      	bne.n	8006492 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800647a:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <HAL_CRC_MspInit+0x3c>)
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <HAL_CRC_MspInit+0x3c>)
 8006480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006484:	6153      	str	r3, [r2, #20]
 8006486:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <HAL_CRC_MspInit+0x3c>)
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006492:	bf00      	nop
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40023000 	.word	0x40023000
 80064a4:	40021000 	.word	0x40021000

080064a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08c      	sub	sp, #48	; 0x30
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064b0:	f107 031c 	add.w	r3, r7, #28
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	605a      	str	r2, [r3, #4]
 80064ba:	609a      	str	r2, [r3, #8]
 80064bc:	60da      	str	r2, [r3, #12]
 80064be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a2f      	ldr	r2, [pc, #188]	; (8006584 <HAL_I2C_MspInit+0xdc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d128      	bne.n	800651c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064ca:	4b2f      	ldr	r3, [pc, #188]	; (8006588 <HAL_I2C_MspInit+0xe0>)
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	4a2e      	ldr	r2, [pc, #184]	; (8006588 <HAL_I2C_MspInit+0xe0>)
 80064d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064d4:	6153      	str	r3, [r2, #20]
 80064d6:	4b2c      	ldr	r3, [pc, #176]	; (8006588 <HAL_I2C_MspInit+0xe0>)
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064de:	61bb      	str	r3, [r7, #24]
 80064e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80064e2:	23c0      	movs	r3, #192	; 0xc0
 80064e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064e6:	2312      	movs	r3, #18
 80064e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064ea:	2301      	movs	r3, #1
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80064ee:	2303      	movs	r3, #3
 80064f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80064f2:	2304      	movs	r3, #4
 80064f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064f6:	f107 031c 	add.w	r3, r7, #28
 80064fa:	4619      	mov	r1, r3
 80064fc:	4823      	ldr	r0, [pc, #140]	; (800658c <HAL_I2C_MspInit+0xe4>)
 80064fe:	f003 fd39 	bl	8009f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006502:	4b21      	ldr	r3, [pc, #132]	; (8006588 <HAL_I2C_MspInit+0xe0>)
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	4a20      	ldr	r2, [pc, #128]	; (8006588 <HAL_I2C_MspInit+0xe0>)
 8006508:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800650c:	61d3      	str	r3, [r2, #28]
 800650e:	4b1e      	ldr	r3, [pc, #120]	; (8006588 <HAL_I2C_MspInit+0xe0>)
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800651a:	e02e      	b.n	800657a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1b      	ldr	r2, [pc, #108]	; (8006590 <HAL_I2C_MspInit+0xe8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d129      	bne.n	800657a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006526:	4b18      	ldr	r3, [pc, #96]	; (8006588 <HAL_I2C_MspInit+0xe0>)
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	4a17      	ldr	r2, [pc, #92]	; (8006588 <HAL_I2C_MspInit+0xe0>)
 800652c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006530:	6153      	str	r3, [r2, #20]
 8006532:	4b15      	ldr	r3, [pc, #84]	; (8006588 <HAL_I2C_MspInit+0xe0>)
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800653e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006544:	2312      	movs	r3, #18
 8006546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006548:	2301      	movs	r3, #1
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800654c:	2303      	movs	r3, #3
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006550:	2304      	movs	r3, #4
 8006552:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006554:	f107 031c 	add.w	r3, r7, #28
 8006558:	4619      	mov	r1, r3
 800655a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800655e:	f003 fd09 	bl	8009f74 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006562:	4b09      	ldr	r3, [pc, #36]	; (8006588 <HAL_I2C_MspInit+0xe0>)
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	4a08      	ldr	r2, [pc, #32]	; (8006588 <HAL_I2C_MspInit+0xe0>)
 8006568:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800656c:	61d3      	str	r3, [r2, #28]
 800656e:	4b06      	ldr	r3, [pc, #24]	; (8006588 <HAL_I2C_MspInit+0xe0>)
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
}
 800657a:	bf00      	nop
 800657c:	3730      	adds	r7, #48	; 0x30
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	40005400 	.word	0x40005400
 8006588:	40021000 	.word	0x40021000
 800658c:	48000400 	.word	0x48000400
 8006590:	40005800 	.word	0x40005800

08006594 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a0d      	ldr	r2, [pc, #52]	; (80065d8 <HAL_RTC_MspInit+0x44>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d111      	bne.n	80065ca <HAL_RTC_MspInit+0x36>
 80065a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065aa:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	fa93 f3a3 	rbit	r3, r3
 80065b2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80065b4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80065b6:	fab3 f383 	clz	r3, r3
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	4b07      	ldr	r3, [pc, #28]	; (80065dc <HAL_RTC_MspInit+0x48>)
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	461a      	mov	r2, r3
 80065c6:	2301      	movs	r3, #1
 80065c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80065ca:	bf00      	nop
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40002800 	.word	0x40002800
 80065dc:	10908100 	.word	0x10908100

080065e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	; 0x28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065e8:	f107 0314 	add.w	r3, r7, #20
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	605a      	str	r2, [r3, #4]
 80065f2:	609a      	str	r2, [r3, #8]
 80065f4:	60da      	str	r2, [r3, #12]
 80065f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a17      	ldr	r2, [pc, #92]	; (800665c <HAL_SPI_MspInit+0x7c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d128      	bne.n	8006654 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006602:	4b17      	ldr	r3, [pc, #92]	; (8006660 <HAL_SPI_MspInit+0x80>)
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	4a16      	ldr	r2, [pc, #88]	; (8006660 <HAL_SPI_MspInit+0x80>)
 8006608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800660c:	6193      	str	r3, [r2, #24]
 800660e:	4b14      	ldr	r3, [pc, #80]	; (8006660 <HAL_SPI_MspInit+0x80>)
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800661a:	4b11      	ldr	r3, [pc, #68]	; (8006660 <HAL_SPI_MspInit+0x80>)
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	4a10      	ldr	r2, [pc, #64]	; (8006660 <HAL_SPI_MspInit+0x80>)
 8006620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006624:	6153      	str	r3, [r2, #20]
 8006626:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <HAL_SPI_MspInit+0x80>)
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006632:	23e0      	movs	r3, #224	; 0xe0
 8006634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006636:	2302      	movs	r3, #2
 8006638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800663a:	2300      	movs	r3, #0
 800663c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800663e:	2303      	movs	r3, #3
 8006640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006642:	2305      	movs	r3, #5
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006646:	f107 0314 	add.w	r3, r7, #20
 800664a:	4619      	mov	r1, r3
 800664c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006650:	f003 fc90 	bl	8009f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006654:	bf00      	nop
 8006656:	3728      	adds	r7, #40	; 0x28
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40013000 	.word	0x40013000
 8006660:	40021000 	.word	0x40021000

08006664 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08c      	sub	sp, #48	; 0x30
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006674:	2200      	movs	r2, #0
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	2036      	movs	r0, #54	; 0x36
 800667a:	f003 f9b3 	bl	80099e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800667e:	2036      	movs	r0, #54	; 0x36
 8006680:	f003 f9cc 	bl	8009a1c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006684:	4b1f      	ldr	r3, [pc, #124]	; (8006704 <HAL_InitTick+0xa0>)
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	4a1e      	ldr	r2, [pc, #120]	; (8006704 <HAL_InitTick+0xa0>)
 800668a:	f043 0310 	orr.w	r3, r3, #16
 800668e:	61d3      	str	r3, [r2, #28]
 8006690:	4b1c      	ldr	r3, [pc, #112]	; (8006704 <HAL_InitTick+0xa0>)
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800669c:	f107 0210 	add.w	r2, r7, #16
 80066a0:	f107 0314 	add.w	r3, r7, #20
 80066a4:	4611      	mov	r1, r2
 80066a6:	4618      	mov	r0, r3
 80066a8:	f007 fa90 	bl	800dbcc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80066ac:	f007 fa6c 	bl	800db88 <HAL_RCC_GetPCLK1Freq>
 80066b0:	4603      	mov	r3, r0
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	4a13      	ldr	r2, [pc, #76]	; (8006708 <HAL_InitTick+0xa4>)
 80066ba:	fba2 2303 	umull	r2, r3, r2, r3
 80066be:	0c9b      	lsrs	r3, r3, #18
 80066c0:	3b01      	subs	r3, #1
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80066c4:	4b11      	ldr	r3, [pc, #68]	; (800670c <HAL_InitTick+0xa8>)
 80066c6:	4a12      	ldr	r2, [pc, #72]	; (8006710 <HAL_InitTick+0xac>)
 80066c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80066ca:	4b10      	ldr	r3, [pc, #64]	; (800670c <HAL_InitTick+0xa8>)
 80066cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80066d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80066d2:	4a0e      	ldr	r2, [pc, #56]	; (800670c <HAL_InitTick+0xa8>)
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80066d8:	4b0c      	ldr	r3, [pc, #48]	; (800670c <HAL_InitTick+0xa8>)
 80066da:	2200      	movs	r2, #0
 80066dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066de:	4b0b      	ldr	r3, [pc, #44]	; (800670c <HAL_InitTick+0xa8>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80066e4:	4809      	ldr	r0, [pc, #36]	; (800670c <HAL_InitTick+0xa8>)
 80066e6:	f007 fde3 	bl	800e2b0 <HAL_TIM_Base_Init>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d104      	bne.n	80066fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80066f0:	4806      	ldr	r0, [pc, #24]	; (800670c <HAL_InitTick+0xa8>)
 80066f2:	f007 fe3f 	bl	800e374 <HAL_TIM_Base_Start_IT>
 80066f6:	4603      	mov	r3, r0
 80066f8:	e000      	b.n	80066fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3730      	adds	r7, #48	; 0x30
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40021000 	.word	0x40021000
 8006708:	431bde83 	.word	0x431bde83
 800670c:	20002654 	.word	0x20002654
 8006710:	40001000 	.word	0x40001000

08006714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  __NOP();
 8006718:	bf00      	nop
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800671a:	bf00      	nop
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006728:	e7fe      	b.n	8006728 <HardFault_Handler+0x4>

0800672a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800672a:	b480      	push	{r7}
 800672c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800672e:	e7fe      	b.n	800672e <MemManage_Handler+0x4>

08006730 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006734:	e7fe      	b.n	8006734 <BusFault_Handler+0x4>

08006736 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006736:	b480      	push	{r7}
 8006738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800673a:	e7fe      	b.n	800673a <UsageFault_Handler+0x4>

0800673c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006740:	bf00      	nop
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
	...

0800674c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006750:	4802      	ldr	r0, [pc, #8]	; (800675c <DMA1_Channel1_IRQHandler+0x10>)
 8006752:	f003 fb01 	bl	8009d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006756:	bf00      	nop
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	2000241c 	.word	0x2000241c

08006760 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8006764:	4802      	ldr	r0, [pc, #8]	; (8006770 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8006766:	f002 fe55 	bl	8009414 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800676a:	bf00      	nop
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	200024a4 	.word	0x200024a4

08006774 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006778:	4802      	ldr	r0, [pc, #8]	; (8006784 <TIM6_DAC_IRQHandler+0x10>)
 800677a:	f007 fe65 	bl	800e448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800677e:	bf00      	nop
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20002654 	.word	0x20002654

08006788 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800678c:	4802      	ldr	r0, [pc, #8]	; (8006798 <DMA2_Channel2_IRQHandler+0x10>)
 800678e:	f003 fae3 	bl	8009d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8006792:	bf00      	nop
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20002460 	.word	0x20002460

0800679c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80067a0:	4802      	ldr	r0, [pc, #8]	; (80067ac <USB_LP_IRQHandler+0x10>)
 80067a2:	f004 fb98 	bl	800aed6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80067a6:	bf00      	nop
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20004df8 	.word	0x20004df8

080067b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067bc:	2300      	movs	r3, #0
 80067be:	617b      	str	r3, [r7, #20]
 80067c0:	e00a      	b.n	80067d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80067c2:	f3af 8000 	nop.w
 80067c6:	4601      	mov	r1, r0
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	60ba      	str	r2, [r7, #8]
 80067ce:	b2ca      	uxtb	r2, r1
 80067d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	3301      	adds	r3, #1
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	429a      	cmp	r2, r3
 80067de:	dbf0      	blt.n	80067c2 <_read+0x12>
	}

return len;
 80067e0:	687b      	ldr	r3, [r7, #4]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <_close>:
	}
	return len;
}

int _close(int file)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
	return -1;
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006812:	605a      	str	r2, [r3, #4]
	return 0;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <_isatty>:

int _isatty(int file)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
	return 1;
 800682a:	2301      	movs	r3, #1
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
	return 0;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
	...

08006854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800685c:	4a14      	ldr	r2, [pc, #80]	; (80068b0 <_sbrk+0x5c>)
 800685e:	4b15      	ldr	r3, [pc, #84]	; (80068b4 <_sbrk+0x60>)
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006868:	4b13      	ldr	r3, [pc, #76]	; (80068b8 <_sbrk+0x64>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006870:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <_sbrk+0x64>)
 8006872:	4a12      	ldr	r2, [pc, #72]	; (80068bc <_sbrk+0x68>)
 8006874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006876:	4b10      	ldr	r3, [pc, #64]	; (80068b8 <_sbrk+0x64>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4413      	add	r3, r2
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	429a      	cmp	r2, r3
 8006882:	d207      	bcs.n	8006894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006884:	f00f f88c 	bl	80159a0 <__errno>
 8006888:	4603      	mov	r3, r0
 800688a:	220c      	movs	r2, #12
 800688c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800688e:	f04f 33ff 	mov.w	r3, #4294967295
 8006892:	e009      	b.n	80068a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006894:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <_sbrk+0x64>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800689a:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <_sbrk+0x64>)
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4413      	add	r3, r2
 80068a2:	4a05      	ldr	r2, [pc, #20]	; (80068b8 <_sbrk+0x64>)
 80068a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068a6:	68fb      	ldr	r3, [r7, #12]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	2000a000 	.word	0x2000a000
 80068b4:	00000400 	.word	0x00000400
 80068b8:	200026a0 	.word	0x200026a0
 80068bc:	20005318 	.word	0x20005318

080068c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068c4:	4b08      	ldr	r3, [pc, #32]	; (80068e8 <SystemInit+0x28>)
 80068c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ca:	4a07      	ldr	r2, [pc, #28]	; (80068e8 <SystemInit+0x28>)
 80068cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80068d4:	4b04      	ldr	r3, [pc, #16]	; (80068e8 <SystemInit+0x28>)
 80068d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068da:	609a      	str	r2, [r3, #8]
#endif
}
 80068dc:	bf00      	nop
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	e000ed00 	.word	0xe000ed00

080068ec <EvaluateVirtInput>:
 */

#include "virtual_input.h"

void EvaluateVirtInput(PdmConfig_VirtualInput_t *pIn, uint16_t* pResult)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af02      	add	r7, sp, #8
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  if(!pIn->nEnabled)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 80be 	beq.w	8006a7c <EvaluateVirtInput+0x190>
    return;
  if((pIn->pVar0 == 0) || (pIn->pVar1 == 0))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 80bb 	beq.w	8006a80 <EvaluateVirtInput+0x194>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 80b6 	beq.w	8006a80 <EvaluateVirtInput+0x194>
    return;

  uint8_t nResult0, nResult1, nResult2, nResultSec0;

  nResult0 = *pIn->pVar0;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	73fb      	strb	r3, [r7, #15]
  if(pIn->nNot0)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d006      	beq.n	8006932 <EvaluateVirtInput+0x46>
    nResult0 = !nResult0;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	2b00      	cmp	r3, #0
 8006928:	bf0c      	ite	eq
 800692a:	2301      	moveq	r3, #1
 800692c:	2300      	movne	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	73fb      	strb	r3, [r7, #15]

  nResult1 = *pIn->pVar1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	73bb      	strb	r3, [r7, #14]
  if(pIn->nNot1)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	7a5b      	ldrb	r3, [r3, #9]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d006      	beq.n	8006950 <EvaluateVirtInput+0x64>
    nResult1 = !nResult1;
 8006942:	7bbb      	ldrb	r3, [r7, #14]
 8006944:	2b00      	cmp	r3, #0
 8006946:	bf0c      	ite	eq
 8006948:	2301      	moveq	r3, #1
 800694a:	2300      	movne	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	73bb      	strb	r3, [r7, #14]

  switch(pIn->eCond0)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	7a1b      	ldrb	r3, [r3, #8]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d01c      	beq.n	8006992 <EvaluateVirtInput+0xa6>
 8006958:	2b02      	cmp	r3, #2
 800695a:	dc25      	bgt.n	80069a8 <EvaluateVirtInput+0xbc>
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <EvaluateVirtInput+0x7a>
 8006960:	2b01      	cmp	r3, #1
 8006962:	d00b      	beq.n	800697c <EvaluateVirtInput+0x90>
 8006964:	e020      	b.n	80069a8 <EvaluateVirtInput+0xbc>
  {
  case COND_AND:
    nResultSec0 = nResult0 && nResult1;
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <EvaluateVirtInput+0x8a>
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <EvaluateVirtInput+0x8a>
 8006972:	2301      	movs	r3, #1
 8006974:	e000      	b.n	8006978 <EvaluateVirtInput+0x8c>
 8006976:	2300      	movs	r3, #0
 8006978:	733b      	strb	r3, [r7, #12]
    break;
 800697a:	e015      	b.n	80069a8 <EvaluateVirtInput+0xbc>
  case COND_OR:
    nResultSec0 = nResult0 || nResult1;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <EvaluateVirtInput+0x9c>
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <EvaluateVirtInput+0xa0>
 8006988:	2301      	movs	r3, #1
 800698a:	e000      	b.n	800698e <EvaluateVirtInput+0xa2>
 800698c:	2300      	movs	r3, #0
 800698e:	733b      	strb	r3, [r7, #12]
    break;
 8006990:	e00a      	b.n	80069a8 <EvaluateVirtInput+0xbc>
  case COND_NOR:
    nResultSec0 = !nResult0 || !nResult1;
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <EvaluateVirtInput+0xb2>
 8006998:	7bbb      	ldrb	r3, [r7, #14]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <EvaluateVirtInput+0xb6>
 800699e:	2301      	movs	r3, #1
 80069a0:	e000      	b.n	80069a4 <EvaluateVirtInput+0xb8>
 80069a2:	2300      	movs	r3, #0
 80069a4:	733b      	strb	r3, [r7, #12]
    break;
 80069a6:	bf00      	nop
  }

  //Only 2 conditions
  if(pIn->nVar2 == 0)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	7c9b      	ldrb	r3, [r3, #18]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10c      	bne.n	80069ca <EvaluateVirtInput+0xde>
  {
    CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0, pResult, NO_DEBOUNCE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f103 001c 	add.w	r0, r3, #28
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	7e19      	ldrb	r1, [r3, #24]
 80069ba:	7b3b      	ldrb	r3, [r7, #12]
 80069bc:	b29a      	uxth	r2, r3
 80069be:	2300      	movs	r3, #0
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	f001 f836 	bl	8007a34 <CheckPushbutton>
    return;
 80069c8:	e05b      	b.n	8006a82 <EvaluateVirtInput+0x196>
  }
  else
  {
    nResult2 = *pIn->pVar2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	737b      	strb	r3, [r7, #13]
    if(pIn->nNot2)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	7c5b      	ldrb	r3, [r3, #17]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d006      	beq.n	80069e8 <EvaluateVirtInput+0xfc>
      nResult2 = !nResult2;
 80069da:	7b7b      	ldrb	r3, [r7, #13]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bf0c      	ite	eq
 80069e0:	2301      	moveq	r3, #1
 80069e2:	2300      	movne	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	737b      	strb	r3, [r7, #13]

    switch(pIn->eCond0)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7a1b      	ldrb	r3, [r3, #8]
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d030      	beq.n	8006a52 <EvaluateVirtInput+0x166>
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	dc46      	bgt.n	8006a82 <EvaluateVirtInput+0x196>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <EvaluateVirtInput+0x112>
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d015      	beq.n	8006a28 <EvaluateVirtInput+0x13c>
 80069fc:	e041      	b.n	8006a82 <EvaluateVirtInput+0x196>
    {
    case COND_AND:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0 && nResult2, pResult, NO_DEBOUNCE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f103 001c 	add.w	r0, r3, #28
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	7e19      	ldrb	r1, [r3, #24]
 8006a08:	7b3b      	ldrb	r3, [r7, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d004      	beq.n	8006a18 <EvaluateVirtInput+0x12c>
 8006a0e:	7b7b      	ldrb	r3, [r7, #13]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <EvaluateVirtInput+0x12c>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <EvaluateVirtInput+0x12e>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	f001 f807 	bl	8007a34 <CheckPushbutton>
      return;
 8006a26:	e02c      	b.n	8006a82 <EvaluateVirtInput+0x196>
    case COND_OR:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0 || nResult2, pResult, NO_DEBOUNCE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f103 001c 	add.w	r0, r3, #28
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	7e19      	ldrb	r1, [r3, #24]
 8006a32:	7b3b      	ldrb	r3, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <EvaluateVirtInput+0x152>
 8006a38:	7b7b      	ldrb	r3, [r7, #13]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <EvaluateVirtInput+0x156>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <EvaluateVirtInput+0x158>
 8006a42:	2300      	movs	r3, #0
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	2300      	movs	r3, #0
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	f000 fff2 	bl	8007a34 <CheckPushbutton>
      return;
 8006a50:	e017      	b.n	8006a82 <EvaluateVirtInput+0x196>
    case COND_NOR:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, !nResultSec0 || !nResult2, pResult, NO_DEBOUNCE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f103 001c 	add.w	r0, r3, #28
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	7e19      	ldrb	r1, [r3, #24]
 8006a5c:	7b3b      	ldrb	r3, [r7, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <EvaluateVirtInput+0x17c>
 8006a62:	7b7b      	ldrb	r3, [r7, #13]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <EvaluateVirtInput+0x180>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e000      	b.n	8006a6e <EvaluateVirtInput+0x182>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	2300      	movs	r3, #0
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	f000 ffdd 	bl	8007a34 <CheckPushbutton>
      return;
 8006a7a:	e002      	b.n	8006a82 <EvaluateVirtInput+0x196>
    return;
 8006a7c:	bf00      	nop
 8006a7e:	e000      	b.n	8006a82 <EvaluateVirtInput+0x196>
    return;
 8006a80:	bf00      	nop
    }
  }

}
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ac0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006a8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006a8e:	e003      	b.n	8006a98 <LoopCopyDataInit>

08006a90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006a90:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006a92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006a94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006a96:	3104      	adds	r1, #4

08006a98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006a98:	480b      	ldr	r0, [pc, #44]	; (8006ac8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006a9a:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <LoopForever+0xe>)
	adds	r2, r0, r1
 8006a9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006a9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006aa0:	d3f6      	bcc.n	8006a90 <CopyDataInit>
	ldr	r2, =_sbss
 8006aa2:	4a0b      	ldr	r2, [pc, #44]	; (8006ad0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006aa4:	e002      	b.n	8006aac <LoopFillZerobss>

08006aa6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006aa6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006aa8:	f842 3b04 	str.w	r3, [r2], #4

08006aac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <LoopForever+0x16>)
	cmp	r2, r3
 8006aae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006ab0:	d3f9      	bcc.n	8006aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006ab2:	f7ff ff05 	bl	80068c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ab6:	f00e ff79 	bl	80159ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006aba:	f7fc f9bf 	bl	8002e3c <main>

08006abe <LoopForever>:

LoopForever:
    b LoopForever
 8006abe:	e7fe      	b.n	8006abe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006ac0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8006ac4:	08016bf0 	.word	0x08016bf0
	ldr	r0, =_sdata
 8006ac8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006acc:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8006ad0:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8006ad4:	20005314 	.word	0x20005314

08006ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006ad8:	e7fe      	b.n	8006ad8 <ADC1_2_IRQHandler>
	...

08006adc <ADS1x15_SendRegs>:
#include "ads1x15.h"

#define I2C_TIMEOUT 100

HAL_StatusTypeDef ADS1x15_SendRegs(I2C_HandleTypeDef* hi2c, uint16_t addr, ads1x15Settings_t *settings, uint8_t channel)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	607a      	str	r2, [r7, #4]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	460b      	mov	r3, r1
 8006aea:	817b      	strh	r3, [r7, #10]
 8006aec:	4613      	mov	r3, r2
 8006aee:	727b      	strb	r3, [r7, #9]
  HAL_StatusTypeDef eStatus;

	if(channel > 3) return HAL_ERROR;
 8006af0:	7a7b      	ldrb	r3, [r7, #9]
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d901      	bls.n	8006afa <ADS1x15_SendRegs+0x1e>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e067      	b.n	8006bca <ADS1x15_SendRegs+0xee>

	uint16_t config =
 8006afa:	f240 1303 	movw	r3, #259	; 0x103
 8006afe:	82fb      	strh	r3, [r7, #22]
				ADS1015_REG_CONFIG_CLAT_NONLAT |  // Non-latching (default val)
				ADS1015_REG_CONFIG_CPOL_ACTVLOW | // Alert/Rdy active low   (default val)
				ADS1015_REG_CONFIG_CMODE_TRAD |   // Traditional comparator (default val)
				ADS1015_REG_CONFIG_MODE_SINGLE;

	config |= settings->dataRate;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	791b      	ldrb	r3, [r3, #4]
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	8afb      	ldrh	r3, [r7, #22]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	82fb      	strh	r3, [r7, #22]
	config |= settings->gain;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	885a      	ldrh	r2, [r3, #2]
 8006b10:	8afb      	ldrh	r3, [r7, #22]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	82fb      	strh	r3, [r7, #22]

	switch(channel){
 8006b16:	7a7b      	ldrb	r3, [r7, #9]
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d81f      	bhi.n	8006b5c <ADS1x15_SendRegs+0x80>
 8006b1c:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <ADS1x15_SendRegs+0x48>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006b35 	.word	0x08006b35
 8006b28:	08006b3f 	.word	0x08006b3f
 8006b2c:	08006b49 	.word	0x08006b49
 8006b30:	08006b53 	.word	0x08006b53
	case (0):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8006b34:	8afb      	ldrh	r3, [r7, #22]
 8006b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b3a:	82fb      	strh	r3, [r7, #22]
		break;
 8006b3c:	e00e      	b.n	8006b5c <ADS1x15_SendRegs+0x80>
	case (1):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8006b3e:	8afb      	ldrh	r3, [r7, #22]
 8006b40:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8006b44:	82fb      	strh	r3, [r7, #22]
		break;
 8006b46:	e009      	b.n	8006b5c <ADS1x15_SendRegs+0x80>
	case (2):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8006b48:	8afb      	ldrh	r3, [r7, #22]
 8006b4a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8006b4e:	82fb      	strh	r3, [r7, #22]
		break;
 8006b50:	e004      	b.n	8006b5c <ADS1x15_SendRegs+0x80>
	case (3):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8006b52:	8afb      	ldrh	r3, [r7, #22]
 8006b54:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006b58:	82fb      	strh	r3, [r7, #22]
		break;
 8006b5a:	bf00      	nop
	}

	config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8006b5c:	8afb      	ldrh	r3, [r7, #22]
 8006b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b66:	82fb      	strh	r3, [r7, #22]

	uint8_t writeVals[3];

	writeVals[0] = ADS1015_REG_POINTER_CONFIG;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	743b      	strb	r3, [r7, #16]
	writeVals[1] = config >> 8;
 8006b6c:	8afb      	ldrh	r3, [r7, #22]
 8006b6e:	0a1b      	lsrs	r3, r3, #8
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	747b      	strb	r3, [r7, #17]
	writeVals[2] = config & 0xFF;
 8006b76:	8afb      	ldrh	r3, [r7, #22]
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	74bb      	strb	r3, [r7, #18]

	eStatus = HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, I2C_TIMEOUT);
 8006b7c:	897b      	ldrh	r3, [r7, #10]
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	b299      	uxth	r1, r3
 8006b82:	f107 0210 	add.w	r2, r7, #16
 8006b86:	2364      	movs	r3, #100	; 0x64
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f003 fc2d 	bl	800a3ec <HAL_I2C_Master_Transmit>
 8006b92:	4603      	mov	r3, r0
 8006b94:	757b      	strb	r3, [r7, #21]
  if( eStatus != HAL_OK)
 8006b96:	7d7b      	ldrb	r3, [r7, #21]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <ADS1x15_SendRegs+0xc4>
  {
    return eStatus;
 8006b9c:	7d7b      	ldrb	r3, [r7, #21]
 8006b9e:	e014      	b.n	8006bca <ADS1x15_SendRegs+0xee>
  }

	//Send convert register
	writeVals[0] = ADS1015_REG_POINTER_CONVERT;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	743b      	strb	r3, [r7, #16]

  eStatus = HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, I2C_TIMEOUT);
 8006ba4:	897b      	ldrh	r3, [r7, #10]
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	b299      	uxth	r1, r3
 8006baa:	f107 0210 	add.w	r2, r7, #16
 8006bae:	2364      	movs	r3, #100	; 0x64
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f003 fc19 	bl	800a3ec <HAL_I2C_Master_Transmit>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	757b      	strb	r3, [r7, #21]
  if( eStatus != HAL_OK)
 8006bbe:	7d7b      	ldrb	r3, [r7, #21]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <ADS1x15_SendRegs+0xec>
  {
    return eStatus;
 8006bc4:	7d7b      	ldrb	r3, [r7, #21]
 8006bc6:	e000      	b.n	8006bca <ADS1x15_SendRegs+0xee>
  }

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop

08006bd4 <ADS1x15_ReadADC>:

HAL_StatusTypeDef ADS1x15_ReadADC(I2C_HandleTypeDef* hi2c, uint16_t addr, ads1x15Settings_t *settings, uint16_t* val)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af02      	add	r7, sp, #8
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	607a      	str	r2, [r7, #4]
 8006bde:	603b      	str	r3, [r7, #0]
 8006be0:	460b      	mov	r3, r1
 8006be2:	817b      	strh	r3, [r7, #10]

  //Read received values
	uint8_t readVals[2];

	//Msg received - comms OK
	settings->commsOk = 1;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	719a      	strb	r2, [r3, #6]

	eStatus = HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 2, I2C_TIMEOUT);
 8006bea:	897b      	ldrh	r3, [r7, #10]
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	b299      	uxth	r1, r3
 8006bf0:	f107 0210 	add.w	r2, r7, #16
 8006bf4:	2364      	movs	r3, #100	; 0x64
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f003 fcea 	bl	800a5d4 <HAL_I2C_Master_Receive>
 8006c00:	4603      	mov	r3, r0
 8006c02:	757b      	strb	r3, [r7, #21]
	if( eStatus != HAL_OK)
 8006c04:	7d7b      	ldrb	r3, [r7, #21]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <ADS1x15_ReadADC+0x3a>
  {
    return eStatus;
 8006c0a:	7d7b      	ldrb	r3, [r7, #21]
 8006c0c:	e01e      	b.n	8006c4c <ADS1x15_ReadADC+0x78>
  }

	uint16_t valRead = (readVals[0] << 8 | readVals[1]) >> settings->bitShift;
 8006c0e:	7c3b      	ldrb	r3, [r7, #16]
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	7c7a      	ldrb	r2, [r7, #17]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	7952      	ldrb	r2, [r2, #5]
 8006c1a:	4113      	asrs	r3, r2
 8006c1c:	82fb      	strh	r3, [r7, #22]

	if (settings->deviceType == ADS1115) {
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d104      	bne.n	8006c30 <ADS1x15_ReadADC+0x5c>
	  *val = valRead;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	8afa      	ldrh	r2, [r7, #22]
 8006c2a:	801a      	strh	r2, [r3, #0]
	  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e00d      	b.n	8006c4c <ADS1x15_ReadADC+0x78>
  }
	else {
    // Shift 12-bit results right 4 bits for the ADS1015,
    // making sure we keep the sign bit intact
    if (valRead > 0x07FF) {
 8006c30:	8afb      	ldrh	r3, [r7, #22]
 8006c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c36:	d305      	bcc.n	8006c44 <ADS1x15_ReadADC+0x70>
      // negative number - extend the sign to 16th bit
      valRead |= 0xF000;
 8006c38:	8afb      	ldrh	r3, [r7, #22]
 8006c3a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8006c3e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8006c42:	82fb      	strh	r3, [r7, #22]
    }
    *val = valRead;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	8afa      	ldrh	r2, [r7, #22]
 8006c48:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
  }
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <CANBoardCheckConnection>:
  rx->nHeartbeat = msg[7];
  rx->nLastHeartbeatTime = HAL_GetTick();
}

void CANBoardCheckConnection(volatile CANBoard_RX_t* rx)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  if( (rx->nHeartbeat == rx->nLastHeartbeat) &&
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d10c      	bne.n	8006c8a <CANBoardCheckConnection+0x36>
      ((HAL_GetTick() - rx->nLastHeartbeatTime) > (CANBOARD_TX_DELAY * 4)))
 8006c70:	f000 ff80 	bl	8007b74 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7a:	1ad3      	subs	r3, r2, r3
  if( (rx->nHeartbeat == rx->nLastHeartbeat) &&
 8006c7c:	2bc8      	cmp	r3, #200	; 0xc8
 8006c7e:	d904      	bls.n	8006c8a <CANBoardCheckConnection+0x36>
  {
    rx->nConnected = 0;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006c88:	e003      	b.n	8006c92 <CANBoardCheckConnection+0x3e>
  }
  else
  {
    rx->nConnected = 1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }
  rx->nLastHeartbeat = rx->nHeartbeat;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <MCP9808_Init>:
#include "mcp9808.h"

uint8_t MCP9808_Overtemp, MCP9808_Undertemp, MCP9808_CriticalTemp;

uint8_t MCP9808_Init(I2C_HandleTypeDef* hi2c, uint16_t addr)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	807b      	strh	r3, [r7, #2]
  if(MCP9808_Read16(hi2c, addr, MCP9808_REG_MANUF_ID) != 0x0054)
 8006cb4:	887b      	ldrh	r3, [r7, #2]
 8006cb6:	2206      	movs	r2, #6
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f988 	bl	8006fd0 <MCP9808_Read16>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b54      	cmp	r3, #84	; 0x54
 8006cc4:	d001      	beq.n	8006cca <MCP9808_Init+0x22>
    return 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	e015      	b.n	8006cf6 <MCP9808_Init+0x4e>
  if(MCP9808_Read16(hi2c, addr, MCP9808_REG_DEVICE_ID) != 0x0400)
 8006cca:	887b      	ldrh	r3, [r7, #2]
 8006ccc:	2207      	movs	r2, #7
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f97d 	bl	8006fd0 <MCP9808_Read16>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cdc:	d001      	beq.n	8006ce2 <MCP9808_Init+0x3a>
    return 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e009      	b.n	8006cf6 <MCP9808_Init+0x4e>
  //B6 = 0 (Tupper Tlower window unlocked)
  //B7 = 0 (Tcrit unlocked)
  //B8 = 0 (continous conversion)
  //B9-10 = 01 (Tupper Tlower hysterisis +1.5 deg C)
  //B11-15 = 00000 (not used)
  uint16_t config = (MCP9808_REG_CONFIG_ALERTCTRL | MCP9808_REG_CONFIG_HYST_1_5);
 8006ce2:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006ce6:	81fb      	strh	r3, [r7, #14]
  MCP9808_Write16(hi2c, addr, MCP9808_REG_CONFIG, config);
 8006ce8:	89fb      	ldrh	r3, [r7, #14]
 8006cea:	8879      	ldrh	r1, [r7, #2]
 8006cec:	2201      	movs	r2, #1
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f948 	bl	8006f84 <MCP9808_Write16>
  return 1;
 8006cf4:	2301      	movs	r3, #1
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
	...

08006d00 <MCP9808_ReadTempC>:

float MCP9808_ReadTempC(I2C_HandleTypeDef* hi2c, uint16_t addr)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	807b      	strh	r3, [r7, #2]
  float temp = 0.0;
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
  uint16_t t = MCP9808_Read16(hi2c, addr, MCP9808_REG_AMBIENT_TEMP);
 8006d12:	887b      	ldrh	r3, [r7, #2]
 8006d14:	2205      	movs	r2, #5
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f959 	bl	8006fd0 <MCP9808_Read16>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	817b      	strh	r3, [r7, #10]

  MCP9808_MapLimitBits(t);
 8006d22:	897b      	ldrh	r3, [r7, #10]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 f905 	bl	8006f34 <MCP9808_MapLimitBits>

  if (t != 0xFFFF) {
 8006d2a:	897b      	ldrh	r3, [r7, #10]
 8006d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d01d      	beq.n	8006d70 <MCP9808_ReadTempC+0x70>
    temp = t & 0x0FFF;
 8006d34:	897b      	ldrh	r3, [r7, #10]
 8006d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d3a:	ee07 3a90 	vmov	s15, r3
 8006d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d42:	edc7 7a03 	vstr	s15, [r7, #12]
    temp /= 16.0;
 8006d46:	ed97 7a03 	vldr	s14, [r7, #12]
 8006d4a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8006d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d52:	edc7 7a03 	vstr	s15, [r7, #12]
    if (t & 0x1000)
 8006d56:	897b      	ldrh	r3, [r7, #10]
 8006d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <MCP9808_ReadTempC+0x70>
      temp -= 256;
 8006d60:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d64:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006d80 <MCP9808_ReadTempC+0x80>
 8006d68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d6c:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  return temp;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	ee07 3a90 	vmov	s15, r3
}
 8006d76:	eeb0 0a67 	vmov.f32	s0, s15
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	43800000 	.word	0x43800000

08006d84 <MCP9808_ConvertToF>:
  }

  return temp;
}

float MCP9808_ConvertToF(float degC){
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	ed87 0a01 	vstr	s0, [r7, #4]
  return degC * 9.0 / 5.0 + 32;
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7f9 fb82 	bl	8000498 <__aeabi_f2d>
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	4b11      	ldr	r3, [pc, #68]	; (8006de0 <MCP9808_ConvertToF+0x5c>)
 8006d9a:	f7f9 fbd5 	bl	8000548 <__aeabi_dmul>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4610      	mov	r0, r2
 8006da4:	4619      	mov	r1, r3
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <MCP9808_ConvertToF+0x60>)
 8006dac:	f7f9 fcf6 	bl	800079c <__aeabi_ddiv>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4610      	mov	r0, r2
 8006db6:	4619      	mov	r1, r3
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <MCP9808_ConvertToF+0x64>)
 8006dbe:	f7f9 fa0d 	bl	80001dc <__adddf3>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f7f9 fdef 	bl	80009ac <__aeabi_d2f>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	ee07 3a90 	vmov	s15, r3
}
 8006dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	40220000 	.word	0x40220000
 8006de4:	40140000 	.word	0x40140000
 8006de8:	40400000 	.word	0x40400000

08006dec <MCP9808_SetResolution>:
{
  return MCP9808_Read8(hi2c, addr, MCP9808_REG_RESOLUTION);
}

void MCP9808_SetResolution(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t val)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	807b      	strh	r3, [r7, #2]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	707b      	strb	r3, [r7, #1]
  MCP9808_Write8(hi2c, addr, MCP9808_REG_RESOLUTION, val);
 8006dfc:	787b      	ldrb	r3, [r7, #1]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	8879      	ldrh	r1, [r7, #2]
 8006e02:	2208      	movs	r2, #8
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f913 	bl	8007030 <MCP9808_Write8>
}
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <MCP9808_SetLimit>:
  conf_shutdown = conf_register & ~MCP9808_REG_CONFIG_SHUTDOWN;
  MCP9808_Write16(hi2c, addr, MCP9808_REG_CONFIG, conf_shutdown);
}

uint8_t MCP9808_SetLimit(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, float val)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006e22:	817b      	strh	r3, [r7, #10]
 8006e24:	4613      	mov	r3, r2
 8006e26:	727b      	strb	r3, [r7, #9]
  uint16_t newVal = val * 16.0;
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7f9 fb35 	bl	8000498 <__aeabi_f2d>
 8006e2e:	f04f 0200 	mov.w	r2, #0
 8006e32:	4b23      	ldr	r3, [pc, #140]	; (8006ec0 <MCP9808_SetLimit+0xac>)
 8006e34:	f7f9 fb88 	bl	8000548 <__aeabi_dmul>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	4619      	mov	r1, r3
 8006e40:	f7f9 fd94 	bl	800096c <__aeabi_d2uiz>
 8006e44:	4603      	mov	r3, r0
 8006e46:	82fb      	strh	r3, [r7, #22]
  if(val < 0)
 8006e48:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e54:	d503      	bpl.n	8006e5e <MCP9808_SetLimit+0x4a>
    newVal += 256;
 8006e56:	8afb      	ldrh	r3, [r7, #22]
 8006e58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006e5c:	82fb      	strh	r3, [r7, #22]
  MCP9808_Write16(hi2c, addr, reg, val * 16.0);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7f9 fb1a 	bl	8000498 <__aeabi_f2d>
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <MCP9808_SetLimit+0xac>)
 8006e6a:	f7f9 fb6d 	bl	8000548 <__aeabi_dmul>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4610      	mov	r0, r2
 8006e74:	4619      	mov	r1, r3
 8006e76:	f7f9 fd79 	bl	800096c <__aeabi_d2uiz>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	7a7a      	ldrb	r2, [r7, #9]
 8006e80:	8979      	ldrh	r1, [r7, #10]
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 f87e 	bl	8006f84 <MCP9808_Write16>

  float temp = MCP9808_RawToTemp(MCP9808_Read16(hi2c, addr, reg));
 8006e88:	7a7a      	ldrb	r2, [r7, #9]
 8006e8a:	897b      	ldrh	r3, [r7, #10]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 f89e 	bl	8006fd0 <MCP9808_Read16>
 8006e94:	4603      	mov	r3, r0
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 f814 	bl	8006ec4 <MCP9808_RawToTemp>
 8006e9c:	ed87 0a04 	vstr	s0, [r7, #16]

  if(val == temp)
 8006ea0:	ed97 7a01 	vldr	s14, [r7, #4]
 8006ea4:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ea8:	eeb4 7a67 	vcmp.f32	s14, s15
 8006eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb0:	d101      	bne.n	8006eb6 <MCP9808_SetLimit+0xa2>
    return 1;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <MCP9808_SetLimit+0xa4>
  return 0;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	40300000 	.word	0x40300000

08006ec4 <MCP9808_RawToTemp>:

float MCP9808_RawToTemp(uint16_t raw)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	80fb      	strh	r3, [r7, #6]
  float temp = 0.0;
 8006ece:	f04f 0300 	mov.w	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]
  if (raw != 0xFFFF) {
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d01d      	beq.n	8006f1a <MCP9808_RawToTemp+0x56>
    temp = raw & 0x0FFF;
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ee4:	ee07 3a90 	vmov	s15, r3
 8006ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eec:	edc7 7a03 	vstr	s15, [r7, #12]
    temp /= 16.0;
 8006ef0:	ed97 7a03 	vldr	s14, [r7, #12]
 8006ef4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8006ef8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006efc:	edc7 7a03 	vstr	s15, [r7, #12]
    if (raw & 0x1000)
 8006f00:	88fb      	ldrh	r3, [r7, #6]
 8006f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d007      	beq.n	8006f1a <MCP9808_RawToTemp+0x56>
      temp -= 256;
 8006f0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f0e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006f30 <MCP9808_RawToTemp+0x6c>
 8006f12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f16:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  return temp;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	ee07 3a90 	vmov	s15, r3
}
 8006f20:	eeb0 0a67 	vmov.f32	s0, s15
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	43800000 	.word	0x43800000

08006f34 <MCP9808_MapLimitBits>:

void MCP9808_MapLimitBits(uint16_t raw)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	80fb      	strh	r3, [r7, #6]
  MCP9808_Overtemp     = (raw & MCP9808_REG_OVERTEMP) >> MCP9808_POS_OVERTEMP;
 8006f3e:	88fb      	ldrh	r3, [r7, #6]
 8006f40:	139b      	asrs	r3, r3, #14
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <MCP9808_MapLimitBits+0x44>)
 8006f4c:	701a      	strb	r2, [r3, #0]
  MCP9808_Undertemp    = (raw & MCP9808_REG_UNDERTEMP) >> MCP9808_POS_UNDERTEMP;
 8006f4e:	88fb      	ldrh	r3, [r7, #6]
 8006f50:	135b      	asrs	r3, r3, #13
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	4b08      	ldr	r3, [pc, #32]	; (8006f7c <MCP9808_MapLimitBits+0x48>)
 8006f5c:	701a      	strb	r2, [r3, #0]
  MCP9808_CriticalTemp = (raw & MCP9808_REG_CRITICALTEMP) >> MCP9808_POS_CRITICALTEMP;
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	0bdb      	lsrs	r3, r3, #15
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <MCP9808_MapLimitBits+0x4c>)
 8006f68:	701a      	strb	r2, [r3, #0]
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	200026a4 	.word	0x200026a4
 8006f7c:	200026a5 	.word	0x200026a5
 8006f80:	200026a6 	.word	0x200026a6

08006f84 <MCP9808_Write16>:

void MCP9808_Write16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val){
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b088      	sub	sp, #32
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	4611      	mov	r1, r2
 8006f90:	461a      	mov	r2, r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	817b      	strh	r3, [r7, #10]
 8006f96:	460b      	mov	r3, r1
 8006f98:	727b      	strb	r3, [r7, #9]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[3];

  writeVals[0] = reg;
 8006f9e:	7a7b      	ldrb	r3, [r7, #9]
 8006fa0:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val >> 8;
 8006fa2:	88fb      	ldrh	r3, [r7, #6]
 8006fa4:	0a1b      	lsrs	r3, r3, #8
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	757b      	strb	r3, [r7, #21]
  writeVals[2] = val & 0xFF;
 8006fac:	88fb      	ldrh	r3, [r7, #6]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	75bb      	strb	r3, [r7, #22]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, 100);
 8006fb2:	897b      	ldrh	r3, [r7, #10]
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	b299      	uxth	r1, r3
 8006fb8:	f107 0214 	add.w	r2, r7, #20
 8006fbc:	2364      	movs	r3, #100	; 0x64
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f003 fa12 	bl	800a3ec <HAL_I2C_Master_Transmit>
}
 8006fc8:	bf00      	nop
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <MCP9808_Read16>:
uint16_t MCP9808_Read16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	807b      	strh	r3, [r7, #2]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[1];
  uint8_t readVals[2];
  uint16_t val = 0xFFFF;
 8006fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fe4:	81fb      	strh	r3, [r7, #14]

  writeVals[0] = reg;
 8006fe6:	787b      	ldrb	r3, [r7, #1]
 8006fe8:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, 100);
 8006fea:	887b      	ldrh	r3, [r7, #2]
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	b299      	uxth	r1, r3
 8006ff0:	f107 020c 	add.w	r2, r7, #12
 8006ff4:	2364      	movs	r3, #100	; 0x64
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f003 f9f6 	bl	800a3ec <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 2, 100);
 8007000:	887b      	ldrh	r3, [r7, #2]
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	b299      	uxth	r1, r3
 8007006:	f107 0208 	add.w	r2, r7, #8
 800700a:	2364      	movs	r3, #100	; 0x64
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	2302      	movs	r3, #2
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f003 fadf 	bl	800a5d4 <HAL_I2C_Master_Receive>

  val = (readVals[0] << 8 | readVals[1]);
 8007016:	7a3b      	ldrb	r3, [r7, #8]
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	b21a      	sxth	r2, r3
 800701c:	7a7b      	ldrb	r3, [r7, #9]
 800701e:	b21b      	sxth	r3, r3
 8007020:	4313      	orrs	r3, r2
 8007022:	b21b      	sxth	r3, r3
 8007024:	81fb      	strh	r3, [r7, #14]

  return val;
 8007026:	89fb      	ldrh	r3, [r7, #14]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <MCP9808_Write8>:

void MCP9808_Write8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af02      	add	r7, sp, #8
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	4608      	mov	r0, r1
 800703a:	4611      	mov	r1, r2
 800703c:	461a      	mov	r2, r3
 800703e:	4603      	mov	r3, r0
 8007040:	817b      	strh	r3, [r7, #10]
 8007042:	460b      	mov	r3, r1
 8007044:	727b      	strb	r3, [r7, #9]
 8007046:	4613      	mov	r3, r2
 8007048:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 800704a:	7a7b      	ldrb	r3, [r7, #9]
 800704c:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val;
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	757b      	strb	r3, [r7, #21]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8007054:	897b      	ldrh	r3, [r7, #10]
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	b299      	uxth	r1, r3
 800705a:	f107 0214 	add.w	r2, r7, #20
 800705e:	2364      	movs	r3, #100	; 0x64
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	2302      	movs	r3, #2
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f003 f9c1 	bl	800a3ec <HAL_I2C_Master_Transmit>
}
 800706a:	bf00      	nop
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <MCP9808_GetCriticalTemp>:

  return val;
}

uint8_t MCP9808_GetCriticalTemp()
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
  return MCP9808_CriticalTemp;
 8007078:	4b03      	ldr	r3, [pc, #12]	; (8007088 <MCP9808_GetCriticalTemp+0x14>)
 800707a:	781b      	ldrb	r3, [r3, #0]
}
 800707c:	4618      	mov	r0, r3
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	200026a6 	.word	0x200026a6

0800708c <MCP9808_GetOvertemp>:

uint8_t MCP9808_GetOvertemp()
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  return MCP9808_Overtemp;
 8007090:	4b03      	ldr	r3, [pc, #12]	; (80070a0 <MCP9808_GetOvertemp+0x14>)
 8007092:	781b      	ldrb	r3, [r3, #0]
}
 8007094:	4618      	mov	r0, r3
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	200026a4 	.word	0x200026a4

080070a4 <PCA9539_WriteReg8>:
 */

#include "pca9539.h"

void PCA9539_WriteReg8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint8_t val)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	4608      	mov	r0, r1
 80070ae:	4611      	mov	r1, r2
 80070b0:	461a      	mov	r2, r3
 80070b2:	4603      	mov	r3, r0
 80070b4:	807b      	strh	r3, [r7, #2]
 80070b6:	460b      	mov	r3, r1
 80070b8:	707b      	strb	r3, [r7, #1]
 80070ba:	4613      	mov	r3, r2
 80070bc:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 80070be:	787b      	ldrb	r3, [r7, #1]
 80070c0:	733b      	strb	r3, [r7, #12]
  writeVals[1] = val;
 80070c2:	783b      	ldrb	r3, [r7, #0]
 80070c4:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 80070c6:	887b      	ldrh	r3, [r7, #2]
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	b299      	uxth	r1, r3
 80070cc:	f107 020c 	add.w	r2, r7, #12
 80070d0:	2364      	movs	r3, #100	; 0x64
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	2302      	movs	r3, #2
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f003 f988 	bl	800a3ec <HAL_I2C_Master_Transmit>
}
 80070dc:	bf00      	nop
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <PCA9539_WriteReg16>:

  return val;
}

void PCA9539_WriteReg16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	4608      	mov	r0, r1
 80070ee:	4611      	mov	r1, r2
 80070f0:	461a      	mov	r2, r3
 80070f2:	4603      	mov	r3, r0
 80070f4:	817b      	strh	r3, [r7, #10]
 80070f6:	460b      	mov	r3, r1
 80070f8:	727b      	strb	r3, [r7, #9]
 80070fa:	4613      	mov	r3, r2
 80070fc:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[3];

  writeVals[0] = reg;
 80070fe:	7a7b      	ldrb	r3, [r7, #9]
 8007100:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val & 0xFF;
 8007102:	88fb      	ldrh	r3, [r7, #6]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	757b      	strb	r3, [r7, #21]
  writeVals[2] = val >> 8;
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	0a1b      	lsrs	r3, r3, #8
 800710c:	b29b      	uxth	r3, r3
 800710e:	b2db      	uxtb	r3, r3
 8007110:	75bb      	strb	r3, [r7, #22]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, 100);
 8007112:	897b      	ldrh	r3, [r7, #10]
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	b299      	uxth	r1, r3
 8007118:	f107 0214 	add.w	r2, r7, #20
 800711c:	2364      	movs	r3, #100	; 0x64
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	2303      	movs	r3, #3
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f003 f962 	bl	800a3ec <HAL_I2C_Master_Transmit>
}
 8007128:	bf00      	nop
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <PCA9635_Init>:


#include <pca9635.h>

void PCA9635_Init(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t blinking)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af02      	add	r7, sp, #8
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	807b      	strh	r3, [r7, #2]
 800713c:	4613      	mov	r3, r2
 800713e:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];

  writeVals[0] = PCA9635_REG_MODE1;
 8007140:	2300      	movs	r3, #0
 8007142:	733b      	strb	r3, [r7, #12]
  writeVals[1] = (PCA9635_MODE1_ALLCALL | PCA9635_MODE1_AI2); //Auto increment all registers
 8007144:	2381      	movs	r3, #129	; 0x81
 8007146:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8007148:	887b      	ldrh	r3, [r7, #2]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	b299      	uxth	r1, r3
 800714e:	f107 020c 	add.w	r2, r7, #12
 8007152:	2364      	movs	r3, #100	; 0x64
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	2302      	movs	r3, #2
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f003 f947 	bl	800a3ec <HAL_I2C_Master_Transmit>

  if(blinking > 0){
 800715e:	787b      	ldrb	r3, [r7, #1]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00e      	beq.n	8007182 <PCA9635_Init+0x52>
    writeVals[0] = PCA9635_REG_MODE2;
 8007164:	2301      	movs	r3, #1
 8007166:	733b      	strb	r3, [r7, #12]
    writeVals[1] = (PCA9635_MODE2_OUTNE | PCA9635_MODE2_OUTDRV | PCA9635_MODE2_DMBLNK);
 8007168:	2325      	movs	r3, #37	; 0x25
 800716a:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 800716c:	887b      	ldrh	r3, [r7, #2]
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	b299      	uxth	r1, r3
 8007172:	f107 020c 	add.w	r2, r7, #12
 8007176:	2364      	movs	r3, #100	; 0x64
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	2302      	movs	r3, #2
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f003 f935 	bl	800a3ec <HAL_I2C_Master_Transmit>
  }
}
 8007182:	bf00      	nop
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <PCA9635_SetPWM>:

void PCA9635_SetPWM(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t channel, uint8_t value)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b086      	sub	sp, #24
 800718e:	af02      	add	r7, sp, #8
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	4608      	mov	r0, r1
 8007194:	4611      	mov	r1, r2
 8007196:	461a      	mov	r2, r3
 8007198:	4603      	mov	r3, r0
 800719a:	807b      	strh	r3, [r7, #2]
 800719c:	460b      	mov	r3, r1
 800719e:	707b      	strb	r3, [r7, #1]
 80071a0:	4613      	mov	r3, r2
 80071a2:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  if((channel >= 0) && (channel < 16)){
 80071a4:	787b      	ldrb	r3, [r7, #1]
 80071a6:	2b0f      	cmp	r3, #15
 80071a8:	d810      	bhi.n	80071cc <PCA9635_SetPWM+0x42>
    writeVals[0] = PCA9635_REG_PWM(channel);
 80071aa:	787b      	ldrb	r3, [r7, #1]
 80071ac:	3302      	adds	r3, #2
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	733b      	strb	r3, [r7, #12]
    writeVals[1] = value;
 80071b2:	783b      	ldrb	r3, [r7, #0]
 80071b4:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 80071b6:	887b      	ldrh	r3, [r7, #2]
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	b299      	uxth	r1, r3
 80071bc:	f107 020c 	add.w	r2, r7, #12
 80071c0:	2364      	movs	r3, #100	; 0x64
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	2302      	movs	r3, #2
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f003 f910 	bl	800a3ec <HAL_I2C_Master_Transmit>
  }
}
 80071cc:	bf00      	nop
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <PCA9635_SetGroupPWM>:

void PCA9635_SetGroupPWM(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t value)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af02      	add	r7, sp, #8
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	807b      	strh	r3, [r7, #2]
 80071e0:	4613      	mov	r3, r2
 80071e2:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];
  writeVals[0] = PCA9635_REG_GRPPWM;
 80071e4:	2312      	movs	r3, #18
 80071e6:	733b      	strb	r3, [r7, #12]
  writeVals[1] = value;
 80071e8:	787b      	ldrb	r3, [r7, #1]
 80071ea:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 80071ec:	887b      	ldrh	r3, [r7, #2]
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	b299      	uxth	r1, r3
 80071f2:	f107 020c 	add.w	r2, r7, #12
 80071f6:	2364      	movs	r3, #100	; 0x64
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	2302      	movs	r3, #2
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f003 f8f5 	bl	800a3ec <HAL_I2C_Master_Transmit>
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <PCA9635_SetGroupFreq>:

void PCA9635_SetGroupFreq(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t value)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af02      	add	r7, sp, #8
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	460b      	mov	r3, r1
 8007214:	807b      	strh	r3, [r7, #2]
 8007216:	4613      	mov	r3, r2
 8007218:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];
  writeVals[0] = PCA9635_REG_GRPFREQ;
 800721a:	2313      	movs	r3, #19
 800721c:	733b      	strb	r3, [r7, #12]
  writeVals[1] = value;
 800721e:	787b      	ldrb	r3, [r7, #1]
 8007220:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8007222:	887b      	ldrh	r3, [r7, #2]
 8007224:	005b      	lsls	r3, r3, #1
 8007226:	b299      	uxth	r1, r3
 8007228:	f107 020c 	add.w	r2, r7, #12
 800722c:	2364      	movs	r3, #100	; 0x64
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	2302      	movs	r3, #2
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f003 f8da 	bl	800a3ec <HAL_I2C_Master_Transmit>
}
 8007238:	bf00      	nop
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <PCA9635_SetAllNum>:

void PCA9635_SetAllNum(I2C_HandleTypeDef* hi2c, uint16_t addr, uint32_t values)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af02      	add	r7, sp, #8
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	460b      	mov	r3, r1
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	817b      	strh	r3, [r7, #10]
  uint8_t writeVals[5];
  writeVals[0] = (PCA9635_REG_LEDOUT_BASE | PCA9635_REG_AI_ALL);
 800724e:	2394      	movs	r3, #148	; 0x94
 8007250:	743b      	strb	r3, [r7, #16]
  writeVals[1] = values & 0xFF;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	b2db      	uxtb	r3, r3
 8007256:	747b      	strb	r3, [r7, #17]
  writeVals[2] = (values >> 8) ;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	0a1b      	lsrs	r3, r3, #8
 800725c:	b2db      	uxtb	r3, r3
 800725e:	74bb      	strb	r3, [r7, #18]
  writeVals[3] = (values >> 16);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	0c1b      	lsrs	r3, r3, #16
 8007264:	b2db      	uxtb	r3, r3
 8007266:	74fb      	strb	r3, [r7, #19]
  writeVals[4] = (values >> 24);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	0e1b      	lsrs	r3, r3, #24
 800726c:	b2db      	uxtb	r3, r3
 800726e:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 5, 100);
 8007270:	897b      	ldrh	r3, [r7, #10]
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	b299      	uxth	r1, r3
 8007276:	f107 0210 	add.w	r2, r7, #16
 800727a:	2364      	movs	r3, #100	; 0x64
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	2305      	movs	r3, #5
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f003 f8b3 	bl	800a3ec <HAL_I2C_Master_Transmit>
}
 8007286:	bf00      	nop
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <PCA9635_SetAll>:

void PCA9635_SetAll(I2C_HandleTypeDef* hi2c, uint16_t addr, PCA9635_LEDOnState_t state[16])
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b088      	sub	sp, #32
 8007292:	af02      	add	r7, sp, #8
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	460b      	mov	r3, r1
 8007298:	607a      	str	r2, [r7, #4]
 800729a:	817b      	strh	r3, [r7, #10]
  uint8_t writeVals[5];
  writeVals[0] = (PCA9635_REG_LEDOUT_BASE | PCA9635_REG_AI_ALL);
 800729c:	2394      	movs	r3, #148	; 0x94
 800729e:	743b      	strb	r3, [r7, #16]
  writeVals[1] = state[0] + (state[1] << 2) + (state[2] << 4) + (state[3] << 6);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	781a      	ldrb	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3301      	adds	r3, #1
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	4413      	add	r3, r2
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3302      	adds	r3, #2
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	4413      	add	r3, r2
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3303      	adds	r3, #3
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	019b      	lsls	r3, r3, #6
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	4413      	add	r3, r2
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	747b      	strb	r3, [r7, #17]
  writeVals[2] = state[4] + (state[5] << 2) + (state[6] << 4) + (state[7] << 6);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3304      	adds	r3, #4
 80072d4:	781a      	ldrb	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3305      	adds	r3, #5
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	4413      	add	r3, r2
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3306      	adds	r3, #6
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	4413      	add	r3, r2
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3307      	adds	r3, #7
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	019b      	lsls	r3, r3, #6
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	4413      	add	r3, r2
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	74bb      	strb	r3, [r7, #18]
  writeVals[3] = state[8] + (state[9] << 2) + (state[10] << 4) + (state[11] << 6);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	3308      	adds	r3, #8
 8007306:	781a      	ldrb	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3309      	adds	r3, #9
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	b2db      	uxtb	r3, r3
 8007312:	4413      	add	r3, r2
 8007314:	b2da      	uxtb	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	330a      	adds	r3, #10
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	011b      	lsls	r3, r3, #4
 800731e:	b2db      	uxtb	r3, r3
 8007320:	4413      	add	r3, r2
 8007322:	b2da      	uxtb	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	330b      	adds	r3, #11
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	019b      	lsls	r3, r3, #6
 800732c:	b2db      	uxtb	r3, r3
 800732e:	4413      	add	r3, r2
 8007330:	b2db      	uxtb	r3, r3
 8007332:	74fb      	strb	r3, [r7, #19]
  writeVals[4] = state[12] + (state[13] << 2) + (state[14] << 4) + (state[15] << 6);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	330c      	adds	r3, #12
 8007338:	781a      	ldrb	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	330d      	adds	r3, #13
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	b2db      	uxtb	r3, r3
 8007344:	4413      	add	r3, r2
 8007346:	b2da      	uxtb	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	330e      	adds	r3, #14
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	011b      	lsls	r3, r3, #4
 8007350:	b2db      	uxtb	r3, r3
 8007352:	4413      	add	r3, r2
 8007354:	b2da      	uxtb	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	330f      	adds	r3, #15
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	019b      	lsls	r3, r3, #6
 800735e:	b2db      	uxtb	r3, r3
 8007360:	4413      	add	r3, r2
 8007362:	b2db      	uxtb	r3, r3
 8007364:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 5, 100);
 8007366:	897b      	ldrh	r3, [r7, #10]
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	b299      	uxth	r1, r3
 800736c:	f107 0210 	add.w	r2, r7, #16
 8007370:	2364      	movs	r3, #100	; 0x64
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	2305      	movs	r3, #5
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f003 f838 	bl	800a3ec <HAL_I2C_Master_Transmit>
}
 800737c:	bf00      	nop
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <PCAL9554B_WriteReg8>:
 */

#include "pcal9554b.h"

void PCAL9554B_WriteReg8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint8_t val)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af02      	add	r7, sp, #8
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	4608      	mov	r0, r1
 800738e:	4611      	mov	r1, r2
 8007390:	461a      	mov	r2, r3
 8007392:	4603      	mov	r3, r0
 8007394:	807b      	strh	r3, [r7, #2]
 8007396:	460b      	mov	r3, r1
 8007398:	707b      	strb	r3, [r7, #1]
 800739a:	4613      	mov	r3, r2
 800739c:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 800739e:	787b      	ldrb	r3, [r7, #1]
 80073a0:	733b      	strb	r3, [r7, #12]
  writeVals[1] = val;
 80073a2:	783b      	ldrb	r3, [r7, #0]
 80073a4:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 80073a6:	887b      	ldrh	r3, [r7, #2]
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	b299      	uxth	r1, r3
 80073ac:	f107 020c 	add.w	r2, r7, #12
 80073b0:	2364      	movs	r3, #100	; 0x64
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	2302      	movs	r3, #2
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f003 f818 	bl	800a3ec <HAL_I2C_Master_Transmit>
}
 80073bc:	bf00      	nop
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <PCAL9554B_ReadReg8>:

uint8_t PCAL9554B_ReadReg8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af02      	add	r7, sp, #8
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	807b      	strh	r3, [r7, #2]
 80073d0:	4613      	mov	r3, r2
 80073d2:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[1];
  uint8_t readVals[1];

  uint8_t val = 0xFF;
 80073d4:	23ff      	movs	r3, #255	; 0xff
 80073d6:	73fb      	strb	r3, [r7, #15]

  writeVals[0] = reg;
 80073d8:	787b      	ldrb	r3, [r7, #1]
 80073da:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, 100);
 80073dc:	887b      	ldrh	r3, [r7, #2]
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	b299      	uxth	r1, r3
 80073e2:	f107 020c 	add.w	r2, r7, #12
 80073e6:	2364      	movs	r3, #100	; 0x64
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	2301      	movs	r3, #1
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f002 fffd 	bl	800a3ec <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 1, 100);
 80073f2:	887b      	ldrh	r3, [r7, #2]
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	b299      	uxth	r1, r3
 80073f8:	f107 0208 	add.w	r2, r7, #8
 80073fc:	2364      	movs	r3, #100	; 0x64
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	2301      	movs	r3, #1
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f003 f8e6 	bl	800a5d4 <HAL_I2C_Master_Receive>

  val = readVals[0];
 8007408:	7a3b      	ldrb	r3, [r7, #8]
 800740a:	73fb      	strb	r3, [r7, #15]

  return val;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <TurningOff>:

#include "profet.h"

//Transient state
static void TurningOff(volatile ProfetTypeDef *profet)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	899b      	ldrh	r3, [r3, #12]
 8007422:	b29b      	uxth	r3, r3
 8007424:	43da      	mvns	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	8819      	ldrh	r1, [r3, #0]
 800742c:	b209      	sxth	r1, r1
 800742e:	b212      	sxth	r2, r2
 8007430:	400a      	ands	r2, r1
 8007432:	b212      	sxth	r2, r2
 8007434:	b292      	uxth	r2, r2
 8007436:	801a      	strh	r2, [r3, #0]
  profet->eState = OFF;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	705a      	strb	r2, [r3, #1]
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <Off>:

static void Off(volatile ProfetTypeDef *profet)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  profet->cState = 'O';
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	224f      	movs	r2, #79	; 0x4f
 8007456:	70da      	strb	r2, [r3, #3]

  //Short circuit to battery check
  //TODO: Collapsing field will trigger this
  if (profet->nIL > 0.1) {
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	8c1b      	ldrh	r3, [r3, #32]
    //profet->eState = SHORT_CIRCUITING;
  }

  //Check for turn on
  if (profet->eReqState == ON) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	789b      	ldrb	r3, [r3, #2]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b01      	cmp	r3, #1
 8007464:	d102      	bne.n	800746c <Off+0x22>
    profet->eState = TURNING_ON;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2208      	movs	r2, #8
 800746a:	705a      	strb	r2, [r3, #1]
  }
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <InRushing>:

//Transient state
static void InRushing(volatile ProfetTypeDef *profet)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port |= profet->nIN_Pin;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	899b      	ldrh	r3, [r3, #12]
 8007484:	b299      	uxth	r1, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	881a      	ldrh	r2, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	b292      	uxth	r2, r2
 8007490:	801a      	strh	r2, [r3, #0]
  profet->nIL_On_Time = HAL_GetTick();
 8007492:	f000 fb6f 	bl	8007b74 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	61da      	str	r2, [r3, #28]
  profet->eState  = IN_RUSH;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	705a      	strb	r2, [r3, #1]
}
 80074a2:	bf00      	nop
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <InRush>:

static void InRush(volatile ProfetTypeDef *profet)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  if (profet->nIL > profet->nIL_InRush_Limit) {
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	8c1b      	ldrh	r3, [r3, #32]
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	8adb      	ldrh	r3, [r3, #22]
 80074bc:	b29b      	uxth	r3, r3
 80074be:	429a      	cmp	r2, r3
 80074c0:	d902      	bls.n	80074c8 <InRush+0x1e>
    profet->eState = OVERCURRENTING;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	220b      	movs	r2, #11
 80074c6:	705a      	strb	r2, [r3, #1]
  }
  if((HAL_GetTick() - profet->nIL_On_Time) > profet->nIL_InRush_Time){
 80074c8:	f000 fb54 	bl	8007b74 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	8b12      	ldrh	r2, [r2, #24]
 80074d8:	b292      	uxth	r2, r2
 80074da:	4293      	cmp	r3, r2
 80074dc:	d902      	bls.n	80074e4 <InRush+0x3a>
    profet->eState = TURNING_ON;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2208      	movs	r2, #8
 80074e2:	705a      	strb	r2, [r3, #1]
  }
  //Check for turn off
  if (profet->eReqState == OFF) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	789b      	ldrb	r3, [r3, #2]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d102      	bne.n	80074f4 <InRush+0x4a>
    profet->eState = TURNING_OFF;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2207      	movs	r2, #7
 80074f2:	705a      	strb	r2, [r3, #1]
  }
}
 80074f4:	bf00      	nop
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <TurningOn>:

//Transient state
static void TurningOn(volatile ProfetTypeDef *profet)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port |= profet->nIN_Pin;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	899b      	ldrh	r3, [r3, #12]
 8007508:	b299      	uxth	r1, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	881a      	ldrh	r2, [r3, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	b292      	uxth	r2, r2
 8007514:	801a      	strh	r2, [r3, #0]
  profet->eState = ON;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	705a      	strb	r2, [r3, #1]
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <On>:

static void On(volatile ProfetTypeDef *profet)
{
 8007528:	b590      	push	{r4, r7, lr}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  profet->cState = '|';
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	227c      	movs	r2, #124	; 0x7c
 8007534:	70da      	strb	r2, [r3, #3]

  //TODO: Dead short vs open load
  //Dead short will register no current
  //How to differentiate between open load?
  if (profet->nIL == 0) {
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	8c1b      	ldrh	r3, [r3, #32]
  }

  //Check for fault (device overcurrent/overtemp/short)
  //IL will be very high
  //TODO: Calculate value from datasheet
  if (profet->nIS_Avg > 30000) {
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	89db      	ldrh	r3, [r3, #14]
 800753e:	b29b      	uxth	r3, r3
 8007540:	f247 5230 	movw	r2, #30000	; 0x7530
 8007544:	4293      	cmp	r3, r2
 8007546:	d902      	bls.n	800754e <On+0x26>
    profet->eState = FAULTING;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	220c      	movs	r2, #12
 800754c:	705a      	strb	r2, [r3, #1]
  }

  //Check for turn off
  if (profet->eReqState == OFF) {
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	789b      	ldrb	r3, [r3, #2]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <On+0x36>
    profet->eState = TURNING_OFF;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2207      	movs	r2, #7
 800755c:	705a      	strb	r2, [r3, #1]
  }

  if ((profet->nIL > profet->nIL_Limit) && (profet->nOC_Detected == 0)){
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	8c1b      	ldrh	r3, [r3, #32]
 8007562:	b29a      	uxth	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	8a9b      	ldrh	r3, [r3, #20]
 8007568:	b29b      	uxth	r3, r3
 800756a:	429a      	cmp	r2, r3
 800756c:	d90e      	bls.n	800758c <On+0x64>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d108      	bne.n	800758c <On+0x64>
    profet->nIL_On_Time = HAL_GetTick();
 800757a:	f000 fafb 	bl	8007b74 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	61da      	str	r2, [r3, #28]
    profet->nOC_Detected = 1;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  }

  if ((profet->nIL < profet->nIL_Limit) && (profet->nOC_Detected > 0)){
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8c1b      	ldrh	r3, [r3, #32]
 8007590:	b29a      	uxth	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	8a9b      	ldrh	r3, [r3, #20]
 8007596:	b29b      	uxth	r3, r3
 8007598:	429a      	cmp	r2, r3
 800759a:	d209      	bcs.n	80075b0 <On+0x88>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <On+0x88>
    profet->nOC_Detected = 0;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  }

  if(profet->nOC_Detected > 0){
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d017      	beq.n	80075ec <On+0xc4>
    if((HAL_GetTick() - profet->nIL_On_Time) > GetTripTime(profet->eModel, profet->nIL, profet->nIL_Limit)){
 80075bc:	f000 fada 	bl	8007b74 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	1ad4      	subs	r4, r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	b2d8      	uxtb	r0, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	8c1b      	ldrh	r3, [r3, #32]
 80075d2:	b299      	uxth	r1, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	8a9b      	ldrh	r3, [r3, #20]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	461a      	mov	r2, r3
 80075dc:	f000 f9b0 	bl	8007940 <GetTripTime>
 80075e0:	4603      	mov	r3, r0
 80075e2:	429c      	cmp	r4, r3
 80075e4:	d902      	bls.n	80075ec <On+0xc4>
      profet->eState = OVERCURRENTING;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	220b      	movs	r2, #11
 80075ea:	705a      	strb	r2, [r3, #1]
    }
  }
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd90      	pop	{r4, r7, pc}

080075f4 <Overcurrenting>:

//Transient state
static void Overcurrenting(volatile ProfetTypeDef *profet)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  profet->nValStore = profet->nIL;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8c1b      	ldrh	r3, [r3, #32]
 8007600:	b29a      	uxth	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	849a      	strh	r2, [r3, #36]	; 0x24
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	899b      	ldrh	r3, [r3, #12]
 800760a:	b29b      	uxth	r3, r3
 800760c:	43da      	mvns	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	8819      	ldrh	r1, [r3, #0]
 8007614:	b209      	sxth	r1, r1
 8007616:	b212      	sxth	r2, r2
 8007618:	400a      	ands	r2, r1
 800761a:	b212      	sxth	r2, r2
 800761c:	b292      	uxth	r2, r2
 800761e:	801a      	strh	r2, [r3, #0]
  profet->nOC_TriggerTime = HAL_GetTick();
 8007620:	f000 faa8 	bl	8007b74 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	62da      	str	r2, [r3, #44]	; 0x2c
  profet->nOC_ResetCount++;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007630:	b2db      	uxtb	r3, r3
 8007632:	3301      	adds	r3, #1
 8007634:	b2da      	uxtb	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  profet->eState = OVERCURRENT;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2204      	movs	r2, #4
 8007640:	705a      	strb	r2, [r3, #1]
}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <Overcurrent>:

static void Overcurrent(volatile ProfetTypeDef *profet)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b082      	sub	sp, #8
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  profet->cState = 'C';
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2243      	movs	r2, #67	; 0x43
 8007656:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	899b      	ldrh	r3, [r3, #12]
 800765c:	b29b      	uxth	r3, r3
 800765e:	43da      	mvns	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	8819      	ldrh	r1, [r3, #0]
 8007666:	b209      	sxth	r1, r1
 8007668:	b212      	sxth	r2, r2
 800766a:	400a      	ands	r2, r1
 800766c:	b212      	sxth	r2, r2
 800766e:	b292      	uxth	r2, r2
 8007670:	801a      	strh	r2, [r3, #0]
  if(profet->nOC_ResetCount <= profet->nOC_ResetLimit){
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007678:	b2da      	uxtb	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007680:	b2db      	uxtb	r3, r3
 8007682:	429a      	cmp	r2, r3
 8007684:	d80e      	bhi.n	80076a4 <Overcurrent+0x5a>
    if((HAL_GetTick() - profet->nOC_TriggerTime) > profet->nOC_ResetTime){
 8007686:	f000 fa75 	bl	8007b74 <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007696:	b292      	uxth	r2, r2
 8007698:	4293      	cmp	r3, r2
 800769a:	d906      	bls.n	80076aa <Overcurrent+0x60>
      profet->eState = IN_RUSHING;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2209      	movs	r2, #9
 80076a0:	705a      	strb	r2, [r3, #1]
 80076a2:	e002      	b.n	80076aa <Overcurrent+0x60>
    }
  }
  else{
    profet->eState = SUSPENDING;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	220d      	movs	r2, #13
 80076a8:	705a      	strb	r2, [r3, #1]
  }

  //Check for turn off
  if (profet->eReqState == OFF) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	789b      	ldrb	r3, [r3, #2]
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d106      	bne.n	80076c2 <Overcurrent+0x78>
    profet->nOC_ResetCount = 0;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    profet->eState = TURNING_OFF;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2207      	movs	r2, #7
 80076c0:	705a      	strb	r2, [r3, #1]
  }
}
 80076c2:	bf00      	nop
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <ShortCircuiting>:

//Transient state
static void ShortCircuiting(volatile ProfetTypeDef *profet)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  profet->nValStore = profet->nIL;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	8c1b      	ldrh	r3, [r3, #32]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	849a      	strh	r2, [r3, #36]	; 0x24
  profet->eState = SHORT_CIRCUIT;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2203      	movs	r2, #3
 80076e0:	705a      	strb	r2, [r3, #1]
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <ShortCircuit>:

static void ShortCircuit(volatile ProfetTypeDef *profet)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  profet->cState = 'S';
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2253      	movs	r2, #83	; 0x53
 80076fa:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	899b      	ldrh	r3, [r3, #12]
 8007700:	b29b      	uxth	r3, r3
 8007702:	43da      	mvns	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	8819      	ldrh	r1, [r3, #0]
 800770a:	b209      	sxth	r1, r1
 800770c:	b212      	sxth	r2, r2
 800770e:	400a      	ands	r2, r1
 8007710:	b212      	sxth	r2, r2
 8007712:	b292      	uxth	r2, r2
 8007714:	801a      	strh	r2, [r3, #0]
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <Suspending>:

//Transient state
static void Suspending(volatile ProfetTypeDef *profet)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	899b      	ldrh	r3, [r3, #12]
 800772e:	b29b      	uxth	r3, r3
 8007730:	43da      	mvns	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	8819      	ldrh	r1, [r3, #0]
 8007738:	b209      	sxth	r1, r1
 800773a:	b212      	sxth	r2, r2
 800773c:	400a      	ands	r2, r1
 800773e:	b212      	sxth	r2, r2
 8007740:	b292      	uxth	r2, r2
 8007742:	801a      	strh	r2, [r3, #0]
  profet->eState = SUSPENDED;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2206      	movs	r2, #6
 8007748:	705a      	strb	r2, [r3, #1]
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <Suspended>:

static void Suspended(volatile ProfetTypeDef *profet)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  profet->cState = 'X';
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2258      	movs	r2, #88	; 0x58
 8007762:	70da      	strb	r2, [r3, #3]
  //TODO: replace with a reset
  if (profet->eReqState == OFF){
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	789b      	ldrb	r3, [r3, #2]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d106      	bne.n	800777c <Suspended+0x26>
    profet->nOC_ResetCount = 0;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    profet->eState = TURNING_OFF;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2207      	movs	r2, #7
 800777a:	705a      	strb	r2, [r3, #1]
  }
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <Faulting>:

//Transient state
static void Faulting(volatile ProfetTypeDef *profet)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	899b      	ldrh	r3, [r3, #12]
 8007794:	b29b      	uxth	r3, r3
 8007796:	43da      	mvns	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	8819      	ldrh	r1, [r3, #0]
 800779e:	b209      	sxth	r1, r1
 80077a0:	b212      	sxth	r2, r2
 80077a2:	400a      	ands	r2, r1
 80077a4:	b212      	sxth	r2, r2
 80077a6:	b292      	uxth	r2, r2
 80077a8:	801a      	strh	r2, [r3, #0]
  profet->eState = FAULT;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2205      	movs	r2, #5
 80077ae:	705a      	strb	r2, [r3, #1]
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <Fault>:

static void Fault(volatile ProfetTypeDef *profet)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  profet->cState = 'F';
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2246      	movs	r2, #70	; 0x46
 80077c8:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	899b      	ldrh	r3, [r3, #12]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	43da      	mvns	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	8819      	ldrh	r1, [r3, #0]
 80077d8:	b209      	sxth	r1, r1
 80077da:	b212      	sxth	r2, r2
 80077dc:	400a      	ands	r2, r1
 80077de:	b212      	sxth	r2, r2
 80077e0:	b292      	uxth	r2, r2
 80077e2:	801a      	strh	r2, [r3, #0]
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <Profet_SM>:

void Profet_SM(volatile ProfetTypeDef *profet) {
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]

  switch (profet->eState) {
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	785b      	ldrb	r3, [r3, #1]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b0d      	cmp	r3, #13
 8007800:	d856      	bhi.n	80078b0 <Profet_SM+0xc0>
 8007802:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <Profet_SM+0x18>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	08007849 	.word	0x08007849
 800780c:	08007869 	.word	0x08007869
 8007810:	08007859 	.word	0x08007859
 8007814:	08007879 	.word	0x08007879
 8007818:	08007889 	.word	0x08007889
 800781c:	08007899 	.word	0x08007899
 8007820:	080078a9 	.word	0x080078a9
 8007824:	08007841 	.word	0x08007841
 8007828:	08007861 	.word	0x08007861
 800782c:	08007851 	.word	0x08007851
 8007830:	08007871 	.word	0x08007871
 8007834:	08007881 	.word	0x08007881
 8007838:	08007891 	.word	0x08007891
 800783c:	080078a1 	.word	0x080078a1
  case TURNING_OFF:
    TurningOff(profet);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fde8 	bl	8007416 <TurningOff>
    break;
 8007846:	e033      	b.n	80078b0 <Profet_SM+0xc0>

  case OFF:
    Off(profet);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff fdfe 	bl	800744a <Off>
    break;
 800784e:	e02f      	b.n	80078b0 <Profet_SM+0xc0>

  case IN_RUSHING:
    InRushing(profet);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff fe11 	bl	8007478 <InRushing>
    break;
 8007856:	e02b      	b.n	80078b0 <Profet_SM+0xc0>

  case IN_RUSH:
    InRush(profet);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff fe26 	bl	80074aa <InRush>
    break;
 800785e:	e027      	b.n	80078b0 <Profet_SM+0xc0>

  case TURNING_ON:
    TurningOn(profet);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff fe4b 	bl	80074fc <TurningOn>
    break;
 8007866:	e023      	b.n	80078b0 <Profet_SM+0xc0>

  case ON:
    On(profet);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff fe5d 	bl	8007528 <On>
    break;
 800786e:	e01f      	b.n	80078b0 <Profet_SM+0xc0>

  case SHORT_CIRCUITING:
    ShortCircuiting(profet);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff ff2a 	bl	80076ca <ShortCircuiting>
    break;
 8007876:	e01b      	b.n	80078b0 <Profet_SM+0xc0>

  case SHORT_CIRCUIT:
    ShortCircuit(profet);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff ff38 	bl	80076ee <ShortCircuit>
    break;
 800787e:	e017      	b.n	80078b0 <Profet_SM+0xc0>

  case OVERCURRENTING:
    Overcurrenting(profet);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff feb7 	bl	80075f4 <Overcurrenting>
    break;
 8007886:	e013      	b.n	80078b0 <Profet_SM+0xc0>

  case OVERCURRENT:
    Overcurrent(profet);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff fede 	bl	800764a <Overcurrent>
    break;
 800788e:	e00f      	b.n	80078b0 <Profet_SM+0xc0>

  case FAULTING:
    Faulting(profet);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff ff79 	bl	8007788 <Faulting>
    break;
 8007896:	e00b      	b.n	80078b0 <Profet_SM+0xc0>

  case FAULT:
    Fault(profet);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff ff8f 	bl	80077bc <Fault>
    break;
 800789e:	e007      	b.n	80078b0 <Profet_SM+0xc0>

  case SUSPENDING:
    Suspending(profet);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7ff ff3e 	bl	8007722 <Suspending>
    break;
 80078a6:	e003      	b.n	80078b0 <Profet_SM+0xc0>

  case SUSPENDED:
    Suspended(profet);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff ff54 	bl	8007756 <Suspended>
    break;
 80078ae:	bf00      	nop

  }
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <Profet_UpdateIS>:

void Profet_UpdateIS(volatile ProfetTypeDef *profet, uint16_t newVal)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	807b      	strh	r3, [r7, #2]
  //Moving average without array or dividing
  //Store the new val, incase we need a non-filtered val elsewhere
  profet->nIS = newVal;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	887a      	ldrh	r2, [r7, #2]
 80078c8:	845a      	strh	r2, [r3, #34]	; 0x22
  //Add new value to old sum
  profet->nIS_Sum += profet->nIS;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	441a      	add	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	611a      	str	r2, [r3, #16]
  //Shift sum by 1 which is equal to dividing by 2
  profet->nIS_Avg = profet->nIS_Sum >> 1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	085b      	lsrs	r3, r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	81da      	strh	r2, [r3, #14]
  //Remove the average from the sum, otherwise sum always goes up never down
  profet->nIS_Sum -= profet->nIS_Avg;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	89db      	ldrh	r3, [r3, #14]
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	1a9a      	subs	r2, r3, r2
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	611a      	str	r2, [r3, #16]

  //Convert IS to IL (actual current)
  profet->nIL = (uint16_t)(((float)profet->nIS_Avg * profet->fKilis) / 100.0);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	89db      	ldrh	r3, [r3, #14]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	ee07 3a90 	vmov	s15, r3
 8007900:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800790a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790e:	ee17 0a90 	vmov	r0, s15
 8007912:	f7f8 fdc1 	bl	8000498 <__aeabi_f2d>
 8007916:	f04f 0200 	mov.w	r2, #0
 800791a:	4b08      	ldr	r3, [pc, #32]	; (800793c <Profet_UpdateIS+0x84>)
 800791c:	f7f8 ff3e 	bl	800079c <__aeabi_ddiv>
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	4610      	mov	r0, r2
 8007926:	4619      	mov	r1, r3
 8007928:	f7f9 f820 	bl	800096c <__aeabi_d2uiz>
 800792c:	4603      	mov	r3, r0
 800792e:	b29a      	uxth	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	841a      	strh	r2, [r3, #32]
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	40590000 	.word	0x40590000

08007940 <GetTripTime>:

uint32_t GetTripTime(ProfetModelTypeDef eModel, uint16_t nIL, uint16_t nMaxIL)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	71fb      	strb	r3, [r7, #7]
 800794a:	460b      	mov	r3, r1
 800794c:	80bb      	strh	r3, [r7, #4]
 800794e:	4613      	mov	r3, r2
 8007950:	807b      	strh	r3, [r7, #2]
  //Multiply by 10 to include first decimal point
  // 25A / 5A = 5
  // 5 * 10 = 50 nOCMult
  //Subtract 10 to start at index 0
  // nOCMult = 40
  uint8_t nOCMult = (uint8_t)(((float)nIL / (float)nMaxIL) * 10.0);
 8007952:	88bb      	ldrh	r3, [r7, #4]
 8007954:	ee07 3a90 	vmov	s15, r3
 8007958:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800795c:	887b      	ldrh	r3, [r7, #2]
 800795e:	ee07 3a90 	vmov	s15, r3
 8007962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007966:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800796a:	ee16 0a90 	vmov	r0, s13
 800796e:	f7f8 fd93 	bl	8000498 <__aeabi_f2d>
 8007972:	f04f 0200 	mov.w	r2, #0
 8007976:	4b2b      	ldr	r3, [pc, #172]	; (8007a24 <GetTripTime+0xe4>)
 8007978:	f7f8 fde6 	bl	8000548 <__aeabi_dmul>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4610      	mov	r0, r2
 8007982:	4619      	mov	r1, r3
 8007984:	f7f8 fff2 	bl	800096c <__aeabi_d2uiz>
 8007988:	4603      	mov	r3, r0
 800798a:	75fb      	strb	r3, [r7, #23]
  nOCMult -= 10; //Subtract 10 to start at index 0
 800798c:	7dfb      	ldrb	r3, [r7, #23]
 800798e:	3b0a      	subs	r3, #10
 8007990:	75fb      	strb	r3, [r7, #23]

  if(nOCMult < 0)
    nOCMult = 0;
  if(nOCMult > 91)
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	2b5b      	cmp	r3, #91	; 0x5b
 8007996:	d901      	bls.n	800799c <GetTripTime+0x5c>
    nOCMult = 91;
 8007998:	235b      	movs	r3, #91	; 0x5b
 800799a:	75fb      	strb	r3, [r7, #23]
      0x0273U,0x0260U,0x024EU,0x023DU,0x022DU,0x021DU,0x020EU,0x0200U,0x01F2U,0x01E5U,0x01D8U,
      0x01CBU,0x01C0U,0x01B4U,0x01A9U,0x019EU,0x0194U,0x018AU,0x0181U,0x0177U,0x016EU,0x0166U,
      0x015DU,0x0155U,0x014EU
  };

  uint16_t nTripTimeRaw = fTripTimeLookupTable[nOCMult];
 800799c:	7dfb      	ldrb	r3, [r7, #23]
 800799e:	4a22      	ldr	r2, [pc, #136]	; (8007a28 <GetTripTime+0xe8>)
 80079a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079a4:	81fb      	strh	r3, [r7, #14]
       0.93,0.94,0.95,0.96,0.97,0.98,0.99,1,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,
       1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.2,1.21,1.22,1.23,1.24,
       1.25,1.26,1.27,1.28,1.29,1.3,1.31,1.32,1.33,1.34,1.35,1.36,1.37,1.38,1.39,1.40
   };

  uint32_t nTripTime = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	60bb      	str	r3, [r7, #8]
  float fTripTimeMult = 0.0;
 80079aa:	f04f 0300 	mov.w	r3, #0
 80079ae:	613b      	str	r3, [r7, #16]

  switch(eModel){
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d005      	beq.n	80079c2 <GetTripTime+0x82>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	db21      	blt.n	80079fe <GetTripTime+0xbe>
 80079ba:	3b01      	subs	r3, #1
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d81e      	bhi.n	80079fe <GetTripTime+0xbe>
 80079c0:	e00e      	b.n	80079e0 <GetTripTime+0xa0>
  case BTS7002_1EPP:
    if(nMaxIL < 200)
 80079c2:	887b      	ldrh	r3, [r7, #2]
 80079c4:	2bc7      	cmp	r3, #199	; 0xc7
 80079c6:	d806      	bhi.n	80079d6 <GetTripTime+0x96>
      fTripTimeMult = fTripTimeMult_7002[nMaxIL];
 80079c8:	887b      	ldrh	r3, [r7, #2]
 80079ca:	4a18      	ldr	r2, [pc, #96]	; (8007a2c <GetTripTime+0xec>)
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	613b      	str	r3, [r7, #16]
    else
      fTripTimeMult = fTripTimeMult_7002[199];
    break;
 80079d4:	e013      	b.n	80079fe <GetTripTime+0xbe>
      fTripTimeMult = fTripTimeMult_7002[199];
 80079d6:	4b15      	ldr	r3, [pc, #84]	; (8007a2c <GetTripTime+0xec>)
 80079d8:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 80079dc:	613b      	str	r3, [r7, #16]
    break;
 80079de:	e00e      	b.n	80079fe <GetTripTime+0xbe>

  case BTS7008_2EPA_CH1:
  case BTS7008_2EPA_CH2:
    if(nMaxIL < 80)
 80079e0:	887b      	ldrh	r3, [r7, #2]
 80079e2:	2b4f      	cmp	r3, #79	; 0x4f
 80079e4:	d806      	bhi.n	80079f4 <GetTripTime+0xb4>
      fTripTimeMult = fTripTimeMult_7008[nMaxIL];
 80079e6:	887b      	ldrh	r3, [r7, #2]
 80079e8:	4a11      	ldr	r2, [pc, #68]	; (8007a30 <GetTripTime+0xf0>)
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	613b      	str	r3, [r7, #16]
    else
      fTripTimeMult = fTripTimeMult_7008[79];
    break;
 80079f2:	e003      	b.n	80079fc <GetTripTime+0xbc>
      fTripTimeMult = fTripTimeMult_7008[79];
 80079f4:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <GetTripTime+0xf0>)
 80079f6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80079fa:	613b      	str	r3, [r7, #16]
    break;
 80079fc:	bf00      	nop
  }

  nTripTime = (uint32_t)(nTripTimeRaw * fTripTimeMult);
 80079fe:	89fb      	ldrh	r3, [r7, #14]
 8007a00:	ee07 3a90 	vmov	s15, r3
 8007a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a08:	edd7 7a04 	vldr	s15, [r7, #16]
 8007a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a14:	ee17 3a90 	vmov	r3, s15
 8007a18:	60bb      	str	r3, [r7, #8]

  return nTripTime;
 8007a1a:	68bb      	ldr	r3, [r7, #8]

}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	40240000 	.word	0x40240000
 8007a28:	0801664c 	.word	0x0801664c
 8007a2c:	08016704 	.word	0x08016704
 8007a30:	08016a24 	.word	0x08016a24

08007a34 <CheckPushbutton>:
 */

#include "pushbutton.h"

void CheckPushbutton(PushbuttonConfig_t* pb, PushbuttonMode_t mode, uint16_t nInput, uint16_t* nOutput, uint16_t nDebounceTime)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	607b      	str	r3, [r7, #4]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	72fb      	strb	r3, [r7, #11]
 8007a42:	4613      	mov	r3, r2
 8007a44:	813b      	strh	r3, [r7, #8]
  //=======================================================
  //Debounce and latch logic
  //=======================================================

  if(mode == MODE_MOMENTARY)
 8007a46:	7afb      	ldrb	r3, [r7, #11]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d132      	bne.n	8007ab2 <CheckPushbutton+0x7e>
  {
    //Check for button change
    //Store trigger time
    if(nInput != pb->nLastState)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	893a      	ldrh	r2, [r7, #8]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d015      	beq.n	8007a84 <CheckPushbutton+0x50>
    {
      if(    ((nInput == 1) && (*nOutput == 0)) //Rising
 8007a58:	893b      	ldrh	r3, [r7, #8]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d103      	bne.n	8007a66 <CheckPushbutton+0x32>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d006      	beq.n	8007a74 <CheckPushbutton+0x40>
          || ((nInput == 0) && (*nOutput == 1))) //Falling
 8007a66:	893b      	ldrh	r3, [r7, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10b      	bne.n	8007a84 <CheckPushbutton+0x50>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d107      	bne.n	8007a84 <CheckPushbutton+0x50>
      {
        pb->nLastTrigTime = HAL_GetTick();
 8007a74:	f000 f87e 	bl	8007b74 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	605a      	str	r2, [r3, #4]
        pb->nCheckTime = 1;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	721a      	strb	r2, [r3, #8]
      }
    }

    pb->nLastState = nInput;
 8007a84:	893b      	ldrh	r3, [r7, #8]
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	701a      	strb	r2, [r3, #0]

    if((pb->nCheckTime > 0) && ((HAL_GetTick() - pb->nLastTrigTime) > nDebounceTime))
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	7a1b      	ldrb	r3, [r3, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00e      	beq.n	8007ab2 <CheckPushbutton+0x7e>
 8007a94:	f000 f86e 	bl	8007b74 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	8b3b      	ldrh	r3, [r7, #24]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d905      	bls.n	8007ab2 <CheckPushbutton+0x7e>
    {
      pb->nCheckTime = 0;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	721a      	strb	r2, [r3, #8]
      *nOutput = nInput;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	893a      	ldrh	r2, [r7, #8]
 8007ab0:	801a      	strh	r2, [r3, #0]
    }

    //Don't change output
  }

  if(mode == MODE_LATCHING)
 8007ab2:	7afb      	ldrb	r3, [r7, #11]
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d12e      	bne.n	8007b16 <CheckPushbutton+0xe2>
  {
    //Check for rising trigger
    //Store trigger time
    if((nInput != pb->nLastState) && (nInput == 1))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	893a      	ldrh	r2, [r7, #8]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d00a      	beq.n	8007ada <CheckPushbutton+0xa6>
 8007ac4:	893b      	ldrh	r3, [r7, #8]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d107      	bne.n	8007ada <CheckPushbutton+0xa6>
    {
      pb->nLastTrigTime = HAL_GetTick();
 8007aca:	f000 f853 	bl	8007b74 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	605a      	str	r2, [r3, #4]
      pb->nCheckTime = 1;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	721a      	strb	r2, [r3, #8]
    }

    pb->nLastState = nInput;
 8007ada:	893b      	ldrh	r3, [r7, #8]
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	701a      	strb	r2, [r3, #0]

    if((pb->nCheckTime > 0) && ((HAL_GetTick() - pb->nLastTrigTime) > nDebounceTime))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	7a1b      	ldrb	r3, [r3, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d015      	beq.n	8007b16 <CheckPushbutton+0xe2>
 8007aea:	f000 f843 	bl	8007b74 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	1ad2      	subs	r2, r2, r3
 8007af6:	8b3b      	ldrh	r3, [r7, #24]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d90c      	bls.n	8007b16 <CheckPushbutton+0xe2>
    {
      pb->nCheckTime = 0;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	721a      	strb	r2, [r3, #8]
      *nOutput = !*nOutput;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bf0c      	ite	eq
 8007b0a:	2301      	moveq	r3, #1
 8007b0c:	2300      	movne	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8007b16:	bf00      	nop
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b24:	4b08      	ldr	r3, [pc, #32]	; (8007b48 <HAL_Init+0x28>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a07      	ldr	r2, [pc, #28]	; (8007b48 <HAL_Init+0x28>)
 8007b2a:	f043 0310 	orr.w	r3, r3, #16
 8007b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b30:	2003      	movs	r0, #3
 8007b32:	f001 ff4c 	bl	80099ce <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b36:	2000      	movs	r0, #0
 8007b38:	f7fe fd94 	bl	8006664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b3c:	f7fe fb76 	bl	800622c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	40022000 	.word	0x40022000

08007b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007b50:	4b06      	ldr	r3, [pc, #24]	; (8007b6c <HAL_IncTick+0x20>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <HAL_IncTick+0x24>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	4a04      	ldr	r2, [pc, #16]	; (8007b70 <HAL_IncTick+0x24>)
 8007b5e:	6013      	str	r3, [r2, #0]
}
 8007b60:	bf00      	nop
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	20000018 	.word	0x20000018
 8007b70:	200026a8 	.word	0x200026a8

08007b74 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
  return uwTick;  
 8007b78:	4b03      	ldr	r3, [pc, #12]	; (8007b88 <HAL_GetTick+0x14>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	200026a8 	.word	0x200026a8

08007b8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b09a      	sub	sp, #104	; 0x68
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e1c9      	b.n	8007f7c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d176      	bne.n	8007ce8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d152      	bne.n	8007ca8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7fe fb2d 	bl	800627c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d13b      	bne.n	8007ca8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 ff6d 	bl	8008b10 <ADC_Disable>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d12f      	bne.n	8007ca8 <HAL_ADC_Init+0xe0>
 8007c48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d12b      	bne.n	8007ca8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007c58:	f023 0302 	bic.w	r3, r3, #2
 8007c5c:	f043 0202 	orr.w	r2, r3, #2
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689a      	ldr	r2, [r3, #8]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c72:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c82:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007c84:	4b86      	ldr	r3, [pc, #536]	; (8007ea0 <HAL_ADC_Init+0x2d8>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a86      	ldr	r2, [pc, #536]	; (8007ea4 <HAL_ADC_Init+0x2dc>)
 8007c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8e:	0c9a      	lsrs	r2, r3, #18
 8007c90:	4613      	mov	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007c9a:	e002      	b.n	8007ca2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1f9      	bne.n	8007c9c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d007      	beq.n	8007cc6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8007cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cc4:	d110      	bne.n	8007ce8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	f023 0312 	bic.w	r3, r3, #18
 8007cce:	f043 0210 	orr.w	r2, r3, #16
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cda:	f043 0201 	orr.w	r2, r3, #1
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cec:	f003 0310 	and.w	r3, r3, #16
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f040 8136 	bne.w	8007f62 <HAL_ADC_Init+0x39a>
 8007cf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f040 8131 	bne.w	8007f62 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f040 8129 	bne.w	8007f62 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007d18:	f043 0202 	orr.w	r2, r3, #2
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d28:	d004      	beq.n	8007d34 <HAL_ADC_Init+0x16c>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a5e      	ldr	r2, [pc, #376]	; (8007ea8 <HAL_ADC_Init+0x2e0>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d101      	bne.n	8007d38 <HAL_ADC_Init+0x170>
 8007d34:	4b5d      	ldr	r3, [pc, #372]	; (8007eac <HAL_ADC_Init+0x2e4>)
 8007d36:	e000      	b.n	8007d3a <HAL_ADC_Init+0x172>
 8007d38:	4b5d      	ldr	r3, [pc, #372]	; (8007eb0 <HAL_ADC_Init+0x2e8>)
 8007d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d44:	d102      	bne.n	8007d4c <HAL_ADC_Init+0x184>
 8007d46:	4b58      	ldr	r3, [pc, #352]	; (8007ea8 <HAL_ADC_Init+0x2e0>)
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	e01a      	b.n	8007d82 <HAL_ADC_Init+0x1ba>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a55      	ldr	r2, [pc, #340]	; (8007ea8 <HAL_ADC_Init+0x2e0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d103      	bne.n	8007d5e <HAL_ADC_Init+0x196>
 8007d56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	e011      	b.n	8007d82 <HAL_ADC_Init+0x1ba>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a54      	ldr	r2, [pc, #336]	; (8007eb4 <HAL_ADC_Init+0x2ec>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d102      	bne.n	8007d6e <HAL_ADC_Init+0x1a6>
 8007d68:	4b53      	ldr	r3, [pc, #332]	; (8007eb8 <HAL_ADC_Init+0x2f0>)
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	e009      	b.n	8007d82 <HAL_ADC_Init+0x1ba>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a51      	ldr	r2, [pc, #324]	; (8007eb8 <HAL_ADC_Init+0x2f0>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d102      	bne.n	8007d7e <HAL_ADC_Init+0x1b6>
 8007d78:	4b4e      	ldr	r3, [pc, #312]	; (8007eb4 <HAL_ADC_Init+0x2ec>)
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	e001      	b.n	8007d82 <HAL_ADC_Init+0x1ba>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d108      	bne.n	8007da2 <HAL_ADC_Init+0x1da>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d101      	bne.n	8007da2 <HAL_ADC_Init+0x1da>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e000      	b.n	8007da4 <HAL_ADC_Init+0x1dc>
 8007da2:	2300      	movs	r3, #0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d11c      	bne.n	8007de2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8007da8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d010      	beq.n	8007dd0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f003 0303 	and.w	r3, r3, #3
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d107      	bne.n	8007dca <HAL_ADC_Init+0x202>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d101      	bne.n	8007dca <HAL_ADC_Init+0x202>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e000      	b.n	8007dcc <HAL_ADC_Init+0x204>
 8007dca:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d108      	bne.n	8007de2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8007dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007de0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	7e5b      	ldrb	r3, [r3, #25]
 8007de6:	035b      	lsls	r3, r3, #13
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007dec:	2a01      	cmp	r2, #1
 8007dee:	d002      	beq.n	8007df6 <HAL_ADC_Init+0x22e>
 8007df0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007df4:	e000      	b.n	8007df8 <HAL_ADC_Init+0x230>
 8007df6:	2200      	movs	r2, #0
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d11b      	bne.n	8007e4e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	7e5b      	ldrb	r3, [r3, #25]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d109      	bne.n	8007e32 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	3b01      	subs	r3, #1
 8007e24:	045a      	lsls	r2, r3, #17
 8007e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e2e:	663b      	str	r3, [r7, #96]	; 0x60
 8007e30:	e00d      	b.n	8007e4e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007e3a:	f043 0220 	orr.w	r2, r3, #32
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e46:	f043 0201 	orr.w	r2, r3, #1
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d03a      	beq.n	8007ecc <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a16      	ldr	r2, [pc, #88]	; (8007eb4 <HAL_ADC_Init+0x2ec>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d004      	beq.n	8007e6a <HAL_ADC_Init+0x2a2>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a14      	ldr	r2, [pc, #80]	; (8007eb8 <HAL_ADC_Init+0x2f0>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d128      	bne.n	8007ebc <HAL_ADC_Init+0x2f4>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8007e72:	d012      	beq.n	8007e9a <HAL_ADC_Init+0x2d2>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e7c:	d00a      	beq.n	8007e94 <HAL_ADC_Init+0x2cc>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e82:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8007e86:	d002      	beq.n	8007e8e <HAL_ADC_Init+0x2c6>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8c:	e018      	b.n	8007ec0 <HAL_ADC_Init+0x2f8>
 8007e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e92:	e015      	b.n	8007ec0 <HAL_ADC_Init+0x2f8>
 8007e94:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8007e98:	e012      	b.n	8007ec0 <HAL_ADC_Init+0x2f8>
 8007e9a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8007e9e:	e00f      	b.n	8007ec0 <HAL_ADC_Init+0x2f8>
 8007ea0:	20000010 	.word	0x20000010
 8007ea4:	431bde83 	.word	0x431bde83
 8007ea8:	50000100 	.word	0x50000100
 8007eac:	50000300 	.word	0x50000300
 8007eb0:	50000700 	.word	0x50000700
 8007eb4:	50000400 	.word	0x50000400
 8007eb8:	50000500 	.word	0x50000500
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f003 030c 	and.w	r3, r3, #12
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d114      	bne.n	8007f04 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6812      	ldr	r2, [r2, #0]
 8007ee4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ee8:	f023 0302 	bic.w	r3, r3, #2
 8007eec:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	7e1b      	ldrb	r3, [r3, #24]
 8007ef2:	039a      	lsls	r2, r3, #14
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	4313      	orrs	r3, r2
 8007efe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f00:	4313      	orrs	r3, r2
 8007f02:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	4b1e      	ldr	r3, [pc, #120]	; (8007f84 <HAL_ADC_Init+0x3bc>)
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	6812      	ldr	r2, [r2, #0]
 8007f12:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007f14:	430b      	orrs	r3, r1
 8007f16:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d10c      	bne.n	8007f3a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f26:	f023 010f 	bic.w	r1, r3, #15
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	1e5a      	subs	r2, r3, #1
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	631a      	str	r2, [r3, #48]	; 0x30
 8007f38:	e007      	b.n	8007f4a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 020f 	bic.w	r2, r2, #15
 8007f48:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f54:	f023 0303 	bic.w	r3, r3, #3
 8007f58:	f043 0201 	orr.w	r2, r3, #1
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	641a      	str	r2, [r3, #64]	; 0x40
 8007f60:	e00a      	b.n	8007f78 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	f023 0312 	bic.w	r3, r3, #18
 8007f6a:	f043 0210 	orr.w	r2, r3, #16
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8007f78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3768      	adds	r7, #104	; 0x68
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	fff0c007 	.word	0xfff0c007

08007f88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f003 0304 	and.w	r3, r3, #4
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f040 80f7 	bne.w	8008196 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d101      	bne.n	8007fb6 <HAL_ADC_Start_DMA+0x2e>
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	e0f2      	b.n	800819c <HAL_ADC_Start_DMA+0x214>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fc6:	d004      	beq.n	8007fd2 <HAL_ADC_Start_DMA+0x4a>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a75      	ldr	r2, [pc, #468]	; (80081a4 <HAL_ADC_Start_DMA+0x21c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d109      	bne.n	8007fe6 <HAL_ADC_Start_DMA+0x5e>
 8007fd2:	4b75      	ldr	r3, [pc, #468]	; (80081a8 <HAL_ADC_Start_DMA+0x220>)
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 031f 	and.w	r3, r3, #31
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	bf0c      	ite	eq
 8007fde:	2301      	moveq	r3, #1
 8007fe0:	2300      	movne	r3, #0
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	e008      	b.n	8007ff8 <HAL_ADC_Start_DMA+0x70>
 8007fe6:	4b71      	ldr	r3, [pc, #452]	; (80081ac <HAL_ADC_Start_DMA+0x224>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f003 031f 	and.w	r3, r3, #31
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bf0c      	ite	eq
 8007ff2:	2301      	moveq	r3, #1
 8007ff4:	2300      	movne	r3, #0
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 80c5 	beq.w	8008188 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 fd22 	bl	8008a48 <ADC_Enable>
 8008004:	4603      	mov	r3, r0
 8008006:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008008:	7dfb      	ldrb	r3, [r7, #23]
 800800a:	2b00      	cmp	r3, #0
 800800c:	f040 80b7 	bne.w	800817e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008014:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008018:	f023 0301 	bic.w	r3, r3, #1
 800801c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800802c:	d004      	beq.n	8008038 <HAL_ADC_Start_DMA+0xb0>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a5c      	ldr	r2, [pc, #368]	; (80081a4 <HAL_ADC_Start_DMA+0x21c>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d106      	bne.n	8008046 <HAL_ADC_Start_DMA+0xbe>
 8008038:	4b5b      	ldr	r3, [pc, #364]	; (80081a8 <HAL_ADC_Start_DMA+0x220>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 031f 	and.w	r3, r3, #31
 8008040:	2b00      	cmp	r3, #0
 8008042:	d010      	beq.n	8008066 <HAL_ADC_Start_DMA+0xde>
 8008044:	e005      	b.n	8008052 <HAL_ADC_Start_DMA+0xca>
 8008046:	4b59      	ldr	r3, [pc, #356]	; (80081ac <HAL_ADC_Start_DMA+0x224>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f003 031f 	and.w	r3, r3, #31
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <HAL_ADC_Start_DMA+0xde>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800805a:	d004      	beq.n	8008066 <HAL_ADC_Start_DMA+0xde>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a53      	ldr	r2, [pc, #332]	; (80081b0 <HAL_ADC_Start_DMA+0x228>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d115      	bne.n	8008092 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d036      	beq.n	80080ee <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008084:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008088:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8008090:	e02d      	b.n	80080ee <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080a6:	d004      	beq.n	80080b2 <HAL_ADC_Start_DMA+0x12a>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a3d      	ldr	r2, [pc, #244]	; (80081a4 <HAL_ADC_Start_DMA+0x21c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d10a      	bne.n	80080c8 <HAL_ADC_Start_DMA+0x140>
 80080b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	bf14      	ite	ne
 80080c0:	2301      	movne	r3, #1
 80080c2:	2300      	moveq	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	e008      	b.n	80080da <HAL_ADC_Start_DMA+0x152>
 80080c8:	4b39      	ldr	r3, [pc, #228]	; (80081b0 <HAL_ADC_Start_DMA+0x228>)
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	bf14      	ite	ne
 80080d4:	2301      	movne	r3, #1
 80080d6:	2300      	moveq	r3, #0
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d007      	beq.n	80080ee <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80080e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080fa:	d106      	bne.n	800810a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008100:	f023 0206 	bic.w	r2, r3, #6
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	645a      	str	r2, [r3, #68]	; 0x44
 8008108:	e002      	b.n	8008110 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	4a25      	ldr	r2, [pc, #148]	; (80081b4 <HAL_ADC_Start_DMA+0x22c>)
 800811e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008124:	4a24      	ldr	r2, [pc, #144]	; (80081b8 <HAL_ADC_Start_DMA+0x230>)
 8008126:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812c:	4a23      	ldr	r2, [pc, #140]	; (80081bc <HAL_ADC_Start_DMA+0x234>)
 800812e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	221c      	movs	r2, #28
 8008136:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0210 	orr.w	r2, r2, #16
 8008146:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f042 0201 	orr.w	r2, r2, #1
 8008156:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3340      	adds	r3, #64	; 0x40
 8008162:	4619      	mov	r1, r3
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f001 fd97 	bl	8009c9a <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0204 	orr.w	r2, r2, #4
 800817a:	609a      	str	r2, [r3, #8]
 800817c:	e00d      	b.n	800819a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008186:	e008      	b.n	800819a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008194:	e001      	b.n	800819a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008196:	2302      	movs	r3, #2
 8008198:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800819a:	7dfb      	ldrb	r3, [r7, #23]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	50000100 	.word	0x50000100
 80081a8:	50000300 	.word	0x50000300
 80081ac:	50000700 	.word	0x50000700
 80081b0:	50000400 	.word	0x50000400
 80081b4:	0800897d 	.word	0x0800897d
 80081b8:	080089f7 	.word	0x080089f7
 80081bc:	08008a13 	.word	0x08008a13

080081c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b09b      	sub	sp, #108	; 0x6c
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d101      	bne.n	80081e2 <HAL_ADC_ConfigChannel+0x22>
 80081de:	2302      	movs	r3, #2
 80081e0:	e2ca      	b.n	8008778 <HAL_ADC_ConfigChannel+0x5b8>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f003 0304 	and.w	r3, r3, #4
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f040 82ae 	bne.w	8008756 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d81c      	bhi.n	800823c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	4413      	add	r3, r2
 8008212:	005b      	lsls	r3, r3, #1
 8008214:	461a      	mov	r2, r3
 8008216:	231f      	movs	r3, #31
 8008218:	4093      	lsls	r3, r2
 800821a:	43db      	mvns	r3, r3
 800821c:	4019      	ands	r1, r3
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	6818      	ldr	r0, [r3, #0]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	4413      	add	r3, r2
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	fa00 f203 	lsl.w	r2, r0, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	631a      	str	r2, [r3, #48]	; 0x30
 800823a:	e063      	b.n	8008304 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2b09      	cmp	r3, #9
 8008242:	d81e      	bhi.n	8008282 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	4613      	mov	r3, r2
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	4413      	add	r3, r2
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	3b1e      	subs	r3, #30
 8008258:	221f      	movs	r2, #31
 800825a:	fa02 f303 	lsl.w	r3, r2, r3
 800825e:	43db      	mvns	r3, r3
 8008260:	4019      	ands	r1, r3
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	6818      	ldr	r0, [r3, #0]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	4613      	mov	r3, r2
 800826c:	005b      	lsls	r3, r3, #1
 800826e:	4413      	add	r3, r2
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	3b1e      	subs	r3, #30
 8008274:	fa00 f203 	lsl.w	r2, r0, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	430a      	orrs	r2, r1
 800827e:	635a      	str	r2, [r3, #52]	; 0x34
 8008280:	e040      	b.n	8008304 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2b0e      	cmp	r3, #14
 8008288:	d81e      	bhi.n	80082c8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	4613      	mov	r3, r2
 8008296:	005b      	lsls	r3, r3, #1
 8008298:	4413      	add	r3, r2
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	3b3c      	subs	r3, #60	; 0x3c
 800829e:	221f      	movs	r2, #31
 80082a0:	fa02 f303 	lsl.w	r3, r2, r3
 80082a4:	43db      	mvns	r3, r3
 80082a6:	4019      	ands	r1, r3
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	4613      	mov	r3, r2
 80082b2:	005b      	lsls	r3, r3, #1
 80082b4:	4413      	add	r3, r2
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	3b3c      	subs	r3, #60	; 0x3c
 80082ba:	fa00 f203 	lsl.w	r2, r0, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	639a      	str	r2, [r3, #56]	; 0x38
 80082c6:	e01d      	b.n	8008304 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	4613      	mov	r3, r2
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	4413      	add	r3, r2
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	3b5a      	subs	r3, #90	; 0x5a
 80082dc:	221f      	movs	r2, #31
 80082de:	fa02 f303 	lsl.w	r3, r2, r3
 80082e2:	43db      	mvns	r3, r3
 80082e4:	4019      	ands	r1, r3
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	4613      	mov	r3, r2
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	4413      	add	r3, r2
 80082f4:	005b      	lsls	r3, r3, #1
 80082f6:	3b5a      	subs	r3, #90	; 0x5a
 80082f8:	fa00 f203 	lsl.w	r2, r0, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f003 030c 	and.w	r3, r3, #12
 800830e:	2b00      	cmp	r3, #0
 8008310:	f040 80e5 	bne.w	80084de <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b09      	cmp	r3, #9
 800831a:	d91c      	bls.n	8008356 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6999      	ldr	r1, [r3, #24]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	4613      	mov	r3, r2
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	4413      	add	r3, r2
 800832c:	3b1e      	subs	r3, #30
 800832e:	2207      	movs	r2, #7
 8008330:	fa02 f303 	lsl.w	r3, r2, r3
 8008334:	43db      	mvns	r3, r3
 8008336:	4019      	ands	r1, r3
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	6898      	ldr	r0, [r3, #8]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	4613      	mov	r3, r2
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	4413      	add	r3, r2
 8008346:	3b1e      	subs	r3, #30
 8008348:	fa00 f203 	lsl.w	r2, r0, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	619a      	str	r2, [r3, #24]
 8008354:	e019      	b.n	800838a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6959      	ldr	r1, [r3, #20]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	4613      	mov	r3, r2
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	4413      	add	r3, r2
 8008366:	2207      	movs	r2, #7
 8008368:	fa02 f303 	lsl.w	r3, r2, r3
 800836c:	43db      	mvns	r3, r3
 800836e:	4019      	ands	r1, r3
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	6898      	ldr	r0, [r3, #8]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	4613      	mov	r3, r2
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	4413      	add	r3, r2
 800837e:	fa00 f203 	lsl.w	r2, r0, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	695a      	ldr	r2, [r3, #20]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	08db      	lsrs	r3, r3, #3
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	005b      	lsls	r3, r3, #1
 800839c:	fa02 f303 	lsl.w	r3, r2, r3
 80083a0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d84f      	bhi.n	800844c <HAL_ADC_ConfigChannel+0x28c>
 80083ac:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <HAL_ADC_ConfigChannel+0x1f4>)
 80083ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b2:	bf00      	nop
 80083b4:	080083c5 	.word	0x080083c5
 80083b8:	080083e7 	.word	0x080083e7
 80083bc:	08008409 	.word	0x08008409
 80083c0:	0800842b 	.word	0x0800842b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80083ca:	4b9a      	ldr	r3, [pc, #616]	; (8008634 <HAL_ADC_ConfigChannel+0x474>)
 80083cc:	4013      	ands	r3, r2
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	6812      	ldr	r2, [r2, #0]
 80083d2:	0691      	lsls	r1, r2, #26
 80083d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083d6:	430a      	orrs	r2, r1
 80083d8:	431a      	orrs	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80083e2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80083e4:	e07e      	b.n	80084e4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80083ec:	4b91      	ldr	r3, [pc, #580]	; (8008634 <HAL_ADC_ConfigChannel+0x474>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	6812      	ldr	r2, [r2, #0]
 80083f4:	0691      	lsls	r1, r2, #26
 80083f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083f8:	430a      	orrs	r2, r1
 80083fa:	431a      	orrs	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008404:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8008406:	e06d      	b.n	80084e4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800840e:	4b89      	ldr	r3, [pc, #548]	; (8008634 <HAL_ADC_ConfigChannel+0x474>)
 8008410:	4013      	ands	r3, r2
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	6812      	ldr	r2, [r2, #0]
 8008416:	0691      	lsls	r1, r2, #26
 8008418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800841a:	430a      	orrs	r2, r1
 800841c:	431a      	orrs	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008426:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8008428:	e05c      	b.n	80084e4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008430:	4b80      	ldr	r3, [pc, #512]	; (8008634 <HAL_ADC_ConfigChannel+0x474>)
 8008432:	4013      	ands	r3, r2
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	6812      	ldr	r2, [r2, #0]
 8008438:	0691      	lsls	r1, r2, #26
 800843a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800843c:	430a      	orrs	r2, r1
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008448:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800844a:	e04b      	b.n	80084e4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008452:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	069b      	lsls	r3, r3, #26
 800845c:	429a      	cmp	r2, r3
 800845e:	d107      	bne.n	8008470 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800846e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008476:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	069b      	lsls	r3, r3, #26
 8008480:	429a      	cmp	r2, r3
 8008482:	d107      	bne.n	8008494 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008492:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800849a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	069b      	lsls	r3, r3, #26
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d107      	bne.n	80084b8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80084b6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	069b      	lsls	r3, r3, #26
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d10a      	bne.n	80084e2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80084da:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80084dc:	e001      	b.n	80084e2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80084de:	bf00      	nop
 80084e0:	e000      	b.n	80084e4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80084e2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d108      	bne.n	8008504 <HAL_ADC_ConfigChannel+0x344>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_ADC_ConfigChannel+0x344>
 8008500:	2301      	movs	r3, #1
 8008502:	e000      	b.n	8008506 <HAL_ADC_ConfigChannel+0x346>
 8008504:	2300      	movs	r3, #0
 8008506:	2b00      	cmp	r3, #0
 8008508:	f040 8130 	bne.w	800876c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d00f      	beq.n	8008534 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2201      	movs	r2, #1
 8008522:	fa02 f303 	lsl.w	r3, r2, r3
 8008526:	43da      	mvns	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	400a      	ands	r2, r1
 800852e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8008532:	e049      	b.n	80085c8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2201      	movs	r2, #1
 8008542:	409a      	lsls	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	430a      	orrs	r2, r1
 800854a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b09      	cmp	r3, #9
 8008554:	d91c      	bls.n	8008590 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6999      	ldr	r1, [r3, #24]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	4613      	mov	r3, r2
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	4413      	add	r3, r2
 8008566:	3b1b      	subs	r3, #27
 8008568:	2207      	movs	r2, #7
 800856a:	fa02 f303 	lsl.w	r3, r2, r3
 800856e:	43db      	mvns	r3, r3
 8008570:	4019      	ands	r1, r3
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	6898      	ldr	r0, [r3, #8]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	4613      	mov	r3, r2
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	4413      	add	r3, r2
 8008580:	3b1b      	subs	r3, #27
 8008582:	fa00 f203 	lsl.w	r2, r0, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	619a      	str	r2, [r3, #24]
 800858e:	e01b      	b.n	80085c8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6959      	ldr	r1, [r3, #20]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	4613      	mov	r3, r2
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	4413      	add	r3, r2
 80085a2:	2207      	movs	r2, #7
 80085a4:	fa02 f303 	lsl.w	r3, r2, r3
 80085a8:	43db      	mvns	r3, r3
 80085aa:	4019      	ands	r1, r3
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	6898      	ldr	r0, [r3, #8]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	4613      	mov	r3, r2
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	4413      	add	r3, r2
 80085bc:	fa00 f203 	lsl.w	r2, r0, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085d0:	d004      	beq.n	80085dc <HAL_ADC_ConfigChannel+0x41c>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a18      	ldr	r2, [pc, #96]	; (8008638 <HAL_ADC_ConfigChannel+0x478>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d101      	bne.n	80085e0 <HAL_ADC_ConfigChannel+0x420>
 80085dc:	4b17      	ldr	r3, [pc, #92]	; (800863c <HAL_ADC_ConfigChannel+0x47c>)
 80085de:	e000      	b.n	80085e2 <HAL_ADC_ConfigChannel+0x422>
 80085e0:	4b17      	ldr	r3, [pc, #92]	; (8008640 <HAL_ADC_ConfigChannel+0x480>)
 80085e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b10      	cmp	r3, #16
 80085ea:	d105      	bne.n	80085f8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80085ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d015      	beq.n	8008624 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80085fc:	2b11      	cmp	r3, #17
 80085fe:	d105      	bne.n	800860c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8008600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00b      	beq.n	8008624 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8008610:	2b12      	cmp	r3, #18
 8008612:	f040 80ab 	bne.w	800876c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8008616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800861e:	2b00      	cmp	r3, #0
 8008620:	f040 80a4 	bne.w	800876c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800862c:	d10a      	bne.n	8008644 <HAL_ADC_ConfigChannel+0x484>
 800862e:	4b02      	ldr	r3, [pc, #8]	; (8008638 <HAL_ADC_ConfigChannel+0x478>)
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	e022      	b.n	800867a <HAL_ADC_ConfigChannel+0x4ba>
 8008634:	83fff000 	.word	0x83fff000
 8008638:	50000100 	.word	0x50000100
 800863c:	50000300 	.word	0x50000300
 8008640:	50000700 	.word	0x50000700
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a4e      	ldr	r2, [pc, #312]	; (8008784 <HAL_ADC_ConfigChannel+0x5c4>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d103      	bne.n	8008656 <HAL_ADC_ConfigChannel+0x496>
 800864e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	e011      	b.n	800867a <HAL_ADC_ConfigChannel+0x4ba>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a4b      	ldr	r2, [pc, #300]	; (8008788 <HAL_ADC_ConfigChannel+0x5c8>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d102      	bne.n	8008666 <HAL_ADC_ConfigChannel+0x4a6>
 8008660:	4b4a      	ldr	r3, [pc, #296]	; (800878c <HAL_ADC_ConfigChannel+0x5cc>)
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	e009      	b.n	800867a <HAL_ADC_ConfigChannel+0x4ba>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a48      	ldr	r2, [pc, #288]	; (800878c <HAL_ADC_ConfigChannel+0x5cc>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d102      	bne.n	8008676 <HAL_ADC_ConfigChannel+0x4b6>
 8008670:	4b45      	ldr	r3, [pc, #276]	; (8008788 <HAL_ADC_ConfigChannel+0x5c8>)
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	e001      	b.n	800867a <HAL_ADC_ConfigChannel+0x4ba>
 8008676:	2300      	movs	r3, #0
 8008678:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f003 0303 	and.w	r3, r3, #3
 8008684:	2b01      	cmp	r3, #1
 8008686:	d108      	bne.n	800869a <HAL_ADC_ConfigChannel+0x4da>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b01      	cmp	r3, #1
 8008694:	d101      	bne.n	800869a <HAL_ADC_ConfigChannel+0x4da>
 8008696:	2301      	movs	r3, #1
 8008698:	e000      	b.n	800869c <HAL_ADC_ConfigChannel+0x4dc>
 800869a:	2300      	movs	r3, #0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d150      	bne.n	8008742 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80086a0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d010      	beq.n	80086c8 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f003 0303 	and.w	r3, r3, #3
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d107      	bne.n	80086c2 <HAL_ADC_ConfigChannel+0x502>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d101      	bne.n	80086c2 <HAL_ADC_ConfigChannel+0x502>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <HAL_ADC_ConfigChannel+0x504>
 80086c2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d13c      	bne.n	8008742 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	d11d      	bne.n	800870c <HAL_ADC_ConfigChannel+0x54c>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086d8:	d118      	bne.n	800870c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80086da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80086e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086e4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80086e6:	4b2a      	ldr	r3, [pc, #168]	; (8008790 <HAL_ADC_ConfigChannel+0x5d0>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a2a      	ldr	r2, [pc, #168]	; (8008794 <HAL_ADC_ConfigChannel+0x5d4>)
 80086ec:	fba2 2303 	umull	r2, r3, r2, r3
 80086f0:	0c9a      	lsrs	r2, r3, #18
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80086fc:	e002      	b.n	8008704 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	3b01      	subs	r3, #1
 8008702:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1f9      	bne.n	80086fe <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800870a:	e02e      	b.n	800876a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b11      	cmp	r3, #17
 8008712:	d10b      	bne.n	800872c <HAL_ADC_ConfigChannel+0x56c>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800871c:	d106      	bne.n	800872c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800871e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8008726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008728:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800872a:	e01e      	b.n	800876a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b12      	cmp	r3, #18
 8008732:	d11a      	bne.n	800876a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8008734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800873c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800873e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008740:	e013      	b.n	800876a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	f043 0220 	orr.w	r2, r3, #32
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008754:	e00a      	b.n	800876c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875a:	f043 0220 	orr.w	r2, r3, #32
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008768:	e000      	b.n	800876c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800876a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8008774:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008778:	4618      	mov	r0, r3
 800877a:	376c      	adds	r7, #108	; 0x6c
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	50000100 	.word	0x50000100
 8008788:	50000400 	.word	0x50000400
 800878c:	50000500 	.word	0x50000500
 8008790:	20000010 	.word	0x20000010
 8008794:	431bde83 	.word	0x431bde83

08008798 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8008798:	b480      	push	{r7}
 800879a:	b099      	sub	sp, #100	; 0x64
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087b0:	d102      	bne.n	80087b8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80087b2:	4b6d      	ldr	r3, [pc, #436]	; (8008968 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80087b4:	60bb      	str	r3, [r7, #8]
 80087b6:	e01a      	b.n	80087ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a6a      	ldr	r2, [pc, #424]	; (8008968 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d103      	bne.n	80087ca <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80087c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80087c6:	60bb      	str	r3, [r7, #8]
 80087c8:	e011      	b.n	80087ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a67      	ldr	r2, [pc, #412]	; (800896c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d102      	bne.n	80087da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80087d4:	4b66      	ldr	r3, [pc, #408]	; (8008970 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80087d6:	60bb      	str	r3, [r7, #8]
 80087d8:	e009      	b.n	80087ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a64      	ldr	r2, [pc, #400]	; (8008970 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d102      	bne.n	80087ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80087e4:	4b61      	ldr	r3, [pc, #388]	; (800896c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80087e6:	60bb      	str	r3, [r7, #8]
 80087e8:	e001      	b.n	80087ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80087ea:	2300      	movs	r3, #0
 80087ec:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e0b0      	b.n	800895a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d101      	bne.n	8008806 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8008802:	2302      	movs	r3, #2
 8008804:	e0a9      	b.n	800895a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f003 0304 	and.w	r3, r3, #4
 8008818:	2b00      	cmp	r3, #0
 800881a:	f040 808d 	bne.w	8008938 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f003 0304 	and.w	r3, r3, #4
 8008826:	2b00      	cmp	r3, #0
 8008828:	f040 8086 	bne.w	8008938 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008834:	d004      	beq.n	8008840 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a4b      	ldr	r2, [pc, #300]	; (8008968 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d101      	bne.n	8008844 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8008840:	4b4c      	ldr	r3, [pc, #304]	; (8008974 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8008842:	e000      	b.n	8008846 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8008844:	4b4c      	ldr	r3, [pc, #304]	; (8008978 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8008846:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d040      	beq.n	80088d2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8008850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	6859      	ldr	r1, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008862:	035b      	lsls	r3, r3, #13
 8008864:	430b      	orrs	r3, r1
 8008866:	431a      	orrs	r2, r3
 8008868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800886a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	2b01      	cmp	r3, #1
 8008878:	d108      	bne.n	800888c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b01      	cmp	r3, #1
 8008886:	d101      	bne.n	800888c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8008888:	2301      	movs	r3, #1
 800888a:	e000      	b.n	800888e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800888c:	2300      	movs	r3, #0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d15c      	bne.n	800894c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f003 0303 	and.w	r3, r3, #3
 800889a:	2b01      	cmp	r3, #1
 800889c:	d107      	bne.n	80088ae <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d101      	bne.n	80088ae <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80088aa:	2301      	movs	r3, #1
 80088ac:	e000      	b.n	80088b0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80088ae:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d14b      	bne.n	800894c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80088b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80088bc:	f023 030f 	bic.w	r3, r3, #15
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	6811      	ldr	r1, [r2, #0]
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	6892      	ldr	r2, [r2, #8]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	431a      	orrs	r2, r3
 80088cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088ce:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80088d0:	e03c      	b.n	800894c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80088d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088dc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 0303 	and.w	r3, r3, #3
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d108      	bne.n	80088fe <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d101      	bne.n	80088fe <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80088fa:	2301      	movs	r3, #1
 80088fc:	e000      	b.n	8008900 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80088fe:	2300      	movs	r3, #0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d123      	bne.n	800894c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f003 0303 	and.w	r3, r3, #3
 800890c:	2b01      	cmp	r3, #1
 800890e:	d107      	bne.n	8008920 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b01      	cmp	r3, #1
 800891a:	d101      	bne.n	8008920 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800891c:	2301      	movs	r3, #1
 800891e:	e000      	b.n	8008922 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8008920:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8008922:	2b00      	cmp	r3, #0
 8008924:	d112      	bne.n	800894c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8008926:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800892e:	f023 030f 	bic.w	r3, r3, #15
 8008932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008934:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8008936:	e009      	b.n	800894c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893c:	f043 0220 	orr.w	r2, r3, #32
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800894a:	e000      	b.n	800894e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800894c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8008956:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800895a:	4618      	mov	r0, r3
 800895c:	3764      	adds	r7, #100	; 0x64
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	50000100 	.word	0x50000100
 800896c:	50000400 	.word	0x50000400
 8008970:	50000500 	.word	0x50000500
 8008974:	50000300 	.word	0x50000300
 8008978:	50000700 	.word	0x50000700

0800897c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008988:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008992:	2b00      	cmp	r3, #0
 8008994:	d126      	bne.n	80089e4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d115      	bne.n	80089dc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d111      	bne.n	80089dc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d105      	bne.n	80089dc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d4:	f043 0201 	orr.w	r2, r3, #1
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f7ff f8d5 	bl	8007b8c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80089e2:	e004      	b.n	80089ee <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	4798      	blx	r3
}
 80089ee:	bf00      	nop
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f7ff f8cb 	bl	8007ba0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8008a0a:	bf00      	nop
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a30:	f043 0204 	orr.w	r2, r3, #4
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f7ff f8bb 	bl	8007bb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008a3e:	bf00      	nop
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f003 0303 	and.w	r3, r3, #3
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d108      	bne.n	8008a74 <ADC_Enable+0x2c>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d101      	bne.n	8008a74 <ADC_Enable+0x2c>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <ADC_Enable+0x2e>
 8008a74:	2300      	movs	r3, #0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d143      	bne.n	8008b02 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	4b22      	ldr	r3, [pc, #136]	; (8008b0c <ADC_Enable+0xc4>)
 8008a82:	4013      	ands	r3, r2
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00d      	beq.n	8008aa4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8c:	f043 0210 	orr.w	r2, r3, #16
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a98:	f043 0201 	orr.w	r2, r3, #1
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e02f      	b.n	8008b04 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f042 0201 	orr.w	r2, r2, #1
 8008ab2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8008ab4:	f7ff f85e 	bl	8007b74 <HAL_GetTick>
 8008ab8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008aba:	e01b      	b.n	8008af4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008abc:	f7ff f85a 	bl	8007b74 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d914      	bls.n	8008af4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d00d      	beq.n	8008af4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008adc:	f043 0210 	orr.w	r2, r3, #16
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae8:	f043 0201 	orr.w	r2, r3, #1
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e007      	b.n	8008b04 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d1dc      	bne.n	8008abc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	8000003f 	.word	0x8000003f

08008b10 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f003 0303 	and.w	r3, r3, #3
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d108      	bne.n	8008b3c <ADC_Disable+0x2c>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d101      	bne.n	8008b3c <ADC_Disable+0x2c>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e000      	b.n	8008b3e <ADC_Disable+0x2e>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d047      	beq.n	8008bd2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f003 030d 	and.w	r3, r3, #13
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d10f      	bne.n	8008b70 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689a      	ldr	r2, [r3, #8]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0202 	orr.w	r2, r2, #2
 8008b5e:	609a      	str	r2, [r3, #8]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2203      	movs	r2, #3
 8008b66:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8008b68:	f7ff f804 	bl	8007b74 <HAL_GetTick>
 8008b6c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8008b6e:	e029      	b.n	8008bc4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	f043 0210 	orr.w	r2, r3, #16
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b80:	f043 0201 	orr.w	r2, r3, #1
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e023      	b.n	8008bd4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008b8c:	f7fe fff2 	bl	8007b74 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d914      	bls.n	8008bc4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d10d      	bne.n	8008bc4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bac:	f043 0210 	orr.w	r2, r3, #16
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb8:	f043 0201 	orr.w	r2, r3, #1
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e007      	b.n	8008bd4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d0dc      	beq.n	8008b8c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e0ed      	b.n	8008dca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d102      	bne.n	8008c00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7fd fbe8 	bl	80063d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f042 0201 	orr.w	r2, r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c10:	f7fe ffb0 	bl	8007b74 <HAL_GetTick>
 8008c14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008c16:	e012      	b.n	8008c3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008c18:	f7fe ffac 	bl	8007b74 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	2b0a      	cmp	r3, #10
 8008c24:	d90b      	bls.n	8008c3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2205      	movs	r2, #5
 8008c36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e0c5      	b.n	8008dca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d0e5      	beq.n	8008c18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f022 0202 	bic.w	r2, r2, #2
 8008c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c5c:	f7fe ff8a 	bl	8007b74 <HAL_GetTick>
 8008c60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008c62:	e012      	b.n	8008c8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008c64:	f7fe ff86 	bl	8007b74 <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	2b0a      	cmp	r3, #10
 8008c70:	d90b      	bls.n	8008c8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2205      	movs	r2, #5
 8008c82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e09f      	b.n	8008dca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e5      	bne.n	8008c64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	7e1b      	ldrb	r3, [r3, #24]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d108      	bne.n	8008cb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	e007      	b.n	8008cc2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	7e5b      	ldrb	r3, [r3, #25]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d108      	bne.n	8008cdc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	e007      	b.n	8008cec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	7e9b      	ldrb	r3, [r3, #26]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d108      	bne.n	8008d06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0220 	orr.w	r2, r2, #32
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	e007      	b.n	8008d16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f022 0220 	bic.w	r2, r2, #32
 8008d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	7edb      	ldrb	r3, [r3, #27]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d108      	bne.n	8008d30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f022 0210 	bic.w	r2, r2, #16
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	e007      	b.n	8008d40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f042 0210 	orr.w	r2, r2, #16
 8008d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	7f1b      	ldrb	r3, [r3, #28]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d108      	bne.n	8008d5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f042 0208 	orr.w	r2, r2, #8
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	e007      	b.n	8008d6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 0208 	bic.w	r2, r2, #8
 8008d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	7f5b      	ldrb	r3, [r3, #29]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d108      	bne.n	8008d84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f042 0204 	orr.w	r2, r2, #4
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	e007      	b.n	8008d94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 0204 	bic.w	r2, r2, #4
 8008d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689a      	ldr	r2, [r3, #8]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	431a      	orrs	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	ea42 0103 	orr.w	r1, r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	1e5a      	subs	r2, r3, #1
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b087      	sub	sp, #28
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008de8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008dea:	7cfb      	ldrb	r3, [r7, #19]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d003      	beq.n	8008df8 <HAL_CAN_ConfigFilter+0x26>
 8008df0:	7cfb      	ldrb	r3, [r7, #19]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	f040 80aa 	bne.w	8008f4c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008dfe:	f043 0201 	orr.w	r2, r3, #1
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	f003 031f 	and.w	r3, r3, #31
 8008e10:	2201      	movs	r2, #1
 8008e12:	fa02 f303 	lsl.w	r3, r2, r3
 8008e16:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	43db      	mvns	r3, r3
 8008e22:	401a      	ands	r2, r3
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d123      	bne.n	8008e7a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	43db      	mvns	r3, r3
 8008e3c:	401a      	ands	r2, r3
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008e54:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	3248      	adds	r2, #72	; 0x48
 8008e5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008e6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008e70:	6979      	ldr	r1, [r7, #20]
 8008e72:	3348      	adds	r3, #72	; 0x48
 8008e74:	00db      	lsls	r3, r3, #3
 8008e76:	440b      	add	r3, r1
 8008e78:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d122      	bne.n	8008ec8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	431a      	orrs	r2, r3
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008ea2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	3248      	adds	r2, #72	; 0x48
 8008ea8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008ebc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008ebe:	6979      	ldr	r1, [r7, #20]
 8008ec0:	3348      	adds	r3, #72	; 0x48
 8008ec2:	00db      	lsls	r3, r3, #3
 8008ec4:	440b      	add	r3, r1
 8008ec6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d109      	bne.n	8008ee4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	43db      	mvns	r3, r3
 8008eda:	401a      	ands	r2, r3
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8008ee2:	e007      	b.n	8008ef4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	431a      	orrs	r2, r3
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d109      	bne.n	8008f10 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	43db      	mvns	r3, r3
 8008f06:	401a      	ands	r2, r3
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008f0e:	e007      	b.n	8008f20 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d107      	bne.n	8008f38 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	431a      	orrs	r2, r3
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f3e:	f023 0201 	bic.w	r2, r3, #1
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e006      	b.n	8008f5a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
  }
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	371c      	adds	r7, #28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d12e      	bne.n	8008fd8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f022 0201 	bic.w	r2, r2, #1
 8008f90:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f92:	f7fe fdef 	bl	8007b74 <HAL_GetTick>
 8008f96:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008f98:	e012      	b.n	8008fc0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008f9a:	f7fe fdeb 	bl	8007b74 <HAL_GetTick>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	2b0a      	cmp	r3, #10
 8008fa6:	d90b      	bls.n	8008fc0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2205      	movs	r2, #5
 8008fb8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e012      	b.n	8008fe6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1e5      	bne.n	8008f9a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	e006      	b.n	8008fe6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fdc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
  }
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b089      	sub	sp, #36	; 0x24
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
 8008ffa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009002:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800900c:	7ffb      	ldrb	r3, [r7, #31]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d003      	beq.n	800901a <HAL_CAN_AddTxMessage+0x2c>
 8009012:	7ffb      	ldrb	r3, [r7, #31]
 8009014:	2b02      	cmp	r3, #2
 8009016:	f040 80b8 	bne.w	800918a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10a      	bne.n	800903a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800902a:	2b00      	cmp	r3, #0
 800902c:	d105      	bne.n	800903a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 80a0 	beq.w	800917a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	0e1b      	lsrs	r3, r3, #24
 800903e:	f003 0303 	and.w	r3, r3, #3
 8009042:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2b02      	cmp	r3, #2
 8009048:	d907      	bls.n	800905a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e09e      	b.n	8009198 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800905a:	2201      	movs	r2, #1
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	409a      	lsls	r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10d      	bne.n	8009088 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009076:	68f9      	ldr	r1, [r7, #12]
 8009078:	6809      	ldr	r1, [r1, #0]
 800907a:	431a      	orrs	r2, r3
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	3318      	adds	r3, #24
 8009080:	011b      	lsls	r3, r3, #4
 8009082:	440b      	add	r3, r1
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	e00f      	b.n	80090a8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009092:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009098:	68f9      	ldr	r1, [r7, #12]
 800909a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800909c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	3318      	adds	r3, #24
 80090a2:	011b      	lsls	r3, r3, #4
 80090a4:	440b      	add	r3, r1
 80090a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6819      	ldr	r1, [r3, #0]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	691a      	ldr	r2, [r3, #16]
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	3318      	adds	r3, #24
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	440b      	add	r3, r1
 80090b8:	3304      	adds	r3, #4
 80090ba:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	7d1b      	ldrb	r3, [r3, #20]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d111      	bne.n	80090e8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	3318      	adds	r3, #24
 80090cc:	011b      	lsls	r3, r3, #4
 80090ce:	4413      	add	r3, r2
 80090d0:	3304      	adds	r3, #4
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	6811      	ldr	r1, [r2, #0]
 80090d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	3318      	adds	r3, #24
 80090e0:	011b      	lsls	r3, r3, #4
 80090e2:	440b      	add	r3, r1
 80090e4:	3304      	adds	r3, #4
 80090e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3307      	adds	r3, #7
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	061a      	lsls	r2, r3, #24
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3306      	adds	r3, #6
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	041b      	lsls	r3, r3, #16
 80090f8:	431a      	orrs	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3305      	adds	r3, #5
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	4313      	orrs	r3, r2
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	3204      	adds	r2, #4
 8009108:	7812      	ldrb	r2, [r2, #0]
 800910a:	4610      	mov	r0, r2
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	6811      	ldr	r1, [r2, #0]
 8009110:	ea43 0200 	orr.w	r2, r3, r0
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	011b      	lsls	r3, r3, #4
 8009118:	440b      	add	r3, r1
 800911a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800911e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	3303      	adds	r3, #3
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	061a      	lsls	r2, r3, #24
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3302      	adds	r3, #2
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	041b      	lsls	r3, r3, #16
 8009130:	431a      	orrs	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	3301      	adds	r3, #1
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	021b      	lsls	r3, r3, #8
 800913a:	4313      	orrs	r3, r2
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	7812      	ldrb	r2, [r2, #0]
 8009140:	4610      	mov	r0, r2
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	6811      	ldr	r1, [r2, #0]
 8009146:	ea43 0200 	orr.w	r2, r3, r0
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	011b      	lsls	r3, r3, #4
 800914e:	440b      	add	r3, r1
 8009150:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009154:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	3318      	adds	r3, #24
 800915e:	011b      	lsls	r3, r3, #4
 8009160:	4413      	add	r3, r2
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	6811      	ldr	r1, [r2, #0]
 8009168:	f043 0201 	orr.w	r2, r3, #1
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	3318      	adds	r3, #24
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	440b      	add	r3, r1
 8009174:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	e00e      	b.n	8009198 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e006      	b.n	8009198 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
  }
}
 8009198:	4618      	mov	r0, r3
 800919a:	3724      	adds	r7, #36	; 0x24
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091b8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d003      	beq.n	80091c8 <HAL_CAN_GetRxMessage+0x24>
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	f040 80f3 	bne.w	80093ae <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10e      	bne.n	80091ec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	f003 0303 	and.w	r3, r3, #3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d116      	bne.n	800920a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e0e7      	b.n	80093bc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	f003 0303 	and.w	r3, r3, #3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d107      	bne.n	800920a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e0d8      	b.n	80093bc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	331b      	adds	r3, #27
 8009212:	011b      	lsls	r3, r3, #4
 8009214:	4413      	add	r3, r2
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0204 	and.w	r2, r3, #4
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10c      	bne.n	8009242 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	331b      	adds	r3, #27
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	4413      	add	r3, r2
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	0d5b      	lsrs	r3, r3, #21
 8009238:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	e00b      	b.n	800925a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	331b      	adds	r3, #27
 800924a:	011b      	lsls	r3, r3, #4
 800924c:	4413      	add	r3, r2
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	08db      	lsrs	r3, r3, #3
 8009252:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	331b      	adds	r3, #27
 8009262:	011b      	lsls	r3, r3, #4
 8009264:	4413      	add	r3, r2
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0202 	and.w	r2, r3, #2
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	331b      	adds	r3, #27
 8009278:	011b      	lsls	r3, r3, #4
 800927a:	4413      	add	r3, r2
 800927c:	3304      	adds	r3, #4
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 020f 	and.w	r2, r3, #15
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	331b      	adds	r3, #27
 8009290:	011b      	lsls	r3, r3, #4
 8009292:	4413      	add	r3, r2
 8009294:	3304      	adds	r3, #4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	0a1b      	lsrs	r3, r3, #8
 800929a:	b2da      	uxtb	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	331b      	adds	r3, #27
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	4413      	add	r3, r2
 80092ac:	3304      	adds	r3, #4
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	0c1b      	lsrs	r3, r3, #16
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	011b      	lsls	r3, r3, #4
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	0a1a      	lsrs	r2, r3, #8
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	3301      	adds	r3, #1
 80092e4:	b2d2      	uxtb	r2, r2
 80092e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	011b      	lsls	r3, r3, #4
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	0c1a      	lsrs	r2, r3, #16
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	3302      	adds	r3, #2
 80092fe:	b2d2      	uxtb	r2, r2
 8009300:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	011b      	lsls	r3, r3, #4
 800930a:	4413      	add	r3, r2
 800930c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	0e1a      	lsrs	r2, r3, #24
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	3303      	adds	r3, #3
 8009318:	b2d2      	uxtb	r2, r2
 800931a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	011b      	lsls	r3, r3, #4
 8009324:	4413      	add	r3, r2
 8009326:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	3304      	adds	r3, #4
 8009330:	b2d2      	uxtb	r2, r2
 8009332:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	011b      	lsls	r3, r3, #4
 800933c:	4413      	add	r3, r2
 800933e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	0a1a      	lsrs	r2, r3, #8
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	3305      	adds	r3, #5
 800934a:	b2d2      	uxtb	r2, r2
 800934c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	4413      	add	r3, r2
 8009358:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	0c1a      	lsrs	r2, r3, #16
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	3306      	adds	r3, #6
 8009364:	b2d2      	uxtb	r2, r2
 8009366:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	4413      	add	r3, r2
 8009372:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	0e1a      	lsrs	r2, r3, #24
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	3307      	adds	r3, #7
 800937e:	b2d2      	uxtb	r2, r2
 8009380:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d108      	bne.n	800939a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f042 0220 	orr.w	r2, r2, #32
 8009396:	60da      	str	r2, [r3, #12]
 8009398:	e007      	b.n	80093aa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	691a      	ldr	r2, [r3, #16]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f042 0220 	orr.w	r2, r2, #32
 80093a8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	e006      	b.n	80093bc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
  }
}
 80093bc:	4618      	mov	r0, r3
 80093be:	371c      	adds	r7, #28
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093d8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d002      	beq.n	80093e6 <HAL_CAN_ActivateNotification+0x1e>
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d109      	bne.n	80093fa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6959      	ldr	r1, [r3, #20]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	e006      	b.n	8009408 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
  }
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08a      	sub	sp, #40	; 0x28
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800941c:	2300      	movs	r3, #0
 800941e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	2b00      	cmp	r3, #0
 8009458:	d07c      	beq.n	8009554 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b00      	cmp	r3, #0
 8009462:	d023      	beq.n	80094ac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2201      	movs	r2, #1
 800946a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f983 	bl	8009782 <HAL_CAN_TxMailbox0CompleteCallback>
 800947c:	e016      	b.n	80094ac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b00      	cmp	r3, #0
 8009486:	d004      	beq.n	8009492 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800948e:	627b      	str	r3, [r7, #36]	; 0x24
 8009490:	e00c      	b.n	80094ac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	f003 0308 	and.w	r3, r3, #8
 8009498:	2b00      	cmp	r3, #0
 800949a:	d004      	beq.n	80094a6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094a2:	627b      	str	r3, [r7, #36]	; 0x24
 80094a4:	e002      	b.n	80094ac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f989 	bl	80097be <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d024      	beq.n	8009500 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f963 	bl	8009796 <HAL_CAN_TxMailbox1CompleteCallback>
 80094d0:	e016      	b.n	8009500 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d004      	beq.n	80094e6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24
 80094e4:	e00c      	b.n	8009500 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d004      	beq.n	80094fa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094f6:	627b      	str	r3, [r7, #36]	; 0x24
 80094f8:	e002      	b.n	8009500 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f969 	bl	80097d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d024      	beq.n	8009554 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009512:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f943 	bl	80097aa <HAL_CAN_TxMailbox2CompleteCallback>
 8009524:	e016      	b.n	8009554 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d004      	beq.n	800953a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009536:	627b      	str	r3, [r7, #36]	; 0x24
 8009538:	e00c      	b.n	8009554 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009540:	2b00      	cmp	r3, #0
 8009542:	d004      	beq.n	800954e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800954a:	627b      	str	r3, [r7, #36]	; 0x24
 800954c:	e002      	b.n	8009554 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f949 	bl	80097e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	f003 0308 	and.w	r3, r3, #8
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00c      	beq.n	8009578 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f003 0310 	and.w	r3, r3, #16
 8009564:	2b00      	cmp	r3, #0
 8009566:	d007      	beq.n	8009578 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800956e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2210      	movs	r2, #16
 8009576:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	f003 0304 	and.w	r3, r3, #4
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00b      	beq.n	800959a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f003 0308 	and.w	r3, r3, #8
 8009588:	2b00      	cmp	r3, #0
 800958a:	d006      	beq.n	800959a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2208      	movs	r2, #8
 8009592:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f930 	bl	80097fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	f003 0302 	and.w	r3, r3, #2
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d009      	beq.n	80095b8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f003 0303 	and.w	r3, r3, #3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d002      	beq.n	80095b8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7f7 fc30 	bl	8000e18 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00c      	beq.n	80095dc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	f003 0310 	and.w	r3, r3, #16
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d007      	beq.n	80095dc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80095d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2210      	movs	r2, #16
 80095da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80095dc:	6a3b      	ldr	r3, [r7, #32]
 80095de:	f003 0320 	and.w	r3, r3, #32
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00b      	beq.n	80095fe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f003 0308 	and.w	r3, r3, #8
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d006      	beq.n	80095fe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2208      	movs	r2, #8
 80095f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f912 	bl	8009822 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	f003 0310 	and.w	r3, r3, #16
 8009604:	2b00      	cmp	r3, #0
 8009606:	d009      	beq.n	800961c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	f003 0303 	and.w	r3, r3, #3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f8f9 	bl	800980e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800961c:	6a3b      	ldr	r3, [r7, #32]
 800961e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00b      	beq.n	800963e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	f003 0310 	and.w	r3, r3, #16
 800962c:	2b00      	cmp	r3, #0
 800962e:	d006      	beq.n	800963e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2210      	movs	r2, #16
 8009636:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f8fc 	bl	8009836 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800963e:	6a3b      	ldr	r3, [r7, #32]
 8009640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00b      	beq.n	8009660 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	f003 0308 	and.w	r3, r3, #8
 800964e:	2b00      	cmp	r3, #0
 8009650:	d006      	beq.n	8009660 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2208      	movs	r2, #8
 8009658:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f8f5 	bl	800984a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d07b      	beq.n	8009762 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d072      	beq.n	800975a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800967a:	2b00      	cmp	r3, #0
 800967c:	d008      	beq.n	8009690 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	f043 0301 	orr.w	r3, r3, #1
 800968e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009696:	2b00      	cmp	r3, #0
 8009698:	d008      	beq.n	80096ac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d003      	beq.n	80096ac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	f043 0302 	orr.w	r3, r3, #2
 80096aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d008      	beq.n	80096c8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d003      	beq.n	80096c8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	f043 0304 	orr.w	r3, r3, #4
 80096c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d043      	beq.n	800975a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d03e      	beq.n	800975a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096e2:	2b60      	cmp	r3, #96	; 0x60
 80096e4:	d02b      	beq.n	800973e <HAL_CAN_IRQHandler+0x32a>
 80096e6:	2b60      	cmp	r3, #96	; 0x60
 80096e8:	d82e      	bhi.n	8009748 <HAL_CAN_IRQHandler+0x334>
 80096ea:	2b50      	cmp	r3, #80	; 0x50
 80096ec:	d022      	beq.n	8009734 <HAL_CAN_IRQHandler+0x320>
 80096ee:	2b50      	cmp	r3, #80	; 0x50
 80096f0:	d82a      	bhi.n	8009748 <HAL_CAN_IRQHandler+0x334>
 80096f2:	2b40      	cmp	r3, #64	; 0x40
 80096f4:	d019      	beq.n	800972a <HAL_CAN_IRQHandler+0x316>
 80096f6:	2b40      	cmp	r3, #64	; 0x40
 80096f8:	d826      	bhi.n	8009748 <HAL_CAN_IRQHandler+0x334>
 80096fa:	2b30      	cmp	r3, #48	; 0x30
 80096fc:	d010      	beq.n	8009720 <HAL_CAN_IRQHandler+0x30c>
 80096fe:	2b30      	cmp	r3, #48	; 0x30
 8009700:	d822      	bhi.n	8009748 <HAL_CAN_IRQHandler+0x334>
 8009702:	2b10      	cmp	r3, #16
 8009704:	d002      	beq.n	800970c <HAL_CAN_IRQHandler+0x2f8>
 8009706:	2b20      	cmp	r3, #32
 8009708:	d005      	beq.n	8009716 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800970a:	e01d      	b.n	8009748 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970e:	f043 0308 	orr.w	r3, r3, #8
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009714:	e019      	b.n	800974a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009718:	f043 0310 	orr.w	r3, r3, #16
 800971c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800971e:	e014      	b.n	800974a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	f043 0320 	orr.w	r3, r3, #32
 8009726:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009728:	e00f      	b.n	800974a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009730:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009732:	e00a      	b.n	800974a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800973c:	e005      	b.n	800974a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009744:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009746:	e000      	b.n	800974a <HAL_CAN_IRQHandler+0x336>
            break;
 8009748:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	699a      	ldr	r2, [r3, #24]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009758:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2204      	movs	r2, #4
 8009760:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009764:	2b00      	cmp	r3, #0
 8009766:	d008      	beq.n	800977a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	431a      	orrs	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f872 	bl	800985e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800977a:	bf00      	nop
 800977c:	3728      	adds	r7, #40	; 0x28
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009782:	b480      	push	{r7}
 8009784:	b083      	sub	sp, #12
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800978a:	bf00      	nop
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800979e:	bf00      	nop
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b083      	sub	sp, #12
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80097b2:	bf00      	nop
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80097c6:	bf00      	nop
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80097da:	bf00      	nop
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b083      	sub	sp, #12
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80097ee:	bf00      	nop
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b083      	sub	sp, #12
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009802:	bf00      	nop
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800980e:	b480      	push	{r7}
 8009810:	b083      	sub	sp, #12
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009816:	bf00      	nop
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009822:	b480      	push	{r7}
 8009824:	b083      	sub	sp, #12
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800982a:	bf00      	nop
 800982c:	370c      	adds	r7, #12
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009836:	b480      	push	{r7}
 8009838:	b083      	sub	sp, #12
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800983e:	bf00      	nop
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009852:	bf00      	nop
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800985e:	b480      	push	{r7}
 8009860:	b083      	sub	sp, #12
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009866:	bf00      	nop
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
	...

08009874 <__NVIC_SetPriorityGrouping>:
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009884:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <__NVIC_SetPriorityGrouping+0x44>)
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009890:	4013      	ands	r3, r2
 8009892:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800989c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80098a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80098a6:	4a04      	ldr	r2, [pc, #16]	; (80098b8 <__NVIC_SetPriorityGrouping+0x44>)
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	60d3      	str	r3, [r2, #12]
}
 80098ac:	bf00      	nop
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	e000ed00 	.word	0xe000ed00

080098bc <__NVIC_GetPriorityGrouping>:
{
 80098bc:	b480      	push	{r7}
 80098be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80098c0:	4b04      	ldr	r3, [pc, #16]	; (80098d4 <__NVIC_GetPriorityGrouping+0x18>)
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	0a1b      	lsrs	r3, r3, #8
 80098c6:	f003 0307 	and.w	r3, r3, #7
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	e000ed00 	.word	0xe000ed00

080098d8 <__NVIC_EnableIRQ>:
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	4603      	mov	r3, r0
 80098e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	db0b      	blt.n	8009902 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098ea:	79fb      	ldrb	r3, [r7, #7]
 80098ec:	f003 021f 	and.w	r2, r3, #31
 80098f0:	4907      	ldr	r1, [pc, #28]	; (8009910 <__NVIC_EnableIRQ+0x38>)
 80098f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098f6:	095b      	lsrs	r3, r3, #5
 80098f8:	2001      	movs	r0, #1
 80098fa:	fa00 f202 	lsl.w	r2, r0, r2
 80098fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009902:	bf00      	nop
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	e000e100 	.word	0xe000e100

08009914 <__NVIC_SetPriority>:
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	4603      	mov	r3, r0
 800991c:	6039      	str	r1, [r7, #0]
 800991e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009924:	2b00      	cmp	r3, #0
 8009926:	db0a      	blt.n	800993e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	b2da      	uxtb	r2, r3
 800992c:	490c      	ldr	r1, [pc, #48]	; (8009960 <__NVIC_SetPriority+0x4c>)
 800992e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009932:	0112      	lsls	r2, r2, #4
 8009934:	b2d2      	uxtb	r2, r2
 8009936:	440b      	add	r3, r1
 8009938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800993c:	e00a      	b.n	8009954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	b2da      	uxtb	r2, r3
 8009942:	4908      	ldr	r1, [pc, #32]	; (8009964 <__NVIC_SetPriority+0x50>)
 8009944:	79fb      	ldrb	r3, [r7, #7]
 8009946:	f003 030f 	and.w	r3, r3, #15
 800994a:	3b04      	subs	r3, #4
 800994c:	0112      	lsls	r2, r2, #4
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	440b      	add	r3, r1
 8009952:	761a      	strb	r2, [r3, #24]
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	e000e100 	.word	0xe000e100
 8009964:	e000ed00 	.word	0xe000ed00

08009968 <NVIC_EncodePriority>:
{
 8009968:	b480      	push	{r7}
 800996a:	b089      	sub	sp, #36	; 0x24
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	f1c3 0307 	rsb	r3, r3, #7
 8009982:	2b04      	cmp	r3, #4
 8009984:	bf28      	it	cs
 8009986:	2304      	movcs	r3, #4
 8009988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	3304      	adds	r3, #4
 800998e:	2b06      	cmp	r3, #6
 8009990:	d902      	bls.n	8009998 <NVIC_EncodePriority+0x30>
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	3b03      	subs	r3, #3
 8009996:	e000      	b.n	800999a <NVIC_EncodePriority+0x32>
 8009998:	2300      	movs	r3, #0
 800999a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800999c:	f04f 32ff 	mov.w	r2, #4294967295
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	fa02 f303 	lsl.w	r3, r2, r3
 80099a6:	43da      	mvns	r2, r3
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	401a      	ands	r2, r3
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80099b0:	f04f 31ff 	mov.w	r1, #4294967295
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	fa01 f303 	lsl.w	r3, r1, r3
 80099ba:	43d9      	mvns	r1, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099c0:	4313      	orrs	r3, r2
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3724      	adds	r7, #36	; 0x24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b082      	sub	sp, #8
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7ff ff4c 	bl	8009874 <__NVIC_SetPriorityGrouping>
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80099f6:	f7ff ff61 	bl	80098bc <__NVIC_GetPriorityGrouping>
 80099fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	6978      	ldr	r0, [r7, #20]
 8009a02:	f7ff ffb1 	bl	8009968 <NVIC_EncodePriority>
 8009a06:	4602      	mov	r2, r0
 8009a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7ff ff80 	bl	8009914 <__NVIC_SetPriority>
}
 8009a14:	bf00      	nop
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff ff54 	bl	80098d8 <__NVIC_EnableIRQ>
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e054      	b.n	8009af4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	7f5b      	ldrb	r3, [r3, #29]
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d105      	bne.n	8009a60 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f7fc fd04 	bl	8006468 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2202      	movs	r2, #2
 8009a64:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	791b      	ldrb	r3, [r3, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10c      	bne.n	8009a88 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a22      	ldr	r2, [pc, #136]	; (8009afc <HAL_CRC_Init+0xc4>)
 8009a74:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689a      	ldr	r2, [r3, #8]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0218 	bic.w	r2, r2, #24
 8009a84:	609a      	str	r2, [r3, #8]
 8009a86:	e00c      	b.n	8009aa2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6899      	ldr	r1, [r3, #8]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	461a      	mov	r2, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f834 	bl	8009b00 <HAL_CRCEx_Polynomial_Set>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e028      	b.n	8009af4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	795b      	ldrb	r3, [r3, #5]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d105      	bne.n	8009ab6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab2:	611a      	str	r2, [r3, #16]
 8009ab4:	e004      	b.n	8009ac0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	6912      	ldr	r2, [r2, #16]
 8009abe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	695a      	ldr	r2, [r3, #20]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	699a      	ldr	r2, [r3, #24]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	04c11db7 	.word	0x04c11db7

08009b00 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009b10:	231f      	movs	r3, #31
 8009b12:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009b14:	bf00      	nop
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	1e5a      	subs	r2, r3, #1
 8009b1a:	613a      	str	r2, [r7, #16]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d009      	beq.n	8009b34 <HAL_CRCEx_Polynomial_Set+0x34>
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f003 031f 	and.w	r3, r3, #31
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2c:	f003 0301 	and.w	r3, r3, #1
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d0f0      	beq.n	8009b16 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b18      	cmp	r3, #24
 8009b38:	d846      	bhi.n	8009bc8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8009b3a:	a201      	add	r2, pc, #4	; (adr r2, 8009b40 <HAL_CRCEx_Polynomial_Set+0x40>)
 8009b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b40:	08009bcf 	.word	0x08009bcf
 8009b44:	08009bc9 	.word	0x08009bc9
 8009b48:	08009bc9 	.word	0x08009bc9
 8009b4c:	08009bc9 	.word	0x08009bc9
 8009b50:	08009bc9 	.word	0x08009bc9
 8009b54:	08009bc9 	.word	0x08009bc9
 8009b58:	08009bc9 	.word	0x08009bc9
 8009b5c:	08009bc9 	.word	0x08009bc9
 8009b60:	08009bbd 	.word	0x08009bbd
 8009b64:	08009bc9 	.word	0x08009bc9
 8009b68:	08009bc9 	.word	0x08009bc9
 8009b6c:	08009bc9 	.word	0x08009bc9
 8009b70:	08009bc9 	.word	0x08009bc9
 8009b74:	08009bc9 	.word	0x08009bc9
 8009b78:	08009bc9 	.word	0x08009bc9
 8009b7c:	08009bc9 	.word	0x08009bc9
 8009b80:	08009bb1 	.word	0x08009bb1
 8009b84:	08009bc9 	.word	0x08009bc9
 8009b88:	08009bc9 	.word	0x08009bc9
 8009b8c:	08009bc9 	.word	0x08009bc9
 8009b90:	08009bc9 	.word	0x08009bc9
 8009b94:	08009bc9 	.word	0x08009bc9
 8009b98:	08009bc9 	.word	0x08009bc9
 8009b9c:	08009bc9 	.word	0x08009bc9
 8009ba0:	08009ba5 	.word	0x08009ba5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	2b06      	cmp	r3, #6
 8009ba8:	d913      	bls.n	8009bd2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009bae:	e010      	b.n	8009bd2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	2b07      	cmp	r3, #7
 8009bb4:	d90f      	bls.n	8009bd6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009bba:	e00c      	b.n	8009bd6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	2b0f      	cmp	r3, #15
 8009bc0:	d90b      	bls.n	8009bda <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009bc6:	e008      	b.n	8009bda <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	75fb      	strb	r3, [r7, #23]
      break;
 8009bcc:	e006      	b.n	8009bdc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009bce:	bf00      	nop
 8009bd0:	e004      	b.n	8009bdc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009bd2:	bf00      	nop
 8009bd4:	e002      	b.n	8009bdc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009bd6:	bf00      	nop
 8009bd8:	e000      	b.n	8009bdc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009bda:	bf00      	nop
  }
  if (status == HAL_OK)
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10d      	bne.n	8009bfe <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	f023 0118 	bic.w	r1, r3, #24
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	371c      	adds	r7, #28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e037      	b.n	8009c92 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2202      	movs	r2, #2
 8009c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009c38:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009c3c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8009c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	69db      	ldr	r3, [r3, #28]
 8009c64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f941 	bl	8009efc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}  
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b086      	sub	sp, #24
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	60f8      	str	r0, [r7, #12]
 8009ca2:	60b9      	str	r1, [r7, #8]
 8009ca4:	607a      	str	r2, [r7, #4]
 8009ca6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d101      	bne.n	8009cba <HAL_DMA_Start_IT+0x20>
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	e04a      	b.n	8009d50 <HAL_DMA_Start_IT+0xb6>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d13a      	bne.n	8009d42 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f022 0201 	bic.w	r2, r2, #1
 8009ce8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	68b9      	ldr	r1, [r7, #8]
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 f8d4 	bl	8009e9e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d008      	beq.n	8009d10 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f042 020e 	orr.w	r2, r2, #14
 8009d0c:	601a      	str	r2, [r3, #0]
 8009d0e:	e00f      	b.n	8009d30 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 020a 	orr.w	r2, r2, #10
 8009d1e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f022 0204 	bic.w	r2, r2, #4
 8009d2e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f042 0201 	orr.w	r2, r2, #1
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	e005      	b.n	8009d4e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8009d50:	4618      	mov	r0, r3
 8009d52:	3718      	adds	r7, #24
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d74:	2204      	movs	r2, #4
 8009d76:	409a      	lsls	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d024      	beq.n	8009dca <HAL_DMA_IRQHandler+0x72>
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	f003 0304 	and.w	r3, r3, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d01f      	beq.n	8009dca <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0320 	and.w	r3, r3, #32
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d107      	bne.n	8009da8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f022 0204 	bic.w	r2, r2, #4
 8009da6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009db0:	2104      	movs	r1, #4
 8009db2:	fa01 f202 	lsl.w	r2, r1, r2
 8009db6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d06a      	beq.n	8009e96 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8009dc8:	e065      	b.n	8009e96 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	2202      	movs	r2, #2
 8009dd0:	409a      	lsls	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d02c      	beq.n	8009e34 <HAL_DMA_IRQHandler+0xdc>
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	f003 0302 	and.w	r3, r3, #2
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d027      	beq.n	8009e34 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 0320 	and.w	r3, r3, #32
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10b      	bne.n	8009e0a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f022 020a 	bic.w	r2, r2, #10
 8009e00:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e12:	2102      	movs	r1, #2
 8009e14:	fa01 f202 	lsl.w	r2, r1, r2
 8009e18:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d035      	beq.n	8009e96 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8009e32:	e030      	b.n	8009e96 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e38:	2208      	movs	r2, #8
 8009e3a:	409a      	lsls	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4013      	ands	r3, r2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d028      	beq.n	8009e96 <HAL_DMA_IRQHandler+0x13e>
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	f003 0308 	and.w	r3, r3, #8
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d023      	beq.n	8009e96 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f022 020e 	bic.w	r2, r2, #14
 8009e5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e66:	2101      	movs	r1, #1
 8009e68:	fa01 f202 	lsl.w	r2, r1, r2
 8009e6c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d004      	beq.n	8009e96 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	4798      	blx	r3
    }
  }
}  
 8009e94:	e7ff      	b.n	8009e96 <HAL_DMA_IRQHandler+0x13e>
 8009e96:	bf00      	nop
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b085      	sub	sp, #20
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	607a      	str	r2, [r7, #4]
 8009eaa:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8009eba:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	2b10      	cmp	r3, #16
 8009eca:	d108      	bne.n	8009ede <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009edc:	e007      	b.n	8009eee <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	60da      	str	r2, [r3, #12]
}
 8009eee:	bf00      	nop
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
	...

08009efc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	4b14      	ldr	r3, [pc, #80]	; (8009f5c <DMA_CalcBaseAndBitshift+0x60>)
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d80f      	bhi.n	8009f30 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	461a      	mov	r2, r3
 8009f16:	4b12      	ldr	r3, [pc, #72]	; (8009f60 <DMA_CalcBaseAndBitshift+0x64>)
 8009f18:	4413      	add	r3, r2
 8009f1a:	4a12      	ldr	r2, [pc, #72]	; (8009f64 <DMA_CalcBaseAndBitshift+0x68>)
 8009f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f20:	091b      	lsrs	r3, r3, #4
 8009f22:	009a      	lsls	r2, r3, #2
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a0f      	ldr	r2, [pc, #60]	; (8009f68 <DMA_CalcBaseAndBitshift+0x6c>)
 8009f2c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8009f2e:	e00e      	b.n	8009f4e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	461a      	mov	r2, r3
 8009f36:	4b0d      	ldr	r3, [pc, #52]	; (8009f6c <DMA_CalcBaseAndBitshift+0x70>)
 8009f38:	4413      	add	r3, r2
 8009f3a:	4a0a      	ldr	r2, [pc, #40]	; (8009f64 <DMA_CalcBaseAndBitshift+0x68>)
 8009f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f40:	091b      	lsrs	r3, r3, #4
 8009f42:	009a      	lsls	r2, r3, #2
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a09      	ldr	r2, [pc, #36]	; (8009f70 <DMA_CalcBaseAndBitshift+0x74>)
 8009f4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009f4e:	bf00      	nop
 8009f50:	370c      	adds	r7, #12
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	40020407 	.word	0x40020407
 8009f60:	bffdfff8 	.word	0xbffdfff8
 8009f64:	cccccccd 	.word	0xcccccccd
 8009f68:	40020000 	.word	0x40020000
 8009f6c:	bffdfbf8 	.word	0xbffdfbf8
 8009f70:	40020400 	.word	0x40020400

08009f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b087      	sub	sp, #28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009f82:	e154      	b.n	800a22e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	2101      	movs	r1, #1
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f90:	4013      	ands	r3, r2
 8009f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 8146 	beq.w	800a228 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d005      	beq.n	8009fb4 <HAL_GPIO_Init+0x40>
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	f003 0303 	and.w	r3, r3, #3
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d130      	bne.n	800a016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	2203      	movs	r2, #3
 8009fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc4:	43db      	mvns	r3, r3
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	4013      	ands	r3, r2
 8009fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	68da      	ldr	r2, [r3, #12]
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009fea:	2201      	movs	r2, #1
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff2:	43db      	mvns	r3, r3
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	091b      	lsrs	r3, r3, #4
 800a000:	f003 0201 	and.w	r2, r3, #1
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	fa02 f303 	lsl.w	r3, r2, r3
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f003 0303 	and.w	r3, r3, #3
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d017      	beq.n	800a052 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	2203      	movs	r2, #3
 800a02e:	fa02 f303 	lsl.w	r3, r2, r3
 800a032:	43db      	mvns	r3, r3
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	4013      	ands	r3, r2
 800a038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	005b      	lsls	r3, r3, #1
 800a042:	fa02 f303 	lsl.w	r3, r2, r3
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	4313      	orrs	r3, r2
 800a04a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f003 0303 	and.w	r3, r3, #3
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d123      	bne.n	800a0a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	08da      	lsrs	r2, r3, #3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	3208      	adds	r2, #8
 800a066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a06a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f003 0307 	and.w	r3, r3, #7
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	220f      	movs	r2, #15
 800a076:	fa02 f303 	lsl.w	r3, r2, r3
 800a07a:	43db      	mvns	r3, r3
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	4013      	ands	r3, r2
 800a080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	691a      	ldr	r2, [r3, #16]
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f003 0307 	and.w	r3, r3, #7
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	fa02 f303 	lsl.w	r3, r2, r3
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	4313      	orrs	r3, r2
 800a096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	08da      	lsrs	r2, r3, #3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3208      	adds	r2, #8
 800a0a0:	6939      	ldr	r1, [r7, #16]
 800a0a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	005b      	lsls	r3, r3, #1
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b6:	43db      	mvns	r3, r3
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f003 0203 	and.w	r2, r3, #3
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	005b      	lsls	r3, r3, #1
 800a0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f000 80a0 	beq.w	800a228 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0e8:	4b58      	ldr	r3, [pc, #352]	; (800a24c <HAL_GPIO_Init+0x2d8>)
 800a0ea:	699b      	ldr	r3, [r3, #24]
 800a0ec:	4a57      	ldr	r2, [pc, #348]	; (800a24c <HAL_GPIO_Init+0x2d8>)
 800a0ee:	f043 0301 	orr.w	r3, r3, #1
 800a0f2:	6193      	str	r3, [r2, #24]
 800a0f4:	4b55      	ldr	r3, [pc, #340]	; (800a24c <HAL_GPIO_Init+0x2d8>)
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	f003 0301 	and.w	r3, r3, #1
 800a0fc:	60bb      	str	r3, [r7, #8]
 800a0fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a100:	4a53      	ldr	r2, [pc, #332]	; (800a250 <HAL_GPIO_Init+0x2dc>)
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	089b      	lsrs	r3, r3, #2
 800a106:	3302      	adds	r3, #2
 800a108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a10c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f003 0303 	and.w	r3, r3, #3
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	220f      	movs	r2, #15
 800a118:	fa02 f303 	lsl.w	r3, r2, r3
 800a11c:	43db      	mvns	r3, r3
 800a11e:	693a      	ldr	r2, [r7, #16]
 800a120:	4013      	ands	r3, r2
 800a122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a12a:	d019      	beq.n	800a160 <HAL_GPIO_Init+0x1ec>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a49      	ldr	r2, [pc, #292]	; (800a254 <HAL_GPIO_Init+0x2e0>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d013      	beq.n	800a15c <HAL_GPIO_Init+0x1e8>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a48      	ldr	r2, [pc, #288]	; (800a258 <HAL_GPIO_Init+0x2e4>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d00d      	beq.n	800a158 <HAL_GPIO_Init+0x1e4>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a47      	ldr	r2, [pc, #284]	; (800a25c <HAL_GPIO_Init+0x2e8>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d007      	beq.n	800a154 <HAL_GPIO_Init+0x1e0>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a46      	ldr	r2, [pc, #280]	; (800a260 <HAL_GPIO_Init+0x2ec>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d101      	bne.n	800a150 <HAL_GPIO_Init+0x1dc>
 800a14c:	2304      	movs	r3, #4
 800a14e:	e008      	b.n	800a162 <HAL_GPIO_Init+0x1ee>
 800a150:	2305      	movs	r3, #5
 800a152:	e006      	b.n	800a162 <HAL_GPIO_Init+0x1ee>
 800a154:	2303      	movs	r3, #3
 800a156:	e004      	b.n	800a162 <HAL_GPIO_Init+0x1ee>
 800a158:	2302      	movs	r3, #2
 800a15a:	e002      	b.n	800a162 <HAL_GPIO_Init+0x1ee>
 800a15c:	2301      	movs	r3, #1
 800a15e:	e000      	b.n	800a162 <HAL_GPIO_Init+0x1ee>
 800a160:	2300      	movs	r3, #0
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	f002 0203 	and.w	r2, r2, #3
 800a168:	0092      	lsls	r2, r2, #2
 800a16a:	4093      	lsls	r3, r2
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	4313      	orrs	r3, r2
 800a170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a172:	4937      	ldr	r1, [pc, #220]	; (800a250 <HAL_GPIO_Init+0x2dc>)
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	089b      	lsrs	r3, r3, #2
 800a178:	3302      	adds	r3, #2
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a180:	4b38      	ldr	r3, [pc, #224]	; (800a264 <HAL_GPIO_Init+0x2f0>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	43db      	mvns	r3, r3
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	4013      	ands	r3, r2
 800a18e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d003      	beq.n	800a1a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a1a4:	4a2f      	ldr	r2, [pc, #188]	; (800a264 <HAL_GPIO_Init+0x2f0>)
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a1aa:	4b2e      	ldr	r3, [pc, #184]	; (800a264 <HAL_GPIO_Init+0x2f0>)
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	43db      	mvns	r3, r3
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a1ce:	4a25      	ldr	r2, [pc, #148]	; (800a264 <HAL_GPIO_Init+0x2f0>)
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a1d4:	4b23      	ldr	r3, [pc, #140]	; (800a264 <HAL_GPIO_Init+0x2f0>)
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	43db      	mvns	r3, r3
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d003      	beq.n	800a1f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a1f8:	4a1a      	ldr	r2, [pc, #104]	; (800a264 <HAL_GPIO_Init+0x2f0>)
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a1fe:	4b19      	ldr	r3, [pc, #100]	; (800a264 <HAL_GPIO_Init+0x2f0>)
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	43db      	mvns	r3, r3
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	4013      	ands	r3, r2
 800a20c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4313      	orrs	r3, r2
 800a220:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a222:	4a10      	ldr	r2, [pc, #64]	; (800a264 <HAL_GPIO_Init+0x2f0>)
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	3301      	adds	r3, #1
 800a22c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	fa22 f303 	lsr.w	r3, r2, r3
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f47f aea3 	bne.w	8009f84 <HAL_GPIO_Init+0x10>
  }
}
 800a23e:	bf00      	nop
 800a240:	bf00      	nop
 800a242:	371c      	adds	r7, #28
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	40021000 	.word	0x40021000
 800a250:	40010000 	.word	0x40010000
 800a254:	48000400 	.word	0x48000400
 800a258:	48000800 	.word	0x48000800
 800a25c:	48000c00 	.word	0x48000c00
 800a260:	48001000 	.word	0x48001000
 800a264:	40010400 	.word	0x40010400

0800a268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	807b      	strh	r3, [r7, #2]
 800a274:	4613      	mov	r3, r2
 800a276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a278:	787b      	ldrb	r3, [r7, #1]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d003      	beq.n	800a286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a27e:	887a      	ldrh	r2, [r7, #2]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a284:	e002      	b.n	800a28c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a286:	887a      	ldrh	r2, [r7, #2]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	695b      	ldr	r3, [r3, #20]
 800a2a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a2aa:	887a      	ldrh	r2, [r7, #2]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	041a      	lsls	r2, r3, #16
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	43d9      	mvns	r1, r3
 800a2b6:	887b      	ldrh	r3, [r7, #2]
 800a2b8:	400b      	ands	r3, r1
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	619a      	str	r2, [r3, #24]
}
 800a2c0:	bf00      	nop
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d101      	bne.n	800a2de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e081      	b.n	800a3e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d106      	bne.n	800a2f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7fc f8d8 	bl	80064a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2224      	movs	r2, #36	; 0x24
 800a2fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f022 0201 	bic.w	r2, r2, #1
 800a30e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a31c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	689a      	ldr	r2, [r3, #8]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a32c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d107      	bne.n	800a346 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	689a      	ldr	r2, [r3, #8]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a342:	609a      	str	r2, [r3, #8]
 800a344:	e006      	b.n	800a354 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689a      	ldr	r2, [r3, #8]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a352:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d104      	bne.n	800a366 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a364:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	6812      	ldr	r2, [r2, #0]
 800a370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a378:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a388:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	691a      	ldr	r2, [r3, #16]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	430a      	orrs	r2, r1
 800a3a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	69d9      	ldr	r1, [r3, #28]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a1a      	ldr	r2, [r3, #32]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f042 0201 	orr.w	r2, r2, #1
 800a3c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2220      	movs	r2, #32
 800a3ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
	...

0800a3ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b088      	sub	sp, #32
 800a3f0:	af02      	add	r7, sp, #8
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	607a      	str	r2, [r7, #4]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	817b      	strh	r3, [r7, #10]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b20      	cmp	r3, #32
 800a40a:	f040 80da 	bne.w	800a5c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a414:	2b01      	cmp	r3, #1
 800a416:	d101      	bne.n	800a41c <HAL_I2C_Master_Transmit+0x30>
 800a418:	2302      	movs	r3, #2
 800a41a:	e0d3      	b.n	800a5c4 <HAL_I2C_Master_Transmit+0x1d8>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a424:	f7fd fba6 	bl	8007b74 <HAL_GetTick>
 800a428:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	2319      	movs	r3, #25
 800a430:	2201      	movs	r2, #1
 800a432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f000 f9e6 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e0be      	b.n	800a5c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2221      	movs	r2, #33	; 0x21
 800a44a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2210      	movs	r2, #16
 800a452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	893a      	ldrh	r2, [r7, #8]
 800a466:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a472:	b29b      	uxth	r3, r3
 800a474:	2bff      	cmp	r3, #255	; 0xff
 800a476:	d90e      	bls.n	800a496 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	22ff      	movs	r2, #255	; 0xff
 800a47c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a482:	b2da      	uxtb	r2, r3
 800a484:	8979      	ldrh	r1, [r7, #10]
 800a486:	4b51      	ldr	r3, [pc, #324]	; (800a5cc <HAL_I2C_Master_Transmit+0x1e0>)
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 fb58 	bl	800ab44 <I2C_TransferConfig>
 800a494:	e06c      	b.n	800a570 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4a4:	b2da      	uxtb	r2, r3
 800a4a6:	8979      	ldrh	r1, [r7, #10]
 800a4a8:	4b48      	ldr	r3, [pc, #288]	; (800a5cc <HAL_I2C_Master_Transmit+0x1e0>)
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f000 fb47 	bl	800ab44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800a4b6:	e05b      	b.n	800a570 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	6a39      	ldr	r1, [r7, #32]
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 f9e3 	bl	800a888 <I2C_WaitOnTXISFlagUntilTimeout>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e07b      	b.n	800a5c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d0:	781a      	ldrb	r2, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4dc:	1c5a      	adds	r2, r3, #1
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a500:	b29b      	uxth	r3, r3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d034      	beq.n	800a570 <HAL_I2C_Master_Transmit+0x184>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d130      	bne.n	800a570 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	6a3b      	ldr	r3, [r7, #32]
 800a514:	2200      	movs	r2, #0
 800a516:	2180      	movs	r1, #128	; 0x80
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 f975 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d001      	beq.n	800a528 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e04d      	b.n	800a5c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	2bff      	cmp	r3, #255	; 0xff
 800a530:	d90e      	bls.n	800a550 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	22ff      	movs	r2, #255	; 0xff
 800a536:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a53c:	b2da      	uxtb	r2, r3
 800a53e:	8979      	ldrh	r1, [r7, #10]
 800a540:	2300      	movs	r3, #0
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f000 fafb 	bl	800ab44 <I2C_TransferConfig>
 800a54e:	e00f      	b.n	800a570 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a554:	b29a      	uxth	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a55e:	b2da      	uxtb	r2, r3
 800a560:	8979      	ldrh	r1, [r7, #10]
 800a562:	2300      	movs	r3, #0
 800a564:	9300      	str	r3, [sp, #0]
 800a566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f000 faea 	bl	800ab44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a574:	b29b      	uxth	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d19e      	bne.n	800a4b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	6a39      	ldr	r1, [r7, #32]
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f000 f9c2 	bl	800a908 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e01a      	b.n	800a5c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2220      	movs	r2, #32
 800a594:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	6859      	ldr	r1, [r3, #4]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	4b0b      	ldr	r3, [pc, #44]	; (800a5d0 <HAL_I2C_Master_Transmit+0x1e4>)
 800a5a2:	400b      	ands	r3, r1
 800a5a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2220      	movs	r2, #32
 800a5aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	e000      	b.n	800a5c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a5c2:	2302      	movs	r3, #2
  }
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3718      	adds	r7, #24
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	80002000 	.word	0x80002000
 800a5d0:	fe00e800 	.word	0xfe00e800

0800a5d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	af02      	add	r7, sp, #8
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	607a      	str	r2, [r7, #4]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	817b      	strh	r3, [r7, #10]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b20      	cmp	r3, #32
 800a5f2:	f040 80db 	bne.w	800a7ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d101      	bne.n	800a604 <HAL_I2C_Master_Receive+0x30>
 800a600:	2302      	movs	r3, #2
 800a602:	e0d4      	b.n	800a7ae <HAL_I2C_Master_Receive+0x1da>
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a60c:	f7fd fab2 	bl	8007b74 <HAL_GetTick>
 800a610:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	2319      	movs	r3, #25
 800a618:	2201      	movs	r2, #1
 800a61a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 f8f2 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e0bf      	b.n	800a7ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2222      	movs	r2, #34	; 0x22
 800a632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2210      	movs	r2, #16
 800a63a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	893a      	ldrh	r2, [r7, #8]
 800a64e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	2bff      	cmp	r3, #255	; 0xff
 800a65e:	d90e      	bls.n	800a67e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	22ff      	movs	r2, #255	; 0xff
 800a664:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	8979      	ldrh	r1, [r7, #10]
 800a66e:	4b52      	ldr	r3, [pc, #328]	; (800a7b8 <HAL_I2C_Master_Receive+0x1e4>)
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f000 fa64 	bl	800ab44 <I2C_TransferConfig>
 800a67c:	e06d      	b.n	800a75a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a682:	b29a      	uxth	r2, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	8979      	ldrh	r1, [r7, #10]
 800a690:	4b49      	ldr	r3, [pc, #292]	; (800a7b8 <HAL_I2C_Master_Receive+0x1e4>)
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f000 fa53 	bl	800ab44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a69e:	e05c      	b.n	800a75a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	6a39      	ldr	r1, [r7, #32]
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f96b 	bl	800a980 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e07c      	b.n	800a7ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	b2d2      	uxtb	r2, r2
 800a6c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	1c5a      	adds	r2, r3, #1
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d034      	beq.n	800a75a <HAL_I2C_Master_Receive+0x186>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d130      	bne.n	800a75a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	2200      	movs	r2, #0
 800a700:	2180      	movs	r1, #128	; 0x80
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 f880 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e04d      	b.n	800a7ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a716:	b29b      	uxth	r3, r3
 800a718:	2bff      	cmp	r3, #255	; 0xff
 800a71a:	d90e      	bls.n	800a73a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	22ff      	movs	r2, #255	; 0xff
 800a720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a726:	b2da      	uxtb	r2, r3
 800a728:	8979      	ldrh	r1, [r7, #10]
 800a72a:	2300      	movs	r3, #0
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 fa06 	bl	800ab44 <I2C_TransferConfig>
 800a738:	e00f      	b.n	800a75a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a73e:	b29a      	uxth	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	8979      	ldrh	r1, [r7, #10]
 800a74c:	2300      	movs	r3, #0
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 f9f5 	bl	800ab44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a75e:	b29b      	uxth	r3, r3
 800a760:	2b00      	cmp	r3, #0
 800a762:	d19d      	bne.n	800a6a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	6a39      	ldr	r1, [r7, #32]
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f000 f8cd 	bl	800a908 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e01a      	b.n	800a7ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2220      	movs	r2, #32
 800a77e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6859      	ldr	r1, [r3, #4]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	4b0c      	ldr	r3, [pc, #48]	; (800a7bc <HAL_I2C_Master_Receive+0x1e8>)
 800a78c:	400b      	ands	r3, r1
 800a78e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2220      	movs	r2, #32
 800a794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	e000      	b.n	800a7ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a7ac:	2302      	movs	r3, #2
  }
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3718      	adds	r7, #24
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	80002400 	.word	0x80002400
 800a7bc:	fe00e800 	.word	0xfe00e800

0800a7c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	f003 0302 	and.w	r3, r3, #2
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d103      	bne.n	800a7de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	f003 0301 	and.w	r3, r3, #1
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d007      	beq.n	800a7fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	699a      	ldr	r2, [r3, #24]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f042 0201 	orr.w	r2, r2, #1
 800a7fa:	619a      	str	r2, [r3, #24]
  }
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	603b      	str	r3, [r7, #0]
 800a814:	4613      	mov	r3, r2
 800a816:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a818:	e022      	b.n	800a860 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a820:	d01e      	beq.n	800a860 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a822:	f7fd f9a7 	bl	8007b74 <HAL_GetTick>
 800a826:	4602      	mov	r2, r0
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	683a      	ldr	r2, [r7, #0]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d302      	bcc.n	800a838 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d113      	bne.n	800a860 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a83c:	f043 0220 	orr.w	r2, r3, #32
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2220      	movs	r2, #32
 800a848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e00f      	b.n	800a880 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	699a      	ldr	r2, [r3, #24]
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	4013      	ands	r3, r2
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	bf0c      	ite	eq
 800a870:	2301      	moveq	r3, #1
 800a872:	2300      	movne	r3, #0
 800a874:	b2db      	uxtb	r3, r3
 800a876:	461a      	mov	r2, r3
 800a878:	79fb      	ldrb	r3, [r7, #7]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d0cd      	beq.n	800a81a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a894:	e02c      	b.n	800a8f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	68b9      	ldr	r1, [r7, #8]
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f000 f8dc 	bl	800aa58 <I2C_IsAcknowledgeFailed>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e02a      	b.n	800a900 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b0:	d01e      	beq.n	800a8f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8b2:	f7fd f95f 	bl	8007b74 <HAL_GetTick>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d302      	bcc.n	800a8c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d113      	bne.n	800a8f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8cc:	f043 0220 	orr.w	r2, r3, #32
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2220      	movs	r2, #32
 800a8d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e007      	b.n	800a900 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	f003 0302 	and.w	r3, r3, #2
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d1cb      	bne.n	800a896 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a914:	e028      	b.n	800a968 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	68b9      	ldr	r1, [r7, #8]
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 f89c 	bl	800aa58 <I2C_IsAcknowledgeFailed>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e026      	b.n	800a978 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a92a:	f7fd f923 	bl	8007b74 <HAL_GetTick>
 800a92e:	4602      	mov	r2, r0
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	429a      	cmp	r2, r3
 800a938:	d302      	bcc.n	800a940 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d113      	bne.n	800a968 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a944:	f043 0220 	orr.w	r2, r3, #32
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2220      	movs	r2, #32
 800a950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	e007      	b.n	800a978 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	f003 0320 	and.w	r3, r3, #32
 800a972:	2b20      	cmp	r3, #32
 800a974:	d1cf      	bne.n	800a916 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a98c:	e055      	b.n	800aa3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	68b9      	ldr	r1, [r7, #8]
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f000 f860 	bl	800aa58 <I2C_IsAcknowledgeFailed>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e053      	b.n	800aa4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	f003 0320 	and.w	r3, r3, #32
 800a9ac:	2b20      	cmp	r3, #32
 800a9ae:	d129      	bne.n	800aa04 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	699b      	ldr	r3, [r3, #24]
 800a9b6:	f003 0304 	and.w	r3, r3, #4
 800a9ba:	2b04      	cmp	r3, #4
 800a9bc:	d105      	bne.n	800a9ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e03f      	b.n	800aa4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	6859      	ldr	r1, [r3, #4]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	4b1d      	ldr	r3, [pc, #116]	; (800aa54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a9de:	400b      	ands	r3, r1
 800a9e0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	e022      	b.n	800aa4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa04:	f7fd f8b6 	bl	8007b74 <HAL_GetTick>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d302      	bcc.n	800aa1a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10f      	bne.n	800aa3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa1e:	f043 0220 	orr.w	r2, r3, #32
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e007      	b.n	800aa4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	f003 0304 	and.w	r3, r3, #4
 800aa44:	2b04      	cmp	r3, #4
 800aa46:	d1a2      	bne.n	800a98e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	fe00e800 	.word	0xfe00e800

0800aa58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	f003 0310 	and.w	r3, r3, #16
 800aa6e:	2b10      	cmp	r3, #16
 800aa70:	d161      	bne.n	800ab36 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa80:	d02b      	beq.n	800aada <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	685a      	ldr	r2, [r3, #4]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa90:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa92:	e022      	b.n	800aada <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9a:	d01e      	beq.n	800aada <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa9c:	f7fd f86a 	bl	8007b74 <HAL_GetTick>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d302      	bcc.n	800aab2 <I2C_IsAcknowledgeFailed+0x5a>
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d113      	bne.n	800aada <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aab6:	f043 0220 	orr.w	r2, r3, #32
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2220      	movs	r2, #32
 800aac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e02e      	b.n	800ab38 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	f003 0320 	and.w	r3, r3, #32
 800aae4:	2b20      	cmp	r3, #32
 800aae6:	d1d5      	bne.n	800aa94 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2210      	movs	r2, #16
 800aaee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2220      	movs	r2, #32
 800aaf6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f7ff fe61 	bl	800a7c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	6859      	ldr	r1, [r3, #4]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	4b0d      	ldr	r3, [pc, #52]	; (800ab40 <I2C_IsAcknowledgeFailed+0xe8>)
 800ab0a:	400b      	ands	r3, r1
 800ab0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab12:	f043 0204 	orr.w	r2, r3, #4
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2220      	movs	r2, #32
 800ab1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e000      	b.n	800ab38 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800ab36:	2300      	movs	r3, #0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	fe00e800 	.word	0xfe00e800

0800ab44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	607b      	str	r3, [r7, #4]
 800ab4e:	460b      	mov	r3, r1
 800ab50:	817b      	strh	r3, [r7, #10]
 800ab52:	4613      	mov	r3, r2
 800ab54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	685a      	ldr	r2, [r3, #4]
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	0d5b      	lsrs	r3, r3, #21
 800ab60:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ab64:	4b0d      	ldr	r3, [pc, #52]	; (800ab9c <I2C_TransferConfig+0x58>)
 800ab66:	430b      	orrs	r3, r1
 800ab68:	43db      	mvns	r3, r3
 800ab6a:	ea02 0103 	and.w	r1, r2, r3
 800ab6e:	897b      	ldrh	r3, [r7, #10]
 800ab70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ab74:	7a7b      	ldrb	r3, [r7, #9]
 800ab76:	041b      	lsls	r3, r3, #16
 800ab78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	431a      	orrs	r2, r3
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	431a      	orrs	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800ab8e:	bf00      	nop
 800ab90:	3714      	adds	r7, #20
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	03ff63ff 	.word	0x03ff63ff

0800aba0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b20      	cmp	r3, #32
 800abb4:	d138      	bne.n	800ac28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d101      	bne.n	800abc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800abc0:	2302      	movs	r3, #2
 800abc2:	e032      	b.n	800ac2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2224      	movs	r2, #36	; 0x24
 800abd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f022 0201 	bic.w	r2, r2, #1
 800abe2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800abf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	6819      	ldr	r1, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	430a      	orrs	r2, r1
 800ac02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f042 0201 	orr.w	r2, r2, #1
 800ac12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2220      	movs	r2, #32
 800ac18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	e000      	b.n	800ac2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ac28:	2302      	movs	r3, #2
  }
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b085      	sub	sp, #20
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	2b20      	cmp	r3, #32
 800ac4a:	d139      	bne.n	800acc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d101      	bne.n	800ac5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ac56:	2302      	movs	r3, #2
 800ac58:	e033      	b.n	800acc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2224      	movs	r2, #36	; 0x24
 800ac66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f022 0201 	bic.w	r2, r2, #1
 800ac78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ac88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	021b      	lsls	r3, r3, #8
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f042 0201 	orr.w	r2, r2, #1
 800acaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2220      	movs	r2, #32
 800acb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	e000      	b.n	800acc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800acc0:	2302      	movs	r3, #2
  }
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800acce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acd0:	b08b      	sub	sp, #44	; 0x2c
 800acd2:	af06      	add	r7, sp, #24
 800acd4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d101      	bne.n	800ace0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	e0d0      	b.n	800ae82 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d106      	bne.n	800acfa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f00a fb75 	bl	80153e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2203      	movs	r2, #3
 800acfe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f003 fdab 	bl	800e862 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	73fb      	strb	r3, [r7, #15]
 800ad10:	e04c      	b.n	800adac <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	1c5a      	adds	r2, r3, #1
 800ad18:	4613      	mov	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	440b      	add	r3, r1
 800ad22:	3301      	adds	r3, #1
 800ad24:	2201      	movs	r2, #1
 800ad26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
 800ad2a:	6879      	ldr	r1, [r7, #4]
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	4613      	mov	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	440b      	add	r3, r1
 800ad38:	7bfa      	ldrb	r2, [r7, #15]
 800ad3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ad3c:	7bfa      	ldrb	r2, [r7, #15]
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	b298      	uxth	r0, r3
 800ad42:	6879      	ldr	r1, [r7, #4]
 800ad44:	4613      	mov	r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4413      	add	r3, r2
 800ad4a:	00db      	lsls	r3, r3, #3
 800ad4c:	440b      	add	r3, r1
 800ad4e:	3336      	adds	r3, #54	; 0x36
 800ad50:	4602      	mov	r2, r0
 800ad52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
 800ad56:	6879      	ldr	r1, [r7, #4]
 800ad58:	1c5a      	adds	r2, r3, #1
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	4413      	add	r3, r2
 800ad60:	00db      	lsls	r3, r3, #3
 800ad62:	440b      	add	r3, r1
 800ad64:	3303      	adds	r3, #3
 800ad66:	2200      	movs	r2, #0
 800ad68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ad6a:	7bfa      	ldrb	r2, [r7, #15]
 800ad6c:	6879      	ldr	r1, [r7, #4]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	00db      	lsls	r3, r3, #3
 800ad76:	440b      	add	r3, r1
 800ad78:	3338      	adds	r3, #56	; 0x38
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ad7e:	7bfa      	ldrb	r2, [r7, #15]
 800ad80:	6879      	ldr	r1, [r7, #4]
 800ad82:	4613      	mov	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	440b      	add	r3, r1
 800ad8c:	333c      	adds	r3, #60	; 0x3c
 800ad8e:	2200      	movs	r2, #0
 800ad90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ad92:	7bfa      	ldrb	r2, [r7, #15]
 800ad94:	6879      	ldr	r1, [r7, #4]
 800ad96:	4613      	mov	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	00db      	lsls	r3, r3, #3
 800ad9e:	440b      	add	r3, r1
 800ada0:	3340      	adds	r3, #64	; 0x40
 800ada2:	2200      	movs	r2, #0
 800ada4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
 800ada8:	3301      	adds	r3, #1
 800adaa:	73fb      	strb	r3, [r7, #15]
 800adac:	7bfa      	ldrb	r2, [r7, #15]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d3ad      	bcc.n	800ad12 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800adb6:	2300      	movs	r3, #0
 800adb8:	73fb      	strb	r3, [r7, #15]
 800adba:	e044      	b.n	800ae46 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800adbc:	7bfa      	ldrb	r2, [r7, #15]
 800adbe:	6879      	ldr	r1, [r7, #4]
 800adc0:	4613      	mov	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4413      	add	r3, r2
 800adc6:	00db      	lsls	r3, r3, #3
 800adc8:	440b      	add	r3, r1
 800adca:	f203 1369 	addw	r3, r3, #361	; 0x169
 800adce:	2200      	movs	r2, #0
 800add0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800add2:	7bfa      	ldrb	r2, [r7, #15]
 800add4:	6879      	ldr	r1, [r7, #4]
 800add6:	4613      	mov	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	00db      	lsls	r3, r3, #3
 800adde:	440b      	add	r3, r1
 800ade0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ade4:	7bfa      	ldrb	r2, [r7, #15]
 800ade6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ade8:	7bfa      	ldrb	r2, [r7, #15]
 800adea:	6879      	ldr	r1, [r7, #4]
 800adec:	4613      	mov	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	00db      	lsls	r3, r3, #3
 800adf4:	440b      	add	r3, r1
 800adf6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800adfa:	2200      	movs	r2, #0
 800adfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800adfe:	7bfa      	ldrb	r2, [r7, #15]
 800ae00:	6879      	ldr	r1, [r7, #4]
 800ae02:	4613      	mov	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	00db      	lsls	r3, r3, #3
 800ae0a:	440b      	add	r3, r1
 800ae0c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ae10:	2200      	movs	r2, #0
 800ae12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ae14:	7bfa      	ldrb	r2, [r7, #15]
 800ae16:	6879      	ldr	r1, [r7, #4]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	00db      	lsls	r3, r3, #3
 800ae20:	440b      	add	r3, r1
 800ae22:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae26:	2200      	movs	r2, #0
 800ae28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ae2a:	7bfa      	ldrb	r2, [r7, #15]
 800ae2c:	6879      	ldr	r1, [r7, #4]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	4413      	add	r3, r2
 800ae34:	00db      	lsls	r3, r3, #3
 800ae36:	440b      	add	r3, r1
 800ae38:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	3301      	adds	r3, #1
 800ae44:	73fb      	strb	r3, [r7, #15]
 800ae46:	7bfa      	ldrb	r2, [r7, #15]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d3b5      	bcc.n	800adbc <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	603b      	str	r3, [r7, #0]
 800ae56:	687e      	ldr	r6, [r7, #4]
 800ae58:	466d      	mov	r5, sp
 800ae5a:	f106 0410 	add.w	r4, r6, #16
 800ae5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	602b      	str	r3, [r5, #0]
 800ae66:	1d33      	adds	r3, r6, #4
 800ae68:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae6a:	6838      	ldr	r0, [r7, #0]
 800ae6c:	f003 fd14 	bl	800e898 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d101      	bne.n	800aea0 <HAL_PCD_Start+0x16>
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	e016      	b.n	800aece <HAL_PCD_Start+0x44>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f003 fcc1 	bl	800e834 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f00a fd3b 	bl	8015930 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f005 fed6 	bl	8010c70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b082      	sub	sp, #8
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f005 fecf 	bl	8010c86 <USB_ReadInterrupts>
 800aee8:	4603      	mov	r3, r0
 800aeea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aeee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aef2:	d102      	bne.n	800aefa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 faf6 	bl	800b4e6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4618      	mov	r0, r3
 800af00:	f005 fec1 	bl	8010c86 <USB_ReadInterrupts>
 800af04:	4603      	mov	r3, r0
 800af06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af0e:	d112      	bne.n	800af36 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af18:	b29a      	uxth	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af22:	b292      	uxth	r2, r2
 800af24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f00a fb04 	bl	8015536 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800af2e:	2100      	movs	r1, #0
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f8c7 	bl	800b0c4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f005 fea3 	bl	8010c86 <USB_ReadInterrupts>
 800af40:	4603      	mov	r3, r0
 800af42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af4a:	d10b      	bne.n	800af64 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af54:	b29a      	uxth	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af5e:	b292      	uxth	r2, r2
 800af60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4618      	mov	r0, r3
 800af6a:	f005 fe8c 	bl	8010c86 <USB_ReadInterrupts>
 800af6e:	4603      	mov	r3, r0
 800af70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af78:	d10b      	bne.n	800af92 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af82:	b29a      	uxth	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af8c:	b292      	uxth	r2, r2
 800af8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4618      	mov	r0, r3
 800af98:	f005 fe75 	bl	8010c86 <USB_ReadInterrupts>
 800af9c:	4603      	mov	r3, r0
 800af9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800afa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afa6:	d126      	bne.n	800aff6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f022 0204 	bic.w	r2, r2, #4
 800afba:	b292      	uxth	r2, r2
 800afbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800afc8:	b29a      	uxth	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f022 0208 	bic.w	r2, r2, #8
 800afd2:	b292      	uxth	r2, r2
 800afd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f00a fae5 	bl	80155a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aff0:	b292      	uxth	r2, r2
 800aff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4618      	mov	r0, r3
 800affc:	f005 fe43 	bl	8010c86 <USB_ReadInterrupts>
 800b000:	4603      	mov	r3, r0
 800b002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b00a:	d126      	bne.n	800b05a <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b014:	b29a      	uxth	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f042 0208 	orr.w	r2, r2, #8
 800b01e:	b292      	uxth	r2, r2
 800b020:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b036:	b292      	uxth	r2, r2
 800b038:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b044:	b29a      	uxth	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f042 0204 	orr.w	r2, r2, #4
 800b04e:	b292      	uxth	r2, r2
 800b050:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f00a fa8d 	bl	8015574 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4618      	mov	r0, r3
 800b060:	f005 fe11 	bl	8010c86 <USB_ReadInterrupts>
 800b064:	4603      	mov	r3, r0
 800b066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b06a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b06e:	d10e      	bne.n	800b08e <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b078:	b29a      	uxth	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b082:	b292      	uxth	r2, r2
 800b084:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f00a fa46 	bl	801551a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4618      	mov	r0, r3
 800b094:	f005 fdf7 	bl	8010c86 <USB_ReadInterrupts>
 800b098:	4603      	mov	r3, r0
 800b09a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b09e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0a2:	d10b      	bne.n	800b0bc <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0b6:	b292      	uxth	r2, r2
 800b0b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800b0bc:	bf00      	nop
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d101      	bne.n	800b0de <HAL_PCD_SetAddress+0x1a>
 800b0da:	2302      	movs	r3, #2
 800b0dc:	e013      	b.n	800b106 <HAL_PCD_SetAddress+0x42>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	78fa      	ldrb	r2, [r7, #3]
 800b0ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	78fa      	ldrb	r2, [r7, #3]
 800b0f4:	4611      	mov	r1, r2
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f005 fda6 	bl	8010c48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3708      	adds	r7, #8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b084      	sub	sp, #16
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	4608      	mov	r0, r1
 800b118:	4611      	mov	r1, r2
 800b11a:	461a      	mov	r2, r3
 800b11c:	4603      	mov	r3, r0
 800b11e:	70fb      	strb	r3, [r7, #3]
 800b120:	460b      	mov	r3, r1
 800b122:	803b      	strh	r3, [r7, #0]
 800b124:	4613      	mov	r3, r2
 800b126:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b128:	2300      	movs	r3, #0
 800b12a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b12c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b130:	2b00      	cmp	r3, #0
 800b132:	da0e      	bge.n	800b152 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b134:	78fb      	ldrb	r3, [r7, #3]
 800b136:	f003 0307 	and.w	r3, r3, #7
 800b13a:	1c5a      	adds	r2, r3, #1
 800b13c:	4613      	mov	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	4413      	add	r3, r2
 800b148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2201      	movs	r2, #1
 800b14e:	705a      	strb	r2, [r3, #1]
 800b150:	e00e      	b.n	800b170 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b152:	78fb      	ldrb	r3, [r7, #3]
 800b154:	f003 0207 	and.w	r2, r3, #7
 800b158:	4613      	mov	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	00db      	lsls	r3, r3, #3
 800b160:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	4413      	add	r3, r2
 800b168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b170:	78fb      	ldrb	r3, [r7, #3]
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	b2da      	uxtb	r2, r3
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b17c:	883a      	ldrh	r2, [r7, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	78ba      	ldrb	r2, [r7, #2]
 800b186:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	785b      	ldrb	r3, [r3, #1]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d004      	beq.n	800b19a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	b29a      	uxth	r2, r3
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b19a:	78bb      	ldrb	r3, [r7, #2]
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d102      	bne.n	800b1a6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d101      	bne.n	800b1b4 <HAL_PCD_EP_Open+0xa6>
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	e00e      	b.n	800b1d2 <HAL_PCD_EP_Open+0xc4>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	68f9      	ldr	r1, [r7, #12]
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f003 fb8a 	bl	800e8dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800b1d0:	7afb      	ldrb	r3, [r7, #11]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b084      	sub	sp, #16
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b1e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	da0e      	bge.n	800b20c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b1ee:	78fb      	ldrb	r3, [r7, #3]
 800b1f0:	f003 0307 	and.w	r3, r3, #7
 800b1f4:	1c5a      	adds	r2, r3, #1
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	00db      	lsls	r3, r3, #3
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	4413      	add	r3, r2
 800b202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2201      	movs	r2, #1
 800b208:	705a      	strb	r2, [r3, #1]
 800b20a:	e00e      	b.n	800b22a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b20c:	78fb      	ldrb	r3, [r7, #3]
 800b20e:	f003 0207 	and.w	r2, r3, #7
 800b212:	4613      	mov	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4413      	add	r3, r2
 800b218:	00db      	lsls	r3, r3, #3
 800b21a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	4413      	add	r3, r2
 800b222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b22a:	78fb      	ldrb	r3, [r7, #3]
 800b22c:	f003 0307 	and.w	r3, r3, #7
 800b230:	b2da      	uxtb	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d101      	bne.n	800b244 <HAL_PCD_EP_Close+0x6a>
 800b240:	2302      	movs	r3, #2
 800b242:	e00e      	b.n	800b262 <HAL_PCD_EP_Close+0x88>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68f9      	ldr	r1, [r7, #12]
 800b252:	4618      	mov	r0, r3
 800b254:	f003 fed6 	bl	800f004 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b086      	sub	sp, #24
 800b26e:	af00      	add	r7, sp, #0
 800b270:	60f8      	str	r0, [r7, #12]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	603b      	str	r3, [r7, #0]
 800b276:	460b      	mov	r3, r1
 800b278:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b27a:	7afb      	ldrb	r3, [r7, #11]
 800b27c:	f003 0207 	and.w	r2, r3, #7
 800b280:	4613      	mov	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	4413      	add	r3, r2
 800b286:	00db      	lsls	r3, r3, #3
 800b288:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	4413      	add	r3, r2
 800b290:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b2aa:	7afb      	ldrb	r3, [r7, #11]
 800b2ac:	f003 0307 	and.w	r3, r3, #7
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b2b6:	7afb      	ldrb	r3, [r7, #11]
 800b2b8:	f003 0307 	and.w	r3, r3, #7
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d106      	bne.n	800b2ce <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6979      	ldr	r1, [r7, #20]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f004 f889 	bl	800f3de <USB_EPStartXfer>
 800b2cc:	e005      	b.n	800b2da <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	6979      	ldr	r1, [r7, #20]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f004 f882 	bl	800f3de <USB_EPStartXfer>
  }

  return HAL_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3718      	adds	r7, #24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b2f0:	78fb      	ldrb	r3, [r7, #3]
 800b2f2:	f003 0207 	and.w	r2, r3, #7
 800b2f6:	6879      	ldr	r1, [r7, #4]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4413      	add	r3, r2
 800b2fe:	00db      	lsls	r3, r3, #3
 800b300:	440b      	add	r3, r1
 800b302:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b306:	681b      	ldr	r3, [r3, #0]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	607a      	str	r2, [r7, #4]
 800b31e:	603b      	str	r3, [r7, #0]
 800b320:	460b      	mov	r3, r1
 800b322:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b324:	7afb      	ldrb	r3, [r7, #11]
 800b326:	f003 0307 	and.w	r3, r3, #7
 800b32a:	1c5a      	adds	r2, r3, #1
 800b32c:	4613      	mov	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4413      	add	r3, r2
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	4413      	add	r3, r2
 800b338:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2201      	movs	r2, #1
 800b34a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2200      	movs	r2, #0
 800b358:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2201      	movs	r2, #1
 800b35e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b360:	7afb      	ldrb	r3, [r7, #11]
 800b362:	f003 0307 	and.w	r3, r3, #7
 800b366:	b2da      	uxtb	r2, r3
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b36c:	7afb      	ldrb	r3, [r7, #11]
 800b36e:	f003 0307 	and.w	r3, r3, #7
 800b372:	2b00      	cmp	r3, #0
 800b374:	d106      	bne.n	800b384 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6979      	ldr	r1, [r7, #20]
 800b37c:	4618      	mov	r0, r3
 800b37e:	f004 f82e 	bl	800f3de <USB_EPStartXfer>
 800b382:	e005      	b.n	800b390 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	6979      	ldr	r1, [r7, #20]
 800b38a:	4618      	mov	r0, r3
 800b38c:	f004 f827 	bl	800f3de <USB_EPStartXfer>
  }

  return HAL_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3718      	adds	r7, #24
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b084      	sub	sp, #16
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b3a6:	78fb      	ldrb	r3, [r7, #3]
 800b3a8:	f003 0207 	and.w	r2, r3, #7
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d901      	bls.n	800b3b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e03e      	b.n	800b436 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b3b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	da0e      	bge.n	800b3de <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b3c0:	78fb      	ldrb	r3, [r7, #3]
 800b3c2:	f003 0307 	and.w	r3, r3, #7
 800b3c6:	1c5a      	adds	r2, r3, #1
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	4413      	add	r3, r2
 800b3ce:	00db      	lsls	r3, r3, #3
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	705a      	strb	r2, [r3, #1]
 800b3dc:	e00c      	b.n	800b3f8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b3de:	78fa      	ldrb	r2, [r7, #3]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	00db      	lsls	r3, r3, #3
 800b3e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b3fe:	78fb      	ldrb	r3, [r7, #3]
 800b400:	f003 0307 	and.w	r3, r3, #7
 800b404:	b2da      	uxtb	r2, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b410:	2b01      	cmp	r3, #1
 800b412:	d101      	bne.n	800b418 <HAL_PCD_EP_SetStall+0x7e>
 800b414:	2302      	movs	r3, #2
 800b416:	e00e      	b.n	800b436 <HAL_PCD_EP_SetStall+0x9c>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68f9      	ldr	r1, [r7, #12]
 800b426:	4618      	mov	r0, r3
 800b428:	f005 fb0f 	bl	8010a4a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b084      	sub	sp, #16
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	460b      	mov	r3, r1
 800b448:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b44a:	78fb      	ldrb	r3, [r7, #3]
 800b44c:	f003 020f 	and.w	r2, r3, #15
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	429a      	cmp	r2, r3
 800b456:	d901      	bls.n	800b45c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e040      	b.n	800b4de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b45c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b460:	2b00      	cmp	r3, #0
 800b462:	da0e      	bge.n	800b482 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b464:	78fb      	ldrb	r3, [r7, #3]
 800b466:	f003 0307 	and.w	r3, r3, #7
 800b46a:	1c5a      	adds	r2, r3, #1
 800b46c:	4613      	mov	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	00db      	lsls	r3, r3, #3
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	4413      	add	r3, r2
 800b478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2201      	movs	r2, #1
 800b47e:	705a      	strb	r2, [r3, #1]
 800b480:	e00e      	b.n	800b4a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b482:	78fb      	ldrb	r3, [r7, #3]
 800b484:	f003 0207 	and.w	r2, r3, #7
 800b488:	4613      	mov	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	00db      	lsls	r3, r3, #3
 800b490:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	4413      	add	r3, r2
 800b498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b4a6:	78fb      	ldrb	r3, [r7, #3]
 800b4a8:	f003 0307 	and.w	r3, r3, #7
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d101      	bne.n	800b4c0 <HAL_PCD_EP_ClrStall+0x82>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	e00e      	b.n	800b4de <HAL_PCD_EP_ClrStall+0xa0>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68f9      	ldr	r1, [r7, #12]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f005 fb0c 	bl	8010aec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b096      	sub	sp, #88	; 0x58
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b4ee:	e3a9      	b.n	800bc44 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b4f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b4fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b500:	b2db      	uxtb	r3, r3
 800b502:	f003 030f 	and.w	r3, r3, #15
 800b506:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800b50a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f040 8164 	bne.w	800b7dc <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b514:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b518:	f003 0310 	and.w	r3, r3, #16
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d152      	bne.n	800b5c6 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	881b      	ldrh	r3, [r3, #0]
 800b526:	b29b      	uxth	r3, r3
 800b528:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b52c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b530:	81fb      	strh	r3, [r7, #14]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	89fb      	ldrh	r3, [r7, #14]
 800b538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b53c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b540:	b29b      	uxth	r3, r3
 800b542:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	3328      	adds	r3, #40	; 0x28
 800b548:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b552:	b29b      	uxth	r3, r3
 800b554:	461a      	mov	r2, r3
 800b556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	00db      	lsls	r3, r3, #3
 800b55c:	4413      	add	r3, r2
 800b55e:	3302      	adds	r3, #2
 800b560:	005b      	lsls	r3, r3, #1
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	6812      	ldr	r2, [r2, #0]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b56c:	881b      	ldrh	r3, [r3, #0]
 800b56e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b574:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b578:	695a      	ldr	r2, [r3, #20]
 800b57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b57c:	69db      	ldr	r3, [r3, #28]
 800b57e:	441a      	add	r2, r3
 800b580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b582:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b584:	2100      	movs	r1, #0
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f009 ffad 	bl	80154e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b592:	b2db      	uxtb	r3, r3
 800b594:	2b00      	cmp	r3, #0
 800b596:	f000 8355 	beq.w	800bc44 <PCD_EP_ISR_Handler+0x75e>
 800b59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f040 8350 	bne.w	800bc44 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	b292      	uxth	r2, r2
 800b5b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b5c4:	e33e      	b.n	800bc44 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b5cc:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	881b      	ldrh	r3, [r3, #0]
 800b5d4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b5d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b5dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d034      	beq.n	800b64e <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	00db      	lsls	r3, r3, #3
 800b5f6:	4413      	add	r3, r2
 800b5f8:	3306      	adds	r3, #6
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	6812      	ldr	r2, [r2, #0]
 800b600:	4413      	add	r3, r2
 800b602:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b60c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b60e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6818      	ldr	r0, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800b61a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b61c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b61e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b620:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b622:	b29b      	uxth	r3, r3
 800b624:	f005 fb85 	bl	8010d32 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	881b      	ldrh	r3, [r3, #0]
 800b62e:	b29a      	uxth	r2, r3
 800b630:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b634:	4013      	ands	r3, r2
 800b636:	823b      	strh	r3, [r7, #16]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	8a3a      	ldrh	r2, [r7, #16]
 800b63e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b642:	b292      	uxth	r2, r2
 800b644:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f009 ff20 	bl	801548c <HAL_PCD_SetupStageCallback>
 800b64c:	e2fa      	b.n	800bc44 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b64e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b652:	2b00      	cmp	r3, #0
 800b654:	f280 82f6 	bge.w	800bc44 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	881b      	ldrh	r3, [r3, #0]
 800b65e:	b29a      	uxth	r2, r3
 800b660:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b664:	4013      	ands	r3, r2
 800b666:	83fb      	strh	r3, [r7, #30]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	8bfa      	ldrh	r2, [r7, #30]
 800b66e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b672:	b292      	uxth	r2, r2
 800b674:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b67e:	b29b      	uxth	r3, r3
 800b680:	461a      	mov	r2, r3
 800b682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	00db      	lsls	r3, r3, #3
 800b688:	4413      	add	r3, r2
 800b68a:	3306      	adds	r3, #6
 800b68c:	005b      	lsls	r3, r3, #1
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	6812      	ldr	r2, [r2, #0]
 800b692:	4413      	add	r3, r2
 800b694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b698:	881b      	ldrh	r3, [r3, #0]
 800b69a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b69e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6a0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b6a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6a4:	69db      	ldr	r3, [r3, #28]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d019      	beq.n	800b6de <PCD_EP_ISR_Handler+0x1f8>
 800b6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ac:	695b      	ldr	r3, [r3, #20]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d015      	beq.n	800b6de <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6818      	ldr	r0, [r3, #0]
 800b6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6b8:	6959      	ldr	r1, [r3, #20]
 800b6ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6bc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b6be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6c0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	f005 fb35 	bl	8010d32 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b6c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ca:	695a      	ldr	r2, [r3, #20]
 800b6cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ce:	69db      	ldr	r3, [r3, #28]
 800b6d0:	441a      	add	r2, r3
 800b6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f009 fee9 	bl	80154b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	881b      	ldrh	r3, [r3, #0]
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f040 82aa 	bne.w	800bc44 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	61bb      	str	r3, [r7, #24]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	461a      	mov	r2, r3
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	4413      	add	r3, r2
 800b706:	61bb      	str	r3, [r7, #24]
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b70e:	617b      	str	r3, [r7, #20]
 800b710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d112      	bne.n	800b73e <PCD_EP_ISR_Handler+0x258>
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	881b      	ldrh	r3, [r3, #0]
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b722:	b29a      	uxth	r2, r3
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	801a      	strh	r2, [r3, #0]
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b736:	b29a      	uxth	r2, r3
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	801a      	strh	r2, [r3, #0]
 800b73c:	e02f      	b.n	800b79e <PCD_EP_ISR_Handler+0x2b8>
 800b73e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	2b3e      	cmp	r3, #62	; 0x3e
 800b744:	d813      	bhi.n	800b76e <PCD_EP_ISR_Handler+0x288>
 800b746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	085b      	lsrs	r3, r3, #1
 800b74c:	647b      	str	r3, [r7, #68]	; 0x44
 800b74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	f003 0301 	and.w	r3, r3, #1
 800b756:	2b00      	cmp	r3, #0
 800b758:	d002      	beq.n	800b760 <PCD_EP_ISR_Handler+0x27a>
 800b75a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b75c:	3301      	adds	r3, #1
 800b75e:	647b      	str	r3, [r7, #68]	; 0x44
 800b760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b762:	b29b      	uxth	r3, r3
 800b764:	029b      	lsls	r3, r3, #10
 800b766:	b29a      	uxth	r2, r3
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	801a      	strh	r2, [r3, #0]
 800b76c:	e017      	b.n	800b79e <PCD_EP_ISR_Handler+0x2b8>
 800b76e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	095b      	lsrs	r3, r3, #5
 800b774:	647b      	str	r3, [r7, #68]	; 0x44
 800b776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	f003 031f 	and.w	r3, r3, #31
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d102      	bne.n	800b788 <PCD_EP_ISR_Handler+0x2a2>
 800b782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b784:	3b01      	subs	r3, #1
 800b786:	647b      	str	r3, [r7, #68]	; 0x44
 800b788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	029b      	lsls	r3, r3, #10
 800b78e:	b29b      	uxth	r3, r3
 800b790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b798:	b29a      	uxth	r2, r3
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ae:	827b      	strh	r3, [r7, #18]
 800b7b0:	8a7b      	ldrh	r3, [r7, #18]
 800b7b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b7b6:	827b      	strh	r3, [r7, #18]
 800b7b8:	8a7b      	ldrh	r3, [r7, #18]
 800b7ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b7be:	827b      	strh	r3, [r7, #18]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	8a7b      	ldrh	r3, [r7, #18]
 800b7c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	8013      	strh	r3, [r2, #0]
 800b7da:	e233      	b.n	800bc44 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	881b      	ldrh	r3, [r3, #0]
 800b7ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b7f0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f280 80fc 	bge.w	800b9f2 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	461a      	mov	r2, r3
 800b800:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	881b      	ldrh	r3, [r3, #0]
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b810:	4013      	ands	r3, r2
 800b812:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	461a      	mov	r2, r3
 800b81c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	4413      	add	r3, r2
 800b824:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800b828:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b82c:	b292      	uxth	r2, r2
 800b82e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b830:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800b834:	4613      	mov	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4413      	add	r3, r2
 800b83a:	00db      	lsls	r3, r3, #3
 800b83c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	4413      	add	r3, r2
 800b844:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b848:	7b1b      	ldrb	r3, [r3, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d125      	bne.n	800b89a <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b856:	b29b      	uxth	r3, r3
 800b858:	461a      	mov	r2, r3
 800b85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	00db      	lsls	r3, r3, #3
 800b860:	4413      	add	r3, r2
 800b862:	3306      	adds	r3, #6
 800b864:	005b      	lsls	r3, r3, #1
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	6812      	ldr	r2, [r2, #0]
 800b86a:	4413      	add	r3, r2
 800b86c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b870:	881b      	ldrh	r3, [r3, #0]
 800b872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b876:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800b87a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f000 8092 	beq.w	800b9a8 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6818      	ldr	r0, [r3, #0]
 800b888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b88a:	6959      	ldr	r1, [r3, #20]
 800b88c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b88e:	88da      	ldrh	r2, [r3, #6]
 800b890:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b894:	f005 fa4d 	bl	8010d32 <USB_ReadPMA>
 800b898:	e086      	b.n	800b9a8 <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800b89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b89c:	78db      	ldrb	r3, [r3, #3]
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d10a      	bne.n	800b8b8 <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800b8a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f9d8 	bl	800bc60 <HAL_PCD_EP_DB_Receive>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b8b6:	e077      	b.n	800b9a8 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	4413      	add	r3, r2
 800b8c6:	881b      	ldrh	r3, [r3, #0]
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8d2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	441a      	add	r2, r3
 800b8e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b8e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	461a      	mov	r2, r3
 800b902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b912:	2b00      	cmp	r3, #0
 800b914:	d024      	beq.n	800b960 <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b91e:	b29b      	uxth	r3, r3
 800b920:	461a      	mov	r2, r3
 800b922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	00db      	lsls	r3, r3, #3
 800b928:	4413      	add	r3, r2
 800b92a:	3302      	adds	r3, #2
 800b92c:	005b      	lsls	r3, r3, #1
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	6812      	ldr	r2, [r2, #0]
 800b932:	4413      	add	r3, r2
 800b934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b938:	881b      	ldrh	r3, [r3, #0]
 800b93a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b93e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800b942:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b946:	2b00      	cmp	r3, #0
 800b948:	d02e      	beq.n	800b9a8 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6818      	ldr	r0, [r3, #0]
 800b94e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b950:	6959      	ldr	r1, [r3, #20]
 800b952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b954:	891a      	ldrh	r2, [r3, #8]
 800b956:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b95a:	f005 f9ea 	bl	8010d32 <USB_ReadPMA>
 800b95e:	e023      	b.n	800b9a8 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b968:	b29b      	uxth	r3, r3
 800b96a:	461a      	mov	r2, r3
 800b96c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	00db      	lsls	r3, r3, #3
 800b972:	4413      	add	r3, r2
 800b974:	3306      	adds	r3, #6
 800b976:	005b      	lsls	r3, r3, #1
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	6812      	ldr	r2, [r2, #0]
 800b97c:	4413      	add	r3, r2
 800b97e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b982:	881b      	ldrh	r3, [r3, #0]
 800b984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b988:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800b98c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b990:	2b00      	cmp	r3, #0
 800b992:	d009      	beq.n	800b9a8 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6818      	ldr	r0, [r3, #0]
 800b998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b99a:	6959      	ldr	r1, [r3, #20]
 800b99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b99e:	895a      	ldrh	r2, [r3, #10]
 800b9a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b9a4:	f005 f9c5 	bl	8010d32 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800b9a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9aa:	69da      	ldr	r2, [r3, #28]
 800b9ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b9b0:	441a      	add	r2, r3
 800b9b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800b9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9b8:	695a      	ldr	r2, [r3, #20]
 800b9ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b9be:	441a      	add	r2, r3
 800b9c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9c2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b9c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d005      	beq.n	800b9d8 <PCD_EP_ISR_Handler+0x4f2>
 800b9cc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800b9d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9d2:	691b      	ldr	r3, [r3, #16]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d206      	bcs.n	800b9e6 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800b9d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f009 fd66 	bl	80154b0 <HAL_PCD_DataOutStageCallback>
 800b9e4:	e005      	b.n	800b9f2 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f003 fcf6 	bl	800f3de <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800b9f2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 8122 	beq.w	800bc44 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 800ba00:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ba04:	1c5a      	adds	r2, r3, #1
 800ba06:	4613      	mov	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4413      	add	r3, r2
 800ba0c:	00db      	lsls	r3, r3, #3
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	4413      	add	r3, r2
 800ba12:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4413      	add	r3, r2
 800ba22:	881b      	ldrh	r3, [r3, #0]
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800ba2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	461a      	mov	r2, r3
 800ba38:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	441a      	add	r2, r3
 800ba40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800ba50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba52:	78db      	ldrb	r3, [r3, #3]
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	f000 809d 	beq.w	800bb94 <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 800ba5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ba60:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ba64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d046      	beq.n	800bafa <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ba6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6e:	785b      	ldrb	r3, [r3, #1]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d126      	bne.n	800bac2 <PCD_EP_ISR_Handler+0x5dc>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	627b      	str	r3, [r7, #36]	; 0x24
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	461a      	mov	r2, r3
 800ba86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba88:	4413      	add	r3, r2
 800ba8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ba8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	011a      	lsls	r2, r3, #4
 800ba92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba94:	4413      	add	r3, r2
 800ba96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ba9a:	623b      	str	r3, [r7, #32]
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	881b      	ldrh	r3, [r3, #0]
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	6a3b      	ldr	r3, [r7, #32]
 800baaa:	801a      	strh	r2, [r3, #0]
 800baac:	6a3b      	ldr	r3, [r7, #32]
 800baae:	881b      	ldrh	r3, [r3, #0]
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baba:	b29a      	uxth	r2, r3
 800babc:	6a3b      	ldr	r3, [r7, #32]
 800babe:	801a      	strh	r2, [r3, #0]
 800bac0:	e061      	b.n	800bb86 <PCD_EP_ISR_Handler+0x6a0>
 800bac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac4:	785b      	ldrb	r3, [r3, #1]
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d15d      	bne.n	800bb86 <PCD_EP_ISR_Handler+0x6a0>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bad8:	b29b      	uxth	r3, r3
 800bada:	461a      	mov	r2, r3
 800badc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bade:	4413      	add	r3, r2
 800bae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	011a      	lsls	r2, r3, #4
 800bae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baea:	4413      	add	r3, r2
 800baec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800baf0:	62bb      	str	r3, [r7, #40]	; 0x28
 800baf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf4:	2200      	movs	r2, #0
 800baf6:	801a      	strh	r2, [r3, #0]
 800baf8:	e045      	b.n	800bb86 <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb02:	785b      	ldrb	r3, [r3, #1]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d126      	bne.n	800bb56 <PCD_EP_ISR_Handler+0x670>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	461a      	mov	r2, r3
 800bb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1c:	4413      	add	r3, r2
 800bb1e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	011a      	lsls	r2, r3, #4
 800bb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb28:	4413      	add	r3, r2
 800bb2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bb2e:	633b      	str	r3, [r7, #48]	; 0x30
 800bb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb32:	881b      	ldrh	r3, [r3, #0]
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3e:	801a      	strh	r2, [r3, #0]
 800bb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb42:	881b      	ldrh	r3, [r3, #0]
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb52:	801a      	strh	r2, [r3, #0]
 800bb54:	e017      	b.n	800bb86 <PCD_EP_ISR_Handler+0x6a0>
 800bb56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb58:	785b      	ldrb	r3, [r3, #1]
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d113      	bne.n	800bb86 <PCD_EP_ISR_Handler+0x6a0>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	461a      	mov	r2, r3
 800bb6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb6c:	4413      	add	r3, r2
 800bb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	011a      	lsls	r2, r3, #4
 800bb76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb78:	4413      	add	r3, r2
 800bb7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bb7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb82:	2200      	movs	r2, #0
 800bb84:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bb86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f009 fcaa 	bl	80154e6 <HAL_PCD_DataInStageCallback>
 800bb92:	e057      	b.n	800bc44 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800bb94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb96:	78db      	ldrb	r3, [r3, #3]
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d14c      	bne.n	800bc36 <PCD_EP_ISR_Handler+0x750>
 800bb9c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d146      	bne.n	800bc36 <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	00db      	lsls	r3, r3, #3
 800bbba:	4413      	add	r3, r2
 800bbbc:	3302      	adds	r3, #2
 800bbbe:	005b      	lsls	r3, r3, #1
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	6812      	ldr	r2, [r2, #0]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bbca:	881b      	ldrh	r3, [r3, #0]
 800bbcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbd0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 800bbd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbd6:	699a      	ldr	r2, [r3, #24]
 800bbd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d907      	bls.n	800bbf0 <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 800bbe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbe2:	699a      	ldr	r2, [r3, #24]
 800bbe4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bbe8:	1ad2      	subs	r2, r2, r3
 800bbea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbec:	619a      	str	r2, [r3, #24]
 800bbee:	e002      	b.n	800bbf6 <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 800bbf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800bbf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d106      	bne.n	800bc0c <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bbfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f009 fc6e 	bl	80154e6 <HAL_PCD_DataInStageCallback>
 800bc0a:	e01b      	b.n	800bc44 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800bc0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc0e:	695a      	ldr	r2, [r3, #20]
 800bc10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc14:	441a      	add	r2, r3
 800bc16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc18:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800bc1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc1c:	69da      	ldr	r2, [r3, #28]
 800bc1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc22:	441a      	add	r2, r3
 800bc24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc26:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f003 fbd5 	bl	800f3de <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800bc34:	e006      	b.n	800bc44 <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800bc36:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f91b 	bl	800be7a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	b21b      	sxth	r3, r3
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f6ff ac4d 	blt.w	800b4f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3758      	adds	r7, #88	; 0x58
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bc6e:	88fb      	ldrh	r3, [r7, #6]
 800bc70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d07e      	beq.n	800bd76 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	461a      	mov	r2, r3
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	00db      	lsls	r3, r3, #3
 800bc8a:	4413      	add	r3, r2
 800bc8c:	3302      	adds	r3, #2
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	6812      	ldr	r2, [r2, #0]
 800bc94:	4413      	add	r3, r2
 800bc96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc9a:	881b      	ldrh	r3, [r3, #0]
 800bc9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bca0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	699a      	ldr	r2, [r3, #24]
 800bca6:	8b7b      	ldrh	r3, [r7, #26]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d306      	bcc.n	800bcba <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	699a      	ldr	r2, [r3, #24]
 800bcb0:	8b7b      	ldrh	r3, [r7, #26]
 800bcb2:	1ad2      	subs	r2, r2, r3
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	619a      	str	r2, [r3, #24]
 800bcb8:	e002      	b.n	800bcc0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	699b      	ldr	r3, [r3, #24]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d123      	bne.n	800bd10 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	461a      	mov	r2, r3
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4413      	add	r3, r2
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bce2:	833b      	strh	r3, [r7, #24]
 800bce4:	8b3b      	ldrh	r3, [r7, #24]
 800bce6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bcea:	833b      	strh	r3, [r7, #24]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	441a      	add	r2, r3
 800bcfa:	8b3b      	ldrh	r3, [r7, #24]
 800bcfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bd10:	88fb      	ldrh	r3, [r7, #6]
 800bd12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d01f      	beq.n	800bd5a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4413      	add	r3, r2
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd34:	82fb      	strh	r3, [r7, #22]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	441a      	add	r2, r3
 800bd44:	8afb      	ldrh	r3, [r7, #22]
 800bd46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800bd5a:	8b7b      	ldrh	r3, [r7, #26]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 8087 	beq.w	800be70 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6818      	ldr	r0, [r3, #0]
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	6959      	ldr	r1, [r3, #20]
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	891a      	ldrh	r2, [r3, #8]
 800bd6e:	8b7b      	ldrh	r3, [r7, #26]
 800bd70:	f004 ffdf 	bl	8010d32 <USB_ReadPMA>
 800bd74:	e07c      	b.n	800be70 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	461a      	mov	r2, r3
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	00db      	lsls	r3, r3, #3
 800bd88:	4413      	add	r3, r2
 800bd8a:	3306      	adds	r3, #6
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	6812      	ldr	r2, [r2, #0]
 800bd92:	4413      	add	r3, r2
 800bd94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd98:	881b      	ldrh	r3, [r3, #0]
 800bd9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd9e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	699a      	ldr	r2, [r3, #24]
 800bda4:	8b7b      	ldrh	r3, [r7, #26]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d306      	bcc.n	800bdb8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	699a      	ldr	r2, [r3, #24]
 800bdae:	8b7b      	ldrh	r3, [r7, #26]
 800bdb0:	1ad2      	subs	r2, r2, r3
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	619a      	str	r2, [r3, #24]
 800bdb6:	e002      	b.n	800bdbe <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	699b      	ldr	r3, [r3, #24]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d123      	bne.n	800be0e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4413      	add	r3, r2
 800bdd4:	881b      	ldrh	r3, [r3, #0]
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bde0:	83fb      	strh	r3, [r7, #30]
 800bde2:	8bfb      	ldrh	r3, [r7, #30]
 800bde4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bde8:	83fb      	strh	r3, [r7, #30]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	441a      	add	r2, r3
 800bdf8:	8bfb      	ldrh	r3, [r7, #30]
 800bdfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800be0e:	88fb      	ldrh	r3, [r7, #6]
 800be10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be14:	2b00      	cmp	r3, #0
 800be16:	d11f      	bne.n	800be58 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	461a      	mov	r2, r3
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4413      	add	r3, r2
 800be26:	881b      	ldrh	r3, [r3, #0]
 800be28:	b29b      	uxth	r3, r3
 800be2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be32:	83bb      	strh	r3, [r7, #28]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	461a      	mov	r2, r3
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	441a      	add	r2, r3
 800be42:	8bbb      	ldrh	r3, [r7, #28]
 800be44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800be54:	b29b      	uxth	r3, r3
 800be56:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800be58:	8b7b      	ldrh	r3, [r7, #26]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d008      	beq.n	800be70 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6818      	ldr	r0, [r3, #0]
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	6959      	ldr	r1, [r3, #20]
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	895a      	ldrh	r2, [r3, #10]
 800be6a:	8b7b      	ldrh	r3, [r7, #26]
 800be6c:	f004 ff61 	bl	8010d32 <USB_ReadPMA>
    }
  }

  return count;
 800be70:	8b7b      	ldrh	r3, [r7, #26]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3720      	adds	r7, #32
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b0a2      	sub	sp, #136	; 0x88
 800be7e:	af00      	add	r7, sp, #0
 800be80:	60f8      	str	r0, [r7, #12]
 800be82:	60b9      	str	r1, [r7, #8]
 800be84:	4613      	mov	r3, r2
 800be86:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800be88:	88fb      	ldrh	r3, [r7, #6]
 800be8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f000 81c7 	beq.w	800c222 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	461a      	mov	r2, r3
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	00db      	lsls	r3, r3, #3
 800bea6:	4413      	add	r3, r2
 800bea8:	3302      	adds	r3, #2
 800beaa:	005b      	lsls	r3, r3, #1
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	6812      	ldr	r2, [r2, #0]
 800beb0:	4413      	add	r3, r2
 800beb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800beb6:	881b      	ldrh	r3, [r3, #0]
 800beb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bebc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	699a      	ldr	r2, [r3, #24]
 800bec4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bec8:	429a      	cmp	r2, r3
 800beca:	d907      	bls.n	800bedc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	699a      	ldr	r2, [r3, #24]
 800bed0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bed4:	1ad2      	subs	r2, r2, r3
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	619a      	str	r2, [r3, #24]
 800beda:	e002      	b.n	800bee2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	2200      	movs	r2, #0
 800bee0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	699b      	ldr	r3, [r3, #24]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f040 80b9 	bne.w	800c05e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	785b      	ldrb	r3, [r3, #1]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d126      	bne.n	800bf42 <HAL_PCD_EP_DB_Transmit+0xc8>
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	62bb      	str	r3, [r7, #40]	; 0x28
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	461a      	mov	r2, r3
 800bf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf08:	4413      	add	r3, r2
 800bf0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	011a      	lsls	r2, r3, #4
 800bf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf14:	4413      	add	r3, r2
 800bf16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bf1a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1e:	881b      	ldrh	r3, [r3, #0]
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2a:	801a      	strh	r2, [r3, #0]
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2e:	881b      	ldrh	r3, [r3, #0]
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	801a      	strh	r2, [r3, #0]
 800bf40:	e01a      	b.n	800bf78 <HAL_PCD_EP_DB_Transmit+0xfe>
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	785b      	ldrb	r3, [r3, #1]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d116      	bne.n	800bf78 <HAL_PCD_EP_DB_Transmit+0xfe>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	633b      	str	r3, [r7, #48]	; 0x30
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5e:	4413      	add	r3, r2
 800bf60:	633b      	str	r3, [r7, #48]	; 0x30
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	011a      	lsls	r2, r3, #4
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	4413      	add	r3, r2
 800bf6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bf70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf74:	2200      	movs	r2, #0
 800bf76:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	623b      	str	r3, [r7, #32]
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	785b      	ldrb	r3, [r3, #1]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d126      	bne.n	800bfd4 <HAL_PCD_EP_DB_Transmit+0x15a>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	61bb      	str	r3, [r7, #24]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	461a      	mov	r2, r3
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	61bb      	str	r3, [r7, #24]
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	011a      	lsls	r2, r3, #4
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bfac:	617b      	str	r3, [r7, #20]
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	801a      	strh	r2, [r3, #0]
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	881b      	ldrh	r3, [r3, #0]
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfcc:	b29a      	uxth	r2, r3
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	801a      	strh	r2, [r3, #0]
 800bfd2:	e017      	b.n	800c004 <HAL_PCD_EP_DB_Transmit+0x18a>
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	785b      	ldrb	r3, [r3, #1]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d113      	bne.n	800c004 <HAL_PCD_EP_DB_Transmit+0x18a>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	6a3b      	ldr	r3, [r7, #32]
 800bfea:	4413      	add	r3, r2
 800bfec:	623b      	str	r3, [r7, #32]
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	011a      	lsls	r2, r3, #4
 800bff4:	6a3b      	ldr	r3, [r7, #32]
 800bff6:	4413      	add	r3, r2
 800bff8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bffc:	61fb      	str	r3, [r7, #28]
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	2200      	movs	r2, #0
 800c002:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	4619      	mov	r1, r3
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f009 fa6b 	bl	80154e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c010:	88fb      	ldrh	r3, [r7, #6]
 800c012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c016:	2b00      	cmp	r3, #0
 800c018:	f000 82d4 	beq.w	800c5c4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	461a      	mov	r2, r3
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	4413      	add	r3, r2
 800c02a:	881b      	ldrh	r3, [r3, #0]
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c036:	827b      	strh	r3, [r7, #18]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	461a      	mov	r2, r3
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	441a      	add	r2, r3
 800c046:	8a7b      	ldrh	r3, [r7, #18]
 800c048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c04c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c058:	b29b      	uxth	r3, r3
 800c05a:	8013      	strh	r3, [r2, #0]
 800c05c:	e2b2      	b.n	800c5c4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c05e:	88fb      	ldrh	r3, [r7, #6]
 800c060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c064:	2b00      	cmp	r3, #0
 800c066:	d021      	beq.n	800c0ac <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	461a      	mov	r2, r3
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	4413      	add	r3, r2
 800c076:	881b      	ldrh	r3, [r3, #0]
 800c078:	b29b      	uxth	r3, r3
 800c07a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c07e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c082:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	461a      	mov	r2, r3
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	441a      	add	r2, r3
 800c094:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c09c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	f040 8286 	bne.w	800c5c4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	695a      	ldr	r2, [r3, #20]
 800c0bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c0c0:	441a      	add	r2, r3
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	69da      	ldr	r2, [r3, #28]
 800c0ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c0ce:	441a      	add	r2, r3
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	6a1a      	ldr	r2, [r3, #32]
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d309      	bcc.n	800c0f4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	6a1a      	ldr	r2, [r3, #32]
 800c0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0ec:	1ad2      	subs	r2, r2, r3
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	621a      	str	r2, [r3, #32]
 800c0f2:	e015      	b.n	800c120 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	6a1b      	ldr	r3, [r3, #32]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d107      	bne.n	800c10c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800c0fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c100:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c10a:	e009      	b.n	800c120 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	6a1b      	ldr	r3, [r3, #32]
 800c118:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	2200      	movs	r2, #0
 800c11e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	785b      	ldrb	r3, [r3, #1]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d155      	bne.n	800c1d4 <HAL_PCD_EP_DB_Transmit+0x35a>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c136:	b29b      	uxth	r3, r3
 800c138:	461a      	mov	r2, r3
 800c13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13c:	4413      	add	r3, r2
 800c13e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	011a      	lsls	r2, r3, #4
 800c146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c148:	4413      	add	r3, r2
 800c14a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c14e:	637b      	str	r3, [r7, #52]	; 0x34
 800c150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c152:	2b00      	cmp	r3, #0
 800c154:	d112      	bne.n	800c17c <HAL_PCD_EP_DB_Transmit+0x302>
 800c156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c158:	881b      	ldrh	r3, [r3, #0]
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c160:	b29a      	uxth	r2, r3
 800c162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c164:	801a      	strh	r2, [r3, #0]
 800c166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c168:	881b      	ldrh	r3, [r3, #0]
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c174:	b29a      	uxth	r2, r3
 800c176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c178:	801a      	strh	r2, [r3, #0]
 800c17a:	e047      	b.n	800c20c <HAL_PCD_EP_DB_Transmit+0x392>
 800c17c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c17e:	2b3e      	cmp	r3, #62	; 0x3e
 800c180:	d811      	bhi.n	800c1a6 <HAL_PCD_EP_DB_Transmit+0x32c>
 800c182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c184:	085b      	lsrs	r3, r3, #1
 800c186:	64bb      	str	r3, [r7, #72]	; 0x48
 800c188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c18a:	f003 0301 	and.w	r3, r3, #1
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <HAL_PCD_EP_DB_Transmit+0x31e>
 800c192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c194:	3301      	adds	r3, #1
 800c196:	64bb      	str	r3, [r7, #72]	; 0x48
 800c198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	029b      	lsls	r3, r3, #10
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a2:	801a      	strh	r2, [r3, #0]
 800c1a4:	e032      	b.n	800c20c <HAL_PCD_EP_DB_Transmit+0x392>
 800c1a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1a8:	095b      	lsrs	r3, r3, #5
 800c1aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ae:	f003 031f 	and.w	r3, r3, #31
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d102      	bne.n	800c1bc <HAL_PCD_EP_DB_Transmit+0x342>
 800c1b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	029b      	lsls	r3, r3, #10
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d0:	801a      	strh	r2, [r3, #0]
 800c1d2:	e01b      	b.n	800c20c <HAL_PCD_EP_DB_Transmit+0x392>
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	785b      	ldrb	r3, [r3, #1]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d117      	bne.n	800c20c <HAL_PCD_EP_DB_Transmit+0x392>
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	643b      	str	r3, [r7, #64]	; 0x40
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f0:	4413      	add	r3, r2
 800c1f2:	643b      	str	r3, [r7, #64]	; 0x40
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	011a      	lsls	r2, r3, #4
 800c1fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1fc:	4413      	add	r3, r2
 800c1fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c202:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c206:	b29a      	uxth	r2, r3
 800c208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c20a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6818      	ldr	r0, [r3, #0]
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	6959      	ldr	r1, [r3, #20]
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	891a      	ldrh	r2, [r3, #8]
 800c218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	f004 fd43 	bl	8010ca6 <USB_WritePMA>
 800c220:	e1d0      	b.n	800c5c4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	461a      	mov	r2, r3
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	00db      	lsls	r3, r3, #3
 800c234:	4413      	add	r3, r2
 800c236:	3306      	adds	r3, #6
 800c238:	005b      	lsls	r3, r3, #1
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	6812      	ldr	r2, [r2, #0]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c244:	881b      	ldrh	r3, [r3, #0]
 800c246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c24a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	699a      	ldr	r2, [r3, #24]
 800c252:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c256:	429a      	cmp	r2, r3
 800c258:	d307      	bcc.n	800c26a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	699a      	ldr	r2, [r3, #24]
 800c25e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c262:	1ad2      	subs	r2, r2, r3
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	619a      	str	r2, [r3, #24]
 800c268:	e002      	b.n	800c270 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	2200      	movs	r2, #0
 800c26e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	2b00      	cmp	r3, #0
 800c276:	f040 80c4 	bne.w	800c402 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	785b      	ldrb	r3, [r3, #1]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d126      	bne.n	800c2d0 <HAL_PCD_EP_DB_Transmit+0x456>
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c290:	b29b      	uxth	r3, r3
 800c292:	461a      	mov	r2, r3
 800c294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c296:	4413      	add	r3, r2
 800c298:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	011a      	lsls	r2, r3, #4
 800c2a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2a2:	4413      	add	r3, r2
 800c2a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c2a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2ac:	881b      	ldrh	r3, [r3, #0]
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2b8:	801a      	strh	r2, [r3, #0]
 800c2ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2cc:	801a      	strh	r2, [r3, #0]
 800c2ce:	e01a      	b.n	800c306 <HAL_PCD_EP_DB_Transmit+0x48c>
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	785b      	ldrb	r3, [r3, #1]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d116      	bne.n	800c306 <HAL_PCD_EP_DB_Transmit+0x48c>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	677b      	str	r3, [r7, #116]	; 0x74
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2ec:	4413      	add	r3, r2
 800c2ee:	677b      	str	r3, [r7, #116]	; 0x74
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	011a      	lsls	r2, r3, #4
 800c2f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c2fe:	673b      	str	r3, [r7, #112]	; 0x70
 800c300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c302:	2200      	movs	r2, #0
 800c304:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	785b      	ldrb	r3, [r3, #1]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d12f      	bne.n	800c374 <HAL_PCD_EP_DB_Transmit+0x4fa>
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c324:	b29b      	uxth	r3, r3
 800c326:	461a      	mov	r2, r3
 800c328:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c32c:	4413      	add	r3, r2
 800c32e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	011a      	lsls	r2, r3, #4
 800c338:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c33c:	4413      	add	r3, r2
 800c33e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c346:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c34a:	881b      	ldrh	r3, [r3, #0]
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c352:	b29a      	uxth	r2, r3
 800c354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c358:	801a      	strh	r2, [r3, #0]
 800c35a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c35e:	881b      	ldrh	r3, [r3, #0]
 800c360:	b29b      	uxth	r3, r3
 800c362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c36a:	b29a      	uxth	r2, r3
 800c36c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c370:	801a      	strh	r2, [r3, #0]
 800c372:	e017      	b.n	800c3a4 <HAL_PCD_EP_DB_Transmit+0x52a>
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	785b      	ldrb	r3, [r3, #1]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d113      	bne.n	800c3a4 <HAL_PCD_EP_DB_Transmit+0x52a>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c384:	b29b      	uxth	r3, r3
 800c386:	461a      	mov	r2, r3
 800c388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c38a:	4413      	add	r3, r2
 800c38c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	011a      	lsls	r2, r3, #4
 800c394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c396:	4413      	add	r3, r2
 800c398:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c39c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c39e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f009 f89b 	bl	80154e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c3b0:	88fb      	ldrh	r3, [r7, #6]
 800c3b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f040 8104 	bne.w	800c5c4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4413      	add	r3, r2
 800c3ca:	881b      	ldrh	r3, [r3, #0]
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	441a      	add	r2, r3
 800c3e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c3ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	8013      	strh	r3, [r2, #0]
 800c400:	e0e0      	b.n	800c5c4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c402:	88fb      	ldrh	r3, [r7, #6]
 800c404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d121      	bne.n	800c450 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	461a      	mov	r2, r3
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	4413      	add	r3, r2
 800c41a:	881b      	ldrh	r3, [r3, #0]
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c426:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	461a      	mov	r2, r3
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	441a      	add	r2, r3
 800c438:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c43c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c456:	2b01      	cmp	r3, #1
 800c458:	f040 80b4 	bne.w	800c5c4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	695a      	ldr	r2, [r3, #20]
 800c460:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c464:	441a      	add	r2, r3
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	69da      	ldr	r2, [r3, #28]
 800c46e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c472:	441a      	add	r2, r3
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	6a1a      	ldr	r2, [r3, #32]
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	429a      	cmp	r2, r3
 800c482:	d309      	bcc.n	800c498 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	6a1a      	ldr	r2, [r3, #32]
 800c48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c490:	1ad2      	subs	r2, r2, r3
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	621a      	str	r2, [r3, #32]
 800c496:	e015      	b.n	800c4c4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	6a1b      	ldr	r3, [r3, #32]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d107      	bne.n	800c4b0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800c4a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c4a4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c4ae:	e009      	b.n	800c4c4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	6a1b      	ldr	r3, [r3, #32]
 800c4b4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	667b      	str	r3, [r7, #100]	; 0x64
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	785b      	ldrb	r3, [r3, #1]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d155      	bne.n	800c57e <HAL_PCD_EP_DB_Transmit+0x704>
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4e6:	4413      	add	r3, r2
 800c4e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	011a      	lsls	r2, r3, #4
 800c4f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c4f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d112      	bne.n	800c526 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800c500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	b29b      	uxth	r3, r3
 800c506:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c50e:	801a      	strh	r2, [r3, #0]
 800c510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c512:	881b      	ldrh	r3, [r3, #0]
 800c514:	b29b      	uxth	r3, r3
 800c516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c51a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c51e:	b29a      	uxth	r2, r3
 800c520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c522:	801a      	strh	r2, [r3, #0]
 800c524:	e044      	b.n	800c5b0 <HAL_PCD_EP_DB_Transmit+0x736>
 800c526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c528:	2b3e      	cmp	r3, #62	; 0x3e
 800c52a:	d811      	bhi.n	800c550 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800c52c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c52e:	085b      	lsrs	r3, r3, #1
 800c530:	657b      	str	r3, [r7, #84]	; 0x54
 800c532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c534:	f003 0301 	and.w	r3, r3, #1
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d002      	beq.n	800c542 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800c53c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c53e:	3301      	adds	r3, #1
 800c540:	657b      	str	r3, [r7, #84]	; 0x54
 800c542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c544:	b29b      	uxth	r3, r3
 800c546:	029b      	lsls	r3, r3, #10
 800c548:	b29a      	uxth	r2, r3
 800c54a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c54c:	801a      	strh	r2, [r3, #0]
 800c54e:	e02f      	b.n	800c5b0 <HAL_PCD_EP_DB_Transmit+0x736>
 800c550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c552:	095b      	lsrs	r3, r3, #5
 800c554:	657b      	str	r3, [r7, #84]	; 0x54
 800c556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c558:	f003 031f 	and.w	r3, r3, #31
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d102      	bne.n	800c566 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800c560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c562:	3b01      	subs	r3, #1
 800c564:	657b      	str	r3, [r7, #84]	; 0x54
 800c566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c568:	b29b      	uxth	r3, r3
 800c56a:	029b      	lsls	r3, r3, #10
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c576:	b29a      	uxth	r2, r3
 800c578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c57a:	801a      	strh	r2, [r3, #0]
 800c57c:	e018      	b.n	800c5b0 <HAL_PCD_EP_DB_Transmit+0x736>
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	785b      	ldrb	r3, [r3, #1]
 800c582:	2b01      	cmp	r3, #1
 800c584:	d114      	bne.n	800c5b0 <HAL_PCD_EP_DB_Transmit+0x736>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c58e:	b29b      	uxth	r3, r3
 800c590:	461a      	mov	r2, r3
 800c592:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c594:	4413      	add	r3, r2
 800c596:	667b      	str	r3, [r7, #100]	; 0x64
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	011a      	lsls	r2, r3, #4
 800c59e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c5a6:	663b      	str	r3, [r7, #96]	; 0x60
 800c5a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5ae:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6818      	ldr	r0, [r3, #0]
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	6959      	ldr	r1, [r3, #20]
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	895a      	ldrh	r2, [r3, #10]
 800c5bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	f004 fb71 	bl	8010ca6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	4413      	add	r3, r2
 800c5d2:	881b      	ldrh	r3, [r3, #0]
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5de:	823b      	strh	r3, [r7, #16]
 800c5e0:	8a3b      	ldrh	r3, [r7, #16]
 800c5e2:	f083 0310 	eor.w	r3, r3, #16
 800c5e6:	823b      	strh	r3, [r7, #16]
 800c5e8:	8a3b      	ldrh	r3, [r7, #16]
 800c5ea:	f083 0320 	eor.w	r3, r3, #32
 800c5ee:	823b      	strh	r3, [r7, #16]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	441a      	add	r2, r3
 800c5fe:	8a3b      	ldrh	r3, [r7, #16]
 800c600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c610:	b29b      	uxth	r3, r3
 800c612:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3788      	adds	r7, #136	; 0x88
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c61e:	b480      	push	{r7}
 800c620:	b087      	sub	sp, #28
 800c622:	af00      	add	r7, sp, #0
 800c624:	60f8      	str	r0, [r7, #12]
 800c626:	607b      	str	r3, [r7, #4]
 800c628:	460b      	mov	r3, r1
 800c62a:	817b      	strh	r3, [r7, #10]
 800c62c:	4613      	mov	r3, r2
 800c62e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c630:	897b      	ldrh	r3, [r7, #10]
 800c632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c636:	b29b      	uxth	r3, r3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00b      	beq.n	800c654 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c63c:	897b      	ldrh	r3, [r7, #10]
 800c63e:	f003 0307 	and.w	r3, r3, #7
 800c642:	1c5a      	adds	r2, r3, #1
 800c644:	4613      	mov	r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4413      	add	r3, r2
 800c64a:	00db      	lsls	r3, r3, #3
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	4413      	add	r3, r2
 800c650:	617b      	str	r3, [r7, #20]
 800c652:	e009      	b.n	800c668 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c654:	897a      	ldrh	r2, [r7, #10]
 800c656:	4613      	mov	r3, r2
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	4413      	add	r3, r2
 800c65c:	00db      	lsls	r3, r3, #3
 800c65e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	4413      	add	r3, r2
 800c666:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c668:	893b      	ldrh	r3, [r7, #8]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d107      	bne.n	800c67e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	2200      	movs	r2, #0
 800c672:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	b29a      	uxth	r2, r3
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	80da      	strh	r2, [r3, #6]
 800c67c:	e00b      	b.n	800c696 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	2201      	movs	r2, #1
 800c682:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	b29a      	uxth	r2, r3
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	0c1b      	lsrs	r3, r3, #16
 800c690:	b29a      	uxth	r2, r3
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800c696:	2300      	movs	r3, #0
}
 800c698:	4618      	mov	r0, r3
 800c69a:	371c      	adds	r7, #28
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 800c6a8:	4b05      	ldr	r3, [pc, #20]	; (800c6c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a04      	ldr	r2, [pc, #16]	; (800c6c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c6ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6b2:	6013      	str	r3, [r2, #0]
}
 800c6b4:	bf00      	nop
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	40007000 	.word	0x40007000

0800c6c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c6d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c6d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c6d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c6da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d102      	bne.n	800c6ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	f001 b823 	b.w	800d730 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c6ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c6ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f003 0301 	and.w	r3, r3, #1
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f000 817d 	beq.w	800c9fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800c700:	4bbc      	ldr	r3, [pc, #752]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	f003 030c 	and.w	r3, r3, #12
 800c708:	2b04      	cmp	r3, #4
 800c70a:	d00c      	beq.n	800c726 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c70c:	4bb9      	ldr	r3, [pc, #740]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	f003 030c 	and.w	r3, r3, #12
 800c714:	2b08      	cmp	r3, #8
 800c716:	d15c      	bne.n	800c7d2 <HAL_RCC_OscConfig+0x10e>
 800c718:	4bb6      	ldr	r3, [pc, #728]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c724:	d155      	bne.n	800c7d2 <HAL_RCC_OscConfig+0x10e>
 800c726:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c72a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c72e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c732:	fa93 f3a3 	rbit	r3, r3
 800c736:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800c73a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c73e:	fab3 f383 	clz	r3, r3
 800c742:	b2db      	uxtb	r3, r3
 800c744:	095b      	lsrs	r3, r3, #5
 800c746:	b2db      	uxtb	r3, r3
 800c748:	f043 0301 	orr.w	r3, r3, #1
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d102      	bne.n	800c758 <HAL_RCC_OscConfig+0x94>
 800c752:	4ba8      	ldr	r3, [pc, #672]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	e015      	b.n	800c784 <HAL_RCC_OscConfig+0xc0>
 800c758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c75c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c760:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800c764:	fa93 f3a3 	rbit	r3, r3
 800c768:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800c76c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c770:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800c774:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c778:	fa93 f3a3 	rbit	r3, r3
 800c77c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800c780:	4b9c      	ldr	r3, [pc, #624]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c784:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c788:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800c78c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800c790:	fa92 f2a2 	rbit	r2, r2
 800c794:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800c798:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800c79c:	fab2 f282 	clz	r2, r2
 800c7a0:	b2d2      	uxtb	r2, r2
 800c7a2:	f042 0220 	orr.w	r2, r2, #32
 800c7a6:	b2d2      	uxtb	r2, r2
 800c7a8:	f002 021f 	and.w	r2, r2, #31
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	fa01 f202 	lsl.w	r2, r1, r2
 800c7b2:	4013      	ands	r3, r2
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f000 811f 	beq.w	800c9f8 <HAL_RCC_OscConfig+0x334>
 800c7ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c7be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f040 8116 	bne.w	800c9f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	f000 bfaf 	b.w	800d730 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c7d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c7d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7e2:	d106      	bne.n	800c7f2 <HAL_RCC_OscConfig+0x12e>
 800c7e4:	4b83      	ldr	r3, [pc, #524]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a82      	ldr	r2, [pc, #520]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c7ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	e036      	b.n	800c860 <HAL_RCC_OscConfig+0x19c>
 800c7f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c7f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10c      	bne.n	800c81c <HAL_RCC_OscConfig+0x158>
 800c802:	4b7c      	ldr	r3, [pc, #496]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a7b      	ldr	r2, [pc, #492]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c80c:	6013      	str	r3, [r2, #0]
 800c80e:	4b79      	ldr	r3, [pc, #484]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a78      	ldr	r2, [pc, #480]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	e021      	b.n	800c860 <HAL_RCC_OscConfig+0x19c>
 800c81c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c820:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c82c:	d10c      	bne.n	800c848 <HAL_RCC_OscConfig+0x184>
 800c82e:	4b71      	ldr	r3, [pc, #452]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a70      	ldr	r2, [pc, #448]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c838:	6013      	str	r3, [r2, #0]
 800c83a:	4b6e      	ldr	r3, [pc, #440]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a6d      	ldr	r2, [pc, #436]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c844:	6013      	str	r3, [r2, #0]
 800c846:	e00b      	b.n	800c860 <HAL_RCC_OscConfig+0x19c>
 800c848:	4b6a      	ldr	r3, [pc, #424]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a69      	ldr	r2, [pc, #420]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c84e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c852:	6013      	str	r3, [r2, #0]
 800c854:	4b67      	ldr	r3, [pc, #412]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a66      	ldr	r2, [pc, #408]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c85a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c85e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c860:	4b64      	ldr	r3, [pc, #400]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c864:	f023 020f 	bic.w	r2, r3, #15
 800c868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c86c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	495f      	ldr	r1, [pc, #380]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c876:	4313      	orrs	r3, r2
 800c878:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c87a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c87e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d059      	beq.n	800c93e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c88a:	f7fb f973 	bl	8007b74 <HAL_GetTick>
 800c88e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c892:	e00a      	b.n	800c8aa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c894:	f7fb f96e 	bl	8007b74 <HAL_GetTick>
 800c898:	4602      	mov	r2, r0
 800c89a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	2b64      	cmp	r3, #100	; 0x64
 800c8a2:	d902      	bls.n	800c8aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800c8a4:	2303      	movs	r3, #3
 800c8a6:	f000 bf43 	b.w	800d730 <HAL_RCC_OscConfig+0x106c>
 800c8aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c8ae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800c8b6:	fa93 f3a3 	rbit	r3, r3
 800c8ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800c8be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c8c2:	fab3 f383 	clz	r3, r3
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	095b      	lsrs	r3, r3, #5
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	f043 0301 	orr.w	r3, r3, #1
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d102      	bne.n	800c8dc <HAL_RCC_OscConfig+0x218>
 800c8d6:	4b47      	ldr	r3, [pc, #284]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	e015      	b.n	800c908 <HAL_RCC_OscConfig+0x244>
 800c8dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c8e0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800c8e8:	fa93 f3a3 	rbit	r3, r3
 800c8ec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800c8f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c8f4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800c8f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800c8fc:	fa93 f3a3 	rbit	r3, r3
 800c900:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800c904:	4b3b      	ldr	r3, [pc, #236]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c908:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c90c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800c910:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800c914:	fa92 f2a2 	rbit	r2, r2
 800c918:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800c91c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800c920:	fab2 f282 	clz	r2, r2
 800c924:	b2d2      	uxtb	r2, r2
 800c926:	f042 0220 	orr.w	r2, r2, #32
 800c92a:	b2d2      	uxtb	r2, r2
 800c92c:	f002 021f 	and.w	r2, r2, #31
 800c930:	2101      	movs	r1, #1
 800c932:	fa01 f202 	lsl.w	r2, r1, r2
 800c936:	4013      	ands	r3, r2
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d0ab      	beq.n	800c894 <HAL_RCC_OscConfig+0x1d0>
 800c93c:	e05d      	b.n	800c9fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c93e:	f7fb f919 	bl	8007b74 <HAL_GetTick>
 800c942:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c946:	e00a      	b.n	800c95e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c948:	f7fb f914 	bl	8007b74 <HAL_GetTick>
 800c94c:	4602      	mov	r2, r0
 800c94e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c952:	1ad3      	subs	r3, r2, r3
 800c954:	2b64      	cmp	r3, #100	; 0x64
 800c956:	d902      	bls.n	800c95e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800c958:	2303      	movs	r3, #3
 800c95a:	f000 bee9 	b.w	800d730 <HAL_RCC_OscConfig+0x106c>
 800c95e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c962:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c966:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800c96a:	fa93 f3a3 	rbit	r3, r3
 800c96e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800c972:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c976:	fab3 f383 	clz	r3, r3
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	095b      	lsrs	r3, r3, #5
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	f043 0301 	orr.w	r3, r3, #1
 800c984:	b2db      	uxtb	r3, r3
 800c986:	2b01      	cmp	r3, #1
 800c988:	d102      	bne.n	800c990 <HAL_RCC_OscConfig+0x2cc>
 800c98a:	4b1a      	ldr	r3, [pc, #104]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	e015      	b.n	800c9bc <HAL_RCC_OscConfig+0x2f8>
 800c990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c994:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c998:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800c99c:	fa93 f3a3 	rbit	r3, r3
 800c9a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800c9a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c9a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800c9ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800c9b0:	fa93 f3a3 	rbit	r3, r3
 800c9b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800c9b8:	4b0e      	ldr	r3, [pc, #56]	; (800c9f4 <HAL_RCC_OscConfig+0x330>)
 800c9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c9c0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800c9c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800c9c8:	fa92 f2a2 	rbit	r2, r2
 800c9cc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800c9d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800c9d4:	fab2 f282 	clz	r2, r2
 800c9d8:	b2d2      	uxtb	r2, r2
 800c9da:	f042 0220 	orr.w	r2, r2, #32
 800c9de:	b2d2      	uxtb	r2, r2
 800c9e0:	f002 021f 	and.w	r2, r2, #31
 800c9e4:	2101      	movs	r1, #1
 800c9e6:	fa01 f202 	lsl.w	r2, r1, r2
 800c9ea:	4013      	ands	r3, r2
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1ab      	bne.n	800c948 <HAL_RCC_OscConfig+0x284>
 800c9f0:	e003      	b.n	800c9fa <HAL_RCC_OscConfig+0x336>
 800c9f2:	bf00      	nop
 800c9f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c9fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c9fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f003 0302 	and.w	r3, r3, #2
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f000 817d 	beq.w	800cd0a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800ca10:	4ba6      	ldr	r3, [pc, #664]	; (800ccac <HAL_RCC_OscConfig+0x5e8>)
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	f003 030c 	and.w	r3, r3, #12
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00b      	beq.n	800ca34 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800ca1c:	4ba3      	ldr	r3, [pc, #652]	; (800ccac <HAL_RCC_OscConfig+0x5e8>)
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	f003 030c 	and.w	r3, r3, #12
 800ca24:	2b08      	cmp	r3, #8
 800ca26:	d172      	bne.n	800cb0e <HAL_RCC_OscConfig+0x44a>
 800ca28:	4ba0      	ldr	r3, [pc, #640]	; (800ccac <HAL_RCC_OscConfig+0x5e8>)
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d16c      	bne.n	800cb0e <HAL_RCC_OscConfig+0x44a>
 800ca34:	2302      	movs	r3, #2
 800ca36:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca3a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ca3e:	fa93 f3a3 	rbit	r3, r3
 800ca42:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800ca46:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca4a:	fab3 f383 	clz	r3, r3
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	095b      	lsrs	r3, r3, #5
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	f043 0301 	orr.w	r3, r3, #1
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d102      	bne.n	800ca64 <HAL_RCC_OscConfig+0x3a0>
 800ca5e:	4b93      	ldr	r3, [pc, #588]	; (800ccac <HAL_RCC_OscConfig+0x5e8>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	e013      	b.n	800ca8c <HAL_RCC_OscConfig+0x3c8>
 800ca64:	2302      	movs	r3, #2
 800ca66:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca6a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ca6e:	fa93 f3a3 	rbit	r3, r3
 800ca72:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800ca76:	2302      	movs	r3, #2
 800ca78:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800ca7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ca80:	fa93 f3a3 	rbit	r3, r3
 800ca84:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800ca88:	4b88      	ldr	r3, [pc, #544]	; (800ccac <HAL_RCC_OscConfig+0x5e8>)
 800ca8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca8c:	2202      	movs	r2, #2
 800ca8e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800ca92:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800ca96:	fa92 f2a2 	rbit	r2, r2
 800ca9a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800ca9e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800caa2:	fab2 f282 	clz	r2, r2
 800caa6:	b2d2      	uxtb	r2, r2
 800caa8:	f042 0220 	orr.w	r2, r2, #32
 800caac:	b2d2      	uxtb	r2, r2
 800caae:	f002 021f 	and.w	r2, r2, #31
 800cab2:	2101      	movs	r1, #1
 800cab4:	fa01 f202 	lsl.w	r2, r1, r2
 800cab8:	4013      	ands	r3, r2
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00a      	beq.n	800cad4 <HAL_RCC_OscConfig+0x410>
 800cabe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cac2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d002      	beq.n	800cad4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	f000 be2e 	b.w	800d730 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cad4:	4b75      	ldr	r3, [pc, #468]	; (800ccac <HAL_RCC_OscConfig+0x5e8>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cadc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cae0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	695b      	ldr	r3, [r3, #20]
 800cae8:	21f8      	movs	r1, #248	; 0xf8
 800caea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800caee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800caf2:	fa91 f1a1 	rbit	r1, r1
 800caf6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800cafa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800cafe:	fab1 f181 	clz	r1, r1
 800cb02:	b2c9      	uxtb	r1, r1
 800cb04:	408b      	lsls	r3, r1
 800cb06:	4969      	ldr	r1, [pc, #420]	; (800ccac <HAL_RCC_OscConfig+0x5e8>)
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb0c:	e0fd      	b.n	800cd0a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cb0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f000 8088 	beq.w	800cc30 <HAL_RCC_OscConfig+0x56c>
 800cb20:	2301      	movs	r3, #1
 800cb22:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb26:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800cb2a:	fa93 f3a3 	rbit	r3, r3
 800cb2e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800cb32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cb36:	fab3 f383 	clz	r3, r3
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800cb40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	461a      	mov	r2, r3
 800cb48:	2301      	movs	r3, #1
 800cb4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb4c:	f7fb f812 	bl	8007b74 <HAL_GetTick>
 800cb50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb54:	e00a      	b.n	800cb6c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cb56:	f7fb f80d 	bl	8007b74 <HAL_GetTick>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	d902      	bls.n	800cb6c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800cb66:	2303      	movs	r3, #3
 800cb68:	f000 bde2 	b.w	800d730 <HAL_RCC_OscConfig+0x106c>
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb72:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800cb76:	fa93 f3a3 	rbit	r3, r3
 800cb7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800cb7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb82:	fab3 f383 	clz	r3, r3
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	095b      	lsrs	r3, r3, #5
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	f043 0301 	orr.w	r3, r3, #1
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d102      	bne.n	800cb9c <HAL_RCC_OscConfig+0x4d8>
 800cb96:	4b45      	ldr	r3, [pc, #276]	; (800ccac <HAL_RCC_OscConfig+0x5e8>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	e013      	b.n	800cbc4 <HAL_RCC_OscConfig+0x500>
 800cb9c:	2302      	movs	r3, #2
 800cb9e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cba2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800cba6:	fa93 f3a3 	rbit	r3, r3
 800cbaa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800cbae:	2302      	movs	r3, #2
 800cbb0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800cbb4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800cbb8:	fa93 f3a3 	rbit	r3, r3
 800cbbc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800cbc0:	4b3a      	ldr	r3, [pc, #232]	; (800ccac <HAL_RCC_OscConfig+0x5e8>)
 800cbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc4:	2202      	movs	r2, #2
 800cbc6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800cbca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cbce:	fa92 f2a2 	rbit	r2, r2
 800cbd2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800cbd6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800cbda:	fab2 f282 	clz	r2, r2
 800cbde:	b2d2      	uxtb	r2, r2
 800cbe0:	f042 0220 	orr.w	r2, r2, #32
 800cbe4:	b2d2      	uxtb	r2, r2
 800cbe6:	f002 021f 	and.w	r2, r2, #31
 800cbea:	2101      	movs	r1, #1
 800cbec:	fa01 f202 	lsl.w	r2, r1, r2
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d0af      	beq.n	800cb56 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbf6:	4b2d      	ldr	r3, [pc, #180]	; (800ccac <HAL_RCC_OscConfig+0x5e8>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cbfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	695b      	ldr	r3, [r3, #20]
 800cc0a:	21f8      	movs	r1, #248	; 0xf8
 800cc0c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc10:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800cc14:	fa91 f1a1 	rbit	r1, r1
 800cc18:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800cc1c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800cc20:	fab1 f181 	clz	r1, r1
 800cc24:	b2c9      	uxtb	r1, r1
 800cc26:	408b      	lsls	r3, r1
 800cc28:	4920      	ldr	r1, [pc, #128]	; (800ccac <HAL_RCC_OscConfig+0x5e8>)
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	600b      	str	r3, [r1, #0]
 800cc2e:	e06c      	b.n	800cd0a <HAL_RCC_OscConfig+0x646>
 800cc30:	2301      	movs	r3, #1
 800cc32:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc36:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800cc3a:	fa93 f3a3 	rbit	r3, r3
 800cc3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800cc42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cc46:	fab3 f383 	clz	r3, r3
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800cc50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	461a      	mov	r2, r3
 800cc58:	2300      	movs	r3, #0
 800cc5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc5c:	f7fa ff8a 	bl	8007b74 <HAL_GetTick>
 800cc60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc64:	e00a      	b.n	800cc7c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cc66:	f7fa ff85 	bl	8007b74 <HAL_GetTick>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	2b02      	cmp	r3, #2
 800cc74:	d902      	bls.n	800cc7c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800cc76:	2303      	movs	r3, #3
 800cc78:	f000 bd5a 	b.w	800d730 <HAL_RCC_OscConfig+0x106c>
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cc86:	fa93 f3a3 	rbit	r3, r3
 800cc8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800cc8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc92:	fab3 f383 	clz	r3, r3
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	095b      	lsrs	r3, r3, #5
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	f043 0301 	orr.w	r3, r3, #1
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d104      	bne.n	800ccb0 <HAL_RCC_OscConfig+0x5ec>
 800cca6:	4b01      	ldr	r3, [pc, #4]	; (800ccac <HAL_RCC_OscConfig+0x5e8>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	e015      	b.n	800ccd8 <HAL_RCC_OscConfig+0x614>
 800ccac:	40021000 	.word	0x40021000
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ccba:	fa93 f3a3 	rbit	r3, r3
 800ccbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ccc2:	2302      	movs	r3, #2
 800ccc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ccc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800cccc:	fa93 f3a3 	rbit	r3, r3
 800ccd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ccd4:	4bc8      	ldr	r3, [pc, #800]	; (800cff8 <HAL_RCC_OscConfig+0x934>)
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd8:	2202      	movs	r2, #2
 800ccda:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800ccde:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800cce2:	fa92 f2a2 	rbit	r2, r2
 800cce6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800ccea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800ccee:	fab2 f282 	clz	r2, r2
 800ccf2:	b2d2      	uxtb	r2, r2
 800ccf4:	f042 0220 	orr.w	r2, r2, #32
 800ccf8:	b2d2      	uxtb	r2, r2
 800ccfa:	f002 021f 	and.w	r2, r2, #31
 800ccfe:	2101      	movs	r1, #1
 800cd00:	fa01 f202 	lsl.w	r2, r1, r2
 800cd04:	4013      	ands	r3, r2
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d1ad      	bne.n	800cc66 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f003 0308 	and.w	r3, r3, #8
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f000 8110 	beq.w	800cf40 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cd20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	699b      	ldr	r3, [r3, #24]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d079      	beq.n	800ce24 <HAL_RCC_OscConfig+0x760>
 800cd30:	2301      	movs	r3, #1
 800cd32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800cd3a:	fa93 f3a3 	rbit	r3, r3
 800cd3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800cd42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd46:	fab3 f383 	clz	r3, r3
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	4bab      	ldr	r3, [pc, #684]	; (800cffc <HAL_RCC_OscConfig+0x938>)
 800cd50:	4413      	add	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	461a      	mov	r2, r3
 800cd56:	2301      	movs	r3, #1
 800cd58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cd5a:	f7fa ff0b 	bl	8007b74 <HAL_GetTick>
 800cd5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cd62:	e00a      	b.n	800cd7a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cd64:	f7fa ff06 	bl	8007b74 <HAL_GetTick>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	2b02      	cmp	r3, #2
 800cd72:	d902      	bls.n	800cd7a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800cd74:	2303      	movs	r3, #3
 800cd76:	f000 bcdb 	b.w	800d730 <HAL_RCC_OscConfig+0x106c>
 800cd7a:	2302      	movs	r3, #2
 800cd7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cd84:	fa93 f3a3 	rbit	r3, r3
 800cd88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cd8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800cd94:	2202      	movs	r2, #2
 800cd96:	601a      	str	r2, [r3, #0]
 800cd98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	fa93 f2a3 	rbit	r2, r3
 800cda6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cdaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdae:	601a      	str	r2, [r3, #0]
 800cdb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cdb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdb8:	2202      	movs	r2, #2
 800cdba:	601a      	str	r2, [r3, #0]
 800cdbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cdc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	fa93 f2a3 	rbit	r2, r3
 800cdca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cdce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800cdd2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cdd4:	4b88      	ldr	r3, [pc, #544]	; (800cff8 <HAL_RCC_OscConfig+0x934>)
 800cdd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cddc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800cde0:	2102      	movs	r1, #2
 800cde2:	6019      	str	r1, [r3, #0]
 800cde4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cde8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	fa93 f1a3 	rbit	r1, r3
 800cdf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cdf6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cdfa:	6019      	str	r1, [r3, #0]
  return result;
 800cdfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce00:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	fab3 f383 	clz	r3, r3
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	f003 031f 	and.w	r3, r3, #31
 800ce16:	2101      	movs	r1, #1
 800ce18:	fa01 f303 	lsl.w	r3, r1, r3
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d0a0      	beq.n	800cd64 <HAL_RCC_OscConfig+0x6a0>
 800ce22:	e08d      	b.n	800cf40 <HAL_RCC_OscConfig+0x87c>
 800ce24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	fa93 f2a3 	rbit	r2, r3
 800ce3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ce46:	601a      	str	r2, [r3, #0]
  return result;
 800ce48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ce50:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ce52:	fab3 f383 	clz	r3, r3
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	461a      	mov	r2, r3
 800ce5a:	4b68      	ldr	r3, [pc, #416]	; (800cffc <HAL_RCC_OscConfig+0x938>)
 800ce5c:	4413      	add	r3, r2
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	461a      	mov	r2, r3
 800ce62:	2300      	movs	r3, #0
 800ce64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ce66:	f7fa fe85 	bl	8007b74 <HAL_GetTick>
 800ce6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ce6e:	e00a      	b.n	800ce86 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ce70:	f7fa fe80 	bl	8007b74 <HAL_GetTick>
 800ce74:	4602      	mov	r2, r0
 800ce76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	2b02      	cmp	r3, #2
 800ce7e:	d902      	bls.n	800ce86 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800ce80:	2303      	movs	r3, #3
 800ce82:	f000 bc55 	b.w	800d730 <HAL_RCC_OscConfig+0x106c>
 800ce86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800ce8e:	2202      	movs	r2, #2
 800ce90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce96:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	fa93 f2a3 	rbit	r2, r3
 800cea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cea4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ceae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ceb2:	2202      	movs	r2, #2
 800ceb4:	601a      	str	r2, [r3, #0]
 800ceb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ceba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	fa93 f2a3 	rbit	r2, r3
 800cec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cecc:	601a      	str	r2, [r3, #0]
 800cece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ced2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ced6:	2202      	movs	r2, #2
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	fa93 f2a3 	rbit	r2, r3
 800cee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ceec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800cef0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cef2:	4b41      	ldr	r3, [pc, #260]	; (800cff8 <HAL_RCC_OscConfig+0x934>)
 800cef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cefa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cefe:	2102      	movs	r1, #2
 800cf00:	6019      	str	r1, [r3, #0]
 800cf02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf06:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	fa93 f1a3 	rbit	r1, r3
 800cf10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cf18:	6019      	str	r1, [r3, #0]
  return result;
 800cf1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf1e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	fab3 f383 	clz	r3, r3
 800cf28:	b2db      	uxtb	r3, r3
 800cf2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	f003 031f 	and.w	r3, r3, #31
 800cf34:	2101      	movs	r1, #1
 800cf36:	fa01 f303 	lsl.w	r3, r1, r3
 800cf3a:	4013      	ands	r3, r2
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d197      	bne.n	800ce70 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cf40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f003 0304 	and.w	r3, r3, #4
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f000 81a1 	beq.w	800d298 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cf56:	2300      	movs	r3, #0
 800cf58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cf5c:	4b26      	ldr	r3, [pc, #152]	; (800cff8 <HAL_RCC_OscConfig+0x934>)
 800cf5e:	69db      	ldr	r3, [r3, #28]
 800cf60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d116      	bne.n	800cf96 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cf68:	4b23      	ldr	r3, [pc, #140]	; (800cff8 <HAL_RCC_OscConfig+0x934>)
 800cf6a:	69db      	ldr	r3, [r3, #28]
 800cf6c:	4a22      	ldr	r2, [pc, #136]	; (800cff8 <HAL_RCC_OscConfig+0x934>)
 800cf6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf72:	61d3      	str	r3, [r2, #28]
 800cf74:	4b20      	ldr	r3, [pc, #128]	; (800cff8 <HAL_RCC_OscConfig+0x934>)
 800cf76:	69db      	ldr	r3, [r3, #28]
 800cf78:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800cf7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf80:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800cf84:	601a      	str	r2, [r3, #0]
 800cf86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf8a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800cf8e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800cf90:	2301      	movs	r3, #1
 800cf92:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf96:	4b1a      	ldr	r3, [pc, #104]	; (800d000 <HAL_RCC_OscConfig+0x93c>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d11a      	bne.n	800cfd8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cfa2:	4b17      	ldr	r3, [pc, #92]	; (800d000 <HAL_RCC_OscConfig+0x93c>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a16      	ldr	r2, [pc, #88]	; (800d000 <HAL_RCC_OscConfig+0x93c>)
 800cfa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cfae:	f7fa fde1 	bl	8007b74 <HAL_GetTick>
 800cfb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfb6:	e009      	b.n	800cfcc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cfb8:	f7fa fddc 	bl	8007b74 <HAL_GetTick>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	2b64      	cmp	r3, #100	; 0x64
 800cfc6:	d901      	bls.n	800cfcc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800cfc8:	2303      	movs	r3, #3
 800cfca:	e3b1      	b.n	800d730 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfcc:	4b0c      	ldr	r3, [pc, #48]	; (800d000 <HAL_RCC_OscConfig+0x93c>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d0ef      	beq.n	800cfb8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cfd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cfdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d10d      	bne.n	800d004 <HAL_RCC_OscConfig+0x940>
 800cfe8:	4b03      	ldr	r3, [pc, #12]	; (800cff8 <HAL_RCC_OscConfig+0x934>)
 800cfea:	6a1b      	ldr	r3, [r3, #32]
 800cfec:	4a02      	ldr	r2, [pc, #8]	; (800cff8 <HAL_RCC_OscConfig+0x934>)
 800cfee:	f043 0301 	orr.w	r3, r3, #1
 800cff2:	6213      	str	r3, [r2, #32]
 800cff4:	e03c      	b.n	800d070 <HAL_RCC_OscConfig+0x9ac>
 800cff6:	bf00      	nop
 800cff8:	40021000 	.word	0x40021000
 800cffc:	10908120 	.word	0x10908120
 800d000:	40007000 	.word	0x40007000
 800d004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d008:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d10c      	bne.n	800d02e <HAL_RCC_OscConfig+0x96a>
 800d014:	4bc1      	ldr	r3, [pc, #772]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d016:	6a1b      	ldr	r3, [r3, #32]
 800d018:	4ac0      	ldr	r2, [pc, #768]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d01a:	f023 0301 	bic.w	r3, r3, #1
 800d01e:	6213      	str	r3, [r2, #32]
 800d020:	4bbe      	ldr	r3, [pc, #760]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d022:	6a1b      	ldr	r3, [r3, #32]
 800d024:	4abd      	ldr	r2, [pc, #756]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d026:	f023 0304 	bic.w	r3, r3, #4
 800d02a:	6213      	str	r3, [r2, #32]
 800d02c:	e020      	b.n	800d070 <HAL_RCC_OscConfig+0x9ac>
 800d02e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d032:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	2b05      	cmp	r3, #5
 800d03c:	d10c      	bne.n	800d058 <HAL_RCC_OscConfig+0x994>
 800d03e:	4bb7      	ldr	r3, [pc, #732]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d040:	6a1b      	ldr	r3, [r3, #32]
 800d042:	4ab6      	ldr	r2, [pc, #728]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d044:	f043 0304 	orr.w	r3, r3, #4
 800d048:	6213      	str	r3, [r2, #32]
 800d04a:	4bb4      	ldr	r3, [pc, #720]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d04c:	6a1b      	ldr	r3, [r3, #32]
 800d04e:	4ab3      	ldr	r2, [pc, #716]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d050:	f043 0301 	orr.w	r3, r3, #1
 800d054:	6213      	str	r3, [r2, #32]
 800d056:	e00b      	b.n	800d070 <HAL_RCC_OscConfig+0x9ac>
 800d058:	4bb0      	ldr	r3, [pc, #704]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d05a:	6a1b      	ldr	r3, [r3, #32]
 800d05c:	4aaf      	ldr	r2, [pc, #700]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d05e:	f023 0301 	bic.w	r3, r3, #1
 800d062:	6213      	str	r3, [r2, #32]
 800d064:	4bad      	ldr	r3, [pc, #692]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d066:	6a1b      	ldr	r3, [r3, #32]
 800d068:	4aac      	ldr	r2, [pc, #688]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d06a:	f023 0304 	bic.w	r3, r3, #4
 800d06e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d074:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68db      	ldr	r3, [r3, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f000 8081 	beq.w	800d184 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d082:	f7fa fd77 	bl	8007b74 <HAL_GetTick>
 800d086:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d08a:	e00b      	b.n	800d0a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d08c:	f7fa fd72 	bl	8007b74 <HAL_GetTick>
 800d090:	4602      	mov	r2, r0
 800d092:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	f241 3288 	movw	r2, #5000	; 0x1388
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d901      	bls.n	800d0a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800d0a0:	2303      	movs	r3, #3
 800d0a2:	e345      	b.n	800d730 <HAL_RCC_OscConfig+0x106c>
 800d0a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d0ac:	2202      	movs	r2, #2
 800d0ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d0b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	fa93 f2a3 	rbit	r2, r3
 800d0be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d0c6:	601a      	str	r2, [r3, #0]
 800d0c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d0d0:	2202      	movs	r2, #2
 800d0d2:	601a      	str	r2, [r3, #0]
 800d0d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	fa93 f2a3 	rbit	r2, r3
 800d0e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800d0ea:	601a      	str	r2, [r3, #0]
  return result;
 800d0ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800d0f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d0f6:	fab3 f383 	clz	r3, r3
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	095b      	lsrs	r3, r3, #5
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	f043 0302 	orr.w	r3, r3, #2
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b02      	cmp	r3, #2
 800d108:	d102      	bne.n	800d110 <HAL_RCC_OscConfig+0xa4c>
 800d10a:	4b84      	ldr	r3, [pc, #528]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d10c:	6a1b      	ldr	r3, [r3, #32]
 800d10e:	e013      	b.n	800d138 <HAL_RCC_OscConfig+0xa74>
 800d110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d114:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d118:	2202      	movs	r2, #2
 800d11a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d11c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d120:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	fa93 f2a3 	rbit	r2, r3
 800d12a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d12e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	4b79      	ldr	r3, [pc, #484]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d138:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d13c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800d140:	2102      	movs	r1, #2
 800d142:	6011      	str	r1, [r2, #0]
 800d144:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d148:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800d14c:	6812      	ldr	r2, [r2, #0]
 800d14e:	fa92 f1a2 	rbit	r1, r2
 800d152:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d156:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800d15a:	6011      	str	r1, [r2, #0]
  return result;
 800d15c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d160:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800d164:	6812      	ldr	r2, [r2, #0]
 800d166:	fab2 f282 	clz	r2, r2
 800d16a:	b2d2      	uxtb	r2, r2
 800d16c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d170:	b2d2      	uxtb	r2, r2
 800d172:	f002 021f 	and.w	r2, r2, #31
 800d176:	2101      	movs	r1, #1
 800d178:	fa01 f202 	lsl.w	r2, r1, r2
 800d17c:	4013      	ands	r3, r2
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d084      	beq.n	800d08c <HAL_RCC_OscConfig+0x9c8>
 800d182:	e07f      	b.n	800d284 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d184:	f7fa fcf6 	bl	8007b74 <HAL_GetTick>
 800d188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d18c:	e00b      	b.n	800d1a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d18e:	f7fa fcf1 	bl	8007b74 <HAL_GetTick>
 800d192:	4602      	mov	r2, r0
 800d194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d198:	1ad3      	subs	r3, r2, r3
 800d19a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d901      	bls.n	800d1a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	e2c4      	b.n	800d730 <HAL_RCC_OscConfig+0x106c>
 800d1a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d1ae:	2202      	movs	r2, #2
 800d1b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d1b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	fa93 f2a3 	rbit	r2, r3
 800d1c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d1c8:	601a      	str	r2, [r3, #0]
 800d1ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d1d2:	2202      	movs	r2, #2
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	fa93 f2a3 	rbit	r2, r3
 800d1e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d1ec:	601a      	str	r2, [r3, #0]
  return result;
 800d1ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d1f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d1f8:	fab3 f383 	clz	r3, r3
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	095b      	lsrs	r3, r3, #5
 800d200:	b2db      	uxtb	r3, r3
 800d202:	f043 0302 	orr.w	r3, r3, #2
 800d206:	b2db      	uxtb	r3, r3
 800d208:	2b02      	cmp	r3, #2
 800d20a:	d102      	bne.n	800d212 <HAL_RCC_OscConfig+0xb4e>
 800d20c:	4b43      	ldr	r3, [pc, #268]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d20e:	6a1b      	ldr	r3, [r3, #32]
 800d210:	e013      	b.n	800d23a <HAL_RCC_OscConfig+0xb76>
 800d212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d216:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800d21a:	2202      	movs	r2, #2
 800d21c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d21e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d222:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	fa93 f2a3 	rbit	r2, r3
 800d22c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d230:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800d234:	601a      	str	r2, [r3, #0]
 800d236:	4b39      	ldr	r3, [pc, #228]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d23e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800d242:	2102      	movs	r1, #2
 800d244:	6011      	str	r1, [r2, #0]
 800d246:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d24a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800d24e:	6812      	ldr	r2, [r2, #0]
 800d250:	fa92 f1a2 	rbit	r1, r2
 800d254:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d258:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800d25c:	6011      	str	r1, [r2, #0]
  return result;
 800d25e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d262:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800d266:	6812      	ldr	r2, [r2, #0]
 800d268:	fab2 f282 	clz	r2, r2
 800d26c:	b2d2      	uxtb	r2, r2
 800d26e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d272:	b2d2      	uxtb	r2, r2
 800d274:	f002 021f 	and.w	r2, r2, #31
 800d278:	2101      	movs	r1, #1
 800d27a:	fa01 f202 	lsl.w	r2, r1, r2
 800d27e:	4013      	ands	r3, r2
 800d280:	2b00      	cmp	r3, #0
 800d282:	d184      	bne.n	800d18e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d284:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d105      	bne.n	800d298 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d28c:	4b23      	ldr	r3, [pc, #140]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d28e:	69db      	ldr	r3, [r3, #28]
 800d290:	4a22      	ldr	r2, [pc, #136]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d296:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d29c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	69db      	ldr	r3, [r3, #28]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 8242 	beq.w	800d72e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d2aa:	4b1c      	ldr	r3, [pc, #112]	; (800d31c <HAL_RCC_OscConfig+0xc58>)
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	f003 030c 	and.w	r3, r3, #12
 800d2b2:	2b08      	cmp	r3, #8
 800d2b4:	f000 8213 	beq.w	800d6de <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d2b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	69db      	ldr	r3, [r3, #28]
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	f040 8162 	bne.w	800d58e <HAL_RCC_OscConfig+0xeca>
 800d2ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2ce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d2d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d2d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d2d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	fa93 f2a3 	rbit	r2, r3
 800d2e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800d2ee:	601a      	str	r2, [r3, #0]
  return result;
 800d2f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800d2f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d2fa:	fab3 f383 	clz	r3, r3
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800d304:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	461a      	mov	r2, r3
 800d30c:	2300      	movs	r3, #0
 800d30e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d310:	f7fa fc30 	bl	8007b74 <HAL_GetTick>
 800d314:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d318:	e00c      	b.n	800d334 <HAL_RCC_OscConfig+0xc70>
 800d31a:	bf00      	nop
 800d31c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d320:	f7fa fc28 	bl	8007b74 <HAL_GetTick>
 800d324:	4602      	mov	r2, r0
 800d326:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d901      	bls.n	800d334 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800d330:	2303      	movs	r3, #3
 800d332:	e1fd      	b.n	800d730 <HAL_RCC_OscConfig+0x106c>
 800d334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d338:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800d33c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d346:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	fa93 f2a3 	rbit	r2, r3
 800d350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d354:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800d358:	601a      	str	r2, [r3, #0]
  return result;
 800d35a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d35e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800d362:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d364:	fab3 f383 	clz	r3, r3
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	095b      	lsrs	r3, r3, #5
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	f043 0301 	orr.w	r3, r3, #1
 800d372:	b2db      	uxtb	r3, r3
 800d374:	2b01      	cmp	r3, #1
 800d376:	d102      	bne.n	800d37e <HAL_RCC_OscConfig+0xcba>
 800d378:	4bb0      	ldr	r3, [pc, #704]	; (800d63c <HAL_RCC_OscConfig+0xf78>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	e027      	b.n	800d3ce <HAL_RCC_OscConfig+0xd0a>
 800d37e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d382:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800d386:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d38a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d38c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d390:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	fa93 f2a3 	rbit	r2, r3
 800d39a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d39e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800d3a2:	601a      	str	r2, [r3, #0]
 800d3a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3a8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800d3ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d3b0:	601a      	str	r2, [r3, #0]
 800d3b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	fa93 f2a3 	rbit	r2, r3
 800d3c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800d3c8:	601a      	str	r2, [r3, #0]
 800d3ca:	4b9c      	ldr	r3, [pc, #624]	; (800d63c <HAL_RCC_OscConfig+0xf78>)
 800d3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d3d2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800d3d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800d3da:	6011      	str	r1, [r2, #0]
 800d3dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d3e0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800d3e4:	6812      	ldr	r2, [r2, #0]
 800d3e6:	fa92 f1a2 	rbit	r1, r2
 800d3ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d3ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800d3f2:	6011      	str	r1, [r2, #0]
  return result;
 800d3f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d3f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800d3fc:	6812      	ldr	r2, [r2, #0]
 800d3fe:	fab2 f282 	clz	r2, r2
 800d402:	b2d2      	uxtb	r2, r2
 800d404:	f042 0220 	orr.w	r2, r2, #32
 800d408:	b2d2      	uxtb	r2, r2
 800d40a:	f002 021f 	and.w	r2, r2, #31
 800d40e:	2101      	movs	r1, #1
 800d410:	fa01 f202 	lsl.w	r2, r1, r2
 800d414:	4013      	ands	r3, r2
 800d416:	2b00      	cmp	r3, #0
 800d418:	d182      	bne.n	800d320 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d41a:	4b88      	ldr	r3, [pc, #544]	; (800d63c <HAL_RCC_OscConfig+0xf78>)
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800d422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d426:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d42e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6a1b      	ldr	r3, [r3, #32]
 800d43a:	430b      	orrs	r3, r1
 800d43c:	497f      	ldr	r1, [pc, #508]	; (800d63c <HAL_RCC_OscConfig+0xf78>)
 800d43e:	4313      	orrs	r3, r2
 800d440:	604b      	str	r3, [r1, #4]
 800d442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d446:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800d44a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d44e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d454:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	fa93 f2a3 	rbit	r2, r3
 800d45e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d462:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d466:	601a      	str	r2, [r3, #0]
  return result;
 800d468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d46c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d470:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d472:	fab3 f383 	clz	r3, r3
 800d476:	b2db      	uxtb	r3, r3
 800d478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800d47c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800d480:	009b      	lsls	r3, r3, #2
 800d482:	461a      	mov	r2, r3
 800d484:	2301      	movs	r3, #1
 800d486:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d488:	f7fa fb74 	bl	8007b74 <HAL_GetTick>
 800d48c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d490:	e009      	b.n	800d4a6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d492:	f7fa fb6f 	bl	8007b74 <HAL_GetTick>
 800d496:	4602      	mov	r2, r0
 800d498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d49c:	1ad3      	subs	r3, r2, r3
 800d49e:	2b02      	cmp	r3, #2
 800d4a0:	d901      	bls.n	800d4a6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	e144      	b.n	800d730 <HAL_RCC_OscConfig+0x106c>
 800d4a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800d4ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d4b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d4b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	fa93 f2a3 	rbit	r2, r3
 800d4c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800d4ca:	601a      	str	r2, [r3, #0]
  return result;
 800d4cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4d0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800d4d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d4d6:	fab3 f383 	clz	r3, r3
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	095b      	lsrs	r3, r3, #5
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	f043 0301 	orr.w	r3, r3, #1
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d102      	bne.n	800d4f0 <HAL_RCC_OscConfig+0xe2c>
 800d4ea:	4b54      	ldr	r3, [pc, #336]	; (800d63c <HAL_RCC_OscConfig+0xf78>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	e027      	b.n	800d540 <HAL_RCC_OscConfig+0xe7c>
 800d4f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800d4f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d4fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d4fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d502:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	fa93 f2a3 	rbit	r2, r3
 800d50c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d510:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d51a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800d51e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d522:	601a      	str	r2, [r3, #0]
 800d524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d528:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	fa93 f2a3 	rbit	r2, r3
 800d532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d536:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800d53a:	601a      	str	r2, [r3, #0]
 800d53c:	4b3f      	ldr	r3, [pc, #252]	; (800d63c <HAL_RCC_OscConfig+0xf78>)
 800d53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d540:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d544:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800d548:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800d54c:	6011      	str	r1, [r2, #0]
 800d54e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d552:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800d556:	6812      	ldr	r2, [r2, #0]
 800d558:	fa92 f1a2 	rbit	r1, r2
 800d55c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d560:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800d564:	6011      	str	r1, [r2, #0]
  return result;
 800d566:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d56a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800d56e:	6812      	ldr	r2, [r2, #0]
 800d570:	fab2 f282 	clz	r2, r2
 800d574:	b2d2      	uxtb	r2, r2
 800d576:	f042 0220 	orr.w	r2, r2, #32
 800d57a:	b2d2      	uxtb	r2, r2
 800d57c:	f002 021f 	and.w	r2, r2, #31
 800d580:	2101      	movs	r1, #1
 800d582:	fa01 f202 	lsl.w	r2, r1, r2
 800d586:	4013      	ands	r3, r2
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d082      	beq.n	800d492 <HAL_RCC_OscConfig+0xdce>
 800d58c:	e0cf      	b.n	800d72e <HAL_RCC_OscConfig+0x106a>
 800d58e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d592:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d596:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d59a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d59c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d5a0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	fa93 f2a3 	rbit	r2, r3
 800d5aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d5ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d5b2:	601a      	str	r2, [r3, #0]
  return result;
 800d5b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d5b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d5bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d5be:	fab3 f383 	clz	r3, r3
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800d5c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d5d4:	f7fa face 	bl	8007b74 <HAL_GetTick>
 800d5d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d5dc:	e009      	b.n	800d5f2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d5de:	f7fa fac9 	bl	8007b74 <HAL_GetTick>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d5e8:	1ad3      	subs	r3, r2, r3
 800d5ea:	2b02      	cmp	r3, #2
 800d5ec:	d901      	bls.n	800d5f2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	e09e      	b.n	800d730 <HAL_RCC_OscConfig+0x106c>
 800d5f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d5f6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800d5fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d5fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d604:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	fa93 f2a3 	rbit	r2, r3
 800d60e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d612:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800d616:	601a      	str	r2, [r3, #0]
  return result;
 800d618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d61c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800d620:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d622:	fab3 f383 	clz	r3, r3
 800d626:	b2db      	uxtb	r3, r3
 800d628:	095b      	lsrs	r3, r3, #5
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	f043 0301 	orr.w	r3, r3, #1
 800d630:	b2db      	uxtb	r3, r3
 800d632:	2b01      	cmp	r3, #1
 800d634:	d104      	bne.n	800d640 <HAL_RCC_OscConfig+0xf7c>
 800d636:	4b01      	ldr	r3, [pc, #4]	; (800d63c <HAL_RCC_OscConfig+0xf78>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	e029      	b.n	800d690 <HAL_RCC_OscConfig+0xfcc>
 800d63c:	40021000 	.word	0x40021000
 800d640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d644:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d64c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d64e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d652:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	fa93 f2a3 	rbit	r2, r3
 800d65c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d660:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800d664:	601a      	str	r2, [r3, #0]
 800d666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d66a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d66e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d672:	601a      	str	r2, [r3, #0]
 800d674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d678:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	fa93 f2a3 	rbit	r2, r3
 800d682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d686:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800d68a:	601a      	str	r2, [r3, #0]
 800d68c:	4b2b      	ldr	r3, [pc, #172]	; (800d73c <HAL_RCC_OscConfig+0x1078>)
 800d68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d690:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d694:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800d698:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800d69c:	6011      	str	r1, [r2, #0]
 800d69e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d6a2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800d6a6:	6812      	ldr	r2, [r2, #0]
 800d6a8:	fa92 f1a2 	rbit	r1, r2
 800d6ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d6b0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800d6b4:	6011      	str	r1, [r2, #0]
  return result;
 800d6b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d6ba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800d6be:	6812      	ldr	r2, [r2, #0]
 800d6c0:	fab2 f282 	clz	r2, r2
 800d6c4:	b2d2      	uxtb	r2, r2
 800d6c6:	f042 0220 	orr.w	r2, r2, #32
 800d6ca:	b2d2      	uxtb	r2, r2
 800d6cc:	f002 021f 	and.w	r2, r2, #31
 800d6d0:	2101      	movs	r1, #1
 800d6d2:	fa01 f202 	lsl.w	r2, r1, r2
 800d6d6:	4013      	ands	r3, r2
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d180      	bne.n	800d5de <HAL_RCC_OscConfig+0xf1a>
 800d6dc:	e027      	b.n	800d72e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d6de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d6e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	69db      	ldr	r3, [r3, #28]
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d101      	bne.n	800d6f2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e01e      	b.n	800d730 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800d6f2:	4b12      	ldr	r3, [pc, #72]	; (800d73c <HAL_RCC_OscConfig+0x1078>)
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800d6fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d6fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800d702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	6a1b      	ldr	r3, [r3, #32]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d10b      	bne.n	800d72a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800d712:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d716:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800d71a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d71e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800d726:	429a      	cmp	r2, r3
 800d728:	d001      	beq.n	800d72e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	e000      	b.n	800d730 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	40021000 	.word	0x40021000

0800d740 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b09e      	sub	sp, #120	; 0x78
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800d74a:	2300      	movs	r3, #0
 800d74c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d101      	bne.n	800d758 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d754:	2301      	movs	r3, #1
 800d756:	e162      	b.n	800da1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d758:	4b90      	ldr	r3, [pc, #576]	; (800d99c <HAL_RCC_ClockConfig+0x25c>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f003 0307 	and.w	r3, r3, #7
 800d760:	683a      	ldr	r2, [r7, #0]
 800d762:	429a      	cmp	r2, r3
 800d764:	d910      	bls.n	800d788 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d766:	4b8d      	ldr	r3, [pc, #564]	; (800d99c <HAL_RCC_ClockConfig+0x25c>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f023 0207 	bic.w	r2, r3, #7
 800d76e:	498b      	ldr	r1, [pc, #556]	; (800d99c <HAL_RCC_ClockConfig+0x25c>)
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	4313      	orrs	r3, r2
 800d774:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d776:	4b89      	ldr	r3, [pc, #548]	; (800d99c <HAL_RCC_ClockConfig+0x25c>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f003 0307 	and.w	r3, r3, #7
 800d77e:	683a      	ldr	r2, [r7, #0]
 800d780:	429a      	cmp	r2, r3
 800d782:	d001      	beq.n	800d788 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d784:	2301      	movs	r3, #1
 800d786:	e14a      	b.n	800da1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f003 0302 	and.w	r3, r3, #2
 800d790:	2b00      	cmp	r3, #0
 800d792:	d008      	beq.n	800d7a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d794:	4b82      	ldr	r3, [pc, #520]	; (800d9a0 <HAL_RCC_ClockConfig+0x260>)
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	689b      	ldr	r3, [r3, #8]
 800d7a0:	497f      	ldr	r1, [pc, #508]	; (800d9a0 <HAL_RCC_ClockConfig+0x260>)
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f003 0301 	and.w	r3, r3, #1
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f000 80dc 	beq.w	800d96c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d13c      	bne.n	800d836 <HAL_RCC_ClockConfig+0xf6>
 800d7bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d7c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d7c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7c4:	fa93 f3a3 	rbit	r3, r3
 800d7c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800d7ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d7cc:	fab3 f383 	clz	r3, r3
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	095b      	lsrs	r3, r3, #5
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	f043 0301 	orr.w	r3, r3, #1
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d102      	bne.n	800d7e6 <HAL_RCC_ClockConfig+0xa6>
 800d7e0:	4b6f      	ldr	r3, [pc, #444]	; (800d9a0 <HAL_RCC_ClockConfig+0x260>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	e00f      	b.n	800d806 <HAL_RCC_ClockConfig+0xc6>
 800d7e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d7ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d7ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7ee:	fa93 f3a3 	rbit	r3, r3
 800d7f2:	667b      	str	r3, [r7, #100]	; 0x64
 800d7f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d7f8:	663b      	str	r3, [r7, #96]	; 0x60
 800d7fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7fc:	fa93 f3a3 	rbit	r3, r3
 800d800:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d802:	4b67      	ldr	r3, [pc, #412]	; (800d9a0 <HAL_RCC_ClockConfig+0x260>)
 800d804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d806:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d80a:	65ba      	str	r2, [r7, #88]	; 0x58
 800d80c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d80e:	fa92 f2a2 	rbit	r2, r2
 800d812:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800d814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d816:	fab2 f282 	clz	r2, r2
 800d81a:	b2d2      	uxtb	r2, r2
 800d81c:	f042 0220 	orr.w	r2, r2, #32
 800d820:	b2d2      	uxtb	r2, r2
 800d822:	f002 021f 	and.w	r2, r2, #31
 800d826:	2101      	movs	r1, #1
 800d828:	fa01 f202 	lsl.w	r2, r1, r2
 800d82c:	4013      	ands	r3, r2
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d17b      	bne.n	800d92a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800d832:	2301      	movs	r3, #1
 800d834:	e0f3      	b.n	800da1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	2b02      	cmp	r3, #2
 800d83c:	d13c      	bne.n	800d8b8 <HAL_RCC_ClockConfig+0x178>
 800d83e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d842:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d846:	fa93 f3a3 	rbit	r3, r3
 800d84a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800d84c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d84e:	fab3 f383 	clz	r3, r3
 800d852:	b2db      	uxtb	r3, r3
 800d854:	095b      	lsrs	r3, r3, #5
 800d856:	b2db      	uxtb	r3, r3
 800d858:	f043 0301 	orr.w	r3, r3, #1
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d102      	bne.n	800d868 <HAL_RCC_ClockConfig+0x128>
 800d862:	4b4f      	ldr	r3, [pc, #316]	; (800d9a0 <HAL_RCC_ClockConfig+0x260>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	e00f      	b.n	800d888 <HAL_RCC_ClockConfig+0x148>
 800d868:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d86c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d86e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d870:	fa93 f3a3 	rbit	r3, r3
 800d874:	647b      	str	r3, [r7, #68]	; 0x44
 800d876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d87a:	643b      	str	r3, [r7, #64]	; 0x40
 800d87c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d87e:	fa93 f3a3 	rbit	r3, r3
 800d882:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d884:	4b46      	ldr	r3, [pc, #280]	; (800d9a0 <HAL_RCC_ClockConfig+0x260>)
 800d886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d88c:	63ba      	str	r2, [r7, #56]	; 0x38
 800d88e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d890:	fa92 f2a2 	rbit	r2, r2
 800d894:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800d896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d898:	fab2 f282 	clz	r2, r2
 800d89c:	b2d2      	uxtb	r2, r2
 800d89e:	f042 0220 	orr.w	r2, r2, #32
 800d8a2:	b2d2      	uxtb	r2, r2
 800d8a4:	f002 021f 	and.w	r2, r2, #31
 800d8a8:	2101      	movs	r1, #1
 800d8aa:	fa01 f202 	lsl.w	r2, r1, r2
 800d8ae:	4013      	ands	r3, r2
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d13a      	bne.n	800d92a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e0b2      	b.n	800da1e <HAL_RCC_ClockConfig+0x2de>
 800d8b8:	2302      	movs	r3, #2
 800d8ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	fa93 f3a3 	rbit	r3, r3
 800d8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d8c6:	fab3 f383 	clz	r3, r3
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	095b      	lsrs	r3, r3, #5
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	f043 0301 	orr.w	r3, r3, #1
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	2b01      	cmp	r3, #1
 800d8d8:	d102      	bne.n	800d8e0 <HAL_RCC_ClockConfig+0x1a0>
 800d8da:	4b31      	ldr	r3, [pc, #196]	; (800d9a0 <HAL_RCC_ClockConfig+0x260>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	e00d      	b.n	800d8fc <HAL_RCC_ClockConfig+0x1bc>
 800d8e0:	2302      	movs	r3, #2
 800d8e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e6:	fa93 f3a3 	rbit	r3, r3
 800d8ea:	627b      	str	r3, [r7, #36]	; 0x24
 800d8ec:	2302      	movs	r3, #2
 800d8ee:	623b      	str	r3, [r7, #32]
 800d8f0:	6a3b      	ldr	r3, [r7, #32]
 800d8f2:	fa93 f3a3 	rbit	r3, r3
 800d8f6:	61fb      	str	r3, [r7, #28]
 800d8f8:	4b29      	ldr	r3, [pc, #164]	; (800d9a0 <HAL_RCC_ClockConfig+0x260>)
 800d8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8fc:	2202      	movs	r2, #2
 800d8fe:	61ba      	str	r2, [r7, #24]
 800d900:	69ba      	ldr	r2, [r7, #24]
 800d902:	fa92 f2a2 	rbit	r2, r2
 800d906:	617a      	str	r2, [r7, #20]
  return result;
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	fab2 f282 	clz	r2, r2
 800d90e:	b2d2      	uxtb	r2, r2
 800d910:	f042 0220 	orr.w	r2, r2, #32
 800d914:	b2d2      	uxtb	r2, r2
 800d916:	f002 021f 	and.w	r2, r2, #31
 800d91a:	2101      	movs	r1, #1
 800d91c:	fa01 f202 	lsl.w	r2, r1, r2
 800d920:	4013      	ands	r3, r2
 800d922:	2b00      	cmp	r3, #0
 800d924:	d101      	bne.n	800d92a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800d926:	2301      	movs	r3, #1
 800d928:	e079      	b.n	800da1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d92a:	4b1d      	ldr	r3, [pc, #116]	; (800d9a0 <HAL_RCC_ClockConfig+0x260>)
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	f023 0203 	bic.w	r2, r3, #3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	491a      	ldr	r1, [pc, #104]	; (800d9a0 <HAL_RCC_ClockConfig+0x260>)
 800d938:	4313      	orrs	r3, r2
 800d93a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d93c:	f7fa f91a 	bl	8007b74 <HAL_GetTick>
 800d940:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d942:	e00a      	b.n	800d95a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d944:	f7fa f916 	bl	8007b74 <HAL_GetTick>
 800d948:	4602      	mov	r2, r0
 800d94a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d94c:	1ad3      	subs	r3, r2, r3
 800d94e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d952:	4293      	cmp	r3, r2
 800d954:	d901      	bls.n	800d95a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800d956:	2303      	movs	r3, #3
 800d958:	e061      	b.n	800da1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d95a:	4b11      	ldr	r3, [pc, #68]	; (800d9a0 <HAL_RCC_ClockConfig+0x260>)
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	f003 020c 	and.w	r2, r3, #12
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	429a      	cmp	r2, r3
 800d96a:	d1eb      	bne.n	800d944 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d96c:	4b0b      	ldr	r3, [pc, #44]	; (800d99c <HAL_RCC_ClockConfig+0x25c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f003 0307 	and.w	r3, r3, #7
 800d974:	683a      	ldr	r2, [r7, #0]
 800d976:	429a      	cmp	r2, r3
 800d978:	d214      	bcs.n	800d9a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d97a:	4b08      	ldr	r3, [pc, #32]	; (800d99c <HAL_RCC_ClockConfig+0x25c>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f023 0207 	bic.w	r2, r3, #7
 800d982:	4906      	ldr	r1, [pc, #24]	; (800d99c <HAL_RCC_ClockConfig+0x25c>)
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	4313      	orrs	r3, r2
 800d988:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d98a:	4b04      	ldr	r3, [pc, #16]	; (800d99c <HAL_RCC_ClockConfig+0x25c>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f003 0307 	and.w	r3, r3, #7
 800d992:	683a      	ldr	r2, [r7, #0]
 800d994:	429a      	cmp	r2, r3
 800d996:	d005      	beq.n	800d9a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800d998:	2301      	movs	r3, #1
 800d99a:	e040      	b.n	800da1e <HAL_RCC_ClockConfig+0x2de>
 800d99c:	40022000 	.word	0x40022000
 800d9a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f003 0304 	and.w	r3, r3, #4
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d008      	beq.n	800d9c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d9b0:	4b1d      	ldr	r3, [pc, #116]	; (800da28 <HAL_RCC_ClockConfig+0x2e8>)
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	491a      	ldr	r1, [pc, #104]	; (800da28 <HAL_RCC_ClockConfig+0x2e8>)
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f003 0308 	and.w	r3, r3, #8
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d009      	beq.n	800d9e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d9ce:	4b16      	ldr	r3, [pc, #88]	; (800da28 <HAL_RCC_ClockConfig+0x2e8>)
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	691b      	ldr	r3, [r3, #16]
 800d9da:	00db      	lsls	r3, r3, #3
 800d9dc:	4912      	ldr	r1, [pc, #72]	; (800da28 <HAL_RCC_ClockConfig+0x2e8>)
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800d9e2:	f000 f85b 	bl	800da9c <HAL_RCC_GetSysClockFreq>
 800d9e6:	4601      	mov	r1, r0
 800d9e8:	4b0f      	ldr	r3, [pc, #60]	; (800da28 <HAL_RCC_ClockConfig+0x2e8>)
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9f0:	22f0      	movs	r2, #240	; 0xf0
 800d9f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	fa92 f2a2 	rbit	r2, r2
 800d9fa:	60fa      	str	r2, [r7, #12]
  return result;
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	fab2 f282 	clz	r2, r2
 800da02:	b2d2      	uxtb	r2, r2
 800da04:	40d3      	lsrs	r3, r2
 800da06:	4a09      	ldr	r2, [pc, #36]	; (800da2c <HAL_RCC_ClockConfig+0x2ec>)
 800da08:	5cd3      	ldrb	r3, [r2, r3]
 800da0a:	fa21 f303 	lsr.w	r3, r1, r3
 800da0e:	4a08      	ldr	r2, [pc, #32]	; (800da30 <HAL_RCC_ClockConfig+0x2f0>)
 800da10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800da12:	4b08      	ldr	r3, [pc, #32]	; (800da34 <HAL_RCC_ClockConfig+0x2f4>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4618      	mov	r0, r3
 800da18:	f7f8 fe24 	bl	8006664 <HAL_InitTick>
  
  return HAL_OK;
 800da1c:	2300      	movs	r3, #0
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3778      	adds	r7, #120	; 0x78
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	40021000 	.word	0x40021000
 800da2c:	08016634 	.word	0x08016634
 800da30:	20000010 	.word	0x20000010
 800da34:	20000014 	.word	0x20000014

0800da38 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b08a      	sub	sp, #40	; 0x28
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800da44:	2302      	movs	r3, #2
 800da46:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800da48:	2303      	movs	r3, #3
 800da4a:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 800da4c:	2300      	movs	r3, #0
 800da4e:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 800da50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da54:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800da56:	2300      	movs	r3, #0
 800da58:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800da5a:	4b0f      	ldr	r3, [pc, #60]	; (800da98 <HAL_RCC_MCOConfig+0x60>)
 800da5c:	695b      	ldr	r3, [r3, #20]
 800da5e:	4a0e      	ldr	r2, [pc, #56]	; (800da98 <HAL_RCC_MCOConfig+0x60>)
 800da60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da64:	6153      	str	r3, [r2, #20]
 800da66:	4b0c      	ldr	r3, [pc, #48]	; (800da98 <HAL_RCC_MCOConfig+0x60>)
 800da68:	695b      	ldr	r3, [r3, #20]
 800da6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da6e:	613b      	str	r3, [r7, #16]
 800da70:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800da72:	f107 0314 	add.w	r3, r7, #20
 800da76:	4619      	mov	r1, r3
 800da78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800da7c:	f7fc fa7a 	bl	8009f74 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800da80:	4b05      	ldr	r3, [pc, #20]	; (800da98 <HAL_RCC_MCOConfig+0x60>)
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800da88:	4903      	ldr	r1, [pc, #12]	; (800da98 <HAL_RCC_MCOConfig+0x60>)
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	4313      	orrs	r3, r2
 800da8e:	604b      	str	r3, [r1, #4]
}
 800da90:	bf00      	nop
 800da92:	3728      	adds	r7, #40	; 0x28
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	40021000 	.word	0x40021000

0800da9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b08b      	sub	sp, #44	; 0x2c
 800daa0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800daa2:	2300      	movs	r3, #0
 800daa4:	61fb      	str	r3, [r7, #28]
 800daa6:	2300      	movs	r3, #0
 800daa8:	61bb      	str	r3, [r7, #24]
 800daaa:	2300      	movs	r3, #0
 800daac:	627b      	str	r3, [r7, #36]	; 0x24
 800daae:	2300      	movs	r3, #0
 800dab0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800dab2:	2300      	movs	r3, #0
 800dab4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800dab6:	4b29      	ldr	r3, [pc, #164]	; (800db5c <HAL_RCC_GetSysClockFreq+0xc0>)
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800dabc:	69fb      	ldr	r3, [r7, #28]
 800dabe:	f003 030c 	and.w	r3, r3, #12
 800dac2:	2b04      	cmp	r3, #4
 800dac4:	d002      	beq.n	800dacc <HAL_RCC_GetSysClockFreq+0x30>
 800dac6:	2b08      	cmp	r3, #8
 800dac8:	d003      	beq.n	800dad2 <HAL_RCC_GetSysClockFreq+0x36>
 800daca:	e03c      	b.n	800db46 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800dacc:	4b24      	ldr	r3, [pc, #144]	; (800db60 <HAL_RCC_GetSysClockFreq+0xc4>)
 800dace:	623b      	str	r3, [r7, #32]
      break;
 800dad0:	e03c      	b.n	800db4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800dad8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800dadc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dade:	68ba      	ldr	r2, [r7, #8]
 800dae0:	fa92 f2a2 	rbit	r2, r2
 800dae4:	607a      	str	r2, [r7, #4]
  return result;
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	fab2 f282 	clz	r2, r2
 800daec:	b2d2      	uxtb	r2, r2
 800daee:	40d3      	lsrs	r3, r2
 800daf0:	4a1c      	ldr	r2, [pc, #112]	; (800db64 <HAL_RCC_GetSysClockFreq+0xc8>)
 800daf2:	5cd3      	ldrb	r3, [r2, r3]
 800daf4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800daf6:	4b19      	ldr	r3, [pc, #100]	; (800db5c <HAL_RCC_GetSysClockFreq+0xc0>)
 800daf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dafa:	f003 030f 	and.w	r3, r3, #15
 800dafe:	220f      	movs	r2, #15
 800db00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db02:	693a      	ldr	r2, [r7, #16]
 800db04:	fa92 f2a2 	rbit	r2, r2
 800db08:	60fa      	str	r2, [r7, #12]
  return result;
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	fab2 f282 	clz	r2, r2
 800db10:	b2d2      	uxtb	r2, r2
 800db12:	40d3      	lsrs	r3, r2
 800db14:	4a14      	ldr	r2, [pc, #80]	; (800db68 <HAL_RCC_GetSysClockFreq+0xcc>)
 800db16:	5cd3      	ldrb	r3, [r2, r3]
 800db18:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db20:	2b00      	cmp	r3, #0
 800db22:	d008      	beq.n	800db36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800db24:	4a0e      	ldr	r2, [pc, #56]	; (800db60 <HAL_RCC_GetSysClockFreq+0xc4>)
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	fbb2 f2f3 	udiv	r2, r2, r3
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	fb02 f303 	mul.w	r3, r2, r3
 800db32:	627b      	str	r3, [r7, #36]	; 0x24
 800db34:	e004      	b.n	800db40 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	4a0c      	ldr	r2, [pc, #48]	; (800db6c <HAL_RCC_GetSysClockFreq+0xd0>)
 800db3a:	fb02 f303 	mul.w	r3, r2, r3
 800db3e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db42:	623b      	str	r3, [r7, #32]
      break;
 800db44:	e002      	b.n	800db4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800db46:	4b06      	ldr	r3, [pc, #24]	; (800db60 <HAL_RCC_GetSysClockFreq+0xc4>)
 800db48:	623b      	str	r3, [r7, #32]
      break;
 800db4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800db4c:	6a3b      	ldr	r3, [r7, #32]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	372c      	adds	r7, #44	; 0x2c
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	40021000 	.word	0x40021000
 800db60:	007a1200 	.word	0x007a1200
 800db64:	08016b64 	.word	0x08016b64
 800db68:	08016b74 	.word	0x08016b74
 800db6c:	003d0900 	.word	0x003d0900

0800db70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800db70:	b480      	push	{r7}
 800db72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800db74:	4b03      	ldr	r3, [pc, #12]	; (800db84 <HAL_RCC_GetHCLKFreq+0x14>)
 800db76:	681b      	ldr	r3, [r3, #0]
}
 800db78:	4618      	mov	r0, r3
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	20000010 	.word	0x20000010

0800db88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800db8e:	f7ff ffef 	bl	800db70 <HAL_RCC_GetHCLKFreq>
 800db92:	4601      	mov	r1, r0
 800db94:	4b0b      	ldr	r3, [pc, #44]	; (800dbc4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db9c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800dba0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	fa92 f2a2 	rbit	r2, r2
 800dba8:	603a      	str	r2, [r7, #0]
  return result;
 800dbaa:	683a      	ldr	r2, [r7, #0]
 800dbac:	fab2 f282 	clz	r2, r2
 800dbb0:	b2d2      	uxtb	r2, r2
 800dbb2:	40d3      	lsrs	r3, r2
 800dbb4:	4a04      	ldr	r2, [pc, #16]	; (800dbc8 <HAL_RCC_GetPCLK1Freq+0x40>)
 800dbb6:	5cd3      	ldrb	r3, [r2, r3]
 800dbb8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	40021000 	.word	0x40021000
 800dbc8:	08016644 	.word	0x08016644

0800dbcc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b083      	sub	sp, #12
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	220f      	movs	r2, #15
 800dbda:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dbdc:	4b12      	ldr	r3, [pc, #72]	; (800dc28 <HAL_RCC_GetClockConfig+0x5c>)
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	f003 0203 	and.w	r2, r3, #3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800dbe8:	4b0f      	ldr	r3, [pc, #60]	; (800dc28 <HAL_RCC_GetClockConfig+0x5c>)
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800dbf4:	4b0c      	ldr	r3, [pc, #48]	; (800dc28 <HAL_RCC_GetClockConfig+0x5c>)
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800dc00:	4b09      	ldr	r3, [pc, #36]	; (800dc28 <HAL_RCC_GetClockConfig+0x5c>)
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	08db      	lsrs	r3, r3, #3
 800dc06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800dc0e:	4b07      	ldr	r3, [pc, #28]	; (800dc2c <HAL_RCC_GetClockConfig+0x60>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f003 0207 	and.w	r2, r3, #7
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	601a      	str	r2, [r3, #0]
}
 800dc1a:	bf00      	nop
 800dc1c:	370c      	adds	r7, #12
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	40021000 	.word	0x40021000
 800dc2c:	40022000 	.word	0x40022000

0800dc30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b092      	sub	sp, #72	; 0x48
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800dc40:	2300      	movs	r3, #0
 800dc42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f000 80d4 	beq.w	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dc54:	4b4e      	ldr	r3, [pc, #312]	; (800dd90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800dc56:	69db      	ldr	r3, [r3, #28]
 800dc58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d10e      	bne.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dc60:	4b4b      	ldr	r3, [pc, #300]	; (800dd90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800dc62:	69db      	ldr	r3, [r3, #28]
 800dc64:	4a4a      	ldr	r2, [pc, #296]	; (800dd90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800dc66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc6a:	61d3      	str	r3, [r2, #28]
 800dc6c:	4b48      	ldr	r3, [pc, #288]	; (800dd90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800dc6e:	69db      	ldr	r3, [r3, #28]
 800dc70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc74:	60bb      	str	r3, [r7, #8]
 800dc76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dc7e:	4b45      	ldr	r3, [pc, #276]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d118      	bne.n	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dc8a:	4b42      	ldr	r3, [pc, #264]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a41      	ldr	r2, [pc, #260]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800dc90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dc96:	f7f9 ff6d 	bl	8007b74 <HAL_GetTick>
 800dc9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dc9c:	e008      	b.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dc9e:	f7f9 ff69 	bl	8007b74 <HAL_GetTick>
 800dca2:	4602      	mov	r2, r0
 800dca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dca6:	1ad3      	subs	r3, r2, r3
 800dca8:	2b64      	cmp	r3, #100	; 0x64
 800dcaa:	d901      	bls.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800dcac:	2303      	movs	r3, #3
 800dcae:	e169      	b.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dcb0:	4b38      	ldr	r3, [pc, #224]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d0f0      	beq.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800dcbc:	4b34      	ldr	r3, [pc, #208]	; (800dd90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800dcbe:	6a1b      	ldr	r3, [r3, #32]
 800dcc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800dcc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	f000 8084 	beq.w	800ddd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d07c      	beq.n	800ddd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800dcdc:	4b2c      	ldr	r3, [pc, #176]	; (800dd90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800dcde:	6a1b      	ldr	r3, [r3, #32]
 800dce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dcea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcee:	fa93 f3a3 	rbit	r3, r3
 800dcf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800dcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800dcf6:	fab3 f383 	clz	r3, r3
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	4b26      	ldr	r3, [pc, #152]	; (800dd98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800dd00:	4413      	add	r3, r2
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	461a      	mov	r2, r3
 800dd06:	2301      	movs	r3, #1
 800dd08:	6013      	str	r3, [r2, #0]
 800dd0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dd0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd12:	fa93 f3a3 	rbit	r3, r3
 800dd16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800dd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800dd1a:	fab3 f383 	clz	r3, r3
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	461a      	mov	r2, r3
 800dd22:	4b1d      	ldr	r3, [pc, #116]	; (800dd98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800dd24:	4413      	add	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	461a      	mov	r2, r3
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800dd2e:	4a18      	ldr	r2, [pc, #96]	; (800dd90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800dd30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800dd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd36:	f003 0301 	and.w	r3, r3, #1
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d04b      	beq.n	800ddd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd3e:	f7f9 ff19 	bl	8007b74 <HAL_GetTick>
 800dd42:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dd44:	e00a      	b.n	800dd5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dd46:	f7f9 ff15 	bl	8007b74 <HAL_GetTick>
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd4e:	1ad3      	subs	r3, r2, r3
 800dd50:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d901      	bls.n	800dd5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800dd58:	2303      	movs	r3, #3
 800dd5a:	e113      	b.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800dd5c:	2302      	movs	r3, #2
 800dd5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	fa93 f3a3 	rbit	r3, r3
 800dd66:	627b      	str	r3, [r7, #36]	; 0x24
 800dd68:	2302      	movs	r3, #2
 800dd6a:	623b      	str	r3, [r7, #32]
 800dd6c:	6a3b      	ldr	r3, [r7, #32]
 800dd6e:	fa93 f3a3 	rbit	r3, r3
 800dd72:	61fb      	str	r3, [r7, #28]
  return result;
 800dd74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dd76:	fab3 f383 	clz	r3, r3
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	095b      	lsrs	r3, r3, #5
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	f043 0302 	orr.w	r3, r3, #2
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	2b02      	cmp	r3, #2
 800dd88:	d108      	bne.n	800dd9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800dd8a:	4b01      	ldr	r3, [pc, #4]	; (800dd90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800dd8c:	6a1b      	ldr	r3, [r3, #32]
 800dd8e:	e00d      	b.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800dd90:	40021000 	.word	0x40021000
 800dd94:	40007000 	.word	0x40007000
 800dd98:	10908100 	.word	0x10908100
 800dd9c:	2302      	movs	r3, #2
 800dd9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	fa93 f3a3 	rbit	r3, r3
 800dda6:	617b      	str	r3, [r7, #20]
 800dda8:	4b78      	ldr	r3, [pc, #480]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ddaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddac:	2202      	movs	r2, #2
 800ddae:	613a      	str	r2, [r7, #16]
 800ddb0:	693a      	ldr	r2, [r7, #16]
 800ddb2:	fa92 f2a2 	rbit	r2, r2
 800ddb6:	60fa      	str	r2, [r7, #12]
  return result;
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	fab2 f282 	clz	r2, r2
 800ddbe:	b2d2      	uxtb	r2, r2
 800ddc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ddc4:	b2d2      	uxtb	r2, r2
 800ddc6:	f002 021f 	and.w	r2, r2, #31
 800ddca:	2101      	movs	r1, #1
 800ddcc:	fa01 f202 	lsl.w	r2, r1, r2
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d0b7      	beq.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800ddd6:	4b6d      	ldr	r3, [pc, #436]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ddd8:	6a1b      	ldr	r3, [r3, #32]
 800ddda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	496a      	ldr	r1, [pc, #424]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dde4:	4313      	orrs	r3, r2
 800dde6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800dde8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d105      	bne.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ddf0:	4b66      	ldr	r3, [pc, #408]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ddf2:	69db      	ldr	r3, [r3, #28]
 800ddf4:	4a65      	ldr	r2, [pc, #404]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ddf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ddfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f003 0301 	and.w	r3, r3, #1
 800de04:	2b00      	cmp	r3, #0
 800de06:	d008      	beq.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800de08:	4b60      	ldr	r3, [pc, #384]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de0c:	f023 0203 	bic.w	r2, r3, #3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	495d      	ldr	r1, [pc, #372]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de16:	4313      	orrs	r3, r2
 800de18:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f003 0302 	and.w	r3, r3, #2
 800de22:	2b00      	cmp	r3, #0
 800de24:	d008      	beq.n	800de38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800de26:	4b59      	ldr	r3, [pc, #356]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	4956      	ldr	r1, [pc, #344]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de34:	4313      	orrs	r3, r2
 800de36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f003 0304 	and.w	r3, r3, #4
 800de40:	2b00      	cmp	r3, #0
 800de42:	d008      	beq.n	800de56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800de44:	4b51      	ldr	r3, [pc, #324]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	691b      	ldr	r3, [r3, #16]
 800de50:	494e      	ldr	r1, [pc, #312]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de52:	4313      	orrs	r3, r2
 800de54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f003 0320 	and.w	r3, r3, #32
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d008      	beq.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800de62:	4b4a      	ldr	r3, [pc, #296]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de66:	f023 0210 	bic.w	r2, r3, #16
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	69db      	ldr	r3, [r3, #28]
 800de6e:	4947      	ldr	r1, [pc, #284]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de70:	4313      	orrs	r3, r2
 800de72:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d008      	beq.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800de80:	4b42      	ldr	r3, [pc, #264]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de8c:	493f      	ldr	r1, [pc, #252]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de8e:	4313      	orrs	r3, r2
 800de90:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d008      	beq.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800de9e:	4b3b      	ldr	r3, [pc, #236]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dea2:	f023 0220 	bic.w	r2, r3, #32
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6a1b      	ldr	r3, [r3, #32]
 800deaa:	4938      	ldr	r1, [pc, #224]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800deac:	4313      	orrs	r3, r2
 800deae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f003 0308 	and.w	r3, r3, #8
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d008      	beq.n	800dece <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800debc:	4b33      	ldr	r3, [pc, #204]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800debe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dec0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	695b      	ldr	r3, [r3, #20]
 800dec8:	4930      	ldr	r1, [pc, #192]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800deca:	4313      	orrs	r3, r2
 800decc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f003 0310 	and.w	r3, r3, #16
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d008      	beq.n	800deec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800deda:	4b2c      	ldr	r3, [pc, #176]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dede:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	699b      	ldr	r3, [r3, #24]
 800dee6:	4929      	ldr	r1, [pc, #164]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dee8:	4313      	orrs	r3, r2
 800deea:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800def4:	2b00      	cmp	r3, #0
 800def6:	d008      	beq.n	800df0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800def8:	4b24      	ldr	r3, [pc, #144]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df04:	4921      	ldr	r1, [pc, #132]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df06:	4313      	orrs	r3, r2
 800df08:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df12:	2b00      	cmp	r3, #0
 800df14:	d008      	beq.n	800df28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800df16:	4b1d      	ldr	r3, [pc, #116]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df22:	491a      	ldr	r1, [pc, #104]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df24:	4313      	orrs	r3, r2
 800df26:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df30:	2b00      	cmp	r3, #0
 800df32:	d008      	beq.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800df34:	4b15      	ldr	r3, [pc, #84]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df38:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df40:	4912      	ldr	r1, [pc, #72]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df42:	4313      	orrs	r3, r2
 800df44:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d008      	beq.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800df52:	4b0e      	ldr	r3, [pc, #56]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df5e:	490b      	ldr	r1, [pc, #44]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df60:	4313      	orrs	r3, r2
 800df62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d008      	beq.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800df70:	4b06      	ldr	r3, [pc, #24]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df7c:	4903      	ldr	r1, [pc, #12]	; (800df8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df7e:	4313      	orrs	r3, r2
 800df80:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800df82:	2300      	movs	r3, #0
}
 800df84:	4618      	mov	r0, r3
 800df86:	3748      	adds	r7, #72	; 0x48
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	40021000 	.word	0x40021000

0800df90 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d101      	bne.n	800dfa2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e083      	b.n	800e0aa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	7f5b      	ldrb	r3, [r3, #29]
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d105      	bne.n	800dfb8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7f8 faee 	bl	8006594 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2202      	movs	r2, #2
 800dfbc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	22ca      	movs	r2, #202	; 0xca
 800dfc4:	625a      	str	r2, [r3, #36]	; 0x24
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2253      	movs	r2, #83	; 0x53
 800dfcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 f897 	bl	800e102 <RTC_EnterInitMode>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d008      	beq.n	800dfec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	22ff      	movs	r2, #255	; 0xff
 800dfe0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2204      	movs	r2, #4
 800dfe6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e05e      	b.n	800e0aa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	6812      	ldr	r2, [r2, #0]
 800dff6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dffe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	6899      	ldr	r1, [r3, #8]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	685a      	ldr	r2, [r3, #4]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	691b      	ldr	r3, [r3, #16]
 800e00e:	431a      	orrs	r2, r3
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	695b      	ldr	r3, [r3, #20]
 800e014:	431a      	orrs	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	430a      	orrs	r2, r1
 800e01c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	68d2      	ldr	r2, [r2, #12]
 800e026:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	6919      	ldr	r1, [r3, #16]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	041a      	lsls	r2, r3, #16
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	430a      	orrs	r2, r1
 800e03a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	68da      	ldr	r2, [r3, #12]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e04a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	f003 0320 	and.w	r3, r3, #32
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10e      	bne.n	800e078 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 f829 	bl	800e0b2 <HAL_RTC_WaitForSynchro>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d008      	beq.n	800e078 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	22ff      	movs	r2, #255	; 0xff
 800e06c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2204      	movs	r2, #4
 800e072:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800e074:	2301      	movs	r3, #1
 800e076:	e018      	b.n	800e0aa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e086:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	699a      	ldr	r2, [r3, #24]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	430a      	orrs	r2, r1
 800e098:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	22ff      	movs	r2, #255	; 0xff
 800e0a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800e0a8:	2300      	movs	r3, #0
  }
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b084      	sub	sp, #16
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	68da      	ldr	r2, [r3, #12]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e0cc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800e0ce:	f7f9 fd51 	bl	8007b74 <HAL_GetTick>
 800e0d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e0d4:	e009      	b.n	800e0ea <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e0d6:	f7f9 fd4d 	bl	8007b74 <HAL_GetTick>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0e4:	d901      	bls.n	800e0ea <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800e0e6:	2303      	movs	r3, #3
 800e0e8:	e007      	b.n	800e0fa <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	f003 0320 	and.w	r3, r3, #32
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d0ee      	beq.n	800e0d6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800e0f8:	2300      	movs	r3, #0
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3710      	adds	r7, #16
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e102:	b580      	push	{r7, lr}
 800e104:	b084      	sub	sp, #16
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e10a:	2300      	movs	r3, #0
 800e10c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d119      	bne.n	800e150 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f04f 32ff 	mov.w	r2, #4294967295
 800e124:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e126:	f7f9 fd25 	bl	8007b74 <HAL_GetTick>
 800e12a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e12c:	e009      	b.n	800e142 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e12e:	f7f9 fd21 	bl	8007b74 <HAL_GetTick>
 800e132:	4602      	mov	r2, r0
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	1ad3      	subs	r3, r2, r3
 800e138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e13c:	d901      	bls.n	800e142 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800e13e:	2303      	movs	r3, #3
 800e140:	e007      	b.n	800e152 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d0ee      	beq.n	800e12e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800e150:	2300      	movs	r3, #0
}
 800e152:	4618      	mov	r0, r3
 800e154:	3710      	adds	r7, #16
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b084      	sub	sp, #16
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d101      	bne.n	800e16c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e168:	2301      	movs	r3, #1
 800e16a:	e09d      	b.n	800e2a8 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e170:	2b00      	cmp	r3, #0
 800e172:	d108      	bne.n	800e186 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e17c:	d009      	beq.n	800e192 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2200      	movs	r2, #0
 800e182:	61da      	str	r2, [r3, #28]
 800e184:	e005      	b.n	800e192 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2200      	movs	r2, #0
 800e18a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2200      	movs	r2, #0
 800e190:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2200      	movs	r2, #0
 800e196:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d106      	bne.n	800e1b2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7f8 fa17 	bl	80065e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2202      	movs	r2, #2
 800e1b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e1d2:	d902      	bls.n	800e1da <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	60fb      	str	r3, [r7, #12]
 800e1d8:	e002      	b.n	800e1e0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e1da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e1e8:	d007      	beq.n	800e1fa <HAL_SPI_Init+0xa0>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e1f2:	d002      	beq.n	800e1fa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e20a:	431a      	orrs	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	691b      	ldr	r3, [r3, #16]
 800e210:	f003 0302 	and.w	r3, r3, #2
 800e214:	431a      	orrs	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	695b      	ldr	r3, [r3, #20]
 800e21a:	f003 0301 	and.w	r3, r3, #1
 800e21e:	431a      	orrs	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	699b      	ldr	r3, [r3, #24]
 800e224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e228:	431a      	orrs	r2, r3
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	69db      	ldr	r3, [r3, #28]
 800e22e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e232:	431a      	orrs	r2, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a1b      	ldr	r3, [r3, #32]
 800e238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e23c:	ea42 0103 	orr.w	r1, r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e244:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	430a      	orrs	r2, r1
 800e24e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	699b      	ldr	r3, [r3, #24]
 800e254:	0c1b      	lsrs	r3, r3, #16
 800e256:	f003 0204 	and.w	r2, r3, #4
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25e:	f003 0310 	and.w	r3, r3, #16
 800e262:	431a      	orrs	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e268:	f003 0308 	and.w	r3, r3, #8
 800e26c:	431a      	orrs	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e276:	ea42 0103 	orr.w	r1, r2, r3
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	430a      	orrs	r2, r1
 800e286:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	69da      	ldr	r2, [r3, #28]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e296:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e2a6:	2300      	movs	r3, #0
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e049      	b.n	800e356 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d106      	bne.n	800e2dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 f841 	bl	800e35e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2202      	movs	r2, #2
 800e2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	3304      	adds	r3, #4
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	4610      	mov	r0, r2
 800e2f0:	f000 f9f2 	bl	800e6d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2201      	movs	r2, #1
 800e300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2201      	movs	r2, #1
 800e308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2201      	movs	r2, #1
 800e310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2201      	movs	r2, #1
 800e318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2201      	movs	r2, #1
 800e320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2201      	movs	r2, #1
 800e328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2201      	movs	r2, #1
 800e330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2201      	movs	r2, #1
 800e340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2201      	movs	r2, #1
 800e348:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2201      	movs	r2, #1
 800e350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e354:	2300      	movs	r3, #0
}
 800e356:	4618      	mov	r0, r3
 800e358:	3708      	adds	r7, #8
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e35e:	b480      	push	{r7}
 800e360:	b083      	sub	sp, #12
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e366:	bf00      	nop
 800e368:	370c      	adds	r7, #12
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr
	...

0800e374 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e374:	b480      	push	{r7}
 800e376:	b085      	sub	sp, #20
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e382:	b2db      	uxtb	r3, r3
 800e384:	2b01      	cmp	r3, #1
 800e386:	d001      	beq.n	800e38c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e388:	2301      	movs	r3, #1
 800e38a:	e04a      	b.n	800e422 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2202      	movs	r2, #2
 800e390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	68da      	ldr	r2, [r3, #12]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f042 0201 	orr.w	r2, r2, #1
 800e3a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a21      	ldr	r2, [pc, #132]	; (800e430 <HAL_TIM_Base_Start_IT+0xbc>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d018      	beq.n	800e3e0 <HAL_TIM_Base_Start_IT+0x6c>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3b6:	d013      	beq.n	800e3e0 <HAL_TIM_Base_Start_IT+0x6c>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	4a1d      	ldr	r2, [pc, #116]	; (800e434 <HAL_TIM_Base_Start_IT+0xc0>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d00e      	beq.n	800e3e0 <HAL_TIM_Base_Start_IT+0x6c>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4a1c      	ldr	r2, [pc, #112]	; (800e438 <HAL_TIM_Base_Start_IT+0xc4>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d009      	beq.n	800e3e0 <HAL_TIM_Base_Start_IT+0x6c>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a1a      	ldr	r2, [pc, #104]	; (800e43c <HAL_TIM_Base_Start_IT+0xc8>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d004      	beq.n	800e3e0 <HAL_TIM_Base_Start_IT+0x6c>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4a19      	ldr	r2, [pc, #100]	; (800e440 <HAL_TIM_Base_Start_IT+0xcc>)
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d115      	bne.n	800e40c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	689a      	ldr	r2, [r3, #8]
 800e3e6:	4b17      	ldr	r3, [pc, #92]	; (800e444 <HAL_TIM_Base_Start_IT+0xd0>)
 800e3e8:	4013      	ands	r3, r2
 800e3ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2b06      	cmp	r3, #6
 800e3f0:	d015      	beq.n	800e41e <HAL_TIM_Base_Start_IT+0xaa>
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3f8:	d011      	beq.n	800e41e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f042 0201 	orr.w	r2, r2, #1
 800e408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e40a:	e008      	b.n	800e41e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f042 0201 	orr.w	r2, r2, #1
 800e41a:	601a      	str	r2, [r3, #0]
 800e41c:	e000      	b.n	800e420 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e41e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e420:	2300      	movs	r3, #0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3714      	adds	r7, #20
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr
 800e42e:	bf00      	nop
 800e430:	40012c00 	.word	0x40012c00
 800e434:	40000400 	.word	0x40000400
 800e438:	40000800 	.word	0x40000800
 800e43c:	40013400 	.word	0x40013400
 800e440:	40014000 	.word	0x40014000
 800e444:	00010007 	.word	0x00010007

0800e448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	f003 0302 	and.w	r3, r3, #2
 800e45a:	2b02      	cmp	r3, #2
 800e45c:	d122      	bne.n	800e4a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	f003 0302 	and.w	r3, r3, #2
 800e468:	2b02      	cmp	r3, #2
 800e46a:	d11b      	bne.n	800e4a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f06f 0202 	mvn.w	r2, #2
 800e474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2201      	movs	r2, #1
 800e47a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	699b      	ldr	r3, [r3, #24]
 800e482:	f003 0303 	and.w	r3, r3, #3
 800e486:	2b00      	cmp	r3, #0
 800e488:	d003      	beq.n	800e492 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f000 f905 	bl	800e69a <HAL_TIM_IC_CaptureCallback>
 800e490:	e005      	b.n	800e49e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f000 f8f7 	bl	800e686 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 f908 	bl	800e6ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	f003 0304 	and.w	r3, r3, #4
 800e4ae:	2b04      	cmp	r3, #4
 800e4b0:	d122      	bne.n	800e4f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	f003 0304 	and.w	r3, r3, #4
 800e4bc:	2b04      	cmp	r3, #4
 800e4be:	d11b      	bne.n	800e4f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f06f 0204 	mvn.w	r2, #4
 800e4c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2202      	movs	r2, #2
 800e4ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	699b      	ldr	r3, [r3, #24]
 800e4d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d003      	beq.n	800e4e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 f8db 	bl	800e69a <HAL_TIM_IC_CaptureCallback>
 800e4e4:	e005      	b.n	800e4f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 f8cd 	bl	800e686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 f8de 	bl	800e6ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	691b      	ldr	r3, [r3, #16]
 800e4fe:	f003 0308 	and.w	r3, r3, #8
 800e502:	2b08      	cmp	r3, #8
 800e504:	d122      	bne.n	800e54c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	f003 0308 	and.w	r3, r3, #8
 800e510:	2b08      	cmp	r3, #8
 800e512:	d11b      	bne.n	800e54c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f06f 0208 	mvn.w	r2, #8
 800e51c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2204      	movs	r2, #4
 800e522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	69db      	ldr	r3, [r3, #28]
 800e52a:	f003 0303 	and.w	r3, r3, #3
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d003      	beq.n	800e53a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f000 f8b1 	bl	800e69a <HAL_TIM_IC_CaptureCallback>
 800e538:	e005      	b.n	800e546 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f8a3 	bl	800e686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 f8b4 	bl	800e6ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	691b      	ldr	r3, [r3, #16]
 800e552:	f003 0310 	and.w	r3, r3, #16
 800e556:	2b10      	cmp	r3, #16
 800e558:	d122      	bne.n	800e5a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	f003 0310 	and.w	r3, r3, #16
 800e564:	2b10      	cmp	r3, #16
 800e566:	d11b      	bne.n	800e5a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f06f 0210 	mvn.w	r2, #16
 800e570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2208      	movs	r2, #8
 800e576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	69db      	ldr	r3, [r3, #28]
 800e57e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e582:	2b00      	cmp	r3, #0
 800e584:	d003      	beq.n	800e58e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 f887 	bl	800e69a <HAL_TIM_IC_CaptureCallback>
 800e58c:	e005      	b.n	800e59a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f000 f879 	bl	800e686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f000 f88a 	bl	800e6ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	691b      	ldr	r3, [r3, #16]
 800e5a6:	f003 0301 	and.w	r3, r3, #1
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d10e      	bne.n	800e5cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	f003 0301 	and.w	r3, r3, #1
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d107      	bne.n	800e5cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f06f 0201 	mvn.w	r2, #1
 800e5c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f7f5 f8b0 	bl	800372c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	691b      	ldr	r3, [r3, #16]
 800e5d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5d6:	2b80      	cmp	r3, #128	; 0x80
 800e5d8:	d10e      	bne.n	800e5f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5e4:	2b80      	cmp	r3, #128	; 0x80
 800e5e6:	d107      	bne.n	800e5f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e5f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 f90a 	bl	800e80c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	691b      	ldr	r3, [r3, #16]
 800e5fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e606:	d10e      	bne.n	800e626 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	68db      	ldr	r3, [r3, #12]
 800e60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e612:	2b80      	cmp	r3, #128	; 0x80
 800e614:	d107      	bne.n	800e626 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e61e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 f8fd 	bl	800e820 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	691b      	ldr	r3, [r3, #16]
 800e62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e630:	2b40      	cmp	r3, #64	; 0x40
 800e632:	d10e      	bne.n	800e652 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e63e:	2b40      	cmp	r3, #64	; 0x40
 800e640:	d107      	bne.n	800e652 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 f838 	bl	800e6c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	691b      	ldr	r3, [r3, #16]
 800e658:	f003 0320 	and.w	r3, r3, #32
 800e65c:	2b20      	cmp	r3, #32
 800e65e:	d10e      	bne.n	800e67e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	f003 0320 	and.w	r3, r3, #32
 800e66a:	2b20      	cmp	r3, #32
 800e66c:	d107      	bne.n	800e67e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f06f 0220 	mvn.w	r2, #32
 800e676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f000 f8bd 	bl	800e7f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e67e:	bf00      	nop
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e686:	b480      	push	{r7}
 800e688:	b083      	sub	sp, #12
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e68e:	bf00      	nop
 800e690:	370c      	adds	r7, #12
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr

0800e69a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e69a:	b480      	push	{r7}
 800e69c:	b083      	sub	sp, #12
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e6a2:	bf00      	nop
 800e6a4:	370c      	adds	r7, #12
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr

0800e6ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e6ae:	b480      	push	{r7}
 800e6b0:	b083      	sub	sp, #12
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e6b6:	bf00      	nop
 800e6b8:	370c      	adds	r7, #12
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr

0800e6c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e6c2:	b480      	push	{r7}
 800e6c4:	b083      	sub	sp, #12
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e6ca:	bf00      	nop
 800e6cc:	370c      	adds	r7, #12
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr
	...

0800e6d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b085      	sub	sp, #20
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4a3c      	ldr	r2, [pc, #240]	; (800e7dc <TIM_Base_SetConfig+0x104>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d00f      	beq.n	800e710 <TIM_Base_SetConfig+0x38>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6f6:	d00b      	beq.n	800e710 <TIM_Base_SetConfig+0x38>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	4a39      	ldr	r2, [pc, #228]	; (800e7e0 <TIM_Base_SetConfig+0x108>)
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d007      	beq.n	800e710 <TIM_Base_SetConfig+0x38>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	4a38      	ldr	r2, [pc, #224]	; (800e7e4 <TIM_Base_SetConfig+0x10c>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d003      	beq.n	800e710 <TIM_Base_SetConfig+0x38>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	4a37      	ldr	r2, [pc, #220]	; (800e7e8 <TIM_Base_SetConfig+0x110>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d108      	bne.n	800e722 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	68fa      	ldr	r2, [r7, #12]
 800e71e:	4313      	orrs	r3, r2
 800e720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4a2d      	ldr	r2, [pc, #180]	; (800e7dc <TIM_Base_SetConfig+0x104>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d01b      	beq.n	800e762 <TIM_Base_SetConfig+0x8a>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e730:	d017      	beq.n	800e762 <TIM_Base_SetConfig+0x8a>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	4a2a      	ldr	r2, [pc, #168]	; (800e7e0 <TIM_Base_SetConfig+0x108>)
 800e736:	4293      	cmp	r3, r2
 800e738:	d013      	beq.n	800e762 <TIM_Base_SetConfig+0x8a>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	4a29      	ldr	r2, [pc, #164]	; (800e7e4 <TIM_Base_SetConfig+0x10c>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d00f      	beq.n	800e762 <TIM_Base_SetConfig+0x8a>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	4a28      	ldr	r2, [pc, #160]	; (800e7e8 <TIM_Base_SetConfig+0x110>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d00b      	beq.n	800e762 <TIM_Base_SetConfig+0x8a>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	4a27      	ldr	r2, [pc, #156]	; (800e7ec <TIM_Base_SetConfig+0x114>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d007      	beq.n	800e762 <TIM_Base_SetConfig+0x8a>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	4a26      	ldr	r2, [pc, #152]	; (800e7f0 <TIM_Base_SetConfig+0x118>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d003      	beq.n	800e762 <TIM_Base_SetConfig+0x8a>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4a25      	ldr	r2, [pc, #148]	; (800e7f4 <TIM_Base_SetConfig+0x11c>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d108      	bne.n	800e774 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	68fa      	ldr	r2, [r7, #12]
 800e770:	4313      	orrs	r3, r2
 800e772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	695b      	ldr	r3, [r3, #20]
 800e77e:	4313      	orrs	r3, r2
 800e780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	68fa      	ldr	r2, [r7, #12]
 800e786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	689a      	ldr	r2, [r3, #8]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	4a10      	ldr	r2, [pc, #64]	; (800e7dc <TIM_Base_SetConfig+0x104>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d00f      	beq.n	800e7c0 <TIM_Base_SetConfig+0xe8>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	4a11      	ldr	r2, [pc, #68]	; (800e7e8 <TIM_Base_SetConfig+0x110>)
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d00b      	beq.n	800e7c0 <TIM_Base_SetConfig+0xe8>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	4a10      	ldr	r2, [pc, #64]	; (800e7ec <TIM_Base_SetConfig+0x114>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d007      	beq.n	800e7c0 <TIM_Base_SetConfig+0xe8>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	4a0f      	ldr	r2, [pc, #60]	; (800e7f0 <TIM_Base_SetConfig+0x118>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d003      	beq.n	800e7c0 <TIM_Base_SetConfig+0xe8>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4a0e      	ldr	r2, [pc, #56]	; (800e7f4 <TIM_Base_SetConfig+0x11c>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d103      	bne.n	800e7c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	691a      	ldr	r2, [r3, #16]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	615a      	str	r2, [r3, #20]
}
 800e7ce:	bf00      	nop
 800e7d0:	3714      	adds	r7, #20
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr
 800e7da:	bf00      	nop
 800e7dc:	40012c00 	.word	0x40012c00
 800e7e0:	40000400 	.word	0x40000400
 800e7e4:	40000800 	.word	0x40000800
 800e7e8:	40013400 	.word	0x40013400
 800e7ec:	40014000 	.word	0x40014000
 800e7f0:	40014400 	.word	0x40014400
 800e7f4:	40014800 	.word	0x40014800

0800e7f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e800:	bf00      	nop
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e828:	bf00      	nop
 800e82a:	370c      	adds	r7, #12
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800e834:	b480      	push	{r7}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e844:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800e848:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3714      	adds	r7, #20
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr

0800e862 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e862:	b480      	push	{r7}
 800e864:	b085      	sub	sp, #20
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e86a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800e86e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e876:	b29a      	uxth	r2, r3
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	43db      	mvns	r3, r3
 800e87e:	b29b      	uxth	r3, r3
 800e880:	4013      	ands	r3, r2
 800e882:	b29a      	uxth	r2, r3
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e88a:	2300      	movs	r3, #0
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3714      	adds	r7, #20
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr

0800e898 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e898:	b084      	sub	sp, #16
 800e89a:	b480      	push	{r7}
 800e89c:	b083      	sub	sp, #12
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
 800e8a2:	f107 0014 	add.w	r0, r7, #20
 800e8a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800e8ca:	2300      	movs	r3, #0
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	370c      	adds	r7, #12
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	b004      	add	sp, #16
 800e8d8:	4770      	bx	lr
	...

0800e8dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b09d      	sub	sp, #116	; 0x74
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	009b      	lsls	r3, r3, #2
 800e8f4:	4413      	add	r3, r2
 800e8f6:	881b      	ldrh	r3, [r3, #0]
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800e8fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e902:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	78db      	ldrb	r3, [r3, #3]
 800e90a:	2b03      	cmp	r3, #3
 800e90c:	d81f      	bhi.n	800e94e <USB_ActivateEndpoint+0x72>
 800e90e:	a201      	add	r2, pc, #4	; (adr r2, 800e914 <USB_ActivateEndpoint+0x38>)
 800e910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e914:	0800e925 	.word	0x0800e925
 800e918:	0800e941 	.word	0x0800e941
 800e91c:	0800e957 	.word	0x0800e957
 800e920:	0800e933 	.word	0x0800e933
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800e924:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e92c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e930:	e012      	b.n	800e958 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800e932:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e936:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800e93a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e93e:	e00b      	b.n	800e958 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800e940:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e944:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e948:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e94c:	e004      	b.n	800e958 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800e94e:	2301      	movs	r3, #1
 800e950:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800e954:	e000      	b.n	800e958 <USB_ActivateEndpoint+0x7c>
      break;
 800e956:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	441a      	add	r2, r3
 800e962:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e96a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e96e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e976:	b29b      	uxth	r3, r3
 800e978:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	009b      	lsls	r3, r3, #2
 800e982:	4413      	add	r3, r2
 800e984:	881b      	ldrh	r3, [r3, #0]
 800e986:	b29b      	uxth	r3, r3
 800e988:	b21b      	sxth	r3, r3
 800e98a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e98e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e992:	b21a      	sxth	r2, r3
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	b21b      	sxth	r3, r3
 800e99a:	4313      	orrs	r3, r2
 800e99c:	b21b      	sxth	r3, r3
 800e99e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	441a      	add	r2, r3
 800e9ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800e9b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e9b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e9b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e9bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	7b1b      	ldrb	r3, [r3, #12]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f040 8149 	bne.w	800ec60 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	785b      	ldrb	r3, [r3, #1]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f000 8084 	beq.w	800eae0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	61bb      	str	r3, [r7, #24]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	4413      	add	r3, r2
 800e9ea:	61bb      	str	r3, [r7, #24]
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	011a      	lsls	r2, r3, #4
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	4413      	add	r3, r2
 800e9f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e9fa:	617b      	str	r3, [r7, #20]
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	88db      	ldrh	r3, [r3, #6]
 800ea00:	085b      	lsrs	r3, r3, #1
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	005b      	lsls	r3, r3, #1
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	009b      	lsls	r3, r3, #2
 800ea14:	4413      	add	r3, r2
 800ea16:	881b      	ldrh	r3, [r3, #0]
 800ea18:	827b      	strh	r3, [r7, #18]
 800ea1a:	8a7b      	ldrh	r3, [r7, #18]
 800ea1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d01b      	beq.n	800ea5c <USB_ActivateEndpoint+0x180>
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	4413      	add	r3, r2
 800ea2e:	881b      	ldrh	r3, [r3, #0]
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea3a:	823b      	strh	r3, [r7, #16]
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	441a      	add	r2, r3
 800ea46:	8a3b      	ldrh	r3, [r7, #16]
 800ea48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	78db      	ldrb	r3, [r3, #3]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d020      	beq.n	800eaa6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	009b      	lsls	r3, r3, #2
 800ea6c:	4413      	add	r3, r2
 800ea6e:	881b      	ldrh	r3, [r3, #0]
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea7a:	81bb      	strh	r3, [r7, #12]
 800ea7c:	89bb      	ldrh	r3, [r7, #12]
 800ea7e:	f083 0320 	eor.w	r3, r3, #32
 800ea82:	81bb      	strh	r3, [r7, #12]
 800ea84:	687a      	ldr	r2, [r7, #4]
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	441a      	add	r2, r3
 800ea8e:	89bb      	ldrh	r3, [r7, #12]
 800ea90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	8013      	strh	r3, [r2, #0]
 800eaa4:	e2a6      	b.n	800eff4 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	4413      	add	r3, r2
 800eab0:	881b      	ldrh	r3, [r3, #0]
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eabc:	81fb      	strh	r3, [r7, #14]
 800eabe:	687a      	ldr	r2, [r7, #4]
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	009b      	lsls	r3, r3, #2
 800eac6:	441a      	add	r2, r3
 800eac8:	89fb      	ldrh	r3, [r7, #14]
 800eaca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ead2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ead6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eada:	b29b      	uxth	r3, r3
 800eadc:	8013      	strh	r3, [r2, #0]
 800eade:	e289      	b.n	800eff4 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	633b      	str	r3, [r7, #48]	; 0x30
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	461a      	mov	r2, r3
 800eaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf0:	4413      	add	r3, r2
 800eaf2:	633b      	str	r3, [r7, #48]	; 0x30
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	011a      	lsls	r2, r3, #4
 800eafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafc:	4413      	add	r3, r2
 800eafe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800eb02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	88db      	ldrh	r3, [r3, #6]
 800eb08:	085b      	lsrs	r3, r3, #1
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	005b      	lsls	r3, r3, #1
 800eb0e:	b29a      	uxth	r2, r3
 800eb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb12:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	461a      	mov	r2, r3
 800eb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb24:	4413      	add	r3, r2
 800eb26:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	011a      	lsls	r2, r3, #4
 800eb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb30:	4413      	add	r3, r2
 800eb32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800eb36:	627b      	str	r3, [r7, #36]	; 0x24
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	691b      	ldr	r3, [r3, #16]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d112      	bne.n	800eb66 <USB_ActivateEndpoint+0x28a>
 800eb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb42:	881b      	ldrh	r3, [r3, #0]
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800eb4a:	b29a      	uxth	r2, r3
 800eb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4e:	801a      	strh	r2, [r3, #0]
 800eb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb52:	881b      	ldrh	r3, [r3, #0]
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb62:	801a      	strh	r2, [r3, #0]
 800eb64:	e02f      	b.n	800ebc6 <USB_ActivateEndpoint+0x2ea>
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	691b      	ldr	r3, [r3, #16]
 800eb6a:	2b3e      	cmp	r3, #62	; 0x3e
 800eb6c:	d813      	bhi.n	800eb96 <USB_ActivateEndpoint+0x2ba>
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	691b      	ldr	r3, [r3, #16]
 800eb72:	085b      	lsrs	r3, r3, #1
 800eb74:	66bb      	str	r3, [r7, #104]	; 0x68
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	691b      	ldr	r3, [r3, #16]
 800eb7a:	f003 0301 	and.w	r3, r3, #1
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d002      	beq.n	800eb88 <USB_ActivateEndpoint+0x2ac>
 800eb82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb84:	3301      	adds	r3, #1
 800eb86:	66bb      	str	r3, [r7, #104]	; 0x68
 800eb88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	029b      	lsls	r3, r3, #10
 800eb8e:	b29a      	uxth	r2, r3
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	801a      	strh	r2, [r3, #0]
 800eb94:	e017      	b.n	800ebc6 <USB_ActivateEndpoint+0x2ea>
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	691b      	ldr	r3, [r3, #16]
 800eb9a:	095b      	lsrs	r3, r3, #5
 800eb9c:	66bb      	str	r3, [r7, #104]	; 0x68
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	691b      	ldr	r3, [r3, #16]
 800eba2:	f003 031f 	and.w	r3, r3, #31
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d102      	bne.n	800ebb0 <USB_ActivateEndpoint+0x2d4>
 800ebaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebac:	3b01      	subs	r3, #1
 800ebae:	66bb      	str	r3, [r7, #104]	; 0x68
 800ebb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	029b      	lsls	r3, r3, #10
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ebbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ebc0:	b29a      	uxth	r2, r3
 800ebc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	4413      	add	r3, r2
 800ebd0:	881b      	ldrh	r3, [r3, #0]
 800ebd2:	847b      	strh	r3, [r7, #34]	; 0x22
 800ebd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ebd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d01b      	beq.n	800ec16 <USB_ActivateEndpoint+0x33a>
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	781b      	ldrb	r3, [r3, #0]
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	4413      	add	r3, r2
 800ebe8:	881b      	ldrh	r3, [r3, #0]
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebf4:	843b      	strh	r3, [r7, #32]
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	009b      	lsls	r3, r3, #2
 800ebfe:	441a      	add	r2, r3
 800ec00:	8c3b      	ldrh	r3, [r7, #32]
 800ec02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ec0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	4413      	add	r3, r2
 800ec20:	881b      	ldrh	r3, [r3, #0]
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec2c:	83fb      	strh	r3, [r7, #30]
 800ec2e:	8bfb      	ldrh	r3, [r7, #30]
 800ec30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ec34:	83fb      	strh	r3, [r7, #30]
 800ec36:	8bfb      	ldrh	r3, [r7, #30]
 800ec38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ec3c:	83fb      	strh	r3, [r7, #30]
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	441a      	add	r2, r3
 800ec48:	8bfb      	ldrh	r3, [r7, #30]
 800ec4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	8013      	strh	r3, [r2, #0]
 800ec5e:	e1c9      	b.n	800eff4 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	78db      	ldrb	r3, [r3, #3]
 800ec64:	2b02      	cmp	r3, #2
 800ec66:	d11e      	bne.n	800eca6 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	4413      	add	r3, r2
 800ec72:	881b      	ldrh	r3, [r3, #0]
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec7e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	009b      	lsls	r3, r3, #2
 800ec8a:	441a      	add	r2, r3
 800ec8c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ec90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec98:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ec9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eca0:	b29b      	uxth	r3, r3
 800eca2:	8013      	strh	r3, [r2, #0]
 800eca4:	e01d      	b.n	800ece2 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	4413      	add	r3, r2
 800ecb0:	881b      	ldrh	r3, [r3, #0]
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ecb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecbc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ecc0:	687a      	ldr	r2, [r7, #4]
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	441a      	add	r2, r3
 800ecca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ecce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ecd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ecd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ecda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	461a      	mov	r2, r3
 800ecf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecf2:	4413      	add	r3, r2
 800ecf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	011a      	lsls	r2, r3, #4
 800ecfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecfe:	4413      	add	r3, r2
 800ed00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ed04:	65bb      	str	r3, [r7, #88]	; 0x58
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	891b      	ldrh	r3, [r3, #8]
 800ed0a:	085b      	lsrs	r3, r3, #1
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	005b      	lsls	r3, r3, #1
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed14:	801a      	strh	r2, [r3, #0]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	657b      	str	r3, [r7, #84]	; 0x54
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	461a      	mov	r2, r3
 800ed24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed26:	4413      	add	r3, r2
 800ed28:	657b      	str	r3, [r7, #84]	; 0x54
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	781b      	ldrb	r3, [r3, #0]
 800ed2e:	011a      	lsls	r2, r3, #4
 800ed30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed32:	4413      	add	r3, r2
 800ed34:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800ed38:	653b      	str	r3, [r7, #80]	; 0x50
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	895b      	ldrh	r3, [r3, #10]
 800ed3e:	085b      	lsrs	r3, r3, #1
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	005b      	lsls	r3, r3, #1
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed48:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	785b      	ldrb	r3, [r3, #1]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	f040 8093 	bne.w	800ee7a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	4413      	add	r3, r2
 800ed5e:	881b      	ldrh	r3, [r3, #0]
 800ed60:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ed64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ed68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d01b      	beq.n	800eda8 <USB_ActivateEndpoint+0x4cc>
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	4413      	add	r3, r2
 800ed7a:	881b      	ldrh	r3, [r3, #0]
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed86:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	441a      	add	r2, r3
 800ed92:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ed94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eda0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eda8:	687a      	ldr	r2, [r7, #4]
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	4413      	add	r3, r2
 800edb2:	881b      	ldrh	r3, [r3, #0]
 800edb4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800edb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800edb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d01b      	beq.n	800edf8 <USB_ActivateEndpoint+0x51c>
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	009b      	lsls	r3, r3, #2
 800edc8:	4413      	add	r3, r2
 800edca:	881b      	ldrh	r3, [r3, #0]
 800edcc:	b29b      	uxth	r3, r3
 800edce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800edd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edd6:	877b      	strh	r3, [r7, #58]	; 0x3a
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	009b      	lsls	r3, r3, #2
 800ede0:	441a      	add	r2, r3
 800ede2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ede4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ede8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800edec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	4413      	add	r3, r2
 800ee02:	881b      	ldrh	r3, [r3, #0]
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ee0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee0e:	873b      	strh	r3, [r7, #56]	; 0x38
 800ee10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ee12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ee16:	873b      	strh	r3, [r7, #56]	; 0x38
 800ee18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ee1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ee1e:	873b      	strh	r3, [r7, #56]	; 0x38
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	441a      	add	r2, r3
 800ee2a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ee2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	4413      	add	r3, r2
 800ee4a:	881b      	ldrh	r3, [r3, #0]
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee56:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	441a      	add	r2, r3
 800ee62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ee64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	8013      	strh	r3, [r2, #0]
 800ee78:	e0bc      	b.n	800eff4 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	4413      	add	r3, r2
 800ee84:	881b      	ldrh	r3, [r3, #0]
 800ee86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ee8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ee8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d01d      	beq.n	800eed2 <USB_ActivateEndpoint+0x5f6>
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	4413      	add	r3, r2
 800eea0:	881b      	ldrh	r3, [r3, #0]
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eeac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	441a      	add	r2, r3
 800eeba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800eebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eeca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eece:	b29b      	uxth	r3, r3
 800eed0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	4413      	add	r3, r2
 800eedc:	881b      	ldrh	r3, [r3, #0]
 800eede:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800eee2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800eee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d01d      	beq.n	800ef2a <USB_ActivateEndpoint+0x64e>
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	009b      	lsls	r3, r3, #2
 800eef6:	4413      	add	r3, r2
 800eef8:	881b      	ldrh	r3, [r3, #0]
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef04:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	441a      	add	r2, r3
 800ef12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ef16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	78db      	ldrb	r3, [r3, #3]
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d024      	beq.n	800ef7c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	4413      	add	r3, r2
 800ef3c:	881b      	ldrh	r3, [r3, #0]
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef48:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ef4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ef50:	f083 0320 	eor.w	r3, r3, #32
 800ef54:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	441a      	add	r2, r3
 800ef62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ef66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	8013      	strh	r3, [r2, #0]
 800ef7a:	e01d      	b.n	800efb8 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	4413      	add	r3, r2
 800ef86:	881b      	ldrh	r3, [r3, #0]
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	441a      	add	r2, r3
 800efa0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800efa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800efa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800efac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800efb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	4413      	add	r3, r2
 800efc2:	881b      	ldrh	r3, [r3, #0]
 800efc4:	b29b      	uxth	r3, r3
 800efc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800efca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	009b      	lsls	r3, r3, #2
 800efda:	441a      	add	r2, r3
 800efdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800efe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800efe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800efe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800efec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800eff4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3774      	adds	r7, #116	; 0x74
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f004:	b480      	push	{r7}
 800f006:	b08d      	sub	sp, #52	; 0x34
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	7b1b      	ldrb	r3, [r3, #12]
 800f012:	2b00      	cmp	r3, #0
 800f014:	f040 808e 	bne.w	800f134 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	785b      	ldrb	r3, [r3, #1]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d044      	beq.n	800f0aa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	009b      	lsls	r3, r3, #2
 800f028:	4413      	add	r3, r2
 800f02a:	881b      	ldrh	r3, [r3, #0]
 800f02c:	81bb      	strh	r3, [r7, #12]
 800f02e:	89bb      	ldrh	r3, [r7, #12]
 800f030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f034:	2b00      	cmp	r3, #0
 800f036:	d01b      	beq.n	800f070 <USB_DeactivateEndpoint+0x6c>
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	4413      	add	r3, r2
 800f042:	881b      	ldrh	r3, [r3, #0]
 800f044:	b29b      	uxth	r3, r3
 800f046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f04a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f04e:	817b      	strh	r3, [r7, #10]
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	009b      	lsls	r3, r3, #2
 800f058:	441a      	add	r2, r3
 800f05a:	897b      	ldrh	r3, [r7, #10]
 800f05c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f068:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	009b      	lsls	r3, r3, #2
 800f078:	4413      	add	r3, r2
 800f07a:	881b      	ldrh	r3, [r3, #0]
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f086:	813b      	strh	r3, [r7, #8]
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	441a      	add	r2, r3
 800f092:	893b      	ldrh	r3, [r7, #8]
 800f094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f09c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	8013      	strh	r3, [r2, #0]
 800f0a8:	e192      	b.n	800f3d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	009b      	lsls	r3, r3, #2
 800f0b2:	4413      	add	r3, r2
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	827b      	strh	r3, [r7, #18]
 800f0b8:	8a7b      	ldrh	r3, [r7, #18]
 800f0ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d01b      	beq.n	800f0fa <USB_DeactivateEndpoint+0xf6>
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	009b      	lsls	r3, r3, #2
 800f0ca:	4413      	add	r3, r2
 800f0cc:	881b      	ldrh	r3, [r3, #0]
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0d8:	823b      	strh	r3, [r7, #16]
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	009b      	lsls	r3, r3, #2
 800f0e2:	441a      	add	r2, r3
 800f0e4:	8a3b      	ldrh	r3, [r7, #16]
 800f0e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f0f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f0fa:	687a      	ldr	r2, [r7, #4]
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	009b      	lsls	r3, r3, #2
 800f102:	4413      	add	r3, r2
 800f104:	881b      	ldrh	r3, [r3, #0]
 800f106:	b29b      	uxth	r3, r3
 800f108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f10c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f110:	81fb      	strh	r3, [r7, #14]
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	441a      	add	r2, r3
 800f11c:	89fb      	ldrh	r3, [r7, #14]
 800f11e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f12e:	b29b      	uxth	r3, r3
 800f130:	8013      	strh	r3, [r2, #0]
 800f132:	e14d      	b.n	800f3d0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	785b      	ldrb	r3, [r3, #1]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	f040 80a5 	bne.w	800f288 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	009b      	lsls	r3, r3, #2
 800f146:	4413      	add	r3, r2
 800f148:	881b      	ldrh	r3, [r3, #0]
 800f14a:	843b      	strh	r3, [r7, #32]
 800f14c:	8c3b      	ldrh	r3, [r7, #32]
 800f14e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f152:	2b00      	cmp	r3, #0
 800f154:	d01b      	beq.n	800f18e <USB_DeactivateEndpoint+0x18a>
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	4413      	add	r3, r2
 800f160:	881b      	ldrh	r3, [r3, #0]
 800f162:	b29b      	uxth	r3, r3
 800f164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f16c:	83fb      	strh	r3, [r7, #30]
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	009b      	lsls	r3, r3, #2
 800f176:	441a      	add	r2, r3
 800f178:	8bfb      	ldrh	r3, [r7, #30]
 800f17a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f17e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f182:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	009b      	lsls	r3, r3, #2
 800f196:	4413      	add	r3, r2
 800f198:	881b      	ldrh	r3, [r3, #0]
 800f19a:	83bb      	strh	r3, [r7, #28]
 800f19c:	8bbb      	ldrh	r3, [r7, #28]
 800f19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d01b      	beq.n	800f1de <USB_DeactivateEndpoint+0x1da>
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	4413      	add	r3, r2
 800f1b0:	881b      	ldrh	r3, [r3, #0]
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1bc:	837b      	strh	r3, [r7, #26]
 800f1be:	687a      	ldr	r2, [r7, #4]
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	441a      	add	r2, r3
 800f1c8:	8b7b      	ldrh	r3, [r7, #26]
 800f1ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f1de:	687a      	ldr	r2, [r7, #4]
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	4413      	add	r3, r2
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1f4:	833b      	strh	r3, [r7, #24]
 800f1f6:	687a      	ldr	r2, [r7, #4]
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	009b      	lsls	r3, r3, #2
 800f1fe:	441a      	add	r2, r3
 800f200:	8b3b      	ldrh	r3, [r7, #24]
 800f202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f20a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f20e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f212:	b29b      	uxth	r3, r3
 800f214:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	4413      	add	r3, r2
 800f220:	881b      	ldrh	r3, [r3, #0]
 800f222:	b29b      	uxth	r3, r3
 800f224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f22c:	82fb      	strh	r3, [r7, #22]
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	009b      	lsls	r3, r3, #2
 800f236:	441a      	add	r2, r3
 800f238:	8afb      	ldrh	r3, [r7, #22]
 800f23a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f23e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	4413      	add	r3, r2
 800f258:	881b      	ldrh	r3, [r3, #0]
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f264:	82bb      	strh	r3, [r7, #20]
 800f266:	687a      	ldr	r2, [r7, #4]
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	441a      	add	r2, r3
 800f270:	8abb      	ldrh	r3, [r7, #20]
 800f272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f27a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f282:	b29b      	uxth	r3, r3
 800f284:	8013      	strh	r3, [r2, #0]
 800f286:	e0a3      	b.n	800f3d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f288:	687a      	ldr	r2, [r7, #4]
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	009b      	lsls	r3, r3, #2
 800f290:	4413      	add	r3, r2
 800f292:	881b      	ldrh	r3, [r3, #0]
 800f294:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f296:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d01b      	beq.n	800f2d8 <USB_DeactivateEndpoint+0x2d4>
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	4413      	add	r3, r2
 800f2aa:	881b      	ldrh	r3, [r3, #0]
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	009b      	lsls	r3, r3, #2
 800f2c0:	441a      	add	r2, r3
 800f2c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f2c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f2d8:	687a      	ldr	r2, [r7, #4]
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	009b      	lsls	r3, r3, #2
 800f2e0:	4413      	add	r3, r2
 800f2e2:	881b      	ldrh	r3, [r3, #0]
 800f2e4:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f2e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d01b      	beq.n	800f328 <USB_DeactivateEndpoint+0x324>
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	4413      	add	r3, r2
 800f2fa:	881b      	ldrh	r3, [r3, #0]
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f306:	853b      	strh	r3, [r7, #40]	; 0x28
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	009b      	lsls	r3, r3, #2
 800f310:	441a      	add	r2, r3
 800f312:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f31c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f320:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f324:	b29b      	uxth	r3, r3
 800f326:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f328:	687a      	ldr	r2, [r7, #4]
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	4413      	add	r3, r2
 800f332:	881b      	ldrh	r3, [r3, #0]
 800f334:	b29b      	uxth	r3, r3
 800f336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f33a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f33e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	441a      	add	r2, r3
 800f34a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f34c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	4413      	add	r3, r2
 800f36a:	881b      	ldrh	r3, [r3, #0]
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f376:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f378:	687a      	ldr	r2, [r7, #4]
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	781b      	ldrb	r3, [r3, #0]
 800f37e:	009b      	lsls	r3, r3, #2
 800f380:	441a      	add	r2, r3
 800f382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f38c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f394:	b29b      	uxth	r3, r3
 800f396:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	009b      	lsls	r3, r3, #2
 800f3a0:	4413      	add	r3, r2
 800f3a2:	881b      	ldrh	r3, [r3, #0]
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f3aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3ae:	847b      	strh	r3, [r7, #34]	; 0x22
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	009b      	lsls	r3, r3, #2
 800f3b8:	441a      	add	r2, r3
 800f3ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f3bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f3d0:	2300      	movs	r3, #0
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3734      	adds	r7, #52	; 0x34
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr

0800f3de <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f3de:	b580      	push	{r7, lr}
 800f3e0:	b0c2      	sub	sp, #264	; 0x108
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3ec:	6018      	str	r0, [r3, #0]
 800f3ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3f6:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f3f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	785b      	ldrb	r3, [r3, #1]
 800f404:	2b01      	cmp	r3, #1
 800f406:	f040 867b 	bne.w	8010100 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f40a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f40e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	699a      	ldr	r2, [r3, #24]
 800f416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f41a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	691b      	ldr	r3, [r3, #16]
 800f422:	429a      	cmp	r2, r3
 800f424:	d908      	bls.n	800f438 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800f426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f42a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	691b      	ldr	r3, [r3, #16]
 800f432:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f436:	e007      	b.n	800f448 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800f438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f43c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	699b      	ldr	r3, [r3, #24]
 800f444:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f44c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	7b1b      	ldrb	r3, [r3, #12]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d13a      	bne.n	800f4ce <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f45c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	6959      	ldr	r1, [r3, #20]
 800f464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	88da      	ldrh	r2, [r3, #6]
 800f470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f474:	b29b      	uxth	r3, r3
 800f476:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f47a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f47e:	6800      	ldr	r0, [r0, #0]
 800f480:	f001 fc11 	bl	8010ca6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	613b      	str	r3, [r7, #16]
 800f490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	4413      	add	r3, r2
 800f4a6:	613b      	str	r3, [r7, #16]
 800f4a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	011a      	lsls	r2, r3, #4
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f4be:	60fb      	str	r3, [r7, #12]
 800f4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4c4:	b29a      	uxth	r2, r3
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	801a      	strh	r2, [r3, #0]
 800f4ca:	f000 bde3 	b.w	8010094 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800f4ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	78db      	ldrb	r3, [r3, #3]
 800f4da:	2b02      	cmp	r3, #2
 800f4dc:	f040 843a 	bne.w	800fd54 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800f4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	6a1a      	ldr	r2, [r3, #32]
 800f4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	691b      	ldr	r3, [r3, #16]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	f240 83b7 	bls.w	800fc6c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f4fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f50c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	4413      	add	r3, r2
 800f518:	881b      	ldrh	r3, [r3, #0]
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f524:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800f528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f52c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	009b      	lsls	r3, r3, #2
 800f540:	441a      	add	r2, r3
 800f542:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f54a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f54e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f556:	b29b      	uxth	r3, r3
 800f558:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800f55a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f55e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	6a1a      	ldr	r2, [r3, #32]
 800f566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f56a:	1ad2      	subs	r2, r2, r3
 800f56c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f57c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	4413      	add	r3, r2
 800f592:	881b      	ldrh	r3, [r3, #0]
 800f594:	b29b      	uxth	r3, r3
 800f596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f000 81b3 	beq.w	800f906 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	633b      	str	r3, [r7, #48]	; 0x30
 800f5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	785b      	ldrb	r3, [r3, #1]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d16d      	bne.n	800f698 <USB_EPStartXfer+0x2ba>
 800f5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	461a      	mov	r2, r3
 800f5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5dc:	4413      	add	r3, r2
 800f5de:	62bb      	str	r3, [r7, #40]	; 0x28
 800f5e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	011a      	lsls	r2, r3, #4
 800f5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f0:	4413      	add	r3, r2
 800f5f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f5f6:	627b      	str	r3, [r7, #36]	; 0x24
 800f5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d112      	bne.n	800f626 <USB_EPStartXfer+0x248>
 800f600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f602:	881b      	ldrh	r3, [r3, #0]
 800f604:	b29b      	uxth	r3, r3
 800f606:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f60a:	b29a      	uxth	r2, r3
 800f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60e:	801a      	strh	r2, [r3, #0]
 800f610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f612:	881b      	ldrh	r3, [r3, #0]
 800f614:	b29b      	uxth	r3, r3
 800f616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f61a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f61e:	b29a      	uxth	r2, r3
 800f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f622:	801a      	strh	r2, [r3, #0]
 800f624:	e05d      	b.n	800f6e2 <USB_EPStartXfer+0x304>
 800f626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f62a:	2b3e      	cmp	r3, #62	; 0x3e
 800f62c:	d817      	bhi.n	800f65e <USB_EPStartXfer+0x280>
 800f62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f632:	085b      	lsrs	r3, r3, #1
 800f634:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f63c:	f003 0301 	and.w	r3, r3, #1
 800f640:	2b00      	cmp	r3, #0
 800f642:	d004      	beq.n	800f64e <USB_EPStartXfer+0x270>
 800f644:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f648:	3301      	adds	r3, #1
 800f64a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f64e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f652:	b29b      	uxth	r3, r3
 800f654:	029b      	lsls	r3, r3, #10
 800f656:	b29a      	uxth	r2, r3
 800f658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65a:	801a      	strh	r2, [r3, #0]
 800f65c:	e041      	b.n	800f6e2 <USB_EPStartXfer+0x304>
 800f65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f662:	095b      	lsrs	r3, r3, #5
 800f664:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f66c:	f003 031f 	and.w	r3, r3, #31
 800f670:	2b00      	cmp	r3, #0
 800f672:	d104      	bne.n	800f67e <USB_EPStartXfer+0x2a0>
 800f674:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f678:	3b01      	subs	r3, #1
 800f67a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f67e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f682:	b29b      	uxth	r3, r3
 800f684:	029b      	lsls	r3, r3, #10
 800f686:	b29b      	uxth	r3, r3
 800f688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f68c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f690:	b29a      	uxth	r2, r3
 800f692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f694:	801a      	strh	r2, [r3, #0]
 800f696:	e024      	b.n	800f6e2 <USB_EPStartXfer+0x304>
 800f698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f69c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	785b      	ldrb	r3, [r3, #1]
 800f6a4:	2b01      	cmp	r3, #1
 800f6a6:	d11c      	bne.n	800f6e2 <USB_EPStartXfer+0x304>
 800f6a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6bc:	4413      	add	r3, r2
 800f6be:	633b      	str	r3, [r7, #48]	; 0x30
 800f6c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	011a      	lsls	r2, r3, #4
 800f6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d0:	4413      	add	r3, r2
 800f6d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6dc:	b29a      	uxth	r2, r3
 800f6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f6e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	895b      	ldrh	r3, [r3, #10]
 800f6ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f6f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	6959      	ldr	r1, [r3, #20]
 800f6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f702:	b29b      	uxth	r3, r3
 800f704:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f708:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f70c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f710:	6800      	ldr	r0, [r0, #0]
 800f712:	f001 fac8 	bl	8010ca6 <USB_WritePMA>
            ep->xfer_buff += len;
 800f716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f71a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	695a      	ldr	r2, [r3, #20]
 800f722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f726:	441a      	add	r2, r3
 800f728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f72c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	6a1a      	ldr	r2, [r3, #32]
 800f740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	691b      	ldr	r3, [r3, #16]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d90f      	bls.n	800f770 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800f750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	6a1a      	ldr	r2, [r3, #32]
 800f75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f760:	1ad2      	subs	r2, r2, r3
 800f762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	621a      	str	r2, [r3, #32]
 800f76e:	e00e      	b.n	800f78e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800f770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	6a1b      	ldr	r3, [r3, #32]
 800f77c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800f780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	2200      	movs	r2, #0
 800f78c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f78e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	785b      	ldrb	r3, [r3, #1]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d16d      	bne.n	800f87a <USB_EPStartXfer+0x49c>
 800f79e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	61bb      	str	r3, [r7, #24]
 800f7aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	69bb      	ldr	r3, [r7, #24]
 800f7be:	4413      	add	r3, r2
 800f7c0:	61bb      	str	r3, [r7, #24]
 800f7c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	011a      	lsls	r2, r3, #4
 800f7d0:	69bb      	ldr	r3, [r7, #24]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f7d8:	617b      	str	r3, [r7, #20]
 800f7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d112      	bne.n	800f808 <USB_EPStartXfer+0x42a>
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	881b      	ldrh	r3, [r3, #0]
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	801a      	strh	r2, [r3, #0]
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	881b      	ldrh	r3, [r3, #0]
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f7fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f800:	b29a      	uxth	r2, r3
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	801a      	strh	r2, [r3, #0]
 800f806:	e063      	b.n	800f8d0 <USB_EPStartXfer+0x4f2>
 800f808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f80c:	2b3e      	cmp	r3, #62	; 0x3e
 800f80e:	d817      	bhi.n	800f840 <USB_EPStartXfer+0x462>
 800f810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f814:	085b      	lsrs	r3, r3, #1
 800f816:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f81e:	f003 0301 	and.w	r3, r3, #1
 800f822:	2b00      	cmp	r3, #0
 800f824:	d004      	beq.n	800f830 <USB_EPStartXfer+0x452>
 800f826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f82a:	3301      	adds	r3, #1
 800f82c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f834:	b29b      	uxth	r3, r3
 800f836:	029b      	lsls	r3, r3, #10
 800f838:	b29a      	uxth	r2, r3
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	801a      	strh	r2, [r3, #0]
 800f83e:	e047      	b.n	800f8d0 <USB_EPStartXfer+0x4f2>
 800f840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f844:	095b      	lsrs	r3, r3, #5
 800f846:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f84e:	f003 031f 	and.w	r3, r3, #31
 800f852:	2b00      	cmp	r3, #0
 800f854:	d104      	bne.n	800f860 <USB_EPStartXfer+0x482>
 800f856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f85a:	3b01      	subs	r3, #1
 800f85c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f864:	b29b      	uxth	r3, r3
 800f866:	029b      	lsls	r3, r3, #10
 800f868:	b29b      	uxth	r3, r3
 800f86a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f86e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f872:	b29a      	uxth	r2, r3
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	801a      	strh	r2, [r3, #0]
 800f878:	e02a      	b.n	800f8d0 <USB_EPStartXfer+0x4f2>
 800f87a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f87e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	785b      	ldrb	r3, [r3, #1]
 800f886:	2b01      	cmp	r3, #1
 800f888:	d122      	bne.n	800f8d0 <USB_EPStartXfer+0x4f2>
 800f88a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f88e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	623b      	str	r3, [r7, #32]
 800f896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f89a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	6a3b      	ldr	r3, [r7, #32]
 800f8aa:	4413      	add	r3, r2
 800f8ac:	623b      	str	r3, [r7, #32]
 800f8ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	011a      	lsls	r2, r3, #4
 800f8bc:	6a3b      	ldr	r3, [r7, #32]
 800f8be:	4413      	add	r3, r2
 800f8c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f8c4:	61fb      	str	r3, [r7, #28]
 800f8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8ca:	b29a      	uxth	r2, r3
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f8d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	891b      	ldrh	r3, [r3, #8]
 800f8dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	6959      	ldr	r1, [r3, #20]
 800f8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f8f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f8fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f8fe:	6800      	ldr	r0, [r0, #0]
 800f900:	f001 f9d1 	bl	8010ca6 <USB_WritePMA>
 800f904:	e3c6      	b.n	8010094 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f90a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	785b      	ldrb	r3, [r3, #1]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d16d      	bne.n	800f9f2 <USB_EPStartXfer+0x614>
 800f916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f91a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	64bb      	str	r3, [r7, #72]	; 0x48
 800f922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f930:	b29b      	uxth	r3, r3
 800f932:	461a      	mov	r2, r3
 800f934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f936:	4413      	add	r3, r2
 800f938:	64bb      	str	r3, [r7, #72]	; 0x48
 800f93a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f93e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	011a      	lsls	r2, r3, #4
 800f948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f94a:	4413      	add	r3, r2
 800f94c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f950:	647b      	str	r3, [r7, #68]	; 0x44
 800f952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f956:	2b00      	cmp	r3, #0
 800f958:	d112      	bne.n	800f980 <USB_EPStartXfer+0x5a2>
 800f95a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f95c:	881b      	ldrh	r3, [r3, #0]
 800f95e:	b29b      	uxth	r3, r3
 800f960:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f964:	b29a      	uxth	r2, r3
 800f966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f968:	801a      	strh	r2, [r3, #0]
 800f96a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f96c:	881b      	ldrh	r3, [r3, #0]
 800f96e:	b29b      	uxth	r3, r3
 800f970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f978:	b29a      	uxth	r2, r3
 800f97a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f97c:	801a      	strh	r2, [r3, #0]
 800f97e:	e063      	b.n	800fa48 <USB_EPStartXfer+0x66a>
 800f980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f984:	2b3e      	cmp	r3, #62	; 0x3e
 800f986:	d817      	bhi.n	800f9b8 <USB_EPStartXfer+0x5da>
 800f988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f98c:	085b      	lsrs	r3, r3, #1
 800f98e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f996:	f003 0301 	and.w	r3, r3, #1
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d004      	beq.n	800f9a8 <USB_EPStartXfer+0x5ca>
 800f99e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f9a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	029b      	lsls	r3, r3, #10
 800f9b0:	b29a      	uxth	r2, r3
 800f9b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9b4:	801a      	strh	r2, [r3, #0]
 800f9b6:	e047      	b.n	800fa48 <USB_EPStartXfer+0x66a>
 800f9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9bc:	095b      	lsrs	r3, r3, #5
 800f9be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9c6:	f003 031f 	and.w	r3, r3, #31
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d104      	bne.n	800f9d8 <USB_EPStartXfer+0x5fa>
 800f9ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f9d2:	3b01      	subs	r3, #1
 800f9d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f9d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	029b      	lsls	r3, r3, #10
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f9e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f9ea:	b29a      	uxth	r2, r3
 800f9ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9ee:	801a      	strh	r2, [r3, #0]
 800f9f0:	e02a      	b.n	800fa48 <USB_EPStartXfer+0x66a>
 800f9f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	785b      	ldrb	r3, [r3, #1]
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	d122      	bne.n	800fa48 <USB_EPStartXfer+0x66a>
 800fa02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	653b      	str	r3, [r7, #80]	; 0x50
 800fa0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa1c:	b29b      	uxth	r3, r3
 800fa1e:	461a      	mov	r2, r3
 800fa20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa22:	4413      	add	r3, r2
 800fa24:	653b      	str	r3, [r7, #80]	; 0x50
 800fa26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	011a      	lsls	r2, r3, #4
 800fa34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa36:	4413      	add	r3, r2
 800fa38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fa3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800fa48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	891b      	ldrh	r3, [r3, #8]
 800fa54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fa58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	6959      	ldr	r1, [r3, #20]
 800fa64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fa6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fa72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fa76:	6800      	ldr	r0, [r0, #0]
 800fa78:	f001 f915 	bl	8010ca6 <USB_WritePMA>
            ep->xfer_buff += len;
 800fa7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	695a      	ldr	r2, [r3, #20]
 800fa88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa8c:	441a      	add	r2, r3
 800fa8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800fa9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	6a1a      	ldr	r2, [r3, #32]
 800faa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	691b      	ldr	r3, [r3, #16]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d90f      	bls.n	800fad6 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800fab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	6a1a      	ldr	r2, [r3, #32]
 800fac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fac6:	1ad2      	subs	r2, r2, r3
 800fac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800facc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	621a      	str	r2, [r3, #32]
 800fad4:	e00e      	b.n	800faf4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800fad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	6a1b      	ldr	r3, [r3, #32]
 800fae2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800fae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2200      	movs	r2, #0
 800faf2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800faf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	643b      	str	r3, [r7, #64]	; 0x40
 800fb00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	785b      	ldrb	r3, [r3, #1]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d16d      	bne.n	800fbec <USB_EPStartXfer+0x80e>
 800fb10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb30:	4413      	add	r3, r2
 800fb32:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	011a      	lsls	r2, r3, #4
 800fb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb44:	4413      	add	r3, r2
 800fb46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fb4a:	637b      	str	r3, [r7, #52]	; 0x34
 800fb4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d112      	bne.n	800fb7a <USB_EPStartXfer+0x79c>
 800fb54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb56:	881b      	ldrh	r3, [r3, #0]
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb62:	801a      	strh	r2, [r3, #0]
 800fb64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb66:	881b      	ldrh	r3, [r3, #0]
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb72:	b29a      	uxth	r2, r3
 800fb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb76:	801a      	strh	r2, [r3, #0]
 800fb78:	e05d      	b.n	800fc36 <USB_EPStartXfer+0x858>
 800fb7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb7e:	2b3e      	cmp	r3, #62	; 0x3e
 800fb80:	d817      	bhi.n	800fbb2 <USB_EPStartXfer+0x7d4>
 800fb82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb86:	085b      	lsrs	r3, r3, #1
 800fb88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb90:	f003 0301 	and.w	r3, r3, #1
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d004      	beq.n	800fba2 <USB_EPStartXfer+0x7c4>
 800fb98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	029b      	lsls	r3, r3, #10
 800fbaa:	b29a      	uxth	r2, r3
 800fbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbae:	801a      	strh	r2, [r3, #0]
 800fbb0:	e041      	b.n	800fc36 <USB_EPStartXfer+0x858>
 800fbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbb6:	095b      	lsrs	r3, r3, #5
 800fbb8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fbbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbc0:	f003 031f 	and.w	r3, r3, #31
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d104      	bne.n	800fbd2 <USB_EPStartXfer+0x7f4>
 800fbc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fbcc:	3b01      	subs	r3, #1
 800fbce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fbd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	029b      	lsls	r3, r3, #10
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbe4:	b29a      	uxth	r2, r3
 800fbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbe8:	801a      	strh	r2, [r3, #0]
 800fbea:	e024      	b.n	800fc36 <USB_EPStartXfer+0x858>
 800fbec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	785b      	ldrb	r3, [r3, #1]
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d11c      	bne.n	800fc36 <USB_EPStartXfer+0x858>
 800fbfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc10:	4413      	add	r3, r2
 800fc12:	643b      	str	r3, [r7, #64]	; 0x40
 800fc14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	011a      	lsls	r2, r3, #4
 800fc22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc24:	4413      	add	r3, r2
 800fc26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fc2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc30:	b29a      	uxth	r2, r3
 800fc32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fc36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	895b      	ldrh	r3, [r3, #10]
 800fc42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fc46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	6959      	ldr	r1, [r3, #20]
 800fc52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fc5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fc60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fc64:	6800      	ldr	r0, [r0, #0]
 800fc66:	f001 f81e 	bl	8010ca6 <USB_WritePMA>
 800fc6a:	e213      	b.n	8010094 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800fc6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	6a1b      	ldr	r3, [r3, #32]
 800fc78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800fc7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc84:	681a      	ldr	r2, [r3, #0]
 800fc86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	781b      	ldrb	r3, [r3, #0]
 800fc92:	009b      	lsls	r3, r3, #2
 800fc94:	4413      	add	r3, r2
 800fc96:	881b      	ldrh	r3, [r3, #0]
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800fc9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fca2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800fca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	441a      	add	r2, r3
 800fcc0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fcc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fcc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fcd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fcd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fce8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcf8:	4413      	add	r3, r2
 800fcfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	011a      	lsls	r2, r3, #4
 800fd0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd0c:	4413      	add	r3, r2
 800fd0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fd12:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800fd1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	891b      	ldrh	r3, [r3, #8]
 800fd2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fd2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	6959      	ldr	r1, [r3, #20]
 800fd3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fd44:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fd48:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fd4c:	6800      	ldr	r0, [r0, #0]
 800fd4e:	f000 ffaa 	bl	8010ca6 <USB_WritePMA>
 800fd52:	e19f      	b.n	8010094 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800fd54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	6a1a      	ldr	r2, [r3, #32]
 800fd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd64:	1ad2      	subs	r2, r2, r3
 800fd66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fd72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd7a:	681a      	ldr	r2, [r3, #0]
 800fd7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	4413      	add	r3, r2
 800fd8c:	881b      	ldrh	r3, [r3, #0]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	f000 80bc 	beq.w	800ff12 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fd9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	673b      	str	r3, [r7, #112]	; 0x70
 800fda6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	785b      	ldrb	r3, [r3, #1]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d16d      	bne.n	800fe92 <USB_EPStartXfer+0xab4>
 800fdb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	66bb      	str	r3, [r7, #104]	; 0x68
 800fdc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdd6:	4413      	add	r3, r2
 800fdd8:	66bb      	str	r3, [r7, #104]	; 0x68
 800fdda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	011a      	lsls	r2, r3, #4
 800fde8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdea:	4413      	add	r3, r2
 800fdec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fdf0:	667b      	str	r3, [r7, #100]	; 0x64
 800fdf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d112      	bne.n	800fe20 <USB_EPStartXfer+0xa42>
 800fdfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdfc:	881b      	ldrh	r3, [r3, #0]
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fe04:	b29a      	uxth	r2, r3
 800fe06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe08:	801a      	strh	r2, [r3, #0]
 800fe0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe0c:	881b      	ldrh	r3, [r3, #0]
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe18:	b29a      	uxth	r2, r3
 800fe1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe1c:	801a      	strh	r2, [r3, #0]
 800fe1e:	e05d      	b.n	800fedc <USB_EPStartXfer+0xafe>
 800fe20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe24:	2b3e      	cmp	r3, #62	; 0x3e
 800fe26:	d817      	bhi.n	800fe58 <USB_EPStartXfer+0xa7a>
 800fe28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe2c:	085b      	lsrs	r3, r3, #1
 800fe2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fe32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe36:	f003 0301 	and.w	r3, r3, #1
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d004      	beq.n	800fe48 <USB_EPStartXfer+0xa6a>
 800fe3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fe42:	3301      	adds	r3, #1
 800fe44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fe48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	029b      	lsls	r3, r3, #10
 800fe50:	b29a      	uxth	r2, r3
 800fe52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe54:	801a      	strh	r2, [r3, #0]
 800fe56:	e041      	b.n	800fedc <USB_EPStartXfer+0xafe>
 800fe58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe5c:	095b      	lsrs	r3, r3, #5
 800fe5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fe62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe66:	f003 031f 	and.w	r3, r3, #31
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d104      	bne.n	800fe78 <USB_EPStartXfer+0xa9a>
 800fe6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fe72:	3b01      	subs	r3, #1
 800fe74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fe78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	029b      	lsls	r3, r3, #10
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe8a:	b29a      	uxth	r2, r3
 800fe8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe8e:	801a      	strh	r2, [r3, #0]
 800fe90:	e024      	b.n	800fedc <USB_EPStartXfer+0xafe>
 800fe92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	785b      	ldrb	r3, [r3, #1]
 800fe9e:	2b01      	cmp	r3, #1
 800fea0:	d11c      	bne.n	800fedc <USB_EPStartXfer+0xafe>
 800fea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	461a      	mov	r2, r3
 800feb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800feb6:	4413      	add	r3, r2
 800feb8:	673b      	str	r3, [r7, #112]	; 0x70
 800feba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800febe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	011a      	lsls	r2, r3, #4
 800fec8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800feca:	4413      	add	r3, r2
 800fecc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fed0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800feda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800fedc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	895b      	ldrh	r3, [r3, #10]
 800fee8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800feec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	6959      	ldr	r1, [r3, #20]
 800fef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ff02:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ff06:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ff0a:	6800      	ldr	r0, [r0, #0]
 800ff0c:	f000 fecb 	bl	8010ca6 <USB_WritePMA>
 800ff10:	e0c0      	b.n	8010094 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ff12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	785b      	ldrb	r3, [r3, #1]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d16d      	bne.n	800fffe <USB_EPStartXfer+0xc20>
 800ff22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ff2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff3c:	b29b      	uxth	r3, r3
 800ff3e:	461a      	mov	r2, r3
 800ff40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff42:	4413      	add	r3, r2
 800ff44:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ff46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	011a      	lsls	r2, r3, #4
 800ff54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff56:	4413      	add	r3, r2
 800ff58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ff5c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ff5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d112      	bne.n	800ff8c <USB_EPStartXfer+0xbae>
 800ff66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff68:	881b      	ldrh	r3, [r3, #0]
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ff70:	b29a      	uxth	r2, r3
 800ff72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff74:	801a      	strh	r2, [r3, #0]
 800ff76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff78:	881b      	ldrh	r3, [r3, #0]
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff84:	b29a      	uxth	r2, r3
 800ff86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff88:	801a      	strh	r2, [r3, #0]
 800ff8a:	e069      	b.n	8010060 <USB_EPStartXfer+0xc82>
 800ff8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff90:	2b3e      	cmp	r3, #62	; 0x3e
 800ff92:	d817      	bhi.n	800ffc4 <USB_EPStartXfer+0xbe6>
 800ff94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff98:	085b      	lsrs	r3, r3, #1
 800ff9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ff9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffa2:	f003 0301 	and.w	r3, r3, #1
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d004      	beq.n	800ffb4 <USB_EPStartXfer+0xbd6>
 800ffaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ffae:	3301      	adds	r3, #1
 800ffb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ffb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	029b      	lsls	r3, r3, #10
 800ffbc:	b29a      	uxth	r2, r3
 800ffbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ffc0:	801a      	strh	r2, [r3, #0]
 800ffc2:	e04d      	b.n	8010060 <USB_EPStartXfer+0xc82>
 800ffc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffc8:	095b      	lsrs	r3, r3, #5
 800ffca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ffce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffd2:	f003 031f 	and.w	r3, r3, #31
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d104      	bne.n	800ffe4 <USB_EPStartXfer+0xc06>
 800ffda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ffde:	3b01      	subs	r3, #1
 800ffe0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ffe4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ffe8:	b29b      	uxth	r3, r3
 800ffea:	029b      	lsls	r3, r3, #10
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fff6:	b29a      	uxth	r2, r3
 800fff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fffa:	801a      	strh	r2, [r3, #0]
 800fffc:	e030      	b.n	8010060 <USB_EPStartXfer+0xc82>
 800fffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	785b      	ldrb	r3, [r3, #1]
 801000a:	2b01      	cmp	r3, #1
 801000c:	d128      	bne.n	8010060 <USB_EPStartXfer+0xc82>
 801000e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801001c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801002a:	b29b      	uxth	r3, r3
 801002c:	461a      	mov	r2, r3
 801002e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010032:	4413      	add	r3, r2
 8010034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801003c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	011a      	lsls	r2, r3, #4
 8010046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801004a:	4413      	add	r3, r2
 801004c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010058:	b29a      	uxth	r2, r3
 801005a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801005e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	891b      	ldrh	r3, [r3, #8]
 801006c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	6959      	ldr	r1, [r3, #20]
 801007c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010080:	b29b      	uxth	r3, r3
 8010082:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010086:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801008a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801008e:	6800      	ldr	r0, [r0, #0]
 8010090:	f000 fe09 	bl	8010ca6 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8010094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801009c:	681a      	ldr	r2, [r3, #0]
 801009e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	009b      	lsls	r3, r3, #2
 80100ac:	4413      	add	r3, r2
 80100ae:	881b      	ldrh	r3, [r3, #0]
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100ba:	817b      	strh	r3, [r7, #10]
 80100bc:	897b      	ldrh	r3, [r7, #10]
 80100be:	f083 0310 	eor.w	r3, r3, #16
 80100c2:	817b      	strh	r3, [r7, #10]
 80100c4:	897b      	ldrh	r3, [r7, #10]
 80100c6:	f083 0320 	eor.w	r3, r3, #32
 80100ca:	817b      	strh	r3, [r7, #10]
 80100cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	441a      	add	r2, r3
 80100e6:	897b      	ldrh	r3, [r7, #10]
 80100e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	8013      	strh	r3, [r2, #0]
 80100fc:	f000 bc9f 	b.w	8010a3e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8010100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	7b1b      	ldrb	r3, [r3, #12]
 801010c:	2b00      	cmp	r3, #0
 801010e:	f040 80ae 	bne.w	801026e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8010112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	699a      	ldr	r2, [r3, #24]
 801011e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	691b      	ldr	r3, [r3, #16]
 801012a:	429a      	cmp	r2, r3
 801012c:	d917      	bls.n	801015e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 801012e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	691b      	ldr	r3, [r3, #16]
 801013a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 801013e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	699a      	ldr	r2, [r3, #24]
 801014a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801014e:	1ad2      	subs	r2, r2, r3
 8010150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	619a      	str	r2, [r3, #24]
 801015c:	e00e      	b.n	801017c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 801015e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	699b      	ldr	r3, [r3, #24]
 801016a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 801016e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	2200      	movs	r2, #0
 801017a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801017c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801018a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801018e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010198:	b29b      	uxth	r3, r3
 801019a:	461a      	mov	r2, r3
 801019c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80101a0:	4413      	add	r3, r2
 80101a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80101a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	011a      	lsls	r2, r3, #4
 80101b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80101b8:	4413      	add	r3, r2
 80101ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80101be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80101c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d116      	bne.n	80101f8 <USB_EPStartXfer+0xe1a>
 80101ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101ce:	881b      	ldrh	r3, [r3, #0]
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80101d6:	b29a      	uxth	r2, r3
 80101d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101dc:	801a      	strh	r2, [r3, #0]
 80101de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101e2:	881b      	ldrh	r3, [r3, #0]
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80101ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80101ee:	b29a      	uxth	r2, r3
 80101f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101f4:	801a      	strh	r2, [r3, #0]
 80101f6:	e3e8      	b.n	80109ca <USB_EPStartXfer+0x15ec>
 80101f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101fc:	2b3e      	cmp	r3, #62	; 0x3e
 80101fe:	d818      	bhi.n	8010232 <USB_EPStartXfer+0xe54>
 8010200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010204:	085b      	lsrs	r3, r3, #1
 8010206:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801020a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801020e:	f003 0301 	and.w	r3, r3, #1
 8010212:	2b00      	cmp	r3, #0
 8010214:	d004      	beq.n	8010220 <USB_EPStartXfer+0xe42>
 8010216:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801021a:	3301      	adds	r3, #1
 801021c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010220:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010224:	b29b      	uxth	r3, r3
 8010226:	029b      	lsls	r3, r3, #10
 8010228:	b29a      	uxth	r2, r3
 801022a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801022e:	801a      	strh	r2, [r3, #0]
 8010230:	e3cb      	b.n	80109ca <USB_EPStartXfer+0x15ec>
 8010232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010236:	095b      	lsrs	r3, r3, #5
 8010238:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801023c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010240:	f003 031f 	and.w	r3, r3, #31
 8010244:	2b00      	cmp	r3, #0
 8010246:	d104      	bne.n	8010252 <USB_EPStartXfer+0xe74>
 8010248:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801024c:	3b01      	subs	r3, #1
 801024e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010252:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010256:	b29b      	uxth	r3, r3
 8010258:	029b      	lsls	r3, r3, #10
 801025a:	b29b      	uxth	r3, r3
 801025c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010264:	b29a      	uxth	r2, r3
 8010266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801026a:	801a      	strh	r2, [r3, #0]
 801026c:	e3ad      	b.n	80109ca <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801026e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	78db      	ldrb	r3, [r3, #3]
 801027a:	2b02      	cmp	r3, #2
 801027c:	f040 8200 	bne.w	8010680 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8010280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	785b      	ldrb	r3, [r3, #1]
 801028c:	2b00      	cmp	r3, #0
 801028e:	f040 8091 	bne.w	80103b4 <USB_EPStartXfer+0xfd6>
 8010292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80102a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80102ae:	b29b      	uxth	r3, r3
 80102b0:	461a      	mov	r2, r3
 80102b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102b6:	4413      	add	r3, r2
 80102b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80102bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	011a      	lsls	r2, r3, #4
 80102ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102ce:	4413      	add	r3, r2
 80102d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80102d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80102d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	691b      	ldr	r3, [r3, #16]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d116      	bne.n	8010316 <USB_EPStartXfer+0xf38>
 80102e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80102ec:	881b      	ldrh	r3, [r3, #0]
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80102f4:	b29a      	uxth	r2, r3
 80102f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80102fa:	801a      	strh	r2, [r3, #0]
 80102fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	b29b      	uxth	r3, r3
 8010304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801030c:	b29a      	uxth	r2, r3
 801030e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010312:	801a      	strh	r2, [r3, #0]
 8010314:	e083      	b.n	801041e <USB_EPStartXfer+0x1040>
 8010316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801031a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	691b      	ldr	r3, [r3, #16]
 8010322:	2b3e      	cmp	r3, #62	; 0x3e
 8010324:	d820      	bhi.n	8010368 <USB_EPStartXfer+0xf8a>
 8010326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801032a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	691b      	ldr	r3, [r3, #16]
 8010332:	085b      	lsrs	r3, r3, #1
 8010334:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801033c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	691b      	ldr	r3, [r3, #16]
 8010344:	f003 0301 	and.w	r3, r3, #1
 8010348:	2b00      	cmp	r3, #0
 801034a:	d004      	beq.n	8010356 <USB_EPStartXfer+0xf78>
 801034c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010350:	3301      	adds	r3, #1
 8010352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801035a:	b29b      	uxth	r3, r3
 801035c:	029b      	lsls	r3, r3, #10
 801035e:	b29a      	uxth	r2, r3
 8010360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010364:	801a      	strh	r2, [r3, #0]
 8010366:	e05a      	b.n	801041e <USB_EPStartXfer+0x1040>
 8010368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801036c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	691b      	ldr	r3, [r3, #16]
 8010374:	095b      	lsrs	r3, r3, #5
 8010376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801037a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801037e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	f003 031f 	and.w	r3, r3, #31
 801038a:	2b00      	cmp	r3, #0
 801038c:	d104      	bne.n	8010398 <USB_EPStartXfer+0xfba>
 801038e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010392:	3b01      	subs	r3, #1
 8010394:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801039c:	b29b      	uxth	r3, r3
 801039e:	029b      	lsls	r3, r3, #10
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80103a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80103aa:	b29a      	uxth	r2, r3
 80103ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80103b0:	801a      	strh	r2, [r3, #0]
 80103b2:	e034      	b.n	801041e <USB_EPStartXfer+0x1040>
 80103b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	785b      	ldrb	r3, [r3, #1]
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d12c      	bne.n	801041e <USB_EPStartXfer+0x1040>
 80103c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80103d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	461a      	mov	r2, r3
 80103e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80103e8:	4413      	add	r3, r2
 80103ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80103ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	781b      	ldrb	r3, [r3, #0]
 80103fa:	011a      	lsls	r2, r3, #4
 80103fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010400:	4413      	add	r3, r2
 8010402:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801040a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801040e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	691b      	ldr	r3, [r3, #16]
 8010416:	b29a      	uxth	r2, r3
 8010418:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801041c:	801a      	strh	r2, [r3, #0]
 801041e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801042c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	785b      	ldrb	r3, [r3, #1]
 8010438:	2b00      	cmp	r3, #0
 801043a:	f040 8091 	bne.w	8010560 <USB_EPStartXfer+0x1182>
 801043e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801044c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801045a:	b29b      	uxth	r3, r3
 801045c:	461a      	mov	r2, r3
 801045e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010462:	4413      	add	r3, r2
 8010464:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801046c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	011a      	lsls	r2, r3, #4
 8010476:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801047a:	4413      	add	r3, r2
 801047c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	691b      	ldr	r3, [r3, #16]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d116      	bne.n	80104c2 <USB_EPStartXfer+0x10e4>
 8010494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010498:	881b      	ldrh	r3, [r3, #0]
 801049a:	b29b      	uxth	r3, r3
 801049c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80104a0:	b29a      	uxth	r2, r3
 80104a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104a6:	801a      	strh	r2, [r3, #0]
 80104a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104ac:	881b      	ldrh	r3, [r3, #0]
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80104b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104be:	801a      	strh	r2, [r3, #0]
 80104c0:	e07c      	b.n	80105bc <USB_EPStartXfer+0x11de>
 80104c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	691b      	ldr	r3, [r3, #16]
 80104ce:	2b3e      	cmp	r3, #62	; 0x3e
 80104d0:	d820      	bhi.n	8010514 <USB_EPStartXfer+0x1136>
 80104d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	691b      	ldr	r3, [r3, #16]
 80104de:	085b      	lsrs	r3, r3, #1
 80104e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80104e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	691b      	ldr	r3, [r3, #16]
 80104f0:	f003 0301 	and.w	r3, r3, #1
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d004      	beq.n	8010502 <USB_EPStartXfer+0x1124>
 80104f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80104fc:	3301      	adds	r3, #1
 80104fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010506:	b29b      	uxth	r3, r3
 8010508:	029b      	lsls	r3, r3, #10
 801050a:	b29a      	uxth	r2, r3
 801050c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010510:	801a      	strh	r2, [r3, #0]
 8010512:	e053      	b.n	80105bc <USB_EPStartXfer+0x11de>
 8010514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	691b      	ldr	r3, [r3, #16]
 8010520:	095b      	lsrs	r3, r3, #5
 8010522:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801052a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	691b      	ldr	r3, [r3, #16]
 8010532:	f003 031f 	and.w	r3, r3, #31
 8010536:	2b00      	cmp	r3, #0
 8010538:	d104      	bne.n	8010544 <USB_EPStartXfer+0x1166>
 801053a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801053e:	3b01      	subs	r3, #1
 8010540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010548:	b29b      	uxth	r3, r3
 801054a:	029b      	lsls	r3, r3, #10
 801054c:	b29b      	uxth	r3, r3
 801054e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010556:	b29a      	uxth	r2, r3
 8010558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801055c:	801a      	strh	r2, [r3, #0]
 801055e:	e02d      	b.n	80105bc <USB_EPStartXfer+0x11de>
 8010560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	785b      	ldrb	r3, [r3, #1]
 801056c:	2b01      	cmp	r3, #1
 801056e:	d125      	bne.n	80105bc <USB_EPStartXfer+0x11de>
 8010570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801057e:	b29b      	uxth	r3, r3
 8010580:	461a      	mov	r2, r3
 8010582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010586:	4413      	add	r3, r2
 8010588:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801058c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	011a      	lsls	r2, r3, #4
 801059a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801059e:	4413      	add	r3, r2
 80105a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80105a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80105a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	691b      	ldr	r3, [r3, #16]
 80105b4:	b29a      	uxth	r2, r3
 80105b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80105ba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80105bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	69db      	ldr	r3, [r3, #28]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	f000 81fe 	beq.w	80109ca <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80105ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105d6:	681a      	ldr	r2, [r3, #0]
 80105d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	4413      	add	r3, r2
 80105e8:	881b      	ldrh	r3, [r3, #0]
 80105ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80105ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80105f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d005      	beq.n	8010606 <USB_EPStartXfer+0x1228>
 80105fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80105fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010602:	2b00      	cmp	r3, #0
 8010604:	d10d      	bne.n	8010622 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010606:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801060a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801060e:	2b00      	cmp	r3, #0
 8010610:	f040 81db 	bne.w	80109ca <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010614:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801061c:	2b00      	cmp	r3, #0
 801061e:	f040 81d4 	bne.w	80109ca <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8010622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	009b      	lsls	r3, r3, #2
 801063a:	4413      	add	r3, r2
 801063c:	881b      	ldrh	r3, [r3, #0]
 801063e:	b29b      	uxth	r3, r3
 8010640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010648:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 801064c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010654:	681a      	ldr	r2, [r3, #0]
 8010656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801065a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	781b      	ldrb	r3, [r3, #0]
 8010662:	009b      	lsls	r3, r3, #2
 8010664:	441a      	add	r2, r3
 8010666:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801066a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801066e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010676:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801067a:	b29b      	uxth	r3, r3
 801067c:	8013      	strh	r3, [r2, #0]
 801067e:	e1a4      	b.n	80109ca <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8010680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	78db      	ldrb	r3, [r3, #3]
 801068c:	2b01      	cmp	r3, #1
 801068e:	f040 819a 	bne.w	80109c6 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8010692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	699a      	ldr	r2, [r3, #24]
 801069e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	691b      	ldr	r3, [r3, #16]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d917      	bls.n	80106de <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80106ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	691b      	ldr	r3, [r3, #16]
 80106ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80106be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	699a      	ldr	r2, [r3, #24]
 80106ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106ce:	1ad2      	subs	r2, r2, r3
 80106d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	619a      	str	r2, [r3, #24]
 80106dc:	e00e      	b.n	80106fc <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80106de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	699b      	ldr	r3, [r3, #24]
 80106ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80106ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2200      	movs	r2, #0
 80106fa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80106fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	785b      	ldrb	r3, [r3, #1]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d178      	bne.n	80107fe <USB_EPStartXfer+0x1420>
 801070c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010710:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801071a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801071e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010728:	b29b      	uxth	r3, r3
 801072a:	461a      	mov	r2, r3
 801072c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010730:	4413      	add	r3, r2
 8010732:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801073a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	781b      	ldrb	r3, [r3, #0]
 8010742:	011a      	lsls	r2, r3, #4
 8010744:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010748:	4413      	add	r3, r2
 801074a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801074e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010756:	2b00      	cmp	r3, #0
 8010758:	d116      	bne.n	8010788 <USB_EPStartXfer+0x13aa>
 801075a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801075e:	881b      	ldrh	r3, [r3, #0]
 8010760:	b29b      	uxth	r3, r3
 8010762:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010766:	b29a      	uxth	r2, r3
 8010768:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801076c:	801a      	strh	r2, [r3, #0]
 801076e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010772:	881b      	ldrh	r3, [r3, #0]
 8010774:	b29b      	uxth	r3, r3
 8010776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801077a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801077e:	b29a      	uxth	r2, r3
 8010780:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010784:	801a      	strh	r2, [r3, #0]
 8010786:	e06b      	b.n	8010860 <USB_EPStartXfer+0x1482>
 8010788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801078c:	2b3e      	cmp	r3, #62	; 0x3e
 801078e:	d818      	bhi.n	80107c2 <USB_EPStartXfer+0x13e4>
 8010790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010794:	085b      	lsrs	r3, r3, #1
 8010796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801079a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801079e:	f003 0301 	and.w	r3, r3, #1
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d004      	beq.n	80107b0 <USB_EPStartXfer+0x13d2>
 80107a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107aa:	3301      	adds	r3, #1
 80107ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80107b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	029b      	lsls	r3, r3, #10
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80107be:	801a      	strh	r2, [r3, #0]
 80107c0:	e04e      	b.n	8010860 <USB_EPStartXfer+0x1482>
 80107c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107c6:	095b      	lsrs	r3, r3, #5
 80107c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80107cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107d0:	f003 031f 	and.w	r3, r3, #31
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d104      	bne.n	80107e2 <USB_EPStartXfer+0x1404>
 80107d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107dc:	3b01      	subs	r3, #1
 80107de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80107e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	029b      	lsls	r3, r3, #10
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80107f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80107f4:	b29a      	uxth	r2, r3
 80107f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80107fa:	801a      	strh	r2, [r3, #0]
 80107fc:	e030      	b.n	8010860 <USB_EPStartXfer+0x1482>
 80107fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	785b      	ldrb	r3, [r3, #1]
 801080a:	2b01      	cmp	r3, #1
 801080c:	d128      	bne.n	8010860 <USB_EPStartXfer+0x1482>
 801080e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801081c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010820:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801082a:	b29b      	uxth	r3, r3
 801082c:	461a      	mov	r2, r3
 801082e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010832:	4413      	add	r3, r2
 8010834:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801083c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	011a      	lsls	r2, r3, #4
 8010846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801084a:	4413      	add	r3, r2
 801084c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010858:	b29a      	uxth	r2, r3
 801085a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801085e:	801a      	strh	r2, [r3, #0]
 8010860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010864:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801086e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	785b      	ldrb	r3, [r3, #1]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d178      	bne.n	8010970 <USB_EPStartXfer+0x1592>
 801087e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801088c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010890:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801089a:	b29b      	uxth	r3, r3
 801089c:	461a      	mov	r2, r3
 801089e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80108a2:	4413      	add	r3, r2
 80108a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80108a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	011a      	lsls	r2, r3, #4
 80108b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80108ba:	4413      	add	r3, r2
 80108bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80108c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80108c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d116      	bne.n	80108fa <USB_EPStartXfer+0x151c>
 80108cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80108d8:	b29a      	uxth	r2, r3
 80108da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80108de:	801a      	strh	r2, [r3, #0]
 80108e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80108e4:	881b      	ldrh	r3, [r3, #0]
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80108ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80108f0:	b29a      	uxth	r2, r3
 80108f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80108f6:	801a      	strh	r2, [r3, #0]
 80108f8:	e067      	b.n	80109ca <USB_EPStartXfer+0x15ec>
 80108fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108fe:	2b3e      	cmp	r3, #62	; 0x3e
 8010900:	d818      	bhi.n	8010934 <USB_EPStartXfer+0x1556>
 8010902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010906:	085b      	lsrs	r3, r3, #1
 8010908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801090c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010910:	f003 0301 	and.w	r3, r3, #1
 8010914:	2b00      	cmp	r3, #0
 8010916:	d004      	beq.n	8010922 <USB_EPStartXfer+0x1544>
 8010918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801091c:	3301      	adds	r3, #1
 801091e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010926:	b29b      	uxth	r3, r3
 8010928:	029b      	lsls	r3, r3, #10
 801092a:	b29a      	uxth	r2, r3
 801092c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010930:	801a      	strh	r2, [r3, #0]
 8010932:	e04a      	b.n	80109ca <USB_EPStartXfer+0x15ec>
 8010934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010938:	095b      	lsrs	r3, r3, #5
 801093a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801093e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010942:	f003 031f 	and.w	r3, r3, #31
 8010946:	2b00      	cmp	r3, #0
 8010948:	d104      	bne.n	8010954 <USB_EPStartXfer+0x1576>
 801094a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801094e:	3b01      	subs	r3, #1
 8010950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010958:	b29b      	uxth	r3, r3
 801095a:	029b      	lsls	r3, r3, #10
 801095c:	b29b      	uxth	r3, r3
 801095e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010966:	b29a      	uxth	r2, r3
 8010968:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801096c:	801a      	strh	r2, [r3, #0]
 801096e:	e02c      	b.n	80109ca <USB_EPStartXfer+0x15ec>
 8010970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	785b      	ldrb	r3, [r3, #1]
 801097c:	2b01      	cmp	r3, #1
 801097e:	d124      	bne.n	80109ca <USB_EPStartXfer+0x15ec>
 8010980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801098e:	b29b      	uxth	r3, r3
 8010990:	461a      	mov	r2, r3
 8010992:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010996:	4413      	add	r3, r2
 8010998:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801099c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	781b      	ldrb	r3, [r3, #0]
 80109a8:	011a      	lsls	r2, r3, #4
 80109aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80109ae:	4413      	add	r3, r2
 80109b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80109b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80109b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109bc:	b29a      	uxth	r2, r3
 80109be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80109c2:	801a      	strh	r2, [r3, #0]
 80109c4:	e001      	b.n	80109ca <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80109c6:	2301      	movs	r3, #1
 80109c8:	e03a      	b.n	8010a40 <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80109ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	009b      	lsls	r3, r3, #2
 80109e2:	4413      	add	r3, r2
 80109e4:	881b      	ldrh	r3, [r3, #0]
 80109e6:	b29b      	uxth	r3, r3
 80109e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80109ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80109f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80109f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80109fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010a00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010a04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010a08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a14:	681a      	ldr	r2, [r3, #0]
 8010a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	009b      	lsls	r3, r3, #2
 8010a24:	441a      	add	r2, r3
 8010a26:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010a3e:	2300      	movs	r3, #0
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}

08010a4a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010a4a:	b480      	push	{r7}
 8010a4c:	b085      	sub	sp, #20
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	6078      	str	r0, [r7, #4]
 8010a52:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	785b      	ldrb	r3, [r3, #1]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d020      	beq.n	8010a9e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8010a5c:	687a      	ldr	r2, [r7, #4]
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	4413      	add	r3, r2
 8010a66:	881b      	ldrh	r3, [r3, #0]
 8010a68:	b29b      	uxth	r3, r3
 8010a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a72:	81bb      	strh	r3, [r7, #12]
 8010a74:	89bb      	ldrh	r3, [r7, #12]
 8010a76:	f083 0310 	eor.w	r3, r3, #16
 8010a7a:	81bb      	strh	r3, [r7, #12]
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	441a      	add	r2, r3
 8010a86:	89bb      	ldrh	r3, [r7, #12]
 8010a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a98:	b29b      	uxth	r3, r3
 8010a9a:	8013      	strh	r3, [r2, #0]
 8010a9c:	e01f      	b.n	8010ade <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8010a9e:	687a      	ldr	r2, [r7, #4]
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	009b      	lsls	r3, r3, #2
 8010aa6:	4413      	add	r3, r2
 8010aa8:	881b      	ldrh	r3, [r3, #0]
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ab4:	81fb      	strh	r3, [r7, #14]
 8010ab6:	89fb      	ldrh	r3, [r7, #14]
 8010ab8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010abc:	81fb      	strh	r3, [r7, #14]
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	009b      	lsls	r3, r3, #2
 8010ac6:	441a      	add	r2, r3
 8010ac8:	89fb      	ldrh	r3, [r7, #14]
 8010aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010ade:	2300      	movs	r3, #0
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3714      	adds	r7, #20
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aea:	4770      	bx	lr

08010aec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010aec:	b480      	push	{r7}
 8010aee:	b087      	sub	sp, #28
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	7b1b      	ldrb	r3, [r3, #12]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	f040 809d 	bne.w	8010c3a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	785b      	ldrb	r3, [r3, #1]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d04c      	beq.n	8010ba2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010b08:	687a      	ldr	r2, [r7, #4]
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	009b      	lsls	r3, r3, #2
 8010b10:	4413      	add	r3, r2
 8010b12:	881b      	ldrh	r3, [r3, #0]
 8010b14:	823b      	strh	r3, [r7, #16]
 8010b16:	8a3b      	ldrh	r3, [r7, #16]
 8010b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d01b      	beq.n	8010b58 <USB_EPClearStall+0x6c>
 8010b20:	687a      	ldr	r2, [r7, #4]
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	009b      	lsls	r3, r3, #2
 8010b28:	4413      	add	r3, r2
 8010b2a:	881b      	ldrh	r3, [r3, #0]
 8010b2c:	b29b      	uxth	r3, r3
 8010b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b36:	81fb      	strh	r3, [r7, #14]
 8010b38:	687a      	ldr	r2, [r7, #4]
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	781b      	ldrb	r3, [r3, #0]
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	441a      	add	r2, r3
 8010b42:	89fb      	ldrh	r3, [r7, #14]
 8010b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	78db      	ldrb	r3, [r3, #3]
 8010b5c:	2b01      	cmp	r3, #1
 8010b5e:	d06c      	beq.n	8010c3a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	4413      	add	r3, r2
 8010b6a:	881b      	ldrh	r3, [r3, #0]
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b76:	81bb      	strh	r3, [r7, #12]
 8010b78:	89bb      	ldrh	r3, [r7, #12]
 8010b7a:	f083 0320 	eor.w	r3, r3, #32
 8010b7e:	81bb      	strh	r3, [r7, #12]
 8010b80:	687a      	ldr	r2, [r7, #4]
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	009b      	lsls	r3, r3, #2
 8010b88:	441a      	add	r2, r3
 8010b8a:	89bb      	ldrh	r3, [r7, #12]
 8010b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	8013      	strh	r3, [r2, #0]
 8010ba0:	e04b      	b.n	8010c3a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010ba2:	687a      	ldr	r2, [r7, #4]
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	009b      	lsls	r3, r3, #2
 8010baa:	4413      	add	r3, r2
 8010bac:	881b      	ldrh	r3, [r3, #0]
 8010bae:	82fb      	strh	r3, [r7, #22]
 8010bb0:	8afb      	ldrh	r3, [r7, #22]
 8010bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d01b      	beq.n	8010bf2 <USB_EPClearStall+0x106>
 8010bba:	687a      	ldr	r2, [r7, #4]
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	009b      	lsls	r3, r3, #2
 8010bc2:	4413      	add	r3, r2
 8010bc4:	881b      	ldrh	r3, [r3, #0]
 8010bc6:	b29b      	uxth	r3, r3
 8010bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010bd0:	82bb      	strh	r3, [r7, #20]
 8010bd2:	687a      	ldr	r2, [r7, #4]
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	009b      	lsls	r3, r3, #2
 8010bda:	441a      	add	r2, r3
 8010bdc:	8abb      	ldrh	r3, [r7, #20]
 8010bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010be6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	009b      	lsls	r3, r3, #2
 8010bfa:	4413      	add	r3, r2
 8010bfc:	881b      	ldrh	r3, [r3, #0]
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c08:	827b      	strh	r3, [r7, #18]
 8010c0a:	8a7b      	ldrh	r3, [r7, #18]
 8010c0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010c10:	827b      	strh	r3, [r7, #18]
 8010c12:	8a7b      	ldrh	r3, [r7, #18]
 8010c14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010c18:	827b      	strh	r3, [r7, #18]
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	009b      	lsls	r3, r3, #2
 8010c22:	441a      	add	r2, r3
 8010c24:	8a7b      	ldrh	r3, [r7, #18]
 8010c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010c3a:	2300      	movs	r3, #0
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	371c      	adds	r7, #28
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	460b      	mov	r3, r1
 8010c52:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8010c54:	78fb      	ldrb	r3, [r7, #3]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d103      	bne.n	8010c62 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2280      	movs	r2, #128	; 0x80
 8010c5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8010c62:	2300      	movs	r3, #0
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	370c      	adds	r7, #12
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr

08010c70 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8010c78:	2300      	movs	r3, #0
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	370c      	adds	r7, #12
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c84:	4770      	bx	lr

08010c86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8010c86:	b480      	push	{r7}
 8010c88:	b085      	sub	sp, #20
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010c94:	b29b      	uxth	r3, r3
 8010c96:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010c98:	68fb      	ldr	r3, [r7, #12]
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3714      	adds	r7, #20
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr

08010ca6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010ca6:	b480      	push	{r7}
 8010ca8:	b08d      	sub	sp, #52	; 0x34
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	60f8      	str	r0, [r7, #12]
 8010cae:	60b9      	str	r1, [r7, #8]
 8010cb0:	4611      	mov	r1, r2
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	80fb      	strh	r3, [r7, #6]
 8010cb8:	4613      	mov	r3, r2
 8010cba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8010cbc:	88bb      	ldrh	r3, [r7, #4]
 8010cbe:	3301      	adds	r3, #1
 8010cc0:	085b      	lsrs	r3, r3, #1
 8010cc2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010ccc:	88fb      	ldrh	r3, [r7, #6]
 8010cce:	005a      	lsls	r2, r3, #1
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	4413      	add	r3, r2
 8010cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010cd8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8010cda:	6a3b      	ldr	r3, [r7, #32]
 8010cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cde:	e01e      	b.n	8010d1e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8010ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce8:	3301      	adds	r3, #1
 8010cea:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8010cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	b29b      	uxth	r3, r3
 8010cf2:	021b      	lsls	r3, r3, #8
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	69bb      	ldr	r3, [r7, #24]
 8010cfa:	4313      	orrs	r3, r2
 8010cfc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	b29a      	uxth	r2, r3
 8010d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d04:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8010d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d08:	3302      	adds	r3, #2
 8010d0a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8010d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0e:	3302      	adds	r3, #2
 8010d10:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8010d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d14:	3301      	adds	r3, #1
 8010d16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8010d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d1dd      	bne.n	8010ce0 <USB_WritePMA+0x3a>
  }
}
 8010d24:	bf00      	nop
 8010d26:	bf00      	nop
 8010d28:	3734      	adds	r7, #52	; 0x34
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr

08010d32 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010d32:	b480      	push	{r7}
 8010d34:	b08b      	sub	sp, #44	; 0x2c
 8010d36:	af00      	add	r7, sp, #0
 8010d38:	60f8      	str	r0, [r7, #12]
 8010d3a:	60b9      	str	r1, [r7, #8]
 8010d3c:	4611      	mov	r1, r2
 8010d3e:	461a      	mov	r2, r3
 8010d40:	460b      	mov	r3, r1
 8010d42:	80fb      	strh	r3, [r7, #6]
 8010d44:	4613      	mov	r3, r2
 8010d46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8010d48:	88bb      	ldrh	r3, [r7, #4]
 8010d4a:	085b      	lsrs	r3, r3, #1
 8010d4c:	b29b      	uxth	r3, r3
 8010d4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010d58:	88fb      	ldrh	r3, [r7, #6]
 8010d5a:	005a      	lsls	r2, r3, #1
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	4413      	add	r3, r2
 8010d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010d64:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8010d66:	69bb      	ldr	r3, [r7, #24]
 8010d68:	627b      	str	r3, [r7, #36]	; 0x24
 8010d6a:	e01b      	b.n	8010da4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8010d6c:	6a3b      	ldr	r3, [r7, #32]
 8010d6e:	881b      	ldrh	r3, [r3, #0]
 8010d70:	b29b      	uxth	r3, r3
 8010d72:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010d74:	6a3b      	ldr	r3, [r7, #32]
 8010d76:	3302      	adds	r3, #2
 8010d78:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	b2da      	uxtb	r2, r3
 8010d7e:	69fb      	ldr	r3, [r7, #28]
 8010d80:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010d82:	69fb      	ldr	r3, [r7, #28]
 8010d84:	3301      	adds	r3, #1
 8010d86:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	0a1b      	lsrs	r3, r3, #8
 8010d8c:	b2da      	uxtb	r2, r3
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010d92:	69fb      	ldr	r3, [r7, #28]
 8010d94:	3301      	adds	r3, #1
 8010d96:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8010d98:	6a3b      	ldr	r3, [r7, #32]
 8010d9a:	3302      	adds	r3, #2
 8010d9c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8010d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da0:	3b01      	subs	r3, #1
 8010da2:	627b      	str	r3, [r7, #36]	; 0x24
 8010da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d1e0      	bne.n	8010d6c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8010daa:	88bb      	ldrh	r3, [r7, #4]
 8010dac:	f003 0301 	and.w	r3, r3, #1
 8010db0:	b29b      	uxth	r3, r3
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d007      	beq.n	8010dc6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8010db6:	6a3b      	ldr	r3, [r7, #32]
 8010db8:	881b      	ldrh	r3, [r3, #0]
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	b2da      	uxtb	r2, r3
 8010dc2:	69fb      	ldr	r3, [r7, #28]
 8010dc4:	701a      	strb	r2, [r3, #0]
  }
}
 8010dc6:	bf00      	nop
 8010dc8:	372c      	adds	r7, #44	; 0x2c
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr

08010dd2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b084      	sub	sp, #16
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
 8010dda:	460b      	mov	r3, r1
 8010ddc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8010dde:	2300      	movs	r3, #0
 8010de0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	7c1b      	ldrb	r3, [r3, #16]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d115      	bne.n	8010e16 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dee:	2202      	movs	r2, #2
 8010df0:	2181      	movs	r1, #129	; 0x81
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f004 fc5b 	bl	80156ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2201      	movs	r2, #1
 8010dfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e02:	2202      	movs	r2, #2
 8010e04:	2101      	movs	r1, #1
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f004 fc51 	bl	80156ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2201      	movs	r2, #1
 8010e10:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8010e14:	e012      	b.n	8010e3c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010e16:	2340      	movs	r3, #64	; 0x40
 8010e18:	2202      	movs	r2, #2
 8010e1a:	2181      	movs	r1, #129	; 0x81
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f004 fc46 	bl	80156ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2201      	movs	r2, #1
 8010e26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010e28:	2340      	movs	r3, #64	; 0x40
 8010e2a:	2202      	movs	r2, #2
 8010e2c:	2101      	movs	r1, #1
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f004 fc3d 	bl	80156ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2201      	movs	r2, #1
 8010e38:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010e3c:	2308      	movs	r3, #8
 8010e3e:	2203      	movs	r2, #3
 8010e40:	2182      	movs	r1, #130	; 0x82
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f004 fc33 	bl	80156ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010e4e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010e52:	f004 fd55 	bl	8015900 <USBD_static_malloc>
 8010e56:	4602      	mov	r2, r0
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d102      	bne.n	8010e6e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8010e68:	2301      	movs	r3, #1
 8010e6a:	73fb      	strb	r3, [r7, #15]
 8010e6c:	e026      	b.n	8010ebc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e74:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	2200      	movs	r2, #0
 8010e84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	7c1b      	ldrb	r3, [r3, #16]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d109      	bne.n	8010eac <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ea2:	2101      	movs	r1, #1
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f004 fcf4 	bl	8015892 <USBD_LL_PrepareReceive>
 8010eaa:	e007      	b.n	8010ebc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010eb2:	2340      	movs	r3, #64	; 0x40
 8010eb4:	2101      	movs	r1, #1
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f004 fceb 	bl	8015892 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8010ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3710      	adds	r7, #16
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}

08010ec6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ec6:	b580      	push	{r7, lr}
 8010ec8:	b084      	sub	sp, #16
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	6078      	str	r0, [r7, #4]
 8010ece:	460b      	mov	r3, r1
 8010ed0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010ed6:	2181      	movs	r1, #129	; 0x81
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f004 fc0e 	bl	80156fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010ee4:	2101      	movs	r1, #1
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f004 fc07 	bl	80156fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010ef4:	2182      	movs	r1, #130	; 0x82
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f004 fbff 	bl	80156fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2200      	movs	r2, #0
 8010f00:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d00e      	beq.n	8010f2a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f004 fcfd 	bl	801591c <USBD_static_free>
    pdev->pClassData = NULL;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2200      	movs	r2, #0
 8010f26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8010f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3710      	adds	r7, #16
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b086      	sub	sp, #24
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f44:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010f46:	2300      	movs	r3, #0
 8010f48:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	781b      	ldrb	r3, [r3, #0]
 8010f56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d039      	beq.n	8010fd2 <USBD_CDC_Setup+0x9e>
 8010f5e:	2b20      	cmp	r3, #32
 8010f60:	d17f      	bne.n	8011062 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	88db      	ldrh	r3, [r3, #6]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d029      	beq.n	8010fbe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	b25b      	sxtb	r3, r3
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	da11      	bge.n	8010f98 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f7a:	689b      	ldr	r3, [r3, #8]
 8010f7c:	683a      	ldr	r2, [r7, #0]
 8010f7e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8010f80:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010f82:	683a      	ldr	r2, [r7, #0]
 8010f84:	88d2      	ldrh	r2, [r2, #6]
 8010f86:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8010f88:	6939      	ldr	r1, [r7, #16]
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	88db      	ldrh	r3, [r3, #6]
 8010f8e:	461a      	mov	r2, r3
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f001 fa14 	bl	80123be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8010f96:	e06b      	b.n	8011070 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	785a      	ldrb	r2, [r3, #1]
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	88db      	ldrh	r3, [r3, #6]
 8010fa6:	b2da      	uxtb	r2, r3
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8010fae:	6939      	ldr	r1, [r7, #16]
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	88db      	ldrh	r3, [r3, #6]
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f001 fa2f 	bl	801241a <USBD_CtlPrepareRx>
      break;
 8010fbc:	e058      	b.n	8011070 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fc4:	689b      	ldr	r3, [r3, #8]
 8010fc6:	683a      	ldr	r2, [r7, #0]
 8010fc8:	7850      	ldrb	r0, [r2, #1]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	6839      	ldr	r1, [r7, #0]
 8010fce:	4798      	blx	r3
      break;
 8010fd0:	e04e      	b.n	8011070 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	785b      	ldrb	r3, [r3, #1]
 8010fd6:	2b0b      	cmp	r3, #11
 8010fd8:	d02e      	beq.n	8011038 <USBD_CDC_Setup+0x104>
 8010fda:	2b0b      	cmp	r3, #11
 8010fdc:	dc38      	bgt.n	8011050 <USBD_CDC_Setup+0x11c>
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d002      	beq.n	8010fe8 <USBD_CDC_Setup+0xb4>
 8010fe2:	2b0a      	cmp	r3, #10
 8010fe4:	d014      	beq.n	8011010 <USBD_CDC_Setup+0xdc>
 8010fe6:	e033      	b.n	8011050 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fee:	2b03      	cmp	r3, #3
 8010ff0:	d107      	bne.n	8011002 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8010ff2:	f107 030c 	add.w	r3, r7, #12
 8010ff6:	2202      	movs	r2, #2
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f001 f9df 	bl	80123be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011000:	e02e      	b.n	8011060 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8011002:	6839      	ldr	r1, [r7, #0]
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f001 f96f 	bl	80122e8 <USBD_CtlError>
            ret = USBD_FAIL;
 801100a:	2302      	movs	r3, #2
 801100c:	75fb      	strb	r3, [r7, #23]
          break;
 801100e:	e027      	b.n	8011060 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011016:	2b03      	cmp	r3, #3
 8011018:	d107      	bne.n	801102a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801101a:	f107 030f 	add.w	r3, r7, #15
 801101e:	2201      	movs	r2, #1
 8011020:	4619      	mov	r1, r3
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f001 f9cb 	bl	80123be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011028:	e01a      	b.n	8011060 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 801102a:	6839      	ldr	r1, [r7, #0]
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f001 f95b 	bl	80122e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8011032:	2302      	movs	r3, #2
 8011034:	75fb      	strb	r3, [r7, #23]
          break;
 8011036:	e013      	b.n	8011060 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801103e:	2b03      	cmp	r3, #3
 8011040:	d00d      	beq.n	801105e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8011042:	6839      	ldr	r1, [r7, #0]
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f001 f94f 	bl	80122e8 <USBD_CtlError>
            ret = USBD_FAIL;
 801104a:	2302      	movs	r3, #2
 801104c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801104e:	e006      	b.n	801105e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8011050:	6839      	ldr	r1, [r7, #0]
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f001 f948 	bl	80122e8 <USBD_CtlError>
          ret = USBD_FAIL;
 8011058:	2302      	movs	r3, #2
 801105a:	75fb      	strb	r3, [r7, #23]
          break;
 801105c:	e000      	b.n	8011060 <USBD_CDC_Setup+0x12c>
          break;
 801105e:	bf00      	nop
      }
      break;
 8011060:	e006      	b.n	8011070 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011062:	6839      	ldr	r1, [r7, #0]
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f001 f93f 	bl	80122e8 <USBD_CtlError>
      ret = USBD_FAIL;
 801106a:	2302      	movs	r3, #2
 801106c:	75fb      	strb	r3, [r7, #23]
      break;
 801106e:	bf00      	nop
  }

  return ret;
 8011070:	7dfb      	ldrb	r3, [r7, #23]
}
 8011072:	4618      	mov	r0, r3
 8011074:	3718      	adds	r7, #24
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}

0801107a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801107a:	b580      	push	{r7, lr}
 801107c:	b084      	sub	sp, #16
 801107e:	af00      	add	r7, sp, #0
 8011080:	6078      	str	r0, [r7, #4]
 8011082:	460b      	mov	r3, r1
 8011084:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801108c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011094:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801109c:	2b00      	cmp	r3, #0
 801109e:	d03a      	beq.n	8011116 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80110a0:	78fa      	ldrb	r2, [r7, #3]
 80110a2:	6879      	ldr	r1, [r7, #4]
 80110a4:	4613      	mov	r3, r2
 80110a6:	009b      	lsls	r3, r3, #2
 80110a8:	4413      	add	r3, r2
 80110aa:	009b      	lsls	r3, r3, #2
 80110ac:	440b      	add	r3, r1
 80110ae:	331c      	adds	r3, #28
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d029      	beq.n	801110a <USBD_CDC_DataIn+0x90>
 80110b6:	78fa      	ldrb	r2, [r7, #3]
 80110b8:	6879      	ldr	r1, [r7, #4]
 80110ba:	4613      	mov	r3, r2
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	4413      	add	r3, r2
 80110c0:	009b      	lsls	r3, r3, #2
 80110c2:	440b      	add	r3, r1
 80110c4:	331c      	adds	r3, #28
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	78f9      	ldrb	r1, [r7, #3]
 80110ca:	68b8      	ldr	r0, [r7, #8]
 80110cc:	460b      	mov	r3, r1
 80110ce:	009b      	lsls	r3, r3, #2
 80110d0:	440b      	add	r3, r1
 80110d2:	00db      	lsls	r3, r3, #3
 80110d4:	4403      	add	r3, r0
 80110d6:	3338      	adds	r3, #56	; 0x38
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	fbb2 f1f3 	udiv	r1, r2, r3
 80110de:	fb01 f303 	mul.w	r3, r1, r3
 80110e2:	1ad3      	subs	r3, r2, r3
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d110      	bne.n	801110a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80110e8:	78fa      	ldrb	r2, [r7, #3]
 80110ea:	6879      	ldr	r1, [r7, #4]
 80110ec:	4613      	mov	r3, r2
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	4413      	add	r3, r2
 80110f2:	009b      	lsls	r3, r3, #2
 80110f4:	440b      	add	r3, r1
 80110f6:	331c      	adds	r3, #28
 80110f8:	2200      	movs	r2, #0
 80110fa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80110fc:	78f9      	ldrb	r1, [r7, #3]
 80110fe:	2300      	movs	r3, #0
 8011100:	2200      	movs	r2, #0
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f004 fba2 	bl	801584c <USBD_LL_Transmit>
 8011108:	e003      	b.n	8011112 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2200      	movs	r2, #0
 801110e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8011112:	2300      	movs	r3, #0
 8011114:	e000      	b.n	8011118 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8011116:	2302      	movs	r3, #2
  }
}
 8011118:	4618      	mov	r0, r3
 801111a:	3710      	adds	r7, #16
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}

08011120 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b084      	sub	sp, #16
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	460b      	mov	r3, r1
 801112a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011132:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011134:	78fb      	ldrb	r3, [r7, #3]
 8011136:	4619      	mov	r1, r3
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f004 fbcd 	bl	80158d8 <USBD_LL_GetRxDataSize>
 801113e:	4602      	mov	r2, r0
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801114c:	2b00      	cmp	r3, #0
 801114e:	d00d      	beq.n	801116c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011156:	68db      	ldr	r3, [r3, #12]
 8011158:	68fa      	ldr	r2, [r7, #12]
 801115a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801115e:	68fa      	ldr	r2, [r7, #12]
 8011160:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011164:	4611      	mov	r1, r2
 8011166:	4798      	blx	r3

    return USBD_OK;
 8011168:	2300      	movs	r3, #0
 801116a:	e000      	b.n	801116e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 801116c:	2302      	movs	r3, #2
  }
}
 801116e:	4618      	mov	r0, r3
 8011170:	3710      	adds	r7, #16
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}

08011176 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011176:	b580      	push	{r7, lr}
 8011178:	b084      	sub	sp, #16
 801117a:	af00      	add	r7, sp, #0
 801117c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011184:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801118c:	2b00      	cmp	r3, #0
 801118e:	d015      	beq.n	80111bc <USBD_CDC_EP0_RxReady+0x46>
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011196:	2bff      	cmp	r3, #255	; 0xff
 8011198:	d010      	beq.n	80111bc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111a0:	689b      	ldr	r3, [r3, #8]
 80111a2:	68fa      	ldr	r2, [r7, #12]
 80111a4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80111a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80111aa:	68fa      	ldr	r2, [r7, #12]
 80111ac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80111b0:	b292      	uxth	r2, r2
 80111b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	22ff      	movs	r2, #255	; 0xff
 80111b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80111bc:	2300      	movs	r3, #0
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3710      	adds	r7, #16
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
	...

080111c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80111c8:	b480      	push	{r7}
 80111ca:	b083      	sub	sp, #12
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2243      	movs	r2, #67	; 0x43
 80111d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80111d6:	4b03      	ldr	r3, [pc, #12]	; (80111e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80111d8:	4618      	mov	r0, r3
 80111da:	370c      	adds	r7, #12
 80111dc:	46bd      	mov	sp, r7
 80111de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e2:	4770      	bx	lr
 80111e4:	200000a4 	.word	0x200000a4

080111e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2243      	movs	r2, #67	; 0x43
 80111f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80111f6:	4b03      	ldr	r3, [pc, #12]	; (8011204 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	370c      	adds	r7, #12
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr
 8011204:	20000060 	.word	0x20000060

08011208 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011208:	b480      	push	{r7}
 801120a:	b083      	sub	sp, #12
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2243      	movs	r2, #67	; 0x43
 8011214:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8011216:	4b03      	ldr	r3, [pc, #12]	; (8011224 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011218:	4618      	mov	r0, r3
 801121a:	370c      	adds	r7, #12
 801121c:	46bd      	mov	sp, r7
 801121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011222:	4770      	bx	lr
 8011224:	200000e8 	.word	0x200000e8

08011228 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011228:	b480      	push	{r7}
 801122a:	b083      	sub	sp, #12
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	220a      	movs	r2, #10
 8011234:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8011236:	4b03      	ldr	r3, [pc, #12]	; (8011244 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011238:	4618      	mov	r0, r3
 801123a:	370c      	adds	r7, #12
 801123c:	46bd      	mov	sp, r7
 801123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011242:	4770      	bx	lr
 8011244:	2000001c 	.word	0x2000001c

08011248 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8011248:	b480      	push	{r7}
 801124a:	b085      	sub	sp, #20
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8011252:	2302      	movs	r3, #2
 8011254:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d005      	beq.n	8011268 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	683a      	ldr	r2, [r7, #0]
 8011260:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8011264:	2300      	movs	r3, #0
 8011266:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011268:	7bfb      	ldrb	r3, [r7, #15]
}
 801126a:	4618      	mov	r0, r3
 801126c:	3714      	adds	r7, #20
 801126e:	46bd      	mov	sp, r7
 8011270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011274:	4770      	bx	lr

08011276 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8011276:	b480      	push	{r7}
 8011278:	b087      	sub	sp, #28
 801127a:	af00      	add	r7, sp, #0
 801127c:	60f8      	str	r0, [r7, #12]
 801127e:	60b9      	str	r1, [r7, #8]
 8011280:	4613      	mov	r3, r2
 8011282:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801128a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	68ba      	ldr	r2, [r7, #8]
 8011290:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011294:	88fa      	ldrh	r2, [r7, #6]
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 801129c:	2300      	movs	r3, #0
}
 801129e:	4618      	mov	r0, r3
 80112a0:	371c      	adds	r7, #28
 80112a2:	46bd      	mov	sp, r7
 80112a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a8:	4770      	bx	lr

080112aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80112aa:	b480      	push	{r7}
 80112ac:	b085      	sub	sp, #20
 80112ae:	af00      	add	r7, sp, #0
 80112b0:	6078      	str	r0, [r7, #4]
 80112b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	683a      	ldr	r2, [r7, #0]
 80112c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80112c4:	2300      	movs	r3, #0
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	3714      	adds	r7, #20
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr

080112d2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80112d2:	b580      	push	{r7, lr}
 80112d4:	b084      	sub	sp, #16
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d01c      	beq.n	8011326 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d115      	bne.n	8011322 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2201      	movs	r2, #1
 80112fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8011314:	b29b      	uxth	r3, r3
 8011316:	2181      	movs	r1, #129	; 0x81
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f004 fa97 	bl	801584c <USBD_LL_Transmit>

      return USBD_OK;
 801131e:	2300      	movs	r3, #0
 8011320:	e002      	b.n	8011328 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8011322:	2301      	movs	r3, #1
 8011324:	e000      	b.n	8011328 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8011326:	2302      	movs	r3, #2
  }
}
 8011328:	4618      	mov	r0, r3
 801132a:	3710      	adds	r7, #16
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b084      	sub	sp, #16
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801133e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011346:	2b00      	cmp	r3, #0
 8011348:	d017      	beq.n	801137a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	7c1b      	ldrb	r3, [r3, #16]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d109      	bne.n	8011366 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011358:	f44f 7300 	mov.w	r3, #512	; 0x200
 801135c:	2101      	movs	r1, #1
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f004 fa97 	bl	8015892 <USBD_LL_PrepareReceive>
 8011364:	e007      	b.n	8011376 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801136c:	2340      	movs	r3, #64	; 0x40
 801136e:	2101      	movs	r1, #1
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f004 fa8e 	bl	8015892 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8011376:	2300      	movs	r3, #0
 8011378:	e000      	b.n	801137c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 801137a:	2302      	movs	r3, #2
  }
}
 801137c:	4618      	mov	r0, r3
 801137e:	3710      	adds	r7, #16
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	60b9      	str	r1, [r7, #8]
 801138e:	4613      	mov	r3, r2
 8011390:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d101      	bne.n	801139c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011398:	2302      	movs	r3, #2
 801139a:	e01a      	b.n	80113d2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d003      	beq.n	80113ae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2200      	movs	r2, #0
 80113aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d003      	beq.n	80113bc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	68ba      	ldr	r2, [r7, #8]
 80113b8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2201      	movs	r2, #1
 80113c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	79fa      	ldrb	r2, [r7, #7]
 80113c8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80113ca:	68f8      	ldr	r0, [r7, #12]
 80113cc:	f004 f8fa 	bl	80155c4 <USBD_LL_Init>

  return USBD_OK;
 80113d0:	2300      	movs	r3, #0
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	3710      	adds	r7, #16
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}

080113da <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80113da:	b480      	push	{r7}
 80113dc:	b085      	sub	sp, #20
 80113de:	af00      	add	r7, sp, #0
 80113e0:	6078      	str	r0, [r7, #4]
 80113e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80113e4:	2300      	movs	r3, #0
 80113e6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d006      	beq.n	80113fc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	683a      	ldr	r2, [r7, #0]
 80113f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80113f6:	2300      	movs	r3, #0
 80113f8:	73fb      	strb	r3, [r7, #15]
 80113fa:	e001      	b.n	8011400 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80113fc:	2302      	movs	r3, #2
 80113fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011400:	7bfb      	ldrb	r3, [r7, #15]
}
 8011402:	4618      	mov	r0, r3
 8011404:	3714      	adds	r7, #20
 8011406:	46bd      	mov	sp, r7
 8011408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140c:	4770      	bx	lr

0801140e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801140e:	b580      	push	{r7, lr}
 8011410:	b082      	sub	sp, #8
 8011412:	af00      	add	r7, sp, #0
 8011414:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f004 f92e 	bl	8015678 <USBD_LL_Start>

  return USBD_OK;
 801141c:	2300      	movs	r3, #0
}
 801141e:	4618      	mov	r0, r3
 8011420:	3708      	adds	r7, #8
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}

08011426 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011426:	b480      	push	{r7}
 8011428:	b083      	sub	sp, #12
 801142a:	af00      	add	r7, sp, #0
 801142c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801142e:	2300      	movs	r3, #0
}
 8011430:	4618      	mov	r0, r3
 8011432:	370c      	adds	r7, #12
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr

0801143c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b084      	sub	sp, #16
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	460b      	mov	r3, r1
 8011446:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011448:	2302      	movs	r3, #2
 801144a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011452:	2b00      	cmp	r3, #0
 8011454:	d00c      	beq.n	8011470 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	78fa      	ldrb	r2, [r7, #3]
 8011460:	4611      	mov	r1, r2
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	4798      	blx	r3
 8011466:	4603      	mov	r3, r0
 8011468:	2b00      	cmp	r3, #0
 801146a:	d101      	bne.n	8011470 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 801146c:	2300      	movs	r3, #0
 801146e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8011470:	7bfb      	ldrb	r3, [r7, #15]
}
 8011472:	4618      	mov	r0, r3
 8011474:	3710      	adds	r7, #16
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}

0801147a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801147a:	b580      	push	{r7, lr}
 801147c:	b082      	sub	sp, #8
 801147e:	af00      	add	r7, sp, #0
 8011480:	6078      	str	r0, [r7, #4]
 8011482:	460b      	mov	r3, r1
 8011484:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	78fa      	ldrb	r2, [r7, #3]
 8011490:	4611      	mov	r1, r2
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	4798      	blx	r3

  return USBD_OK;
 8011496:	2300      	movs	r3, #0
}
 8011498:	4618      	mov	r0, r3
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}

080114a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b082      	sub	sp, #8
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
 80114a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80114b0:	6839      	ldr	r1, [r7, #0]
 80114b2:	4618      	mov	r0, r3
 80114b4:	f000 fedb 	bl	801226e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2201      	movs	r2, #1
 80114bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80114c6:	461a      	mov	r2, r3
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80114d4:	f003 031f 	and.w	r3, r3, #31
 80114d8:	2b02      	cmp	r3, #2
 80114da:	d016      	beq.n	801150a <USBD_LL_SetupStage+0x6a>
 80114dc:	2b02      	cmp	r3, #2
 80114de:	d81c      	bhi.n	801151a <USBD_LL_SetupStage+0x7a>
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d002      	beq.n	80114ea <USBD_LL_SetupStage+0x4a>
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d008      	beq.n	80114fa <USBD_LL_SetupStage+0x5a>
 80114e8:	e017      	b.n	801151a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80114f0:	4619      	mov	r1, r3
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f000 f9ce 	bl	8011894 <USBD_StdDevReq>
      break;
 80114f8:	e01a      	b.n	8011530 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011500:	4619      	mov	r1, r3
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f000 fa30 	bl	8011968 <USBD_StdItfReq>
      break;
 8011508:	e012      	b.n	8011530 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011510:	4619      	mov	r1, r3
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f000 fa70 	bl	80119f8 <USBD_StdEPReq>
      break;
 8011518:	e00a      	b.n	8011530 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011520:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011524:	b2db      	uxtb	r3, r3
 8011526:	4619      	mov	r1, r3
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f004 f905 	bl	8015738 <USBD_LL_StallEP>
      break;
 801152e:	bf00      	nop
  }

  return USBD_OK;
 8011530:	2300      	movs	r3, #0
}
 8011532:	4618      	mov	r0, r3
 8011534:	3708      	adds	r7, #8
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}

0801153a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801153a:	b580      	push	{r7, lr}
 801153c:	b086      	sub	sp, #24
 801153e:	af00      	add	r7, sp, #0
 8011540:	60f8      	str	r0, [r7, #12]
 8011542:	460b      	mov	r3, r1
 8011544:	607a      	str	r2, [r7, #4]
 8011546:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011548:	7afb      	ldrb	r3, [r7, #11]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d14b      	bne.n	80115e6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011554:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801155c:	2b03      	cmp	r3, #3
 801155e:	d134      	bne.n	80115ca <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	68da      	ldr	r2, [r3, #12]
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	691b      	ldr	r3, [r3, #16]
 8011568:	429a      	cmp	r2, r3
 801156a:	d919      	bls.n	80115a0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	68da      	ldr	r2, [r3, #12]
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	691b      	ldr	r3, [r3, #16]
 8011574:	1ad2      	subs	r2, r2, r3
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	68da      	ldr	r2, [r3, #12]
 801157e:	697b      	ldr	r3, [r7, #20]
 8011580:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011582:	429a      	cmp	r2, r3
 8011584:	d203      	bcs.n	801158e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801158a:	b29b      	uxth	r3, r3
 801158c:	e002      	b.n	8011594 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011592:	b29b      	uxth	r3, r3
 8011594:	461a      	mov	r2, r3
 8011596:	6879      	ldr	r1, [r7, #4]
 8011598:	68f8      	ldr	r0, [r7, #12]
 801159a:	f000 ff5c 	bl	8012456 <USBD_CtlContinueRx>
 801159e:	e038      	b.n	8011612 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115a6:	691b      	ldr	r3, [r3, #16]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d00a      	beq.n	80115c2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80115b2:	2b03      	cmp	r3, #3
 80115b4:	d105      	bne.n	80115c2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115bc:	691b      	ldr	r3, [r3, #16]
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80115c2:	68f8      	ldr	r0, [r7, #12]
 80115c4:	f000 ff59 	bl	801247a <USBD_CtlSendStatus>
 80115c8:	e023      	b.n	8011612 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80115d0:	2b05      	cmp	r3, #5
 80115d2:	d11e      	bne.n	8011612 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	2200      	movs	r2, #0
 80115d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80115dc:	2100      	movs	r1, #0
 80115de:	68f8      	ldr	r0, [r7, #12]
 80115e0:	f004 f8aa 	bl	8015738 <USBD_LL_StallEP>
 80115e4:	e015      	b.n	8011612 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115ec:	699b      	ldr	r3, [r3, #24]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d00d      	beq.n	801160e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80115f8:	2b03      	cmp	r3, #3
 80115fa:	d108      	bne.n	801160e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011602:	699b      	ldr	r3, [r3, #24]
 8011604:	7afa      	ldrb	r2, [r7, #11]
 8011606:	4611      	mov	r1, r2
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	4798      	blx	r3
 801160c:	e001      	b.n	8011612 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801160e:	2302      	movs	r3, #2
 8011610:	e000      	b.n	8011614 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8011612:	2300      	movs	r3, #0
}
 8011614:	4618      	mov	r0, r3
 8011616:	3718      	adds	r7, #24
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b086      	sub	sp, #24
 8011620:	af00      	add	r7, sp, #0
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	460b      	mov	r3, r1
 8011626:	607a      	str	r2, [r7, #4]
 8011628:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801162a:	7afb      	ldrb	r3, [r7, #11]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d17f      	bne.n	8011730 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	3314      	adds	r3, #20
 8011634:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801163c:	2b02      	cmp	r3, #2
 801163e:	d15c      	bne.n	80116fa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	68da      	ldr	r2, [r3, #12]
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	691b      	ldr	r3, [r3, #16]
 8011648:	429a      	cmp	r2, r3
 801164a:	d915      	bls.n	8011678 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	68da      	ldr	r2, [r3, #12]
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	691b      	ldr	r3, [r3, #16]
 8011654:	1ad2      	subs	r2, r2, r3
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	68db      	ldr	r3, [r3, #12]
 801165e:	b29b      	uxth	r3, r3
 8011660:	461a      	mov	r2, r3
 8011662:	6879      	ldr	r1, [r7, #4]
 8011664:	68f8      	ldr	r0, [r7, #12]
 8011666:	f000 fec6 	bl	80123f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801166a:	2300      	movs	r3, #0
 801166c:	2200      	movs	r2, #0
 801166e:	2100      	movs	r1, #0
 8011670:	68f8      	ldr	r0, [r7, #12]
 8011672:	f004 f90e 	bl	8015892 <USBD_LL_PrepareReceive>
 8011676:	e04e      	b.n	8011716 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	689b      	ldr	r3, [r3, #8]
 801167c:	697a      	ldr	r2, [r7, #20]
 801167e:	6912      	ldr	r2, [r2, #16]
 8011680:	fbb3 f1f2 	udiv	r1, r3, r2
 8011684:	fb01 f202 	mul.w	r2, r1, r2
 8011688:	1a9b      	subs	r3, r3, r2
 801168a:	2b00      	cmp	r3, #0
 801168c:	d11c      	bne.n	80116c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	689a      	ldr	r2, [r3, #8]
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011696:	429a      	cmp	r2, r3
 8011698:	d316      	bcc.n	80116c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	689a      	ldr	r2, [r3, #8]
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d20f      	bcs.n	80116c8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80116a8:	2200      	movs	r2, #0
 80116aa:	2100      	movs	r1, #0
 80116ac:	68f8      	ldr	r0, [r7, #12]
 80116ae:	f000 fea2 	bl	80123f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	2200      	movs	r2, #0
 80116b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80116ba:	2300      	movs	r3, #0
 80116bc:	2200      	movs	r2, #0
 80116be:	2100      	movs	r1, #0
 80116c0:	68f8      	ldr	r0, [r7, #12]
 80116c2:	f004 f8e6 	bl	8015892 <USBD_LL_PrepareReceive>
 80116c6:	e026      	b.n	8011716 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116ce:	68db      	ldr	r3, [r3, #12]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d00a      	beq.n	80116ea <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80116da:	2b03      	cmp	r3, #3
 80116dc:	d105      	bne.n	80116ea <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116e4:	68db      	ldr	r3, [r3, #12]
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80116ea:	2180      	movs	r1, #128	; 0x80
 80116ec:	68f8      	ldr	r0, [r7, #12]
 80116ee:	f004 f823 	bl	8015738 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80116f2:	68f8      	ldr	r0, [r7, #12]
 80116f4:	f000 fed4 	bl	80124a0 <USBD_CtlReceiveStatus>
 80116f8:	e00d      	b.n	8011716 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011700:	2b04      	cmp	r3, #4
 8011702:	d004      	beq.n	801170e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801170a:	2b00      	cmp	r3, #0
 801170c:	d103      	bne.n	8011716 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801170e:	2180      	movs	r1, #128	; 0x80
 8011710:	68f8      	ldr	r0, [r7, #12]
 8011712:	f004 f811 	bl	8015738 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801171c:	2b01      	cmp	r3, #1
 801171e:	d11d      	bne.n	801175c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8011720:	68f8      	ldr	r0, [r7, #12]
 8011722:	f7ff fe80 	bl	8011426 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2200      	movs	r2, #0
 801172a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801172e:	e015      	b.n	801175c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011736:	695b      	ldr	r3, [r3, #20]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d00d      	beq.n	8011758 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011742:	2b03      	cmp	r3, #3
 8011744:	d108      	bne.n	8011758 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801174c:	695b      	ldr	r3, [r3, #20]
 801174e:	7afa      	ldrb	r2, [r7, #11]
 8011750:	4611      	mov	r1, r2
 8011752:	68f8      	ldr	r0, [r7, #12]
 8011754:	4798      	blx	r3
 8011756:	e001      	b.n	801175c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011758:	2302      	movs	r3, #2
 801175a:	e000      	b.n	801175e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801175c:	2300      	movs	r3, #0
}
 801175e:	4618      	mov	r0, r3
 8011760:	3718      	adds	r7, #24
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}

08011766 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011766:	b580      	push	{r7, lr}
 8011768:	b082      	sub	sp, #8
 801176a:	af00      	add	r7, sp, #0
 801176c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801176e:	2340      	movs	r3, #64	; 0x40
 8011770:	2200      	movs	r2, #0
 8011772:	2100      	movs	r1, #0
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f003 ff9a 	bl	80156ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2201      	movs	r2, #1
 801177e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2240      	movs	r2, #64	; 0x40
 8011786:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801178a:	2340      	movs	r3, #64	; 0x40
 801178c:	2200      	movs	r2, #0
 801178e:	2180      	movs	r1, #128	; 0x80
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f003 ff8c 	bl	80156ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2201      	movs	r2, #1
 801179a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2240      	movs	r2, #64	; 0x40
 80117a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2201      	movs	r2, #1
 80117a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	2200      	movs	r2, #0
 80117ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	2200      	movs	r2, #0
 80117b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2200      	movs	r2, #0
 80117bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d009      	beq.n	80117de <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	687a      	ldr	r2, [r7, #4]
 80117d4:	6852      	ldr	r2, [r2, #4]
 80117d6:	b2d2      	uxtb	r2, r2
 80117d8:	4611      	mov	r1, r2
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	4798      	blx	r3
  }

  return USBD_OK;
 80117de:	2300      	movs	r3, #0
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3708      	adds	r7, #8
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80117e8:	b480      	push	{r7}
 80117ea:	b083      	sub	sp, #12
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	460b      	mov	r3, r1
 80117f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	78fa      	ldrb	r2, [r7, #3]
 80117f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80117fa:	2300      	movs	r3, #0
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	370c      	adds	r7, #12
 8011800:	46bd      	mov	sp, r7
 8011802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011806:	4770      	bx	lr

08011808 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011808:	b480      	push	{r7}
 801180a:	b083      	sub	sp, #12
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2204      	movs	r2, #4
 8011820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011824:	2300      	movs	r3, #0
}
 8011826:	4618      	mov	r0, r3
 8011828:	370c      	adds	r7, #12
 801182a:	46bd      	mov	sp, r7
 801182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011830:	4770      	bx	lr

08011832 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011832:	b480      	push	{r7}
 8011834:	b083      	sub	sp, #12
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011840:	2b04      	cmp	r3, #4
 8011842:	d105      	bne.n	8011850 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011850:	2300      	movs	r3, #0
}
 8011852:	4618      	mov	r0, r3
 8011854:	370c      	adds	r7, #12
 8011856:	46bd      	mov	sp, r7
 8011858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185c:	4770      	bx	lr

0801185e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801185e:	b580      	push	{r7, lr}
 8011860:	b082      	sub	sp, #8
 8011862:	af00      	add	r7, sp, #0
 8011864:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801186c:	2b03      	cmp	r3, #3
 801186e:	d10b      	bne.n	8011888 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011876:	69db      	ldr	r3, [r3, #28]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d005      	beq.n	8011888 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011882:	69db      	ldr	r3, [r3, #28]
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011888:	2300      	movs	r3, #0
}
 801188a:	4618      	mov	r0, r3
 801188c:	3708      	adds	r7, #8
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
	...

08011894 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b084      	sub	sp, #16
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801189e:	2300      	movs	r3, #0
 80118a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80118aa:	2b40      	cmp	r3, #64	; 0x40
 80118ac:	d005      	beq.n	80118ba <USBD_StdDevReq+0x26>
 80118ae:	2b40      	cmp	r3, #64	; 0x40
 80118b0:	d84f      	bhi.n	8011952 <USBD_StdDevReq+0xbe>
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d009      	beq.n	80118ca <USBD_StdDevReq+0x36>
 80118b6:	2b20      	cmp	r3, #32
 80118b8:	d14b      	bne.n	8011952 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80118c0:	689b      	ldr	r3, [r3, #8]
 80118c2:	6839      	ldr	r1, [r7, #0]
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	4798      	blx	r3
      break;
 80118c8:	e048      	b.n	801195c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	785b      	ldrb	r3, [r3, #1]
 80118ce:	2b09      	cmp	r3, #9
 80118d0:	d839      	bhi.n	8011946 <USBD_StdDevReq+0xb2>
 80118d2:	a201      	add	r2, pc, #4	; (adr r2, 80118d8 <USBD_StdDevReq+0x44>)
 80118d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118d8:	08011929 	.word	0x08011929
 80118dc:	0801193d 	.word	0x0801193d
 80118e0:	08011947 	.word	0x08011947
 80118e4:	08011933 	.word	0x08011933
 80118e8:	08011947 	.word	0x08011947
 80118ec:	0801190b 	.word	0x0801190b
 80118f0:	08011901 	.word	0x08011901
 80118f4:	08011947 	.word	0x08011947
 80118f8:	0801191f 	.word	0x0801191f
 80118fc:	08011915 	.word	0x08011915
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011900:	6839      	ldr	r1, [r7, #0]
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f000 f9dc 	bl	8011cc0 <USBD_GetDescriptor>
          break;
 8011908:	e022      	b.n	8011950 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801190a:	6839      	ldr	r1, [r7, #0]
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f000 fb3f 	bl	8011f90 <USBD_SetAddress>
          break;
 8011912:	e01d      	b.n	8011950 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8011914:	6839      	ldr	r1, [r7, #0]
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f000 fb7e 	bl	8012018 <USBD_SetConfig>
          break;
 801191c:	e018      	b.n	8011950 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801191e:	6839      	ldr	r1, [r7, #0]
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f000 fc07 	bl	8012134 <USBD_GetConfig>
          break;
 8011926:	e013      	b.n	8011950 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011928:	6839      	ldr	r1, [r7, #0]
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f000 fc37 	bl	801219e <USBD_GetStatus>
          break;
 8011930:	e00e      	b.n	8011950 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011932:	6839      	ldr	r1, [r7, #0]
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f000 fc65 	bl	8012204 <USBD_SetFeature>
          break;
 801193a:	e009      	b.n	8011950 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801193c:	6839      	ldr	r1, [r7, #0]
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 fc74 	bl	801222c <USBD_ClrFeature>
          break;
 8011944:	e004      	b.n	8011950 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8011946:	6839      	ldr	r1, [r7, #0]
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f000 fccd 	bl	80122e8 <USBD_CtlError>
          break;
 801194e:	bf00      	nop
      }
      break;
 8011950:	e004      	b.n	801195c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8011952:	6839      	ldr	r1, [r7, #0]
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f000 fcc7 	bl	80122e8 <USBD_CtlError>
      break;
 801195a:	bf00      	nop
  }

  return ret;
 801195c:	7bfb      	ldrb	r3, [r7, #15]
}
 801195e:	4618      	mov	r0, r3
 8011960:	3710      	adds	r7, #16
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}
 8011966:	bf00      	nop

08011968 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b084      	sub	sp, #16
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011972:	2300      	movs	r3, #0
 8011974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801197e:	2b40      	cmp	r3, #64	; 0x40
 8011980:	d005      	beq.n	801198e <USBD_StdItfReq+0x26>
 8011982:	2b40      	cmp	r3, #64	; 0x40
 8011984:	d82e      	bhi.n	80119e4 <USBD_StdItfReq+0x7c>
 8011986:	2b00      	cmp	r3, #0
 8011988:	d001      	beq.n	801198e <USBD_StdItfReq+0x26>
 801198a:	2b20      	cmp	r3, #32
 801198c:	d12a      	bne.n	80119e4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011994:	3b01      	subs	r3, #1
 8011996:	2b02      	cmp	r3, #2
 8011998:	d81d      	bhi.n	80119d6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	889b      	ldrh	r3, [r3, #4]
 801199e:	b2db      	uxtb	r3, r3
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d813      	bhi.n	80119cc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119aa:	689b      	ldr	r3, [r3, #8]
 80119ac:	6839      	ldr	r1, [r7, #0]
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	4798      	blx	r3
 80119b2:	4603      	mov	r3, r0
 80119b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	88db      	ldrh	r3, [r3, #6]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d110      	bne.n	80119e0 <USBD_StdItfReq+0x78>
 80119be:	7bfb      	ldrb	r3, [r7, #15]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d10d      	bne.n	80119e0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f000 fd58 	bl	801247a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80119ca:	e009      	b.n	80119e0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80119cc:	6839      	ldr	r1, [r7, #0]
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f000 fc8a 	bl	80122e8 <USBD_CtlError>
          break;
 80119d4:	e004      	b.n	80119e0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80119d6:	6839      	ldr	r1, [r7, #0]
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f000 fc85 	bl	80122e8 <USBD_CtlError>
          break;
 80119de:	e000      	b.n	80119e2 <USBD_StdItfReq+0x7a>
          break;
 80119e0:	bf00      	nop
      }
      break;
 80119e2:	e004      	b.n	80119ee <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80119e4:	6839      	ldr	r1, [r7, #0]
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f000 fc7e 	bl	80122e8 <USBD_CtlError>
      break;
 80119ec:	bf00      	nop
  }

  return USBD_OK;
 80119ee:	2300      	movs	r3, #0
}
 80119f0:	4618      	mov	r0, r3
 80119f2:	3710      	adds	r7, #16
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}

080119f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b084      	sub	sp, #16
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011a02:	2300      	movs	r3, #0
 8011a04:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	889b      	ldrh	r3, [r3, #4]
 8011a0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011a14:	2b40      	cmp	r3, #64	; 0x40
 8011a16:	d007      	beq.n	8011a28 <USBD_StdEPReq+0x30>
 8011a18:	2b40      	cmp	r3, #64	; 0x40
 8011a1a:	f200 8146 	bhi.w	8011caa <USBD_StdEPReq+0x2b2>
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d00a      	beq.n	8011a38 <USBD_StdEPReq+0x40>
 8011a22:	2b20      	cmp	r3, #32
 8011a24:	f040 8141 	bne.w	8011caa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011a2e:	689b      	ldr	r3, [r3, #8]
 8011a30:	6839      	ldr	r1, [r7, #0]
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	4798      	blx	r3
      break;
 8011a36:	e13d      	b.n	8011cb4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011a40:	2b20      	cmp	r3, #32
 8011a42:	d10a      	bne.n	8011a5a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	6839      	ldr	r1, [r7, #0]
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	4798      	blx	r3
 8011a52:	4603      	mov	r3, r0
 8011a54:	73fb      	strb	r3, [r7, #15]

        return ret;
 8011a56:	7bfb      	ldrb	r3, [r7, #15]
 8011a58:	e12d      	b.n	8011cb6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	785b      	ldrb	r3, [r3, #1]
 8011a5e:	2b03      	cmp	r3, #3
 8011a60:	d007      	beq.n	8011a72 <USBD_StdEPReq+0x7a>
 8011a62:	2b03      	cmp	r3, #3
 8011a64:	f300 811b 	bgt.w	8011c9e <USBD_StdEPReq+0x2a6>
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d072      	beq.n	8011b52 <USBD_StdEPReq+0x15a>
 8011a6c:	2b01      	cmp	r3, #1
 8011a6e:	d03a      	beq.n	8011ae6 <USBD_StdEPReq+0xee>
 8011a70:	e115      	b.n	8011c9e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a78:	2b02      	cmp	r3, #2
 8011a7a:	d002      	beq.n	8011a82 <USBD_StdEPReq+0x8a>
 8011a7c:	2b03      	cmp	r3, #3
 8011a7e:	d015      	beq.n	8011aac <USBD_StdEPReq+0xb4>
 8011a80:	e02b      	b.n	8011ada <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a82:	7bbb      	ldrb	r3, [r7, #14]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d00c      	beq.n	8011aa2 <USBD_StdEPReq+0xaa>
 8011a88:	7bbb      	ldrb	r3, [r7, #14]
 8011a8a:	2b80      	cmp	r3, #128	; 0x80
 8011a8c:	d009      	beq.n	8011aa2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8011a8e:	7bbb      	ldrb	r3, [r7, #14]
 8011a90:	4619      	mov	r1, r3
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f003 fe50 	bl	8015738 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8011a98:	2180      	movs	r1, #128	; 0x80
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f003 fe4c 	bl	8015738 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011aa0:	e020      	b.n	8011ae4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8011aa2:	6839      	ldr	r1, [r7, #0]
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f000 fc1f 	bl	80122e8 <USBD_CtlError>
              break;
 8011aaa:	e01b      	b.n	8011ae4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	885b      	ldrh	r3, [r3, #2]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d10e      	bne.n	8011ad2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8011ab4:	7bbb      	ldrb	r3, [r7, #14]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d00b      	beq.n	8011ad2 <USBD_StdEPReq+0xda>
 8011aba:	7bbb      	ldrb	r3, [r7, #14]
 8011abc:	2b80      	cmp	r3, #128	; 0x80
 8011abe:	d008      	beq.n	8011ad2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	88db      	ldrh	r3, [r3, #6]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d104      	bne.n	8011ad2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8011ac8:	7bbb      	ldrb	r3, [r7, #14]
 8011aca:	4619      	mov	r1, r3
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	f003 fe33 	bl	8015738 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	f000 fcd1 	bl	801247a <USBD_CtlSendStatus>

              break;
 8011ad8:	e004      	b.n	8011ae4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8011ada:	6839      	ldr	r1, [r7, #0]
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f000 fc03 	bl	80122e8 <USBD_CtlError>
              break;
 8011ae2:	bf00      	nop
          }
          break;
 8011ae4:	e0e0      	b.n	8011ca8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011aec:	2b02      	cmp	r3, #2
 8011aee:	d002      	beq.n	8011af6 <USBD_StdEPReq+0xfe>
 8011af0:	2b03      	cmp	r3, #3
 8011af2:	d015      	beq.n	8011b20 <USBD_StdEPReq+0x128>
 8011af4:	e026      	b.n	8011b44 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011af6:	7bbb      	ldrb	r3, [r7, #14]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d00c      	beq.n	8011b16 <USBD_StdEPReq+0x11e>
 8011afc:	7bbb      	ldrb	r3, [r7, #14]
 8011afe:	2b80      	cmp	r3, #128	; 0x80
 8011b00:	d009      	beq.n	8011b16 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8011b02:	7bbb      	ldrb	r3, [r7, #14]
 8011b04:	4619      	mov	r1, r3
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	f003 fe16 	bl	8015738 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8011b0c:	2180      	movs	r1, #128	; 0x80
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f003 fe12 	bl	8015738 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011b14:	e01c      	b.n	8011b50 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8011b16:	6839      	ldr	r1, [r7, #0]
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f000 fbe5 	bl	80122e8 <USBD_CtlError>
              break;
 8011b1e:	e017      	b.n	8011b50 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	885b      	ldrh	r3, [r3, #2]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d112      	bne.n	8011b4e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011b28:	7bbb      	ldrb	r3, [r7, #14]
 8011b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d004      	beq.n	8011b3c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8011b32:	7bbb      	ldrb	r3, [r7, #14]
 8011b34:	4619      	mov	r1, r3
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f003 fe1d 	bl	8015776 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f000 fc9c 	bl	801247a <USBD_CtlSendStatus>
              }
              break;
 8011b42:	e004      	b.n	8011b4e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8011b44:	6839      	ldr	r1, [r7, #0]
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	f000 fbce 	bl	80122e8 <USBD_CtlError>
              break;
 8011b4c:	e000      	b.n	8011b50 <USBD_StdEPReq+0x158>
              break;
 8011b4e:	bf00      	nop
          }
          break;
 8011b50:	e0aa      	b.n	8011ca8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b58:	2b02      	cmp	r3, #2
 8011b5a:	d002      	beq.n	8011b62 <USBD_StdEPReq+0x16a>
 8011b5c:	2b03      	cmp	r3, #3
 8011b5e:	d032      	beq.n	8011bc6 <USBD_StdEPReq+0x1ce>
 8011b60:	e097      	b.n	8011c92 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011b62:	7bbb      	ldrb	r3, [r7, #14]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d007      	beq.n	8011b78 <USBD_StdEPReq+0x180>
 8011b68:	7bbb      	ldrb	r3, [r7, #14]
 8011b6a:	2b80      	cmp	r3, #128	; 0x80
 8011b6c:	d004      	beq.n	8011b78 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8011b6e:	6839      	ldr	r1, [r7, #0]
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f000 fbb9 	bl	80122e8 <USBD_CtlError>
                break;
 8011b76:	e091      	b.n	8011c9c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	da0b      	bge.n	8011b98 <USBD_StdEPReq+0x1a0>
 8011b80:	7bbb      	ldrb	r3, [r7, #14]
 8011b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b86:	4613      	mov	r3, r2
 8011b88:	009b      	lsls	r3, r3, #2
 8011b8a:	4413      	add	r3, r2
 8011b8c:	009b      	lsls	r3, r3, #2
 8011b8e:	3310      	adds	r3, #16
 8011b90:	687a      	ldr	r2, [r7, #4]
 8011b92:	4413      	add	r3, r2
 8011b94:	3304      	adds	r3, #4
 8011b96:	e00b      	b.n	8011bb0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011b98:	7bbb      	ldrb	r3, [r7, #14]
 8011b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b9e:	4613      	mov	r3, r2
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	4413      	add	r3, r2
 8011ba4:	009b      	lsls	r3, r3, #2
 8011ba6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011baa:	687a      	ldr	r2, [r7, #4]
 8011bac:	4413      	add	r3, r2
 8011bae:	3304      	adds	r3, #4
 8011bb0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	2202      	movs	r2, #2
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f000 fbfd 	bl	80123be <USBD_CtlSendData>
              break;
 8011bc4:	e06a      	b.n	8011c9c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011bc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	da11      	bge.n	8011bf2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011bce:	7bbb      	ldrb	r3, [r7, #14]
 8011bd0:	f003 020f 	and.w	r2, r3, #15
 8011bd4:	6879      	ldr	r1, [r7, #4]
 8011bd6:	4613      	mov	r3, r2
 8011bd8:	009b      	lsls	r3, r3, #2
 8011bda:	4413      	add	r3, r2
 8011bdc:	009b      	lsls	r3, r3, #2
 8011bde:	440b      	add	r3, r1
 8011be0:	3318      	adds	r3, #24
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d117      	bne.n	8011c18 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8011be8:	6839      	ldr	r1, [r7, #0]
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f000 fb7c 	bl	80122e8 <USBD_CtlError>
                  break;
 8011bf0:	e054      	b.n	8011c9c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011bf2:	7bbb      	ldrb	r3, [r7, #14]
 8011bf4:	f003 020f 	and.w	r2, r3, #15
 8011bf8:	6879      	ldr	r1, [r7, #4]
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	009b      	lsls	r3, r3, #2
 8011bfe:	4413      	add	r3, r2
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	440b      	add	r3, r1
 8011c04:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d104      	bne.n	8011c18 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8011c0e:	6839      	ldr	r1, [r7, #0]
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f000 fb69 	bl	80122e8 <USBD_CtlError>
                  break;
 8011c16:	e041      	b.n	8011c9c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	da0b      	bge.n	8011c38 <USBD_StdEPReq+0x240>
 8011c20:	7bbb      	ldrb	r3, [r7, #14]
 8011c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c26:	4613      	mov	r3, r2
 8011c28:	009b      	lsls	r3, r3, #2
 8011c2a:	4413      	add	r3, r2
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	3310      	adds	r3, #16
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	4413      	add	r3, r2
 8011c34:	3304      	adds	r3, #4
 8011c36:	e00b      	b.n	8011c50 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011c38:	7bbb      	ldrb	r3, [r7, #14]
 8011c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c3e:	4613      	mov	r3, r2
 8011c40:	009b      	lsls	r3, r3, #2
 8011c42:	4413      	add	r3, r2
 8011c44:	009b      	lsls	r3, r3, #2
 8011c46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011c4a:	687a      	ldr	r2, [r7, #4]
 8011c4c:	4413      	add	r3, r2
 8011c4e:	3304      	adds	r3, #4
 8011c50:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011c52:	7bbb      	ldrb	r3, [r7, #14]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d002      	beq.n	8011c5e <USBD_StdEPReq+0x266>
 8011c58:	7bbb      	ldrb	r3, [r7, #14]
 8011c5a:	2b80      	cmp	r3, #128	; 0x80
 8011c5c:	d103      	bne.n	8011c66 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	2200      	movs	r2, #0
 8011c62:	601a      	str	r2, [r3, #0]
 8011c64:	e00e      	b.n	8011c84 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8011c66:	7bbb      	ldrb	r3, [r7, #14]
 8011c68:	4619      	mov	r1, r3
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f003 fda2 	bl	80157b4 <USBD_LL_IsStallEP>
 8011c70:	4603      	mov	r3, r0
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d003      	beq.n	8011c7e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	2201      	movs	r2, #1
 8011c7a:	601a      	str	r2, [r3, #0]
 8011c7c:	e002      	b.n	8011c84 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	2200      	movs	r2, #0
 8011c82:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	2202      	movs	r2, #2
 8011c88:	4619      	mov	r1, r3
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f000 fb97 	bl	80123be <USBD_CtlSendData>
              break;
 8011c90:	e004      	b.n	8011c9c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8011c92:	6839      	ldr	r1, [r7, #0]
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f000 fb27 	bl	80122e8 <USBD_CtlError>
              break;
 8011c9a:	bf00      	nop
          }
          break;
 8011c9c:	e004      	b.n	8011ca8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8011c9e:	6839      	ldr	r1, [r7, #0]
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	f000 fb21 	bl	80122e8 <USBD_CtlError>
          break;
 8011ca6:	bf00      	nop
      }
      break;
 8011ca8:	e004      	b.n	8011cb4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8011caa:	6839      	ldr	r1, [r7, #0]
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f000 fb1b 	bl	80122e8 <USBD_CtlError>
      break;
 8011cb2:	bf00      	nop
  }

  return ret;
 8011cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
	...

08011cc0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	885b      	ldrh	r3, [r3, #2]
 8011cda:	0a1b      	lsrs	r3, r3, #8
 8011cdc:	b29b      	uxth	r3, r3
 8011cde:	3b01      	subs	r3, #1
 8011ce0:	2b06      	cmp	r3, #6
 8011ce2:	f200 8128 	bhi.w	8011f36 <USBD_GetDescriptor+0x276>
 8011ce6:	a201      	add	r2, pc, #4	; (adr r2, 8011cec <USBD_GetDescriptor+0x2c>)
 8011ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cec:	08011d09 	.word	0x08011d09
 8011cf0:	08011d21 	.word	0x08011d21
 8011cf4:	08011d61 	.word	0x08011d61
 8011cf8:	08011f37 	.word	0x08011f37
 8011cfc:	08011f37 	.word	0x08011f37
 8011d00:	08011ed7 	.word	0x08011ed7
 8011d04:	08011f03 	.word	0x08011f03
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	7c12      	ldrb	r2, [r2, #16]
 8011d14:	f107 0108 	add.w	r1, r7, #8
 8011d18:	4610      	mov	r0, r2
 8011d1a:	4798      	blx	r3
 8011d1c:	60f8      	str	r0, [r7, #12]
      break;
 8011d1e:	e112      	b.n	8011f46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	7c1b      	ldrb	r3, [r3, #16]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d10d      	bne.n	8011d44 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d30:	f107 0208 	add.w	r2, r7, #8
 8011d34:	4610      	mov	r0, r2
 8011d36:	4798      	blx	r3
 8011d38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	3301      	adds	r3, #1
 8011d3e:	2202      	movs	r2, #2
 8011d40:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011d42:	e100      	b.n	8011f46 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d4c:	f107 0208 	add.w	r2, r7, #8
 8011d50:	4610      	mov	r0, r2
 8011d52:	4798      	blx	r3
 8011d54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	3301      	adds	r3, #1
 8011d5a:	2202      	movs	r2, #2
 8011d5c:	701a      	strb	r2, [r3, #0]
      break;
 8011d5e:	e0f2      	b.n	8011f46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	885b      	ldrh	r3, [r3, #2]
 8011d64:	b2db      	uxtb	r3, r3
 8011d66:	2b05      	cmp	r3, #5
 8011d68:	f200 80ac 	bhi.w	8011ec4 <USBD_GetDescriptor+0x204>
 8011d6c:	a201      	add	r2, pc, #4	; (adr r2, 8011d74 <USBD_GetDescriptor+0xb4>)
 8011d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d72:	bf00      	nop
 8011d74:	08011d8d 	.word	0x08011d8d
 8011d78:	08011dc1 	.word	0x08011dc1
 8011d7c:	08011df5 	.word	0x08011df5
 8011d80:	08011e29 	.word	0x08011e29
 8011d84:	08011e5d 	.word	0x08011e5d
 8011d88:	08011e91 	.word	0x08011e91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d00b      	beq.n	8011db0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	7c12      	ldrb	r2, [r2, #16]
 8011da4:	f107 0108 	add.w	r1, r7, #8
 8011da8:	4610      	mov	r0, r2
 8011daa:	4798      	blx	r3
 8011dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011dae:	e091      	b.n	8011ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011db0:	6839      	ldr	r1, [r7, #0]
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f000 fa98 	bl	80122e8 <USBD_CtlError>
            err++;
 8011db8:	7afb      	ldrb	r3, [r7, #11]
 8011dba:	3301      	adds	r3, #1
 8011dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8011dbe:	e089      	b.n	8011ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011dc6:	689b      	ldr	r3, [r3, #8]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d00b      	beq.n	8011de4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011dd2:	689b      	ldr	r3, [r3, #8]
 8011dd4:	687a      	ldr	r2, [r7, #4]
 8011dd6:	7c12      	ldrb	r2, [r2, #16]
 8011dd8:	f107 0108 	add.w	r1, r7, #8
 8011ddc:	4610      	mov	r0, r2
 8011dde:	4798      	blx	r3
 8011de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011de2:	e077      	b.n	8011ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011de4:	6839      	ldr	r1, [r7, #0]
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f000 fa7e 	bl	80122e8 <USBD_CtlError>
            err++;
 8011dec:	7afb      	ldrb	r3, [r7, #11]
 8011dee:	3301      	adds	r3, #1
 8011df0:	72fb      	strb	r3, [r7, #11]
          break;
 8011df2:	e06f      	b.n	8011ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011dfa:	68db      	ldr	r3, [r3, #12]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d00b      	beq.n	8011e18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011e06:	68db      	ldr	r3, [r3, #12]
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	7c12      	ldrb	r2, [r2, #16]
 8011e0c:	f107 0108 	add.w	r1, r7, #8
 8011e10:	4610      	mov	r0, r2
 8011e12:	4798      	blx	r3
 8011e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011e16:	e05d      	b.n	8011ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011e18:	6839      	ldr	r1, [r7, #0]
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f000 fa64 	bl	80122e8 <USBD_CtlError>
            err++;
 8011e20:	7afb      	ldrb	r3, [r7, #11]
 8011e22:	3301      	adds	r3, #1
 8011e24:	72fb      	strb	r3, [r7, #11]
          break;
 8011e26:	e055      	b.n	8011ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011e2e:	691b      	ldr	r3, [r3, #16]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d00b      	beq.n	8011e4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011e3a:	691b      	ldr	r3, [r3, #16]
 8011e3c:	687a      	ldr	r2, [r7, #4]
 8011e3e:	7c12      	ldrb	r2, [r2, #16]
 8011e40:	f107 0108 	add.w	r1, r7, #8
 8011e44:	4610      	mov	r0, r2
 8011e46:	4798      	blx	r3
 8011e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011e4a:	e043      	b.n	8011ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011e4c:	6839      	ldr	r1, [r7, #0]
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f000 fa4a 	bl	80122e8 <USBD_CtlError>
            err++;
 8011e54:	7afb      	ldrb	r3, [r7, #11]
 8011e56:	3301      	adds	r3, #1
 8011e58:	72fb      	strb	r3, [r7, #11]
          break;
 8011e5a:	e03b      	b.n	8011ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011e62:	695b      	ldr	r3, [r3, #20]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d00b      	beq.n	8011e80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011e6e:	695b      	ldr	r3, [r3, #20]
 8011e70:	687a      	ldr	r2, [r7, #4]
 8011e72:	7c12      	ldrb	r2, [r2, #16]
 8011e74:	f107 0108 	add.w	r1, r7, #8
 8011e78:	4610      	mov	r0, r2
 8011e7a:	4798      	blx	r3
 8011e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011e7e:	e029      	b.n	8011ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011e80:	6839      	ldr	r1, [r7, #0]
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f000 fa30 	bl	80122e8 <USBD_CtlError>
            err++;
 8011e88:	7afb      	ldrb	r3, [r7, #11]
 8011e8a:	3301      	adds	r3, #1
 8011e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8011e8e:	e021      	b.n	8011ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011e96:	699b      	ldr	r3, [r3, #24]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d00b      	beq.n	8011eb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011ea2:	699b      	ldr	r3, [r3, #24]
 8011ea4:	687a      	ldr	r2, [r7, #4]
 8011ea6:	7c12      	ldrb	r2, [r2, #16]
 8011ea8:	f107 0108 	add.w	r1, r7, #8
 8011eac:	4610      	mov	r0, r2
 8011eae:	4798      	blx	r3
 8011eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011eb2:	e00f      	b.n	8011ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011eb4:	6839      	ldr	r1, [r7, #0]
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f000 fa16 	bl	80122e8 <USBD_CtlError>
            err++;
 8011ebc:	7afb      	ldrb	r3, [r7, #11]
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8011ec2:	e007      	b.n	8011ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8011ec4:	6839      	ldr	r1, [r7, #0]
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f000 fa0e 	bl	80122e8 <USBD_CtlError>
          err++;
 8011ecc:	7afb      	ldrb	r3, [r7, #11]
 8011ece:	3301      	adds	r3, #1
 8011ed0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8011ed2:	e038      	b.n	8011f46 <USBD_GetDescriptor+0x286>
 8011ed4:	e037      	b.n	8011f46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	7c1b      	ldrb	r3, [r3, #16]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d109      	bne.n	8011ef2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ee6:	f107 0208 	add.w	r2, r7, #8
 8011eea:	4610      	mov	r0, r2
 8011eec:	4798      	blx	r3
 8011eee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ef0:	e029      	b.n	8011f46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011ef2:	6839      	ldr	r1, [r7, #0]
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f000 f9f7 	bl	80122e8 <USBD_CtlError>
        err++;
 8011efa:	7afb      	ldrb	r3, [r7, #11]
 8011efc:	3301      	adds	r3, #1
 8011efe:	72fb      	strb	r3, [r7, #11]
      break;
 8011f00:	e021      	b.n	8011f46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	7c1b      	ldrb	r3, [r3, #16]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d10d      	bne.n	8011f26 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f12:	f107 0208 	add.w	r2, r7, #8
 8011f16:	4610      	mov	r0, r2
 8011f18:	4798      	blx	r3
 8011f1a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	3301      	adds	r3, #1
 8011f20:	2207      	movs	r2, #7
 8011f22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f24:	e00f      	b.n	8011f46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011f26:	6839      	ldr	r1, [r7, #0]
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f000 f9dd 	bl	80122e8 <USBD_CtlError>
        err++;
 8011f2e:	7afb      	ldrb	r3, [r7, #11]
 8011f30:	3301      	adds	r3, #1
 8011f32:	72fb      	strb	r3, [r7, #11]
      break;
 8011f34:	e007      	b.n	8011f46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011f36:	6839      	ldr	r1, [r7, #0]
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f000 f9d5 	bl	80122e8 <USBD_CtlError>
      err++;
 8011f3e:	7afb      	ldrb	r3, [r7, #11]
 8011f40:	3301      	adds	r3, #1
 8011f42:	72fb      	strb	r3, [r7, #11]
      break;
 8011f44:	bf00      	nop
  }

  if (err != 0U)
 8011f46:	7afb      	ldrb	r3, [r7, #11]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d11c      	bne.n	8011f86 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8011f4c:	893b      	ldrh	r3, [r7, #8]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d011      	beq.n	8011f76 <USBD_GetDescriptor+0x2b6>
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	88db      	ldrh	r3, [r3, #6]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d00d      	beq.n	8011f76 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	88da      	ldrh	r2, [r3, #6]
 8011f5e:	893b      	ldrh	r3, [r7, #8]
 8011f60:	4293      	cmp	r3, r2
 8011f62:	bf28      	it	cs
 8011f64:	4613      	movcs	r3, r2
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011f6a:	893b      	ldrh	r3, [r7, #8]
 8011f6c:	461a      	mov	r2, r3
 8011f6e:	68f9      	ldr	r1, [r7, #12]
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f000 fa24 	bl	80123be <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	88db      	ldrh	r3, [r3, #6]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d104      	bne.n	8011f88 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f000 fa7b 	bl	801247a <USBD_CtlSendStatus>
 8011f84:	e000      	b.n	8011f88 <USBD_GetDescriptor+0x2c8>
    return;
 8011f86:	bf00      	nop
    }
  }
}
 8011f88:	3710      	adds	r7, #16
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	bf00      	nop

08011f90 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b084      	sub	sp, #16
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	889b      	ldrh	r3, [r3, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d130      	bne.n	8012004 <USBD_SetAddress+0x74>
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	88db      	ldrh	r3, [r3, #6]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d12c      	bne.n	8012004 <USBD_SetAddress+0x74>
 8011faa:	683b      	ldr	r3, [r7, #0]
 8011fac:	885b      	ldrh	r3, [r3, #2]
 8011fae:	2b7f      	cmp	r3, #127	; 0x7f
 8011fb0:	d828      	bhi.n	8012004 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	885b      	ldrh	r3, [r3, #2]
 8011fb6:	b2db      	uxtb	r3, r3
 8011fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011fbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fc4:	2b03      	cmp	r3, #3
 8011fc6:	d104      	bne.n	8011fd2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011fc8:	6839      	ldr	r1, [r7, #0]
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 f98c 	bl	80122e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fd0:	e01d      	b.n	801200e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	7bfa      	ldrb	r2, [r7, #15]
 8011fd6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011fda:	7bfb      	ldrb	r3, [r7, #15]
 8011fdc:	4619      	mov	r1, r3
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	f003 fc15 	bl	801580e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8011fe4:	6878      	ldr	r0, [r7, #4]
 8011fe6:	f000 fa48 	bl	801247a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011fea:	7bfb      	ldrb	r3, [r7, #15]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d004      	beq.n	8011ffa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2202      	movs	r2, #2
 8011ff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ff8:	e009      	b.n	801200e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2201      	movs	r2, #1
 8011ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012002:	e004      	b.n	801200e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012004:	6839      	ldr	r1, [r7, #0]
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 f96e 	bl	80122e8 <USBD_CtlError>
  }
}
 801200c:	bf00      	nop
 801200e:	bf00      	nop
 8012010:	3710      	adds	r7, #16
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}
	...

08012018 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	885b      	ldrh	r3, [r3, #2]
 8012026:	b2da      	uxtb	r2, r3
 8012028:	4b41      	ldr	r3, [pc, #260]	; (8012130 <USBD_SetConfig+0x118>)
 801202a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801202c:	4b40      	ldr	r3, [pc, #256]	; (8012130 <USBD_SetConfig+0x118>)
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	2b01      	cmp	r3, #1
 8012032:	d904      	bls.n	801203e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8012034:	6839      	ldr	r1, [r7, #0]
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f000 f956 	bl	80122e8 <USBD_CtlError>
 801203c:	e075      	b.n	801212a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012044:	2b02      	cmp	r3, #2
 8012046:	d002      	beq.n	801204e <USBD_SetConfig+0x36>
 8012048:	2b03      	cmp	r3, #3
 801204a:	d023      	beq.n	8012094 <USBD_SetConfig+0x7c>
 801204c:	e062      	b.n	8012114 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801204e:	4b38      	ldr	r3, [pc, #224]	; (8012130 <USBD_SetConfig+0x118>)
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d01a      	beq.n	801208c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8012056:	4b36      	ldr	r3, [pc, #216]	; (8012130 <USBD_SetConfig+0x118>)
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	461a      	mov	r2, r3
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2203      	movs	r2, #3
 8012064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8012068:	4b31      	ldr	r3, [pc, #196]	; (8012130 <USBD_SetConfig+0x118>)
 801206a:	781b      	ldrb	r3, [r3, #0]
 801206c:	4619      	mov	r1, r3
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f7ff f9e4 	bl	801143c <USBD_SetClassConfig>
 8012074:	4603      	mov	r3, r0
 8012076:	2b02      	cmp	r3, #2
 8012078:	d104      	bne.n	8012084 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801207a:	6839      	ldr	r1, [r7, #0]
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f000 f933 	bl	80122e8 <USBD_CtlError>
            return;
 8012082:	e052      	b.n	801212a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f000 f9f8 	bl	801247a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801208a:	e04e      	b.n	801212a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f000 f9f4 	bl	801247a <USBD_CtlSendStatus>
        break;
 8012092:	e04a      	b.n	801212a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8012094:	4b26      	ldr	r3, [pc, #152]	; (8012130 <USBD_SetConfig+0x118>)
 8012096:	781b      	ldrb	r3, [r3, #0]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d112      	bne.n	80120c2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2202      	movs	r2, #2
 80120a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80120a4:	4b22      	ldr	r3, [pc, #136]	; (8012130 <USBD_SetConfig+0x118>)
 80120a6:	781b      	ldrb	r3, [r3, #0]
 80120a8:	461a      	mov	r2, r3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80120ae:	4b20      	ldr	r3, [pc, #128]	; (8012130 <USBD_SetConfig+0x118>)
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	4619      	mov	r1, r3
 80120b4:	6878      	ldr	r0, [r7, #4]
 80120b6:	f7ff f9e0 	bl	801147a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f000 f9dd 	bl	801247a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80120c0:	e033      	b.n	801212a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80120c2:	4b1b      	ldr	r3, [pc, #108]	; (8012130 <USBD_SetConfig+0x118>)
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	461a      	mov	r2, r3
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d01d      	beq.n	801210c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	685b      	ldr	r3, [r3, #4]
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	4619      	mov	r1, r3
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f7ff f9ce 	bl	801147a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80120de:	4b14      	ldr	r3, [pc, #80]	; (8012130 <USBD_SetConfig+0x118>)
 80120e0:	781b      	ldrb	r3, [r3, #0]
 80120e2:	461a      	mov	r2, r3
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80120e8:	4b11      	ldr	r3, [pc, #68]	; (8012130 <USBD_SetConfig+0x118>)
 80120ea:	781b      	ldrb	r3, [r3, #0]
 80120ec:	4619      	mov	r1, r3
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f7ff f9a4 	bl	801143c <USBD_SetClassConfig>
 80120f4:	4603      	mov	r3, r0
 80120f6:	2b02      	cmp	r3, #2
 80120f8:	d104      	bne.n	8012104 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80120fa:	6839      	ldr	r1, [r7, #0]
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f000 f8f3 	bl	80122e8 <USBD_CtlError>
            return;
 8012102:	e012      	b.n	801212a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f000 f9b8 	bl	801247a <USBD_CtlSendStatus>
        break;
 801210a:	e00e      	b.n	801212a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f000 f9b4 	bl	801247a <USBD_CtlSendStatus>
        break;
 8012112:	e00a      	b.n	801212a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8012114:	6839      	ldr	r1, [r7, #0]
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f000 f8e6 	bl	80122e8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801211c:	4b04      	ldr	r3, [pc, #16]	; (8012130 <USBD_SetConfig+0x118>)
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	4619      	mov	r1, r3
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f7ff f9a9 	bl	801147a <USBD_ClrClassConfig>
        break;
 8012128:	bf00      	nop
    }
  }
}
 801212a:	3708      	adds	r7, #8
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}
 8012130:	200026ac 	.word	0x200026ac

08012134 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
 801213c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	88db      	ldrh	r3, [r3, #6]
 8012142:	2b01      	cmp	r3, #1
 8012144:	d004      	beq.n	8012150 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012146:	6839      	ldr	r1, [r7, #0]
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f000 f8cd 	bl	80122e8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801214e:	e022      	b.n	8012196 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012156:	2b02      	cmp	r3, #2
 8012158:	dc02      	bgt.n	8012160 <USBD_GetConfig+0x2c>
 801215a:	2b00      	cmp	r3, #0
 801215c:	dc03      	bgt.n	8012166 <USBD_GetConfig+0x32>
 801215e:	e015      	b.n	801218c <USBD_GetConfig+0x58>
 8012160:	2b03      	cmp	r3, #3
 8012162:	d00b      	beq.n	801217c <USBD_GetConfig+0x48>
 8012164:	e012      	b.n	801218c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2200      	movs	r2, #0
 801216a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	3308      	adds	r3, #8
 8012170:	2201      	movs	r2, #1
 8012172:	4619      	mov	r1, r3
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f000 f922 	bl	80123be <USBD_CtlSendData>
        break;
 801217a:	e00c      	b.n	8012196 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	3304      	adds	r3, #4
 8012180:	2201      	movs	r2, #1
 8012182:	4619      	mov	r1, r3
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f000 f91a 	bl	80123be <USBD_CtlSendData>
        break;
 801218a:	e004      	b.n	8012196 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 801218c:	6839      	ldr	r1, [r7, #0]
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f000 f8aa 	bl	80122e8 <USBD_CtlError>
        break;
 8012194:	bf00      	nop
}
 8012196:	bf00      	nop
 8012198:	3708      	adds	r7, #8
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}

0801219e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801219e:	b580      	push	{r7, lr}
 80121a0:	b082      	sub	sp, #8
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
 80121a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121ae:	3b01      	subs	r3, #1
 80121b0:	2b02      	cmp	r3, #2
 80121b2:	d81e      	bhi.n	80121f2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	88db      	ldrh	r3, [r3, #6]
 80121b8:	2b02      	cmp	r3, #2
 80121ba:	d004      	beq.n	80121c6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80121bc:	6839      	ldr	r1, [r7, #0]
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f000 f892 	bl	80122e8 <USBD_CtlError>
        break;
 80121c4:	e01a      	b.n	80121fc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	2201      	movs	r2, #1
 80121ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d005      	beq.n	80121e2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	68db      	ldr	r3, [r3, #12]
 80121da:	f043 0202 	orr.w	r2, r3, #2
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	330c      	adds	r3, #12
 80121e6:	2202      	movs	r2, #2
 80121e8:	4619      	mov	r1, r3
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f000 f8e7 	bl	80123be <USBD_CtlSendData>
      break;
 80121f0:	e004      	b.n	80121fc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80121f2:	6839      	ldr	r1, [r7, #0]
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f000 f877 	bl	80122e8 <USBD_CtlError>
      break;
 80121fa:	bf00      	nop
  }
}
 80121fc:	bf00      	nop
 80121fe:	3708      	adds	r7, #8
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}

08012204 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	885b      	ldrh	r3, [r3, #2]
 8012212:	2b01      	cmp	r3, #1
 8012214:	d106      	bne.n	8012224 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2201      	movs	r2, #1
 801221a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f000 f92b 	bl	801247a <USBD_CtlSendStatus>
  }
}
 8012224:	bf00      	nop
 8012226:	3708      	adds	r7, #8
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}

0801222c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b082      	sub	sp, #8
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801223c:	3b01      	subs	r3, #1
 801223e:	2b02      	cmp	r3, #2
 8012240:	d80b      	bhi.n	801225a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	885b      	ldrh	r3, [r3, #2]
 8012246:	2b01      	cmp	r3, #1
 8012248:	d10c      	bne.n	8012264 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2200      	movs	r2, #0
 801224e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f000 f911 	bl	801247a <USBD_CtlSendStatus>
      }
      break;
 8012258:	e004      	b.n	8012264 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801225a:	6839      	ldr	r1, [r7, #0]
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f000 f843 	bl	80122e8 <USBD_CtlError>
      break;
 8012262:	e000      	b.n	8012266 <USBD_ClrFeature+0x3a>
      break;
 8012264:	bf00      	nop
  }
}
 8012266:	bf00      	nop
 8012268:	3708      	adds	r7, #8
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}

0801226e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801226e:	b480      	push	{r7}
 8012270:	b083      	sub	sp, #12
 8012272:	af00      	add	r7, sp, #0
 8012274:	6078      	str	r0, [r7, #4]
 8012276:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	781a      	ldrb	r2, [r3, #0]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	785a      	ldrb	r2, [r3, #1]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	3302      	adds	r3, #2
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	b29a      	uxth	r2, r3
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	3303      	adds	r3, #3
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	b29b      	uxth	r3, r3
 8012298:	021b      	lsls	r3, r3, #8
 801229a:	b29b      	uxth	r3, r3
 801229c:	4413      	add	r3, r2
 801229e:	b29a      	uxth	r2, r3
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	3304      	adds	r3, #4
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	b29a      	uxth	r2, r3
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	3305      	adds	r3, #5
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	021b      	lsls	r3, r3, #8
 80122b6:	b29b      	uxth	r3, r3
 80122b8:	4413      	add	r3, r2
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	3306      	adds	r3, #6
 80122c4:	781b      	ldrb	r3, [r3, #0]
 80122c6:	b29a      	uxth	r2, r3
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	3307      	adds	r3, #7
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	b29b      	uxth	r3, r3
 80122d0:	021b      	lsls	r3, r3, #8
 80122d2:	b29b      	uxth	r3, r3
 80122d4:	4413      	add	r3, r2
 80122d6:	b29a      	uxth	r2, r3
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	80da      	strh	r2, [r3, #6]

}
 80122dc:	bf00      	nop
 80122de:	370c      	adds	r7, #12
 80122e0:	46bd      	mov	sp, r7
 80122e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e6:	4770      	bx	lr

080122e8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80122f2:	2180      	movs	r1, #128	; 0x80
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f003 fa1f 	bl	8015738 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80122fa:	2100      	movs	r1, #0
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f003 fa1b 	bl	8015738 <USBD_LL_StallEP>
}
 8012302:	bf00      	nop
 8012304:	3708      	adds	r7, #8
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801230a:	b580      	push	{r7, lr}
 801230c:	b086      	sub	sp, #24
 801230e:	af00      	add	r7, sp, #0
 8012310:	60f8      	str	r0, [r7, #12]
 8012312:	60b9      	str	r1, [r7, #8]
 8012314:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012316:	2300      	movs	r3, #0
 8012318:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d032      	beq.n	8012386 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8012320:	68f8      	ldr	r0, [r7, #12]
 8012322:	f000 f834 	bl	801238e <USBD_GetLen>
 8012326:	4603      	mov	r3, r0
 8012328:	3301      	adds	r3, #1
 801232a:	b29b      	uxth	r3, r3
 801232c:	005b      	lsls	r3, r3, #1
 801232e:	b29a      	uxth	r2, r3
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8012334:	7dfb      	ldrb	r3, [r7, #23]
 8012336:	1c5a      	adds	r2, r3, #1
 8012338:	75fa      	strb	r2, [r7, #23]
 801233a:	461a      	mov	r2, r3
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	4413      	add	r3, r2
 8012340:	687a      	ldr	r2, [r7, #4]
 8012342:	7812      	ldrb	r2, [r2, #0]
 8012344:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8012346:	7dfb      	ldrb	r3, [r7, #23]
 8012348:	1c5a      	adds	r2, r3, #1
 801234a:	75fa      	strb	r2, [r7, #23]
 801234c:	461a      	mov	r2, r3
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	4413      	add	r3, r2
 8012352:	2203      	movs	r2, #3
 8012354:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8012356:	e012      	b.n	801237e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	1c5a      	adds	r2, r3, #1
 801235c:	60fa      	str	r2, [r7, #12]
 801235e:	7dfa      	ldrb	r2, [r7, #23]
 8012360:	1c51      	adds	r1, r2, #1
 8012362:	75f9      	strb	r1, [r7, #23]
 8012364:	4611      	mov	r1, r2
 8012366:	68ba      	ldr	r2, [r7, #8]
 8012368:	440a      	add	r2, r1
 801236a:	781b      	ldrb	r3, [r3, #0]
 801236c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801236e:	7dfb      	ldrb	r3, [r7, #23]
 8012370:	1c5a      	adds	r2, r3, #1
 8012372:	75fa      	strb	r2, [r7, #23]
 8012374:	461a      	mov	r2, r3
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	4413      	add	r3, r2
 801237a:	2200      	movs	r2, #0
 801237c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d1e8      	bne.n	8012358 <USBD_GetString+0x4e>
    }
  }
}
 8012386:	bf00      	nop
 8012388:	3718      	adds	r7, #24
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}

0801238e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801238e:	b480      	push	{r7}
 8012390:	b085      	sub	sp, #20
 8012392:	af00      	add	r7, sp, #0
 8012394:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012396:	2300      	movs	r3, #0
 8012398:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 801239a:	e005      	b.n	80123a8 <USBD_GetLen+0x1a>
  {
    len++;
 801239c:	7bfb      	ldrb	r3, [r7, #15]
 801239e:	3301      	adds	r3, #1
 80123a0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	3301      	adds	r3, #1
 80123a6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d1f5      	bne.n	801239c <USBD_GetLen+0xe>
  }

  return len;
 80123b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3714      	adds	r7, #20
 80123b6:	46bd      	mov	sp, r7
 80123b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123bc:	4770      	bx	lr

080123be <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80123be:	b580      	push	{r7, lr}
 80123c0:	b084      	sub	sp, #16
 80123c2:	af00      	add	r7, sp, #0
 80123c4:	60f8      	str	r0, [r7, #12]
 80123c6:	60b9      	str	r1, [r7, #8]
 80123c8:	4613      	mov	r3, r2
 80123ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	2202      	movs	r2, #2
 80123d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80123d4:	88fa      	ldrh	r2, [r7, #6]
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80123da:	88fa      	ldrh	r2, [r7, #6]
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80123e0:	88fb      	ldrh	r3, [r7, #6]
 80123e2:	68ba      	ldr	r2, [r7, #8]
 80123e4:	2100      	movs	r1, #0
 80123e6:	68f8      	ldr	r0, [r7, #12]
 80123e8:	f003 fa30 	bl	801584c <USBD_LL_Transmit>

  return USBD_OK;
 80123ec:	2300      	movs	r3, #0
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3710      	adds	r7, #16
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}

080123f6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80123f6:	b580      	push	{r7, lr}
 80123f8:	b084      	sub	sp, #16
 80123fa:	af00      	add	r7, sp, #0
 80123fc:	60f8      	str	r0, [r7, #12]
 80123fe:	60b9      	str	r1, [r7, #8]
 8012400:	4613      	mov	r3, r2
 8012402:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012404:	88fb      	ldrh	r3, [r7, #6]
 8012406:	68ba      	ldr	r2, [r7, #8]
 8012408:	2100      	movs	r1, #0
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f003 fa1e 	bl	801584c <USBD_LL_Transmit>

  return USBD_OK;
 8012410:	2300      	movs	r3, #0
}
 8012412:	4618      	mov	r0, r3
 8012414:	3710      	adds	r7, #16
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}

0801241a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801241a:	b580      	push	{r7, lr}
 801241c:	b084      	sub	sp, #16
 801241e:	af00      	add	r7, sp, #0
 8012420:	60f8      	str	r0, [r7, #12]
 8012422:	60b9      	str	r1, [r7, #8]
 8012424:	4613      	mov	r3, r2
 8012426:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	2203      	movs	r2, #3
 801242c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012430:	88fa      	ldrh	r2, [r7, #6]
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8012438:	88fa      	ldrh	r2, [r7, #6]
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012440:	88fb      	ldrh	r3, [r7, #6]
 8012442:	68ba      	ldr	r2, [r7, #8]
 8012444:	2100      	movs	r1, #0
 8012446:	68f8      	ldr	r0, [r7, #12]
 8012448:	f003 fa23 	bl	8015892 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801244c:	2300      	movs	r3, #0
}
 801244e:	4618      	mov	r0, r3
 8012450:	3710      	adds	r7, #16
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}

08012456 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8012456:	b580      	push	{r7, lr}
 8012458:	b084      	sub	sp, #16
 801245a:	af00      	add	r7, sp, #0
 801245c:	60f8      	str	r0, [r7, #12]
 801245e:	60b9      	str	r1, [r7, #8]
 8012460:	4613      	mov	r3, r2
 8012462:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012464:	88fb      	ldrh	r3, [r7, #6]
 8012466:	68ba      	ldr	r2, [r7, #8]
 8012468:	2100      	movs	r1, #0
 801246a:	68f8      	ldr	r0, [r7, #12]
 801246c:	f003 fa11 	bl	8015892 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012470:	2300      	movs	r3, #0
}
 8012472:	4618      	mov	r0, r3
 8012474:	3710      	adds	r7, #16
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}

0801247a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801247a:	b580      	push	{r7, lr}
 801247c:	b082      	sub	sp, #8
 801247e:	af00      	add	r7, sp, #0
 8012480:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2204      	movs	r2, #4
 8012486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801248a:	2300      	movs	r3, #0
 801248c:	2200      	movs	r2, #0
 801248e:	2100      	movs	r1, #0
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f003 f9db 	bl	801584c <USBD_LL_Transmit>

  return USBD_OK;
 8012496:	2300      	movs	r3, #0
}
 8012498:	4618      	mov	r0, r3
 801249a:	3708      	adds	r7, #8
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}

080124a0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2205      	movs	r2, #5
 80124ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80124b0:	2300      	movs	r3, #0
 80124b2:	2200      	movs	r2, #0
 80124b4:	2100      	movs	r1, #0
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f003 f9eb 	bl	8015892 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80124bc:	2300      	movs	r3, #0
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3708      	adds	r7, #8
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
	...

080124c8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80124c8:	b480      	push	{r7}
 80124ca:	b085      	sub	sp, #20
 80124cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124ce:	f3ef 8305 	mrs	r3, IPSR
 80124d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80124d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d10f      	bne.n	80124fa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80124da:	f3ef 8310 	mrs	r3, PRIMASK
 80124de:	607b      	str	r3, [r7, #4]
  return(result);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d109      	bne.n	80124fa <osKernelInitialize+0x32>
 80124e6:	4b11      	ldr	r3, [pc, #68]	; (801252c <osKernelInitialize+0x64>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	2b02      	cmp	r3, #2
 80124ec:	d109      	bne.n	8012502 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80124ee:	f3ef 8311 	mrs	r3, BASEPRI
 80124f2:	603b      	str	r3, [r7, #0]
  return(result);
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d003      	beq.n	8012502 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80124fa:	f06f 0305 	mvn.w	r3, #5
 80124fe:	60fb      	str	r3, [r7, #12]
 8012500:	e00c      	b.n	801251c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012502:	4b0a      	ldr	r3, [pc, #40]	; (801252c <osKernelInitialize+0x64>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d105      	bne.n	8012516 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 801250a:	4b08      	ldr	r3, [pc, #32]	; (801252c <osKernelInitialize+0x64>)
 801250c:	2201      	movs	r2, #1
 801250e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012510:	2300      	movs	r3, #0
 8012512:	60fb      	str	r3, [r7, #12]
 8012514:	e002      	b.n	801251c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8012516:	f04f 33ff 	mov.w	r3, #4294967295
 801251a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801251c:	68fb      	ldr	r3, [r7, #12]
}
 801251e:	4618      	mov	r0, r3
 8012520:	3714      	adds	r7, #20
 8012522:	46bd      	mov	sp, r7
 8012524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012528:	4770      	bx	lr
 801252a:	bf00      	nop
 801252c:	200026b0 	.word	0x200026b0

08012530 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012530:	b580      	push	{r7, lr}
 8012532:	b084      	sub	sp, #16
 8012534:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012536:	f3ef 8305 	mrs	r3, IPSR
 801253a:	60bb      	str	r3, [r7, #8]
  return(result);
 801253c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801253e:	2b00      	cmp	r3, #0
 8012540:	d10f      	bne.n	8012562 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012542:	f3ef 8310 	mrs	r3, PRIMASK
 8012546:	607b      	str	r3, [r7, #4]
  return(result);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d109      	bne.n	8012562 <osKernelStart+0x32>
 801254e:	4b11      	ldr	r3, [pc, #68]	; (8012594 <osKernelStart+0x64>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	2b02      	cmp	r3, #2
 8012554:	d109      	bne.n	801256a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012556:	f3ef 8311 	mrs	r3, BASEPRI
 801255a:	603b      	str	r3, [r7, #0]
  return(result);
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d003      	beq.n	801256a <osKernelStart+0x3a>
    stat = osErrorISR;
 8012562:	f06f 0305 	mvn.w	r3, #5
 8012566:	60fb      	str	r3, [r7, #12]
 8012568:	e00e      	b.n	8012588 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 801256a:	4b0a      	ldr	r3, [pc, #40]	; (8012594 <osKernelStart+0x64>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	2b01      	cmp	r3, #1
 8012570:	d107      	bne.n	8012582 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8012572:	4b08      	ldr	r3, [pc, #32]	; (8012594 <osKernelStart+0x64>)
 8012574:	2202      	movs	r2, #2
 8012576:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8012578:	f001 fb1a 	bl	8013bb0 <vTaskStartScheduler>
      stat = osOK;
 801257c:	2300      	movs	r3, #0
 801257e:	60fb      	str	r3, [r7, #12]
 8012580:	e002      	b.n	8012588 <osKernelStart+0x58>
    } else {
      stat = osError;
 8012582:	f04f 33ff 	mov.w	r3, #4294967295
 8012586:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8012588:	68fb      	ldr	r3, [r7, #12]
}
 801258a:	4618      	mov	r0, r3
 801258c:	3710      	adds	r7, #16
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}
 8012592:	bf00      	nop
 8012594:	200026b0 	.word	0x200026b0

08012598 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012598:	b580      	push	{r7, lr}
 801259a:	b092      	sub	sp, #72	; 0x48
 801259c:	af04      	add	r7, sp, #16
 801259e:	60f8      	str	r0, [r7, #12]
 80125a0:	60b9      	str	r1, [r7, #8]
 80125a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80125a4:	2300      	movs	r3, #0
 80125a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125a8:	f3ef 8305 	mrs	r3, IPSR
 80125ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80125ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	f040 8094 	bne.w	80126de <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80125b6:	f3ef 8310 	mrs	r3, PRIMASK
 80125ba:	623b      	str	r3, [r7, #32]
  return(result);
 80125bc:	6a3b      	ldr	r3, [r7, #32]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	f040 808d 	bne.w	80126de <osThreadNew+0x146>
 80125c4:	4b48      	ldr	r3, [pc, #288]	; (80126e8 <osThreadNew+0x150>)
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	2b02      	cmp	r3, #2
 80125ca:	d106      	bne.n	80125da <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80125cc:	f3ef 8311 	mrs	r3, BASEPRI
 80125d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80125d2:	69fb      	ldr	r3, [r7, #28]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	f040 8082 	bne.w	80126de <osThreadNew+0x146>
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d07e      	beq.n	80126de <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80125e0:	2380      	movs	r3, #128	; 0x80
 80125e2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80125e4:	2318      	movs	r3, #24
 80125e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80125e8:	2300      	movs	r3, #0
 80125ea:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80125ec:	f107 031b 	add.w	r3, r7, #27
 80125f0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80125f2:	f04f 33ff 	mov.w	r3, #4294967295
 80125f6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d045      	beq.n	801268a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d002      	beq.n	801260c <osThreadNew+0x74>
        name = attr->name;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	699b      	ldr	r3, [r3, #24]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d002      	beq.n	801261a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	699b      	ldr	r3, [r3, #24]
 8012618:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801261c:	2b00      	cmp	r3, #0
 801261e:	d008      	beq.n	8012632 <osThreadNew+0x9a>
 8012620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012622:	2b38      	cmp	r3, #56	; 0x38
 8012624:	d805      	bhi.n	8012632 <osThreadNew+0x9a>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	685b      	ldr	r3, [r3, #4]
 801262a:	f003 0301 	and.w	r3, r3, #1
 801262e:	2b00      	cmp	r3, #0
 8012630:	d001      	beq.n	8012636 <osThreadNew+0x9e>
        return (NULL);
 8012632:	2300      	movs	r3, #0
 8012634:	e054      	b.n	80126e0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	695b      	ldr	r3, [r3, #20]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d003      	beq.n	8012646 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	695b      	ldr	r3, [r3, #20]
 8012642:	089b      	lsrs	r3, r3, #2
 8012644:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	689b      	ldr	r3, [r3, #8]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d00e      	beq.n	801266c <osThreadNew+0xd4>
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	68db      	ldr	r3, [r3, #12]
 8012652:	2b5f      	cmp	r3, #95	; 0x5f
 8012654:	d90a      	bls.n	801266c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801265a:	2b00      	cmp	r3, #0
 801265c:	d006      	beq.n	801266c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	695b      	ldr	r3, [r3, #20]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d002      	beq.n	801266c <osThreadNew+0xd4>
        mem = 1;
 8012666:	2301      	movs	r3, #1
 8012668:	62bb      	str	r3, [r7, #40]	; 0x28
 801266a:	e010      	b.n	801268e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	689b      	ldr	r3, [r3, #8]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d10c      	bne.n	801268e <osThreadNew+0xf6>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d108      	bne.n	801268e <osThreadNew+0xf6>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	691b      	ldr	r3, [r3, #16]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d104      	bne.n	801268e <osThreadNew+0xf6>
          mem = 0;
 8012684:	2300      	movs	r3, #0
 8012686:	62bb      	str	r3, [r7, #40]	; 0x28
 8012688:	e001      	b.n	801268e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 801268a:	2300      	movs	r3, #0
 801268c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 801268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012690:	2b01      	cmp	r3, #1
 8012692:	d110      	bne.n	80126b6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8012698:	687a      	ldr	r2, [r7, #4]
 801269a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801269c:	9202      	str	r2, [sp, #8]
 801269e:	9301      	str	r3, [sp, #4]
 80126a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126a2:	9300      	str	r3, [sp, #0]
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80126aa:	68f8      	ldr	r0, [r7, #12]
 80126ac:	f001 f8b0 	bl	8013810 <xTaskCreateStatic>
 80126b0:	4603      	mov	r3, r0
 80126b2:	617b      	str	r3, [r7, #20]
 80126b4:	e013      	b.n	80126de <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80126b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d110      	bne.n	80126de <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80126bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126be:	b29a      	uxth	r2, r3
 80126c0:	f107 0314 	add.w	r3, r7, #20
 80126c4:	9301      	str	r3, [sp, #4]
 80126c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c8:	9300      	str	r3, [sp, #0]
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80126ce:	68f8      	ldr	r0, [r7, #12]
 80126d0:	f001 f8fa 	bl	80138c8 <xTaskCreate>
 80126d4:	4603      	mov	r3, r0
 80126d6:	2b01      	cmp	r3, #1
 80126d8:	d001      	beq.n	80126de <osThreadNew+0x146>
          hTask = NULL;
 80126da:	2300      	movs	r3, #0
 80126dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80126de:	697b      	ldr	r3, [r7, #20]
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3738      	adds	r7, #56	; 0x38
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	200026b0 	.word	0x200026b0

080126ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b086      	sub	sp, #24
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126f4:	f3ef 8305 	mrs	r3, IPSR
 80126f8:	613b      	str	r3, [r7, #16]
  return(result);
 80126fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d10f      	bne.n	8012720 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012700:	f3ef 8310 	mrs	r3, PRIMASK
 8012704:	60fb      	str	r3, [r7, #12]
  return(result);
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d109      	bne.n	8012720 <osDelay+0x34>
 801270c:	4b0d      	ldr	r3, [pc, #52]	; (8012744 <osDelay+0x58>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	2b02      	cmp	r3, #2
 8012712:	d109      	bne.n	8012728 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012714:	f3ef 8311 	mrs	r3, BASEPRI
 8012718:	60bb      	str	r3, [r7, #8]
  return(result);
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d003      	beq.n	8012728 <osDelay+0x3c>
    stat = osErrorISR;
 8012720:	f06f 0305 	mvn.w	r3, #5
 8012724:	617b      	str	r3, [r7, #20]
 8012726:	e007      	b.n	8012738 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8012728:	2300      	movs	r3, #0
 801272a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d002      	beq.n	8012738 <osDelay+0x4c>
      vTaskDelay(ticks);
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f001 fa08 	bl	8013b48 <vTaskDelay>
    }
  }

  return (stat);
 8012738:	697b      	ldr	r3, [r7, #20]
}
 801273a:	4618      	mov	r0, r3
 801273c:	3718      	adds	r7, #24
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}
 8012742:	bf00      	nop
 8012744:	200026b0 	.word	0x200026b0

08012748 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012748:	b580      	push	{r7, lr}
 801274a:	b08c      	sub	sp, #48	; 0x30
 801274c:	af02      	add	r7, sp, #8
 801274e:	60f8      	str	r0, [r7, #12]
 8012750:	60b9      	str	r1, [r7, #8]
 8012752:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012754:	2300      	movs	r3, #0
 8012756:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012758:	f3ef 8305 	mrs	r3, IPSR
 801275c:	61bb      	str	r3, [r7, #24]
  return(result);
 801275e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012760:	2b00      	cmp	r3, #0
 8012762:	d16f      	bne.n	8012844 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012764:	f3ef 8310 	mrs	r3, PRIMASK
 8012768:	617b      	str	r3, [r7, #20]
  return(result);
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d169      	bne.n	8012844 <osMessageQueueNew+0xfc>
 8012770:	4b37      	ldr	r3, [pc, #220]	; (8012850 <osMessageQueueNew+0x108>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	2b02      	cmp	r3, #2
 8012776:	d105      	bne.n	8012784 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012778:	f3ef 8311 	mrs	r3, BASEPRI
 801277c:	613b      	str	r3, [r7, #16]
  return(result);
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d15f      	bne.n	8012844 <osMessageQueueNew+0xfc>
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d05c      	beq.n	8012844 <osMessageQueueNew+0xfc>
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d059      	beq.n	8012844 <osMessageQueueNew+0xfc>
    mem = -1;
 8012790:	f04f 33ff 	mov.w	r3, #4294967295
 8012794:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d029      	beq.n	80127f0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	689b      	ldr	r3, [r3, #8]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d012      	beq.n	80127ca <osMessageQueueNew+0x82>
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	68db      	ldr	r3, [r3, #12]
 80127a8:	2b4f      	cmp	r3, #79	; 0x4f
 80127aa:	d90e      	bls.n	80127ca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d00a      	beq.n	80127ca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	695a      	ldr	r2, [r3, #20]
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	68b9      	ldr	r1, [r7, #8]
 80127bc:	fb01 f303 	mul.w	r3, r1, r3
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d302      	bcc.n	80127ca <osMessageQueueNew+0x82>
        mem = 1;
 80127c4:	2301      	movs	r3, #1
 80127c6:	623b      	str	r3, [r7, #32]
 80127c8:	e014      	b.n	80127f4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	689b      	ldr	r3, [r3, #8]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d110      	bne.n	80127f4 <osMessageQueueNew+0xac>
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	68db      	ldr	r3, [r3, #12]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d10c      	bne.n	80127f4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d108      	bne.n	80127f4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	695b      	ldr	r3, [r3, #20]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d104      	bne.n	80127f4 <osMessageQueueNew+0xac>
          mem = 0;
 80127ea:	2300      	movs	r3, #0
 80127ec:	623b      	str	r3, [r7, #32]
 80127ee:	e001      	b.n	80127f4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80127f0:	2300      	movs	r3, #0
 80127f2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80127f4:	6a3b      	ldr	r3, [r7, #32]
 80127f6:	2b01      	cmp	r3, #1
 80127f8:	d10b      	bne.n	8012812 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	691a      	ldr	r2, [r3, #16]
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	689b      	ldr	r3, [r3, #8]
 8012802:	2100      	movs	r1, #0
 8012804:	9100      	str	r1, [sp, #0]
 8012806:	68b9      	ldr	r1, [r7, #8]
 8012808:	68f8      	ldr	r0, [r7, #12]
 801280a:	f000 fa8b 	bl	8012d24 <xQueueGenericCreateStatic>
 801280e:	6278      	str	r0, [r7, #36]	; 0x24
 8012810:	e008      	b.n	8012824 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8012812:	6a3b      	ldr	r3, [r7, #32]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d105      	bne.n	8012824 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8012818:	2200      	movs	r2, #0
 801281a:	68b9      	ldr	r1, [r7, #8]
 801281c:	68f8      	ldr	r0, [r7, #12]
 801281e:	f000 faf8 	bl	8012e12 <xQueueGenericCreate>
 8012822:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012826:	2b00      	cmp	r3, #0
 8012828:	d00c      	beq.n	8012844 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d003      	beq.n	8012838 <osMessageQueueNew+0xf0>
        name = attr->name;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	61fb      	str	r3, [r7, #28]
 8012836:	e001      	b.n	801283c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8012838:	2300      	movs	r3, #0
 801283a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801283c:	69f9      	ldr	r1, [r7, #28]
 801283e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012840:	f000 ff88 	bl	8013754 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012846:	4618      	mov	r0, r3
 8012848:	3728      	adds	r7, #40	; 0x28
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}
 801284e:	bf00      	nop
 8012850:	200026b0 	.word	0x200026b0

08012854 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012854:	b580      	push	{r7, lr}
 8012856:	b08a      	sub	sp, #40	; 0x28
 8012858:	af00      	add	r7, sp, #0
 801285a:	60f8      	str	r0, [r7, #12]
 801285c:	60b9      	str	r1, [r7, #8]
 801285e:	603b      	str	r3, [r7, #0]
 8012860:	4613      	mov	r3, r2
 8012862:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012868:	2300      	movs	r3, #0
 801286a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801286c:	f3ef 8305 	mrs	r3, IPSR
 8012870:	61fb      	str	r3, [r7, #28]
  return(result);
 8012872:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012874:	2b00      	cmp	r3, #0
 8012876:	d10f      	bne.n	8012898 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012878:	f3ef 8310 	mrs	r3, PRIMASK
 801287c:	61bb      	str	r3, [r7, #24]
  return(result);
 801287e:	69bb      	ldr	r3, [r7, #24]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d109      	bne.n	8012898 <osMessageQueuePut+0x44>
 8012884:	4b2b      	ldr	r3, [pc, #172]	; (8012934 <osMessageQueuePut+0xe0>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	2b02      	cmp	r3, #2
 801288a:	d12e      	bne.n	80128ea <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801288c:	f3ef 8311 	mrs	r3, BASEPRI
 8012890:	617b      	str	r3, [r7, #20]
  return(result);
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d028      	beq.n	80128ea <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012898:	6a3b      	ldr	r3, [r7, #32]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d005      	beq.n	80128aa <osMessageQueuePut+0x56>
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d002      	beq.n	80128aa <osMessageQueuePut+0x56>
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d003      	beq.n	80128b2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80128aa:	f06f 0303 	mvn.w	r3, #3
 80128ae:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80128b0:	e039      	b.n	8012926 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80128b2:	2300      	movs	r3, #0
 80128b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80128b6:	f107 0210 	add.w	r2, r7, #16
 80128ba:	2300      	movs	r3, #0
 80128bc:	68b9      	ldr	r1, [r7, #8]
 80128be:	6a38      	ldr	r0, [r7, #32]
 80128c0:	f000 fc06 	bl	80130d0 <xQueueGenericSendFromISR>
 80128c4:	4603      	mov	r3, r0
 80128c6:	2b01      	cmp	r3, #1
 80128c8:	d003      	beq.n	80128d2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80128ca:	f06f 0302 	mvn.w	r3, #2
 80128ce:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80128d0:	e029      	b.n	8012926 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d026      	beq.n	8012926 <osMessageQueuePut+0xd2>
 80128d8:	4b17      	ldr	r3, [pc, #92]	; (8012938 <osMessageQueuePut+0xe4>)
 80128da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128de:	601a      	str	r2, [r3, #0]
 80128e0:	f3bf 8f4f 	dsb	sy
 80128e4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80128e8:	e01d      	b.n	8012926 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80128ea:	6a3b      	ldr	r3, [r7, #32]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d002      	beq.n	80128f6 <osMessageQueuePut+0xa2>
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d103      	bne.n	80128fe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80128f6:	f06f 0303 	mvn.w	r3, #3
 80128fa:	627b      	str	r3, [r7, #36]	; 0x24
 80128fc:	e014      	b.n	8012928 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80128fe:	2300      	movs	r3, #0
 8012900:	683a      	ldr	r2, [r7, #0]
 8012902:	68b9      	ldr	r1, [r7, #8]
 8012904:	6a38      	ldr	r0, [r7, #32]
 8012906:	f000 fae5 	bl	8012ed4 <xQueueGenericSend>
 801290a:	4603      	mov	r3, r0
 801290c:	2b01      	cmp	r3, #1
 801290e:	d00b      	beq.n	8012928 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d003      	beq.n	801291e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8012916:	f06f 0301 	mvn.w	r3, #1
 801291a:	627b      	str	r3, [r7, #36]	; 0x24
 801291c:	e004      	b.n	8012928 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801291e:	f06f 0302 	mvn.w	r3, #2
 8012922:	627b      	str	r3, [r7, #36]	; 0x24
 8012924:	e000      	b.n	8012928 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012926:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801292a:	4618      	mov	r0, r3
 801292c:	3728      	adds	r7, #40	; 0x28
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop
 8012934:	200026b0 	.word	0x200026b0
 8012938:	e000ed04 	.word	0xe000ed04

0801293c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801293c:	b580      	push	{r7, lr}
 801293e:	b08a      	sub	sp, #40	; 0x28
 8012940:	af00      	add	r7, sp, #0
 8012942:	60f8      	str	r0, [r7, #12]
 8012944:	60b9      	str	r1, [r7, #8]
 8012946:	607a      	str	r2, [r7, #4]
 8012948:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801294e:	2300      	movs	r3, #0
 8012950:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012952:	f3ef 8305 	mrs	r3, IPSR
 8012956:	61fb      	str	r3, [r7, #28]
  return(result);
 8012958:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801295a:	2b00      	cmp	r3, #0
 801295c:	d10f      	bne.n	801297e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801295e:	f3ef 8310 	mrs	r3, PRIMASK
 8012962:	61bb      	str	r3, [r7, #24]
  return(result);
 8012964:	69bb      	ldr	r3, [r7, #24]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d109      	bne.n	801297e <osMessageQueueGet+0x42>
 801296a:	4b2b      	ldr	r3, [pc, #172]	; (8012a18 <osMessageQueueGet+0xdc>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2b02      	cmp	r3, #2
 8012970:	d12e      	bne.n	80129d0 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012972:	f3ef 8311 	mrs	r3, BASEPRI
 8012976:	617b      	str	r3, [r7, #20]
  return(result);
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d028      	beq.n	80129d0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801297e:	6a3b      	ldr	r3, [r7, #32]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d005      	beq.n	8012990 <osMessageQueueGet+0x54>
 8012984:	68bb      	ldr	r3, [r7, #8]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d002      	beq.n	8012990 <osMessageQueueGet+0x54>
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d003      	beq.n	8012998 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8012990:	f06f 0303 	mvn.w	r3, #3
 8012994:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012996:	e038      	b.n	8012a0a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8012998:	2300      	movs	r3, #0
 801299a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801299c:	f107 0310 	add.w	r3, r7, #16
 80129a0:	461a      	mov	r2, r3
 80129a2:	68b9      	ldr	r1, [r7, #8]
 80129a4:	6a38      	ldr	r0, [r7, #32]
 80129a6:	f000 fd0b 	bl	80133c0 <xQueueReceiveFromISR>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2b01      	cmp	r3, #1
 80129ae:	d003      	beq.n	80129b8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80129b0:	f06f 0302 	mvn.w	r3, #2
 80129b4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80129b6:	e028      	b.n	8012a0a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d025      	beq.n	8012a0a <osMessageQueueGet+0xce>
 80129be:	4b17      	ldr	r3, [pc, #92]	; (8012a1c <osMessageQueueGet+0xe0>)
 80129c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129c4:	601a      	str	r2, [r3, #0]
 80129c6:	f3bf 8f4f 	dsb	sy
 80129ca:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80129ce:	e01c      	b.n	8012a0a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80129d0:	6a3b      	ldr	r3, [r7, #32]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d002      	beq.n	80129dc <osMessageQueueGet+0xa0>
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d103      	bne.n	80129e4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80129dc:	f06f 0303 	mvn.w	r3, #3
 80129e0:	627b      	str	r3, [r7, #36]	; 0x24
 80129e2:	e013      	b.n	8012a0c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80129e4:	683a      	ldr	r2, [r7, #0]
 80129e6:	68b9      	ldr	r1, [r7, #8]
 80129e8:	6a38      	ldr	r0, [r7, #32]
 80129ea:	f000 fc09 	bl	8013200 <xQueueReceive>
 80129ee:	4603      	mov	r3, r0
 80129f0:	2b01      	cmp	r3, #1
 80129f2:	d00b      	beq.n	8012a0c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d003      	beq.n	8012a02 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80129fa:	f06f 0301 	mvn.w	r3, #1
 80129fe:	627b      	str	r3, [r7, #36]	; 0x24
 8012a00:	e004      	b.n	8012a0c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8012a02:	f06f 0302 	mvn.w	r3, #2
 8012a06:	627b      	str	r3, [r7, #36]	; 0x24
 8012a08:	e000      	b.n	8012a0c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012a0a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3728      	adds	r7, #40	; 0x28
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
 8012a16:	bf00      	nop
 8012a18:	200026b0 	.word	0x200026b0
 8012a1c:	e000ed04 	.word	0xe000ed04

08012a20 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b088      	sub	sp, #32
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8012a2c:	69bb      	ldr	r3, [r7, #24]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d102      	bne.n	8012a38 <osMessageQueueGetCount+0x18>
    count = 0U;
 8012a32:	2300      	movs	r3, #0
 8012a34:	61fb      	str	r3, [r7, #28]
 8012a36:	e01e      	b.n	8012a76 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a38:	f3ef 8305 	mrs	r3, IPSR
 8012a3c:	617b      	str	r3, [r7, #20]
  return(result);
 8012a3e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d10f      	bne.n	8012a64 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a44:	f3ef 8310 	mrs	r3, PRIMASK
 8012a48:	613b      	str	r3, [r7, #16]
  return(result);
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d109      	bne.n	8012a64 <osMessageQueueGetCount+0x44>
 8012a50:	4b0b      	ldr	r3, [pc, #44]	; (8012a80 <osMessageQueueGetCount+0x60>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	2b02      	cmp	r3, #2
 8012a56:	d10a      	bne.n	8012a6e <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012a58:	f3ef 8311 	mrs	r3, BASEPRI
 8012a5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d004      	beq.n	8012a6e <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8012a64:	69b8      	ldr	r0, [r7, #24]
 8012a66:	f000 fd49 	bl	80134fc <uxQueueMessagesWaitingFromISR>
 8012a6a:	61f8      	str	r0, [r7, #28]
 8012a6c:	e003      	b.n	8012a76 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8012a6e:	69b8      	ldr	r0, [r7, #24]
 8012a70:	f000 fd26 	bl	80134c0 <uxQueueMessagesWaiting>
 8012a74:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8012a76:	69fb      	ldr	r3, [r7, #28]
}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3720      	adds	r7, #32
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	200026b0 	.word	0x200026b0

08012a84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012a84:	b480      	push	{r7}
 8012a86:	b085      	sub	sp, #20
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	60f8      	str	r0, [r7, #12]
 8012a8c:	60b9      	str	r1, [r7, #8]
 8012a8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	4a07      	ldr	r2, [pc, #28]	; (8012ab0 <vApplicationGetIdleTaskMemory+0x2c>)
 8012a94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	4a06      	ldr	r2, [pc, #24]	; (8012ab4 <vApplicationGetIdleTaskMemory+0x30>)
 8012a9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2280      	movs	r2, #128	; 0x80
 8012aa0:	601a      	str	r2, [r3, #0]
}
 8012aa2:	bf00      	nop
 8012aa4:	3714      	adds	r7, #20
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr
 8012aae:	bf00      	nop
 8012ab0:	200026b4 	.word	0x200026b4
 8012ab4:	20002714 	.word	0x20002714

08012ab8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012ab8:	b480      	push	{r7}
 8012aba:	b085      	sub	sp, #20
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	60f8      	str	r0, [r7, #12]
 8012ac0:	60b9      	str	r1, [r7, #8]
 8012ac2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	4a07      	ldr	r2, [pc, #28]	; (8012ae4 <vApplicationGetTimerTaskMemory+0x2c>)
 8012ac8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	4a06      	ldr	r2, [pc, #24]	; (8012ae8 <vApplicationGetTimerTaskMemory+0x30>)
 8012ace:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012ad6:	601a      	str	r2, [r3, #0]
}
 8012ad8:	bf00      	nop
 8012ada:	3714      	adds	r7, #20
 8012adc:	46bd      	mov	sp, r7
 8012ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae2:	4770      	bx	lr
 8012ae4:	20002914 	.word	0x20002914
 8012ae8:	20002974 	.word	0x20002974

08012aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012aec:	b480      	push	{r7}
 8012aee:	b083      	sub	sp, #12
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f103 0208 	add.w	r2, r3, #8
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	f04f 32ff 	mov.w	r2, #4294967295
 8012b04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f103 0208 	add.w	r2, r3, #8
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f103 0208 	add.w	r2, r3, #8
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012b20:	bf00      	nop
 8012b22:	370c      	adds	r7, #12
 8012b24:	46bd      	mov	sp, r7
 8012b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2a:	4770      	bx	lr

08012b2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2200      	movs	r2, #0
 8012b38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012b3a:	bf00      	nop
 8012b3c:	370c      	adds	r7, #12
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b44:	4770      	bx	lr

08012b46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012b46:	b480      	push	{r7}
 8012b48:	b085      	sub	sp, #20
 8012b4a:	af00      	add	r7, sp, #0
 8012b4c:	6078      	str	r0, [r7, #4]
 8012b4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	68fa      	ldr	r2, [r7, #12]
 8012b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	689a      	ldr	r2, [r3, #8]
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	689b      	ldr	r3, [r3, #8]
 8012b68:	683a      	ldr	r2, [r7, #0]
 8012b6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	683a      	ldr	r2, [r7, #0]
 8012b70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	687a      	ldr	r2, [r7, #4]
 8012b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	1c5a      	adds	r2, r3, #1
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	601a      	str	r2, [r3, #0]
}
 8012b82:	bf00      	nop
 8012b84:	3714      	adds	r7, #20
 8012b86:	46bd      	mov	sp, r7
 8012b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8c:	4770      	bx	lr

08012b8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012b8e:	b480      	push	{r7}
 8012b90:	b085      	sub	sp, #20
 8012b92:	af00      	add	r7, sp, #0
 8012b94:	6078      	str	r0, [r7, #4]
 8012b96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ba4:	d103      	bne.n	8012bae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	691b      	ldr	r3, [r3, #16]
 8012baa:	60fb      	str	r3, [r7, #12]
 8012bac:	e00c      	b.n	8012bc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	3308      	adds	r3, #8
 8012bb2:	60fb      	str	r3, [r7, #12]
 8012bb4:	e002      	b.n	8012bbc <vListInsert+0x2e>
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	60fb      	str	r3, [r7, #12]
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	685b      	ldr	r3, [r3, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	68ba      	ldr	r2, [r7, #8]
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d2f6      	bcs.n	8012bb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	685a      	ldr	r2, [r3, #4]
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	685b      	ldr	r3, [r3, #4]
 8012bd4:	683a      	ldr	r2, [r7, #0]
 8012bd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	68fa      	ldr	r2, [r7, #12]
 8012bdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	683a      	ldr	r2, [r7, #0]
 8012be2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	687a      	ldr	r2, [r7, #4]
 8012be8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	1c5a      	adds	r2, r3, #1
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	601a      	str	r2, [r3, #0]
}
 8012bf4:	bf00      	nop
 8012bf6:	3714      	adds	r7, #20
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfe:	4770      	bx	lr

08012c00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012c00:	b480      	push	{r7}
 8012c02:	b085      	sub	sp, #20
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	691b      	ldr	r3, [r3, #16]
 8012c0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	685b      	ldr	r3, [r3, #4]
 8012c12:	687a      	ldr	r2, [r7, #4]
 8012c14:	6892      	ldr	r2, [r2, #8]
 8012c16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	689b      	ldr	r3, [r3, #8]
 8012c1c:	687a      	ldr	r2, [r7, #4]
 8012c1e:	6852      	ldr	r2, [r2, #4]
 8012c20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	685b      	ldr	r3, [r3, #4]
 8012c26:	687a      	ldr	r2, [r7, #4]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d103      	bne.n	8012c34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	689a      	ldr	r2, [r3, #8]
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2200      	movs	r2, #0
 8012c38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	1e5a      	subs	r2, r3, #1
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	681b      	ldr	r3, [r3, #0]
}
 8012c48:	4618      	mov	r0, r3
 8012c4a:	3714      	adds	r7, #20
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr

08012c54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b084      	sub	sp, #16
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d10a      	bne.n	8012c7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c6c:	f383 8811 	msr	BASEPRI, r3
 8012c70:	f3bf 8f6f 	isb	sy
 8012c74:	f3bf 8f4f 	dsb	sy
 8012c78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012c7a:	bf00      	nop
 8012c7c:	e7fe      	b.n	8012c7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012c7e:	f002 f921 	bl	8014ec4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	681a      	ldr	r2, [r3, #0]
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c8a:	68f9      	ldr	r1, [r7, #12]
 8012c8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012c8e:	fb01 f303 	mul.w	r3, r1, r3
 8012c92:	441a      	add	r2, r3
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	681a      	ldr	r2, [r3, #0]
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cae:	3b01      	subs	r3, #1
 8012cb0:	68f9      	ldr	r1, [r7, #12]
 8012cb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012cb4:	fb01 f303 	mul.w	r3, r1, r3
 8012cb8:	441a      	add	r2, r3
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	22ff      	movs	r2, #255	; 0xff
 8012cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	22ff      	movs	r2, #255	; 0xff
 8012cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d114      	bne.n	8012cfe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	691b      	ldr	r3, [r3, #16]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d01a      	beq.n	8012d12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	3310      	adds	r3, #16
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f001 fa0f 	bl	8014104 <xTaskRemoveFromEventList>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d012      	beq.n	8012d12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012cec:	4b0c      	ldr	r3, [pc, #48]	; (8012d20 <xQueueGenericReset+0xcc>)
 8012cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cf2:	601a      	str	r2, [r3, #0]
 8012cf4:	f3bf 8f4f 	dsb	sy
 8012cf8:	f3bf 8f6f 	isb	sy
 8012cfc:	e009      	b.n	8012d12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	3310      	adds	r3, #16
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7ff fef2 	bl	8012aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	3324      	adds	r3, #36	; 0x24
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7ff feed 	bl	8012aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012d12:	f002 f907 	bl	8014f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012d16:	2301      	movs	r3, #1
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3710      	adds	r7, #16
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}
 8012d20:	e000ed04 	.word	0xe000ed04

08012d24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b08e      	sub	sp, #56	; 0x38
 8012d28:	af02      	add	r7, sp, #8
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	60b9      	str	r1, [r7, #8]
 8012d2e:	607a      	str	r2, [r7, #4]
 8012d30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d10a      	bne.n	8012d4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d3c:	f383 8811 	msr	BASEPRI, r3
 8012d40:	f3bf 8f6f 	isb	sy
 8012d44:	f3bf 8f4f 	dsb	sy
 8012d48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012d4a:	bf00      	nop
 8012d4c:	e7fe      	b.n	8012d4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d10a      	bne.n	8012d6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d58:	f383 8811 	msr	BASEPRI, r3
 8012d5c:	f3bf 8f6f 	isb	sy
 8012d60:	f3bf 8f4f 	dsb	sy
 8012d64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012d66:	bf00      	nop
 8012d68:	e7fe      	b.n	8012d68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d002      	beq.n	8012d76 <xQueueGenericCreateStatic+0x52>
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d001      	beq.n	8012d7a <xQueueGenericCreateStatic+0x56>
 8012d76:	2301      	movs	r3, #1
 8012d78:	e000      	b.n	8012d7c <xQueueGenericCreateStatic+0x58>
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d10a      	bne.n	8012d96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d84:	f383 8811 	msr	BASEPRI, r3
 8012d88:	f3bf 8f6f 	isb	sy
 8012d8c:	f3bf 8f4f 	dsb	sy
 8012d90:	623b      	str	r3, [r7, #32]
}
 8012d92:	bf00      	nop
 8012d94:	e7fe      	b.n	8012d94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d102      	bne.n	8012da2 <xQueueGenericCreateStatic+0x7e>
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d101      	bne.n	8012da6 <xQueueGenericCreateStatic+0x82>
 8012da2:	2301      	movs	r3, #1
 8012da4:	e000      	b.n	8012da8 <xQueueGenericCreateStatic+0x84>
 8012da6:	2300      	movs	r3, #0
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d10a      	bne.n	8012dc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db0:	f383 8811 	msr	BASEPRI, r3
 8012db4:	f3bf 8f6f 	isb	sy
 8012db8:	f3bf 8f4f 	dsb	sy
 8012dbc:	61fb      	str	r3, [r7, #28]
}
 8012dbe:	bf00      	nop
 8012dc0:	e7fe      	b.n	8012dc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012dc2:	2350      	movs	r3, #80	; 0x50
 8012dc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	2b50      	cmp	r3, #80	; 0x50
 8012dca:	d00a      	beq.n	8012de2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd0:	f383 8811 	msr	BASEPRI, r3
 8012dd4:	f3bf 8f6f 	isb	sy
 8012dd8:	f3bf 8f4f 	dsb	sy
 8012ddc:	61bb      	str	r3, [r7, #24]
}
 8012dde:	bf00      	nop
 8012de0:	e7fe      	b.n	8012de0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d00d      	beq.n	8012e08 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dee:	2201      	movs	r2, #1
 8012df0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012df4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfa:	9300      	str	r3, [sp, #0]
 8012dfc:	4613      	mov	r3, r2
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	68b9      	ldr	r1, [r7, #8]
 8012e02:	68f8      	ldr	r0, [r7, #12]
 8012e04:	f000 f843 	bl	8012e8e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	3730      	adds	r7, #48	; 0x30
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}

08012e12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012e12:	b580      	push	{r7, lr}
 8012e14:	b08a      	sub	sp, #40	; 0x28
 8012e16:	af02      	add	r7, sp, #8
 8012e18:	60f8      	str	r0, [r7, #12]
 8012e1a:	60b9      	str	r1, [r7, #8]
 8012e1c:	4613      	mov	r3, r2
 8012e1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d10a      	bne.n	8012e3c <xQueueGenericCreate+0x2a>
	__asm volatile
 8012e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e2a:	f383 8811 	msr	BASEPRI, r3
 8012e2e:	f3bf 8f6f 	isb	sy
 8012e32:	f3bf 8f4f 	dsb	sy
 8012e36:	613b      	str	r3, [r7, #16]
}
 8012e38:	bf00      	nop
 8012e3a:	e7fe      	b.n	8012e3a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d102      	bne.n	8012e48 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012e42:	2300      	movs	r3, #0
 8012e44:	61fb      	str	r3, [r7, #28]
 8012e46:	e004      	b.n	8012e52 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	68ba      	ldr	r2, [r7, #8]
 8012e4c:	fb02 f303 	mul.w	r3, r2, r3
 8012e50:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8012e52:	69fb      	ldr	r3, [r7, #28]
 8012e54:	3350      	adds	r3, #80	; 0x50
 8012e56:	4618      	mov	r0, r3
 8012e58:	f002 f956 	bl	8015108 <pvPortMalloc>
 8012e5c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012e5e:	69bb      	ldr	r3, [r7, #24]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d00f      	beq.n	8012e84 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8012e64:	69bb      	ldr	r3, [r7, #24]
 8012e66:	3350      	adds	r3, #80	; 0x50
 8012e68:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012e6a:	69bb      	ldr	r3, [r7, #24]
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012e72:	79fa      	ldrb	r2, [r7, #7]
 8012e74:	69bb      	ldr	r3, [r7, #24]
 8012e76:	9300      	str	r3, [sp, #0]
 8012e78:	4613      	mov	r3, r2
 8012e7a:	697a      	ldr	r2, [r7, #20]
 8012e7c:	68b9      	ldr	r1, [r7, #8]
 8012e7e:	68f8      	ldr	r0, [r7, #12]
 8012e80:	f000 f805 	bl	8012e8e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012e84:	69bb      	ldr	r3, [r7, #24]
	}
 8012e86:	4618      	mov	r0, r3
 8012e88:	3720      	adds	r7, #32
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}

08012e8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012e8e:	b580      	push	{r7, lr}
 8012e90:	b084      	sub	sp, #16
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	60f8      	str	r0, [r7, #12]
 8012e96:	60b9      	str	r1, [r7, #8]
 8012e98:	607a      	str	r2, [r7, #4]
 8012e9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012e9c:	68bb      	ldr	r3, [r7, #8]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d103      	bne.n	8012eaa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012ea2:	69bb      	ldr	r3, [r7, #24]
 8012ea4:	69ba      	ldr	r2, [r7, #24]
 8012ea6:	601a      	str	r2, [r3, #0]
 8012ea8:	e002      	b.n	8012eb0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012eaa:	69bb      	ldr	r3, [r7, #24]
 8012eac:	687a      	ldr	r2, [r7, #4]
 8012eae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	68fa      	ldr	r2, [r7, #12]
 8012eb4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012eb6:	69bb      	ldr	r3, [r7, #24]
 8012eb8:	68ba      	ldr	r2, [r7, #8]
 8012eba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012ebc:	2101      	movs	r1, #1
 8012ebe:	69b8      	ldr	r0, [r7, #24]
 8012ec0:	f7ff fec8 	bl	8012c54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	78fa      	ldrb	r2, [r7, #3]
 8012ec8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012ecc:	bf00      	nop
 8012ece:	3710      	adds	r7, #16
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}

08012ed4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b08e      	sub	sp, #56	; 0x38
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	60f8      	str	r0, [r7, #12]
 8012edc:	60b9      	str	r1, [r7, #8]
 8012ede:	607a      	str	r2, [r7, #4]
 8012ee0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d10a      	bne.n	8012f06 <xQueueGenericSend+0x32>
	__asm volatile
 8012ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ef4:	f383 8811 	msr	BASEPRI, r3
 8012ef8:	f3bf 8f6f 	isb	sy
 8012efc:	f3bf 8f4f 	dsb	sy
 8012f00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012f02:	bf00      	nop
 8012f04:	e7fe      	b.n	8012f04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f06:	68bb      	ldr	r3, [r7, #8]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d103      	bne.n	8012f14 <xQueueGenericSend+0x40>
 8012f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d101      	bne.n	8012f18 <xQueueGenericSend+0x44>
 8012f14:	2301      	movs	r3, #1
 8012f16:	e000      	b.n	8012f1a <xQueueGenericSend+0x46>
 8012f18:	2300      	movs	r3, #0
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d10a      	bne.n	8012f34 <xQueueGenericSend+0x60>
	__asm volatile
 8012f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f22:	f383 8811 	msr	BASEPRI, r3
 8012f26:	f3bf 8f6f 	isb	sy
 8012f2a:	f3bf 8f4f 	dsb	sy
 8012f2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012f30:	bf00      	nop
 8012f32:	e7fe      	b.n	8012f32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	2b02      	cmp	r3, #2
 8012f38:	d103      	bne.n	8012f42 <xQueueGenericSend+0x6e>
 8012f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f3e:	2b01      	cmp	r3, #1
 8012f40:	d101      	bne.n	8012f46 <xQueueGenericSend+0x72>
 8012f42:	2301      	movs	r3, #1
 8012f44:	e000      	b.n	8012f48 <xQueueGenericSend+0x74>
 8012f46:	2300      	movs	r3, #0
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d10a      	bne.n	8012f62 <xQueueGenericSend+0x8e>
	__asm volatile
 8012f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f50:	f383 8811 	msr	BASEPRI, r3
 8012f54:	f3bf 8f6f 	isb	sy
 8012f58:	f3bf 8f4f 	dsb	sy
 8012f5c:	623b      	str	r3, [r7, #32]
}
 8012f5e:	bf00      	nop
 8012f60:	e7fe      	b.n	8012f60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012f62:	f001 fa93 	bl	801448c <xTaskGetSchedulerState>
 8012f66:	4603      	mov	r3, r0
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d102      	bne.n	8012f72 <xQueueGenericSend+0x9e>
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d101      	bne.n	8012f76 <xQueueGenericSend+0xa2>
 8012f72:	2301      	movs	r3, #1
 8012f74:	e000      	b.n	8012f78 <xQueueGenericSend+0xa4>
 8012f76:	2300      	movs	r3, #0
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d10a      	bne.n	8012f92 <xQueueGenericSend+0xbe>
	__asm volatile
 8012f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f80:	f383 8811 	msr	BASEPRI, r3
 8012f84:	f3bf 8f6f 	isb	sy
 8012f88:	f3bf 8f4f 	dsb	sy
 8012f8c:	61fb      	str	r3, [r7, #28]
}
 8012f8e:	bf00      	nop
 8012f90:	e7fe      	b.n	8012f90 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012f92:	f001 ff97 	bl	8014ec4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d302      	bcc.n	8012fa8 <xQueueGenericSend+0xd4>
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	2b02      	cmp	r3, #2
 8012fa6:	d129      	bne.n	8012ffc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012fa8:	683a      	ldr	r2, [r7, #0]
 8012faa:	68b9      	ldr	r1, [r7, #8]
 8012fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fae:	f000 fac1 	bl	8013534 <prvCopyDataToQueue>
 8012fb2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d010      	beq.n	8012fde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fbe:	3324      	adds	r3, #36	; 0x24
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f001 f89f 	bl	8014104 <xTaskRemoveFromEventList>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d013      	beq.n	8012ff4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012fcc:	4b3f      	ldr	r3, [pc, #252]	; (80130cc <xQueueGenericSend+0x1f8>)
 8012fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fd2:	601a      	str	r2, [r3, #0]
 8012fd4:	f3bf 8f4f 	dsb	sy
 8012fd8:	f3bf 8f6f 	isb	sy
 8012fdc:	e00a      	b.n	8012ff4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d007      	beq.n	8012ff4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012fe4:	4b39      	ldr	r3, [pc, #228]	; (80130cc <xQueueGenericSend+0x1f8>)
 8012fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fea:	601a      	str	r2, [r3, #0]
 8012fec:	f3bf 8f4f 	dsb	sy
 8012ff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012ff4:	f001 ff96 	bl	8014f24 <vPortExitCritical>
				return pdPASS;
 8012ff8:	2301      	movs	r3, #1
 8012ffa:	e063      	b.n	80130c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d103      	bne.n	801300a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013002:	f001 ff8f 	bl	8014f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013006:	2300      	movs	r3, #0
 8013008:	e05c      	b.n	80130c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801300c:	2b00      	cmp	r3, #0
 801300e:	d106      	bne.n	801301e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013010:	f107 0314 	add.w	r3, r7, #20
 8013014:	4618      	mov	r0, r3
 8013016:	f001 f8d9 	bl	80141cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801301a:	2301      	movs	r3, #1
 801301c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801301e:	f001 ff81 	bl	8014f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013022:	f000 fe2d 	bl	8013c80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013026:	f001 ff4d 	bl	8014ec4 <vPortEnterCritical>
 801302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801302c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013030:	b25b      	sxtb	r3, r3
 8013032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013036:	d103      	bne.n	8013040 <xQueueGenericSend+0x16c>
 8013038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801303a:	2200      	movs	r2, #0
 801303c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013046:	b25b      	sxtb	r3, r3
 8013048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801304c:	d103      	bne.n	8013056 <xQueueGenericSend+0x182>
 801304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013050:	2200      	movs	r2, #0
 8013052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013056:	f001 ff65 	bl	8014f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801305a:	1d3a      	adds	r2, r7, #4
 801305c:	f107 0314 	add.w	r3, r7, #20
 8013060:	4611      	mov	r1, r2
 8013062:	4618      	mov	r0, r3
 8013064:	f001 f8c8 	bl	80141f8 <xTaskCheckForTimeOut>
 8013068:	4603      	mov	r3, r0
 801306a:	2b00      	cmp	r3, #0
 801306c:	d124      	bne.n	80130b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801306e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013070:	f000 fb58 	bl	8013724 <prvIsQueueFull>
 8013074:	4603      	mov	r3, r0
 8013076:	2b00      	cmp	r3, #0
 8013078:	d018      	beq.n	80130ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801307c:	3310      	adds	r3, #16
 801307e:	687a      	ldr	r2, [r7, #4]
 8013080:	4611      	mov	r1, r2
 8013082:	4618      	mov	r0, r3
 8013084:	f000 ffee 	bl	8014064 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801308a:	f000 fae3 	bl	8013654 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801308e:	f000 fe05 	bl	8013c9c <xTaskResumeAll>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	f47f af7c 	bne.w	8012f92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801309a:	4b0c      	ldr	r3, [pc, #48]	; (80130cc <xQueueGenericSend+0x1f8>)
 801309c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130a0:	601a      	str	r2, [r3, #0]
 80130a2:	f3bf 8f4f 	dsb	sy
 80130a6:	f3bf 8f6f 	isb	sy
 80130aa:	e772      	b.n	8012f92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80130ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130ae:	f000 fad1 	bl	8013654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80130b2:	f000 fdf3 	bl	8013c9c <xTaskResumeAll>
 80130b6:	e76c      	b.n	8012f92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80130b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130ba:	f000 facb 	bl	8013654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80130be:	f000 fded 	bl	8013c9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80130c2:	2300      	movs	r3, #0
		}
	}
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3738      	adds	r7, #56	; 0x38
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}
 80130cc:	e000ed04 	.word	0xe000ed04

080130d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b08e      	sub	sp, #56	; 0x38
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	60f8      	str	r0, [r7, #12]
 80130d8:	60b9      	str	r1, [r7, #8]
 80130da:	607a      	str	r2, [r7, #4]
 80130dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80130e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d10a      	bne.n	80130fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80130e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ec:	f383 8811 	msr	BASEPRI, r3
 80130f0:	f3bf 8f6f 	isb	sy
 80130f4:	f3bf 8f4f 	dsb	sy
 80130f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80130fa:	bf00      	nop
 80130fc:	e7fe      	b.n	80130fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d103      	bne.n	801310c <xQueueGenericSendFromISR+0x3c>
 8013104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013108:	2b00      	cmp	r3, #0
 801310a:	d101      	bne.n	8013110 <xQueueGenericSendFromISR+0x40>
 801310c:	2301      	movs	r3, #1
 801310e:	e000      	b.n	8013112 <xQueueGenericSendFromISR+0x42>
 8013110:	2300      	movs	r3, #0
 8013112:	2b00      	cmp	r3, #0
 8013114:	d10a      	bne.n	801312c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801311a:	f383 8811 	msr	BASEPRI, r3
 801311e:	f3bf 8f6f 	isb	sy
 8013122:	f3bf 8f4f 	dsb	sy
 8013126:	623b      	str	r3, [r7, #32]
}
 8013128:	bf00      	nop
 801312a:	e7fe      	b.n	801312a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	2b02      	cmp	r3, #2
 8013130:	d103      	bne.n	801313a <xQueueGenericSendFromISR+0x6a>
 8013132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013136:	2b01      	cmp	r3, #1
 8013138:	d101      	bne.n	801313e <xQueueGenericSendFromISR+0x6e>
 801313a:	2301      	movs	r3, #1
 801313c:	e000      	b.n	8013140 <xQueueGenericSendFromISR+0x70>
 801313e:	2300      	movs	r3, #0
 8013140:	2b00      	cmp	r3, #0
 8013142:	d10a      	bne.n	801315a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013148:	f383 8811 	msr	BASEPRI, r3
 801314c:	f3bf 8f6f 	isb	sy
 8013150:	f3bf 8f4f 	dsb	sy
 8013154:	61fb      	str	r3, [r7, #28]
}
 8013156:	bf00      	nop
 8013158:	e7fe      	b.n	8013158 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801315a:	f001 ff95 	bl	8015088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801315e:	f3ef 8211 	mrs	r2, BASEPRI
 8013162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013166:	f383 8811 	msr	BASEPRI, r3
 801316a:	f3bf 8f6f 	isb	sy
 801316e:	f3bf 8f4f 	dsb	sy
 8013172:	61ba      	str	r2, [r7, #24]
 8013174:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013176:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013178:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801317c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013182:	429a      	cmp	r2, r3
 8013184:	d302      	bcc.n	801318c <xQueueGenericSendFromISR+0xbc>
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	2b02      	cmp	r3, #2
 801318a:	d12c      	bne.n	80131e6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801318e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013196:	683a      	ldr	r2, [r7, #0]
 8013198:	68b9      	ldr	r1, [r7, #8]
 801319a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801319c:	f000 f9ca 	bl	8013534 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80131a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80131a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a8:	d112      	bne.n	80131d0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80131aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d016      	beq.n	80131e0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80131b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131b4:	3324      	adds	r3, #36	; 0x24
 80131b6:	4618      	mov	r0, r3
 80131b8:	f000 ffa4 	bl	8014104 <xTaskRemoveFromEventList>
 80131bc:	4603      	mov	r3, r0
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d00e      	beq.n	80131e0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d00b      	beq.n	80131e0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2201      	movs	r2, #1
 80131cc:	601a      	str	r2, [r3, #0]
 80131ce:	e007      	b.n	80131e0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80131d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80131d4:	3301      	adds	r3, #1
 80131d6:	b2db      	uxtb	r3, r3
 80131d8:	b25a      	sxtb	r2, r3
 80131da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80131e0:	2301      	movs	r3, #1
 80131e2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80131e4:	e001      	b.n	80131ea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80131e6:	2300      	movs	r3, #0
 80131e8:	637b      	str	r3, [r7, #52]	; 0x34
 80131ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80131f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80131f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3738      	adds	r7, #56	; 0x38
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}

08013200 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b08c      	sub	sp, #48	; 0x30
 8013204:	af00      	add	r7, sp, #0
 8013206:	60f8      	str	r0, [r7, #12]
 8013208:	60b9      	str	r1, [r7, #8]
 801320a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801320c:	2300      	movs	r3, #0
 801320e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013216:	2b00      	cmp	r3, #0
 8013218:	d10a      	bne.n	8013230 <xQueueReceive+0x30>
	__asm volatile
 801321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801321e:	f383 8811 	msr	BASEPRI, r3
 8013222:	f3bf 8f6f 	isb	sy
 8013226:	f3bf 8f4f 	dsb	sy
 801322a:	623b      	str	r3, [r7, #32]
}
 801322c:	bf00      	nop
 801322e:	e7fe      	b.n	801322e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d103      	bne.n	801323e <xQueueReceive+0x3e>
 8013236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801323a:	2b00      	cmp	r3, #0
 801323c:	d101      	bne.n	8013242 <xQueueReceive+0x42>
 801323e:	2301      	movs	r3, #1
 8013240:	e000      	b.n	8013244 <xQueueReceive+0x44>
 8013242:	2300      	movs	r3, #0
 8013244:	2b00      	cmp	r3, #0
 8013246:	d10a      	bne.n	801325e <xQueueReceive+0x5e>
	__asm volatile
 8013248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801324c:	f383 8811 	msr	BASEPRI, r3
 8013250:	f3bf 8f6f 	isb	sy
 8013254:	f3bf 8f4f 	dsb	sy
 8013258:	61fb      	str	r3, [r7, #28]
}
 801325a:	bf00      	nop
 801325c:	e7fe      	b.n	801325c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801325e:	f001 f915 	bl	801448c <xTaskGetSchedulerState>
 8013262:	4603      	mov	r3, r0
 8013264:	2b00      	cmp	r3, #0
 8013266:	d102      	bne.n	801326e <xQueueReceive+0x6e>
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d101      	bne.n	8013272 <xQueueReceive+0x72>
 801326e:	2301      	movs	r3, #1
 8013270:	e000      	b.n	8013274 <xQueueReceive+0x74>
 8013272:	2300      	movs	r3, #0
 8013274:	2b00      	cmp	r3, #0
 8013276:	d10a      	bne.n	801328e <xQueueReceive+0x8e>
	__asm volatile
 8013278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801327c:	f383 8811 	msr	BASEPRI, r3
 8013280:	f3bf 8f6f 	isb	sy
 8013284:	f3bf 8f4f 	dsb	sy
 8013288:	61bb      	str	r3, [r7, #24]
}
 801328a:	bf00      	nop
 801328c:	e7fe      	b.n	801328c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801328e:	f001 fe19 	bl	8014ec4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013296:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801329a:	2b00      	cmp	r3, #0
 801329c:	d01f      	beq.n	80132de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801329e:	68b9      	ldr	r1, [r7, #8]
 80132a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132a2:	f000 f9b1 	bl	8013608 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80132a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132a8:	1e5a      	subs	r2, r3, #1
 80132aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80132ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b0:	691b      	ldr	r3, [r3, #16]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d00f      	beq.n	80132d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80132b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b8:	3310      	adds	r3, #16
 80132ba:	4618      	mov	r0, r3
 80132bc:	f000 ff22 	bl	8014104 <xTaskRemoveFromEventList>
 80132c0:	4603      	mov	r3, r0
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d007      	beq.n	80132d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80132c6:	4b3d      	ldr	r3, [pc, #244]	; (80133bc <xQueueReceive+0x1bc>)
 80132c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132cc:	601a      	str	r2, [r3, #0]
 80132ce:	f3bf 8f4f 	dsb	sy
 80132d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80132d6:	f001 fe25 	bl	8014f24 <vPortExitCritical>
				return pdPASS;
 80132da:	2301      	movs	r3, #1
 80132dc:	e069      	b.n	80133b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d103      	bne.n	80132ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80132e4:	f001 fe1e 	bl	8014f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80132e8:	2300      	movs	r3, #0
 80132ea:	e062      	b.n	80133b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80132ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d106      	bne.n	8013300 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80132f2:	f107 0310 	add.w	r3, r7, #16
 80132f6:	4618      	mov	r0, r3
 80132f8:	f000 ff68 	bl	80141cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80132fc:	2301      	movs	r3, #1
 80132fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013300:	f001 fe10 	bl	8014f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013304:	f000 fcbc 	bl	8013c80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013308:	f001 fddc 	bl	8014ec4 <vPortEnterCritical>
 801330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801330e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013312:	b25b      	sxtb	r3, r3
 8013314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013318:	d103      	bne.n	8013322 <xQueueReceive+0x122>
 801331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801331c:	2200      	movs	r2, #0
 801331e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013328:	b25b      	sxtb	r3, r3
 801332a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801332e:	d103      	bne.n	8013338 <xQueueReceive+0x138>
 8013330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013332:	2200      	movs	r2, #0
 8013334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013338:	f001 fdf4 	bl	8014f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801333c:	1d3a      	adds	r2, r7, #4
 801333e:	f107 0310 	add.w	r3, r7, #16
 8013342:	4611      	mov	r1, r2
 8013344:	4618      	mov	r0, r3
 8013346:	f000 ff57 	bl	80141f8 <xTaskCheckForTimeOut>
 801334a:	4603      	mov	r3, r0
 801334c:	2b00      	cmp	r3, #0
 801334e:	d123      	bne.n	8013398 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013352:	f000 f9d1 	bl	80136f8 <prvIsQueueEmpty>
 8013356:	4603      	mov	r3, r0
 8013358:	2b00      	cmp	r3, #0
 801335a:	d017      	beq.n	801338c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801335e:	3324      	adds	r3, #36	; 0x24
 8013360:	687a      	ldr	r2, [r7, #4]
 8013362:	4611      	mov	r1, r2
 8013364:	4618      	mov	r0, r3
 8013366:	f000 fe7d 	bl	8014064 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801336a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801336c:	f000 f972 	bl	8013654 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013370:	f000 fc94 	bl	8013c9c <xTaskResumeAll>
 8013374:	4603      	mov	r3, r0
 8013376:	2b00      	cmp	r3, #0
 8013378:	d189      	bne.n	801328e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801337a:	4b10      	ldr	r3, [pc, #64]	; (80133bc <xQueueReceive+0x1bc>)
 801337c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013380:	601a      	str	r2, [r3, #0]
 8013382:	f3bf 8f4f 	dsb	sy
 8013386:	f3bf 8f6f 	isb	sy
 801338a:	e780      	b.n	801328e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801338c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801338e:	f000 f961 	bl	8013654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013392:	f000 fc83 	bl	8013c9c <xTaskResumeAll>
 8013396:	e77a      	b.n	801328e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801339a:	f000 f95b 	bl	8013654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801339e:	f000 fc7d 	bl	8013c9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80133a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133a4:	f000 f9a8 	bl	80136f8 <prvIsQueueEmpty>
 80133a8:	4603      	mov	r3, r0
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	f43f af6f 	beq.w	801328e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80133b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3730      	adds	r7, #48	; 0x30
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	bf00      	nop
 80133bc:	e000ed04 	.word	0xe000ed04

080133c0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b08e      	sub	sp, #56	; 0x38
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	60f8      	str	r0, [r7, #12]
 80133c8:	60b9      	str	r1, [r7, #8]
 80133ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80133d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d10a      	bne.n	80133ec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80133d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133da:	f383 8811 	msr	BASEPRI, r3
 80133de:	f3bf 8f6f 	isb	sy
 80133e2:	f3bf 8f4f 	dsb	sy
 80133e6:	623b      	str	r3, [r7, #32]
}
 80133e8:	bf00      	nop
 80133ea:	e7fe      	b.n	80133ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d103      	bne.n	80133fa <xQueueReceiveFromISR+0x3a>
 80133f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d101      	bne.n	80133fe <xQueueReceiveFromISR+0x3e>
 80133fa:	2301      	movs	r3, #1
 80133fc:	e000      	b.n	8013400 <xQueueReceiveFromISR+0x40>
 80133fe:	2300      	movs	r3, #0
 8013400:	2b00      	cmp	r3, #0
 8013402:	d10a      	bne.n	801341a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013408:	f383 8811 	msr	BASEPRI, r3
 801340c:	f3bf 8f6f 	isb	sy
 8013410:	f3bf 8f4f 	dsb	sy
 8013414:	61fb      	str	r3, [r7, #28]
}
 8013416:	bf00      	nop
 8013418:	e7fe      	b.n	8013418 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801341a:	f001 fe35 	bl	8015088 <vPortValidateInterruptPriority>
	__asm volatile
 801341e:	f3ef 8211 	mrs	r2, BASEPRI
 8013422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013426:	f383 8811 	msr	BASEPRI, r3
 801342a:	f3bf 8f6f 	isb	sy
 801342e:	f3bf 8f4f 	dsb	sy
 8013432:	61ba      	str	r2, [r7, #24]
 8013434:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013436:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013438:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801343e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013442:	2b00      	cmp	r3, #0
 8013444:	d02f      	beq.n	80134a6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801344c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013450:	68b9      	ldr	r1, [r7, #8]
 8013452:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013454:	f000 f8d8 	bl	8013608 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801345a:	1e5a      	subs	r2, r3, #1
 801345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801345e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013460:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013468:	d112      	bne.n	8013490 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801346c:	691b      	ldr	r3, [r3, #16]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d016      	beq.n	80134a0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013474:	3310      	adds	r3, #16
 8013476:	4618      	mov	r0, r3
 8013478:	f000 fe44 	bl	8014104 <xTaskRemoveFromEventList>
 801347c:	4603      	mov	r3, r0
 801347e:	2b00      	cmp	r3, #0
 8013480:	d00e      	beq.n	80134a0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d00b      	beq.n	80134a0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2201      	movs	r2, #1
 801348c:	601a      	str	r2, [r3, #0]
 801348e:	e007      	b.n	80134a0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013494:	3301      	adds	r3, #1
 8013496:	b2db      	uxtb	r3, r3
 8013498:	b25a      	sxtb	r2, r3
 801349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801349c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80134a0:	2301      	movs	r3, #1
 80134a2:	637b      	str	r3, [r7, #52]	; 0x34
 80134a4:	e001      	b.n	80134aa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80134a6:	2300      	movs	r3, #0
 80134a8:	637b      	str	r3, [r7, #52]	; 0x34
 80134aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80134ae:	693b      	ldr	r3, [r7, #16]
 80134b0:	f383 8811 	msr	BASEPRI, r3
}
 80134b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80134b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3738      	adds	r7, #56	; 0x38
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}

080134c0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b084      	sub	sp, #16
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d10a      	bne.n	80134e4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80134ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d2:	f383 8811 	msr	BASEPRI, r3
 80134d6:	f3bf 8f6f 	isb	sy
 80134da:	f3bf 8f4f 	dsb	sy
 80134de:	60bb      	str	r3, [r7, #8]
}
 80134e0:	bf00      	nop
 80134e2:	e7fe      	b.n	80134e2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80134e4:	f001 fcee 	bl	8014ec4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134ec:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80134ee:	f001 fd19 	bl	8014f24 <vPortExitCritical>

	return uxReturn;
 80134f2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80134f4:	4618      	mov	r0, r3
 80134f6:	3710      	adds	r7, #16
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bd80      	pop	{r7, pc}

080134fc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80134fc:	b480      	push	{r7}
 80134fe:	b085      	sub	sp, #20
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d10a      	bne.n	8013520 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 801350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801350e:	f383 8811 	msr	BASEPRI, r3
 8013512:	f3bf 8f6f 	isb	sy
 8013516:	f3bf 8f4f 	dsb	sy
 801351a:	60bb      	str	r3, [r7, #8]
}
 801351c:	bf00      	nop
 801351e:	e7fe      	b.n	801351e <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013524:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8013526:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013528:	4618      	mov	r0, r3
 801352a:	3714      	adds	r7, #20
 801352c:	46bd      	mov	sp, r7
 801352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013532:	4770      	bx	lr

08013534 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b086      	sub	sp, #24
 8013538:	af00      	add	r7, sp, #0
 801353a:	60f8      	str	r0, [r7, #12]
 801353c:	60b9      	str	r1, [r7, #8]
 801353e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013540:	2300      	movs	r3, #0
 8013542:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013548:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801354e:	2b00      	cmp	r3, #0
 8013550:	d10d      	bne.n	801356e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d14d      	bne.n	80135f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	4618      	mov	r0, r3
 8013560:	f000 ffb2 	bl	80144c8 <xTaskPriorityDisinherit>
 8013564:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	2200      	movs	r2, #0
 801356a:	605a      	str	r2, [r3, #4]
 801356c:	e043      	b.n	80135f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d119      	bne.n	80135a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	6898      	ldr	r0, [r3, #8]
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801357c:	461a      	mov	r2, r3
 801357e:	68b9      	ldr	r1, [r7, #8]
 8013580:	f002 fa38 	bl	80159f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	689a      	ldr	r2, [r3, #8]
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801358c:	441a      	add	r2, r3
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	689a      	ldr	r2, [r3, #8]
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	429a      	cmp	r2, r3
 801359c:	d32b      	bcc.n	80135f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	681a      	ldr	r2, [r3, #0]
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	609a      	str	r2, [r3, #8]
 80135a6:	e026      	b.n	80135f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	68d8      	ldr	r0, [r3, #12]
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135b0:	461a      	mov	r2, r3
 80135b2:	68b9      	ldr	r1, [r7, #8]
 80135b4:	f002 fa1e 	bl	80159f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	68da      	ldr	r2, [r3, #12]
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135c0:	425b      	negs	r3, r3
 80135c2:	441a      	add	r2, r3
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	68da      	ldr	r2, [r3, #12]
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	429a      	cmp	r2, r3
 80135d2:	d207      	bcs.n	80135e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	685a      	ldr	r2, [r3, #4]
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135dc:	425b      	negs	r3, r3
 80135de:	441a      	add	r2, r3
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2b02      	cmp	r3, #2
 80135e8:	d105      	bne.n	80135f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d002      	beq.n	80135f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	3b01      	subs	r3, #1
 80135f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	1c5a      	adds	r2, r3, #1
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80135fe:	697b      	ldr	r3, [r7, #20]
}
 8013600:	4618      	mov	r0, r3
 8013602:	3718      	adds	r7, #24
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}

08013608 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b082      	sub	sp, #8
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
 8013610:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013616:	2b00      	cmp	r3, #0
 8013618:	d018      	beq.n	801364c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	68da      	ldr	r2, [r3, #12]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013622:	441a      	add	r2, r3
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	68da      	ldr	r2, [r3, #12]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	685b      	ldr	r3, [r3, #4]
 8013630:	429a      	cmp	r2, r3
 8013632:	d303      	bcc.n	801363c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681a      	ldr	r2, [r3, #0]
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	68d9      	ldr	r1, [r3, #12]
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013644:	461a      	mov	r2, r3
 8013646:	6838      	ldr	r0, [r7, #0]
 8013648:	f002 f9d4 	bl	80159f4 <memcpy>
	}
}
 801364c:	bf00      	nop
 801364e:	3708      	adds	r7, #8
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}

08013654 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b084      	sub	sp, #16
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801365c:	f001 fc32 	bl	8014ec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013666:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013668:	e011      	b.n	801368e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801366e:	2b00      	cmp	r3, #0
 8013670:	d012      	beq.n	8013698 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	3324      	adds	r3, #36	; 0x24
 8013676:	4618      	mov	r0, r3
 8013678:	f000 fd44 	bl	8014104 <xTaskRemoveFromEventList>
 801367c:	4603      	mov	r3, r0
 801367e:	2b00      	cmp	r3, #0
 8013680:	d001      	beq.n	8013686 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013682:	f000 fe1b 	bl	80142bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013686:	7bfb      	ldrb	r3, [r7, #15]
 8013688:	3b01      	subs	r3, #1
 801368a:	b2db      	uxtb	r3, r3
 801368c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801368e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013692:	2b00      	cmp	r3, #0
 8013694:	dce9      	bgt.n	801366a <prvUnlockQueue+0x16>
 8013696:	e000      	b.n	801369a <prvUnlockQueue+0x46>
					break;
 8013698:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	22ff      	movs	r2, #255	; 0xff
 801369e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80136a2:	f001 fc3f 	bl	8014f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80136a6:	f001 fc0d 	bl	8014ec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80136b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80136b2:	e011      	b.n	80136d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	691b      	ldr	r3, [r3, #16]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d012      	beq.n	80136e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	3310      	adds	r3, #16
 80136c0:	4618      	mov	r0, r3
 80136c2:	f000 fd1f 	bl	8014104 <xTaskRemoveFromEventList>
 80136c6:	4603      	mov	r3, r0
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d001      	beq.n	80136d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80136cc:	f000 fdf6 	bl	80142bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80136d0:	7bbb      	ldrb	r3, [r7, #14]
 80136d2:	3b01      	subs	r3, #1
 80136d4:	b2db      	uxtb	r3, r3
 80136d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80136d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	dce9      	bgt.n	80136b4 <prvUnlockQueue+0x60>
 80136e0:	e000      	b.n	80136e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80136e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	22ff      	movs	r2, #255	; 0xff
 80136e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80136ec:	f001 fc1a 	bl	8014f24 <vPortExitCritical>
}
 80136f0:	bf00      	nop
 80136f2:	3710      	adds	r7, #16
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}

080136f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b084      	sub	sp, #16
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013700:	f001 fbe0 	bl	8014ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013708:	2b00      	cmp	r3, #0
 801370a:	d102      	bne.n	8013712 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801370c:	2301      	movs	r3, #1
 801370e:	60fb      	str	r3, [r7, #12]
 8013710:	e001      	b.n	8013716 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013712:	2300      	movs	r3, #0
 8013714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013716:	f001 fc05 	bl	8014f24 <vPortExitCritical>

	return xReturn;
 801371a:	68fb      	ldr	r3, [r7, #12]
}
 801371c:	4618      	mov	r0, r3
 801371e:	3710      	adds	r7, #16
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}

08013724 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b084      	sub	sp, #16
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801372c:	f001 fbca 	bl	8014ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013738:	429a      	cmp	r2, r3
 801373a:	d102      	bne.n	8013742 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801373c:	2301      	movs	r3, #1
 801373e:	60fb      	str	r3, [r7, #12]
 8013740:	e001      	b.n	8013746 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013742:	2300      	movs	r3, #0
 8013744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013746:	f001 fbed 	bl	8014f24 <vPortExitCritical>

	return xReturn;
 801374a:	68fb      	ldr	r3, [r7, #12]
}
 801374c:	4618      	mov	r0, r3
 801374e:	3710      	adds	r7, #16
 8013750:	46bd      	mov	sp, r7
 8013752:	bd80      	pop	{r7, pc}

08013754 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013754:	b480      	push	{r7}
 8013756:	b085      	sub	sp, #20
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
 801375c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801375e:	2300      	movs	r3, #0
 8013760:	60fb      	str	r3, [r7, #12]
 8013762:	e014      	b.n	801378e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013764:	4a0f      	ldr	r2, [pc, #60]	; (80137a4 <vQueueAddToRegistry+0x50>)
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d10b      	bne.n	8013788 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013770:	490c      	ldr	r1, [pc, #48]	; (80137a4 <vQueueAddToRegistry+0x50>)
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	683a      	ldr	r2, [r7, #0]
 8013776:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801377a:	4a0a      	ldr	r2, [pc, #40]	; (80137a4 <vQueueAddToRegistry+0x50>)
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	00db      	lsls	r3, r3, #3
 8013780:	4413      	add	r3, r2
 8013782:	687a      	ldr	r2, [r7, #4]
 8013784:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013786:	e006      	b.n	8013796 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	3301      	adds	r3, #1
 801378c:	60fb      	str	r3, [r7, #12]
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	2b07      	cmp	r3, #7
 8013792:	d9e7      	bls.n	8013764 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013794:	bf00      	nop
 8013796:	bf00      	nop
 8013798:	3714      	adds	r7, #20
 801379a:	46bd      	mov	sp, r7
 801379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a0:	4770      	bx	lr
 80137a2:	bf00      	nop
 80137a4:	20002d74 	.word	0x20002d74

080137a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b086      	sub	sp, #24
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	60f8      	str	r0, [r7, #12]
 80137b0:	60b9      	str	r1, [r7, #8]
 80137b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80137b8:	f001 fb84 	bl	8014ec4 <vPortEnterCritical>
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80137c2:	b25b      	sxtb	r3, r3
 80137c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137c8:	d103      	bne.n	80137d2 <vQueueWaitForMessageRestricted+0x2a>
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	2200      	movs	r2, #0
 80137ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80137d8:	b25b      	sxtb	r3, r3
 80137da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137de:	d103      	bne.n	80137e8 <vQueueWaitForMessageRestricted+0x40>
 80137e0:	697b      	ldr	r3, [r7, #20]
 80137e2:	2200      	movs	r2, #0
 80137e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80137e8:	f001 fb9c 	bl	8014f24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d106      	bne.n	8013802 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	3324      	adds	r3, #36	; 0x24
 80137f8:	687a      	ldr	r2, [r7, #4]
 80137fa:	68b9      	ldr	r1, [r7, #8]
 80137fc:	4618      	mov	r0, r3
 80137fe:	f000 fc55 	bl	80140ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013802:	6978      	ldr	r0, [r7, #20]
 8013804:	f7ff ff26 	bl	8013654 <prvUnlockQueue>
	}
 8013808:	bf00      	nop
 801380a:	3718      	adds	r7, #24
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}

08013810 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013810:	b580      	push	{r7, lr}
 8013812:	b08e      	sub	sp, #56	; 0x38
 8013814:	af04      	add	r7, sp, #16
 8013816:	60f8      	str	r0, [r7, #12]
 8013818:	60b9      	str	r1, [r7, #8]
 801381a:	607a      	str	r2, [r7, #4]
 801381c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801381e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013820:	2b00      	cmp	r3, #0
 8013822:	d10a      	bne.n	801383a <xTaskCreateStatic+0x2a>
	__asm volatile
 8013824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013828:	f383 8811 	msr	BASEPRI, r3
 801382c:	f3bf 8f6f 	isb	sy
 8013830:	f3bf 8f4f 	dsb	sy
 8013834:	623b      	str	r3, [r7, #32]
}
 8013836:	bf00      	nop
 8013838:	e7fe      	b.n	8013838 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801383c:	2b00      	cmp	r3, #0
 801383e:	d10a      	bne.n	8013856 <xTaskCreateStatic+0x46>
	__asm volatile
 8013840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013844:	f383 8811 	msr	BASEPRI, r3
 8013848:	f3bf 8f6f 	isb	sy
 801384c:	f3bf 8f4f 	dsb	sy
 8013850:	61fb      	str	r3, [r7, #28]
}
 8013852:	bf00      	nop
 8013854:	e7fe      	b.n	8013854 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013856:	2360      	movs	r3, #96	; 0x60
 8013858:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	2b60      	cmp	r3, #96	; 0x60
 801385e:	d00a      	beq.n	8013876 <xTaskCreateStatic+0x66>
	__asm volatile
 8013860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013864:	f383 8811 	msr	BASEPRI, r3
 8013868:	f3bf 8f6f 	isb	sy
 801386c:	f3bf 8f4f 	dsb	sy
 8013870:	61bb      	str	r3, [r7, #24]
}
 8013872:	bf00      	nop
 8013874:	e7fe      	b.n	8013874 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013878:	2b00      	cmp	r3, #0
 801387a:	d01e      	beq.n	80138ba <xTaskCreateStatic+0xaa>
 801387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801387e:	2b00      	cmp	r3, #0
 8013880:	d01b      	beq.n	80138ba <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013884:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801388a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388e:	2202      	movs	r2, #2
 8013890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013894:	2300      	movs	r3, #0
 8013896:	9303      	str	r3, [sp, #12]
 8013898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389a:	9302      	str	r3, [sp, #8]
 801389c:	f107 0314 	add.w	r3, r7, #20
 80138a0:	9301      	str	r3, [sp, #4]
 80138a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a4:	9300      	str	r3, [sp, #0]
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	687a      	ldr	r2, [r7, #4]
 80138aa:	68b9      	ldr	r1, [r7, #8]
 80138ac:	68f8      	ldr	r0, [r7, #12]
 80138ae:	f000 f850 	bl	8013952 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80138b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138b4:	f000 f8d8 	bl	8013a68 <prvAddNewTaskToReadyList>
 80138b8:	e001      	b.n	80138be <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80138ba:	2300      	movs	r3, #0
 80138bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80138be:	697b      	ldr	r3, [r7, #20]
	}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3728      	adds	r7, #40	; 0x28
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}

080138c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b08c      	sub	sp, #48	; 0x30
 80138cc:	af04      	add	r7, sp, #16
 80138ce:	60f8      	str	r0, [r7, #12]
 80138d0:	60b9      	str	r1, [r7, #8]
 80138d2:	603b      	str	r3, [r7, #0]
 80138d4:	4613      	mov	r3, r2
 80138d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138d8:	88fb      	ldrh	r3, [r7, #6]
 80138da:	009b      	lsls	r3, r3, #2
 80138dc:	4618      	mov	r0, r3
 80138de:	f001 fc13 	bl	8015108 <pvPortMalloc>
 80138e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d00e      	beq.n	8013908 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80138ea:	2060      	movs	r0, #96	; 0x60
 80138ec:	f001 fc0c 	bl	8015108 <pvPortMalloc>
 80138f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80138f2:	69fb      	ldr	r3, [r7, #28]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d003      	beq.n	8013900 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80138f8:	69fb      	ldr	r3, [r7, #28]
 80138fa:	697a      	ldr	r2, [r7, #20]
 80138fc:	631a      	str	r2, [r3, #48]	; 0x30
 80138fe:	e005      	b.n	801390c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013900:	6978      	ldr	r0, [r7, #20]
 8013902:	f001 fc47 	bl	8015194 <vPortFree>
 8013906:	e001      	b.n	801390c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013908:	2300      	movs	r3, #0
 801390a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d017      	beq.n	8013942 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013912:	69fb      	ldr	r3, [r7, #28]
 8013914:	2200      	movs	r2, #0
 8013916:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801391a:	88fa      	ldrh	r2, [r7, #6]
 801391c:	2300      	movs	r3, #0
 801391e:	9303      	str	r3, [sp, #12]
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	9302      	str	r3, [sp, #8]
 8013924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013926:	9301      	str	r3, [sp, #4]
 8013928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801392a:	9300      	str	r3, [sp, #0]
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	68b9      	ldr	r1, [r7, #8]
 8013930:	68f8      	ldr	r0, [r7, #12]
 8013932:	f000 f80e 	bl	8013952 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013936:	69f8      	ldr	r0, [r7, #28]
 8013938:	f000 f896 	bl	8013a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801393c:	2301      	movs	r3, #1
 801393e:	61bb      	str	r3, [r7, #24]
 8013940:	e002      	b.n	8013948 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013942:	f04f 33ff 	mov.w	r3, #4294967295
 8013946:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013948:	69bb      	ldr	r3, [r7, #24]
	}
 801394a:	4618      	mov	r0, r3
 801394c:	3720      	adds	r7, #32
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}

08013952 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013952:	b580      	push	{r7, lr}
 8013954:	b088      	sub	sp, #32
 8013956:	af00      	add	r7, sp, #0
 8013958:	60f8      	str	r0, [r7, #12]
 801395a:	60b9      	str	r1, [r7, #8]
 801395c:	607a      	str	r2, [r7, #4]
 801395e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013962:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	009b      	lsls	r3, r3, #2
 8013968:	461a      	mov	r2, r3
 801396a:	21a5      	movs	r1, #165	; 0xa5
 801396c:	f002 f850 	bl	8015a10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801397a:	3b01      	subs	r3, #1
 801397c:	009b      	lsls	r3, r3, #2
 801397e:	4413      	add	r3, r2
 8013980:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013982:	69bb      	ldr	r3, [r7, #24]
 8013984:	f023 0307 	bic.w	r3, r3, #7
 8013988:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801398a:	69bb      	ldr	r3, [r7, #24]
 801398c:	f003 0307 	and.w	r3, r3, #7
 8013990:	2b00      	cmp	r3, #0
 8013992:	d00a      	beq.n	80139aa <prvInitialiseNewTask+0x58>
	__asm volatile
 8013994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013998:	f383 8811 	msr	BASEPRI, r3
 801399c:	f3bf 8f6f 	isb	sy
 80139a0:	f3bf 8f4f 	dsb	sy
 80139a4:	617b      	str	r3, [r7, #20]
}
 80139a6:	bf00      	nop
 80139a8:	e7fe      	b.n	80139a8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139aa:	2300      	movs	r3, #0
 80139ac:	61fb      	str	r3, [r7, #28]
 80139ae:	e012      	b.n	80139d6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80139b0:	68ba      	ldr	r2, [r7, #8]
 80139b2:	69fb      	ldr	r3, [r7, #28]
 80139b4:	4413      	add	r3, r2
 80139b6:	7819      	ldrb	r1, [r3, #0]
 80139b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139ba:	69fb      	ldr	r3, [r7, #28]
 80139bc:	4413      	add	r3, r2
 80139be:	3334      	adds	r3, #52	; 0x34
 80139c0:	460a      	mov	r2, r1
 80139c2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80139c4:	68ba      	ldr	r2, [r7, #8]
 80139c6:	69fb      	ldr	r3, [r7, #28]
 80139c8:	4413      	add	r3, r2
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d006      	beq.n	80139de <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139d0:	69fb      	ldr	r3, [r7, #28]
 80139d2:	3301      	adds	r3, #1
 80139d4:	61fb      	str	r3, [r7, #28]
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	2b0f      	cmp	r3, #15
 80139da:	d9e9      	bls.n	80139b0 <prvInitialiseNewTask+0x5e>
 80139dc:	e000      	b.n	80139e0 <prvInitialiseNewTask+0x8e>
		{
			break;
 80139de:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80139e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e2:	2200      	movs	r2, #0
 80139e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80139e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ea:	2b37      	cmp	r3, #55	; 0x37
 80139ec:	d901      	bls.n	80139f2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80139ee:	2337      	movs	r3, #55	; 0x37
 80139f0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80139f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80139f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80139fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a00:	2200      	movs	r2, #0
 8013a02:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a06:	3304      	adds	r3, #4
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7ff f88f 	bl	8012b2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a10:	3318      	adds	r3, #24
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7ff f88a 	bl	8012b2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a2c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a30:	2200      	movs	r2, #0
 8013a32:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a36:	2200      	movs	r2, #0
 8013a38:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013a42:	683a      	ldr	r2, [r7, #0]
 8013a44:	68f9      	ldr	r1, [r7, #12]
 8013a46:	69b8      	ldr	r0, [r7, #24]
 8013a48:	f001 f912 	bl	8014c70 <pxPortInitialiseStack>
 8013a4c:	4602      	mov	r2, r0
 8013a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a50:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8013a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d002      	beq.n	8013a5e <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a5e:	bf00      	nop
 8013a60:	3720      	adds	r7, #32
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}
	...

08013a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b082      	sub	sp, #8
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013a70:	f001 fa28 	bl	8014ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013a74:	4b2d      	ldr	r3, [pc, #180]	; (8013b2c <prvAddNewTaskToReadyList+0xc4>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	3301      	adds	r3, #1
 8013a7a:	4a2c      	ldr	r2, [pc, #176]	; (8013b2c <prvAddNewTaskToReadyList+0xc4>)
 8013a7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013a7e:	4b2c      	ldr	r3, [pc, #176]	; (8013b30 <prvAddNewTaskToReadyList+0xc8>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d109      	bne.n	8013a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013a86:	4a2a      	ldr	r2, [pc, #168]	; (8013b30 <prvAddNewTaskToReadyList+0xc8>)
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013a8c:	4b27      	ldr	r3, [pc, #156]	; (8013b2c <prvAddNewTaskToReadyList+0xc4>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	2b01      	cmp	r3, #1
 8013a92:	d110      	bne.n	8013ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013a94:	f000 fc36 	bl	8014304 <prvInitialiseTaskLists>
 8013a98:	e00d      	b.n	8013ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013a9a:	4b26      	ldr	r3, [pc, #152]	; (8013b34 <prvAddNewTaskToReadyList+0xcc>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d109      	bne.n	8013ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013aa2:	4b23      	ldr	r3, [pc, #140]	; (8013b30 <prvAddNewTaskToReadyList+0xc8>)
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d802      	bhi.n	8013ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013ab0:	4a1f      	ldr	r2, [pc, #124]	; (8013b30 <prvAddNewTaskToReadyList+0xc8>)
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013ab6:	4b20      	ldr	r3, [pc, #128]	; (8013b38 <prvAddNewTaskToReadyList+0xd0>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	3301      	adds	r3, #1
 8013abc:	4a1e      	ldr	r2, [pc, #120]	; (8013b38 <prvAddNewTaskToReadyList+0xd0>)
 8013abe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013ac0:	4b1d      	ldr	r3, [pc, #116]	; (8013b38 <prvAddNewTaskToReadyList+0xd0>)
 8013ac2:	681a      	ldr	r2, [r3, #0]
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013acc:	4b1b      	ldr	r3, [pc, #108]	; (8013b3c <prvAddNewTaskToReadyList+0xd4>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d903      	bls.n	8013adc <prvAddNewTaskToReadyList+0x74>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ad8:	4a18      	ldr	r2, [pc, #96]	; (8013b3c <prvAddNewTaskToReadyList+0xd4>)
 8013ada:	6013      	str	r3, [r2, #0]
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ae0:	4613      	mov	r3, r2
 8013ae2:	009b      	lsls	r3, r3, #2
 8013ae4:	4413      	add	r3, r2
 8013ae6:	009b      	lsls	r3, r3, #2
 8013ae8:	4a15      	ldr	r2, [pc, #84]	; (8013b40 <prvAddNewTaskToReadyList+0xd8>)
 8013aea:	441a      	add	r2, r3
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	3304      	adds	r3, #4
 8013af0:	4619      	mov	r1, r3
 8013af2:	4610      	mov	r0, r2
 8013af4:	f7ff f827 	bl	8012b46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013af8:	f001 fa14 	bl	8014f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013afc:	4b0d      	ldr	r3, [pc, #52]	; (8013b34 <prvAddNewTaskToReadyList+0xcc>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d00e      	beq.n	8013b22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013b04:	4b0a      	ldr	r3, [pc, #40]	; (8013b30 <prvAddNewTaskToReadyList+0xc8>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d207      	bcs.n	8013b22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013b12:	4b0c      	ldr	r3, [pc, #48]	; (8013b44 <prvAddNewTaskToReadyList+0xdc>)
 8013b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b18:	601a      	str	r2, [r3, #0]
 8013b1a:	f3bf 8f4f 	dsb	sy
 8013b1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b22:	bf00      	nop
 8013b24:	3708      	adds	r7, #8
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}
 8013b2a:	bf00      	nop
 8013b2c:	20003288 	.word	0x20003288
 8013b30:	20002db4 	.word	0x20002db4
 8013b34:	20003294 	.word	0x20003294
 8013b38:	200032a4 	.word	0x200032a4
 8013b3c:	20003290 	.word	0x20003290
 8013b40:	20002db8 	.word	0x20002db8
 8013b44:	e000ed04 	.word	0xe000ed04

08013b48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013b50:	2300      	movs	r3, #0
 8013b52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d017      	beq.n	8013b8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013b5a:	4b13      	ldr	r3, [pc, #76]	; (8013ba8 <vTaskDelay+0x60>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d00a      	beq.n	8013b78 <vTaskDelay+0x30>
	__asm volatile
 8013b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b66:	f383 8811 	msr	BASEPRI, r3
 8013b6a:	f3bf 8f6f 	isb	sy
 8013b6e:	f3bf 8f4f 	dsb	sy
 8013b72:	60bb      	str	r3, [r7, #8]
}
 8013b74:	bf00      	nop
 8013b76:	e7fe      	b.n	8013b76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013b78:	f000 f882 	bl	8013c80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013b7c:	2100      	movs	r1, #0
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f000 fd10 	bl	80145a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013b84:	f000 f88a 	bl	8013c9c <xTaskResumeAll>
 8013b88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d107      	bne.n	8013ba0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013b90:	4b06      	ldr	r3, [pc, #24]	; (8013bac <vTaskDelay+0x64>)
 8013b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b96:	601a      	str	r2, [r3, #0]
 8013b98:	f3bf 8f4f 	dsb	sy
 8013b9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ba0:	bf00      	nop
 8013ba2:	3710      	adds	r7, #16
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	200032b0 	.word	0x200032b0
 8013bac:	e000ed04 	.word	0xe000ed04

08013bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b08a      	sub	sp, #40	; 0x28
 8013bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013bbe:	463a      	mov	r2, r7
 8013bc0:	1d39      	adds	r1, r7, #4
 8013bc2:	f107 0308 	add.w	r3, r7, #8
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7fe ff5c 	bl	8012a84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013bcc:	6839      	ldr	r1, [r7, #0]
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	68ba      	ldr	r2, [r7, #8]
 8013bd2:	9202      	str	r2, [sp, #8]
 8013bd4:	9301      	str	r3, [sp, #4]
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	9300      	str	r3, [sp, #0]
 8013bda:	2300      	movs	r3, #0
 8013bdc:	460a      	mov	r2, r1
 8013bde:	4922      	ldr	r1, [pc, #136]	; (8013c68 <vTaskStartScheduler+0xb8>)
 8013be0:	4822      	ldr	r0, [pc, #136]	; (8013c6c <vTaskStartScheduler+0xbc>)
 8013be2:	f7ff fe15 	bl	8013810 <xTaskCreateStatic>
 8013be6:	4603      	mov	r3, r0
 8013be8:	4a21      	ldr	r2, [pc, #132]	; (8013c70 <vTaskStartScheduler+0xc0>)
 8013bea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013bec:	4b20      	ldr	r3, [pc, #128]	; (8013c70 <vTaskStartScheduler+0xc0>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d002      	beq.n	8013bfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	617b      	str	r3, [r7, #20]
 8013bf8:	e001      	b.n	8013bfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	2b01      	cmp	r3, #1
 8013c02:	d102      	bne.n	8013c0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013c04:	f000 fd22 	bl	801464c <xTimerCreateTimerTask>
 8013c08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	2b01      	cmp	r3, #1
 8013c0e:	d118      	bne.n	8013c42 <vTaskStartScheduler+0x92>
	__asm volatile
 8013c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c14:	f383 8811 	msr	BASEPRI, r3
 8013c18:	f3bf 8f6f 	isb	sy
 8013c1c:	f3bf 8f4f 	dsb	sy
 8013c20:	613b      	str	r3, [r7, #16]
}
 8013c22:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013c24:	4b13      	ldr	r3, [pc, #76]	; (8013c74 <vTaskStartScheduler+0xc4>)
 8013c26:	f04f 32ff 	mov.w	r2, #4294967295
 8013c2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013c2c:	4b12      	ldr	r3, [pc, #72]	; (8013c78 <vTaskStartScheduler+0xc8>)
 8013c2e:	2201      	movs	r2, #1
 8013c30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8013c32:	4b12      	ldr	r3, [pc, #72]	; (8013c7c <vTaskStartScheduler+0xcc>)
 8013c34:	2200      	movs	r2, #0
 8013c36:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8013c38:	f7ef fd14 	bl	8003664 <ConfigureRunTimeCounter>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013c3c:	f001 f8a0 	bl	8014d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013c40:	e00e      	b.n	8013c60 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c48:	d10a      	bne.n	8013c60 <vTaskStartScheduler+0xb0>
	__asm volatile
 8013c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c4e:	f383 8811 	msr	BASEPRI, r3
 8013c52:	f3bf 8f6f 	isb	sy
 8013c56:	f3bf 8f4f 	dsb	sy
 8013c5a:	60fb      	str	r3, [r7, #12]
}
 8013c5c:	bf00      	nop
 8013c5e:	e7fe      	b.n	8013c5e <vTaskStartScheduler+0xae>
}
 8013c60:	bf00      	nop
 8013c62:	3718      	adds	r7, #24
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}
 8013c68:	08016544 	.word	0x08016544
 8013c6c:	080142d5 	.word	0x080142d5
 8013c70:	200032ac 	.word	0x200032ac
 8013c74:	200032a8 	.word	0x200032a8
 8013c78:	20003294 	.word	0x20003294
 8013c7c:	2000328c 	.word	0x2000328c

08013c80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013c80:	b480      	push	{r7}
 8013c82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013c84:	4b04      	ldr	r3, [pc, #16]	; (8013c98 <vTaskSuspendAll+0x18>)
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	3301      	adds	r3, #1
 8013c8a:	4a03      	ldr	r2, [pc, #12]	; (8013c98 <vTaskSuspendAll+0x18>)
 8013c8c:	6013      	str	r3, [r2, #0]
}
 8013c8e:	bf00      	nop
 8013c90:	46bd      	mov	sp, r7
 8013c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c96:	4770      	bx	lr
 8013c98:	200032b0 	.word	0x200032b0

08013c9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b084      	sub	sp, #16
 8013ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013caa:	4b42      	ldr	r3, [pc, #264]	; (8013db4 <xTaskResumeAll+0x118>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d10a      	bne.n	8013cc8 <xTaskResumeAll+0x2c>
	__asm volatile
 8013cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb6:	f383 8811 	msr	BASEPRI, r3
 8013cba:	f3bf 8f6f 	isb	sy
 8013cbe:	f3bf 8f4f 	dsb	sy
 8013cc2:	603b      	str	r3, [r7, #0]
}
 8013cc4:	bf00      	nop
 8013cc6:	e7fe      	b.n	8013cc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013cc8:	f001 f8fc 	bl	8014ec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013ccc:	4b39      	ldr	r3, [pc, #228]	; (8013db4 <xTaskResumeAll+0x118>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	3b01      	subs	r3, #1
 8013cd2:	4a38      	ldr	r2, [pc, #224]	; (8013db4 <xTaskResumeAll+0x118>)
 8013cd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cd6:	4b37      	ldr	r3, [pc, #220]	; (8013db4 <xTaskResumeAll+0x118>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d162      	bne.n	8013da4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013cde:	4b36      	ldr	r3, [pc, #216]	; (8013db8 <xTaskResumeAll+0x11c>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d05e      	beq.n	8013da4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013ce6:	e02f      	b.n	8013d48 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8013ce8:	4b34      	ldr	r3, [pc, #208]	; (8013dbc <xTaskResumeAll+0x120>)
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	68db      	ldr	r3, [r3, #12]
 8013cee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	3318      	adds	r3, #24
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	f7fe ff83 	bl	8012c00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	3304      	adds	r3, #4
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7fe ff7e 	bl	8012c00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d08:	4b2d      	ldr	r3, [pc, #180]	; (8013dc0 <xTaskResumeAll+0x124>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d903      	bls.n	8013d18 <xTaskResumeAll+0x7c>
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d14:	4a2a      	ldr	r2, [pc, #168]	; (8013dc0 <xTaskResumeAll+0x124>)
 8013d16:	6013      	str	r3, [r2, #0]
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d1c:	4613      	mov	r3, r2
 8013d1e:	009b      	lsls	r3, r3, #2
 8013d20:	4413      	add	r3, r2
 8013d22:	009b      	lsls	r3, r3, #2
 8013d24:	4a27      	ldr	r2, [pc, #156]	; (8013dc4 <xTaskResumeAll+0x128>)
 8013d26:	441a      	add	r2, r3
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	3304      	adds	r3, #4
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	4610      	mov	r0, r2
 8013d30:	f7fe ff09 	bl	8012b46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d38:	4b23      	ldr	r3, [pc, #140]	; (8013dc8 <xTaskResumeAll+0x12c>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d302      	bcc.n	8013d48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013d42:	4b22      	ldr	r3, [pc, #136]	; (8013dcc <xTaskResumeAll+0x130>)
 8013d44:	2201      	movs	r2, #1
 8013d46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013d48:	4b1c      	ldr	r3, [pc, #112]	; (8013dbc <xTaskResumeAll+0x120>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d1cb      	bne.n	8013ce8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d001      	beq.n	8013d5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013d56:	f000 fb73 	bl	8014440 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013d5a:	4b1d      	ldr	r3, [pc, #116]	; (8013dd0 <xTaskResumeAll+0x134>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d010      	beq.n	8013d88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013d66:	f000 f847 	bl	8013df8 <xTaskIncrementTick>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d002      	beq.n	8013d76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013d70:	4b16      	ldr	r3, [pc, #88]	; (8013dcc <xTaskResumeAll+0x130>)
 8013d72:	2201      	movs	r2, #1
 8013d74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	3b01      	subs	r3, #1
 8013d7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d1f1      	bne.n	8013d66 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8013d82:	4b13      	ldr	r3, [pc, #76]	; (8013dd0 <xTaskResumeAll+0x134>)
 8013d84:	2200      	movs	r2, #0
 8013d86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013d88:	4b10      	ldr	r3, [pc, #64]	; (8013dcc <xTaskResumeAll+0x130>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d009      	beq.n	8013da4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013d90:	2301      	movs	r3, #1
 8013d92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013d94:	4b0f      	ldr	r3, [pc, #60]	; (8013dd4 <xTaskResumeAll+0x138>)
 8013d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d9a:	601a      	str	r2, [r3, #0]
 8013d9c:	f3bf 8f4f 	dsb	sy
 8013da0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013da4:	f001 f8be 	bl	8014f24 <vPortExitCritical>

	return xAlreadyYielded;
 8013da8:	68bb      	ldr	r3, [r7, #8]
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3710      	adds	r7, #16
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	200032b0 	.word	0x200032b0
 8013db8:	20003288 	.word	0x20003288
 8013dbc:	20003248 	.word	0x20003248
 8013dc0:	20003290 	.word	0x20003290
 8013dc4:	20002db8 	.word	0x20002db8
 8013dc8:	20002db4 	.word	0x20002db4
 8013dcc:	2000329c 	.word	0x2000329c
 8013dd0:	20003298 	.word	0x20003298
 8013dd4:	e000ed04 	.word	0xe000ed04

08013dd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013dd8:	b480      	push	{r7}
 8013dda:	b083      	sub	sp, #12
 8013ddc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013dde:	4b05      	ldr	r3, [pc, #20]	; (8013df4 <xTaskGetTickCount+0x1c>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013de4:	687b      	ldr	r3, [r7, #4]
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	370c      	adds	r7, #12
 8013dea:	46bd      	mov	sp, r7
 8013dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df0:	4770      	bx	lr
 8013df2:	bf00      	nop
 8013df4:	2000328c 	.word	0x2000328c

08013df8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b086      	sub	sp, #24
 8013dfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013dfe:	2300      	movs	r3, #0
 8013e00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e02:	4b51      	ldr	r3, [pc, #324]	; (8013f48 <xTaskIncrementTick+0x150>)
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	f040 808e 	bne.w	8013f28 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013e0c:	4b4f      	ldr	r3, [pc, #316]	; (8013f4c <xTaskIncrementTick+0x154>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	3301      	adds	r3, #1
 8013e12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013e14:	4a4d      	ldr	r2, [pc, #308]	; (8013f4c <xTaskIncrementTick+0x154>)
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d120      	bne.n	8013e62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013e20:	4b4b      	ldr	r3, [pc, #300]	; (8013f50 <xTaskIncrementTick+0x158>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d00a      	beq.n	8013e40 <xTaskIncrementTick+0x48>
	__asm volatile
 8013e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e2e:	f383 8811 	msr	BASEPRI, r3
 8013e32:	f3bf 8f6f 	isb	sy
 8013e36:	f3bf 8f4f 	dsb	sy
 8013e3a:	603b      	str	r3, [r7, #0]
}
 8013e3c:	bf00      	nop
 8013e3e:	e7fe      	b.n	8013e3e <xTaskIncrementTick+0x46>
 8013e40:	4b43      	ldr	r3, [pc, #268]	; (8013f50 <xTaskIncrementTick+0x158>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	60fb      	str	r3, [r7, #12]
 8013e46:	4b43      	ldr	r3, [pc, #268]	; (8013f54 <xTaskIncrementTick+0x15c>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	4a41      	ldr	r2, [pc, #260]	; (8013f50 <xTaskIncrementTick+0x158>)
 8013e4c:	6013      	str	r3, [r2, #0]
 8013e4e:	4a41      	ldr	r2, [pc, #260]	; (8013f54 <xTaskIncrementTick+0x15c>)
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	6013      	str	r3, [r2, #0]
 8013e54:	4b40      	ldr	r3, [pc, #256]	; (8013f58 <xTaskIncrementTick+0x160>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	3301      	adds	r3, #1
 8013e5a:	4a3f      	ldr	r2, [pc, #252]	; (8013f58 <xTaskIncrementTick+0x160>)
 8013e5c:	6013      	str	r3, [r2, #0]
 8013e5e:	f000 faef 	bl	8014440 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013e62:	4b3e      	ldr	r3, [pc, #248]	; (8013f5c <xTaskIncrementTick+0x164>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	693a      	ldr	r2, [r7, #16]
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	d34e      	bcc.n	8013f0a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e6c:	4b38      	ldr	r3, [pc, #224]	; (8013f50 <xTaskIncrementTick+0x158>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d101      	bne.n	8013e7a <xTaskIncrementTick+0x82>
 8013e76:	2301      	movs	r3, #1
 8013e78:	e000      	b.n	8013e7c <xTaskIncrementTick+0x84>
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d004      	beq.n	8013e8a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e80:	4b36      	ldr	r3, [pc, #216]	; (8013f5c <xTaskIncrementTick+0x164>)
 8013e82:	f04f 32ff 	mov.w	r2, #4294967295
 8013e86:	601a      	str	r2, [r3, #0]
					break;
 8013e88:	e03f      	b.n	8013f0a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013e8a:	4b31      	ldr	r3, [pc, #196]	; (8013f50 <xTaskIncrementTick+0x158>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	68db      	ldr	r3, [r3, #12]
 8013e90:	68db      	ldr	r3, [r3, #12]
 8013e92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	685b      	ldr	r3, [r3, #4]
 8013e98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013e9a:	693a      	ldr	r2, [r7, #16]
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d203      	bcs.n	8013eaa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013ea2:	4a2e      	ldr	r2, [pc, #184]	; (8013f5c <xTaskIncrementTick+0x164>)
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6013      	str	r3, [r2, #0]
						break;
 8013ea8:	e02f      	b.n	8013f0a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	3304      	adds	r3, #4
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7fe fea6 	bl	8012c00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d004      	beq.n	8013ec6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	3318      	adds	r3, #24
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7fe fe9d 	bl	8012c00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eca:	4b25      	ldr	r3, [pc, #148]	; (8013f60 <xTaskIncrementTick+0x168>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	429a      	cmp	r2, r3
 8013ed0:	d903      	bls.n	8013eda <xTaskIncrementTick+0xe2>
 8013ed2:	68bb      	ldr	r3, [r7, #8]
 8013ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ed6:	4a22      	ldr	r2, [pc, #136]	; (8013f60 <xTaskIncrementTick+0x168>)
 8013ed8:	6013      	str	r3, [r2, #0]
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ede:	4613      	mov	r3, r2
 8013ee0:	009b      	lsls	r3, r3, #2
 8013ee2:	4413      	add	r3, r2
 8013ee4:	009b      	lsls	r3, r3, #2
 8013ee6:	4a1f      	ldr	r2, [pc, #124]	; (8013f64 <xTaskIncrementTick+0x16c>)
 8013ee8:	441a      	add	r2, r3
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	3304      	adds	r3, #4
 8013eee:	4619      	mov	r1, r3
 8013ef0:	4610      	mov	r0, r2
 8013ef2:	f7fe fe28 	bl	8012b46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013efa:	4b1b      	ldr	r3, [pc, #108]	; (8013f68 <xTaskIncrementTick+0x170>)
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d3b3      	bcc.n	8013e6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013f04:	2301      	movs	r3, #1
 8013f06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f08:	e7b0      	b.n	8013e6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013f0a:	4b17      	ldr	r3, [pc, #92]	; (8013f68 <xTaskIncrementTick+0x170>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f10:	4914      	ldr	r1, [pc, #80]	; (8013f64 <xTaskIncrementTick+0x16c>)
 8013f12:	4613      	mov	r3, r2
 8013f14:	009b      	lsls	r3, r3, #2
 8013f16:	4413      	add	r3, r2
 8013f18:	009b      	lsls	r3, r3, #2
 8013f1a:	440b      	add	r3, r1
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	2b01      	cmp	r3, #1
 8013f20:	d907      	bls.n	8013f32 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8013f22:	2301      	movs	r3, #1
 8013f24:	617b      	str	r3, [r7, #20]
 8013f26:	e004      	b.n	8013f32 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013f28:	4b10      	ldr	r3, [pc, #64]	; (8013f6c <xTaskIncrementTick+0x174>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	3301      	adds	r3, #1
 8013f2e:	4a0f      	ldr	r2, [pc, #60]	; (8013f6c <xTaskIncrementTick+0x174>)
 8013f30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013f32:	4b0f      	ldr	r3, [pc, #60]	; (8013f70 <xTaskIncrementTick+0x178>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d001      	beq.n	8013f3e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013f3e:	697b      	ldr	r3, [r7, #20]
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3718      	adds	r7, #24
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}
 8013f48:	200032b0 	.word	0x200032b0
 8013f4c:	2000328c 	.word	0x2000328c
 8013f50:	20003240 	.word	0x20003240
 8013f54:	20003244 	.word	0x20003244
 8013f58:	200032a0 	.word	0x200032a0
 8013f5c:	200032a8 	.word	0x200032a8
 8013f60:	20003290 	.word	0x20003290
 8013f64:	20002db8 	.word	0x20002db8
 8013f68:	20002db4 	.word	0x20002db4
 8013f6c:	20003298 	.word	0x20003298
 8013f70:	2000329c 	.word	0x2000329c

08013f74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b084      	sub	sp, #16
 8013f78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013f7a:	4b33      	ldr	r3, [pc, #204]	; (8014048 <vTaskSwitchContext+0xd4>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d003      	beq.n	8013f8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013f82:	4b32      	ldr	r3, [pc, #200]	; (801404c <vTaskSwitchContext+0xd8>)
 8013f84:	2201      	movs	r2, #1
 8013f86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013f88:	e05a      	b.n	8014040 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 8013f8a:	4b30      	ldr	r3, [pc, #192]	; (801404c <vTaskSwitchContext+0xd8>)
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8013f90:	f7ef fb74 	bl	800367c <GetRunTimeCounter>
 8013f94:	4603      	mov	r3, r0
 8013f96:	4a2e      	ldr	r2, [pc, #184]	; (8014050 <vTaskSwitchContext+0xdc>)
 8013f98:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8013f9a:	4b2d      	ldr	r3, [pc, #180]	; (8014050 <vTaskSwitchContext+0xdc>)
 8013f9c:	681a      	ldr	r2, [r3, #0]
 8013f9e:	4b2d      	ldr	r3, [pc, #180]	; (8014054 <vTaskSwitchContext+0xe0>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	429a      	cmp	r2, r3
 8013fa4:	d909      	bls.n	8013fba <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8013fa6:	4b2c      	ldr	r3, [pc, #176]	; (8014058 <vTaskSwitchContext+0xe4>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013fac:	4a28      	ldr	r2, [pc, #160]	; (8014050 <vTaskSwitchContext+0xdc>)
 8013fae:	6810      	ldr	r0, [r2, #0]
 8013fb0:	4a28      	ldr	r2, [pc, #160]	; (8014054 <vTaskSwitchContext+0xe0>)
 8013fb2:	6812      	ldr	r2, [r2, #0]
 8013fb4:	1a82      	subs	r2, r0, r2
 8013fb6:	440a      	add	r2, r1
 8013fb8:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8013fba:	4b25      	ldr	r3, [pc, #148]	; (8014050 <vTaskSwitchContext+0xdc>)
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	4a25      	ldr	r2, [pc, #148]	; (8014054 <vTaskSwitchContext+0xe0>)
 8013fc0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8013fc2:	4b26      	ldr	r3, [pc, #152]	; (801405c <vTaskSwitchContext+0xe8>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	60fb      	str	r3, [r7, #12]
 8013fc8:	e010      	b.n	8013fec <vTaskSwitchContext+0x78>
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d10a      	bne.n	8013fe6 <vTaskSwitchContext+0x72>
	__asm volatile
 8013fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fd4:	f383 8811 	msr	BASEPRI, r3
 8013fd8:	f3bf 8f6f 	isb	sy
 8013fdc:	f3bf 8f4f 	dsb	sy
 8013fe0:	607b      	str	r3, [r7, #4]
}
 8013fe2:	bf00      	nop
 8013fe4:	e7fe      	b.n	8013fe4 <vTaskSwitchContext+0x70>
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	3b01      	subs	r3, #1
 8013fea:	60fb      	str	r3, [r7, #12]
 8013fec:	491c      	ldr	r1, [pc, #112]	; (8014060 <vTaskSwitchContext+0xec>)
 8013fee:	68fa      	ldr	r2, [r7, #12]
 8013ff0:	4613      	mov	r3, r2
 8013ff2:	009b      	lsls	r3, r3, #2
 8013ff4:	4413      	add	r3, r2
 8013ff6:	009b      	lsls	r3, r3, #2
 8013ff8:	440b      	add	r3, r1
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d0e4      	beq.n	8013fca <vTaskSwitchContext+0x56>
 8014000:	68fa      	ldr	r2, [r7, #12]
 8014002:	4613      	mov	r3, r2
 8014004:	009b      	lsls	r3, r3, #2
 8014006:	4413      	add	r3, r2
 8014008:	009b      	lsls	r3, r3, #2
 801400a:	4a15      	ldr	r2, [pc, #84]	; (8014060 <vTaskSwitchContext+0xec>)
 801400c:	4413      	add	r3, r2
 801400e:	60bb      	str	r3, [r7, #8]
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	685b      	ldr	r3, [r3, #4]
 8014014:	685a      	ldr	r2, [r3, #4]
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	605a      	str	r2, [r3, #4]
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	685a      	ldr	r2, [r3, #4]
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	3308      	adds	r3, #8
 8014022:	429a      	cmp	r2, r3
 8014024:	d104      	bne.n	8014030 <vTaskSwitchContext+0xbc>
 8014026:	68bb      	ldr	r3, [r7, #8]
 8014028:	685b      	ldr	r3, [r3, #4]
 801402a:	685a      	ldr	r2, [r3, #4]
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	605a      	str	r2, [r3, #4]
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	685b      	ldr	r3, [r3, #4]
 8014034:	68db      	ldr	r3, [r3, #12]
 8014036:	4a08      	ldr	r2, [pc, #32]	; (8014058 <vTaskSwitchContext+0xe4>)
 8014038:	6013      	str	r3, [r2, #0]
 801403a:	4a08      	ldr	r2, [pc, #32]	; (801405c <vTaskSwitchContext+0xe8>)
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	6013      	str	r3, [r2, #0]
}
 8014040:	bf00      	nop
 8014042:	3710      	adds	r7, #16
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}
 8014048:	200032b0 	.word	0x200032b0
 801404c:	2000329c 	.word	0x2000329c
 8014050:	200032b8 	.word	0x200032b8
 8014054:	200032b4 	.word	0x200032b4
 8014058:	20002db4 	.word	0x20002db4
 801405c:	20003290 	.word	0x20003290
 8014060:	20002db8 	.word	0x20002db8

08014064 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b084      	sub	sp, #16
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
 801406c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d10a      	bne.n	801408a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014078:	f383 8811 	msr	BASEPRI, r3
 801407c:	f3bf 8f6f 	isb	sy
 8014080:	f3bf 8f4f 	dsb	sy
 8014084:	60fb      	str	r3, [r7, #12]
}
 8014086:	bf00      	nop
 8014088:	e7fe      	b.n	8014088 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801408a:	4b07      	ldr	r3, [pc, #28]	; (80140a8 <vTaskPlaceOnEventList+0x44>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	3318      	adds	r3, #24
 8014090:	4619      	mov	r1, r3
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f7fe fd7b 	bl	8012b8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014098:	2101      	movs	r1, #1
 801409a:	6838      	ldr	r0, [r7, #0]
 801409c:	f000 fa82 	bl	80145a4 <prvAddCurrentTaskToDelayedList>
}
 80140a0:	bf00      	nop
 80140a2:	3710      	adds	r7, #16
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bd80      	pop	{r7, pc}
 80140a8:	20002db4 	.word	0x20002db4

080140ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b086      	sub	sp, #24
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	60f8      	str	r0, [r7, #12]
 80140b4:	60b9      	str	r1, [r7, #8]
 80140b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d10a      	bne.n	80140d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80140be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c2:	f383 8811 	msr	BASEPRI, r3
 80140c6:	f3bf 8f6f 	isb	sy
 80140ca:	f3bf 8f4f 	dsb	sy
 80140ce:	617b      	str	r3, [r7, #20]
}
 80140d0:	bf00      	nop
 80140d2:	e7fe      	b.n	80140d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80140d4:	4b0a      	ldr	r3, [pc, #40]	; (8014100 <vTaskPlaceOnEventListRestricted+0x54>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	3318      	adds	r3, #24
 80140da:	4619      	mov	r1, r3
 80140dc:	68f8      	ldr	r0, [r7, #12]
 80140de:	f7fe fd32 	bl	8012b46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d002      	beq.n	80140ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80140e8:	f04f 33ff 	mov.w	r3, #4294967295
 80140ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80140ee:	6879      	ldr	r1, [r7, #4]
 80140f0:	68b8      	ldr	r0, [r7, #8]
 80140f2:	f000 fa57 	bl	80145a4 <prvAddCurrentTaskToDelayedList>
	}
 80140f6:	bf00      	nop
 80140f8:	3718      	adds	r7, #24
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	20002db4 	.word	0x20002db4

08014104 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b086      	sub	sp, #24
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	68db      	ldr	r3, [r3, #12]
 8014110:	68db      	ldr	r3, [r3, #12]
 8014112:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014114:	693b      	ldr	r3, [r7, #16]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d10a      	bne.n	8014130 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801411e:	f383 8811 	msr	BASEPRI, r3
 8014122:	f3bf 8f6f 	isb	sy
 8014126:	f3bf 8f4f 	dsb	sy
 801412a:	60fb      	str	r3, [r7, #12]
}
 801412c:	bf00      	nop
 801412e:	e7fe      	b.n	801412e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014130:	693b      	ldr	r3, [r7, #16]
 8014132:	3318      	adds	r3, #24
 8014134:	4618      	mov	r0, r3
 8014136:	f7fe fd63 	bl	8012c00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801413a:	4b1e      	ldr	r3, [pc, #120]	; (80141b4 <xTaskRemoveFromEventList+0xb0>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d11d      	bne.n	801417e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	3304      	adds	r3, #4
 8014146:	4618      	mov	r0, r3
 8014148:	f7fe fd5a 	bl	8012c00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801414c:	693b      	ldr	r3, [r7, #16]
 801414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014150:	4b19      	ldr	r3, [pc, #100]	; (80141b8 <xTaskRemoveFromEventList+0xb4>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	429a      	cmp	r2, r3
 8014156:	d903      	bls.n	8014160 <xTaskRemoveFromEventList+0x5c>
 8014158:	693b      	ldr	r3, [r7, #16]
 801415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801415c:	4a16      	ldr	r2, [pc, #88]	; (80141b8 <xTaskRemoveFromEventList+0xb4>)
 801415e:	6013      	str	r3, [r2, #0]
 8014160:	693b      	ldr	r3, [r7, #16]
 8014162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014164:	4613      	mov	r3, r2
 8014166:	009b      	lsls	r3, r3, #2
 8014168:	4413      	add	r3, r2
 801416a:	009b      	lsls	r3, r3, #2
 801416c:	4a13      	ldr	r2, [pc, #76]	; (80141bc <xTaskRemoveFromEventList+0xb8>)
 801416e:	441a      	add	r2, r3
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	3304      	adds	r3, #4
 8014174:	4619      	mov	r1, r3
 8014176:	4610      	mov	r0, r2
 8014178:	f7fe fce5 	bl	8012b46 <vListInsertEnd>
 801417c:	e005      	b.n	801418a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801417e:	693b      	ldr	r3, [r7, #16]
 8014180:	3318      	adds	r3, #24
 8014182:	4619      	mov	r1, r3
 8014184:	480e      	ldr	r0, [pc, #56]	; (80141c0 <xTaskRemoveFromEventList+0xbc>)
 8014186:	f7fe fcde 	bl	8012b46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801418a:	693b      	ldr	r3, [r7, #16]
 801418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801418e:	4b0d      	ldr	r3, [pc, #52]	; (80141c4 <xTaskRemoveFromEventList+0xc0>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014194:	429a      	cmp	r2, r3
 8014196:	d905      	bls.n	80141a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014198:	2301      	movs	r3, #1
 801419a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801419c:	4b0a      	ldr	r3, [pc, #40]	; (80141c8 <xTaskRemoveFromEventList+0xc4>)
 801419e:	2201      	movs	r2, #1
 80141a0:	601a      	str	r2, [r3, #0]
 80141a2:	e001      	b.n	80141a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80141a4:	2300      	movs	r3, #0
 80141a6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80141a8:	697b      	ldr	r3, [r7, #20]
}
 80141aa:	4618      	mov	r0, r3
 80141ac:	3718      	adds	r7, #24
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
 80141b2:	bf00      	nop
 80141b4:	200032b0 	.word	0x200032b0
 80141b8:	20003290 	.word	0x20003290
 80141bc:	20002db8 	.word	0x20002db8
 80141c0:	20003248 	.word	0x20003248
 80141c4:	20002db4 	.word	0x20002db4
 80141c8:	2000329c 	.word	0x2000329c

080141cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80141cc:	b480      	push	{r7}
 80141ce:	b083      	sub	sp, #12
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80141d4:	4b06      	ldr	r3, [pc, #24]	; (80141f0 <vTaskInternalSetTimeOutState+0x24>)
 80141d6:	681a      	ldr	r2, [r3, #0]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80141dc:	4b05      	ldr	r3, [pc, #20]	; (80141f4 <vTaskInternalSetTimeOutState+0x28>)
 80141de:	681a      	ldr	r2, [r3, #0]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	605a      	str	r2, [r3, #4]
}
 80141e4:	bf00      	nop
 80141e6:	370c      	adds	r7, #12
 80141e8:	46bd      	mov	sp, r7
 80141ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ee:	4770      	bx	lr
 80141f0:	200032a0 	.word	0x200032a0
 80141f4:	2000328c 	.word	0x2000328c

080141f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b088      	sub	sp, #32
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d10a      	bne.n	801421e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801420c:	f383 8811 	msr	BASEPRI, r3
 8014210:	f3bf 8f6f 	isb	sy
 8014214:	f3bf 8f4f 	dsb	sy
 8014218:	613b      	str	r3, [r7, #16]
}
 801421a:	bf00      	nop
 801421c:	e7fe      	b.n	801421c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d10a      	bne.n	801423a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014228:	f383 8811 	msr	BASEPRI, r3
 801422c:	f3bf 8f6f 	isb	sy
 8014230:	f3bf 8f4f 	dsb	sy
 8014234:	60fb      	str	r3, [r7, #12]
}
 8014236:	bf00      	nop
 8014238:	e7fe      	b.n	8014238 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801423a:	f000 fe43 	bl	8014ec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801423e:	4b1d      	ldr	r3, [pc, #116]	; (80142b4 <xTaskCheckForTimeOut+0xbc>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	685b      	ldr	r3, [r3, #4]
 8014248:	69ba      	ldr	r2, [r7, #24]
 801424a:	1ad3      	subs	r3, r2, r3
 801424c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014256:	d102      	bne.n	801425e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014258:	2300      	movs	r3, #0
 801425a:	61fb      	str	r3, [r7, #28]
 801425c:	e023      	b.n	80142a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	681a      	ldr	r2, [r3, #0]
 8014262:	4b15      	ldr	r3, [pc, #84]	; (80142b8 <xTaskCheckForTimeOut+0xc0>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	429a      	cmp	r2, r3
 8014268:	d007      	beq.n	801427a <xTaskCheckForTimeOut+0x82>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	685b      	ldr	r3, [r3, #4]
 801426e:	69ba      	ldr	r2, [r7, #24]
 8014270:	429a      	cmp	r2, r3
 8014272:	d302      	bcc.n	801427a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014274:	2301      	movs	r3, #1
 8014276:	61fb      	str	r3, [r7, #28]
 8014278:	e015      	b.n	80142a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	697a      	ldr	r2, [r7, #20]
 8014280:	429a      	cmp	r2, r3
 8014282:	d20b      	bcs.n	801429c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	681a      	ldr	r2, [r3, #0]
 8014288:	697b      	ldr	r3, [r7, #20]
 801428a:	1ad2      	subs	r2, r2, r3
 801428c:	683b      	ldr	r3, [r7, #0]
 801428e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f7ff ff9b 	bl	80141cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014296:	2300      	movs	r3, #0
 8014298:	61fb      	str	r3, [r7, #28]
 801429a:	e004      	b.n	80142a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	2200      	movs	r2, #0
 80142a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80142a2:	2301      	movs	r3, #1
 80142a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80142a6:	f000 fe3d 	bl	8014f24 <vPortExitCritical>

	return xReturn;
 80142aa:	69fb      	ldr	r3, [r7, #28]
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	3720      	adds	r7, #32
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bd80      	pop	{r7, pc}
 80142b4:	2000328c 	.word	0x2000328c
 80142b8:	200032a0 	.word	0x200032a0

080142bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80142bc:	b480      	push	{r7}
 80142be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80142c0:	4b03      	ldr	r3, [pc, #12]	; (80142d0 <vTaskMissedYield+0x14>)
 80142c2:	2201      	movs	r2, #1
 80142c4:	601a      	str	r2, [r3, #0]
}
 80142c6:	bf00      	nop
 80142c8:	46bd      	mov	sp, r7
 80142ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ce:	4770      	bx	lr
 80142d0:	2000329c 	.word	0x2000329c

080142d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80142dc:	f000 f852 	bl	8014384 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80142e0:	4b06      	ldr	r3, [pc, #24]	; (80142fc <prvIdleTask+0x28>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	2b01      	cmp	r3, #1
 80142e6:	d9f9      	bls.n	80142dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80142e8:	4b05      	ldr	r3, [pc, #20]	; (8014300 <prvIdleTask+0x2c>)
 80142ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142ee:	601a      	str	r2, [r3, #0]
 80142f0:	f3bf 8f4f 	dsb	sy
 80142f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80142f8:	e7f0      	b.n	80142dc <prvIdleTask+0x8>
 80142fa:	bf00      	nop
 80142fc:	20002db8 	.word	0x20002db8
 8014300:	e000ed04 	.word	0xe000ed04

08014304 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801430a:	2300      	movs	r3, #0
 801430c:	607b      	str	r3, [r7, #4]
 801430e:	e00c      	b.n	801432a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014310:	687a      	ldr	r2, [r7, #4]
 8014312:	4613      	mov	r3, r2
 8014314:	009b      	lsls	r3, r3, #2
 8014316:	4413      	add	r3, r2
 8014318:	009b      	lsls	r3, r3, #2
 801431a:	4a12      	ldr	r2, [pc, #72]	; (8014364 <prvInitialiseTaskLists+0x60>)
 801431c:	4413      	add	r3, r2
 801431e:	4618      	mov	r0, r3
 8014320:	f7fe fbe4 	bl	8012aec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	3301      	adds	r3, #1
 8014328:	607b      	str	r3, [r7, #4]
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2b37      	cmp	r3, #55	; 0x37
 801432e:	d9ef      	bls.n	8014310 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014330:	480d      	ldr	r0, [pc, #52]	; (8014368 <prvInitialiseTaskLists+0x64>)
 8014332:	f7fe fbdb 	bl	8012aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014336:	480d      	ldr	r0, [pc, #52]	; (801436c <prvInitialiseTaskLists+0x68>)
 8014338:	f7fe fbd8 	bl	8012aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801433c:	480c      	ldr	r0, [pc, #48]	; (8014370 <prvInitialiseTaskLists+0x6c>)
 801433e:	f7fe fbd5 	bl	8012aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014342:	480c      	ldr	r0, [pc, #48]	; (8014374 <prvInitialiseTaskLists+0x70>)
 8014344:	f7fe fbd2 	bl	8012aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014348:	480b      	ldr	r0, [pc, #44]	; (8014378 <prvInitialiseTaskLists+0x74>)
 801434a:	f7fe fbcf 	bl	8012aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801434e:	4b0b      	ldr	r3, [pc, #44]	; (801437c <prvInitialiseTaskLists+0x78>)
 8014350:	4a05      	ldr	r2, [pc, #20]	; (8014368 <prvInitialiseTaskLists+0x64>)
 8014352:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014354:	4b0a      	ldr	r3, [pc, #40]	; (8014380 <prvInitialiseTaskLists+0x7c>)
 8014356:	4a05      	ldr	r2, [pc, #20]	; (801436c <prvInitialiseTaskLists+0x68>)
 8014358:	601a      	str	r2, [r3, #0]
}
 801435a:	bf00      	nop
 801435c:	3708      	adds	r7, #8
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}
 8014362:	bf00      	nop
 8014364:	20002db8 	.word	0x20002db8
 8014368:	20003218 	.word	0x20003218
 801436c:	2000322c 	.word	0x2000322c
 8014370:	20003248 	.word	0x20003248
 8014374:	2000325c 	.word	0x2000325c
 8014378:	20003274 	.word	0x20003274
 801437c:	20003240 	.word	0x20003240
 8014380:	20003244 	.word	0x20003244

08014384 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b082      	sub	sp, #8
 8014388:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801438a:	e019      	b.n	80143c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801438c:	f000 fd9a 	bl	8014ec4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8014390:	4b10      	ldr	r3, [pc, #64]	; (80143d4 <prvCheckTasksWaitingTermination+0x50>)
 8014392:	68db      	ldr	r3, [r3, #12]
 8014394:	68db      	ldr	r3, [r3, #12]
 8014396:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	3304      	adds	r3, #4
 801439c:	4618      	mov	r0, r3
 801439e:	f7fe fc2f 	bl	8012c00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80143a2:	4b0d      	ldr	r3, [pc, #52]	; (80143d8 <prvCheckTasksWaitingTermination+0x54>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	3b01      	subs	r3, #1
 80143a8:	4a0b      	ldr	r2, [pc, #44]	; (80143d8 <prvCheckTasksWaitingTermination+0x54>)
 80143aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80143ac:	4b0b      	ldr	r3, [pc, #44]	; (80143dc <prvCheckTasksWaitingTermination+0x58>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	3b01      	subs	r3, #1
 80143b2:	4a0a      	ldr	r2, [pc, #40]	; (80143dc <prvCheckTasksWaitingTermination+0x58>)
 80143b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80143b6:	f000 fdb5 	bl	8014f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f000 f810 	bl	80143e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80143c0:	4b06      	ldr	r3, [pc, #24]	; (80143dc <prvCheckTasksWaitingTermination+0x58>)
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d1e1      	bne.n	801438c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80143c8:	bf00      	nop
 80143ca:	bf00      	nop
 80143cc:	3708      	adds	r7, #8
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}
 80143d2:	bf00      	nop
 80143d4:	2000325c 	.word	0x2000325c
 80143d8:	20003288 	.word	0x20003288
 80143dc:	20003270 	.word	0x20003270

080143e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b084      	sub	sp, #16
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d108      	bne.n	8014404 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143f6:	4618      	mov	r0, r3
 80143f8:	f000 fecc 	bl	8015194 <vPortFree>
				vPortFree( pxTCB );
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f000 fec9 	bl	8015194 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014402:	e018      	b.n	8014436 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801440a:	2b01      	cmp	r3, #1
 801440c:	d103      	bne.n	8014416 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801440e:	6878      	ldr	r0, [r7, #4]
 8014410:	f000 fec0 	bl	8015194 <vPortFree>
	}
 8014414:	e00f      	b.n	8014436 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801441c:	2b02      	cmp	r3, #2
 801441e:	d00a      	beq.n	8014436 <prvDeleteTCB+0x56>
	__asm volatile
 8014420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014424:	f383 8811 	msr	BASEPRI, r3
 8014428:	f3bf 8f6f 	isb	sy
 801442c:	f3bf 8f4f 	dsb	sy
 8014430:	60fb      	str	r3, [r7, #12]
}
 8014432:	bf00      	nop
 8014434:	e7fe      	b.n	8014434 <prvDeleteTCB+0x54>
	}
 8014436:	bf00      	nop
 8014438:	3710      	adds	r7, #16
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
	...

08014440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014440:	b480      	push	{r7}
 8014442:	b083      	sub	sp, #12
 8014444:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014446:	4b0f      	ldr	r3, [pc, #60]	; (8014484 <prvResetNextTaskUnblockTime+0x44>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d101      	bne.n	8014454 <prvResetNextTaskUnblockTime+0x14>
 8014450:	2301      	movs	r3, #1
 8014452:	e000      	b.n	8014456 <prvResetNextTaskUnblockTime+0x16>
 8014454:	2300      	movs	r3, #0
 8014456:	2b00      	cmp	r3, #0
 8014458:	d004      	beq.n	8014464 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801445a:	4b0b      	ldr	r3, [pc, #44]	; (8014488 <prvResetNextTaskUnblockTime+0x48>)
 801445c:	f04f 32ff 	mov.w	r2, #4294967295
 8014460:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014462:	e008      	b.n	8014476 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8014464:	4b07      	ldr	r3, [pc, #28]	; (8014484 <prvResetNextTaskUnblockTime+0x44>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	68db      	ldr	r3, [r3, #12]
 801446a:	68db      	ldr	r3, [r3, #12]
 801446c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	4a05      	ldr	r2, [pc, #20]	; (8014488 <prvResetNextTaskUnblockTime+0x48>)
 8014474:	6013      	str	r3, [r2, #0]
}
 8014476:	bf00      	nop
 8014478:	370c      	adds	r7, #12
 801447a:	46bd      	mov	sp, r7
 801447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014480:	4770      	bx	lr
 8014482:	bf00      	nop
 8014484:	20003240 	.word	0x20003240
 8014488:	200032a8 	.word	0x200032a8

0801448c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801448c:	b480      	push	{r7}
 801448e:	b083      	sub	sp, #12
 8014490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014492:	4b0b      	ldr	r3, [pc, #44]	; (80144c0 <xTaskGetSchedulerState+0x34>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d102      	bne.n	80144a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801449a:	2301      	movs	r3, #1
 801449c:	607b      	str	r3, [r7, #4]
 801449e:	e008      	b.n	80144b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144a0:	4b08      	ldr	r3, [pc, #32]	; (80144c4 <xTaskGetSchedulerState+0x38>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d102      	bne.n	80144ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80144a8:	2302      	movs	r3, #2
 80144aa:	607b      	str	r3, [r7, #4]
 80144ac:	e001      	b.n	80144b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80144ae:	2300      	movs	r3, #0
 80144b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80144b2:	687b      	ldr	r3, [r7, #4]
	}
 80144b4:	4618      	mov	r0, r3
 80144b6:	370c      	adds	r7, #12
 80144b8:	46bd      	mov	sp, r7
 80144ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144be:	4770      	bx	lr
 80144c0:	20003294 	.word	0x20003294
 80144c4:	200032b0 	.word	0x200032b0

080144c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b086      	sub	sp, #24
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80144d4:	2300      	movs	r3, #0
 80144d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d056      	beq.n	801458c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80144de:	4b2e      	ldr	r3, [pc, #184]	; (8014598 <xTaskPriorityDisinherit+0xd0>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	693a      	ldr	r2, [r7, #16]
 80144e4:	429a      	cmp	r2, r3
 80144e6:	d00a      	beq.n	80144fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80144e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ec:	f383 8811 	msr	BASEPRI, r3
 80144f0:	f3bf 8f6f 	isb	sy
 80144f4:	f3bf 8f4f 	dsb	sy
 80144f8:	60fb      	str	r3, [r7, #12]
}
 80144fa:	bf00      	nop
 80144fc:	e7fe      	b.n	80144fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014502:	2b00      	cmp	r3, #0
 8014504:	d10a      	bne.n	801451c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801450a:	f383 8811 	msr	BASEPRI, r3
 801450e:	f3bf 8f6f 	isb	sy
 8014512:	f3bf 8f4f 	dsb	sy
 8014516:	60bb      	str	r3, [r7, #8]
}
 8014518:	bf00      	nop
 801451a:	e7fe      	b.n	801451a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014520:	1e5a      	subs	r2, r3, #1
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801452e:	429a      	cmp	r2, r3
 8014530:	d02c      	beq.n	801458c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014532:	693b      	ldr	r3, [r7, #16]
 8014534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014536:	2b00      	cmp	r3, #0
 8014538:	d128      	bne.n	801458c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801453a:	693b      	ldr	r3, [r7, #16]
 801453c:	3304      	adds	r3, #4
 801453e:	4618      	mov	r0, r3
 8014540:	f7fe fb5e 	bl	8012c00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014548:	693b      	ldr	r3, [r7, #16]
 801454a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801454c:	693b      	ldr	r3, [r7, #16]
 801454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014550:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014558:	693b      	ldr	r3, [r7, #16]
 801455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801455c:	4b0f      	ldr	r3, [pc, #60]	; (801459c <xTaskPriorityDisinherit+0xd4>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	429a      	cmp	r2, r3
 8014562:	d903      	bls.n	801456c <xTaskPriorityDisinherit+0xa4>
 8014564:	693b      	ldr	r3, [r7, #16]
 8014566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014568:	4a0c      	ldr	r2, [pc, #48]	; (801459c <xTaskPriorityDisinherit+0xd4>)
 801456a:	6013      	str	r3, [r2, #0]
 801456c:	693b      	ldr	r3, [r7, #16]
 801456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014570:	4613      	mov	r3, r2
 8014572:	009b      	lsls	r3, r3, #2
 8014574:	4413      	add	r3, r2
 8014576:	009b      	lsls	r3, r3, #2
 8014578:	4a09      	ldr	r2, [pc, #36]	; (80145a0 <xTaskPriorityDisinherit+0xd8>)
 801457a:	441a      	add	r2, r3
 801457c:	693b      	ldr	r3, [r7, #16]
 801457e:	3304      	adds	r3, #4
 8014580:	4619      	mov	r1, r3
 8014582:	4610      	mov	r0, r2
 8014584:	f7fe fadf 	bl	8012b46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014588:	2301      	movs	r3, #1
 801458a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801458c:	697b      	ldr	r3, [r7, #20]
	}
 801458e:	4618      	mov	r0, r3
 8014590:	3718      	adds	r7, #24
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
 8014596:	bf00      	nop
 8014598:	20002db4 	.word	0x20002db4
 801459c:	20003290 	.word	0x20003290
 80145a0:	20002db8 	.word	0x20002db8

080145a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b084      	sub	sp, #16
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
 80145ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80145ae:	4b21      	ldr	r3, [pc, #132]	; (8014634 <prvAddCurrentTaskToDelayedList+0x90>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80145b4:	4b20      	ldr	r3, [pc, #128]	; (8014638 <prvAddCurrentTaskToDelayedList+0x94>)
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	3304      	adds	r3, #4
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7fe fb20 	bl	8012c00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145c6:	d10a      	bne.n	80145de <prvAddCurrentTaskToDelayedList+0x3a>
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d007      	beq.n	80145de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80145ce:	4b1a      	ldr	r3, [pc, #104]	; (8014638 <prvAddCurrentTaskToDelayedList+0x94>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	3304      	adds	r3, #4
 80145d4:	4619      	mov	r1, r3
 80145d6:	4819      	ldr	r0, [pc, #100]	; (801463c <prvAddCurrentTaskToDelayedList+0x98>)
 80145d8:	f7fe fab5 	bl	8012b46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80145dc:	e026      	b.n	801462c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80145de:	68fa      	ldr	r2, [r7, #12]
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	4413      	add	r3, r2
 80145e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80145e6:	4b14      	ldr	r3, [pc, #80]	; (8014638 <prvAddCurrentTaskToDelayedList+0x94>)
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	68ba      	ldr	r2, [r7, #8]
 80145ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80145ee:	68ba      	ldr	r2, [r7, #8]
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d209      	bcs.n	801460a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80145f6:	4b12      	ldr	r3, [pc, #72]	; (8014640 <prvAddCurrentTaskToDelayedList+0x9c>)
 80145f8:	681a      	ldr	r2, [r3, #0]
 80145fa:	4b0f      	ldr	r3, [pc, #60]	; (8014638 <prvAddCurrentTaskToDelayedList+0x94>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	3304      	adds	r3, #4
 8014600:	4619      	mov	r1, r3
 8014602:	4610      	mov	r0, r2
 8014604:	f7fe fac3 	bl	8012b8e <vListInsert>
}
 8014608:	e010      	b.n	801462c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801460a:	4b0e      	ldr	r3, [pc, #56]	; (8014644 <prvAddCurrentTaskToDelayedList+0xa0>)
 801460c:	681a      	ldr	r2, [r3, #0]
 801460e:	4b0a      	ldr	r3, [pc, #40]	; (8014638 <prvAddCurrentTaskToDelayedList+0x94>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	3304      	adds	r3, #4
 8014614:	4619      	mov	r1, r3
 8014616:	4610      	mov	r0, r2
 8014618:	f7fe fab9 	bl	8012b8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801461c:	4b0a      	ldr	r3, [pc, #40]	; (8014648 <prvAddCurrentTaskToDelayedList+0xa4>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	68ba      	ldr	r2, [r7, #8]
 8014622:	429a      	cmp	r2, r3
 8014624:	d202      	bcs.n	801462c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014626:	4a08      	ldr	r2, [pc, #32]	; (8014648 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	6013      	str	r3, [r2, #0]
}
 801462c:	bf00      	nop
 801462e:	3710      	adds	r7, #16
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}
 8014634:	2000328c 	.word	0x2000328c
 8014638:	20002db4 	.word	0x20002db4
 801463c:	20003274 	.word	0x20003274
 8014640:	20003244 	.word	0x20003244
 8014644:	20003240 	.word	0x20003240
 8014648:	200032a8 	.word	0x200032a8

0801464c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b08a      	sub	sp, #40	; 0x28
 8014650:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014652:	2300      	movs	r3, #0
 8014654:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014656:	f000 facb 	bl	8014bf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801465a:	4b1c      	ldr	r3, [pc, #112]	; (80146cc <xTimerCreateTimerTask+0x80>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d021      	beq.n	80146a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014662:	2300      	movs	r3, #0
 8014664:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014666:	2300      	movs	r3, #0
 8014668:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801466a:	1d3a      	adds	r2, r7, #4
 801466c:	f107 0108 	add.w	r1, r7, #8
 8014670:	f107 030c 	add.w	r3, r7, #12
 8014674:	4618      	mov	r0, r3
 8014676:	f7fe fa1f 	bl	8012ab8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801467a:	6879      	ldr	r1, [r7, #4]
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	68fa      	ldr	r2, [r7, #12]
 8014680:	9202      	str	r2, [sp, #8]
 8014682:	9301      	str	r3, [sp, #4]
 8014684:	2302      	movs	r3, #2
 8014686:	9300      	str	r3, [sp, #0]
 8014688:	2300      	movs	r3, #0
 801468a:	460a      	mov	r2, r1
 801468c:	4910      	ldr	r1, [pc, #64]	; (80146d0 <xTimerCreateTimerTask+0x84>)
 801468e:	4811      	ldr	r0, [pc, #68]	; (80146d4 <xTimerCreateTimerTask+0x88>)
 8014690:	f7ff f8be 	bl	8013810 <xTaskCreateStatic>
 8014694:	4603      	mov	r3, r0
 8014696:	4a10      	ldr	r2, [pc, #64]	; (80146d8 <xTimerCreateTimerTask+0x8c>)
 8014698:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801469a:	4b0f      	ldr	r3, [pc, #60]	; (80146d8 <xTimerCreateTimerTask+0x8c>)
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d001      	beq.n	80146a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80146a2:	2301      	movs	r3, #1
 80146a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d10a      	bne.n	80146c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80146ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b0:	f383 8811 	msr	BASEPRI, r3
 80146b4:	f3bf 8f6f 	isb	sy
 80146b8:	f3bf 8f4f 	dsb	sy
 80146bc:	613b      	str	r3, [r7, #16]
}
 80146be:	bf00      	nop
 80146c0:	e7fe      	b.n	80146c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80146c2:	697b      	ldr	r3, [r7, #20]
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3718      	adds	r7, #24
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}
 80146cc:	200032ec 	.word	0x200032ec
 80146d0:	0801654c 	.word	0x0801654c
 80146d4:	080147f9 	.word	0x080147f9
 80146d8:	200032f0 	.word	0x200032f0

080146dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b08a      	sub	sp, #40	; 0x28
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	60f8      	str	r0, [r7, #12]
 80146e4:	60b9      	str	r1, [r7, #8]
 80146e6:	607a      	str	r2, [r7, #4]
 80146e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80146ea:	2300      	movs	r3, #0
 80146ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d10a      	bne.n	801470a <xTimerGenericCommand+0x2e>
	__asm volatile
 80146f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f8:	f383 8811 	msr	BASEPRI, r3
 80146fc:	f3bf 8f6f 	isb	sy
 8014700:	f3bf 8f4f 	dsb	sy
 8014704:	623b      	str	r3, [r7, #32]
}
 8014706:	bf00      	nop
 8014708:	e7fe      	b.n	8014708 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801470a:	4b1a      	ldr	r3, [pc, #104]	; (8014774 <xTimerGenericCommand+0x98>)
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d02a      	beq.n	8014768 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	2b05      	cmp	r3, #5
 8014722:	dc18      	bgt.n	8014756 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014724:	f7ff feb2 	bl	801448c <xTaskGetSchedulerState>
 8014728:	4603      	mov	r3, r0
 801472a:	2b02      	cmp	r3, #2
 801472c:	d109      	bne.n	8014742 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801472e:	4b11      	ldr	r3, [pc, #68]	; (8014774 <xTimerGenericCommand+0x98>)
 8014730:	6818      	ldr	r0, [r3, #0]
 8014732:	f107 0110 	add.w	r1, r7, #16
 8014736:	2300      	movs	r3, #0
 8014738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801473a:	f7fe fbcb 	bl	8012ed4 <xQueueGenericSend>
 801473e:	6278      	str	r0, [r7, #36]	; 0x24
 8014740:	e012      	b.n	8014768 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014742:	4b0c      	ldr	r3, [pc, #48]	; (8014774 <xTimerGenericCommand+0x98>)
 8014744:	6818      	ldr	r0, [r3, #0]
 8014746:	f107 0110 	add.w	r1, r7, #16
 801474a:	2300      	movs	r3, #0
 801474c:	2200      	movs	r2, #0
 801474e:	f7fe fbc1 	bl	8012ed4 <xQueueGenericSend>
 8014752:	6278      	str	r0, [r7, #36]	; 0x24
 8014754:	e008      	b.n	8014768 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014756:	4b07      	ldr	r3, [pc, #28]	; (8014774 <xTimerGenericCommand+0x98>)
 8014758:	6818      	ldr	r0, [r3, #0]
 801475a:	f107 0110 	add.w	r1, r7, #16
 801475e:	2300      	movs	r3, #0
 8014760:	683a      	ldr	r2, [r7, #0]
 8014762:	f7fe fcb5 	bl	80130d0 <xQueueGenericSendFromISR>
 8014766:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801476a:	4618      	mov	r0, r3
 801476c:	3728      	adds	r7, #40	; 0x28
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}
 8014772:	bf00      	nop
 8014774:	200032ec 	.word	0x200032ec

08014778 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b088      	sub	sp, #32
 801477c:	af02      	add	r7, sp, #8
 801477e:	6078      	str	r0, [r7, #4]
 8014780:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014782:	4b1c      	ldr	r3, [pc, #112]	; (80147f4 <prvProcessExpiredTimer+0x7c>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	68db      	ldr	r3, [r3, #12]
 8014788:	68db      	ldr	r3, [r3, #12]
 801478a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	3304      	adds	r3, #4
 8014790:	4618      	mov	r0, r3
 8014792:	f7fe fa35 	bl	8012c00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	69db      	ldr	r3, [r3, #28]
 801479a:	2b01      	cmp	r3, #1
 801479c:	d122      	bne.n	80147e4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	699a      	ldr	r2, [r3, #24]
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	18d1      	adds	r1, r2, r3
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	683a      	ldr	r2, [r7, #0]
 80147aa:	6978      	ldr	r0, [r7, #20]
 80147ac:	f000 f8c8 	bl	8014940 <prvInsertTimerInActiveList>
 80147b0:	4603      	mov	r3, r0
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d016      	beq.n	80147e4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80147b6:	2300      	movs	r3, #0
 80147b8:	9300      	str	r3, [sp, #0]
 80147ba:	2300      	movs	r3, #0
 80147bc:	687a      	ldr	r2, [r7, #4]
 80147be:	2100      	movs	r1, #0
 80147c0:	6978      	ldr	r0, [r7, #20]
 80147c2:	f7ff ff8b 	bl	80146dc <xTimerGenericCommand>
 80147c6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80147c8:	693b      	ldr	r3, [r7, #16]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d10a      	bne.n	80147e4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80147ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147d2:	f383 8811 	msr	BASEPRI, r3
 80147d6:	f3bf 8f6f 	isb	sy
 80147da:	f3bf 8f4f 	dsb	sy
 80147de:	60fb      	str	r3, [r7, #12]
}
 80147e0:	bf00      	nop
 80147e2:	e7fe      	b.n	80147e2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147e8:	6978      	ldr	r0, [r7, #20]
 80147ea:	4798      	blx	r3
}
 80147ec:	bf00      	nop
 80147ee:	3718      	adds	r7, #24
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	200032e4 	.word	0x200032e4

080147f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b084      	sub	sp, #16
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014800:	f107 0308 	add.w	r3, r7, #8
 8014804:	4618      	mov	r0, r3
 8014806:	f000 f857 	bl	80148b8 <prvGetNextExpireTime>
 801480a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	4619      	mov	r1, r3
 8014810:	68f8      	ldr	r0, [r7, #12]
 8014812:	f000 f803 	bl	801481c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014816:	f000 f8d5 	bl	80149c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801481a:	e7f1      	b.n	8014800 <prvTimerTask+0x8>

0801481c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b084      	sub	sp, #16
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014826:	f7ff fa2b 	bl	8013c80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801482a:	f107 0308 	add.w	r3, r7, #8
 801482e:	4618      	mov	r0, r3
 8014830:	f000 f866 	bl	8014900 <prvSampleTimeNow>
 8014834:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d130      	bne.n	801489e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d10a      	bne.n	8014858 <prvProcessTimerOrBlockTask+0x3c>
 8014842:	687a      	ldr	r2, [r7, #4]
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	429a      	cmp	r2, r3
 8014848:	d806      	bhi.n	8014858 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801484a:	f7ff fa27 	bl	8013c9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801484e:	68f9      	ldr	r1, [r7, #12]
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f7ff ff91 	bl	8014778 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014856:	e024      	b.n	80148a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d008      	beq.n	8014870 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801485e:	4b13      	ldr	r3, [pc, #76]	; (80148ac <prvProcessTimerOrBlockTask+0x90>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	2b00      	cmp	r3, #0
 8014866:	bf0c      	ite	eq
 8014868:	2301      	moveq	r3, #1
 801486a:	2300      	movne	r3, #0
 801486c:	b2db      	uxtb	r3, r3
 801486e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014870:	4b0f      	ldr	r3, [pc, #60]	; (80148b0 <prvProcessTimerOrBlockTask+0x94>)
 8014872:	6818      	ldr	r0, [r3, #0]
 8014874:	687a      	ldr	r2, [r7, #4]
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	1ad3      	subs	r3, r2, r3
 801487a:	683a      	ldr	r2, [r7, #0]
 801487c:	4619      	mov	r1, r3
 801487e:	f7fe ff93 	bl	80137a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014882:	f7ff fa0b 	bl	8013c9c <xTaskResumeAll>
 8014886:	4603      	mov	r3, r0
 8014888:	2b00      	cmp	r3, #0
 801488a:	d10a      	bne.n	80148a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801488c:	4b09      	ldr	r3, [pc, #36]	; (80148b4 <prvProcessTimerOrBlockTask+0x98>)
 801488e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014892:	601a      	str	r2, [r3, #0]
 8014894:	f3bf 8f4f 	dsb	sy
 8014898:	f3bf 8f6f 	isb	sy
}
 801489c:	e001      	b.n	80148a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801489e:	f7ff f9fd 	bl	8013c9c <xTaskResumeAll>
}
 80148a2:	bf00      	nop
 80148a4:	3710      	adds	r7, #16
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	200032e8 	.word	0x200032e8
 80148b0:	200032ec 	.word	0x200032ec
 80148b4:	e000ed04 	.word	0xe000ed04

080148b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80148b8:	b480      	push	{r7}
 80148ba:	b085      	sub	sp, #20
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80148c0:	4b0e      	ldr	r3, [pc, #56]	; (80148fc <prvGetNextExpireTime+0x44>)
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	bf0c      	ite	eq
 80148ca:	2301      	moveq	r3, #1
 80148cc:	2300      	movne	r3, #0
 80148ce:	b2db      	uxtb	r3, r3
 80148d0:	461a      	mov	r2, r3
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d105      	bne.n	80148ea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80148de:	4b07      	ldr	r3, [pc, #28]	; (80148fc <prvGetNextExpireTime+0x44>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	68db      	ldr	r3, [r3, #12]
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	60fb      	str	r3, [r7, #12]
 80148e8:	e001      	b.n	80148ee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80148ea:	2300      	movs	r3, #0
 80148ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80148ee:	68fb      	ldr	r3, [r7, #12]
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3714      	adds	r7, #20
 80148f4:	46bd      	mov	sp, r7
 80148f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fa:	4770      	bx	lr
 80148fc:	200032e4 	.word	0x200032e4

08014900 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b084      	sub	sp, #16
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014908:	f7ff fa66 	bl	8013dd8 <xTaskGetTickCount>
 801490c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801490e:	4b0b      	ldr	r3, [pc, #44]	; (801493c <prvSampleTimeNow+0x3c>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	68fa      	ldr	r2, [r7, #12]
 8014914:	429a      	cmp	r2, r3
 8014916:	d205      	bcs.n	8014924 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014918:	f000 f908 	bl	8014b2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	2201      	movs	r2, #1
 8014920:	601a      	str	r2, [r3, #0]
 8014922:	e002      	b.n	801492a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2200      	movs	r2, #0
 8014928:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801492a:	4a04      	ldr	r2, [pc, #16]	; (801493c <prvSampleTimeNow+0x3c>)
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014930:	68fb      	ldr	r3, [r7, #12]
}
 8014932:	4618      	mov	r0, r3
 8014934:	3710      	adds	r7, #16
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}
 801493a:	bf00      	nop
 801493c:	200032f4 	.word	0x200032f4

08014940 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b086      	sub	sp, #24
 8014944:	af00      	add	r7, sp, #0
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	60b9      	str	r1, [r7, #8]
 801494a:	607a      	str	r2, [r7, #4]
 801494c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801494e:	2300      	movs	r3, #0
 8014950:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	68ba      	ldr	r2, [r7, #8]
 8014956:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	68fa      	ldr	r2, [r7, #12]
 801495c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801495e:	68ba      	ldr	r2, [r7, #8]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	429a      	cmp	r2, r3
 8014964:	d812      	bhi.n	801498c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014966:	687a      	ldr	r2, [r7, #4]
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	1ad2      	subs	r2, r2, r3
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	699b      	ldr	r3, [r3, #24]
 8014970:	429a      	cmp	r2, r3
 8014972:	d302      	bcc.n	801497a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014974:	2301      	movs	r3, #1
 8014976:	617b      	str	r3, [r7, #20]
 8014978:	e01b      	b.n	80149b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801497a:	4b10      	ldr	r3, [pc, #64]	; (80149bc <prvInsertTimerInActiveList+0x7c>)
 801497c:	681a      	ldr	r2, [r3, #0]
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	3304      	adds	r3, #4
 8014982:	4619      	mov	r1, r3
 8014984:	4610      	mov	r0, r2
 8014986:	f7fe f902 	bl	8012b8e <vListInsert>
 801498a:	e012      	b.n	80149b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801498c:	687a      	ldr	r2, [r7, #4]
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	429a      	cmp	r2, r3
 8014992:	d206      	bcs.n	80149a2 <prvInsertTimerInActiveList+0x62>
 8014994:	68ba      	ldr	r2, [r7, #8]
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	429a      	cmp	r2, r3
 801499a:	d302      	bcc.n	80149a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801499c:	2301      	movs	r3, #1
 801499e:	617b      	str	r3, [r7, #20]
 80149a0:	e007      	b.n	80149b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80149a2:	4b07      	ldr	r3, [pc, #28]	; (80149c0 <prvInsertTimerInActiveList+0x80>)
 80149a4:	681a      	ldr	r2, [r3, #0]
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	3304      	adds	r3, #4
 80149aa:	4619      	mov	r1, r3
 80149ac:	4610      	mov	r0, r2
 80149ae:	f7fe f8ee 	bl	8012b8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80149b2:	697b      	ldr	r3, [r7, #20]
}
 80149b4:	4618      	mov	r0, r3
 80149b6:	3718      	adds	r7, #24
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}
 80149bc:	200032e8 	.word	0x200032e8
 80149c0:	200032e4 	.word	0x200032e4

080149c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b08e      	sub	sp, #56	; 0x38
 80149c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80149ca:	e09d      	b.n	8014b08 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	da18      	bge.n	8014a04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80149d2:	1d3b      	adds	r3, r7, #4
 80149d4:	3304      	adds	r3, #4
 80149d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80149d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d10a      	bne.n	80149f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80149de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e2:	f383 8811 	msr	BASEPRI, r3
 80149e6:	f3bf 8f6f 	isb	sy
 80149ea:	f3bf 8f4f 	dsb	sy
 80149ee:	61fb      	str	r3, [r7, #28]
}
 80149f0:	bf00      	nop
 80149f2:	e7fe      	b.n	80149f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80149f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149fa:	6850      	ldr	r0, [r2, #4]
 80149fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149fe:	6892      	ldr	r2, [r2, #8]
 8014a00:	4611      	mov	r1, r2
 8014a02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	db7d      	blt.n	8014b06 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a10:	695b      	ldr	r3, [r3, #20]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d004      	beq.n	8014a20 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a18:	3304      	adds	r3, #4
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	f7fe f8f0 	bl	8012c00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014a20:	463b      	mov	r3, r7
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7ff ff6c 	bl	8014900 <prvSampleTimeNow>
 8014a28:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	2b09      	cmp	r3, #9
 8014a2e:	d86b      	bhi.n	8014b08 <prvProcessReceivedCommands+0x144>
 8014a30:	a201      	add	r2, pc, #4	; (adr r2, 8014a38 <prvProcessReceivedCommands+0x74>)
 8014a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a36:	bf00      	nop
 8014a38:	08014a61 	.word	0x08014a61
 8014a3c:	08014a61 	.word	0x08014a61
 8014a40:	08014a61 	.word	0x08014a61
 8014a44:	08014b09 	.word	0x08014b09
 8014a48:	08014abd 	.word	0x08014abd
 8014a4c:	08014af5 	.word	0x08014af5
 8014a50:	08014a61 	.word	0x08014a61
 8014a54:	08014a61 	.word	0x08014a61
 8014a58:	08014b09 	.word	0x08014b09
 8014a5c:	08014abd 	.word	0x08014abd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014a60:	68ba      	ldr	r2, [r7, #8]
 8014a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a64:	699b      	ldr	r3, [r3, #24]
 8014a66:	18d1      	adds	r1, r2, r3
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a6e:	f7ff ff67 	bl	8014940 <prvInsertTimerInActiveList>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d047      	beq.n	8014b08 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a7e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8014a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a82:	69db      	ldr	r3, [r3, #28]
 8014a84:	2b01      	cmp	r3, #1
 8014a86:	d13f      	bne.n	8014b08 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014a88:	68ba      	ldr	r2, [r7, #8]
 8014a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a8c:	699b      	ldr	r3, [r3, #24]
 8014a8e:	441a      	add	r2, r3
 8014a90:	2300      	movs	r3, #0
 8014a92:	9300      	str	r3, [sp, #0]
 8014a94:	2300      	movs	r3, #0
 8014a96:	2100      	movs	r1, #0
 8014a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a9a:	f7ff fe1f 	bl	80146dc <xTimerGenericCommand>
 8014a9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014aa0:	6a3b      	ldr	r3, [r7, #32]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d130      	bne.n	8014b08 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8014aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aaa:	f383 8811 	msr	BASEPRI, r3
 8014aae:	f3bf 8f6f 	isb	sy
 8014ab2:	f3bf 8f4f 	dsb	sy
 8014ab6:	61bb      	str	r3, [r7, #24]
}
 8014ab8:	bf00      	nop
 8014aba:	e7fe      	b.n	8014aba <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014abc:	68ba      	ldr	r2, [r7, #8]
 8014abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac4:	699b      	ldr	r3, [r3, #24]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d10a      	bne.n	8014ae0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8014aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ace:	f383 8811 	msr	BASEPRI, r3
 8014ad2:	f3bf 8f6f 	isb	sy
 8014ad6:	f3bf 8f4f 	dsb	sy
 8014ada:	617b      	str	r3, [r7, #20]
}
 8014adc:	bf00      	nop
 8014ade:	e7fe      	b.n	8014ade <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae2:	699a      	ldr	r2, [r3, #24]
 8014ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae6:	18d1      	adds	r1, r2, r3
 8014ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014aee:	f7ff ff27 	bl	8014940 <prvInsertTimerInActiveList>
					break;
 8014af2:	e009      	b.n	8014b08 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014af6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d104      	bne.n	8014b08 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8014afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b00:	f000 fb48 	bl	8015194 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014b04:	e000      	b.n	8014b08 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014b06:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014b08:	4b07      	ldr	r3, [pc, #28]	; (8014b28 <prvProcessReceivedCommands+0x164>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	1d39      	adds	r1, r7, #4
 8014b0e:	2200      	movs	r2, #0
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7fe fb75 	bl	8013200 <xQueueReceive>
 8014b16:	4603      	mov	r3, r0
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	f47f af57 	bne.w	80149cc <prvProcessReceivedCommands+0x8>
	}
}
 8014b1e:	bf00      	nop
 8014b20:	bf00      	nop
 8014b22:	3730      	adds	r7, #48	; 0x30
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}
 8014b28:	200032ec 	.word	0x200032ec

08014b2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b088      	sub	sp, #32
 8014b30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014b32:	e045      	b.n	8014bc0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014b34:	4b2c      	ldr	r3, [pc, #176]	; (8014be8 <prvSwitchTimerLists+0xbc>)
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	68db      	ldr	r3, [r3, #12]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014b3e:	4b2a      	ldr	r3, [pc, #168]	; (8014be8 <prvSwitchTimerLists+0xbc>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	68db      	ldr	r3, [r3, #12]
 8014b44:	68db      	ldr	r3, [r3, #12]
 8014b46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	3304      	adds	r3, #4
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7fe f857 	bl	8012c00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b56:	68f8      	ldr	r0, [r7, #12]
 8014b58:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	69db      	ldr	r3, [r3, #28]
 8014b5e:	2b01      	cmp	r3, #1
 8014b60:	d12e      	bne.n	8014bc0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	699b      	ldr	r3, [r3, #24]
 8014b66:	693a      	ldr	r2, [r7, #16]
 8014b68:	4413      	add	r3, r2
 8014b6a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014b6c:	68ba      	ldr	r2, [r7, #8]
 8014b6e:	693b      	ldr	r3, [r7, #16]
 8014b70:	429a      	cmp	r2, r3
 8014b72:	d90e      	bls.n	8014b92 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	68ba      	ldr	r2, [r7, #8]
 8014b78:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	68fa      	ldr	r2, [r7, #12]
 8014b7e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014b80:	4b19      	ldr	r3, [pc, #100]	; (8014be8 <prvSwitchTimerLists+0xbc>)
 8014b82:	681a      	ldr	r2, [r3, #0]
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	3304      	adds	r3, #4
 8014b88:	4619      	mov	r1, r3
 8014b8a:	4610      	mov	r0, r2
 8014b8c:	f7fd ffff 	bl	8012b8e <vListInsert>
 8014b90:	e016      	b.n	8014bc0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014b92:	2300      	movs	r3, #0
 8014b94:	9300      	str	r3, [sp, #0]
 8014b96:	2300      	movs	r3, #0
 8014b98:	693a      	ldr	r2, [r7, #16]
 8014b9a:	2100      	movs	r1, #0
 8014b9c:	68f8      	ldr	r0, [r7, #12]
 8014b9e:	f7ff fd9d 	bl	80146dc <xTimerGenericCommand>
 8014ba2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d10a      	bne.n	8014bc0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8014baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bae:	f383 8811 	msr	BASEPRI, r3
 8014bb2:	f3bf 8f6f 	isb	sy
 8014bb6:	f3bf 8f4f 	dsb	sy
 8014bba:	603b      	str	r3, [r7, #0]
}
 8014bbc:	bf00      	nop
 8014bbe:	e7fe      	b.n	8014bbe <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014bc0:	4b09      	ldr	r3, [pc, #36]	; (8014be8 <prvSwitchTimerLists+0xbc>)
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d1b4      	bne.n	8014b34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014bca:	4b07      	ldr	r3, [pc, #28]	; (8014be8 <prvSwitchTimerLists+0xbc>)
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014bd0:	4b06      	ldr	r3, [pc, #24]	; (8014bec <prvSwitchTimerLists+0xc0>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	4a04      	ldr	r2, [pc, #16]	; (8014be8 <prvSwitchTimerLists+0xbc>)
 8014bd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014bd8:	4a04      	ldr	r2, [pc, #16]	; (8014bec <prvSwitchTimerLists+0xc0>)
 8014bda:	697b      	ldr	r3, [r7, #20]
 8014bdc:	6013      	str	r3, [r2, #0]
}
 8014bde:	bf00      	nop
 8014be0:	3718      	adds	r7, #24
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bd80      	pop	{r7, pc}
 8014be6:	bf00      	nop
 8014be8:	200032e4 	.word	0x200032e4
 8014bec:	200032e8 	.word	0x200032e8

08014bf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b082      	sub	sp, #8
 8014bf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014bf6:	f000 f965 	bl	8014ec4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014bfa:	4b15      	ldr	r3, [pc, #84]	; (8014c50 <prvCheckForValidListAndQueue+0x60>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d120      	bne.n	8014c44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014c02:	4814      	ldr	r0, [pc, #80]	; (8014c54 <prvCheckForValidListAndQueue+0x64>)
 8014c04:	f7fd ff72 	bl	8012aec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014c08:	4813      	ldr	r0, [pc, #76]	; (8014c58 <prvCheckForValidListAndQueue+0x68>)
 8014c0a:	f7fd ff6f 	bl	8012aec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014c0e:	4b13      	ldr	r3, [pc, #76]	; (8014c5c <prvCheckForValidListAndQueue+0x6c>)
 8014c10:	4a10      	ldr	r2, [pc, #64]	; (8014c54 <prvCheckForValidListAndQueue+0x64>)
 8014c12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014c14:	4b12      	ldr	r3, [pc, #72]	; (8014c60 <prvCheckForValidListAndQueue+0x70>)
 8014c16:	4a10      	ldr	r2, [pc, #64]	; (8014c58 <prvCheckForValidListAndQueue+0x68>)
 8014c18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	9300      	str	r3, [sp, #0]
 8014c1e:	4b11      	ldr	r3, [pc, #68]	; (8014c64 <prvCheckForValidListAndQueue+0x74>)
 8014c20:	4a11      	ldr	r2, [pc, #68]	; (8014c68 <prvCheckForValidListAndQueue+0x78>)
 8014c22:	2110      	movs	r1, #16
 8014c24:	200a      	movs	r0, #10
 8014c26:	f7fe f87d 	bl	8012d24 <xQueueGenericCreateStatic>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	4a08      	ldr	r2, [pc, #32]	; (8014c50 <prvCheckForValidListAndQueue+0x60>)
 8014c2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014c30:	4b07      	ldr	r3, [pc, #28]	; (8014c50 <prvCheckForValidListAndQueue+0x60>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d005      	beq.n	8014c44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014c38:	4b05      	ldr	r3, [pc, #20]	; (8014c50 <prvCheckForValidListAndQueue+0x60>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	490b      	ldr	r1, [pc, #44]	; (8014c6c <prvCheckForValidListAndQueue+0x7c>)
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7fe fd88 	bl	8013754 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014c44:	f000 f96e 	bl	8014f24 <vPortExitCritical>
}
 8014c48:	bf00      	nop
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	bd80      	pop	{r7, pc}
 8014c4e:	bf00      	nop
 8014c50:	200032ec 	.word	0x200032ec
 8014c54:	200032bc 	.word	0x200032bc
 8014c58:	200032d0 	.word	0x200032d0
 8014c5c:	200032e4 	.word	0x200032e4
 8014c60:	200032e8 	.word	0x200032e8
 8014c64:	20003398 	.word	0x20003398
 8014c68:	200032f8 	.word	0x200032f8
 8014c6c:	08016554 	.word	0x08016554

08014c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014c70:	b480      	push	{r7}
 8014c72:	b085      	sub	sp, #20
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	60f8      	str	r0, [r7, #12]
 8014c78:	60b9      	str	r1, [r7, #8]
 8014c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	3b04      	subs	r3, #4
 8014c80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	3b04      	subs	r3, #4
 8014c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	f023 0201 	bic.w	r2, r3, #1
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	3b04      	subs	r3, #4
 8014c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014ca0:	4a0c      	ldr	r2, [pc, #48]	; (8014cd4 <pxPortInitialiseStack+0x64>)
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	3b14      	subs	r3, #20
 8014caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014cac:	687a      	ldr	r2, [r7, #4]
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	3b04      	subs	r3, #4
 8014cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	f06f 0202 	mvn.w	r2, #2
 8014cbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	3b20      	subs	r3, #32
 8014cc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014cc6:	68fb      	ldr	r3, [r7, #12]
}
 8014cc8:	4618      	mov	r0, r3
 8014cca:	3714      	adds	r7, #20
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd2:	4770      	bx	lr
 8014cd4:	08014cd9 	.word	0x08014cd9

08014cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b085      	sub	sp, #20
 8014cdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014cde:	2300      	movs	r3, #0
 8014ce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014ce2:	4b12      	ldr	r3, [pc, #72]	; (8014d2c <prvTaskExitError+0x54>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cea:	d00a      	beq.n	8014d02 <prvTaskExitError+0x2a>
	__asm volatile
 8014cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cf0:	f383 8811 	msr	BASEPRI, r3
 8014cf4:	f3bf 8f6f 	isb	sy
 8014cf8:	f3bf 8f4f 	dsb	sy
 8014cfc:	60fb      	str	r3, [r7, #12]
}
 8014cfe:	bf00      	nop
 8014d00:	e7fe      	b.n	8014d00 <prvTaskExitError+0x28>
	__asm volatile
 8014d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d06:	f383 8811 	msr	BASEPRI, r3
 8014d0a:	f3bf 8f6f 	isb	sy
 8014d0e:	f3bf 8f4f 	dsb	sy
 8014d12:	60bb      	str	r3, [r7, #8]
}
 8014d14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014d16:	bf00      	nop
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d0fc      	beq.n	8014d18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014d1e:	bf00      	nop
 8014d20:	bf00      	nop
 8014d22:	3714      	adds	r7, #20
 8014d24:	46bd      	mov	sp, r7
 8014d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2a:	4770      	bx	lr
 8014d2c:	2000012c 	.word	0x2000012c

08014d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014d30:	4b07      	ldr	r3, [pc, #28]	; (8014d50 <pxCurrentTCBConst2>)
 8014d32:	6819      	ldr	r1, [r3, #0]
 8014d34:	6808      	ldr	r0, [r1, #0]
 8014d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d3a:	f380 8809 	msr	PSP, r0
 8014d3e:	f3bf 8f6f 	isb	sy
 8014d42:	f04f 0000 	mov.w	r0, #0
 8014d46:	f380 8811 	msr	BASEPRI, r0
 8014d4a:	4770      	bx	lr
 8014d4c:	f3af 8000 	nop.w

08014d50 <pxCurrentTCBConst2>:
 8014d50:	20002db4 	.word	0x20002db4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014d54:	bf00      	nop
 8014d56:	bf00      	nop

08014d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014d58:	4808      	ldr	r0, [pc, #32]	; (8014d7c <prvPortStartFirstTask+0x24>)
 8014d5a:	6800      	ldr	r0, [r0, #0]
 8014d5c:	6800      	ldr	r0, [r0, #0]
 8014d5e:	f380 8808 	msr	MSP, r0
 8014d62:	f04f 0000 	mov.w	r0, #0
 8014d66:	f380 8814 	msr	CONTROL, r0
 8014d6a:	b662      	cpsie	i
 8014d6c:	b661      	cpsie	f
 8014d6e:	f3bf 8f4f 	dsb	sy
 8014d72:	f3bf 8f6f 	isb	sy
 8014d76:	df00      	svc	0
 8014d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014d7a:	bf00      	nop
 8014d7c:	e000ed08 	.word	0xe000ed08

08014d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b086      	sub	sp, #24
 8014d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014d86:	4b46      	ldr	r3, [pc, #280]	; (8014ea0 <xPortStartScheduler+0x120>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	4a46      	ldr	r2, [pc, #280]	; (8014ea4 <xPortStartScheduler+0x124>)
 8014d8c:	4293      	cmp	r3, r2
 8014d8e:	d10a      	bne.n	8014da6 <xPortStartScheduler+0x26>
	__asm volatile
 8014d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d94:	f383 8811 	msr	BASEPRI, r3
 8014d98:	f3bf 8f6f 	isb	sy
 8014d9c:	f3bf 8f4f 	dsb	sy
 8014da0:	613b      	str	r3, [r7, #16]
}
 8014da2:	bf00      	nop
 8014da4:	e7fe      	b.n	8014da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014da6:	4b3e      	ldr	r3, [pc, #248]	; (8014ea0 <xPortStartScheduler+0x120>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	4a3f      	ldr	r2, [pc, #252]	; (8014ea8 <xPortStartScheduler+0x128>)
 8014dac:	4293      	cmp	r3, r2
 8014dae:	d10a      	bne.n	8014dc6 <xPortStartScheduler+0x46>
	__asm volatile
 8014db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014db4:	f383 8811 	msr	BASEPRI, r3
 8014db8:	f3bf 8f6f 	isb	sy
 8014dbc:	f3bf 8f4f 	dsb	sy
 8014dc0:	60fb      	str	r3, [r7, #12]
}
 8014dc2:	bf00      	nop
 8014dc4:	e7fe      	b.n	8014dc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014dc6:	4b39      	ldr	r3, [pc, #228]	; (8014eac <xPortStartScheduler+0x12c>)
 8014dc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014dca:	697b      	ldr	r3, [r7, #20]
 8014dcc:	781b      	ldrb	r3, [r3, #0]
 8014dce:	b2db      	uxtb	r3, r3
 8014dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	22ff      	movs	r2, #255	; 0xff
 8014dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014dd8:	697b      	ldr	r3, [r7, #20]
 8014dda:	781b      	ldrb	r3, [r3, #0]
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014de0:	78fb      	ldrb	r3, [r7, #3]
 8014de2:	b2db      	uxtb	r3, r3
 8014de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014de8:	b2da      	uxtb	r2, r3
 8014dea:	4b31      	ldr	r3, [pc, #196]	; (8014eb0 <xPortStartScheduler+0x130>)
 8014dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014dee:	4b31      	ldr	r3, [pc, #196]	; (8014eb4 <xPortStartScheduler+0x134>)
 8014df0:	2207      	movs	r2, #7
 8014df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014df4:	e009      	b.n	8014e0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014df6:	4b2f      	ldr	r3, [pc, #188]	; (8014eb4 <xPortStartScheduler+0x134>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	3b01      	subs	r3, #1
 8014dfc:	4a2d      	ldr	r2, [pc, #180]	; (8014eb4 <xPortStartScheduler+0x134>)
 8014dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014e00:	78fb      	ldrb	r3, [r7, #3]
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	005b      	lsls	r3, r3, #1
 8014e06:	b2db      	uxtb	r3, r3
 8014e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014e0a:	78fb      	ldrb	r3, [r7, #3]
 8014e0c:	b2db      	uxtb	r3, r3
 8014e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e12:	2b80      	cmp	r3, #128	; 0x80
 8014e14:	d0ef      	beq.n	8014df6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014e16:	4b27      	ldr	r3, [pc, #156]	; (8014eb4 <xPortStartScheduler+0x134>)
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	f1c3 0307 	rsb	r3, r3, #7
 8014e1e:	2b04      	cmp	r3, #4
 8014e20:	d00a      	beq.n	8014e38 <xPortStartScheduler+0xb8>
	__asm volatile
 8014e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e26:	f383 8811 	msr	BASEPRI, r3
 8014e2a:	f3bf 8f6f 	isb	sy
 8014e2e:	f3bf 8f4f 	dsb	sy
 8014e32:	60bb      	str	r3, [r7, #8]
}
 8014e34:	bf00      	nop
 8014e36:	e7fe      	b.n	8014e36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014e38:	4b1e      	ldr	r3, [pc, #120]	; (8014eb4 <xPortStartScheduler+0x134>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	021b      	lsls	r3, r3, #8
 8014e3e:	4a1d      	ldr	r2, [pc, #116]	; (8014eb4 <xPortStartScheduler+0x134>)
 8014e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014e42:	4b1c      	ldr	r3, [pc, #112]	; (8014eb4 <xPortStartScheduler+0x134>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014e4a:	4a1a      	ldr	r2, [pc, #104]	; (8014eb4 <xPortStartScheduler+0x134>)
 8014e4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	b2da      	uxtb	r2, r3
 8014e52:	697b      	ldr	r3, [r7, #20]
 8014e54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014e56:	4b18      	ldr	r3, [pc, #96]	; (8014eb8 <xPortStartScheduler+0x138>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	4a17      	ldr	r2, [pc, #92]	; (8014eb8 <xPortStartScheduler+0x138>)
 8014e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014e62:	4b15      	ldr	r3, [pc, #84]	; (8014eb8 <xPortStartScheduler+0x138>)
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	4a14      	ldr	r2, [pc, #80]	; (8014eb8 <xPortStartScheduler+0x138>)
 8014e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014e6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014e6e:	f000 f8dd 	bl	801502c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014e72:	4b12      	ldr	r3, [pc, #72]	; (8014ebc <xPortStartScheduler+0x13c>)
 8014e74:	2200      	movs	r2, #0
 8014e76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014e78:	f000 f8fc 	bl	8015074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014e7c:	4b10      	ldr	r3, [pc, #64]	; (8014ec0 <xPortStartScheduler+0x140>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	4a0f      	ldr	r2, [pc, #60]	; (8014ec0 <xPortStartScheduler+0x140>)
 8014e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014e86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014e88:	f7ff ff66 	bl	8014d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014e8c:	f7ff f872 	bl	8013f74 <vTaskSwitchContext>
	prvTaskExitError();
 8014e90:	f7ff ff22 	bl	8014cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014e94:	2300      	movs	r3, #0
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3718      	adds	r7, #24
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	e000ed00 	.word	0xe000ed00
 8014ea4:	410fc271 	.word	0x410fc271
 8014ea8:	410fc270 	.word	0x410fc270
 8014eac:	e000e400 	.word	0xe000e400
 8014eb0:	200033e8 	.word	0x200033e8
 8014eb4:	200033ec 	.word	0x200033ec
 8014eb8:	e000ed20 	.word	0xe000ed20
 8014ebc:	2000012c 	.word	0x2000012c
 8014ec0:	e000ef34 	.word	0xe000ef34

08014ec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014ec4:	b480      	push	{r7}
 8014ec6:	b083      	sub	sp, #12
 8014ec8:	af00      	add	r7, sp, #0
	__asm volatile
 8014eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ece:	f383 8811 	msr	BASEPRI, r3
 8014ed2:	f3bf 8f6f 	isb	sy
 8014ed6:	f3bf 8f4f 	dsb	sy
 8014eda:	607b      	str	r3, [r7, #4]
}
 8014edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014ede:	4b0f      	ldr	r3, [pc, #60]	; (8014f1c <vPortEnterCritical+0x58>)
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	4a0d      	ldr	r2, [pc, #52]	; (8014f1c <vPortEnterCritical+0x58>)
 8014ee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014ee8:	4b0c      	ldr	r3, [pc, #48]	; (8014f1c <vPortEnterCritical+0x58>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	2b01      	cmp	r3, #1
 8014eee:	d10f      	bne.n	8014f10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014ef0:	4b0b      	ldr	r3, [pc, #44]	; (8014f20 <vPortEnterCritical+0x5c>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	b2db      	uxtb	r3, r3
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d00a      	beq.n	8014f10 <vPortEnterCritical+0x4c>
	__asm volatile
 8014efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014efe:	f383 8811 	msr	BASEPRI, r3
 8014f02:	f3bf 8f6f 	isb	sy
 8014f06:	f3bf 8f4f 	dsb	sy
 8014f0a:	603b      	str	r3, [r7, #0]
}
 8014f0c:	bf00      	nop
 8014f0e:	e7fe      	b.n	8014f0e <vPortEnterCritical+0x4a>
	}
}
 8014f10:	bf00      	nop
 8014f12:	370c      	adds	r7, #12
 8014f14:	46bd      	mov	sp, r7
 8014f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1a:	4770      	bx	lr
 8014f1c:	2000012c 	.word	0x2000012c
 8014f20:	e000ed04 	.word	0xe000ed04

08014f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014f24:	b480      	push	{r7}
 8014f26:	b083      	sub	sp, #12
 8014f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014f2a:	4b12      	ldr	r3, [pc, #72]	; (8014f74 <vPortExitCritical+0x50>)
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d10a      	bne.n	8014f48 <vPortExitCritical+0x24>
	__asm volatile
 8014f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f36:	f383 8811 	msr	BASEPRI, r3
 8014f3a:	f3bf 8f6f 	isb	sy
 8014f3e:	f3bf 8f4f 	dsb	sy
 8014f42:	607b      	str	r3, [r7, #4]
}
 8014f44:	bf00      	nop
 8014f46:	e7fe      	b.n	8014f46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014f48:	4b0a      	ldr	r3, [pc, #40]	; (8014f74 <vPortExitCritical+0x50>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	3b01      	subs	r3, #1
 8014f4e:	4a09      	ldr	r2, [pc, #36]	; (8014f74 <vPortExitCritical+0x50>)
 8014f50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014f52:	4b08      	ldr	r3, [pc, #32]	; (8014f74 <vPortExitCritical+0x50>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d105      	bne.n	8014f66 <vPortExitCritical+0x42>
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	f383 8811 	msr	BASEPRI, r3
}
 8014f64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014f66:	bf00      	nop
 8014f68:	370c      	adds	r7, #12
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f70:	4770      	bx	lr
 8014f72:	bf00      	nop
 8014f74:	2000012c 	.word	0x2000012c
	...

08014f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014f80:	f3ef 8009 	mrs	r0, PSP
 8014f84:	f3bf 8f6f 	isb	sy
 8014f88:	4b15      	ldr	r3, [pc, #84]	; (8014fe0 <pxCurrentTCBConst>)
 8014f8a:	681a      	ldr	r2, [r3, #0]
 8014f8c:	f01e 0f10 	tst.w	lr, #16
 8014f90:	bf08      	it	eq
 8014f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f9a:	6010      	str	r0, [r2, #0]
 8014f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014fa4:	f380 8811 	msr	BASEPRI, r0
 8014fa8:	f3bf 8f4f 	dsb	sy
 8014fac:	f3bf 8f6f 	isb	sy
 8014fb0:	f7fe ffe0 	bl	8013f74 <vTaskSwitchContext>
 8014fb4:	f04f 0000 	mov.w	r0, #0
 8014fb8:	f380 8811 	msr	BASEPRI, r0
 8014fbc:	bc09      	pop	{r0, r3}
 8014fbe:	6819      	ldr	r1, [r3, #0]
 8014fc0:	6808      	ldr	r0, [r1, #0]
 8014fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fc6:	f01e 0f10 	tst.w	lr, #16
 8014fca:	bf08      	it	eq
 8014fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014fd0:	f380 8809 	msr	PSP, r0
 8014fd4:	f3bf 8f6f 	isb	sy
 8014fd8:	4770      	bx	lr
 8014fda:	bf00      	nop
 8014fdc:	f3af 8000 	nop.w

08014fe0 <pxCurrentTCBConst>:
 8014fe0:	20002db4 	.word	0x20002db4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014fe4:	bf00      	nop
 8014fe6:	bf00      	nop

08014fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b082      	sub	sp, #8
 8014fec:	af00      	add	r7, sp, #0
	__asm volatile
 8014fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ff2:	f383 8811 	msr	BASEPRI, r3
 8014ff6:	f3bf 8f6f 	isb	sy
 8014ffa:	f3bf 8f4f 	dsb	sy
 8014ffe:	607b      	str	r3, [r7, #4]
}
 8015000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015002:	f7fe fef9 	bl	8013df8 <xTaskIncrementTick>
 8015006:	4603      	mov	r3, r0
 8015008:	2b00      	cmp	r3, #0
 801500a:	d003      	beq.n	8015014 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801500c:	4b06      	ldr	r3, [pc, #24]	; (8015028 <SysTick_Handler+0x40>)
 801500e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015012:	601a      	str	r2, [r3, #0]
 8015014:	2300      	movs	r3, #0
 8015016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	f383 8811 	msr	BASEPRI, r3
}
 801501e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015020:	bf00      	nop
 8015022:	3708      	adds	r7, #8
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}
 8015028:	e000ed04 	.word	0xe000ed04

0801502c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801502c:	b480      	push	{r7}
 801502e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015030:	4b0b      	ldr	r3, [pc, #44]	; (8015060 <vPortSetupTimerInterrupt+0x34>)
 8015032:	2200      	movs	r2, #0
 8015034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015036:	4b0b      	ldr	r3, [pc, #44]	; (8015064 <vPortSetupTimerInterrupt+0x38>)
 8015038:	2200      	movs	r2, #0
 801503a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801503c:	4b0a      	ldr	r3, [pc, #40]	; (8015068 <vPortSetupTimerInterrupt+0x3c>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	4a0a      	ldr	r2, [pc, #40]	; (801506c <vPortSetupTimerInterrupt+0x40>)
 8015042:	fba2 2303 	umull	r2, r3, r2, r3
 8015046:	099b      	lsrs	r3, r3, #6
 8015048:	4a09      	ldr	r2, [pc, #36]	; (8015070 <vPortSetupTimerInterrupt+0x44>)
 801504a:	3b01      	subs	r3, #1
 801504c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801504e:	4b04      	ldr	r3, [pc, #16]	; (8015060 <vPortSetupTimerInterrupt+0x34>)
 8015050:	2207      	movs	r2, #7
 8015052:	601a      	str	r2, [r3, #0]
}
 8015054:	bf00      	nop
 8015056:	46bd      	mov	sp, r7
 8015058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505c:	4770      	bx	lr
 801505e:	bf00      	nop
 8015060:	e000e010 	.word	0xe000e010
 8015064:	e000e018 	.word	0xe000e018
 8015068:	20000010 	.word	0x20000010
 801506c:	10624dd3 	.word	0x10624dd3
 8015070:	e000e014 	.word	0xe000e014

08015074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015084 <vPortEnableVFP+0x10>
 8015078:	6801      	ldr	r1, [r0, #0]
 801507a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801507e:	6001      	str	r1, [r0, #0]
 8015080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015082:	bf00      	nop
 8015084:	e000ed88 	.word	0xe000ed88

08015088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015088:	b480      	push	{r7}
 801508a:	b085      	sub	sp, #20
 801508c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801508e:	f3ef 8305 	mrs	r3, IPSR
 8015092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	2b0f      	cmp	r3, #15
 8015098:	d914      	bls.n	80150c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801509a:	4a17      	ldr	r2, [pc, #92]	; (80150f8 <vPortValidateInterruptPriority+0x70>)
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	4413      	add	r3, r2
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80150a4:	4b15      	ldr	r3, [pc, #84]	; (80150fc <vPortValidateInterruptPriority+0x74>)
 80150a6:	781b      	ldrb	r3, [r3, #0]
 80150a8:	7afa      	ldrb	r2, [r7, #11]
 80150aa:	429a      	cmp	r2, r3
 80150ac:	d20a      	bcs.n	80150c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80150ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150b2:	f383 8811 	msr	BASEPRI, r3
 80150b6:	f3bf 8f6f 	isb	sy
 80150ba:	f3bf 8f4f 	dsb	sy
 80150be:	607b      	str	r3, [r7, #4]
}
 80150c0:	bf00      	nop
 80150c2:	e7fe      	b.n	80150c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80150c4:	4b0e      	ldr	r3, [pc, #56]	; (8015100 <vPortValidateInterruptPriority+0x78>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80150cc:	4b0d      	ldr	r3, [pc, #52]	; (8015104 <vPortValidateInterruptPriority+0x7c>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d90a      	bls.n	80150ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80150d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150d8:	f383 8811 	msr	BASEPRI, r3
 80150dc:	f3bf 8f6f 	isb	sy
 80150e0:	f3bf 8f4f 	dsb	sy
 80150e4:	603b      	str	r3, [r7, #0]
}
 80150e6:	bf00      	nop
 80150e8:	e7fe      	b.n	80150e8 <vPortValidateInterruptPriority+0x60>
	}
 80150ea:	bf00      	nop
 80150ec:	3714      	adds	r7, #20
 80150ee:	46bd      	mov	sp, r7
 80150f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f4:	4770      	bx	lr
 80150f6:	bf00      	nop
 80150f8:	e000e3f0 	.word	0xe000e3f0
 80150fc:	200033e8 	.word	0x200033e8
 8015100:	e000ed0c 	.word	0xe000ed0c
 8015104:	200033ec 	.word	0x200033ec

08015108 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b084      	sub	sp, #16
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8015110:	2300      	movs	r3, #0
 8015112:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	f003 0307 	and.w	r3, r3, #7
 801511a:	2b00      	cmp	r3, #0
 801511c:	d004      	beq.n	8015128 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f023 0307 	bic.w	r3, r3, #7
 8015124:	3308      	adds	r3, #8
 8015126:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8015128:	f7fe fdaa 	bl	8013c80 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 801512c:	4b16      	ldr	r3, [pc, #88]	; (8015188 <pvPortMalloc+0x80>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d105      	bne.n	8015140 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8015134:	4b15      	ldr	r3, [pc, #84]	; (801518c <pvPortMalloc+0x84>)
 8015136:	f023 0307 	bic.w	r3, r3, #7
 801513a:	461a      	mov	r2, r3
 801513c:	4b12      	ldr	r3, [pc, #72]	; (8015188 <pvPortMalloc+0x80>)
 801513e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8015140:	4b13      	ldr	r3, [pc, #76]	; (8015190 <pvPortMalloc+0x88>)
 8015142:	681a      	ldr	r2, [r3, #0]
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	4413      	add	r3, r2
 8015148:	f241 72f7 	movw	r2, #6135	; 0x17f7
 801514c:	4293      	cmp	r3, r2
 801514e:	d813      	bhi.n	8015178 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8015150:	4b0f      	ldr	r3, [pc, #60]	; (8015190 <pvPortMalloc+0x88>)
 8015152:	681a      	ldr	r2, [r3, #0]
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	441a      	add	r2, r3
 8015158:	4b0d      	ldr	r3, [pc, #52]	; (8015190 <pvPortMalloc+0x88>)
 801515a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 801515c:	429a      	cmp	r2, r3
 801515e:	d90b      	bls.n	8015178 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8015160:	4b09      	ldr	r3, [pc, #36]	; (8015188 <pvPortMalloc+0x80>)
 8015162:	681a      	ldr	r2, [r3, #0]
 8015164:	4b0a      	ldr	r3, [pc, #40]	; (8015190 <pvPortMalloc+0x88>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	4413      	add	r3, r2
 801516a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 801516c:	4b08      	ldr	r3, [pc, #32]	; (8015190 <pvPortMalloc+0x88>)
 801516e:	681a      	ldr	r2, [r3, #0]
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	4413      	add	r3, r2
 8015174:	4a06      	ldr	r2, [pc, #24]	; (8015190 <pvPortMalloc+0x88>)
 8015176:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015178:	f7fe fd90 	bl	8013c9c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 801517c:	68fb      	ldr	r3, [r7, #12]
}
 801517e:	4618      	mov	r0, r3
 8015180:	3710      	adds	r7, #16
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}
 8015186:	bf00      	nop
 8015188:	20004bf4 	.word	0x20004bf4
 801518c:	200033f8 	.word	0x200033f8
 8015190:	20004bf0 	.word	0x20004bf0

08015194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015194:	b480      	push	{r7}
 8015196:	b085      	sub	sp, #20
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d00a      	beq.n	80151b8 <vPortFree+0x24>
	__asm volatile
 80151a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151a6:	f383 8811 	msr	BASEPRI, r3
 80151aa:	f3bf 8f6f 	isb	sy
 80151ae:	f3bf 8f4f 	dsb	sy
 80151b2:	60fb      	str	r3, [r7, #12]
}
 80151b4:	bf00      	nop
 80151b6:	e7fe      	b.n	80151b6 <vPortFree+0x22>
}
 80151b8:	bf00      	nop
 80151ba:	3714      	adds	r7, #20
 80151bc:	46bd      	mov	sp, r7
 80151be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c2:	4770      	bx	lr

080151c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80151c4:	b480      	push	{r7}
 80151c6:	b083      	sub	sp, #12
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	4603      	mov	r3, r0
 80151cc:	6039      	str	r1, [r7, #0]
 80151ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	2212      	movs	r2, #18
 80151d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80151d6:	4b03      	ldr	r3, [pc, #12]	; (80151e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80151d8:	4618      	mov	r0, r3
 80151da:	370c      	adds	r7, #12
 80151dc:	46bd      	mov	sp, r7
 80151de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e2:	4770      	bx	lr
 80151e4:	2000014c 	.word	0x2000014c

080151e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80151e8:	b480      	push	{r7}
 80151ea:	b083      	sub	sp, #12
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	4603      	mov	r3, r0
 80151f0:	6039      	str	r1, [r7, #0]
 80151f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	2204      	movs	r2, #4
 80151f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80151fa:	4b03      	ldr	r3, [pc, #12]	; (8015208 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	370c      	adds	r7, #12
 8015200:	46bd      	mov	sp, r7
 8015202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015206:	4770      	bx	lr
 8015208:	20000160 	.word	0x20000160

0801520c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b082      	sub	sp, #8
 8015210:	af00      	add	r7, sp, #0
 8015212:	4603      	mov	r3, r0
 8015214:	6039      	str	r1, [r7, #0]
 8015216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015218:	79fb      	ldrb	r3, [r7, #7]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d105      	bne.n	801522a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801521e:	683a      	ldr	r2, [r7, #0]
 8015220:	4907      	ldr	r1, [pc, #28]	; (8015240 <USBD_FS_ProductStrDescriptor+0x34>)
 8015222:	4808      	ldr	r0, [pc, #32]	; (8015244 <USBD_FS_ProductStrDescriptor+0x38>)
 8015224:	f7fd f871 	bl	801230a <USBD_GetString>
 8015228:	e004      	b.n	8015234 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801522a:	683a      	ldr	r2, [r7, #0]
 801522c:	4904      	ldr	r1, [pc, #16]	; (8015240 <USBD_FS_ProductStrDescriptor+0x34>)
 801522e:	4805      	ldr	r0, [pc, #20]	; (8015244 <USBD_FS_ProductStrDescriptor+0x38>)
 8015230:	f7fd f86b 	bl	801230a <USBD_GetString>
  }
  return USBD_StrDesc;
 8015234:	4b02      	ldr	r3, [pc, #8]	; (8015240 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015236:	4618      	mov	r0, r3
 8015238:	3708      	adds	r7, #8
 801523a:	46bd      	mov	sp, r7
 801523c:	bd80      	pop	{r7, pc}
 801523e:	bf00      	nop
 8015240:	20004bf8 	.word	0x20004bf8
 8015244:	0801655c 	.word	0x0801655c

08015248 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b082      	sub	sp, #8
 801524c:	af00      	add	r7, sp, #0
 801524e:	4603      	mov	r3, r0
 8015250:	6039      	str	r1, [r7, #0]
 8015252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015254:	683a      	ldr	r2, [r7, #0]
 8015256:	4904      	ldr	r1, [pc, #16]	; (8015268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015258:	4804      	ldr	r0, [pc, #16]	; (801526c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801525a:	f7fd f856 	bl	801230a <USBD_GetString>
  return USBD_StrDesc;
 801525e:	4b02      	ldr	r3, [pc, #8]	; (8015268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015260:	4618      	mov	r0, r3
 8015262:	3708      	adds	r7, #8
 8015264:	46bd      	mov	sp, r7
 8015266:	bd80      	pop	{r7, pc}
 8015268:	20004bf8 	.word	0x20004bf8
 801526c:	08016574 	.word	0x08016574

08015270 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b082      	sub	sp, #8
 8015274:	af00      	add	r7, sp, #0
 8015276:	4603      	mov	r3, r0
 8015278:	6039      	str	r1, [r7, #0]
 801527a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801527c:	683b      	ldr	r3, [r7, #0]
 801527e:	221a      	movs	r2, #26
 8015280:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015282:	f000 f843 	bl	801530c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015286:	4b02      	ldr	r3, [pc, #8]	; (8015290 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015288:	4618      	mov	r0, r3
 801528a:	3708      	adds	r7, #8
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}
 8015290:	20000164 	.word	0x20000164

08015294 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b082      	sub	sp, #8
 8015298:	af00      	add	r7, sp, #0
 801529a:	4603      	mov	r3, r0
 801529c:	6039      	str	r1, [r7, #0]
 801529e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80152a0:	79fb      	ldrb	r3, [r7, #7]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d105      	bne.n	80152b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80152a6:	683a      	ldr	r2, [r7, #0]
 80152a8:	4907      	ldr	r1, [pc, #28]	; (80152c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80152aa:	4808      	ldr	r0, [pc, #32]	; (80152cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80152ac:	f7fd f82d 	bl	801230a <USBD_GetString>
 80152b0:	e004      	b.n	80152bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80152b2:	683a      	ldr	r2, [r7, #0]
 80152b4:	4904      	ldr	r1, [pc, #16]	; (80152c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80152b6:	4805      	ldr	r0, [pc, #20]	; (80152cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80152b8:	f7fd f827 	bl	801230a <USBD_GetString>
  }
  return USBD_StrDesc;
 80152bc:	4b02      	ldr	r3, [pc, #8]	; (80152c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80152be:	4618      	mov	r0, r3
 80152c0:	3708      	adds	r7, #8
 80152c2:	46bd      	mov	sp, r7
 80152c4:	bd80      	pop	{r7, pc}
 80152c6:	bf00      	nop
 80152c8:	20004bf8 	.word	0x20004bf8
 80152cc:	08016588 	.word	0x08016588

080152d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b082      	sub	sp, #8
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	4603      	mov	r3, r0
 80152d8:	6039      	str	r1, [r7, #0]
 80152da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80152dc:	79fb      	ldrb	r3, [r7, #7]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d105      	bne.n	80152ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80152e2:	683a      	ldr	r2, [r7, #0]
 80152e4:	4907      	ldr	r1, [pc, #28]	; (8015304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80152e6:	4808      	ldr	r0, [pc, #32]	; (8015308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80152e8:	f7fd f80f 	bl	801230a <USBD_GetString>
 80152ec:	e004      	b.n	80152f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80152ee:	683a      	ldr	r2, [r7, #0]
 80152f0:	4904      	ldr	r1, [pc, #16]	; (8015304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80152f2:	4805      	ldr	r0, [pc, #20]	; (8015308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80152f4:	f7fd f809 	bl	801230a <USBD_GetString>
  }
  return USBD_StrDesc;
 80152f8:	4b02      	ldr	r3, [pc, #8]	; (8015304 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3708      	adds	r7, #8
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}
 8015302:	bf00      	nop
 8015304:	20004bf8 	.word	0x20004bf8
 8015308:	08016594 	.word	0x08016594

0801530c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b084      	sub	sp, #16
 8015310:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015312:	4b0f      	ldr	r3, [pc, #60]	; (8015350 <Get_SerialNum+0x44>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015318:	4b0e      	ldr	r3, [pc, #56]	; (8015354 <Get_SerialNum+0x48>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801531e:	4b0e      	ldr	r3, [pc, #56]	; (8015358 <Get_SerialNum+0x4c>)
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015324:	68fa      	ldr	r2, [r7, #12]
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	4413      	add	r3, r2
 801532a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d009      	beq.n	8015346 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015332:	2208      	movs	r2, #8
 8015334:	4909      	ldr	r1, [pc, #36]	; (801535c <Get_SerialNum+0x50>)
 8015336:	68f8      	ldr	r0, [r7, #12]
 8015338:	f000 f814 	bl	8015364 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801533c:	2204      	movs	r2, #4
 801533e:	4908      	ldr	r1, [pc, #32]	; (8015360 <Get_SerialNum+0x54>)
 8015340:	68b8      	ldr	r0, [r7, #8]
 8015342:	f000 f80f 	bl	8015364 <IntToUnicode>
  }
}
 8015346:	bf00      	nop
 8015348:	3710      	adds	r7, #16
 801534a:	46bd      	mov	sp, r7
 801534c:	bd80      	pop	{r7, pc}
 801534e:	bf00      	nop
 8015350:	1ffff7ac 	.word	0x1ffff7ac
 8015354:	1ffff7b0 	.word	0x1ffff7b0
 8015358:	1ffff7b4 	.word	0x1ffff7b4
 801535c:	20000166 	.word	0x20000166
 8015360:	20000176 	.word	0x20000176

08015364 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015364:	b480      	push	{r7}
 8015366:	b087      	sub	sp, #28
 8015368:	af00      	add	r7, sp, #0
 801536a:	60f8      	str	r0, [r7, #12]
 801536c:	60b9      	str	r1, [r7, #8]
 801536e:	4613      	mov	r3, r2
 8015370:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015372:	2300      	movs	r3, #0
 8015374:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015376:	2300      	movs	r3, #0
 8015378:	75fb      	strb	r3, [r7, #23]
 801537a:	e027      	b.n	80153cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	0f1b      	lsrs	r3, r3, #28
 8015380:	2b09      	cmp	r3, #9
 8015382:	d80b      	bhi.n	801539c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	0f1b      	lsrs	r3, r3, #28
 8015388:	b2da      	uxtb	r2, r3
 801538a:	7dfb      	ldrb	r3, [r7, #23]
 801538c:	005b      	lsls	r3, r3, #1
 801538e:	4619      	mov	r1, r3
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	440b      	add	r3, r1
 8015394:	3230      	adds	r2, #48	; 0x30
 8015396:	b2d2      	uxtb	r2, r2
 8015398:	701a      	strb	r2, [r3, #0]
 801539a:	e00a      	b.n	80153b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	0f1b      	lsrs	r3, r3, #28
 80153a0:	b2da      	uxtb	r2, r3
 80153a2:	7dfb      	ldrb	r3, [r7, #23]
 80153a4:	005b      	lsls	r3, r3, #1
 80153a6:	4619      	mov	r1, r3
 80153a8:	68bb      	ldr	r3, [r7, #8]
 80153aa:	440b      	add	r3, r1
 80153ac:	3237      	adds	r2, #55	; 0x37
 80153ae:	b2d2      	uxtb	r2, r2
 80153b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	011b      	lsls	r3, r3, #4
 80153b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80153b8:	7dfb      	ldrb	r3, [r7, #23]
 80153ba:	005b      	lsls	r3, r3, #1
 80153bc:	3301      	adds	r3, #1
 80153be:	68ba      	ldr	r2, [r7, #8]
 80153c0:	4413      	add	r3, r2
 80153c2:	2200      	movs	r2, #0
 80153c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80153c6:	7dfb      	ldrb	r3, [r7, #23]
 80153c8:	3301      	adds	r3, #1
 80153ca:	75fb      	strb	r3, [r7, #23]
 80153cc:	7dfa      	ldrb	r2, [r7, #23]
 80153ce:	79fb      	ldrb	r3, [r7, #7]
 80153d0:	429a      	cmp	r2, r3
 80153d2:	d3d3      	bcc.n	801537c <IntToUnicode+0x18>
  }
}
 80153d4:	bf00      	nop
 80153d6:	bf00      	nop
 80153d8:	371c      	adds	r7, #28
 80153da:	46bd      	mov	sp, r7
 80153dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e0:	4770      	bx	lr
	...

080153e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b08a      	sub	sp, #40	; 0x28
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80153ec:	f107 0314 	add.w	r3, r7, #20
 80153f0:	2200      	movs	r2, #0
 80153f2:	601a      	str	r2, [r3, #0]
 80153f4:	605a      	str	r2, [r3, #4]
 80153f6:	609a      	str	r2, [r3, #8]
 80153f8:	60da      	str	r2, [r3, #12]
 80153fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	4a1f      	ldr	r2, [pc, #124]	; (8015480 <HAL_PCD_MspInit+0x9c>)
 8015402:	4293      	cmp	r3, r2
 8015404:	d137      	bne.n	8015476 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015406:	4b1f      	ldr	r3, [pc, #124]	; (8015484 <HAL_PCD_MspInit+0xa0>)
 8015408:	695b      	ldr	r3, [r3, #20]
 801540a:	4a1e      	ldr	r2, [pc, #120]	; (8015484 <HAL_PCD_MspInit+0xa0>)
 801540c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015410:	6153      	str	r3, [r2, #20]
 8015412:	4b1c      	ldr	r3, [pc, #112]	; (8015484 <HAL_PCD_MspInit+0xa0>)
 8015414:	695b      	ldr	r3, [r3, #20]
 8015416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801541a:	613b      	str	r3, [r7, #16]
 801541c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801541e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015424:	2302      	movs	r3, #2
 8015426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015428:	2300      	movs	r3, #0
 801542a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801542c:	2303      	movs	r3, #3
 801542e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8015430:	230e      	movs	r3, #14
 8015432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015434:	f107 0314 	add.w	r3, r7, #20
 8015438:	4619      	mov	r1, r3
 801543a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801543e:	f7f4 fd99 	bl	8009f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015442:	4b10      	ldr	r3, [pc, #64]	; (8015484 <HAL_PCD_MspInit+0xa0>)
 8015444:	69db      	ldr	r3, [r3, #28]
 8015446:	4a0f      	ldr	r2, [pc, #60]	; (8015484 <HAL_PCD_MspInit+0xa0>)
 8015448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801544c:	61d3      	str	r3, [r2, #28]
 801544e:	4b0d      	ldr	r3, [pc, #52]	; (8015484 <HAL_PCD_MspInit+0xa0>)
 8015450:	69db      	ldr	r3, [r3, #28]
 8015452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015456:	60fb      	str	r3, [r7, #12]
 8015458:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 801545a:	4b0b      	ldr	r3, [pc, #44]	; (8015488 <HAL_PCD_MspInit+0xa4>)
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	4a0a      	ldr	r2, [pc, #40]	; (8015488 <HAL_PCD_MspInit+0xa4>)
 8015460:	f043 0320 	orr.w	r3, r3, #32
 8015464:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8015466:	2200      	movs	r2, #0
 8015468:	2105      	movs	r1, #5
 801546a:	204b      	movs	r0, #75	; 0x4b
 801546c:	f7f4 faba 	bl	80099e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015470:	204b      	movs	r0, #75	; 0x4b
 8015472:	f7f4 fad3 	bl	8009a1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015476:	bf00      	nop
 8015478:	3728      	adds	r7, #40	; 0x28
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	40005c00 	.word	0x40005c00
 8015484:	40021000 	.word	0x40021000
 8015488:	40010000 	.word	0x40010000

0801548c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b082      	sub	sp, #8
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80154a0:	4619      	mov	r1, r3
 80154a2:	4610      	mov	r0, r2
 80154a4:	f7fb fffc 	bl	80114a0 <USBD_LL_SetupStage>
}
 80154a8:	bf00      	nop
 80154aa:	3708      	adds	r7, #8
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}

080154b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b082      	sub	sp, #8
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	460b      	mov	r3, r1
 80154ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80154c2:	78fa      	ldrb	r2, [r7, #3]
 80154c4:	6879      	ldr	r1, [r7, #4]
 80154c6:	4613      	mov	r3, r2
 80154c8:	009b      	lsls	r3, r3, #2
 80154ca:	4413      	add	r3, r2
 80154cc:	00db      	lsls	r3, r3, #3
 80154ce:	440b      	add	r3, r1
 80154d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80154d4:	681a      	ldr	r2, [r3, #0]
 80154d6:	78fb      	ldrb	r3, [r7, #3]
 80154d8:	4619      	mov	r1, r3
 80154da:	f7fc f82e 	bl	801153a <USBD_LL_DataOutStage>
}
 80154de:	bf00      	nop
 80154e0:	3708      	adds	r7, #8
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}

080154e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154e6:	b580      	push	{r7, lr}
 80154e8:	b082      	sub	sp, #8
 80154ea:	af00      	add	r7, sp, #0
 80154ec:	6078      	str	r0, [r7, #4]
 80154ee:	460b      	mov	r3, r1
 80154f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80154f8:	78fa      	ldrb	r2, [r7, #3]
 80154fa:	6879      	ldr	r1, [r7, #4]
 80154fc:	4613      	mov	r3, r2
 80154fe:	009b      	lsls	r3, r3, #2
 8015500:	4413      	add	r3, r2
 8015502:	00db      	lsls	r3, r3, #3
 8015504:	440b      	add	r3, r1
 8015506:	333c      	adds	r3, #60	; 0x3c
 8015508:	681a      	ldr	r2, [r3, #0]
 801550a:	78fb      	ldrb	r3, [r7, #3]
 801550c:	4619      	mov	r1, r3
 801550e:	f7fc f885 	bl	801161c <USBD_LL_DataInStage>
}
 8015512:	bf00      	nop
 8015514:	3708      	adds	r7, #8
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}

0801551a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801551a:	b580      	push	{r7, lr}
 801551c:	b082      	sub	sp, #8
 801551e:	af00      	add	r7, sp, #0
 8015520:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8015528:	4618      	mov	r0, r3
 801552a:	f7fc f998 	bl	801185e <USBD_LL_SOF>
}
 801552e:	bf00      	nop
 8015530:	3708      	adds	r7, #8
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}

08015536 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015536:	b580      	push	{r7, lr}
 8015538:	b084      	sub	sp, #16
 801553a:	af00      	add	r7, sp, #0
 801553c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801553e:	2301      	movs	r3, #1
 8015540:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	689b      	ldr	r3, [r3, #8]
 8015546:	2b02      	cmp	r3, #2
 8015548:	d001      	beq.n	801554e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801554a:	f7ee f907 	bl	800375c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8015554:	7bfa      	ldrb	r2, [r7, #15]
 8015556:	4611      	mov	r1, r2
 8015558:	4618      	mov	r0, r3
 801555a:	f7fc f945 	bl	80117e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8015564:	4618      	mov	r0, r3
 8015566:	f7fc f8fe 	bl	8011766 <USBD_LL_Reset>
}
 801556a:	bf00      	nop
 801556c:	3710      	adds	r7, #16
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}
	...

08015574 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b082      	sub	sp, #8
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8015582:	4618      	mov	r0, r3
 8015584:	f7fc f940 	bl	8011808 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	699b      	ldr	r3, [r3, #24]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d005      	beq.n	801559c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015590:	4b04      	ldr	r3, [pc, #16]	; (80155a4 <HAL_PCD_SuspendCallback+0x30>)
 8015592:	691b      	ldr	r3, [r3, #16]
 8015594:	4a03      	ldr	r2, [pc, #12]	; (80155a4 <HAL_PCD_SuspendCallback+0x30>)
 8015596:	f043 0306 	orr.w	r3, r3, #6
 801559a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801559c:	bf00      	nop
 801559e:	3708      	adds	r7, #8
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}
 80155a4:	e000ed00 	.word	0xe000ed00

080155a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80155b6:	4618      	mov	r0, r3
 80155b8:	f7fc f93b 	bl	8011832 <USBD_LL_Resume>
}
 80155bc:	bf00      	nop
 80155be:	3708      	adds	r7, #8
 80155c0:	46bd      	mov	sp, r7
 80155c2:	bd80      	pop	{r7, pc}

080155c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b082      	sub	sp, #8
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80155cc:	4a28      	ldr	r2, [pc, #160]	; (8015670 <USBD_LL_Init+0xac>)
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	4a26      	ldr	r2, [pc, #152]	; (8015670 <USBD_LL_Init+0xac>)
 80155d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80155dc:	4b24      	ldr	r3, [pc, #144]	; (8015670 <USBD_LL_Init+0xac>)
 80155de:	4a25      	ldr	r2, [pc, #148]	; (8015674 <USBD_LL_Init+0xb0>)
 80155e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80155e2:	4b23      	ldr	r3, [pc, #140]	; (8015670 <USBD_LL_Init+0xac>)
 80155e4:	2208      	movs	r2, #8
 80155e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80155e8:	4b21      	ldr	r3, [pc, #132]	; (8015670 <USBD_LL_Init+0xac>)
 80155ea:	2202      	movs	r2, #2
 80155ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80155ee:	4b20      	ldr	r3, [pc, #128]	; (8015670 <USBD_LL_Init+0xac>)
 80155f0:	2202      	movs	r2, #2
 80155f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80155f4:	4b1e      	ldr	r3, [pc, #120]	; (8015670 <USBD_LL_Init+0xac>)
 80155f6:	2200      	movs	r2, #0
 80155f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80155fa:	4b1d      	ldr	r3, [pc, #116]	; (8015670 <USBD_LL_Init+0xac>)
 80155fc:	2200      	movs	r2, #0
 80155fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015600:	481b      	ldr	r0, [pc, #108]	; (8015670 <USBD_LL_Init+0xac>)
 8015602:	f7f5 fb64 	bl	800acce <HAL_PCD_Init>
 8015606:	4603      	mov	r3, r0
 8015608:	2b00      	cmp	r3, #0
 801560a:	d001      	beq.n	8015610 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 801560c:	f7ee f8a6 	bl	800375c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015616:	2318      	movs	r3, #24
 8015618:	2200      	movs	r2, #0
 801561a:	2100      	movs	r1, #0
 801561c:	f7f6 ffff 	bl	800c61e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015626:	2358      	movs	r3, #88	; 0x58
 8015628:	2200      	movs	r2, #0
 801562a:	2180      	movs	r1, #128	; 0x80
 801562c:	f7f6 fff7 	bl	800c61e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015636:	23c0      	movs	r3, #192	; 0xc0
 8015638:	2200      	movs	r2, #0
 801563a:	2181      	movs	r1, #129	; 0x81
 801563c:	f7f6 ffef 	bl	800c61e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015646:	f44f 7388 	mov.w	r3, #272	; 0x110
 801564a:	2200      	movs	r2, #0
 801564c:	2101      	movs	r1, #1
 801564e:	f7f6 ffe6 	bl	800c61e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015658:	f44f 7380 	mov.w	r3, #256	; 0x100
 801565c:	2200      	movs	r2, #0
 801565e:	2182      	movs	r1, #130	; 0x82
 8015660:	f7f6 ffdd 	bl	800c61e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015664:	2300      	movs	r3, #0
}
 8015666:	4618      	mov	r0, r3
 8015668:	3708      	adds	r7, #8
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}
 801566e:	bf00      	nop
 8015670:	20004df8 	.word	0x20004df8
 8015674:	40005c00 	.word	0x40005c00

08015678 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b084      	sub	sp, #16
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015680:	2300      	movs	r3, #0
 8015682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015684:	2300      	movs	r3, #0
 8015686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801568e:	4618      	mov	r0, r3
 8015690:	f7f5 fbfb 	bl	800ae8a <HAL_PCD_Start>
 8015694:	4603      	mov	r3, r0
 8015696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015698:	7bfb      	ldrb	r3, [r7, #15]
 801569a:	4618      	mov	r0, r3
 801569c:	f000 f954 	bl	8015948 <USBD_Get_USB_Status>
 80156a0:	4603      	mov	r3, r0
 80156a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80156a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80156a6:	4618      	mov	r0, r3
 80156a8:	3710      	adds	r7, #16
 80156aa:	46bd      	mov	sp, r7
 80156ac:	bd80      	pop	{r7, pc}

080156ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80156ae:	b580      	push	{r7, lr}
 80156b0:	b084      	sub	sp, #16
 80156b2:	af00      	add	r7, sp, #0
 80156b4:	6078      	str	r0, [r7, #4]
 80156b6:	4608      	mov	r0, r1
 80156b8:	4611      	mov	r1, r2
 80156ba:	461a      	mov	r2, r3
 80156bc:	4603      	mov	r3, r0
 80156be:	70fb      	strb	r3, [r7, #3]
 80156c0:	460b      	mov	r3, r1
 80156c2:	70bb      	strb	r3, [r7, #2]
 80156c4:	4613      	mov	r3, r2
 80156c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156c8:	2300      	movs	r3, #0
 80156ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156cc:	2300      	movs	r3, #0
 80156ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80156d6:	78bb      	ldrb	r3, [r7, #2]
 80156d8:	883a      	ldrh	r2, [r7, #0]
 80156da:	78f9      	ldrb	r1, [r7, #3]
 80156dc:	f7f5 fd17 	bl	800b10e <HAL_PCD_EP_Open>
 80156e0:	4603      	mov	r3, r0
 80156e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156e4:	7bfb      	ldrb	r3, [r7, #15]
 80156e6:	4618      	mov	r0, r3
 80156e8:	f000 f92e 	bl	8015948 <USBD_Get_USB_Status>
 80156ec:	4603      	mov	r3, r0
 80156ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80156f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80156f2:	4618      	mov	r0, r3
 80156f4:	3710      	adds	r7, #16
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd80      	pop	{r7, pc}

080156fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156fa:	b580      	push	{r7, lr}
 80156fc:	b084      	sub	sp, #16
 80156fe:	af00      	add	r7, sp, #0
 8015700:	6078      	str	r0, [r7, #4]
 8015702:	460b      	mov	r3, r1
 8015704:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015706:	2300      	movs	r3, #0
 8015708:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801570a:	2300      	movs	r3, #0
 801570c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015714:	78fa      	ldrb	r2, [r7, #3]
 8015716:	4611      	mov	r1, r2
 8015718:	4618      	mov	r0, r3
 801571a:	f7f5 fd5e 	bl	800b1da <HAL_PCD_EP_Close>
 801571e:	4603      	mov	r3, r0
 8015720:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015722:	7bfb      	ldrb	r3, [r7, #15]
 8015724:	4618      	mov	r0, r3
 8015726:	f000 f90f 	bl	8015948 <USBD_Get_USB_Status>
 801572a:	4603      	mov	r3, r0
 801572c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801572e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015730:	4618      	mov	r0, r3
 8015732:	3710      	adds	r7, #16
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}

08015738 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b084      	sub	sp, #16
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
 8015740:	460b      	mov	r3, r1
 8015742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015744:	2300      	movs	r3, #0
 8015746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015748:	2300      	movs	r3, #0
 801574a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015752:	78fa      	ldrb	r2, [r7, #3]
 8015754:	4611      	mov	r1, r2
 8015756:	4618      	mov	r0, r3
 8015758:	f7f5 fe1f 	bl	800b39a <HAL_PCD_EP_SetStall>
 801575c:	4603      	mov	r3, r0
 801575e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015760:	7bfb      	ldrb	r3, [r7, #15]
 8015762:	4618      	mov	r0, r3
 8015764:	f000 f8f0 	bl	8015948 <USBD_Get_USB_Status>
 8015768:	4603      	mov	r3, r0
 801576a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801576c:	7bbb      	ldrb	r3, [r7, #14]
}
 801576e:	4618      	mov	r0, r3
 8015770:	3710      	adds	r7, #16
 8015772:	46bd      	mov	sp, r7
 8015774:	bd80      	pop	{r7, pc}

08015776 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015776:	b580      	push	{r7, lr}
 8015778:	b084      	sub	sp, #16
 801577a:	af00      	add	r7, sp, #0
 801577c:	6078      	str	r0, [r7, #4]
 801577e:	460b      	mov	r3, r1
 8015780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015782:	2300      	movs	r3, #0
 8015784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015786:	2300      	movs	r3, #0
 8015788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015790:	78fa      	ldrb	r2, [r7, #3]
 8015792:	4611      	mov	r1, r2
 8015794:	4618      	mov	r0, r3
 8015796:	f7f5 fe52 	bl	800b43e <HAL_PCD_EP_ClrStall>
 801579a:	4603      	mov	r3, r0
 801579c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801579e:	7bfb      	ldrb	r3, [r7, #15]
 80157a0:	4618      	mov	r0, r3
 80157a2:	f000 f8d1 	bl	8015948 <USBD_Get_USB_Status>
 80157a6:	4603      	mov	r3, r0
 80157a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80157aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80157ac:	4618      	mov	r0, r3
 80157ae:	3710      	adds	r7, #16
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}

080157b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80157b4:	b480      	push	{r7}
 80157b6:	b085      	sub	sp, #20
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
 80157bc:	460b      	mov	r3, r1
 80157be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80157c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80157c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	da0c      	bge.n	80157ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80157d0:	78fb      	ldrb	r3, [r7, #3]
 80157d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80157d6:	68f9      	ldr	r1, [r7, #12]
 80157d8:	1c5a      	adds	r2, r3, #1
 80157da:	4613      	mov	r3, r2
 80157dc:	009b      	lsls	r3, r3, #2
 80157de:	4413      	add	r3, r2
 80157e0:	00db      	lsls	r3, r3, #3
 80157e2:	440b      	add	r3, r1
 80157e4:	3302      	adds	r3, #2
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	e00b      	b.n	8015802 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80157ea:	78fb      	ldrb	r3, [r7, #3]
 80157ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80157f0:	68f9      	ldr	r1, [r7, #12]
 80157f2:	4613      	mov	r3, r2
 80157f4:	009b      	lsls	r3, r3, #2
 80157f6:	4413      	add	r3, r2
 80157f8:	00db      	lsls	r3, r3, #3
 80157fa:	440b      	add	r3, r1
 80157fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8015800:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015802:	4618      	mov	r0, r3
 8015804:	3714      	adds	r7, #20
 8015806:	46bd      	mov	sp, r7
 8015808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580c:	4770      	bx	lr

0801580e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801580e:	b580      	push	{r7, lr}
 8015810:	b084      	sub	sp, #16
 8015812:	af00      	add	r7, sp, #0
 8015814:	6078      	str	r0, [r7, #4]
 8015816:	460b      	mov	r3, r1
 8015818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801581a:	2300      	movs	r3, #0
 801581c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801581e:	2300      	movs	r3, #0
 8015820:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015828:	78fa      	ldrb	r2, [r7, #3]
 801582a:	4611      	mov	r1, r2
 801582c:	4618      	mov	r0, r3
 801582e:	f7f5 fc49 	bl	800b0c4 <HAL_PCD_SetAddress>
 8015832:	4603      	mov	r3, r0
 8015834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015836:	7bfb      	ldrb	r3, [r7, #15]
 8015838:	4618      	mov	r0, r3
 801583a:	f000 f885 	bl	8015948 <USBD_Get_USB_Status>
 801583e:	4603      	mov	r3, r0
 8015840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015842:	7bbb      	ldrb	r3, [r7, #14]
}
 8015844:	4618      	mov	r0, r3
 8015846:	3710      	adds	r7, #16
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}

0801584c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b086      	sub	sp, #24
 8015850:	af00      	add	r7, sp, #0
 8015852:	60f8      	str	r0, [r7, #12]
 8015854:	607a      	str	r2, [r7, #4]
 8015856:	461a      	mov	r2, r3
 8015858:	460b      	mov	r3, r1
 801585a:	72fb      	strb	r3, [r7, #11]
 801585c:	4613      	mov	r3, r2
 801585e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015860:	2300      	movs	r3, #0
 8015862:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015864:	2300      	movs	r3, #0
 8015866:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801586e:	893b      	ldrh	r3, [r7, #8]
 8015870:	7af9      	ldrb	r1, [r7, #11]
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	f7f5 fd4e 	bl	800b314 <HAL_PCD_EP_Transmit>
 8015878:	4603      	mov	r3, r0
 801587a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801587c:	7dfb      	ldrb	r3, [r7, #23]
 801587e:	4618      	mov	r0, r3
 8015880:	f000 f862 	bl	8015948 <USBD_Get_USB_Status>
 8015884:	4603      	mov	r3, r0
 8015886:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015888:	7dbb      	ldrb	r3, [r7, #22]
}
 801588a:	4618      	mov	r0, r3
 801588c:	3718      	adds	r7, #24
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}

08015892 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015892:	b580      	push	{r7, lr}
 8015894:	b086      	sub	sp, #24
 8015896:	af00      	add	r7, sp, #0
 8015898:	60f8      	str	r0, [r7, #12]
 801589a:	607a      	str	r2, [r7, #4]
 801589c:	461a      	mov	r2, r3
 801589e:	460b      	mov	r3, r1
 80158a0:	72fb      	strb	r3, [r7, #11]
 80158a2:	4613      	mov	r3, r2
 80158a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158a6:	2300      	movs	r3, #0
 80158a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158aa:	2300      	movs	r3, #0
 80158ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80158b4:	893b      	ldrh	r3, [r7, #8]
 80158b6:	7af9      	ldrb	r1, [r7, #11]
 80158b8:	687a      	ldr	r2, [r7, #4]
 80158ba:	f7f5 fcd6 	bl	800b26a <HAL_PCD_EP_Receive>
 80158be:	4603      	mov	r3, r0
 80158c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158c2:	7dfb      	ldrb	r3, [r7, #23]
 80158c4:	4618      	mov	r0, r3
 80158c6:	f000 f83f 	bl	8015948 <USBD_Get_USB_Status>
 80158ca:	4603      	mov	r3, r0
 80158cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80158ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80158d0:	4618      	mov	r0, r3
 80158d2:	3718      	adds	r7, #24
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}

080158d8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
 80158e0:	460b      	mov	r3, r1
 80158e2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80158ea:	78fa      	ldrb	r2, [r7, #3]
 80158ec:	4611      	mov	r1, r2
 80158ee:	4618      	mov	r0, r3
 80158f0:	f7f5 fcf8 	bl	800b2e4 <HAL_PCD_EP_GetRxCount>
 80158f4:	4603      	mov	r3, r0
}
 80158f6:	4618      	mov	r0, r3
 80158f8:	3708      	adds	r7, #8
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd80      	pop	{r7, pc}
	...

08015900 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015900:	b480      	push	{r7}
 8015902:	b083      	sub	sp, #12
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015908:	4b03      	ldr	r3, [pc, #12]	; (8015918 <USBD_static_malloc+0x18>)
}
 801590a:	4618      	mov	r0, r3
 801590c:	370c      	adds	r7, #12
 801590e:	46bd      	mov	sp, r7
 8015910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015914:	4770      	bx	lr
 8015916:	bf00      	nop
 8015918:	200050e4 	.word	0x200050e4

0801591c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801591c:	b480      	push	{r7}
 801591e:	b083      	sub	sp, #12
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]

}
 8015924:	bf00      	nop
 8015926:	370c      	adds	r7, #12
 8015928:	46bd      	mov	sp, r7
 801592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592e:	4770      	bx	lr

08015930 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015930:	b480      	push	{r7}
 8015932:	b083      	sub	sp, #12
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
 8015938:	460b      	mov	r3, r1
 801593a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 801593c:	bf00      	nop
 801593e:	370c      	adds	r7, #12
 8015940:	46bd      	mov	sp, r7
 8015942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015946:	4770      	bx	lr

08015948 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015948:	b480      	push	{r7}
 801594a:	b085      	sub	sp, #20
 801594c:	af00      	add	r7, sp, #0
 801594e:	4603      	mov	r3, r0
 8015950:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015952:	2300      	movs	r3, #0
 8015954:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015956:	79fb      	ldrb	r3, [r7, #7]
 8015958:	2b03      	cmp	r3, #3
 801595a:	d817      	bhi.n	801598c <USBD_Get_USB_Status+0x44>
 801595c:	a201      	add	r2, pc, #4	; (adr r2, 8015964 <USBD_Get_USB_Status+0x1c>)
 801595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015962:	bf00      	nop
 8015964:	08015975 	.word	0x08015975
 8015968:	0801597b 	.word	0x0801597b
 801596c:	08015981 	.word	0x08015981
 8015970:	08015987 	.word	0x08015987
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015974:	2300      	movs	r3, #0
 8015976:	73fb      	strb	r3, [r7, #15]
    break;
 8015978:	e00b      	b.n	8015992 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801597a:	2302      	movs	r3, #2
 801597c:	73fb      	strb	r3, [r7, #15]
    break;
 801597e:	e008      	b.n	8015992 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015980:	2301      	movs	r3, #1
 8015982:	73fb      	strb	r3, [r7, #15]
    break;
 8015984:	e005      	b.n	8015992 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015986:	2302      	movs	r3, #2
 8015988:	73fb      	strb	r3, [r7, #15]
    break;
 801598a:	e002      	b.n	8015992 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801598c:	2302      	movs	r3, #2
 801598e:	73fb      	strb	r3, [r7, #15]
    break;
 8015990:	bf00      	nop
  }
  return usb_status;
 8015992:	7bfb      	ldrb	r3, [r7, #15]
}
 8015994:	4618      	mov	r0, r3
 8015996:	3714      	adds	r7, #20
 8015998:	46bd      	mov	sp, r7
 801599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599e:	4770      	bx	lr

080159a0 <__errno>:
 80159a0:	4b01      	ldr	r3, [pc, #4]	; (80159a8 <__errno+0x8>)
 80159a2:	6818      	ldr	r0, [r3, #0]
 80159a4:	4770      	bx	lr
 80159a6:	bf00      	nop
 80159a8:	20000180 	.word	0x20000180

080159ac <__libc_init_array>:
 80159ac:	b570      	push	{r4, r5, r6, lr}
 80159ae:	4d0d      	ldr	r5, [pc, #52]	; (80159e4 <__libc_init_array+0x38>)
 80159b0:	4c0d      	ldr	r4, [pc, #52]	; (80159e8 <__libc_init_array+0x3c>)
 80159b2:	1b64      	subs	r4, r4, r5
 80159b4:	10a4      	asrs	r4, r4, #2
 80159b6:	2600      	movs	r6, #0
 80159b8:	42a6      	cmp	r6, r4
 80159ba:	d109      	bne.n	80159d0 <__libc_init_array+0x24>
 80159bc:	4d0b      	ldr	r5, [pc, #44]	; (80159ec <__libc_init_array+0x40>)
 80159be:	4c0c      	ldr	r4, [pc, #48]	; (80159f0 <__libc_init_array+0x44>)
 80159c0:	f000 fd2c 	bl	801641c <_init>
 80159c4:	1b64      	subs	r4, r4, r5
 80159c6:	10a4      	asrs	r4, r4, #2
 80159c8:	2600      	movs	r6, #0
 80159ca:	42a6      	cmp	r6, r4
 80159cc:	d105      	bne.n	80159da <__libc_init_array+0x2e>
 80159ce:	bd70      	pop	{r4, r5, r6, pc}
 80159d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80159d4:	4798      	blx	r3
 80159d6:	3601      	adds	r6, #1
 80159d8:	e7ee      	b.n	80159b8 <__libc_init_array+0xc>
 80159da:	f855 3b04 	ldr.w	r3, [r5], #4
 80159de:	4798      	blx	r3
 80159e0:	3601      	adds	r6, #1
 80159e2:	e7f2      	b.n	80159ca <__libc_init_array+0x1e>
 80159e4:	08016be8 	.word	0x08016be8
 80159e8:	08016be8 	.word	0x08016be8
 80159ec:	08016be8 	.word	0x08016be8
 80159f0:	08016bec 	.word	0x08016bec

080159f4 <memcpy>:
 80159f4:	440a      	add	r2, r1
 80159f6:	4291      	cmp	r1, r2
 80159f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80159fc:	d100      	bne.n	8015a00 <memcpy+0xc>
 80159fe:	4770      	bx	lr
 8015a00:	b510      	push	{r4, lr}
 8015a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a0a:	4291      	cmp	r1, r2
 8015a0c:	d1f9      	bne.n	8015a02 <memcpy+0xe>
 8015a0e:	bd10      	pop	{r4, pc}

08015a10 <memset>:
 8015a10:	4402      	add	r2, r0
 8015a12:	4603      	mov	r3, r0
 8015a14:	4293      	cmp	r3, r2
 8015a16:	d100      	bne.n	8015a1a <memset+0xa>
 8015a18:	4770      	bx	lr
 8015a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8015a1e:	e7f9      	b.n	8015a14 <memset+0x4>

08015a20 <_puts_r>:
 8015a20:	b570      	push	{r4, r5, r6, lr}
 8015a22:	460e      	mov	r6, r1
 8015a24:	4605      	mov	r5, r0
 8015a26:	b118      	cbz	r0, 8015a30 <_puts_r+0x10>
 8015a28:	6983      	ldr	r3, [r0, #24]
 8015a2a:	b90b      	cbnz	r3, 8015a30 <_puts_r+0x10>
 8015a2c:	f000 fa48 	bl	8015ec0 <__sinit>
 8015a30:	69ab      	ldr	r3, [r5, #24]
 8015a32:	68ac      	ldr	r4, [r5, #8]
 8015a34:	b913      	cbnz	r3, 8015a3c <_puts_r+0x1c>
 8015a36:	4628      	mov	r0, r5
 8015a38:	f000 fa42 	bl	8015ec0 <__sinit>
 8015a3c:	4b2c      	ldr	r3, [pc, #176]	; (8015af0 <_puts_r+0xd0>)
 8015a3e:	429c      	cmp	r4, r3
 8015a40:	d120      	bne.n	8015a84 <_puts_r+0x64>
 8015a42:	686c      	ldr	r4, [r5, #4]
 8015a44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015a46:	07db      	lsls	r3, r3, #31
 8015a48:	d405      	bmi.n	8015a56 <_puts_r+0x36>
 8015a4a:	89a3      	ldrh	r3, [r4, #12]
 8015a4c:	0598      	lsls	r0, r3, #22
 8015a4e:	d402      	bmi.n	8015a56 <_puts_r+0x36>
 8015a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a52:	f000 fad3 	bl	8015ffc <__retarget_lock_acquire_recursive>
 8015a56:	89a3      	ldrh	r3, [r4, #12]
 8015a58:	0719      	lsls	r1, r3, #28
 8015a5a:	d51d      	bpl.n	8015a98 <_puts_r+0x78>
 8015a5c:	6923      	ldr	r3, [r4, #16]
 8015a5e:	b1db      	cbz	r3, 8015a98 <_puts_r+0x78>
 8015a60:	3e01      	subs	r6, #1
 8015a62:	68a3      	ldr	r3, [r4, #8]
 8015a64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015a68:	3b01      	subs	r3, #1
 8015a6a:	60a3      	str	r3, [r4, #8]
 8015a6c:	bb39      	cbnz	r1, 8015abe <_puts_r+0x9e>
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	da38      	bge.n	8015ae4 <_puts_r+0xc4>
 8015a72:	4622      	mov	r2, r4
 8015a74:	210a      	movs	r1, #10
 8015a76:	4628      	mov	r0, r5
 8015a78:	f000 f848 	bl	8015b0c <__swbuf_r>
 8015a7c:	3001      	adds	r0, #1
 8015a7e:	d011      	beq.n	8015aa4 <_puts_r+0x84>
 8015a80:	250a      	movs	r5, #10
 8015a82:	e011      	b.n	8015aa8 <_puts_r+0x88>
 8015a84:	4b1b      	ldr	r3, [pc, #108]	; (8015af4 <_puts_r+0xd4>)
 8015a86:	429c      	cmp	r4, r3
 8015a88:	d101      	bne.n	8015a8e <_puts_r+0x6e>
 8015a8a:	68ac      	ldr	r4, [r5, #8]
 8015a8c:	e7da      	b.n	8015a44 <_puts_r+0x24>
 8015a8e:	4b1a      	ldr	r3, [pc, #104]	; (8015af8 <_puts_r+0xd8>)
 8015a90:	429c      	cmp	r4, r3
 8015a92:	bf08      	it	eq
 8015a94:	68ec      	ldreq	r4, [r5, #12]
 8015a96:	e7d5      	b.n	8015a44 <_puts_r+0x24>
 8015a98:	4621      	mov	r1, r4
 8015a9a:	4628      	mov	r0, r5
 8015a9c:	f000 f888 	bl	8015bb0 <__swsetup_r>
 8015aa0:	2800      	cmp	r0, #0
 8015aa2:	d0dd      	beq.n	8015a60 <_puts_r+0x40>
 8015aa4:	f04f 35ff 	mov.w	r5, #4294967295
 8015aa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015aaa:	07da      	lsls	r2, r3, #31
 8015aac:	d405      	bmi.n	8015aba <_puts_r+0x9a>
 8015aae:	89a3      	ldrh	r3, [r4, #12]
 8015ab0:	059b      	lsls	r3, r3, #22
 8015ab2:	d402      	bmi.n	8015aba <_puts_r+0x9a>
 8015ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ab6:	f000 faa2 	bl	8015ffe <__retarget_lock_release_recursive>
 8015aba:	4628      	mov	r0, r5
 8015abc:	bd70      	pop	{r4, r5, r6, pc}
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	da04      	bge.n	8015acc <_puts_r+0xac>
 8015ac2:	69a2      	ldr	r2, [r4, #24]
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	dc06      	bgt.n	8015ad6 <_puts_r+0xb6>
 8015ac8:	290a      	cmp	r1, #10
 8015aca:	d004      	beq.n	8015ad6 <_puts_r+0xb6>
 8015acc:	6823      	ldr	r3, [r4, #0]
 8015ace:	1c5a      	adds	r2, r3, #1
 8015ad0:	6022      	str	r2, [r4, #0]
 8015ad2:	7019      	strb	r1, [r3, #0]
 8015ad4:	e7c5      	b.n	8015a62 <_puts_r+0x42>
 8015ad6:	4622      	mov	r2, r4
 8015ad8:	4628      	mov	r0, r5
 8015ada:	f000 f817 	bl	8015b0c <__swbuf_r>
 8015ade:	3001      	adds	r0, #1
 8015ae0:	d1bf      	bne.n	8015a62 <_puts_r+0x42>
 8015ae2:	e7df      	b.n	8015aa4 <_puts_r+0x84>
 8015ae4:	6823      	ldr	r3, [r4, #0]
 8015ae6:	250a      	movs	r5, #10
 8015ae8:	1c5a      	adds	r2, r3, #1
 8015aea:	6022      	str	r2, [r4, #0]
 8015aec:	701d      	strb	r5, [r3, #0]
 8015aee:	e7db      	b.n	8015aa8 <_puts_r+0x88>
 8015af0:	08016ba8 	.word	0x08016ba8
 8015af4:	08016bc8 	.word	0x08016bc8
 8015af8:	08016b88 	.word	0x08016b88

08015afc <puts>:
 8015afc:	4b02      	ldr	r3, [pc, #8]	; (8015b08 <puts+0xc>)
 8015afe:	4601      	mov	r1, r0
 8015b00:	6818      	ldr	r0, [r3, #0]
 8015b02:	f7ff bf8d 	b.w	8015a20 <_puts_r>
 8015b06:	bf00      	nop
 8015b08:	20000180 	.word	0x20000180

08015b0c <__swbuf_r>:
 8015b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b0e:	460e      	mov	r6, r1
 8015b10:	4614      	mov	r4, r2
 8015b12:	4605      	mov	r5, r0
 8015b14:	b118      	cbz	r0, 8015b1e <__swbuf_r+0x12>
 8015b16:	6983      	ldr	r3, [r0, #24]
 8015b18:	b90b      	cbnz	r3, 8015b1e <__swbuf_r+0x12>
 8015b1a:	f000 f9d1 	bl	8015ec0 <__sinit>
 8015b1e:	4b21      	ldr	r3, [pc, #132]	; (8015ba4 <__swbuf_r+0x98>)
 8015b20:	429c      	cmp	r4, r3
 8015b22:	d12b      	bne.n	8015b7c <__swbuf_r+0x70>
 8015b24:	686c      	ldr	r4, [r5, #4]
 8015b26:	69a3      	ldr	r3, [r4, #24]
 8015b28:	60a3      	str	r3, [r4, #8]
 8015b2a:	89a3      	ldrh	r3, [r4, #12]
 8015b2c:	071a      	lsls	r2, r3, #28
 8015b2e:	d52f      	bpl.n	8015b90 <__swbuf_r+0x84>
 8015b30:	6923      	ldr	r3, [r4, #16]
 8015b32:	b36b      	cbz	r3, 8015b90 <__swbuf_r+0x84>
 8015b34:	6923      	ldr	r3, [r4, #16]
 8015b36:	6820      	ldr	r0, [r4, #0]
 8015b38:	1ac0      	subs	r0, r0, r3
 8015b3a:	6963      	ldr	r3, [r4, #20]
 8015b3c:	b2f6      	uxtb	r6, r6
 8015b3e:	4283      	cmp	r3, r0
 8015b40:	4637      	mov	r7, r6
 8015b42:	dc04      	bgt.n	8015b4e <__swbuf_r+0x42>
 8015b44:	4621      	mov	r1, r4
 8015b46:	4628      	mov	r0, r5
 8015b48:	f000 f926 	bl	8015d98 <_fflush_r>
 8015b4c:	bb30      	cbnz	r0, 8015b9c <__swbuf_r+0x90>
 8015b4e:	68a3      	ldr	r3, [r4, #8]
 8015b50:	3b01      	subs	r3, #1
 8015b52:	60a3      	str	r3, [r4, #8]
 8015b54:	6823      	ldr	r3, [r4, #0]
 8015b56:	1c5a      	adds	r2, r3, #1
 8015b58:	6022      	str	r2, [r4, #0]
 8015b5a:	701e      	strb	r6, [r3, #0]
 8015b5c:	6963      	ldr	r3, [r4, #20]
 8015b5e:	3001      	adds	r0, #1
 8015b60:	4283      	cmp	r3, r0
 8015b62:	d004      	beq.n	8015b6e <__swbuf_r+0x62>
 8015b64:	89a3      	ldrh	r3, [r4, #12]
 8015b66:	07db      	lsls	r3, r3, #31
 8015b68:	d506      	bpl.n	8015b78 <__swbuf_r+0x6c>
 8015b6a:	2e0a      	cmp	r6, #10
 8015b6c:	d104      	bne.n	8015b78 <__swbuf_r+0x6c>
 8015b6e:	4621      	mov	r1, r4
 8015b70:	4628      	mov	r0, r5
 8015b72:	f000 f911 	bl	8015d98 <_fflush_r>
 8015b76:	b988      	cbnz	r0, 8015b9c <__swbuf_r+0x90>
 8015b78:	4638      	mov	r0, r7
 8015b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b7c:	4b0a      	ldr	r3, [pc, #40]	; (8015ba8 <__swbuf_r+0x9c>)
 8015b7e:	429c      	cmp	r4, r3
 8015b80:	d101      	bne.n	8015b86 <__swbuf_r+0x7a>
 8015b82:	68ac      	ldr	r4, [r5, #8]
 8015b84:	e7cf      	b.n	8015b26 <__swbuf_r+0x1a>
 8015b86:	4b09      	ldr	r3, [pc, #36]	; (8015bac <__swbuf_r+0xa0>)
 8015b88:	429c      	cmp	r4, r3
 8015b8a:	bf08      	it	eq
 8015b8c:	68ec      	ldreq	r4, [r5, #12]
 8015b8e:	e7ca      	b.n	8015b26 <__swbuf_r+0x1a>
 8015b90:	4621      	mov	r1, r4
 8015b92:	4628      	mov	r0, r5
 8015b94:	f000 f80c 	bl	8015bb0 <__swsetup_r>
 8015b98:	2800      	cmp	r0, #0
 8015b9a:	d0cb      	beq.n	8015b34 <__swbuf_r+0x28>
 8015b9c:	f04f 37ff 	mov.w	r7, #4294967295
 8015ba0:	e7ea      	b.n	8015b78 <__swbuf_r+0x6c>
 8015ba2:	bf00      	nop
 8015ba4:	08016ba8 	.word	0x08016ba8
 8015ba8:	08016bc8 	.word	0x08016bc8
 8015bac:	08016b88 	.word	0x08016b88

08015bb0 <__swsetup_r>:
 8015bb0:	4b32      	ldr	r3, [pc, #200]	; (8015c7c <__swsetup_r+0xcc>)
 8015bb2:	b570      	push	{r4, r5, r6, lr}
 8015bb4:	681d      	ldr	r5, [r3, #0]
 8015bb6:	4606      	mov	r6, r0
 8015bb8:	460c      	mov	r4, r1
 8015bba:	b125      	cbz	r5, 8015bc6 <__swsetup_r+0x16>
 8015bbc:	69ab      	ldr	r3, [r5, #24]
 8015bbe:	b913      	cbnz	r3, 8015bc6 <__swsetup_r+0x16>
 8015bc0:	4628      	mov	r0, r5
 8015bc2:	f000 f97d 	bl	8015ec0 <__sinit>
 8015bc6:	4b2e      	ldr	r3, [pc, #184]	; (8015c80 <__swsetup_r+0xd0>)
 8015bc8:	429c      	cmp	r4, r3
 8015bca:	d10f      	bne.n	8015bec <__swsetup_r+0x3c>
 8015bcc:	686c      	ldr	r4, [r5, #4]
 8015bce:	89a3      	ldrh	r3, [r4, #12]
 8015bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015bd4:	0719      	lsls	r1, r3, #28
 8015bd6:	d42c      	bmi.n	8015c32 <__swsetup_r+0x82>
 8015bd8:	06dd      	lsls	r5, r3, #27
 8015bda:	d411      	bmi.n	8015c00 <__swsetup_r+0x50>
 8015bdc:	2309      	movs	r3, #9
 8015bde:	6033      	str	r3, [r6, #0]
 8015be0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015be4:	81a3      	strh	r3, [r4, #12]
 8015be6:	f04f 30ff 	mov.w	r0, #4294967295
 8015bea:	e03e      	b.n	8015c6a <__swsetup_r+0xba>
 8015bec:	4b25      	ldr	r3, [pc, #148]	; (8015c84 <__swsetup_r+0xd4>)
 8015bee:	429c      	cmp	r4, r3
 8015bf0:	d101      	bne.n	8015bf6 <__swsetup_r+0x46>
 8015bf2:	68ac      	ldr	r4, [r5, #8]
 8015bf4:	e7eb      	b.n	8015bce <__swsetup_r+0x1e>
 8015bf6:	4b24      	ldr	r3, [pc, #144]	; (8015c88 <__swsetup_r+0xd8>)
 8015bf8:	429c      	cmp	r4, r3
 8015bfa:	bf08      	it	eq
 8015bfc:	68ec      	ldreq	r4, [r5, #12]
 8015bfe:	e7e6      	b.n	8015bce <__swsetup_r+0x1e>
 8015c00:	0758      	lsls	r0, r3, #29
 8015c02:	d512      	bpl.n	8015c2a <__swsetup_r+0x7a>
 8015c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015c06:	b141      	cbz	r1, 8015c1a <__swsetup_r+0x6a>
 8015c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c0c:	4299      	cmp	r1, r3
 8015c0e:	d002      	beq.n	8015c16 <__swsetup_r+0x66>
 8015c10:	4630      	mov	r0, r6
 8015c12:	f000 fa5b 	bl	80160cc <_free_r>
 8015c16:	2300      	movs	r3, #0
 8015c18:	6363      	str	r3, [r4, #52]	; 0x34
 8015c1a:	89a3      	ldrh	r3, [r4, #12]
 8015c1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015c20:	81a3      	strh	r3, [r4, #12]
 8015c22:	2300      	movs	r3, #0
 8015c24:	6063      	str	r3, [r4, #4]
 8015c26:	6923      	ldr	r3, [r4, #16]
 8015c28:	6023      	str	r3, [r4, #0]
 8015c2a:	89a3      	ldrh	r3, [r4, #12]
 8015c2c:	f043 0308 	orr.w	r3, r3, #8
 8015c30:	81a3      	strh	r3, [r4, #12]
 8015c32:	6923      	ldr	r3, [r4, #16]
 8015c34:	b94b      	cbnz	r3, 8015c4a <__swsetup_r+0x9a>
 8015c36:	89a3      	ldrh	r3, [r4, #12]
 8015c38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015c40:	d003      	beq.n	8015c4a <__swsetup_r+0x9a>
 8015c42:	4621      	mov	r1, r4
 8015c44:	4630      	mov	r0, r6
 8015c46:	f000 fa01 	bl	801604c <__smakebuf_r>
 8015c4a:	89a0      	ldrh	r0, [r4, #12]
 8015c4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015c50:	f010 0301 	ands.w	r3, r0, #1
 8015c54:	d00a      	beq.n	8015c6c <__swsetup_r+0xbc>
 8015c56:	2300      	movs	r3, #0
 8015c58:	60a3      	str	r3, [r4, #8]
 8015c5a:	6963      	ldr	r3, [r4, #20]
 8015c5c:	425b      	negs	r3, r3
 8015c5e:	61a3      	str	r3, [r4, #24]
 8015c60:	6923      	ldr	r3, [r4, #16]
 8015c62:	b943      	cbnz	r3, 8015c76 <__swsetup_r+0xc6>
 8015c64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015c68:	d1ba      	bne.n	8015be0 <__swsetup_r+0x30>
 8015c6a:	bd70      	pop	{r4, r5, r6, pc}
 8015c6c:	0781      	lsls	r1, r0, #30
 8015c6e:	bf58      	it	pl
 8015c70:	6963      	ldrpl	r3, [r4, #20]
 8015c72:	60a3      	str	r3, [r4, #8]
 8015c74:	e7f4      	b.n	8015c60 <__swsetup_r+0xb0>
 8015c76:	2000      	movs	r0, #0
 8015c78:	e7f7      	b.n	8015c6a <__swsetup_r+0xba>
 8015c7a:	bf00      	nop
 8015c7c:	20000180 	.word	0x20000180
 8015c80:	08016ba8 	.word	0x08016ba8
 8015c84:	08016bc8 	.word	0x08016bc8
 8015c88:	08016b88 	.word	0x08016b88

08015c8c <__sflush_r>:
 8015c8c:	898a      	ldrh	r2, [r1, #12]
 8015c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c92:	4605      	mov	r5, r0
 8015c94:	0710      	lsls	r0, r2, #28
 8015c96:	460c      	mov	r4, r1
 8015c98:	d458      	bmi.n	8015d4c <__sflush_r+0xc0>
 8015c9a:	684b      	ldr	r3, [r1, #4]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	dc05      	bgt.n	8015cac <__sflush_r+0x20>
 8015ca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	dc02      	bgt.n	8015cac <__sflush_r+0x20>
 8015ca6:	2000      	movs	r0, #0
 8015ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015cae:	2e00      	cmp	r6, #0
 8015cb0:	d0f9      	beq.n	8015ca6 <__sflush_r+0x1a>
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015cb8:	682f      	ldr	r7, [r5, #0]
 8015cba:	602b      	str	r3, [r5, #0]
 8015cbc:	d032      	beq.n	8015d24 <__sflush_r+0x98>
 8015cbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015cc0:	89a3      	ldrh	r3, [r4, #12]
 8015cc2:	075a      	lsls	r2, r3, #29
 8015cc4:	d505      	bpl.n	8015cd2 <__sflush_r+0x46>
 8015cc6:	6863      	ldr	r3, [r4, #4]
 8015cc8:	1ac0      	subs	r0, r0, r3
 8015cca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015ccc:	b10b      	cbz	r3, 8015cd2 <__sflush_r+0x46>
 8015cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015cd0:	1ac0      	subs	r0, r0, r3
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	4602      	mov	r2, r0
 8015cd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015cd8:	6a21      	ldr	r1, [r4, #32]
 8015cda:	4628      	mov	r0, r5
 8015cdc:	47b0      	blx	r6
 8015cde:	1c43      	adds	r3, r0, #1
 8015ce0:	89a3      	ldrh	r3, [r4, #12]
 8015ce2:	d106      	bne.n	8015cf2 <__sflush_r+0x66>
 8015ce4:	6829      	ldr	r1, [r5, #0]
 8015ce6:	291d      	cmp	r1, #29
 8015ce8:	d82c      	bhi.n	8015d44 <__sflush_r+0xb8>
 8015cea:	4a2a      	ldr	r2, [pc, #168]	; (8015d94 <__sflush_r+0x108>)
 8015cec:	40ca      	lsrs	r2, r1
 8015cee:	07d6      	lsls	r6, r2, #31
 8015cf0:	d528      	bpl.n	8015d44 <__sflush_r+0xb8>
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	6062      	str	r2, [r4, #4]
 8015cf6:	04d9      	lsls	r1, r3, #19
 8015cf8:	6922      	ldr	r2, [r4, #16]
 8015cfa:	6022      	str	r2, [r4, #0]
 8015cfc:	d504      	bpl.n	8015d08 <__sflush_r+0x7c>
 8015cfe:	1c42      	adds	r2, r0, #1
 8015d00:	d101      	bne.n	8015d06 <__sflush_r+0x7a>
 8015d02:	682b      	ldr	r3, [r5, #0]
 8015d04:	b903      	cbnz	r3, 8015d08 <__sflush_r+0x7c>
 8015d06:	6560      	str	r0, [r4, #84]	; 0x54
 8015d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d0a:	602f      	str	r7, [r5, #0]
 8015d0c:	2900      	cmp	r1, #0
 8015d0e:	d0ca      	beq.n	8015ca6 <__sflush_r+0x1a>
 8015d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d14:	4299      	cmp	r1, r3
 8015d16:	d002      	beq.n	8015d1e <__sflush_r+0x92>
 8015d18:	4628      	mov	r0, r5
 8015d1a:	f000 f9d7 	bl	80160cc <_free_r>
 8015d1e:	2000      	movs	r0, #0
 8015d20:	6360      	str	r0, [r4, #52]	; 0x34
 8015d22:	e7c1      	b.n	8015ca8 <__sflush_r+0x1c>
 8015d24:	6a21      	ldr	r1, [r4, #32]
 8015d26:	2301      	movs	r3, #1
 8015d28:	4628      	mov	r0, r5
 8015d2a:	47b0      	blx	r6
 8015d2c:	1c41      	adds	r1, r0, #1
 8015d2e:	d1c7      	bne.n	8015cc0 <__sflush_r+0x34>
 8015d30:	682b      	ldr	r3, [r5, #0]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d0c4      	beq.n	8015cc0 <__sflush_r+0x34>
 8015d36:	2b1d      	cmp	r3, #29
 8015d38:	d001      	beq.n	8015d3e <__sflush_r+0xb2>
 8015d3a:	2b16      	cmp	r3, #22
 8015d3c:	d101      	bne.n	8015d42 <__sflush_r+0xb6>
 8015d3e:	602f      	str	r7, [r5, #0]
 8015d40:	e7b1      	b.n	8015ca6 <__sflush_r+0x1a>
 8015d42:	89a3      	ldrh	r3, [r4, #12]
 8015d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d48:	81a3      	strh	r3, [r4, #12]
 8015d4a:	e7ad      	b.n	8015ca8 <__sflush_r+0x1c>
 8015d4c:	690f      	ldr	r7, [r1, #16]
 8015d4e:	2f00      	cmp	r7, #0
 8015d50:	d0a9      	beq.n	8015ca6 <__sflush_r+0x1a>
 8015d52:	0793      	lsls	r3, r2, #30
 8015d54:	680e      	ldr	r6, [r1, #0]
 8015d56:	bf08      	it	eq
 8015d58:	694b      	ldreq	r3, [r1, #20]
 8015d5a:	600f      	str	r7, [r1, #0]
 8015d5c:	bf18      	it	ne
 8015d5e:	2300      	movne	r3, #0
 8015d60:	eba6 0807 	sub.w	r8, r6, r7
 8015d64:	608b      	str	r3, [r1, #8]
 8015d66:	f1b8 0f00 	cmp.w	r8, #0
 8015d6a:	dd9c      	ble.n	8015ca6 <__sflush_r+0x1a>
 8015d6c:	6a21      	ldr	r1, [r4, #32]
 8015d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015d70:	4643      	mov	r3, r8
 8015d72:	463a      	mov	r2, r7
 8015d74:	4628      	mov	r0, r5
 8015d76:	47b0      	blx	r6
 8015d78:	2800      	cmp	r0, #0
 8015d7a:	dc06      	bgt.n	8015d8a <__sflush_r+0xfe>
 8015d7c:	89a3      	ldrh	r3, [r4, #12]
 8015d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d82:	81a3      	strh	r3, [r4, #12]
 8015d84:	f04f 30ff 	mov.w	r0, #4294967295
 8015d88:	e78e      	b.n	8015ca8 <__sflush_r+0x1c>
 8015d8a:	4407      	add	r7, r0
 8015d8c:	eba8 0800 	sub.w	r8, r8, r0
 8015d90:	e7e9      	b.n	8015d66 <__sflush_r+0xda>
 8015d92:	bf00      	nop
 8015d94:	20400001 	.word	0x20400001

08015d98 <_fflush_r>:
 8015d98:	b538      	push	{r3, r4, r5, lr}
 8015d9a:	690b      	ldr	r3, [r1, #16]
 8015d9c:	4605      	mov	r5, r0
 8015d9e:	460c      	mov	r4, r1
 8015da0:	b913      	cbnz	r3, 8015da8 <_fflush_r+0x10>
 8015da2:	2500      	movs	r5, #0
 8015da4:	4628      	mov	r0, r5
 8015da6:	bd38      	pop	{r3, r4, r5, pc}
 8015da8:	b118      	cbz	r0, 8015db2 <_fflush_r+0x1a>
 8015daa:	6983      	ldr	r3, [r0, #24]
 8015dac:	b90b      	cbnz	r3, 8015db2 <_fflush_r+0x1a>
 8015dae:	f000 f887 	bl	8015ec0 <__sinit>
 8015db2:	4b14      	ldr	r3, [pc, #80]	; (8015e04 <_fflush_r+0x6c>)
 8015db4:	429c      	cmp	r4, r3
 8015db6:	d11b      	bne.n	8015df0 <_fflush_r+0x58>
 8015db8:	686c      	ldr	r4, [r5, #4]
 8015dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d0ef      	beq.n	8015da2 <_fflush_r+0xa>
 8015dc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015dc4:	07d0      	lsls	r0, r2, #31
 8015dc6:	d404      	bmi.n	8015dd2 <_fflush_r+0x3a>
 8015dc8:	0599      	lsls	r1, r3, #22
 8015dca:	d402      	bmi.n	8015dd2 <_fflush_r+0x3a>
 8015dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015dce:	f000 f915 	bl	8015ffc <__retarget_lock_acquire_recursive>
 8015dd2:	4628      	mov	r0, r5
 8015dd4:	4621      	mov	r1, r4
 8015dd6:	f7ff ff59 	bl	8015c8c <__sflush_r>
 8015dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ddc:	07da      	lsls	r2, r3, #31
 8015dde:	4605      	mov	r5, r0
 8015de0:	d4e0      	bmi.n	8015da4 <_fflush_r+0xc>
 8015de2:	89a3      	ldrh	r3, [r4, #12]
 8015de4:	059b      	lsls	r3, r3, #22
 8015de6:	d4dd      	bmi.n	8015da4 <_fflush_r+0xc>
 8015de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015dea:	f000 f908 	bl	8015ffe <__retarget_lock_release_recursive>
 8015dee:	e7d9      	b.n	8015da4 <_fflush_r+0xc>
 8015df0:	4b05      	ldr	r3, [pc, #20]	; (8015e08 <_fflush_r+0x70>)
 8015df2:	429c      	cmp	r4, r3
 8015df4:	d101      	bne.n	8015dfa <_fflush_r+0x62>
 8015df6:	68ac      	ldr	r4, [r5, #8]
 8015df8:	e7df      	b.n	8015dba <_fflush_r+0x22>
 8015dfa:	4b04      	ldr	r3, [pc, #16]	; (8015e0c <_fflush_r+0x74>)
 8015dfc:	429c      	cmp	r4, r3
 8015dfe:	bf08      	it	eq
 8015e00:	68ec      	ldreq	r4, [r5, #12]
 8015e02:	e7da      	b.n	8015dba <_fflush_r+0x22>
 8015e04:	08016ba8 	.word	0x08016ba8
 8015e08:	08016bc8 	.word	0x08016bc8
 8015e0c:	08016b88 	.word	0x08016b88

08015e10 <std>:
 8015e10:	2300      	movs	r3, #0
 8015e12:	b510      	push	{r4, lr}
 8015e14:	4604      	mov	r4, r0
 8015e16:	e9c0 3300 	strd	r3, r3, [r0]
 8015e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015e1e:	6083      	str	r3, [r0, #8]
 8015e20:	8181      	strh	r1, [r0, #12]
 8015e22:	6643      	str	r3, [r0, #100]	; 0x64
 8015e24:	81c2      	strh	r2, [r0, #14]
 8015e26:	6183      	str	r3, [r0, #24]
 8015e28:	4619      	mov	r1, r3
 8015e2a:	2208      	movs	r2, #8
 8015e2c:	305c      	adds	r0, #92	; 0x5c
 8015e2e:	f7ff fdef 	bl	8015a10 <memset>
 8015e32:	4b05      	ldr	r3, [pc, #20]	; (8015e48 <std+0x38>)
 8015e34:	6263      	str	r3, [r4, #36]	; 0x24
 8015e36:	4b05      	ldr	r3, [pc, #20]	; (8015e4c <std+0x3c>)
 8015e38:	62a3      	str	r3, [r4, #40]	; 0x28
 8015e3a:	4b05      	ldr	r3, [pc, #20]	; (8015e50 <std+0x40>)
 8015e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015e3e:	4b05      	ldr	r3, [pc, #20]	; (8015e54 <std+0x44>)
 8015e40:	6224      	str	r4, [r4, #32]
 8015e42:	6323      	str	r3, [r4, #48]	; 0x30
 8015e44:	bd10      	pop	{r4, pc}
 8015e46:	bf00      	nop
 8015e48:	080162ad 	.word	0x080162ad
 8015e4c:	080162cf 	.word	0x080162cf
 8015e50:	08016307 	.word	0x08016307
 8015e54:	0801632b 	.word	0x0801632b

08015e58 <_cleanup_r>:
 8015e58:	4901      	ldr	r1, [pc, #4]	; (8015e60 <_cleanup_r+0x8>)
 8015e5a:	f000 b8af 	b.w	8015fbc <_fwalk_reent>
 8015e5e:	bf00      	nop
 8015e60:	08015d99 	.word	0x08015d99

08015e64 <__sfmoreglue>:
 8015e64:	b570      	push	{r4, r5, r6, lr}
 8015e66:	2268      	movs	r2, #104	; 0x68
 8015e68:	1e4d      	subs	r5, r1, #1
 8015e6a:	4355      	muls	r5, r2
 8015e6c:	460e      	mov	r6, r1
 8015e6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015e72:	f000 f997 	bl	80161a4 <_malloc_r>
 8015e76:	4604      	mov	r4, r0
 8015e78:	b140      	cbz	r0, 8015e8c <__sfmoreglue+0x28>
 8015e7a:	2100      	movs	r1, #0
 8015e7c:	e9c0 1600 	strd	r1, r6, [r0]
 8015e80:	300c      	adds	r0, #12
 8015e82:	60a0      	str	r0, [r4, #8]
 8015e84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015e88:	f7ff fdc2 	bl	8015a10 <memset>
 8015e8c:	4620      	mov	r0, r4
 8015e8e:	bd70      	pop	{r4, r5, r6, pc}

08015e90 <__sfp_lock_acquire>:
 8015e90:	4801      	ldr	r0, [pc, #4]	; (8015e98 <__sfp_lock_acquire+0x8>)
 8015e92:	f000 b8b3 	b.w	8015ffc <__retarget_lock_acquire_recursive>
 8015e96:	bf00      	nop
 8015e98:	20005305 	.word	0x20005305

08015e9c <__sfp_lock_release>:
 8015e9c:	4801      	ldr	r0, [pc, #4]	; (8015ea4 <__sfp_lock_release+0x8>)
 8015e9e:	f000 b8ae 	b.w	8015ffe <__retarget_lock_release_recursive>
 8015ea2:	bf00      	nop
 8015ea4:	20005305 	.word	0x20005305

08015ea8 <__sinit_lock_acquire>:
 8015ea8:	4801      	ldr	r0, [pc, #4]	; (8015eb0 <__sinit_lock_acquire+0x8>)
 8015eaa:	f000 b8a7 	b.w	8015ffc <__retarget_lock_acquire_recursive>
 8015eae:	bf00      	nop
 8015eb0:	20005306 	.word	0x20005306

08015eb4 <__sinit_lock_release>:
 8015eb4:	4801      	ldr	r0, [pc, #4]	; (8015ebc <__sinit_lock_release+0x8>)
 8015eb6:	f000 b8a2 	b.w	8015ffe <__retarget_lock_release_recursive>
 8015eba:	bf00      	nop
 8015ebc:	20005306 	.word	0x20005306

08015ec0 <__sinit>:
 8015ec0:	b510      	push	{r4, lr}
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	f7ff fff0 	bl	8015ea8 <__sinit_lock_acquire>
 8015ec8:	69a3      	ldr	r3, [r4, #24]
 8015eca:	b11b      	cbz	r3, 8015ed4 <__sinit+0x14>
 8015ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ed0:	f7ff bff0 	b.w	8015eb4 <__sinit_lock_release>
 8015ed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015ed8:	6523      	str	r3, [r4, #80]	; 0x50
 8015eda:	4b13      	ldr	r3, [pc, #76]	; (8015f28 <__sinit+0x68>)
 8015edc:	4a13      	ldr	r2, [pc, #76]	; (8015f2c <__sinit+0x6c>)
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	62a2      	str	r2, [r4, #40]	; 0x28
 8015ee2:	42a3      	cmp	r3, r4
 8015ee4:	bf04      	itt	eq
 8015ee6:	2301      	moveq	r3, #1
 8015ee8:	61a3      	streq	r3, [r4, #24]
 8015eea:	4620      	mov	r0, r4
 8015eec:	f000 f820 	bl	8015f30 <__sfp>
 8015ef0:	6060      	str	r0, [r4, #4]
 8015ef2:	4620      	mov	r0, r4
 8015ef4:	f000 f81c 	bl	8015f30 <__sfp>
 8015ef8:	60a0      	str	r0, [r4, #8]
 8015efa:	4620      	mov	r0, r4
 8015efc:	f000 f818 	bl	8015f30 <__sfp>
 8015f00:	2200      	movs	r2, #0
 8015f02:	60e0      	str	r0, [r4, #12]
 8015f04:	2104      	movs	r1, #4
 8015f06:	6860      	ldr	r0, [r4, #4]
 8015f08:	f7ff ff82 	bl	8015e10 <std>
 8015f0c:	68a0      	ldr	r0, [r4, #8]
 8015f0e:	2201      	movs	r2, #1
 8015f10:	2109      	movs	r1, #9
 8015f12:	f7ff ff7d 	bl	8015e10 <std>
 8015f16:	68e0      	ldr	r0, [r4, #12]
 8015f18:	2202      	movs	r2, #2
 8015f1a:	2112      	movs	r1, #18
 8015f1c:	f7ff ff78 	bl	8015e10 <std>
 8015f20:	2301      	movs	r3, #1
 8015f22:	61a3      	str	r3, [r4, #24]
 8015f24:	e7d2      	b.n	8015ecc <__sinit+0xc>
 8015f26:	bf00      	nop
 8015f28:	08016b84 	.word	0x08016b84
 8015f2c:	08015e59 	.word	0x08015e59

08015f30 <__sfp>:
 8015f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f32:	4607      	mov	r7, r0
 8015f34:	f7ff ffac 	bl	8015e90 <__sfp_lock_acquire>
 8015f38:	4b1e      	ldr	r3, [pc, #120]	; (8015fb4 <__sfp+0x84>)
 8015f3a:	681e      	ldr	r6, [r3, #0]
 8015f3c:	69b3      	ldr	r3, [r6, #24]
 8015f3e:	b913      	cbnz	r3, 8015f46 <__sfp+0x16>
 8015f40:	4630      	mov	r0, r6
 8015f42:	f7ff ffbd 	bl	8015ec0 <__sinit>
 8015f46:	3648      	adds	r6, #72	; 0x48
 8015f48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015f4c:	3b01      	subs	r3, #1
 8015f4e:	d503      	bpl.n	8015f58 <__sfp+0x28>
 8015f50:	6833      	ldr	r3, [r6, #0]
 8015f52:	b30b      	cbz	r3, 8015f98 <__sfp+0x68>
 8015f54:	6836      	ldr	r6, [r6, #0]
 8015f56:	e7f7      	b.n	8015f48 <__sfp+0x18>
 8015f58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015f5c:	b9d5      	cbnz	r5, 8015f94 <__sfp+0x64>
 8015f5e:	4b16      	ldr	r3, [pc, #88]	; (8015fb8 <__sfp+0x88>)
 8015f60:	60e3      	str	r3, [r4, #12]
 8015f62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015f66:	6665      	str	r5, [r4, #100]	; 0x64
 8015f68:	f000 f847 	bl	8015ffa <__retarget_lock_init_recursive>
 8015f6c:	f7ff ff96 	bl	8015e9c <__sfp_lock_release>
 8015f70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015f74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015f78:	6025      	str	r5, [r4, #0]
 8015f7a:	61a5      	str	r5, [r4, #24]
 8015f7c:	2208      	movs	r2, #8
 8015f7e:	4629      	mov	r1, r5
 8015f80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015f84:	f7ff fd44 	bl	8015a10 <memset>
 8015f88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015f8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015f90:	4620      	mov	r0, r4
 8015f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f94:	3468      	adds	r4, #104	; 0x68
 8015f96:	e7d9      	b.n	8015f4c <__sfp+0x1c>
 8015f98:	2104      	movs	r1, #4
 8015f9a:	4638      	mov	r0, r7
 8015f9c:	f7ff ff62 	bl	8015e64 <__sfmoreglue>
 8015fa0:	4604      	mov	r4, r0
 8015fa2:	6030      	str	r0, [r6, #0]
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	d1d5      	bne.n	8015f54 <__sfp+0x24>
 8015fa8:	f7ff ff78 	bl	8015e9c <__sfp_lock_release>
 8015fac:	230c      	movs	r3, #12
 8015fae:	603b      	str	r3, [r7, #0]
 8015fb0:	e7ee      	b.n	8015f90 <__sfp+0x60>
 8015fb2:	bf00      	nop
 8015fb4:	08016b84 	.word	0x08016b84
 8015fb8:	ffff0001 	.word	0xffff0001

08015fbc <_fwalk_reent>:
 8015fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fc0:	4606      	mov	r6, r0
 8015fc2:	4688      	mov	r8, r1
 8015fc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015fc8:	2700      	movs	r7, #0
 8015fca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015fce:	f1b9 0901 	subs.w	r9, r9, #1
 8015fd2:	d505      	bpl.n	8015fe0 <_fwalk_reent+0x24>
 8015fd4:	6824      	ldr	r4, [r4, #0]
 8015fd6:	2c00      	cmp	r4, #0
 8015fd8:	d1f7      	bne.n	8015fca <_fwalk_reent+0xe>
 8015fda:	4638      	mov	r0, r7
 8015fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fe0:	89ab      	ldrh	r3, [r5, #12]
 8015fe2:	2b01      	cmp	r3, #1
 8015fe4:	d907      	bls.n	8015ff6 <_fwalk_reent+0x3a>
 8015fe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015fea:	3301      	adds	r3, #1
 8015fec:	d003      	beq.n	8015ff6 <_fwalk_reent+0x3a>
 8015fee:	4629      	mov	r1, r5
 8015ff0:	4630      	mov	r0, r6
 8015ff2:	47c0      	blx	r8
 8015ff4:	4307      	orrs	r7, r0
 8015ff6:	3568      	adds	r5, #104	; 0x68
 8015ff8:	e7e9      	b.n	8015fce <_fwalk_reent+0x12>

08015ffa <__retarget_lock_init_recursive>:
 8015ffa:	4770      	bx	lr

08015ffc <__retarget_lock_acquire_recursive>:
 8015ffc:	4770      	bx	lr

08015ffe <__retarget_lock_release_recursive>:
 8015ffe:	4770      	bx	lr

08016000 <__swhatbuf_r>:
 8016000:	b570      	push	{r4, r5, r6, lr}
 8016002:	460e      	mov	r6, r1
 8016004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016008:	2900      	cmp	r1, #0
 801600a:	b096      	sub	sp, #88	; 0x58
 801600c:	4614      	mov	r4, r2
 801600e:	461d      	mov	r5, r3
 8016010:	da08      	bge.n	8016024 <__swhatbuf_r+0x24>
 8016012:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016016:	2200      	movs	r2, #0
 8016018:	602a      	str	r2, [r5, #0]
 801601a:	061a      	lsls	r2, r3, #24
 801601c:	d410      	bmi.n	8016040 <__swhatbuf_r+0x40>
 801601e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016022:	e00e      	b.n	8016042 <__swhatbuf_r+0x42>
 8016024:	466a      	mov	r2, sp
 8016026:	f000 f9a7 	bl	8016378 <_fstat_r>
 801602a:	2800      	cmp	r0, #0
 801602c:	dbf1      	blt.n	8016012 <__swhatbuf_r+0x12>
 801602e:	9a01      	ldr	r2, [sp, #4]
 8016030:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016034:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016038:	425a      	negs	r2, r3
 801603a:	415a      	adcs	r2, r3
 801603c:	602a      	str	r2, [r5, #0]
 801603e:	e7ee      	b.n	801601e <__swhatbuf_r+0x1e>
 8016040:	2340      	movs	r3, #64	; 0x40
 8016042:	2000      	movs	r0, #0
 8016044:	6023      	str	r3, [r4, #0]
 8016046:	b016      	add	sp, #88	; 0x58
 8016048:	bd70      	pop	{r4, r5, r6, pc}
	...

0801604c <__smakebuf_r>:
 801604c:	898b      	ldrh	r3, [r1, #12]
 801604e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016050:	079d      	lsls	r5, r3, #30
 8016052:	4606      	mov	r6, r0
 8016054:	460c      	mov	r4, r1
 8016056:	d507      	bpl.n	8016068 <__smakebuf_r+0x1c>
 8016058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801605c:	6023      	str	r3, [r4, #0]
 801605e:	6123      	str	r3, [r4, #16]
 8016060:	2301      	movs	r3, #1
 8016062:	6163      	str	r3, [r4, #20]
 8016064:	b002      	add	sp, #8
 8016066:	bd70      	pop	{r4, r5, r6, pc}
 8016068:	ab01      	add	r3, sp, #4
 801606a:	466a      	mov	r2, sp
 801606c:	f7ff ffc8 	bl	8016000 <__swhatbuf_r>
 8016070:	9900      	ldr	r1, [sp, #0]
 8016072:	4605      	mov	r5, r0
 8016074:	4630      	mov	r0, r6
 8016076:	f000 f895 	bl	80161a4 <_malloc_r>
 801607a:	b948      	cbnz	r0, 8016090 <__smakebuf_r+0x44>
 801607c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016080:	059a      	lsls	r2, r3, #22
 8016082:	d4ef      	bmi.n	8016064 <__smakebuf_r+0x18>
 8016084:	f023 0303 	bic.w	r3, r3, #3
 8016088:	f043 0302 	orr.w	r3, r3, #2
 801608c:	81a3      	strh	r3, [r4, #12]
 801608e:	e7e3      	b.n	8016058 <__smakebuf_r+0xc>
 8016090:	4b0d      	ldr	r3, [pc, #52]	; (80160c8 <__smakebuf_r+0x7c>)
 8016092:	62b3      	str	r3, [r6, #40]	; 0x28
 8016094:	89a3      	ldrh	r3, [r4, #12]
 8016096:	6020      	str	r0, [r4, #0]
 8016098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801609c:	81a3      	strh	r3, [r4, #12]
 801609e:	9b00      	ldr	r3, [sp, #0]
 80160a0:	6163      	str	r3, [r4, #20]
 80160a2:	9b01      	ldr	r3, [sp, #4]
 80160a4:	6120      	str	r0, [r4, #16]
 80160a6:	b15b      	cbz	r3, 80160c0 <__smakebuf_r+0x74>
 80160a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80160ac:	4630      	mov	r0, r6
 80160ae:	f000 f975 	bl	801639c <_isatty_r>
 80160b2:	b128      	cbz	r0, 80160c0 <__smakebuf_r+0x74>
 80160b4:	89a3      	ldrh	r3, [r4, #12]
 80160b6:	f023 0303 	bic.w	r3, r3, #3
 80160ba:	f043 0301 	orr.w	r3, r3, #1
 80160be:	81a3      	strh	r3, [r4, #12]
 80160c0:	89a0      	ldrh	r0, [r4, #12]
 80160c2:	4305      	orrs	r5, r0
 80160c4:	81a5      	strh	r5, [r4, #12]
 80160c6:	e7cd      	b.n	8016064 <__smakebuf_r+0x18>
 80160c8:	08015e59 	.word	0x08015e59

080160cc <_free_r>:
 80160cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80160ce:	2900      	cmp	r1, #0
 80160d0:	d044      	beq.n	801615c <_free_r+0x90>
 80160d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160d6:	9001      	str	r0, [sp, #4]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	f1a1 0404 	sub.w	r4, r1, #4
 80160de:	bfb8      	it	lt
 80160e0:	18e4      	addlt	r4, r4, r3
 80160e2:	f000 f97d 	bl	80163e0 <__malloc_lock>
 80160e6:	4a1e      	ldr	r2, [pc, #120]	; (8016160 <_free_r+0x94>)
 80160e8:	9801      	ldr	r0, [sp, #4]
 80160ea:	6813      	ldr	r3, [r2, #0]
 80160ec:	b933      	cbnz	r3, 80160fc <_free_r+0x30>
 80160ee:	6063      	str	r3, [r4, #4]
 80160f0:	6014      	str	r4, [r2, #0]
 80160f2:	b003      	add	sp, #12
 80160f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80160f8:	f000 b978 	b.w	80163ec <__malloc_unlock>
 80160fc:	42a3      	cmp	r3, r4
 80160fe:	d908      	bls.n	8016112 <_free_r+0x46>
 8016100:	6825      	ldr	r5, [r4, #0]
 8016102:	1961      	adds	r1, r4, r5
 8016104:	428b      	cmp	r3, r1
 8016106:	bf01      	itttt	eq
 8016108:	6819      	ldreq	r1, [r3, #0]
 801610a:	685b      	ldreq	r3, [r3, #4]
 801610c:	1949      	addeq	r1, r1, r5
 801610e:	6021      	streq	r1, [r4, #0]
 8016110:	e7ed      	b.n	80160ee <_free_r+0x22>
 8016112:	461a      	mov	r2, r3
 8016114:	685b      	ldr	r3, [r3, #4]
 8016116:	b10b      	cbz	r3, 801611c <_free_r+0x50>
 8016118:	42a3      	cmp	r3, r4
 801611a:	d9fa      	bls.n	8016112 <_free_r+0x46>
 801611c:	6811      	ldr	r1, [r2, #0]
 801611e:	1855      	adds	r5, r2, r1
 8016120:	42a5      	cmp	r5, r4
 8016122:	d10b      	bne.n	801613c <_free_r+0x70>
 8016124:	6824      	ldr	r4, [r4, #0]
 8016126:	4421      	add	r1, r4
 8016128:	1854      	adds	r4, r2, r1
 801612a:	42a3      	cmp	r3, r4
 801612c:	6011      	str	r1, [r2, #0]
 801612e:	d1e0      	bne.n	80160f2 <_free_r+0x26>
 8016130:	681c      	ldr	r4, [r3, #0]
 8016132:	685b      	ldr	r3, [r3, #4]
 8016134:	6053      	str	r3, [r2, #4]
 8016136:	4421      	add	r1, r4
 8016138:	6011      	str	r1, [r2, #0]
 801613a:	e7da      	b.n	80160f2 <_free_r+0x26>
 801613c:	d902      	bls.n	8016144 <_free_r+0x78>
 801613e:	230c      	movs	r3, #12
 8016140:	6003      	str	r3, [r0, #0]
 8016142:	e7d6      	b.n	80160f2 <_free_r+0x26>
 8016144:	6825      	ldr	r5, [r4, #0]
 8016146:	1961      	adds	r1, r4, r5
 8016148:	428b      	cmp	r3, r1
 801614a:	bf04      	itt	eq
 801614c:	6819      	ldreq	r1, [r3, #0]
 801614e:	685b      	ldreq	r3, [r3, #4]
 8016150:	6063      	str	r3, [r4, #4]
 8016152:	bf04      	itt	eq
 8016154:	1949      	addeq	r1, r1, r5
 8016156:	6021      	streq	r1, [r4, #0]
 8016158:	6054      	str	r4, [r2, #4]
 801615a:	e7ca      	b.n	80160f2 <_free_r+0x26>
 801615c:	b003      	add	sp, #12
 801615e:	bd30      	pop	{r4, r5, pc}
 8016160:	20005308 	.word	0x20005308

08016164 <sbrk_aligned>:
 8016164:	b570      	push	{r4, r5, r6, lr}
 8016166:	4e0e      	ldr	r6, [pc, #56]	; (80161a0 <sbrk_aligned+0x3c>)
 8016168:	460c      	mov	r4, r1
 801616a:	6831      	ldr	r1, [r6, #0]
 801616c:	4605      	mov	r5, r0
 801616e:	b911      	cbnz	r1, 8016176 <sbrk_aligned+0x12>
 8016170:	f000 f88c 	bl	801628c <_sbrk_r>
 8016174:	6030      	str	r0, [r6, #0]
 8016176:	4621      	mov	r1, r4
 8016178:	4628      	mov	r0, r5
 801617a:	f000 f887 	bl	801628c <_sbrk_r>
 801617e:	1c43      	adds	r3, r0, #1
 8016180:	d00a      	beq.n	8016198 <sbrk_aligned+0x34>
 8016182:	1cc4      	adds	r4, r0, #3
 8016184:	f024 0403 	bic.w	r4, r4, #3
 8016188:	42a0      	cmp	r0, r4
 801618a:	d007      	beq.n	801619c <sbrk_aligned+0x38>
 801618c:	1a21      	subs	r1, r4, r0
 801618e:	4628      	mov	r0, r5
 8016190:	f000 f87c 	bl	801628c <_sbrk_r>
 8016194:	3001      	adds	r0, #1
 8016196:	d101      	bne.n	801619c <sbrk_aligned+0x38>
 8016198:	f04f 34ff 	mov.w	r4, #4294967295
 801619c:	4620      	mov	r0, r4
 801619e:	bd70      	pop	{r4, r5, r6, pc}
 80161a0:	2000530c 	.word	0x2000530c

080161a4 <_malloc_r>:
 80161a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161a8:	1ccd      	adds	r5, r1, #3
 80161aa:	f025 0503 	bic.w	r5, r5, #3
 80161ae:	3508      	adds	r5, #8
 80161b0:	2d0c      	cmp	r5, #12
 80161b2:	bf38      	it	cc
 80161b4:	250c      	movcc	r5, #12
 80161b6:	2d00      	cmp	r5, #0
 80161b8:	4607      	mov	r7, r0
 80161ba:	db01      	blt.n	80161c0 <_malloc_r+0x1c>
 80161bc:	42a9      	cmp	r1, r5
 80161be:	d905      	bls.n	80161cc <_malloc_r+0x28>
 80161c0:	230c      	movs	r3, #12
 80161c2:	603b      	str	r3, [r7, #0]
 80161c4:	2600      	movs	r6, #0
 80161c6:	4630      	mov	r0, r6
 80161c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161cc:	4e2e      	ldr	r6, [pc, #184]	; (8016288 <_malloc_r+0xe4>)
 80161ce:	f000 f907 	bl	80163e0 <__malloc_lock>
 80161d2:	6833      	ldr	r3, [r6, #0]
 80161d4:	461c      	mov	r4, r3
 80161d6:	bb34      	cbnz	r4, 8016226 <_malloc_r+0x82>
 80161d8:	4629      	mov	r1, r5
 80161da:	4638      	mov	r0, r7
 80161dc:	f7ff ffc2 	bl	8016164 <sbrk_aligned>
 80161e0:	1c43      	adds	r3, r0, #1
 80161e2:	4604      	mov	r4, r0
 80161e4:	d14d      	bne.n	8016282 <_malloc_r+0xde>
 80161e6:	6834      	ldr	r4, [r6, #0]
 80161e8:	4626      	mov	r6, r4
 80161ea:	2e00      	cmp	r6, #0
 80161ec:	d140      	bne.n	8016270 <_malloc_r+0xcc>
 80161ee:	6823      	ldr	r3, [r4, #0]
 80161f0:	4631      	mov	r1, r6
 80161f2:	4638      	mov	r0, r7
 80161f4:	eb04 0803 	add.w	r8, r4, r3
 80161f8:	f000 f848 	bl	801628c <_sbrk_r>
 80161fc:	4580      	cmp	r8, r0
 80161fe:	d13a      	bne.n	8016276 <_malloc_r+0xd2>
 8016200:	6821      	ldr	r1, [r4, #0]
 8016202:	3503      	adds	r5, #3
 8016204:	1a6d      	subs	r5, r5, r1
 8016206:	f025 0503 	bic.w	r5, r5, #3
 801620a:	3508      	adds	r5, #8
 801620c:	2d0c      	cmp	r5, #12
 801620e:	bf38      	it	cc
 8016210:	250c      	movcc	r5, #12
 8016212:	4629      	mov	r1, r5
 8016214:	4638      	mov	r0, r7
 8016216:	f7ff ffa5 	bl	8016164 <sbrk_aligned>
 801621a:	3001      	adds	r0, #1
 801621c:	d02b      	beq.n	8016276 <_malloc_r+0xd2>
 801621e:	6823      	ldr	r3, [r4, #0]
 8016220:	442b      	add	r3, r5
 8016222:	6023      	str	r3, [r4, #0]
 8016224:	e00e      	b.n	8016244 <_malloc_r+0xa0>
 8016226:	6822      	ldr	r2, [r4, #0]
 8016228:	1b52      	subs	r2, r2, r5
 801622a:	d41e      	bmi.n	801626a <_malloc_r+0xc6>
 801622c:	2a0b      	cmp	r2, #11
 801622e:	d916      	bls.n	801625e <_malloc_r+0xba>
 8016230:	1961      	adds	r1, r4, r5
 8016232:	42a3      	cmp	r3, r4
 8016234:	6025      	str	r5, [r4, #0]
 8016236:	bf18      	it	ne
 8016238:	6059      	strne	r1, [r3, #4]
 801623a:	6863      	ldr	r3, [r4, #4]
 801623c:	bf08      	it	eq
 801623e:	6031      	streq	r1, [r6, #0]
 8016240:	5162      	str	r2, [r4, r5]
 8016242:	604b      	str	r3, [r1, #4]
 8016244:	4638      	mov	r0, r7
 8016246:	f104 060b 	add.w	r6, r4, #11
 801624a:	f000 f8cf 	bl	80163ec <__malloc_unlock>
 801624e:	f026 0607 	bic.w	r6, r6, #7
 8016252:	1d23      	adds	r3, r4, #4
 8016254:	1af2      	subs	r2, r6, r3
 8016256:	d0b6      	beq.n	80161c6 <_malloc_r+0x22>
 8016258:	1b9b      	subs	r3, r3, r6
 801625a:	50a3      	str	r3, [r4, r2]
 801625c:	e7b3      	b.n	80161c6 <_malloc_r+0x22>
 801625e:	6862      	ldr	r2, [r4, #4]
 8016260:	42a3      	cmp	r3, r4
 8016262:	bf0c      	ite	eq
 8016264:	6032      	streq	r2, [r6, #0]
 8016266:	605a      	strne	r2, [r3, #4]
 8016268:	e7ec      	b.n	8016244 <_malloc_r+0xa0>
 801626a:	4623      	mov	r3, r4
 801626c:	6864      	ldr	r4, [r4, #4]
 801626e:	e7b2      	b.n	80161d6 <_malloc_r+0x32>
 8016270:	4634      	mov	r4, r6
 8016272:	6876      	ldr	r6, [r6, #4]
 8016274:	e7b9      	b.n	80161ea <_malloc_r+0x46>
 8016276:	230c      	movs	r3, #12
 8016278:	603b      	str	r3, [r7, #0]
 801627a:	4638      	mov	r0, r7
 801627c:	f000 f8b6 	bl	80163ec <__malloc_unlock>
 8016280:	e7a1      	b.n	80161c6 <_malloc_r+0x22>
 8016282:	6025      	str	r5, [r4, #0]
 8016284:	e7de      	b.n	8016244 <_malloc_r+0xa0>
 8016286:	bf00      	nop
 8016288:	20005308 	.word	0x20005308

0801628c <_sbrk_r>:
 801628c:	b538      	push	{r3, r4, r5, lr}
 801628e:	4d06      	ldr	r5, [pc, #24]	; (80162a8 <_sbrk_r+0x1c>)
 8016290:	2300      	movs	r3, #0
 8016292:	4604      	mov	r4, r0
 8016294:	4608      	mov	r0, r1
 8016296:	602b      	str	r3, [r5, #0]
 8016298:	f7f0 fadc 	bl	8006854 <_sbrk>
 801629c:	1c43      	adds	r3, r0, #1
 801629e:	d102      	bne.n	80162a6 <_sbrk_r+0x1a>
 80162a0:	682b      	ldr	r3, [r5, #0]
 80162a2:	b103      	cbz	r3, 80162a6 <_sbrk_r+0x1a>
 80162a4:	6023      	str	r3, [r4, #0]
 80162a6:	bd38      	pop	{r3, r4, r5, pc}
 80162a8:	20005310 	.word	0x20005310

080162ac <__sread>:
 80162ac:	b510      	push	{r4, lr}
 80162ae:	460c      	mov	r4, r1
 80162b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162b4:	f000 f8a0 	bl	80163f8 <_read_r>
 80162b8:	2800      	cmp	r0, #0
 80162ba:	bfab      	itete	ge
 80162bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80162be:	89a3      	ldrhlt	r3, [r4, #12]
 80162c0:	181b      	addge	r3, r3, r0
 80162c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80162c6:	bfac      	ite	ge
 80162c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80162ca:	81a3      	strhlt	r3, [r4, #12]
 80162cc:	bd10      	pop	{r4, pc}

080162ce <__swrite>:
 80162ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162d2:	461f      	mov	r7, r3
 80162d4:	898b      	ldrh	r3, [r1, #12]
 80162d6:	05db      	lsls	r3, r3, #23
 80162d8:	4605      	mov	r5, r0
 80162da:	460c      	mov	r4, r1
 80162dc:	4616      	mov	r6, r2
 80162de:	d505      	bpl.n	80162ec <__swrite+0x1e>
 80162e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162e4:	2302      	movs	r3, #2
 80162e6:	2200      	movs	r2, #0
 80162e8:	f000 f868 	bl	80163bc <_lseek_r>
 80162ec:	89a3      	ldrh	r3, [r4, #12]
 80162ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80162f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80162f6:	81a3      	strh	r3, [r4, #12]
 80162f8:	4632      	mov	r2, r6
 80162fa:	463b      	mov	r3, r7
 80162fc:	4628      	mov	r0, r5
 80162fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016302:	f000 b817 	b.w	8016334 <_write_r>

08016306 <__sseek>:
 8016306:	b510      	push	{r4, lr}
 8016308:	460c      	mov	r4, r1
 801630a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801630e:	f000 f855 	bl	80163bc <_lseek_r>
 8016312:	1c43      	adds	r3, r0, #1
 8016314:	89a3      	ldrh	r3, [r4, #12]
 8016316:	bf15      	itete	ne
 8016318:	6560      	strne	r0, [r4, #84]	; 0x54
 801631a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801631e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016322:	81a3      	strheq	r3, [r4, #12]
 8016324:	bf18      	it	ne
 8016326:	81a3      	strhne	r3, [r4, #12]
 8016328:	bd10      	pop	{r4, pc}

0801632a <__sclose>:
 801632a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801632e:	f000 b813 	b.w	8016358 <_close_r>
	...

08016334 <_write_r>:
 8016334:	b538      	push	{r3, r4, r5, lr}
 8016336:	4d07      	ldr	r5, [pc, #28]	; (8016354 <_write_r+0x20>)
 8016338:	4604      	mov	r4, r0
 801633a:	4608      	mov	r0, r1
 801633c:	4611      	mov	r1, r2
 801633e:	2200      	movs	r2, #0
 8016340:	602a      	str	r2, [r5, #0]
 8016342:	461a      	mov	r2, r3
 8016344:	f7ec fb5e 	bl	8002a04 <_write>
 8016348:	1c43      	adds	r3, r0, #1
 801634a:	d102      	bne.n	8016352 <_write_r+0x1e>
 801634c:	682b      	ldr	r3, [r5, #0]
 801634e:	b103      	cbz	r3, 8016352 <_write_r+0x1e>
 8016350:	6023      	str	r3, [r4, #0]
 8016352:	bd38      	pop	{r3, r4, r5, pc}
 8016354:	20005310 	.word	0x20005310

08016358 <_close_r>:
 8016358:	b538      	push	{r3, r4, r5, lr}
 801635a:	4d06      	ldr	r5, [pc, #24]	; (8016374 <_close_r+0x1c>)
 801635c:	2300      	movs	r3, #0
 801635e:	4604      	mov	r4, r0
 8016360:	4608      	mov	r0, r1
 8016362:	602b      	str	r3, [r5, #0]
 8016364:	f7f0 fa41 	bl	80067ea <_close>
 8016368:	1c43      	adds	r3, r0, #1
 801636a:	d102      	bne.n	8016372 <_close_r+0x1a>
 801636c:	682b      	ldr	r3, [r5, #0]
 801636e:	b103      	cbz	r3, 8016372 <_close_r+0x1a>
 8016370:	6023      	str	r3, [r4, #0]
 8016372:	bd38      	pop	{r3, r4, r5, pc}
 8016374:	20005310 	.word	0x20005310

08016378 <_fstat_r>:
 8016378:	b538      	push	{r3, r4, r5, lr}
 801637a:	4d07      	ldr	r5, [pc, #28]	; (8016398 <_fstat_r+0x20>)
 801637c:	2300      	movs	r3, #0
 801637e:	4604      	mov	r4, r0
 8016380:	4608      	mov	r0, r1
 8016382:	4611      	mov	r1, r2
 8016384:	602b      	str	r3, [r5, #0]
 8016386:	f7f0 fa3c 	bl	8006802 <_fstat>
 801638a:	1c43      	adds	r3, r0, #1
 801638c:	d102      	bne.n	8016394 <_fstat_r+0x1c>
 801638e:	682b      	ldr	r3, [r5, #0]
 8016390:	b103      	cbz	r3, 8016394 <_fstat_r+0x1c>
 8016392:	6023      	str	r3, [r4, #0]
 8016394:	bd38      	pop	{r3, r4, r5, pc}
 8016396:	bf00      	nop
 8016398:	20005310 	.word	0x20005310

0801639c <_isatty_r>:
 801639c:	b538      	push	{r3, r4, r5, lr}
 801639e:	4d06      	ldr	r5, [pc, #24]	; (80163b8 <_isatty_r+0x1c>)
 80163a0:	2300      	movs	r3, #0
 80163a2:	4604      	mov	r4, r0
 80163a4:	4608      	mov	r0, r1
 80163a6:	602b      	str	r3, [r5, #0]
 80163a8:	f7f0 fa3b 	bl	8006822 <_isatty>
 80163ac:	1c43      	adds	r3, r0, #1
 80163ae:	d102      	bne.n	80163b6 <_isatty_r+0x1a>
 80163b0:	682b      	ldr	r3, [r5, #0]
 80163b2:	b103      	cbz	r3, 80163b6 <_isatty_r+0x1a>
 80163b4:	6023      	str	r3, [r4, #0]
 80163b6:	bd38      	pop	{r3, r4, r5, pc}
 80163b8:	20005310 	.word	0x20005310

080163bc <_lseek_r>:
 80163bc:	b538      	push	{r3, r4, r5, lr}
 80163be:	4d07      	ldr	r5, [pc, #28]	; (80163dc <_lseek_r+0x20>)
 80163c0:	4604      	mov	r4, r0
 80163c2:	4608      	mov	r0, r1
 80163c4:	4611      	mov	r1, r2
 80163c6:	2200      	movs	r2, #0
 80163c8:	602a      	str	r2, [r5, #0]
 80163ca:	461a      	mov	r2, r3
 80163cc:	f7f0 fa34 	bl	8006838 <_lseek>
 80163d0:	1c43      	adds	r3, r0, #1
 80163d2:	d102      	bne.n	80163da <_lseek_r+0x1e>
 80163d4:	682b      	ldr	r3, [r5, #0]
 80163d6:	b103      	cbz	r3, 80163da <_lseek_r+0x1e>
 80163d8:	6023      	str	r3, [r4, #0]
 80163da:	bd38      	pop	{r3, r4, r5, pc}
 80163dc:	20005310 	.word	0x20005310

080163e0 <__malloc_lock>:
 80163e0:	4801      	ldr	r0, [pc, #4]	; (80163e8 <__malloc_lock+0x8>)
 80163e2:	f7ff be0b 	b.w	8015ffc <__retarget_lock_acquire_recursive>
 80163e6:	bf00      	nop
 80163e8:	20005304 	.word	0x20005304

080163ec <__malloc_unlock>:
 80163ec:	4801      	ldr	r0, [pc, #4]	; (80163f4 <__malloc_unlock+0x8>)
 80163ee:	f7ff be06 	b.w	8015ffe <__retarget_lock_release_recursive>
 80163f2:	bf00      	nop
 80163f4:	20005304 	.word	0x20005304

080163f8 <_read_r>:
 80163f8:	b538      	push	{r3, r4, r5, lr}
 80163fa:	4d07      	ldr	r5, [pc, #28]	; (8016418 <_read_r+0x20>)
 80163fc:	4604      	mov	r4, r0
 80163fe:	4608      	mov	r0, r1
 8016400:	4611      	mov	r1, r2
 8016402:	2200      	movs	r2, #0
 8016404:	602a      	str	r2, [r5, #0]
 8016406:	461a      	mov	r2, r3
 8016408:	f7f0 f9d2 	bl	80067b0 <_read>
 801640c:	1c43      	adds	r3, r0, #1
 801640e:	d102      	bne.n	8016416 <_read_r+0x1e>
 8016410:	682b      	ldr	r3, [r5, #0]
 8016412:	b103      	cbz	r3, 8016416 <_read_r+0x1e>
 8016414:	6023      	str	r3, [r4, #0]
 8016416:	bd38      	pop	{r3, r4, r5, pc}
 8016418:	20005310 	.word	0x20005310

0801641c <_init>:
 801641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801641e:	bf00      	nop
 8016420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016422:	bc08      	pop	{r3}
 8016424:	469e      	mov	lr, r3
 8016426:	4770      	bx	lr

08016428 <_fini>:
 8016428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801642a:	bf00      	nop
 801642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801642e:	bc08      	pop	{r3}
 8016430:	469e      	mov	lr, r3
 8016432:	4770      	bx	lr
