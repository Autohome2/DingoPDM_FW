
DingoPDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000163cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  0801655c  0801655c  0002655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d10  08016d10  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08016d10  08016d10  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016d10  08016d10  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016d10  08016d10  00026d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016d14  08016d14  00026d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08016d18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005128  200001e4  08016efc  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000530c  08016efc  0003530c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000347ef  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007db1  00000000  00000000  00064a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027c8  00000000  00000000  0006c7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023b0  00000000  00000000  0006ef80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b813  00000000  00000000  00071330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003bf46  00000000  00000000  0009cb43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db09c  00000000  00000000  000d8a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b3b25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a890  00000000  00000000  001b3b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016544 	.word	0x08016544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08016544 	.word	0x08016544

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <ADS1x15_SendRegs>:
#include "ads1x15.h"

#define I2C_TIMEOUT 100

HAL_StatusTypeDef ADS1x15_SendRegs(I2C_HandleTypeDef* hi2c, uint16_t addr, ads1x15Settings_t *settings, uint8_t channel)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	461a      	mov	r2, r3
 80009b8:	460b      	mov	r3, r1
 80009ba:	817b      	strh	r3, [r7, #10]
 80009bc:	4613      	mov	r3, r2
 80009be:	727b      	strb	r3, [r7, #9]
  HAL_StatusTypeDef eStatus;

	if(channel > 3) return HAL_ERROR;
 80009c0:	7a7b      	ldrb	r3, [r7, #9]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d901      	bls.n	80009ca <ADS1x15_SendRegs+0x1e>
 80009c6:	2301      	movs	r3, #1
 80009c8:	e067      	b.n	8000a9a <ADS1x15_SendRegs+0xee>

	uint16_t config =
 80009ca:	f240 1303 	movw	r3, #259	; 0x103
 80009ce:	82fb      	strh	r3, [r7, #22]
				ADS1015_REG_CONFIG_CLAT_NONLAT |  // Non-latching (default val)
				ADS1015_REG_CONFIG_CPOL_ACTVLOW | // Alert/Rdy active low   (default val)
				ADS1015_REG_CONFIG_CMODE_TRAD |   // Traditional comparator (default val)
				ADS1015_REG_CONFIG_MODE_SINGLE;

	config |= settings->dataRate;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	791b      	ldrb	r3, [r3, #4]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	4313      	orrs	r3, r2
 80009da:	82fb      	strh	r3, [r7, #22]
	config |= settings->gain;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	885a      	ldrh	r2, [r3, #2]
 80009e0:	8afb      	ldrh	r3, [r7, #22]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	82fb      	strh	r3, [r7, #22]

	switch(channel){
 80009e6:	7a7b      	ldrb	r3, [r7, #9]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d81f      	bhi.n	8000a2c <ADS1x15_SendRegs+0x80>
 80009ec:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <ADS1x15_SendRegs+0x48>)
 80009ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f2:	bf00      	nop
 80009f4:	08000a05 	.word	0x08000a05
 80009f8:	08000a0f 	.word	0x08000a0f
 80009fc:	08000a19 	.word	0x08000a19
 8000a00:	08000a23 	.word	0x08000a23
	case (0):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8000a04:	8afb      	ldrh	r3, [r7, #22]
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0a:	82fb      	strh	r3, [r7, #22]
		break;
 8000a0c:	e00e      	b.n	8000a2c <ADS1x15_SendRegs+0x80>
	case (1):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8000a0e:	8afb      	ldrh	r3, [r7, #22]
 8000a10:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000a14:	82fb      	strh	r3, [r7, #22]
		break;
 8000a16:	e009      	b.n	8000a2c <ADS1x15_SendRegs+0x80>
	case (2):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8000a18:	8afb      	ldrh	r3, [r7, #22]
 8000a1a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000a1e:	82fb      	strh	r3, [r7, #22]
		break;
 8000a20:	e004      	b.n	8000a2c <ADS1x15_SendRegs+0x80>
	case (3):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8000a22:	8afb      	ldrh	r3, [r7, #22]
 8000a24:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a28:	82fb      	strh	r3, [r7, #22]
		break;
 8000a2a:	bf00      	nop
	}

	config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8000a2c:	8afb      	ldrh	r3, [r7, #22]
 8000a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a36:	82fb      	strh	r3, [r7, #22]

	uint8_t writeVals[3];

	writeVals[0] = ADS1015_REG_POINTER_CONFIG;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	743b      	strb	r3, [r7, #16]
	writeVals[1] = config >> 8;
 8000a3c:	8afb      	ldrh	r3, [r7, #22]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	747b      	strb	r3, [r7, #17]
	writeVals[2] = config & 0xFF;
 8000a46:	8afb      	ldrh	r3, [r7, #22]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	74bb      	strb	r3, [r7, #18]

	eStatus = HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, I2C_TIMEOUT);
 8000a4c:	897b      	ldrh	r3, [r7, #10]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	b299      	uxth	r1, r3
 8000a52:	f107 0210 	add.w	r2, r7, #16
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f004 fb81 	bl	8005164 <HAL_I2C_Master_Transmit>
 8000a62:	4603      	mov	r3, r0
 8000a64:	757b      	strb	r3, [r7, #21]
  if( eStatus != HAL_OK)
 8000a66:	7d7b      	ldrb	r3, [r7, #21]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <ADS1x15_SendRegs+0xc4>
  {
    return eStatus;
 8000a6c:	7d7b      	ldrb	r3, [r7, #21]
 8000a6e:	e014      	b.n	8000a9a <ADS1x15_SendRegs+0xee>
  }

	//Send convert register
	writeVals[0] = ADS1015_REG_POINTER_CONVERT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	743b      	strb	r3, [r7, #16]

  eStatus = HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, I2C_TIMEOUT);
 8000a74:	897b      	ldrh	r3, [r7, #10]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	b299      	uxth	r1, r3
 8000a7a:	f107 0210 	add.w	r2, r7, #16
 8000a7e:	2364      	movs	r3, #100	; 0x64
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2301      	movs	r3, #1
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f004 fb6d 	bl	8005164 <HAL_I2C_Master_Transmit>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	757b      	strb	r3, [r7, #21]
  if( eStatus != HAL_OK)
 8000a8e:	7d7b      	ldrb	r3, [r7, #21]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <ADS1x15_SendRegs+0xec>
  {
    return eStatus;
 8000a94:	7d7b      	ldrb	r3, [r7, #21]
 8000a96:	e000      	b.n	8000a9a <ADS1x15_SendRegs+0xee>
  }

  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop

08000aa4 <ADS1x15_ReadADC>:

HAL_StatusTypeDef ADS1x15_ReadADC(I2C_HandleTypeDef* hi2c, uint16_t addr, ads1x15Settings_t *settings, uint16_t* val)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	817b      	strh	r3, [r7, #10]

  //Read received values
	uint8_t readVals[2];

	//Msg received - comms OK
	settings->commsOk = 1;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	719a      	strb	r2, [r3, #6]

	eStatus = HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 2, I2C_TIMEOUT);
 8000aba:	897b      	ldrh	r3, [r7, #10]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	b299      	uxth	r1, r3
 8000ac0:	f107 0210 	add.w	r2, r7, #16
 8000ac4:	2364      	movs	r3, #100	; 0x64
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2302      	movs	r3, #2
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f004 fc3e 	bl	800534c <HAL_I2C_Master_Receive>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	757b      	strb	r3, [r7, #21]
	if( eStatus != HAL_OK)
 8000ad4:	7d7b      	ldrb	r3, [r7, #21]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <ADS1x15_ReadADC+0x3a>
  {
    return eStatus;
 8000ada:	7d7b      	ldrb	r3, [r7, #21]
 8000adc:	e01e      	b.n	8000b1c <ADS1x15_ReadADC+0x78>
  }

	uint16_t valRead = (readVals[0] << 8 | readVals[1]) >> settings->bitShift;
 8000ade:	7c3b      	ldrb	r3, [r7, #16]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	7c7a      	ldrb	r2, [r7, #17]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	7952      	ldrb	r2, [r2, #5]
 8000aea:	4113      	asrs	r3, r2
 8000aec:	82fb      	strh	r3, [r7, #22]

	if (settings->deviceType == ADS1115) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d104      	bne.n	8000b00 <ADS1x15_ReadADC+0x5c>
	  *val = valRead;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	8afa      	ldrh	r2, [r7, #22]
 8000afa:	801a      	strh	r2, [r3, #0]
	  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	e00d      	b.n	8000b1c <ADS1x15_ReadADC+0x78>
  }
	else {
    // Shift 12-bit results right 4 bits for the ADS1015,
    // making sure we keep the sign bit intact
    if (valRead > 0x07FF) {
 8000b00:	8afb      	ldrh	r3, [r7, #22]
 8000b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b06:	d305      	bcc.n	8000b14 <ADS1x15_ReadADC+0x70>
      // negative number - extend the sign to 16th bit
      valRead |= 0xF000;
 8000b08:	8afb      	ldrh	r3, [r7, #22]
 8000b0a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000b0e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000b12:	82fb      	strh	r3, [r7, #22]
    }
    *val = valRead;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	8afa      	ldrh	r2, [r7, #22]
 8000b18:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
  }
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <MCP9808_Init>:
#include "mcp9808.h"

uint8_t MCP9808_Overtemp, MCP9808_Undertemp, MCP9808_CriticalTemp;

uint8_t MCP9808_Init(I2C_HandleTypeDef* hi2c, uint16_t addr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
  if(MCP9808_Read16(hi2c, addr, MCP9808_REG_MANUF_ID) != 0x0054)
 8000b30:	887b      	ldrh	r3, [r7, #2]
 8000b32:	2206      	movs	r2, #6
 8000b34:	4619      	mov	r1, r3
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 f94e 	bl	8000dd8 <MCP9808_Read16>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b54      	cmp	r3, #84	; 0x54
 8000b40:	d001      	beq.n	8000b46 <MCP9808_Init+0x22>
    return 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e015      	b.n	8000b72 <MCP9808_Init+0x4e>
  if(MCP9808_Read16(hi2c, addr, MCP9808_REG_DEVICE_ID) != 0x0400)
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	2207      	movs	r2, #7
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f000 f943 	bl	8000dd8 <MCP9808_Read16>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b58:	d001      	beq.n	8000b5e <MCP9808_Init+0x3a>
    return 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e009      	b.n	8000b72 <MCP9808_Init+0x4e>
  //B6 = 0 (Tupper Tlower window unlocked)
  //B7 = 0 (Tcrit unlocked)
  //B8 = 0 (continous conversion)
  //B9-10 = 01 (Tupper Tlower hysterisis +1.5 deg C)
  //B11-15 = 00000 (not used)
  uint16_t config = (MCP9808_REG_CONFIG_ALERTCTRL | MCP9808_REG_CONFIG_HYST_1_5);
 8000b5e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000b62:	81fb      	strh	r3, [r7, #14]
  MCP9808_Write16(hi2c, addr, MCP9808_REG_CONFIG, config);
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	8879      	ldrh	r1, [r7, #2]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 f90e 	bl	8000d8c <MCP9808_Write16>
  return 1;
 8000b70:	2301      	movs	r3, #1
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <MCP9808_ReadTempC_Int>:

  return temp;
}

int16_t MCP9808_ReadTempC_Int(I2C_HandleTypeDef* hi2c, uint16_t addr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
  uint16_t t = MCP9808_Read16(hi2c, addr, MCP9808_REG_AMBIENT_TEMP);
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	2205      	movs	r2, #5
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 f922 	bl	8000dd8 <MCP9808_Read16>
 8000b94:	4603      	mov	r3, r0
 8000b96:	81fb      	strh	r3, [r7, #14]

  MCP9808_MapLimitBits(t);
 8000b98:	89fb      	ldrh	r3, [r7, #14]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f8ce 	bl	8000d3c <MCP9808_MapLimitBits>

  if (t != 0xFFFF) {
 8000ba0:	89fb      	ldrh	r3, [r7, #14]
 8000ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d01c      	beq.n	8000be4 <MCP9808_ReadTempC_Int+0x68>
    t = t & 0x0FFF;
 8000baa:	89fb      	ldrh	r3, [r7, #14]
 8000bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bb0:	81fb      	strh	r3, [r7, #14]
    t /= 16.0;
 8000bb2:	89fb      	ldrh	r3, [r7, #14]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fc5d 	bl	8000474 <__aeabi_i2d>
 8000bba:	f04f 0200 	mov.w	r2, #0
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MCP9808_ReadTempC_Int+0x74>)
 8000bc0:	f7ff fdec 	bl	800079c <__aeabi_ddiv>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	4610      	mov	r0, r2
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f7ff fece 	bl	800096c <__aeabi_d2uiz>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	81fb      	strh	r3, [r7, #14]
    if (t & 0x1000)
 8000bd4:	89fb      	ldrh	r3, [r7, #14]
 8000bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <MCP9808_ReadTempC_Int+0x68>
      t = -t;
 8000bde:	89fb      	ldrh	r3, [r7, #14]
 8000be0:	425b      	negs	r3, r3
 8000be2:	81fb      	strh	r3, [r7, #14]
  }
  return t;
 8000be4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40300000 	.word	0x40300000

08000bf4 <MCP9808_SetResolution>:
{
  return MCP9808_Read8(hi2c, addr, MCP9808_REG_RESOLUTION);
}

void MCP9808_SetResolution(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t val)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]
 8000c00:	4613      	mov	r3, r2
 8000c02:	707b      	strb	r3, [r7, #1]
  MCP9808_Write8(hi2c, addr, MCP9808_REG_RESOLUTION, val);
 8000c04:	787b      	ldrb	r3, [r7, #1]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	8879      	ldrh	r1, [r7, #2]
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f000 f913 	bl	8000e38 <MCP9808_Write8>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <MCP9808_SetLimit>:
  conf_shutdown = conf_register & ~MCP9808_REG_CONFIG_SHUTDOWN;
  MCP9808_Write16(hi2c, addr, MCP9808_REG_CONFIG, conf_shutdown);
}

uint8_t MCP9808_SetLimit(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, float val)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	460b      	mov	r3, r1
 8000c26:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c2a:	817b      	strh	r3, [r7, #10]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	727b      	strb	r3, [r7, #9]
  uint16_t newVal = val * 16.0;
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff fc31 	bl	8000498 <__aeabi_f2d>
 8000c36:	f04f 0200 	mov.w	r2, #0
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MCP9808_SetLimit+0xac>)
 8000c3c:	f7ff fc84 	bl	8000548 <__aeabi_dmul>
 8000c40:	4602      	mov	r2, r0
 8000c42:	460b      	mov	r3, r1
 8000c44:	4610      	mov	r0, r2
 8000c46:	4619      	mov	r1, r3
 8000c48:	f7ff fe90 	bl	800096c <__aeabi_d2uiz>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	82fb      	strh	r3, [r7, #22]
  if(val < 0)
 8000c50:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5c:	d503      	bpl.n	8000c66 <MCP9808_SetLimit+0x4a>
    newVal += 256;
 8000c5e:	8afb      	ldrh	r3, [r7, #22]
 8000c60:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c64:	82fb      	strh	r3, [r7, #22]
  MCP9808_Write16(hi2c, addr, reg, val * 16.0);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fc16 	bl	8000498 <__aeabi_f2d>
 8000c6c:	f04f 0200 	mov.w	r2, #0
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MCP9808_SetLimit+0xac>)
 8000c72:	f7ff fc69 	bl	8000548 <__aeabi_dmul>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f7ff fe75 	bl	800096c <__aeabi_d2uiz>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	7a7a      	ldrb	r2, [r7, #9]
 8000c88:	8979      	ldrh	r1, [r7, #10]
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f000 f87e 	bl	8000d8c <MCP9808_Write16>

  float temp = MCP9808_RawToTemp(MCP9808_Read16(hi2c, addr, reg));
 8000c90:	7a7a      	ldrb	r2, [r7, #9]
 8000c92:	897b      	ldrh	r3, [r7, #10]
 8000c94:	4619      	mov	r1, r3
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f000 f89e 	bl	8000dd8 <MCP9808_Read16>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f814 	bl	8000ccc <MCP9808_RawToTemp>
 8000ca4:	ed87 0a04 	vstr	s0, [r7, #16]

  if(val == temp)
 8000ca8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cac:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cb0:	eeb4 7a67 	vcmp.f32	s14, s15
 8000cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb8:	d101      	bne.n	8000cbe <MCP9808_SetLimit+0xa2>
    return 1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e000      	b.n	8000cc0 <MCP9808_SetLimit+0xa4>
  return 0;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40300000 	.word	0x40300000

08000ccc <MCP9808_RawToTemp>:

float MCP9808_RawToTemp(uint16_t raw)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
  float temp = 0.0;
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  if (raw != 0xFFFF) {
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d01d      	beq.n	8000d22 <MCP9808_RawToTemp+0x56>
    temp = raw & 0x0FFF;
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf4:	edc7 7a03 	vstr	s15, [r7, #12]
    temp /= 16.0;
 8000cf8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cfc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d04:	edc7 7a03 	vstr	s15, [r7, #12]
    if (raw & 0x1000)
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d007      	beq.n	8000d22 <MCP9808_RawToTemp+0x56>
      temp -= 256;
 8000d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d16:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000d38 <MCP9808_RawToTemp+0x6c>
 8000d1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d1e:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  return temp;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	ee07 3a90 	vmov	s15, r3
}
 8000d28:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	43800000 	.word	0x43800000

08000d3c <MCP9808_MapLimitBits>:

void MCP9808_MapLimitBits(uint16_t raw)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
  MCP9808_Overtemp     = (raw & MCP9808_REG_OVERTEMP) >> MCP9808_POS_OVERTEMP;
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	139b      	asrs	r3, r3, #14
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MCP9808_MapLimitBits+0x44>)
 8000d54:	701a      	strb	r2, [r3, #0]
  MCP9808_Undertemp    = (raw & MCP9808_REG_UNDERTEMP) >> MCP9808_POS_UNDERTEMP;
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	135b      	asrs	r3, r3, #13
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MCP9808_MapLimitBits+0x48>)
 8000d64:	701a      	strb	r2, [r3, #0]
  MCP9808_CriticalTemp = (raw & MCP9808_REG_CRITICALTEMP) >> MCP9808_POS_CRITICALTEMP;
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	0bdb      	lsrs	r3, r3, #15
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MCP9808_MapLimitBits+0x4c>)
 8000d70:	701a      	strb	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000200 	.word	0x20000200
 8000d84:	20000201 	.word	0x20000201
 8000d88:	20000202 	.word	0x20000202

08000d8c <MCP9808_Write16>:

void MCP9808_Write16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af02      	add	r7, sp, #8
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	4608      	mov	r0, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	817b      	strh	r3, [r7, #10]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	727b      	strb	r3, [r7, #9]
 8000da2:	4613      	mov	r3, r2
 8000da4:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[3];

  writeVals[0] = reg;
 8000da6:	7a7b      	ldrb	r3, [r7, #9]
 8000da8:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val >> 8;
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	757b      	strb	r3, [r7, #21]
  writeVals[2] = val & 0xFF;
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	75bb      	strb	r3, [r7, #22]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, 100);
 8000dba:	897b      	ldrh	r3, [r7, #10]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	b299      	uxth	r1, r3
 8000dc0:	f107 0214 	add.w	r2, r7, #20
 8000dc4:	2364      	movs	r3, #100	; 0x64
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2303      	movs	r3, #3
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f004 f9ca 	bl	8005164 <HAL_I2C_Master_Transmit>
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <MCP9808_Read16>:
uint16_t MCP9808_Read16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]
 8000de4:	4613      	mov	r3, r2
 8000de6:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[1];
  uint8_t readVals[2];
  uint16_t val = 0xFFFF;
 8000de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dec:	81fb      	strh	r3, [r7, #14]

  writeVals[0] = reg;
 8000dee:	787b      	ldrb	r3, [r7, #1]
 8000df0:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, 100);
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	b299      	uxth	r1, r3
 8000df8:	f107 020c 	add.w	r2, r7, #12
 8000dfc:	2364      	movs	r3, #100	; 0x64
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2301      	movs	r3, #1
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f004 f9ae 	bl	8005164 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 2, 100);
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	b299      	uxth	r1, r3
 8000e0e:	f107 0208 	add.w	r2, r7, #8
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2302      	movs	r3, #2
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f004 fa97 	bl	800534c <HAL_I2C_Master_Receive>

  val = (readVals[0] << 8 | readVals[1]);
 8000e1e:	7a3b      	ldrb	r3, [r7, #8]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	7a7b      	ldrb	r3, [r7, #9]
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	81fb      	strh	r3, [r7, #14]

  return val;
 8000e2e:	89fb      	ldrh	r3, [r7, #14]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <MCP9808_Write8>:

void MCP9808_Write8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	4608      	mov	r0, r1
 8000e42:	4611      	mov	r1, r2
 8000e44:	461a      	mov	r2, r3
 8000e46:	4603      	mov	r3, r0
 8000e48:	817b      	strh	r3, [r7, #10]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	727b      	strb	r3, [r7, #9]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 8000e52:	7a7b      	ldrb	r3, [r7, #9]
 8000e54:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val;
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	757b      	strb	r3, [r7, #21]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8000e5c:	897b      	ldrh	r3, [r7, #10]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	b299      	uxth	r1, r3
 8000e62:	f107 0214 	add.w	r2, r7, #20
 8000e66:	2364      	movs	r3, #100	; 0x64
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f004 f979 	bl	8005164 <HAL_I2C_Master_Transmit>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <MCP9808_GetCriticalTemp>:

  return val;
}

uint8_t MCP9808_GetCriticalTemp()
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return MCP9808_CriticalTemp;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <MCP9808_GetCriticalTemp+0x14>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000202 	.word	0x20000202

08000e94 <MCP9808_GetOvertemp>:

uint8_t MCP9808_GetOvertemp()
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return MCP9808_Overtemp;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <MCP9808_GetOvertemp+0x14>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000200 	.word	0x20000200

08000eac <PCA9539_WriteReg8>:
 */

#include "pca9539.h"

void PCA9539_WriteReg8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint8_t val)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4603      	mov	r3, r0
 8000ebc:	807b      	strh	r3, [r7, #2]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	707b      	strb	r3, [r7, #1]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 8000ec6:	787b      	ldrb	r3, [r7, #1]
 8000ec8:	733b      	strb	r3, [r7, #12]
  writeVals[1] = val;
 8000eca:	783b      	ldrb	r3, [r7, #0]
 8000ecc:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	b299      	uxth	r1, r3
 8000ed4:	f107 020c 	add.w	r2, r7, #12
 8000ed8:	2364      	movs	r3, #100	; 0x64
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2302      	movs	r3, #2
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f004 f940 	bl	8005164 <HAL_I2C_Master_Transmit>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <PCA9539_WriteReg16>:

  return val;
}

void PCA9539_WriteReg16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4603      	mov	r3, r0
 8000efc:	817b      	strh	r3, [r7, #10]
 8000efe:	460b      	mov	r3, r1
 8000f00:	727b      	strb	r3, [r7, #9]
 8000f02:	4613      	mov	r3, r2
 8000f04:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[3];

  writeVals[0] = reg;
 8000f06:	7a7b      	ldrb	r3, [r7, #9]
 8000f08:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val & 0xFF;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	757b      	strb	r3, [r7, #21]
  writeVals[2] = val >> 8;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	0a1b      	lsrs	r3, r3, #8
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	75bb      	strb	r3, [r7, #22]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, 100);
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	b299      	uxth	r1, r3
 8000f20:	f107 0214 	add.w	r2, r7, #20
 8000f24:	2364      	movs	r3, #100	; 0x64
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2303      	movs	r3, #3
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f004 f91a 	bl	8005164 <HAL_I2C_Master_Transmit>
}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <PCA9635_Init>:


#include "pca9635.h"

void PCA9635_Init(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t blinking)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
 8000f44:	4613      	mov	r3, r2
 8000f46:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];

  writeVals[0] = PCA9635_REG_MODE1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	733b      	strb	r3, [r7, #12]
  writeVals[1] = (PCA9635_MODE1_ALLCALL | PCA9635_MODE1_AI2); //Auto increment all registers
 8000f4c:	2381      	movs	r3, #129	; 0x81
 8000f4e:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	b299      	uxth	r1, r3
 8000f56:	f107 020c 	add.w	r2, r7, #12
 8000f5a:	2364      	movs	r3, #100	; 0x64
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2302      	movs	r3, #2
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f004 f8ff 	bl	8005164 <HAL_I2C_Master_Transmit>

  if(blinking > 0){
 8000f66:	787b      	ldrb	r3, [r7, #1]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00e      	beq.n	8000f8a <PCA9635_Init+0x52>
    writeVals[0] = PCA9635_REG_MODE2;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	733b      	strb	r3, [r7, #12]
    writeVals[1] = (PCA9635_MODE2_OUTNE | PCA9635_MODE2_OUTDRV | PCA9635_MODE2_DMBLNK);
 8000f70:	2325      	movs	r3, #37	; 0x25
 8000f72:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	b299      	uxth	r1, r3
 8000f7a:	f107 020c 	add.w	r2, r7, #12
 8000f7e:	2364      	movs	r3, #100	; 0x64
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2302      	movs	r3, #2
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f004 f8ed 	bl	8005164 <HAL_I2C_Master_Transmit>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <PCA9635_SetPWM>:

void PCA9635_SetPWM(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t channel, uint8_t value)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af02      	add	r7, sp, #8
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	807b      	strh	r3, [r7, #2]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	707b      	strb	r3, [r7, #1]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  if((channel >= 0) && (channel < 16)){
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	d810      	bhi.n	8000fd4 <PCA9635_SetPWM+0x42>
    writeVals[0] = PCA9635_REG_PWM(channel);
 8000fb2:	787b      	ldrb	r3, [r7, #1]
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	733b      	strb	r3, [r7, #12]
    writeVals[1] = value;
 8000fba:	783b      	ldrb	r3, [r7, #0]
 8000fbc:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	b299      	uxth	r1, r3
 8000fc4:	f107 020c 	add.w	r2, r7, #12
 8000fc8:	2364      	movs	r3, #100	; 0x64
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2302      	movs	r3, #2
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f004 f8c8 	bl	8005164 <HAL_I2C_Master_Transmit>
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <PCA9635_SetGroupPWM>:

void PCA9635_SetGroupPWM(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t value)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];
  writeVals[0] = PCA9635_REG_GRPPWM;
 8000fec:	2312      	movs	r3, #18
 8000fee:	733b      	strb	r3, [r7, #12]
  writeVals[1] = value;
 8000ff0:	787b      	ldrb	r3, [r7, #1]
 8000ff2:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	b299      	uxth	r1, r3
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f004 f8ad 	bl	8005164 <HAL_I2C_Master_Transmit>
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <PCA9635_SetGroupFreq>:

void PCA9635_SetGroupFreq(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t value)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af02      	add	r7, sp, #8
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	460b      	mov	r3, r1
 800101c:	807b      	strh	r3, [r7, #2]
 800101e:	4613      	mov	r3, r2
 8001020:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];
  writeVals[0] = PCA9635_REG_GRPFREQ;
 8001022:	2313      	movs	r3, #19
 8001024:	733b      	strb	r3, [r7, #12]
  writeVals[1] = value;
 8001026:	787b      	ldrb	r3, [r7, #1]
 8001028:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	b299      	uxth	r1, r3
 8001030:	f107 020c 	add.w	r2, r7, #12
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2302      	movs	r3, #2
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f004 f892 	bl	8005164 <HAL_I2C_Master_Transmit>
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <PCA9635_SetAllNum>:

void PCA9635_SetAllNum(I2C_HandleTypeDef* hi2c, uint16_t addr, uint32_t values)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af02      	add	r7, sp, #8
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	460b      	mov	r3, r1
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	817b      	strh	r3, [r7, #10]
  uint8_t writeVals[5];
  writeVals[0] = (PCA9635_REG_LEDOUT_BASE | PCA9635_REG_AI_ALL);
 8001056:	2394      	movs	r3, #148	; 0x94
 8001058:	743b      	strb	r3, [r7, #16]
  writeVals[1] = values & 0xFF;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	747b      	strb	r3, [r7, #17]
  writeVals[2] = (values >> 8) ;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	b2db      	uxtb	r3, r3
 8001066:	74bb      	strb	r3, [r7, #18]
  writeVals[3] = (values >> 16);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0c1b      	lsrs	r3, r3, #16
 800106c:	b2db      	uxtb	r3, r3
 800106e:	74fb      	strb	r3, [r7, #19]
  writeVals[4] = (values >> 24);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	0e1b      	lsrs	r3, r3, #24
 8001074:	b2db      	uxtb	r3, r3
 8001076:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 5, 100);
 8001078:	897b      	ldrh	r3, [r7, #10]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	b299      	uxth	r1, r3
 800107e:	f107 0210 	add.w	r2, r7, #16
 8001082:	2364      	movs	r3, #100	; 0x64
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2305      	movs	r3, #5
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f004 f86b 	bl	8005164 <HAL_I2C_Master_Transmit>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <PCA9635_SetAll>:

void PCA9635_SetAll(I2C_HandleTypeDef* hi2c, uint16_t addr, PCA9635_LEDOnState_t state[16])
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b088      	sub	sp, #32
 800109a:	af02      	add	r7, sp, #8
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	460b      	mov	r3, r1
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	817b      	strh	r3, [r7, #10]
  uint8_t writeVals[5];
  writeVals[0] = (PCA9635_REG_LEDOUT_BASE | PCA9635_REG_AI_ALL);
 80010a4:	2394      	movs	r3, #148	; 0x94
 80010a6:	743b      	strb	r3, [r7, #16]
  writeVals[1] = state[0] + (state[1] << 2) + (state[2] << 4) + (state[3] << 6);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3301      	adds	r3, #1
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3302      	adds	r3, #2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	4413      	add	r3, r2
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3303      	adds	r3, #3
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	019b      	lsls	r3, r3, #6
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4413      	add	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	747b      	strb	r3, [r7, #17]
  writeVals[2] = state[4] + (state[5] << 2) + (state[6] << 4) + (state[7] << 6);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3304      	adds	r3, #4
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3305      	adds	r3, #5
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4413      	add	r3, r2
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3306      	adds	r3, #6
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3307      	adds	r3, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	019b      	lsls	r3, r3, #6
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4413      	add	r3, r2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	74bb      	strb	r3, [r7, #18]
  writeVals[3] = state[8] + (state[9] << 2) + (state[10] << 4) + (state[11] << 6);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3308      	adds	r3, #8
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3309      	adds	r3, #9
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4413      	add	r3, r2
 800111c:	b2da      	uxtb	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	330a      	adds	r3, #10
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4413      	add	r3, r2
 800112a:	b2da      	uxtb	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	330b      	adds	r3, #11
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	019b      	lsls	r3, r3, #6
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	74fb      	strb	r3, [r7, #19]
  writeVals[4] = state[12] + (state[13] << 2) + (state[14] << 4) + (state[15] << 6);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	330c      	adds	r3, #12
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	330d      	adds	r3, #13
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	4413      	add	r3, r2
 800114e:	b2da      	uxtb	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	330e      	adds	r3, #14
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4413      	add	r3, r2
 800115c:	b2da      	uxtb	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	330f      	adds	r3, #15
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	019b      	lsls	r3, r3, #6
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4413      	add	r3, r2
 800116a:	b2db      	uxtb	r3, r3
 800116c:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 5, 100);
 800116e:	897b      	ldrh	r3, [r7, #10]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	b299      	uxth	r1, r3
 8001174:	f107 0210 	add.w	r2, r7, #16
 8001178:	2364      	movs	r3, #100	; 0x64
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2305      	movs	r3, #5
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f003 fff0 	bl	8005164 <HAL_I2C_Master_Transmit>
}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <PCAL9554B_WriteReg8>:
 */

#include "pcal9554b.h"

void PCAL9554B_WriteReg8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint8_t val)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af02      	add	r7, sp, #8
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4603      	mov	r3, r0
 800119c:	807b      	strh	r3, [r7, #2]
 800119e:	460b      	mov	r3, r1
 80011a0:	707b      	strb	r3, [r7, #1]
 80011a2:	4613      	mov	r3, r2
 80011a4:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 80011a6:	787b      	ldrb	r3, [r7, #1]
 80011a8:	733b      	strb	r3, [r7, #12]
  writeVals[1] = val;
 80011aa:	783b      	ldrb	r3, [r7, #0]
 80011ac:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b299      	uxth	r1, r3
 80011b4:	f107 020c 	add.w	r2, r7, #12
 80011b8:	2364      	movs	r3, #100	; 0x64
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2302      	movs	r3, #2
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f003 ffd0 	bl	8005164 <HAL_I2C_Master_Transmit>
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <PCAL9554B_ReadReg8>:

uint8_t PCAL9554B_ReadReg8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[1];
  uint8_t readVals[1];

  uint8_t val = 0xFF;
 80011dc:	23ff      	movs	r3, #255	; 0xff
 80011de:	73fb      	strb	r3, [r7, #15]

  writeVals[0] = reg;
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, 100);
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	b299      	uxth	r1, r3
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	2364      	movs	r3, #100	; 0x64
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f003 ffb5 	bl	8005164 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 1, 100);
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	b299      	uxth	r1, r3
 8001200:	f107 0208 	add.w	r2, r7, #8
 8001204:	2364      	movs	r3, #100	; 0x64
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f004 f89e 	bl	800534c <HAL_I2C_Master_Receive>

  val = readVals[0];
 8001210:	7a3b      	ldrb	r3, [r7, #8]
 8001212:	73fb      	strb	r3, [r7, #15]

  return val;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <TurningOff>:

#include "profet.h"

//Transient state
static void TurningOff(volatile ProfetTypeDef *profet)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	899b      	ldrh	r3, [r3, #12]
 800122a:	b29b      	uxth	r3, r3
 800122c:	43da      	mvns	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	8819      	ldrh	r1, [r3, #0]
 8001234:	b209      	sxth	r1, r1
 8001236:	b212      	sxth	r2, r2
 8001238:	400a      	ands	r2, r1
 800123a:	b212      	sxth	r2, r2
 800123c:	b292      	uxth	r2, r2
 800123e:	801a      	strh	r2, [r3, #0]
  profet->eState = OFF;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	705a      	strb	r2, [r3, #1]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <Off>:

static void Off(volatile ProfetTypeDef *profet)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  profet->cState = 'O';
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	224f      	movs	r2, #79	; 0x4f
 800125e:	70da      	strb	r2, [r3, #3]

  //Short circuit to battery check
  //TODO: Collapsing field will trigger this
  if (profet->nIL > 0.1) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	8c1b      	ldrh	r3, [r3, #32]
    //profet->eState = SHORT_CIRCUITING;
  }

  //Check for turn on
  if (profet->eReqState == ON) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	789b      	ldrb	r3, [r3, #2]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d102      	bne.n	8001274 <Off+0x22>
    profet->eState = TURNING_ON;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2208      	movs	r2, #8
 8001272:	705a      	strb	r2, [r3, #1]
  }
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <InRushing>:

//Transient state
static void InRushing(volatile ProfetTypeDef *profet)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port |= profet->nIN_Pin;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	899b      	ldrh	r3, [r3, #12]
 800128c:	b299      	uxth	r1, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	881a      	ldrh	r2, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	b292      	uxth	r2, r2
 8001298:	801a      	strh	r2, [r3, #0]
  profet->nIL_On_Time = HAL_GetTick();
 800129a:	f001 fb27 	bl	80028ec <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	61da      	str	r2, [r3, #28]
  profet->eState  = IN_RUSH;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2202      	movs	r2, #2
 80012a8:	705a      	strb	r2, [r3, #1]
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <InRush>:

static void InRush(volatile ProfetTypeDef *profet)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  if (profet->nIL > profet->nIL_InRush_Limit) {
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	8c1b      	ldrh	r3, [r3, #32]
 80012be:	b29a      	uxth	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	8adb      	ldrh	r3, [r3, #22]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d902      	bls.n	80012d0 <InRush+0x1e>
    profet->eState = OVERCURRENTING;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	220b      	movs	r2, #11
 80012ce:	705a      	strb	r2, [r3, #1]
  }
  if((HAL_GetTick() - profet->nIL_On_Time) > profet->nIL_InRush_Time){
 80012d0:	f001 fb0c 	bl	80028ec <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	8b12      	ldrh	r2, [r2, #24]
 80012e0:	b292      	uxth	r2, r2
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d902      	bls.n	80012ec <InRush+0x3a>
    profet->eState = TURNING_ON;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2208      	movs	r2, #8
 80012ea:	705a      	strb	r2, [r3, #1]
  }
  //Check for turn off
  if (profet->eReqState == OFF) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <InRush+0x4a>
    profet->eState = TURNING_OFF;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2207      	movs	r2, #7
 80012fa:	705a      	strb	r2, [r3, #1]
  }
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <TurningOn>:

//Transient state
static void TurningOn(volatile ProfetTypeDef *profet)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port |= profet->nIN_Pin;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	899b      	ldrh	r3, [r3, #12]
 8001310:	b299      	uxth	r1, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	881a      	ldrh	r2, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	b292      	uxth	r2, r2
 800131c:	801a      	strh	r2, [r3, #0]
  profet->eState = ON;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	705a      	strb	r2, [r3, #1]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <On>:

static void On(volatile ProfetTypeDef *profet)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  profet->cState = '|';
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	227c      	movs	r2, #124	; 0x7c
 800133c:	70da      	strb	r2, [r3, #3]

  //TODO: Dead short vs open load
  //Dead short will register no current
  //How to differentiate between open load?
  if (profet->nIL == 0) {
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	8c1b      	ldrh	r3, [r3, #32]
  }

  //Check for fault (device overcurrent/overtemp/short)
  //IL will be very high
  //TODO: Calculate value from datasheet
  if (profet->nIS_Avg > 30000) {
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	89db      	ldrh	r3, [r3, #14]
 8001346:	b29b      	uxth	r3, r3
 8001348:	f247 5230 	movw	r2, #30000	; 0x7530
 800134c:	4293      	cmp	r3, r2
 800134e:	d902      	bls.n	8001356 <On+0x26>
    profet->eState = FAULTING;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	220c      	movs	r2, #12
 8001354:	705a      	strb	r2, [r3, #1]
  }

  //Check for turn off
  if (profet->eReqState == OFF) {
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	789b      	ldrb	r3, [r3, #2]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <On+0x36>
    profet->eState = TURNING_OFF;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2207      	movs	r2, #7
 8001364:	705a      	strb	r2, [r3, #1]
  }

  if ((profet->nIL > profet->nIL_Limit) && (profet->nOC_Detected == 0)){
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	8c1b      	ldrh	r3, [r3, #32]
 800136a:	b29a      	uxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	8a9b      	ldrh	r3, [r3, #20]
 8001370:	b29b      	uxth	r3, r3
 8001372:	429a      	cmp	r2, r3
 8001374:	d90e      	bls.n	8001394 <On+0x64>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d108      	bne.n	8001394 <On+0x64>
    profet->nIL_On_Time = HAL_GetTick();
 8001382:	f001 fab3 	bl	80028ec <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	61da      	str	r2, [r3, #28]
    profet->nOC_Detected = 1;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  }

  if ((profet->nIL < profet->nIL_Limit) && (profet->nOC_Detected > 0)){
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	8c1b      	ldrh	r3, [r3, #32]
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	8a9b      	ldrh	r3, [r3, #20]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d209      	bcs.n	80013b8 <On+0x88>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <On+0x88>
    profet->nOC_Detected = 0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  }

  if(profet->nOC_Detected > 0){
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d017      	beq.n	80013f4 <On+0xc4>
    if((HAL_GetTick() - profet->nIL_On_Time) > GetTripTime(profet->eModel, profet->nIL, profet->nIL_Limit)){
 80013c4:	f001 fa92 	bl	80028ec <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	1ad4      	subs	r4, r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2d8      	uxtb	r0, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	8c1b      	ldrh	r3, [r3, #32]
 80013da:	b299      	uxth	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	8a9b      	ldrh	r3, [r3, #20]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	f000 f9b0 	bl	8001748 <GetTripTime>
 80013e8:	4603      	mov	r3, r0
 80013ea:	429c      	cmp	r4, r3
 80013ec:	d902      	bls.n	80013f4 <On+0xc4>
      profet->eState = OVERCURRENTING;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	220b      	movs	r2, #11
 80013f2:	705a      	strb	r2, [r3, #1]
    }
  }
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd90      	pop	{r4, r7, pc}

080013fc <Overcurrenting>:

//Transient state
static void Overcurrenting(volatile ProfetTypeDef *profet)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  profet->nValStore = profet->nIL;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	8c1b      	ldrh	r3, [r3, #32]
 8001408:	b29a      	uxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	849a      	strh	r2, [r3, #36]	; 0x24
  *profet->nIN_Port &= ~profet->nIN_Pin;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	899b      	ldrh	r3, [r3, #12]
 8001412:	b29b      	uxth	r3, r3
 8001414:	43da      	mvns	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	8819      	ldrh	r1, [r3, #0]
 800141c:	b209      	sxth	r1, r1
 800141e:	b212      	sxth	r2, r2
 8001420:	400a      	ands	r2, r1
 8001422:	b212      	sxth	r2, r2
 8001424:	b292      	uxth	r2, r2
 8001426:	801a      	strh	r2, [r3, #0]
  profet->nOC_TriggerTime = HAL_GetTick();
 8001428:	f001 fa60 	bl	80028ec <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
  profet->nOC_ResetCount++;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001438:	b2db      	uxtb	r3, r3
 800143a:	3301      	adds	r3, #1
 800143c:	b2da      	uxtb	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  profet->eState = OVERCURRENT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2204      	movs	r2, #4
 8001448:	705a      	strb	r2, [r3, #1]
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <Overcurrent>:

static void Overcurrent(volatile ProfetTypeDef *profet)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  profet->cState = 'C';
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2243      	movs	r2, #67	; 0x43
 800145e:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	899b      	ldrh	r3, [r3, #12]
 8001464:	b29b      	uxth	r3, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	8819      	ldrh	r1, [r3, #0]
 800146e:	b209      	sxth	r1, r1
 8001470:	b212      	sxth	r2, r2
 8001472:	400a      	ands	r2, r1
 8001474:	b212      	sxth	r2, r2
 8001476:	b292      	uxth	r2, r2
 8001478:	801a      	strh	r2, [r3, #0]
  if(profet->nOC_ResetCount <= profet->nOC_ResetLimit){
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001480:	b2da      	uxtb	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001488:	b2db      	uxtb	r3, r3
 800148a:	429a      	cmp	r2, r3
 800148c:	d80e      	bhi.n	80014ac <Overcurrent+0x5a>
    if((HAL_GetTick() - profet->nOC_TriggerTime) > profet->nOC_ResetTime){
 800148e:	f001 fa2d 	bl	80028ec <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800149e:	b292      	uxth	r2, r2
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d906      	bls.n	80014b2 <Overcurrent+0x60>
      profet->eState = IN_RUSHING;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2209      	movs	r2, #9
 80014a8:	705a      	strb	r2, [r3, #1]
 80014aa:	e002      	b.n	80014b2 <Overcurrent+0x60>
    }
  }
  else{
    profet->eState = SUSPENDING;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	220d      	movs	r2, #13
 80014b0:	705a      	strb	r2, [r3, #1]
  }

  //Check for turn off
  if (profet->eReqState == OFF) {
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	789b      	ldrb	r3, [r3, #2]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d106      	bne.n	80014ca <Overcurrent+0x78>
    profet->nOC_ResetCount = 0;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    profet->eState = TURNING_OFF;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2207      	movs	r2, #7
 80014c8:	705a      	strb	r2, [r3, #1]
  }
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <ShortCircuiting>:

//Transient state
static void ShortCircuiting(volatile ProfetTypeDef *profet)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  profet->nValStore = profet->nIL;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	8c1b      	ldrh	r3, [r3, #32]
 80014de:	b29a      	uxth	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	849a      	strh	r2, [r3, #36]	; 0x24
  profet->eState = SHORT_CIRCUIT;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2203      	movs	r2, #3
 80014e8:	705a      	strb	r2, [r3, #1]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <ShortCircuit>:

static void ShortCircuit(volatile ProfetTypeDef *profet)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  profet->cState = 'S';
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2253      	movs	r2, #83	; 0x53
 8001502:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	899b      	ldrh	r3, [r3, #12]
 8001508:	b29b      	uxth	r3, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	8819      	ldrh	r1, [r3, #0]
 8001512:	b209      	sxth	r1, r1
 8001514:	b212      	sxth	r2, r2
 8001516:	400a      	ands	r2, r1
 8001518:	b212      	sxth	r2, r2
 800151a:	b292      	uxth	r2, r2
 800151c:	801a      	strh	r2, [r3, #0]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <Suspending>:

//Transient state
static void Suspending(volatile ProfetTypeDef *profet)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	899b      	ldrh	r3, [r3, #12]
 8001536:	b29b      	uxth	r3, r3
 8001538:	43da      	mvns	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	8819      	ldrh	r1, [r3, #0]
 8001540:	b209      	sxth	r1, r1
 8001542:	b212      	sxth	r2, r2
 8001544:	400a      	ands	r2, r1
 8001546:	b212      	sxth	r2, r2
 8001548:	b292      	uxth	r2, r2
 800154a:	801a      	strh	r2, [r3, #0]
  profet->eState = SUSPENDED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2206      	movs	r2, #6
 8001550:	705a      	strb	r2, [r3, #1]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <Suspended>:

static void Suspended(volatile ProfetTypeDef *profet)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  profet->cState = 'X';
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2258      	movs	r2, #88	; 0x58
 800156a:	70da      	strb	r2, [r3, #3]
  //TODO: replace with a reset
  if (profet->eReqState == OFF){
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <Suspended+0x26>
    profet->nOC_ResetCount = 0;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    profet->eState = TURNING_OFF;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2207      	movs	r2, #7
 8001582:	705a      	strb	r2, [r3, #1]
  }
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <Faulting>:

//Transient state
static void Faulting(volatile ProfetTypeDef *profet)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	899b      	ldrh	r3, [r3, #12]
 800159c:	b29b      	uxth	r3, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	8819      	ldrh	r1, [r3, #0]
 80015a6:	b209      	sxth	r1, r1
 80015a8:	b212      	sxth	r2, r2
 80015aa:	400a      	ands	r2, r1
 80015ac:	b212      	sxth	r2, r2
 80015ae:	b292      	uxth	r2, r2
 80015b0:	801a      	strh	r2, [r3, #0]
  profet->eState = FAULT;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2205      	movs	r2, #5
 80015b6:	705a      	strb	r2, [r3, #1]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <Fault>:

static void Fault(volatile ProfetTypeDef *profet)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  profet->cState = 'F';
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2246      	movs	r2, #70	; 0x46
 80015d0:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	899b      	ldrh	r3, [r3, #12]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	43da      	mvns	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	8819      	ldrh	r1, [r3, #0]
 80015e0:	b209      	sxth	r1, r1
 80015e2:	b212      	sxth	r2, r2
 80015e4:	400a      	ands	r2, r1
 80015e6:	b212      	sxth	r2, r2
 80015e8:	b292      	uxth	r2, r2
 80015ea:	801a      	strh	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <Profet_SM>:

void Profet_SM(volatile ProfetTypeDef *profet) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  switch (profet->eState) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	785b      	ldrb	r3, [r3, #1]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b0d      	cmp	r3, #13
 8001608:	d856      	bhi.n	80016b8 <Profet_SM+0xc0>
 800160a:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <Profet_SM+0x18>)
 800160c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001610:	08001651 	.word	0x08001651
 8001614:	08001671 	.word	0x08001671
 8001618:	08001661 	.word	0x08001661
 800161c:	08001681 	.word	0x08001681
 8001620:	08001691 	.word	0x08001691
 8001624:	080016a1 	.word	0x080016a1
 8001628:	080016b1 	.word	0x080016b1
 800162c:	08001649 	.word	0x08001649
 8001630:	08001669 	.word	0x08001669
 8001634:	08001659 	.word	0x08001659
 8001638:	08001679 	.word	0x08001679
 800163c:	08001689 	.word	0x08001689
 8001640:	08001699 	.word	0x08001699
 8001644:	080016a9 	.word	0x080016a9
  case TURNING_OFF:
    TurningOff(profet);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fde8 	bl	800121e <TurningOff>
    break;
 800164e:	e033      	b.n	80016b8 <Profet_SM+0xc0>

  case OFF:
    Off(profet);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fdfe 	bl	8001252 <Off>
    break;
 8001656:	e02f      	b.n	80016b8 <Profet_SM+0xc0>

  case IN_RUSHING:
    InRushing(profet);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fe11 	bl	8001280 <InRushing>
    break;
 800165e:	e02b      	b.n	80016b8 <Profet_SM+0xc0>

  case IN_RUSH:
    InRush(profet);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fe26 	bl	80012b2 <InRush>
    break;
 8001666:	e027      	b.n	80016b8 <Profet_SM+0xc0>

  case TURNING_ON:
    TurningOn(profet);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fe4b 	bl	8001304 <TurningOn>
    break;
 800166e:	e023      	b.n	80016b8 <Profet_SM+0xc0>

  case ON:
    On(profet);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fe5d 	bl	8001330 <On>
    break;
 8001676:	e01f      	b.n	80016b8 <Profet_SM+0xc0>

  case SHORT_CIRCUITING:
    ShortCircuiting(profet);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff2a 	bl	80014d2 <ShortCircuiting>
    break;
 800167e:	e01b      	b.n	80016b8 <Profet_SM+0xc0>

  case SHORT_CIRCUIT:
    ShortCircuit(profet);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff38 	bl	80014f6 <ShortCircuit>
    break;
 8001686:	e017      	b.n	80016b8 <Profet_SM+0xc0>

  case OVERCURRENTING:
    Overcurrenting(profet);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff feb7 	bl	80013fc <Overcurrenting>
    break;
 800168e:	e013      	b.n	80016b8 <Profet_SM+0xc0>

  case OVERCURRENT:
    Overcurrent(profet);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fede 	bl	8001452 <Overcurrent>
    break;
 8001696:	e00f      	b.n	80016b8 <Profet_SM+0xc0>

  case FAULTING:
    Faulting(profet);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff79 	bl	8001590 <Faulting>
    break;
 800169e:	e00b      	b.n	80016b8 <Profet_SM+0xc0>

  case FAULT:
    Fault(profet);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff8f 	bl	80015c4 <Fault>
    break;
 80016a6:	e007      	b.n	80016b8 <Profet_SM+0xc0>

  case SUSPENDING:
    Suspending(profet);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff3e 	bl	800152a <Suspending>
    break;
 80016ae:	e003      	b.n	80016b8 <Profet_SM+0xc0>

  case SUSPENDED:
    Suspended(profet);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff54 	bl	800155e <Suspended>
    break;
 80016b6:	bf00      	nop

  }
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <Profet_UpdateIS>:

void Profet_UpdateIS(volatile ProfetTypeDef *profet, uint16_t newVal)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
  //Moving average without array or dividing
  //Store the new val, incase we need a non-filtered val elsewhere
  profet->nIS = newVal;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	845a      	strh	r2, [r3, #34]	; 0x22
  //Add new value to old sum
  profet->nIS_Sum += profet->nIS;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	441a      	add	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	611a      	str	r2, [r3, #16]
  //Shift sum by 1 which is equal to dividing by 2
  profet->nIS_Avg = profet->nIS_Sum >> 1;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	81da      	strh	r2, [r3, #14]
  //Remove the average from the sum, otherwise sum always goes up never down
  profet->nIS_Sum -= profet->nIS_Avg;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	89db      	ldrh	r3, [r3, #14]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	1a9a      	subs	r2, r3, r2
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	611a      	str	r2, [r3, #16]

  //Convert IS to IL (actual current)
  profet->nIL = (uint16_t)(((float)profet->nIS_Avg * profet->fKilis) / 100.0);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	89db      	ldrh	r3, [r3, #14]
 8001702:	b29b      	uxth	r3, r3
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001716:	ee17 0a90 	vmov	r0, s15
 800171a:	f7fe febd 	bl	8000498 <__aeabi_f2d>
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <Profet_UpdateIS+0x84>)
 8001724:	f7ff f83a 	bl	800079c <__aeabi_ddiv>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff f91c 	bl	800096c <__aeabi_d2uiz>
 8001734:	4603      	mov	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	841a      	strh	r2, [r3, #32]
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40590000 	.word	0x40590000

08001748 <GetTripTime>:

uint32_t GetTripTime(ProfetModelTypeDef eModel, uint16_t nIL, uint16_t nMaxIL)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	460b      	mov	r3, r1
 8001754:	80bb      	strh	r3, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	807b      	strh	r3, [r7, #2]
  //Multiply by 10 to include first decimal point
  // 25A / 5A = 5
  // 5 * 10 = 50 nOCMult
  //Subtract 10 to start at index 0
  // nOCMult = 40
  uint8_t nOCMult = (uint8_t)(((float)nIL / (float)nMaxIL) * 10.0);
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	ee07 3a90 	vmov	s15, r3
 800176a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800176e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001772:	ee16 0a90 	vmov	r0, s13
 8001776:	f7fe fe8f 	bl	8000498 <__aeabi_f2d>
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <GetTripTime+0xe4>)
 8001780:	f7fe fee2 	bl	8000548 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff f8ee 	bl	800096c <__aeabi_d2uiz>
 8001790:	4603      	mov	r3, r0
 8001792:	75fb      	strb	r3, [r7, #23]
  nOCMult -= 10; //Subtract 10 to start at index 0
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	3b0a      	subs	r3, #10
 8001798:	75fb      	strb	r3, [r7, #23]

  if(nOCMult < 0)
    nOCMult = 0;
  if(nOCMult > 91)
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	2b5b      	cmp	r3, #91	; 0x5b
 800179e:	d901      	bls.n	80017a4 <GetTripTime+0x5c>
    nOCMult = 91;
 80017a0:	235b      	movs	r3, #91	; 0x5b
 80017a2:	75fb      	strb	r3, [r7, #23]
      0x0273U,0x0260U,0x024EU,0x023DU,0x022DU,0x021DU,0x020EU,0x0200U,0x01F2U,0x01E5U,0x01D8U,
      0x01CBU,0x01C0U,0x01B4U,0x01A9U,0x019EU,0x0194U,0x018AU,0x0181U,0x0177U,0x016EU,0x0166U,
      0x015DU,0x0155U,0x014EU
  };

  uint16_t nTripTimeRaw = fTripTimeLookupTable[nOCMult];
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	4a22      	ldr	r2, [pc, #136]	; (8001830 <GetTripTime+0xe8>)
 80017a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017ac:	81fb      	strh	r3, [r7, #14]
       0.93,0.94,0.95,0.96,0.97,0.98,0.99,1,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,
       1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.2,1.21,1.22,1.23,1.24,
       1.25,1.26,1.27,1.28,1.29,1.3,1.31,1.32,1.33,1.34,1.35,1.36,1.37,1.38,1.39,1.40
   };

  uint32_t nTripTime = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  float fTripTimeMult = 0.0;
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]

  switch(eModel){
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <GetTripTime+0x82>
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db21      	blt.n	8001806 <GetTripTime+0xbe>
 80017c2:	3b01      	subs	r3, #1
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d81e      	bhi.n	8001806 <GetTripTime+0xbe>
 80017c8:	e00e      	b.n	80017e8 <GetTripTime+0xa0>
  case BTS7002_1EPP:
    if(nMaxIL < 200)
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	2bc7      	cmp	r3, #199	; 0xc7
 80017ce:	d806      	bhi.n	80017de <GetTripTime+0x96>
      fTripTimeMult = fTripTimeMult_7002[nMaxIL];
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	4a18      	ldr	r2, [pc, #96]	; (8001834 <GetTripTime+0xec>)
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	613b      	str	r3, [r7, #16]
    else
      fTripTimeMult = fTripTimeMult_7002[199];
    break;
 80017dc:	e013      	b.n	8001806 <GetTripTime+0xbe>
      fTripTimeMult = fTripTimeMult_7002[199];
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <GetTripTime+0xec>)
 80017e0:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 80017e4:	613b      	str	r3, [r7, #16]
    break;
 80017e6:	e00e      	b.n	8001806 <GetTripTime+0xbe>

  case BTS7008_2EPA_CH1:
  case BTS7008_2EPA_CH2:
    if(nMaxIL < 80)
 80017e8:	887b      	ldrh	r3, [r7, #2]
 80017ea:	2b4f      	cmp	r3, #79	; 0x4f
 80017ec:	d806      	bhi.n	80017fc <GetTripTime+0xb4>
      fTripTimeMult = fTripTimeMult_7008[nMaxIL];
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	4a11      	ldr	r2, [pc, #68]	; (8001838 <GetTripTime+0xf0>)
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	613b      	str	r3, [r7, #16]
    else
      fTripTimeMult = fTripTimeMult_7008[79];
    break;
 80017fa:	e003      	b.n	8001804 <GetTripTime+0xbc>
      fTripTimeMult = fTripTimeMult_7008[79];
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <GetTripTime+0xf0>)
 80017fe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001802:	613b      	str	r3, [r7, #16]
    break;
 8001804:	bf00      	nop
  }

  nTripTime = (uint32_t)(nTripTimeRaw * fTripTimeMult);
 8001806:	89fb      	ldrh	r3, [r7, #14]
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001810:	edd7 7a04 	vldr	s15, [r7, #16]
 8001814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800181c:	ee17 3a90 	vmov	r3, s15
 8001820:	60bb      	str	r3, [r7, #8]

  return nTripTime;
 8001822:	68bb      	ldr	r3, [r7, #8]

}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40240000 	.word	0x40240000
 8001830:	080166cc 	.word	0x080166cc
 8001834:	08016784 	.word	0x08016784
 8001838:	08016aa4 	.word	0x08016aa4

0800183c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001860:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001864:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001866:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001868:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800186c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <MX_ADC1_Init+0xdc>)
 800187c:	2201      	movs	r2, #1
 800187e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001888:	4b23      	ldr	r3, [pc, #140]	; (8001918 <MX_ADC1_Init+0xdc>)
 800188a:	2200      	movs	r2, #0
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001890:	2201      	movs	r2, #1
 8001892:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_ADC1_Init+0xdc>)
 800189c:	2201      	movs	r2, #1
 800189e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_ADC1_Init+0xdc>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <MX_ADC1_Init+0xdc>)
 80018aa:	2204      	movs	r2, #4
 80018ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_ADC1_Init+0xdc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018b4:	4b18      	ldr	r3, [pc, #96]	; (8001918 <MX_ADC1_Init+0xdc>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018ba:	4817      	ldr	r0, [pc, #92]	; (8001918 <MX_ADC1_Init+0xdc>)
 80018bc:	f001 f840 	bl	8002940 <HAL_ADC_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80018c6:	f000 fd7d 	bl	80023c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	4810      	ldr	r0, [pc, #64]	; (8001918 <MX_ADC1_Init+0xdc>)
 80018d6:	f001 fe1b 	bl	8003510 <HAL_ADCEx_MultiModeConfigChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80018e0:	f000 fd70 	bl	80023c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80018e4:	2310      	movs	r3, #16
 80018e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80018f0:	2307      	movs	r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001902:	f001 fb19 	bl	8002f38 <HAL_ADC_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800190c:	f000 fd5a 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	2000028c 	.word	0x2000028c

0800191c <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001922:	463b      	mov	r3, r7
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
 8001930:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001934:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <MX_ADC4_Init+0xb8>)
 8001936:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <MX_ADC4_Init+0xb4>)
 800193a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800193e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001946:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 800194c:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <MX_ADC4_Init+0xb4>)
 800194e:	2201      	movs	r2, #1
 8001950:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <MX_ADC4_Init+0xb4>)
 800195c:	2200      	movs	r2, #0
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001962:	2201      	movs	r2, #1
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <MX_ADC4_Init+0xb4>)
 800196e:	2201      	movs	r2, #1
 8001970:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_ADC4_Init+0xb4>)
 800197c:	2204      	movs	r2, #4
 800197e:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001982:	2200      	movs	r2, #0
 8001984:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001988:	2200      	movs	r2, #0
 800198a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800198c:	4810      	ldr	r0, [pc, #64]	; (80019d0 <MX_ADC4_Init+0xb4>)
 800198e:	f000 ffd7 	bl	8002940 <HAL_ADC_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 8001998:	f000 fd14 	bl	80023c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800199c:	2303      	movs	r3, #3
 800199e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80019a8:	2307      	movs	r3, #7
 80019aa:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80019b4:	463b      	mov	r3, r7
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_ADC4_Init+0xb4>)
 80019ba:	f001 fabd 	bl	8002f38 <HAL_ADC_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 80019c4:	f000 fcfe 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200002dc 	.word	0x200002dc
 80019d4:	50000500 	.word	0x50000500

080019d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019f8:	d134      	bne.n	8001a64 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019fa:	4b45      	ldr	r3, [pc, #276]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	4a44      	ldr	r2, [pc, #272]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6153      	str	r3, [r2, #20]
 8001a06:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a12:	4b40      	ldr	r3, [pc, #256]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a14:	4a40      	ldr	r2, [pc, #256]	; (8001b18 <HAL_ADC_MspInit+0x140>)
 8001a16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a18:	4b3e      	ldr	r3, [pc, #248]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a2a:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a32:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a3a:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a40:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a46:	4833      	ldr	r0, [pc, #204]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a48:	f002 ff9c 	bl	8004984 <HAL_DMA_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8001a52:	f000 fcb7 	bl	80023c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a2e      	ldr	r2, [pc, #184]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a5a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a5c:	4a2d      	ldr	r2, [pc, #180]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8001a62:	e051      	b.n	8001b08 <HAL_ADC_MspInit+0x130>
  else if(adcHandle->Instance==ADC4)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a2c      	ldr	r2, [pc, #176]	; (8001b1c <HAL_ADC_MspInit+0x144>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d14c      	bne.n	8001b08 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a78:	6153      	str	r3, [r2, #20]
 8001a7a:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6153      	str	r3, [r2, #20]
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BATT_SENSE_Pin;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	481b      	ldr	r0, [pc, #108]	; (8001b20 <HAL_ADC_MspInit+0x148>)
 8001ab4:	f003 f91a 	bl	8004cec <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001aba:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <HAL_ADC_MspInit+0x150>)
 8001abc:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad6:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ade:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001aee:	f002 ff49 	bl	8004984 <HAL_DMA_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_ADC_MspInit+0x124>
      Error_Handler();
 8001af8:	f000 fc64 	bl	80023c4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001b08:	bf00      	nop
 8001b0a:	3728      	adds	r7, #40	; 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	20000204 	.word	0x20000204
 8001b18:	40020008 	.word	0x40020008
 8001b1c:	50000500 	.word	0x50000500
 8001b20:	48000400 	.word	0x48000400
 8001b24:	20000248 	.word	0x20000248
 8001b28:	4002041c 	.word	0x4002041c

08001b2c <MX_CAN_Init>:



/* CAN init function */
void MX_CAN_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b32:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <MX_CAN_Init+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b38:	2204      	movs	r2, #4
 8001b3a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b4a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b4e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b56:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b7e:	f001 fee9 	bl	8003954 <HAL_CAN_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001b88:	f000 fc1c 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000032c 	.word	0x2000032c
 8001b94:	40006400 	.word	0x40006400

08001b98 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_CAN_MspInit+0x8c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d130      	bne.n	8001c1c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_CAN_MspInit+0x90>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a1a      	ldr	r2, [pc, #104]	; (8001c28 <HAL_CAN_MspInit+0x90>)
 8001bc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_CAN_MspInit+0x90>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_CAN_MspInit+0x90>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <HAL_CAN_MspInit+0x90>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6153      	str	r3, [r2, #20]
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_CAN_MspInit+0x90>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001bfc:	2309      	movs	r3, #9
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4809      	ldr	r0, [pc, #36]	; (8001c2c <HAL_CAN_MspInit+0x94>)
 8001c08:	f003 f870 	bl	8004cec <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2105      	movs	r1, #5
 8001c10:	2014      	movs	r0, #20
 8001c12:	f002 fda3 	bl	800475c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001c16:	2014      	movs	r0, #20
 8001c18:	f002 fdbc 	bl	8004794 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	; 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40006400 	.word	0x40006400
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	48000400 	.word	0x48000400

08001c30 <MX_CRC_Init>:



/* CRC init function */
void MX_CRC_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c36:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <MX_CRC_Init+0x40>)
 8001c38:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c48:	2220      	movs	r2, #32
 8001c4a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c4e:	2280      	movs	r2, #128	; 0x80
 8001c50:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001c58:	4804      	ldr	r0, [pc, #16]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c5a:	f002 fda9 	bl	80047b0 <HAL_CRC_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001c64:	f000 fbae 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000354 	.word	0x20000354
 8001c70:	40023000 	.word	0x40023000

08001c74 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_CRC_MspInit+0x38>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10b      	bne.n	8001c9e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_CRC_MspInit+0x3c>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_CRC_MspInit+0x3c>)
 8001c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c90:	6153      	str	r3, [r2, #20]
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <HAL_CRC_MspInit+0x3c>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023000 	.word	0x40023000
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <MX_DMA_Init+0x60>)
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <MX_DMA_Init+0x60>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6153      	str	r3, [r2, #20]
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <MX_DMA_Init+0x60>)
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <MX_DMA_Init+0x60>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <MX_DMA_Init+0x60>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	6153      	str	r3, [r2, #20]
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <MX_DMA_Init+0x60>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2105      	movs	r1, #5
 8001cee:	200b      	movs	r0, #11
 8001cf0:	f002 fd34 	bl	800475c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cf4:	200b      	movs	r0, #11
 8001cf6:	f002 fd4d 	bl	8004794 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	2039      	movs	r0, #57	; 0x39
 8001d00:	f002 fd2c 	bl	800475c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001d04:	2039      	movs	r0, #57	; 0x39
 8001d06:	f002 fd45 	bl	8004794 <HAL_NVIC_EnableIRQ>

}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000

08001d18 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  //  Error_Handler();

  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  qMsgQueueRx = osMessageQueueNew(MSGQUEUE_RX_SIZE, sizeof(MsgQueueRx_t), NULL);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2130      	movs	r1, #48	; 0x30
 8001d20:	2010      	movs	r0, #16
 8001d22:	f00b fc0b 	bl	800d53c <osMessageQueueNew>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a35      	ldr	r2, [pc, #212]	; (8001e00 <MX_FREERTOS_Init+0xe8>)
 8001d2a:	6013      	str	r3, [r2, #0]
  if(qMsgQueueRx == NULL){
 8001d2c:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <MX_FREERTOS_Init+0xe8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <MX_FREERTOS_Init+0x20>
    //TODO: Message queue not created
    Error_Handler();
 8001d34:	f000 fb46 	bl	80023c4 <Error_Handler>
  }

  qMsgQueueUsbTx = osMessageQueueNew(MSGQUEUE_TX_SIZE, sizeof(MsgQueueUsbTx_t), NULL);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2109      	movs	r1, #9
 8001d3c:	2010      	movs	r0, #16
 8001d3e:	f00b fbfd 	bl	800d53c <osMessageQueueNew>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4a2f      	ldr	r2, [pc, #188]	; (8001e04 <MX_FREERTOS_Init+0xec>)
 8001d46:	6013      	str	r3, [r2, #0]
  if(qMsgQueueUsbTx == NULL){
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <MX_FREERTOS_Init+0xec>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <MX_FREERTOS_Init+0x3c>
    //TODO: Message queue not created
    Error_Handler();
 8001d50:	f000 fb38 	bl	80023c4 <Error_Handler>
  }

  qMsgQueueCanTx = osMessageQueueNew(MSGQUEUE_TX_SIZE, sizeof(MsgQueueCanTx_t), NULL);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2120      	movs	r1, #32
 8001d58:	2010      	movs	r0, #16
 8001d5a:	f00b fbef 	bl	800d53c <osMessageQueueNew>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a29      	ldr	r2, [pc, #164]	; (8001e08 <MX_FREERTOS_Init+0xf0>)
 8001d62:	6013      	str	r3, [r2, #0]
  if(qMsgQueueCanTx == NULL){
 8001d64:	4b28      	ldr	r3, [pc, #160]	; (8001e08 <MX_FREERTOS_Init+0xf0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <MX_FREERTOS_Init+0x58>
    //TODO: Message queue not created
    Error_Handler();
 8001d6c:	f000 fb2a 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d70:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <MX_FREERTOS_Init+0xf4>)
 8001d72:	2100      	movs	r1, #0
 8001d74:	4826      	ldr	r0, [pc, #152]	; (8001e10 <MX_FREERTOS_Init+0xf8>)
 8001d76:	f00b fb09 	bl	800d38c <osThreadNew>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <MX_FREERTOS_Init+0xfc>)
 8001d7e:	6013      	str	r3, [r2, #0]

  /* creation of i2cTask */
  i2cTaskHandle = osThreadNew(StartI2CTask, NULL, &i2cTask_attributes);
 8001d80:	4a25      	ldr	r2, [pc, #148]	; (8001e18 <MX_FREERTOS_Init+0x100>)
 8001d82:	2100      	movs	r1, #0
 8001d84:	4825      	ldr	r0, [pc, #148]	; (8001e1c <MX_FREERTOS_Init+0x104>)
 8001d86:	f00b fb01 	bl	800d38c <osThreadNew>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4a24      	ldr	r2, [pc, #144]	; (8001e20 <MX_FREERTOS_Init+0x108>)
 8001d8e:	6013      	str	r3, [r2, #0]

  /* creation of profetSMTask */
  profetSMTaskHandle = osThreadNew(StartProfetSMTask, NULL, &profetSMTask_attributes);
 8001d90:	4a24      	ldr	r2, [pc, #144]	; (8001e24 <MX_FREERTOS_Init+0x10c>)
 8001d92:	2100      	movs	r1, #0
 8001d94:	4824      	ldr	r0, [pc, #144]	; (8001e28 <MX_FREERTOS_Init+0x110>)
 8001d96:	f00b faf9 	bl	800d38c <osThreadNew>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a23      	ldr	r2, [pc, #140]	; (8001e2c <MX_FREERTOS_Init+0x114>)
 8001d9e:	6013      	str	r3, [r2, #0]

  /* creation of canTxTask */
  canTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &canTxTask_attributes);
 8001da0:	4a23      	ldr	r2, [pc, #140]	; (8001e30 <MX_FREERTOS_Init+0x118>)
 8001da2:	2100      	movs	r1, #0
 8001da4:	4823      	ldr	r0, [pc, #140]	; (8001e34 <MX_FREERTOS_Init+0x11c>)
 8001da6:	f00b faf1 	bl	800d38c <osThreadNew>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <MX_FREERTOS_Init+0x120>)
 8001dae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if(defaultTaskHandle == 0x0)
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <MX_FREERTOS_Init+0xfc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <MX_FREERTOS_Init+0xa4>
    Error_Handler();
 8001db8:	f000 fb04 	bl	80023c4 <Error_Handler>

  if(i2cTaskHandle == 0x0)
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <MX_FREERTOS_Init+0x108>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <MX_FREERTOS_Init+0xb0>
    Error_Handler();
 8001dc4:	f000 fafe 	bl	80023c4 <Error_Handler>

  if(profetSMTaskHandle == 0x0)
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <MX_FREERTOS_Init+0x114>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <MX_FREERTOS_Init+0xbc>
    Error_Handler();
 8001dd0:	f000 faf8 	bl	80023c4 <Error_Handler>

  if(canTxTaskHandle == 0x0)
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_FREERTOS_Init+0x120>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <MX_FREERTOS_Init+0xc8>
    Error_Handler();
 8001ddc:	f000 faf2 	bl	80023c4 <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  if(ReadPdmConfig() != PDM_OK)
 8001de0:	f010 f98a 	bl	80120f8 <ReadPdmConfig>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d001      	beq.n	8001dee <MX_FREERTOS_Init+0xd6>
    Error_Handler();
 8001dea:	f000 faeb 	bl	80023c4 <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  if(ReadPdmConfig() != PDM_OK)
 8001dee:	f010 f983 	bl	80120f8 <ReadPdmConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d001      	beq.n	8001dfc <MX_FREERTOS_Init+0xe4>
    Error_Handler();
 8001df8:	f000 fae4 	bl	80023c4 <Error_Handler>
  /* USER CODE END RTOS_EVENTS */

}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20003324 	.word	0x20003324
 8001e04:	20003328 	.word	0x20003328
 8001e08:	2000332c 	.word	0x2000332c
 8001e0c:	08016be4 	.word	0x08016be4
 8001e10:	08001e3d 	.word	0x08001e3d
 8001e14:	20000498 	.word	0x20000498
 8001e18:	08016c08 	.word	0x08016c08
 8001e1c:	08001e71 	.word	0x08001e71
 8001e20:	2000049c 	.word	0x2000049c
 8001e24:	08016c2c 	.word	0x08016c2c
 8001e28:	08001e99 	.word	0x08001e99
 8001e2c:	200004a0 	.word	0x200004a0
 8001e30:	08016c50 	.word	0x08016c50
 8001e34:	08001eb5 	.word	0x08001eb5
 8001e38:	200004a4 	.word	0x200004a4

08001e3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  PdmMainTask(&defaultTaskHandle, &hadc1, &hadc4, &hrtc, &hcrc);
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <StartDefaultTask+0x20>)
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <StartDefaultTask+0x24>)
 8001e4a:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <StartDefaultTask+0x28>)
 8001e4c:	4906      	ldr	r1, [pc, #24]	; (8001e68 <StartDefaultTask+0x2c>)
 8001e4e:	4807      	ldr	r0, [pc, #28]	; (8001e6c <StartDefaultTask+0x30>)
 8001e50:	f00e fb0a 	bl	8010468 <PdmMainTask>
  /* USER CODE END StartDefaultTask */
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000354 	.word	0x20000354
 8001e60:	20000410 	.word	0x20000410
 8001e64:	200002dc 	.word	0x200002dc
 8001e68:	2000028c 	.word	0x2000028c
 8001e6c:	20000498 	.word	0x20000498

08001e70 <StartI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CTask */
void StartI2CTask(void *argument)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CTask */
  I2CTask(&i2cTaskHandle, &hi2c1, &hi2c2);
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <StartI2CTask+0x1c>)
 8001e7a:	4905      	ldr	r1, [pc, #20]	; (8001e90 <StartI2CTask+0x20>)
 8001e7c:	4805      	ldr	r0, [pc, #20]	; (8001e94 <StartI2CTask+0x24>)
 8001e7e:	f00e fd5f 	bl	8010940 <I2CTask>
  /* USER CODE END StartI2CTask */
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200003c4 	.word	0x200003c4
 8001e90:	20000378 	.word	0x20000378
 8001e94:	2000049c 	.word	0x2000049c

08001e98 <StartProfetSMTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProfetSMTask */
void StartProfetSMTask(void *argument)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProfetSMTask */
  ProfetSMTask(&profetSMTaskHandle);
 8001ea0:	4803      	ldr	r0, [pc, #12]	; (8001eb0 <StartProfetSMTask+0x18>)
 8001ea2:	f00f f8e5 	bl	8011070 <ProfetSMTask>
  /* USER CODE END StartProfetSMTask */
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200004a0 	.word	0x200004a0

08001eb4 <StartCanTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanTxTask */
void StartCanTxTask(void *argument)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanTxTask */
  CanTxTask(&canTxTaskHandle, &hcan);
 8001ebc:	4903      	ldr	r1, [pc, #12]	; (8001ecc <StartCanTxTask+0x18>)
 8001ebe:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <StartCanTxTask+0x1c>)
 8001ec0:	f00f fcee 	bl	80118a0 <CanTxTask>
  /* USER CODE END StartCanTxTask */
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000032c 	.word	0x2000032c
 8001ed0:	200004a4 	.word	0x200004a4

08001ed4 <ConfigureRunTimeCounter>:
#if( configGENERATE_RUN_TIME_STATS == 1)
void ConfigureRunTimeCounter(void);
uint32_t GetRunTimeCounter(void);

void ConfigureRunTimeCounter(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  nRunTimeCount = 0;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <ConfigureRunTimeCounter+0x14>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	20000494 	.word	0x20000494

08001eec <GetRunTimeCounter>:

uint32_t GetRunTimeCounter(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return nRunTimeCount;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <GetRunTimeCounter+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000494 	.word	0x20000494

08001f04 <IncrementRuntimeStats>:

void IncrementRuntimeStats(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  nRunTimeCount = nRunTimeCount + 1;
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <IncrementRuntimeStats+0x18>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	4a03      	ldr	r2, [pc, #12]	; (8001f1c <IncrementRuntimeStats+0x18>)
 8001f10:	6013      	str	r3, [r2, #0]
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	20000494 	.word	0x20000494

08001f20 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f36:	4b4d      	ldr	r3, [pc, #308]	; (800206c <MX_GPIO_Init+0x14c>)
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	4a4c      	ldr	r2, [pc, #304]	; (800206c <MX_GPIO_Init+0x14c>)
 8001f3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f40:	6153      	str	r3, [r2, #20]
 8001f42:	4b4a      	ldr	r3, [pc, #296]	; (800206c <MX_GPIO_Init+0x14c>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <MX_GPIO_Init+0x14c>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	4a46      	ldr	r2, [pc, #280]	; (800206c <MX_GPIO_Init+0x14c>)
 8001f54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f58:	6153      	str	r3, [r2, #20]
 8001f5a:	4b44      	ldr	r3, [pc, #272]	; (800206c <MX_GPIO_Init+0x14c>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	4b41      	ldr	r3, [pc, #260]	; (800206c <MX_GPIO_Init+0x14c>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	4a40      	ldr	r2, [pc, #256]	; (800206c <MX_GPIO_Init+0x14c>)
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	6153      	str	r3, [r2, #20]
 8001f72:	4b3e      	ldr	r3, [pc, #248]	; (800206c <MX_GPIO_Init+0x14c>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	; (800206c <MX_GPIO_Init+0x14c>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	4a3a      	ldr	r2, [pc, #232]	; (800206c <MX_GPIO_Init+0x14c>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6153      	str	r3, [r2, #20]
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <MX_GPIO_Init+0x14c>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXTRA1_Pin|EXTRA3_Pin, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f248 0104 	movw	r1, #32772	; 0x8004
 8001f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa0:	f003 f81e 	bl	8004fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EXTRA2_Pin|USB_PULLUP_Pin|PF_RESET_Pin, GPIO_PIN_RESET);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f640 0114 	movw	r1, #2068	; 0x814
 8001faa:	4831      	ldr	r0, [pc, #196]	; (8002070 <MX_GPIO_Init+0x150>)
 8001fac:	f003 f818 	bl	8004fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EXTRA1_Pin|EXTRA3_Pin;
 8001fb0:	f248 0304 	movw	r3, #32772	; 0x8004
 8001fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fcc:	f002 fe8e 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTRA2_Pin;
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRA2_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4822      	ldr	r0, [pc, #136]	; (8002070 <MX_GPIO_Init+0x150>)
 8001fe8:	f002 fe80 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	481b      	ldr	r0, [pc, #108]	; (8002070 <MX_GPIO_Init+0x150>)
 8002002:	f002 fe73 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PULLUP_Pin;
 8002006:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800200a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800200c:	2311      	movs	r3, #17
 800200e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PULLUP_GPIO_Port, &GPIO_InitStruct);
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4619      	mov	r1, r3
 800201e:	4814      	ldr	r0, [pc, #80]	; (8002070 <MX_GPIO_Init+0x150>)
 8002020:	f002 fe64 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002044:	f002 fe52 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PF_RESET_Pin;
 8002048:	2310      	movs	r3, #16
 800204a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204c:	2301      	movs	r3, #1
 800204e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PF_RESET_GPIO_Port, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	4804      	ldr	r0, [pc, #16]	; (8002070 <MX_GPIO_Init+0x150>)
 8002060:	f002 fe44 	bl	8004cec <HAL_GPIO_Init>

}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	48000400 	.word	0x48000400

08002074 <MX_I2C1_Init>:
/* USER CODE END 0 */


/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <MX_I2C1_Init+0x74>)
 800207a:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <MX_I2C1_Init+0x78>)
 800207c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10E8122C;
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_I2C1_Init+0x74>)
 8002080:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <MX_I2C1_Init+0x7c>)
 8002082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <MX_I2C1_Init+0x74>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <MX_I2C1_Init+0x74>)
 800208c:	2201      	movs	r2, #1
 800208e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <MX_I2C1_Init+0x74>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <MX_I2C1_Init+0x74>)
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <MX_I2C1_Init+0x74>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <MX_I2C1_Init+0x74>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <MX_I2C1_Init+0x74>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020ae:	480e      	ldr	r0, [pc, #56]	; (80020e8 <MX_I2C1_Init+0x74>)
 80020b0:	f002 ffc8 	bl	8005044 <HAL_I2C_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020ba:	f000 f983 	bl	80023c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020be:	2100      	movs	r1, #0
 80020c0:	4809      	ldr	r0, [pc, #36]	; (80020e8 <MX_I2C1_Init+0x74>)
 80020c2:	f003 fc29 	bl	8005918 <HAL_I2CEx_ConfigAnalogFilter>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020cc:	f000 f97a 	bl	80023c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020d0:	2100      	movs	r1, #0
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_I2C1_Init+0x74>)
 80020d4:	f003 fc6b 	bl	80059ae <HAL_I2CEx_ConfigDigitalFilter>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020de:	f000 f971 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000378 	.word	0x20000378
 80020ec:	40005400 	.word	0x40005400
 80020f0:	10e8122c 	.word	0x10e8122c

080020f4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <MX_I2C2_Init+0x74>)
 80020fa:	4a1c      	ldr	r2, [pc, #112]	; (800216c <MX_I2C2_Init+0x78>)
 80020fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10E8122C;
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <MX_I2C2_Init+0x74>)
 8002100:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <MX_I2C2_Init+0x7c>)
 8002102:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <MX_I2C2_Init+0x74>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <MX_I2C2_Init+0x74>)
 800210c:	2201      	movs	r2, #1
 800210e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002110:	4b15      	ldr	r3, [pc, #84]	; (8002168 <MX_I2C2_Init+0x74>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MX_I2C2_Init+0x74>)
 8002118:	2200      	movs	r2, #0
 800211a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <MX_I2C2_Init+0x74>)
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_I2C2_Init+0x74>)
 8002124:	2200      	movs	r2, #0
 8002126:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_I2C2_Init+0x74>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800212e:	480e      	ldr	r0, [pc, #56]	; (8002168 <MX_I2C2_Init+0x74>)
 8002130:	f002 ff88 	bl	8005044 <HAL_I2C_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800213a:	f000 f943 	bl	80023c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800213e:	2100      	movs	r1, #0
 8002140:	4809      	ldr	r0, [pc, #36]	; (8002168 <MX_I2C2_Init+0x74>)
 8002142:	f003 fbe9 	bl	8005918 <HAL_I2CEx_ConfigAnalogFilter>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800214c:	f000 f93a 	bl	80023c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002150:	2100      	movs	r1, #0
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_I2C2_Init+0x74>)
 8002154:	f003 fc2b 	bl	80059ae <HAL_I2CEx_ConfigDigitalFilter>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800215e:	f000 f931 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200003c4 	.word	0x200003c4
 800216c:	40005800 	.word	0x40005800
 8002170:	10e8122c 	.word	0x10e8122c

08002174 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08c      	sub	sp, #48	; 0x30
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 031c 	add.w	r3, r7, #28
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2f      	ldr	r2, [pc, #188]	; (8002250 <HAL_I2C_MspInit+0xdc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d128      	bne.n	80021e8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <HAL_I2C_MspInit+0xe0>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	4a2e      	ldr	r2, [pc, #184]	; (8002254 <HAL_I2C_MspInit+0xe0>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a0:	6153      	str	r3, [r2, #20]
 80021a2:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_I2C_MspInit+0xe0>)
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ae:	23c0      	movs	r3, #192	; 0xc0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b2:	2312      	movs	r3, #18
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b6:	2301      	movs	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021be:	2304      	movs	r3, #4
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	4823      	ldr	r0, [pc, #140]	; (8002258 <HAL_I2C_MspInit+0xe4>)
 80021ca:	f002 fd8f 	bl	8004cec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021ce:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_I2C_MspInit+0xe0>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a20      	ldr	r2, [pc, #128]	; (8002254 <HAL_I2C_MspInit+0xe0>)
 80021d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021d8:	61d3      	str	r3, [r2, #28]
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_I2C_MspInit+0xe0>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80021e6:	e02e      	b.n	8002246 <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1b      	ldr	r2, [pc, #108]	; (800225c <HAL_I2C_MspInit+0xe8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d129      	bne.n	8002246 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_I2C_MspInit+0xe0>)
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_I2C_MspInit+0xe0>)
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fc:	6153      	str	r3, [r2, #20]
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_I2C_MspInit+0xe0>)
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800220a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800220e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002210:	2312      	movs	r3, #18
 8002212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002214:	2301      	movs	r3, #1
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800221c:	2304      	movs	r3, #4
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4619      	mov	r1, r3
 8002226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222a:	f002 fd5f 	bl	8004cec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_I2C_MspInit+0xe0>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4a08      	ldr	r2, [pc, #32]	; (8002254 <HAL_I2C_MspInit+0xe0>)
 8002234:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002238:	61d3      	str	r3, [r2, #28]
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_I2C_MspInit+0xe0>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
}
 8002246:	bf00      	nop
 8002248:	3730      	adds	r7, #48	; 0x30
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40005400 	.word	0x40005400
 8002254:	40021000 	.word	0x40021000
 8002258:	48000400 	.word	0x48000400
 800225c:	40005800 	.word	0x40005800

08002260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002264:	f000 fb18 	bl	8002898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002268:	f000 f81c 	bl	80022a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800226c:	f7ff fe58 	bl	8001f20 <MX_GPIO_Init>
  MX_DMA_Init();
 8002270:	f7ff fd20 	bl	8001cb4 <MX_DMA_Init>
  MX_ADC4_Init();
 8002274:	f7ff fb52 	bl	800191c <MX_ADC4_Init>
  MX_CAN_Init();
 8002278:	f7ff fc58 	bl	8001b2c <MX_CAN_Init>
  MX_I2C2_Init();
 800227c:	f7ff ff3a 	bl	80020f4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002280:	f000 f8f4 	bl	800246c <MX_SPI1_Init>
  MX_RTC_Init();
 8002284:	f000 f8a6 	bl	80023d4 <MX_RTC_Init>
  MX_I2C1_Init();
 8002288:	f7ff fef4 	bl	8002074 <MX_I2C1_Init>
  MX_CRC_Init();
 800228c:	f7ff fcd0 	bl	8001c30 <MX_CRC_Init>
  MX_ADC1_Init();
 8002290:	f7ff fad4 	bl	800183c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002294:	f00b f812 	bl	800d2bc <osKernelInitialize>
  MX_FREERTOS_Init();
 8002298:	f7ff fd3e 	bl	8001d18 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800229c:	f00b f842 	bl	800d324 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <main+0x40>
	...

080022a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b09e      	sub	sp, #120	; 0x78
 80022a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022ae:	2228      	movs	r2, #40	; 0x28
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f013 fc40 	bl	8015b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c8:	463b      	mov	r3, r7
 80022ca:	223c      	movs	r2, #60	; 0x3c
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f013 fc32 	bl	8015b38 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80022d4:	f005 f8a2 	bl	800741c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80022d8:	4b2c      	ldr	r3, [pc, #176]	; (800238c <SystemClock_Config+0xe8>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a2b      	ldr	r2, [pc, #172]	; (800238c <SystemClock_Config+0xe8>)
 80022de:	f023 0318 	bic.w	r3, r3, #24
 80022e2:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80022e4:	230d      	movs	r3, #13
 80022e6:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022ee:	2300      	movs	r3, #0
 80022f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022f2:	2301      	movs	r3, #1
 80022f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f6:	2301      	movs	r3, #1
 80022f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022fa:	2301      	movs	r3, #1
 80022fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022fe:	2302      	movs	r3, #2
 8002300:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002306:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002308:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800230c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800230e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002312:	4618      	mov	r0, r3
 8002314:	f005 f8d0 	bl	80074b8 <HAL_RCC_OscConfig>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800231e:	f000 f851 	bl	80023c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002322:	230f      	movs	r3, #15
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002326:	2302      	movs	r3, #2
 8002328:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800232e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002332:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002334:	2300      	movs	r3, #0
 8002336:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002338:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800233c:	2102      	movs	r1, #2
 800233e:	4618      	mov	r0, r3
 8002340:	f006 f8f8 	bl	8008534 <HAL_RCC_ClockConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800234a:	f000 f83b 	bl	80023c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <SystemClock_Config+0xec>)
 8002350:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_RTC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002352:	2310      	movs	r3, #16
 8002354:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8002356:	2320      	movs	r3, #32
 8002358:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800235a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002360:	2300      	movs	r3, #0
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002364:	463b      	mov	r3, r7
 8002366:	4618      	mov	r0, r3
 8002368:	f006 fb5c 	bl	8008a24 <HAL_RCCEx_PeriphCLKConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002372:	f000 f827 	bl	80023c4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8002376:	2200      	movs	r2, #0
 8002378:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800237c:	2000      	movs	r0, #0
 800237e:	f006 fa55 	bl	800882c <HAL_RCC_MCOConfig>
}
 8002382:	bf00      	nop
 8002384:	3778      	adds	r7, #120	; 0x78
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	00030060 	.word	0x00030060

08002394 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023a6:	f000 fa8d 	bl	80028c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
#if( configGENERATE_RUN_TIME_STATS == 1)
    if (htim->Instance == TIM6) {
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_TIM_PeriodElapsedCallback+0x24>
      IncrementRuntimeStats();
 80023b4:	f7ff fda6 	bl	8001f04 <IncrementRuntimeStats>
    }
#endif
  /* USER CODE END Callback 1 */
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40001000 	.word	0x40001000

080023c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __NOP();
 80023c8:	bf00      	nop
  /* USER CODE END Error_Handler_Debug */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <MX_RTC_Init>:



/* RTC init function */
void MX_RTC_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <MX_RTC_Init+0x44>)
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <MX_RTC_Init+0x48>)
 80023dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <MX_RTC_Init+0x44>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <MX_RTC_Init+0x44>)
 80023e6:	227f      	movs	r2, #127	; 0x7f
 80023e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <MX_RTC_Init+0x44>)
 80023ec:	22ff      	movs	r2, #255	; 0xff
 80023ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <MX_RTC_Init+0x44>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <MX_RTC_Init+0x44>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <MX_RTC_Init+0x44>)
 80023fe:	2200      	movs	r2, #0
 8002400:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_RTC_Init+0x44>)
 8002404:	f006 fcbe 	bl	8008d84 <HAL_RTC_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800240e:	f7ff ffd9 	bl	80023c4 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000410 	.word	0x20000410
 800241c:	40002800 	.word	0x40002800

08002420 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0d      	ldr	r2, [pc, #52]	; (8002464 <HAL_RTC_MspInit+0x44>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d111      	bne.n	8002456 <HAL_RTC_MspInit+0x36>
 8002432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002436:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002440:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <HAL_RTC_MspInit+0x48>)
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	461a      	mov	r2, r3
 8002452:	2301      	movs	r3, #1
 8002454:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40002800 	.word	0x40002800
 8002468:	10908100 	.word	0x10908100

0800246c <MX_SPI1_Init>:



/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <MX_SPI1_Init+0x74>)
 8002472:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <MX_SPI1_Init+0x78>)
 8002474:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <MX_SPI1_Init+0x74>)
 8002478:	f44f 7282 	mov.w	r2, #260	; 0x104
 800247c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <MX_SPI1_Init+0x74>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002484:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <MX_SPI1_Init+0x74>)
 8002486:	f44f 7240 	mov.w	r2, #768	; 0x300
 800248a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800248c:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <MX_SPI1_Init+0x74>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <MX_SPI1_Init+0x74>)
 8002494:	2200      	movs	r2, #0
 8002496:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <MX_SPI1_Init+0x74>)
 800249a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800249e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024a2:	2208      	movs	r2, #8
 80024a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024ba:	2207      	movs	r2, #7
 80024bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024c6:	2208      	movs	r2, #8
 80024c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024cc:	f006 fd3f 	bl	8008f4e <HAL_SPI_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024d6:	f7ff ff75 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000430 	.word	0x20000430
 80024e4:	40013000 	.word	0x40013000

080024e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a17      	ldr	r2, [pc, #92]	; (8002564 <HAL_SPI_MspInit+0x7c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d128      	bne.n	800255c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_SPI_MspInit+0x80>)
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	4a16      	ldr	r2, [pc, #88]	; (8002568 <HAL_SPI_MspInit+0x80>)
 8002510:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002514:	6193      	str	r3, [r2, #24]
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_SPI_MspInit+0x80>)
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_SPI_MspInit+0x80>)
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	4a10      	ldr	r2, [pc, #64]	; (8002568 <HAL_SPI_MspInit+0x80>)
 8002528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252c:	6153      	str	r3, [r2, #20]
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <HAL_SPI_MspInit+0x80>)
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800253a:	23f0      	movs	r3, #240	; 0xf0
 800253c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253e:	2302      	movs	r3, #2
 8002540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002546:	2303      	movs	r3, #3
 8002548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800254a:	2305      	movs	r3, #5
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	4619      	mov	r1, r3
 8002554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002558:	f002 fbc8 	bl	8004cec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800255c:	bf00      	nop
 800255e:	3728      	adds	r7, #40	; 0x28
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40013000 	.word	0x40013000
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_MspInit+0x4c>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_MspInit+0x4c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6193      	str	r3, [r2, #24]
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_MspInit+0x4c>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_MspInit+0x4c>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <HAL_MspInit+0x4c>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_MspInit+0x4c>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	210f      	movs	r1, #15
 80025a6:	f06f 0001 	mvn.w	r0, #1
 80025aa:	f002 f8d7 	bl	800475c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000

080025bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08c      	sub	sp, #48	; 0x30
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	2036      	movs	r0, #54	; 0x36
 80025d2:	f002 f8c3 	bl	800475c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025d6:	2036      	movs	r0, #54	; 0x36
 80025d8:	f002 f8dc 	bl	8004794 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80025dc:	4b1f      	ldr	r3, [pc, #124]	; (800265c <HAL_InitTick+0xa0>)
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	4a1e      	ldr	r2, [pc, #120]	; (800265c <HAL_InitTick+0xa0>)
 80025e2:	f043 0310 	orr.w	r3, r3, #16
 80025e6:	61d3      	str	r3, [r2, #28]
 80025e8:	4b1c      	ldr	r3, [pc, #112]	; (800265c <HAL_InitTick+0xa0>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025f4:	f107 0210 	add.w	r2, r7, #16
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f006 f9de 	bl	80089c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002604:	f006 f9ba 	bl	800897c <HAL_RCC_GetPCLK1Freq>
 8002608:	4603      	mov	r3, r0
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	4a13      	ldr	r2, [pc, #76]	; (8002660 <HAL_InitTick+0xa4>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	0c9b      	lsrs	r3, r3, #18
 8002618:	3b01      	subs	r3, #1
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_InitTick+0xa8>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <HAL_InitTick+0xac>)
 8002620:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_InitTick+0xa8>)
 8002624:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002628:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800262a:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <HAL_InitTick+0xa8>)
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <HAL_InitTick+0xa8>)
 8002632:	2200      	movs	r2, #0
 8002634:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_InitTick+0xa8>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800263c:	4809      	ldr	r0, [pc, #36]	; (8002664 <HAL_InitTick+0xa8>)
 800263e:	f006 fd31 	bl	80090a4 <HAL_TIM_Base_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d104      	bne.n	8002652 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002648:	4806      	ldr	r0, [pc, #24]	; (8002664 <HAL_InitTick+0xa8>)
 800264a:	f006 fd8d 	bl	8009168 <HAL_TIM_Base_Start_IT>
 800264e:	4603      	mov	r3, r0
 8002650:	e000      	b.n	8002654 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
}
 8002654:	4618      	mov	r0, r3
 8002656:	3730      	adds	r7, #48	; 0x30
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	431bde83 	.word	0x431bde83
 8002664:	200004a8 	.word	0x200004a8
 8002668:	40001000 	.word	0x40001000

0800266c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  __NOP();
 8002670:	bf00      	nop
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <HardFault_Handler+0x4>

08002682 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002686:	e7fe      	b.n	8002686 <MemManage_Handler+0x4>

08002688 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800268c:	e7fe      	b.n	800268c <BusFault_Handler+0x4>

0800268e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002692:	e7fe      	b.n	8002692 <UsageFault_Handler+0x4>

08002694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <DMA1_Channel1_IRQHandler+0x10>)
 80026aa:	f002 fa11 	bl	8004ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000204 	.word	0x20000204

080026b8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80026be:	f001 fd65 	bl	800418c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000032c 	.word	0x2000032c

080026cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <TIM6_DAC_IRQHandler+0x10>)
 80026d2:	f006 fdb3 	bl	800923c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200004a8 	.word	0x200004a8

080026e0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <DMA2_Channel2_IRQHandler+0x10>)
 80026e6:	f002 f9f3 	bl	8004ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000248 	.word	0x20000248

080026f4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <USB_LP_IRQHandler+0x10>)
 80026fa:	f003 faa8 	bl	8005c4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20004df0 	.word	0x20004df0

08002708 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	e00a      	b.n	8002730 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800271a:	f3af 8000 	nop.w
 800271e:	4601      	mov	r1, r0
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60ba      	str	r2, [r7, #8]
 8002726:	b2ca      	uxtb	r2, r1
 8002728:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3301      	adds	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	429a      	cmp	r2, r3
 8002736:	dbf0      	blt.n	800271a <_read+0x12>
	}

return len;
 8002738:	687b      	ldr	r3, [r7, #4]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
	return -1;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800276a:	605a      	str	r2, [r3, #4]
	return 0;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <_isatty>:

int _isatty(int file)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
	return 1;
 8002782:	2301      	movs	r3, #1
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
	return 0;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b4:	4a14      	ldr	r2, [pc, #80]	; (8002808 <_sbrk+0x5c>)
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <_sbrk+0x60>)
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <_sbrk+0x64>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <_sbrk+0x64>)
 80027ca:	4a12      	ldr	r2, [pc, #72]	; (8002814 <_sbrk+0x68>)
 80027cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <_sbrk+0x64>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d207      	bcs.n	80027ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027dc:	f013 f974 	bl	8015ac8 <__errno>
 80027e0:	4603      	mov	r3, r0
 80027e2:	220c      	movs	r2, #12
 80027e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	e009      	b.n	8002800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <_sbrk+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <_sbrk+0x64>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <_sbrk+0x64>)
 80027fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	2000a000 	.word	0x2000a000
 800280c:	00000400 	.word	0x00000400
 8002810:	200004f4 	.word	0x200004f4
 8002814:	20005310 	.word	0x20005310

08002818 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <SystemInit+0x28>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	4a07      	ldr	r2, [pc, #28]	; (8002840 <SystemInit+0x28>)
 8002824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <SystemInit+0x28>)
 800282e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002832:	609a      	str	r2, [r3, #8]
#endif
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800287c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002848:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800284a:	e003      	b.n	8002854 <LoopCopyDataInit>

0800284c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800284e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002850:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002852:	3104      	adds	r1, #4

08002854 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002854:	480b      	ldr	r0, [pc, #44]	; (8002884 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002858:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800285a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800285c:	d3f6      	bcc.n	800284c <CopyDataInit>
	ldr	r2, =_sbss
 800285e:	4a0b      	ldr	r2, [pc, #44]	; (800288c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002860:	e002      	b.n	8002868 <LoopFillZerobss>

08002862 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002862:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002864:	f842 3b04 	str.w	r3, [r2], #4

08002868 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <LoopForever+0x16>)
	cmp	r2, r3
 800286a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800286c:	d3f9      	bcc.n	8002862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800286e:	f7ff ffd3 	bl	8002818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002872:	f013 f92f 	bl	8015ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002876:	f7ff fcf3 	bl	8002260 <main>

0800287a <LoopForever>:

LoopForever:
    b LoopForever
 800287a:	e7fe      	b.n	800287a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800287c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002880:	08016d18 	.word	0x08016d18
	ldr	r0, =_sdata
 8002884:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002888:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 800288c:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8002890:	2000530c 	.word	0x2000530c

08002894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002894:	e7fe      	b.n	8002894 <ADC1_2_IRQHandler>
	...

08002898 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_Init+0x28>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a07      	ldr	r2, [pc, #28]	; (80028c0 <HAL_Init+0x28>)
 80028a2:	f043 0310 	orr.w	r3, r3, #16
 80028a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a8:	2003      	movs	r0, #3
 80028aa:	f001 ff4c 	bl	8004746 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7ff fe84 	bl	80025bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b4:	f7ff fe5a 	bl	800256c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40022000 	.word	0x40022000

080028c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_IncTick+0x20>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_IncTick+0x24>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <HAL_IncTick+0x24>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000008 	.word	0x20000008
 80028e8:	200004f8 	.word	0x200004f8

080028ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_GetTick+0x14>)
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	200004f8 	.word	0x200004f8

08002904 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b09a      	sub	sp, #104	; 0x68
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e1c9      	b.n	8002cf4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b00      	cmp	r3, #0
 8002970:	d176      	bne.n	8002a60 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d152      	bne.n	8002a20 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff f81f 	bl	80019d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d13b      	bne.n	8002a20 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 ff6d 	bl	8003888 <ADC_Disable>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d12f      	bne.n	8002a20 <HAL_ADC_Init+0xe0>
 80029c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d12b      	bne.n	8002a20 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029d0:	f023 0302 	bic.w	r3, r3, #2
 80029d4:	f043 0202 	orr.w	r2, r3, #2
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029ea:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029fa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029fc:	4b86      	ldr	r3, [pc, #536]	; (8002c18 <HAL_ADC_Init+0x2d8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a86      	ldr	r2, [pc, #536]	; (8002c1c <HAL_ADC_Init+0x2dc>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	0c9a      	lsrs	r2, r3, #18
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a12:	e002      	b.n	8002a1a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f9      	bne.n	8002a14 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a3c:	d110      	bne.n	8002a60 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f023 0312 	bic.w	r3, r3, #18
 8002a46:	f043 0210 	orr.w	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 8136 	bne.w	8002cda <HAL_ADC_Init+0x39a>
 8002a6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 8131 	bne.w	8002cda <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 8129 	bne.w	8002cda <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a90:	f043 0202 	orr.w	r2, r3, #2
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa0:	d004      	beq.n	8002aac <HAL_ADC_Init+0x16c>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5e      	ldr	r2, [pc, #376]	; (8002c20 <HAL_ADC_Init+0x2e0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_Init+0x170>
 8002aac:	4b5d      	ldr	r3, [pc, #372]	; (8002c24 <HAL_ADC_Init+0x2e4>)
 8002aae:	e000      	b.n	8002ab2 <HAL_ADC_Init+0x172>
 8002ab0:	4b5d      	ldr	r3, [pc, #372]	; (8002c28 <HAL_ADC_Init+0x2e8>)
 8002ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002abc:	d102      	bne.n	8002ac4 <HAL_ADC_Init+0x184>
 8002abe:	4b58      	ldr	r3, [pc, #352]	; (8002c20 <HAL_ADC_Init+0x2e0>)
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	e01a      	b.n	8002afa <HAL_ADC_Init+0x1ba>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a55      	ldr	r2, [pc, #340]	; (8002c20 <HAL_ADC_Init+0x2e0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d103      	bne.n	8002ad6 <HAL_ADC_Init+0x196>
 8002ace:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e011      	b.n	8002afa <HAL_ADC_Init+0x1ba>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a54      	ldr	r2, [pc, #336]	; (8002c2c <HAL_ADC_Init+0x2ec>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d102      	bne.n	8002ae6 <HAL_ADC_Init+0x1a6>
 8002ae0:	4b53      	ldr	r3, [pc, #332]	; (8002c30 <HAL_ADC_Init+0x2f0>)
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e009      	b.n	8002afa <HAL_ADC_Init+0x1ba>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a51      	ldr	r2, [pc, #324]	; (8002c30 <HAL_ADC_Init+0x2f0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d102      	bne.n	8002af6 <HAL_ADC_Init+0x1b6>
 8002af0:	4b4e      	ldr	r3, [pc, #312]	; (8002c2c <HAL_ADC_Init+0x2ec>)
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	e001      	b.n	8002afa <HAL_ADC_Init+0x1ba>
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d108      	bne.n	8002b1a <HAL_ADC_Init+0x1da>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_Init+0x1da>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_ADC_Init+0x1dc>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d11c      	bne.n	8002b5a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b20:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d107      	bne.n	8002b42 <HAL_ADC_Init+0x202>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_Init+0x202>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_ADC_Init+0x204>
 8002b42:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d108      	bne.n	8002b5a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b58:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	7e5b      	ldrb	r3, [r3, #25]
 8002b5e:	035b      	lsls	r3, r3, #13
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b64:	2a01      	cmp	r2, #1
 8002b66:	d002      	beq.n	8002b6e <HAL_ADC_Init+0x22e>
 8002b68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b6c:	e000      	b.n	8002b70 <HAL_ADC_Init+0x230>
 8002b6e:	2200      	movs	r2, #0
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b80:	4313      	orrs	r3, r2
 8002b82:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d11b      	bne.n	8002bc6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7e5b      	ldrb	r3, [r3, #25]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	045a      	lsls	r2, r3, #17
 8002b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ba8:	e00d      	b.n	8002bc6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002bb2:	f043 0220 	orr.w	r2, r3, #32
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d03a      	beq.n	8002c44 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a16      	ldr	r2, [pc, #88]	; (8002c2c <HAL_ADC_Init+0x2ec>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d004      	beq.n	8002be2 <HAL_ADC_Init+0x2a2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <HAL_ADC_Init+0x2f0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d128      	bne.n	8002c34 <HAL_ADC_Init+0x2f4>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002bea:	d012      	beq.n	8002c12 <HAL_ADC_Init+0x2d2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf4:	d00a      	beq.n	8002c0c <HAL_ADC_Init+0x2cc>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002bfe:	d002      	beq.n	8002c06 <HAL_ADC_Init+0x2c6>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	e018      	b.n	8002c38 <HAL_ADC_Init+0x2f8>
 8002c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0a:	e015      	b.n	8002c38 <HAL_ADC_Init+0x2f8>
 8002c0c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002c10:	e012      	b.n	8002c38 <HAL_ADC_Init+0x2f8>
 8002c12:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002c16:	e00f      	b.n	8002c38 <HAL_ADC_Init+0x2f8>
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	431bde83 	.word	0x431bde83
 8002c20:	50000100 	.word	0x50000100
 8002c24:	50000300 	.word	0x50000300
 8002c28:	50000700 	.word	0x50000700
 8002c2c:	50000400 	.word	0x50000400
 8002c30:	50000500 	.word	0x50000500
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c40:	4313      	orrs	r3, r2
 8002c42:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d114      	bne.n	8002c7c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c60:	f023 0302 	bic.w	r3, r3, #2
 8002c64:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7e1b      	ldrb	r3, [r3, #24]
 8002c6a:	039a      	lsls	r2, r3, #14
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4313      	orrs	r3, r2
 8002c76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	4b1e      	ldr	r3, [pc, #120]	; (8002cfc <HAL_ADC_Init+0x3bc>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10c      	bne.n	8002cb2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f023 010f 	bic.w	r1, r3, #15
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	1e5a      	subs	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb0:	e007      	b.n	8002cc2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 020f 	bic.w	r2, r2, #15
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f023 0303 	bic.w	r3, r3, #3
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40
 8002cd8:	e00a      	b.n	8002cf0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f023 0312 	bic.w	r3, r3, #18
 8002ce2:	f043 0210 	orr.w	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002cea:	2301      	movs	r3, #1
 8002cec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002cf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3768      	adds	r7, #104	; 0x68
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	fff0c007 	.word	0xfff0c007

08002d00 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 80f7 	bne.w	8002f0e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_Start_DMA+0x2e>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e0f2      	b.n	8002f14 <HAL_ADC_Start_DMA+0x214>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d3e:	d004      	beq.n	8002d4a <HAL_ADC_Start_DMA+0x4a>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a75      	ldr	r2, [pc, #468]	; (8002f1c <HAL_ADC_Start_DMA+0x21c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d109      	bne.n	8002d5e <HAL_ADC_Start_DMA+0x5e>
 8002d4a:	4b75      	ldr	r3, [pc, #468]	; (8002f20 <HAL_ADC_Start_DMA+0x220>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bf0c      	ite	eq
 8002d56:	2301      	moveq	r3, #1
 8002d58:	2300      	movne	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	e008      	b.n	8002d70 <HAL_ADC_Start_DMA+0x70>
 8002d5e:	4b71      	ldr	r3, [pc, #452]	; (8002f24 <HAL_ADC_Start_DMA+0x224>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf0c      	ite	eq
 8002d6a:	2301      	moveq	r3, #1
 8002d6c:	2300      	movne	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80c5 	beq.w	8002f00 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fd22 	bl	80037c0 <ADC_Enable>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 80b7 	bne.w	8002ef6 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da4:	d004      	beq.n	8002db0 <HAL_ADC_Start_DMA+0xb0>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a5c      	ldr	r2, [pc, #368]	; (8002f1c <HAL_ADC_Start_DMA+0x21c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d106      	bne.n	8002dbe <HAL_ADC_Start_DMA+0xbe>
 8002db0:	4b5b      	ldr	r3, [pc, #364]	; (8002f20 <HAL_ADC_Start_DMA+0x220>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <HAL_ADC_Start_DMA+0xde>
 8002dbc:	e005      	b.n	8002dca <HAL_ADC_Start_DMA+0xca>
 8002dbe:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <HAL_ADC_Start_DMA+0x224>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <HAL_ADC_Start_DMA+0xde>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dd2:	d004      	beq.n	8002dde <HAL_ADC_Start_DMA+0xde>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a53      	ldr	r2, [pc, #332]	; (8002f28 <HAL_ADC_Start_DMA+0x228>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d115      	bne.n	8002e0a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d036      	beq.n	8002e66 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002e08:	e02d      	b.n	8002e66 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e1e:	d004      	beq.n	8002e2a <HAL_ADC_Start_DMA+0x12a>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a3d      	ldr	r2, [pc, #244]	; (8002f1c <HAL_ADC_Start_DMA+0x21c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10a      	bne.n	8002e40 <HAL_ADC_Start_DMA+0x140>
 8002e2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e008      	b.n	8002e52 <HAL_ADC_Start_DMA+0x152>
 8002e40:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <HAL_ADC_Start_DMA+0x228>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e72:	d106      	bne.n	8002e82 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	f023 0206 	bic.w	r2, r3, #6
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	645a      	str	r2, [r3, #68]	; 0x44
 8002e80:	e002      	b.n	8002e88 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	4a25      	ldr	r2, [pc, #148]	; (8002f2c <HAL_ADC_Start_DMA+0x22c>)
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_ADC_Start_DMA+0x230>)
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	4a23      	ldr	r2, [pc, #140]	; (8002f34 <HAL_ADC_Start_DMA+0x234>)
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	221c      	movs	r2, #28
 8002eae:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0210 	orr.w	r2, r2, #16
 8002ebe:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3340      	adds	r3, #64	; 0x40
 8002eda:	4619      	mov	r1, r3
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f001 fd97 	bl	8004a12 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0204 	orr.w	r2, r2, #4
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	e00d      	b.n	8002f12 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002efe:	e008      	b.n	8002f12 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f0c:	e001      	b.n	8002f12 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	50000100 	.word	0x50000100
 8002f20:	50000300 	.word	0x50000300
 8002f24:	50000700 	.word	0x50000700
 8002f28:	50000400 	.word	0x50000400
 8002f2c:	080036f5 	.word	0x080036f5
 8002f30:	0800376f 	.word	0x0800376f
 8002f34:	0800378b 	.word	0x0800378b

08002f38 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b09b      	sub	sp, #108	; 0x6c
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x22>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e2ca      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x5b8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 82ae 	bne.w	80034ce <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d81c      	bhi.n	8002fb4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	231f      	movs	r3, #31
 8002f90:	4093      	lsls	r3, r2
 8002f92:	43db      	mvns	r3, r3
 8002f94:	4019      	ands	r1, r3
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb2:	e063      	b.n	800307c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b09      	cmp	r3, #9
 8002fba:	d81e      	bhi.n	8002ffa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	3b1e      	subs	r3, #30
 8002fd0:	221f      	movs	r2, #31
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	4019      	ands	r1, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	3b1e      	subs	r3, #30
 8002fec:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ff8:	e040      	b.n	800307c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b0e      	cmp	r3, #14
 8003000:	d81e      	bhi.n	8003040 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	3b3c      	subs	r3, #60	; 0x3c
 8003016:	221f      	movs	r2, #31
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	4019      	ands	r1, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	3b3c      	subs	r3, #60	; 0x3c
 8003032:	fa00 f203 	lsl.w	r2, r0, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
 800303e:	e01d      	b.n	800307c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	3b5a      	subs	r3, #90	; 0x5a
 8003054:	221f      	movs	r2, #31
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	4019      	ands	r1, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	3b5a      	subs	r3, #90	; 0x5a
 8003070:	fa00 f203 	lsl.w	r2, r0, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 80e5 	bne.w	8003256 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b09      	cmp	r3, #9
 8003092:	d91c      	bls.n	80030ce <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6999      	ldr	r1, [r3, #24]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	3b1e      	subs	r3, #30
 80030a6:	2207      	movs	r2, #7
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	4019      	ands	r1, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6898      	ldr	r0, [r3, #8]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	3b1e      	subs	r3, #30
 80030c0:	fa00 f203 	lsl.w	r2, r0, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	619a      	str	r2, [r3, #24]
 80030cc:	e019      	b.n	8003102 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6959      	ldr	r1, [r3, #20]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	2207      	movs	r2, #7
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	4019      	ands	r1, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6898      	ldr	r0, [r3, #8]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	fa00 f203 	lsl.w	r2, r0, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	08db      	lsrs	r3, r3, #3
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	3b01      	subs	r3, #1
 8003120:	2b03      	cmp	r3, #3
 8003122:	d84f      	bhi.n	80031c4 <HAL_ADC_ConfigChannel+0x28c>
 8003124:	a201      	add	r2, pc, #4	; (adr r2, 800312c <HAL_ADC_ConfigChannel+0x1f4>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	0800313d 	.word	0x0800313d
 8003130:	0800315f 	.word	0x0800315f
 8003134:	08003181 	.word	0x08003181
 8003138:	080031a3 	.word	0x080031a3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003142:	4b9a      	ldr	r3, [pc, #616]	; (80033ac <HAL_ADC_ConfigChannel+0x474>)
 8003144:	4013      	ands	r3, r2
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	0691      	lsls	r1, r2, #26
 800314c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800314e:	430a      	orrs	r2, r1
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800315a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800315c:	e07e      	b.n	800325c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003164:	4b91      	ldr	r3, [pc, #580]	; (80033ac <HAL_ADC_ConfigChannel+0x474>)
 8003166:	4013      	ands	r3, r2
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	0691      	lsls	r1, r2, #26
 800316e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003170:	430a      	orrs	r2, r1
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800317c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800317e:	e06d      	b.n	800325c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003186:	4b89      	ldr	r3, [pc, #548]	; (80033ac <HAL_ADC_ConfigChannel+0x474>)
 8003188:	4013      	ands	r3, r2
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	0691      	lsls	r1, r2, #26
 8003190:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003192:	430a      	orrs	r2, r1
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800319e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031a0:	e05c      	b.n	800325c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031a8:	4b80      	ldr	r3, [pc, #512]	; (80033ac <HAL_ADC_ConfigChannel+0x474>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	0691      	lsls	r1, r2, #26
 80031b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031b4:	430a      	orrs	r2, r1
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031c0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031c2:	e04b      	b.n	800325c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	069b      	lsls	r3, r3, #26
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d107      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031e6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	069b      	lsls	r3, r3, #26
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d107      	bne.n	800320c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800320a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003212:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	069b      	lsls	r3, r3, #26
 800321c:	429a      	cmp	r2, r3
 800321e:	d107      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800322e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003236:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	069b      	lsls	r3, r3, #26
 8003240:	429a      	cmp	r2, r3
 8003242:	d10a      	bne.n	800325a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003252:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003254:	e001      	b.n	800325a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <HAL_ADC_ConfigChannel+0x324>
      break;
 800325a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d108      	bne.n	800327c <HAL_ADC_ConfigChannel+0x344>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x344>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <HAL_ADC_ConfigChannel+0x346>
 800327c:	2300      	movs	r3, #0
 800327e:	2b00      	cmp	r3, #0
 8003280:	f040 8130 	bne.w	80034e4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d00f      	beq.n	80032ac <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2201      	movs	r2, #1
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43da      	mvns	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	400a      	ands	r2, r1
 80032a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80032aa:	e049      	b.n	8003340 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2201      	movs	r2, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b09      	cmp	r3, #9
 80032cc:	d91c      	bls.n	8003308 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6999      	ldr	r1, [r3, #24]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	3b1b      	subs	r3, #27
 80032e0:	2207      	movs	r2, #7
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	4019      	ands	r1, r3
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6898      	ldr	r0, [r3, #8]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	3b1b      	subs	r3, #27
 80032fa:	fa00 f203 	lsl.w	r2, r0, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	619a      	str	r2, [r3, #24]
 8003306:	e01b      	b.n	8003340 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6959      	ldr	r1, [r3, #20]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	2207      	movs	r2, #7
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	4019      	ands	r1, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	6898      	ldr	r0, [r3, #8]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	fa00 f203 	lsl.w	r2, r0, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003348:	d004      	beq.n	8003354 <HAL_ADC_ConfigChannel+0x41c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <HAL_ADC_ConfigChannel+0x478>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x420>
 8003354:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <HAL_ADC_ConfigChannel+0x47c>)
 8003356:	e000      	b.n	800335a <HAL_ADC_ConfigChannel+0x422>
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <HAL_ADC_ConfigChannel+0x480>)
 800335a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b10      	cmp	r3, #16
 8003362:	d105      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800336c:	2b00      	cmp	r3, #0
 800336e:	d015      	beq.n	800339c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003374:	2b11      	cmp	r3, #17
 8003376:	d105      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003388:	2b12      	cmp	r3, #18
 800338a:	f040 80ab 	bne.w	80034e4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800338e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003396:	2b00      	cmp	r3, #0
 8003398:	f040 80a4 	bne.w	80034e4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033a4:	d10a      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x484>
 80033a6:	4b02      	ldr	r3, [pc, #8]	; (80033b0 <HAL_ADC_ConfigChannel+0x478>)
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	e022      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x4ba>
 80033ac:	83fff000 	.word	0x83fff000
 80033b0:	50000100 	.word	0x50000100
 80033b4:	50000300 	.word	0x50000300
 80033b8:	50000700 	.word	0x50000700
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a4e      	ldr	r2, [pc, #312]	; (80034fc <HAL_ADC_ConfigChannel+0x5c4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d103      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x496>
 80033c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	e011      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x4ba>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a4b      	ldr	r2, [pc, #300]	; (8003500 <HAL_ADC_ConfigChannel+0x5c8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d102      	bne.n	80033de <HAL_ADC_ConfigChannel+0x4a6>
 80033d8:	4b4a      	ldr	r3, [pc, #296]	; (8003504 <HAL_ADC_ConfigChannel+0x5cc>)
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e009      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x4ba>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a48      	ldr	r2, [pc, #288]	; (8003504 <HAL_ADC_ConfigChannel+0x5cc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d102      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x4b6>
 80033e8:	4b45      	ldr	r3, [pc, #276]	; (8003500 <HAL_ADC_ConfigChannel+0x5c8>)
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e001      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x4ba>
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d108      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x4da>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x4da>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_ADC_ConfigChannel+0x4dc>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d150      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003418:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800341a:	2b00      	cmp	r3, #0
 800341c:	d010      	beq.n	8003440 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	2b01      	cmp	r3, #1
 8003428:	d107      	bne.n	800343a <HAL_ADC_ConfigChannel+0x502>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_ADC_ConfigChannel+0x502>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_ADC_ConfigChannel+0x504>
 800343a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800343c:	2b00      	cmp	r3, #0
 800343e:	d13c      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b10      	cmp	r3, #16
 8003446:	d11d      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x54c>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003450:	d118      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800345a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800345c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800345e:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <HAL_ADC_ConfigChannel+0x5d0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a2a      	ldr	r2, [pc, #168]	; (800350c <HAL_ADC_ConfigChannel+0x5d4>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	0c9a      	lsrs	r2, r3, #18
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003474:	e002      	b.n	800347c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	3b01      	subs	r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f9      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003482:	e02e      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b11      	cmp	r3, #17
 800348a:	d10b      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x56c>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003494:	d106      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800349e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034a2:	e01e      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b12      	cmp	r3, #18
 80034aa:	d11a      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80034ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034b8:	e013      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80034cc:	e00a      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80034e0:	e000      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034e2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80034ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	376c      	adds	r7, #108	; 0x6c
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	50000100 	.word	0x50000100
 8003500:	50000400 	.word	0x50000400
 8003504:	50000500 	.word	0x50000500
 8003508:	20000000 	.word	0x20000000
 800350c:	431bde83 	.word	0x431bde83

08003510 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003510:	b480      	push	{r7}
 8003512:	b099      	sub	sp, #100	; 0x64
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003528:	d102      	bne.n	8003530 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800352a:	4b6d      	ldr	r3, [pc, #436]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	e01a      	b.n	8003566 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a6a      	ldr	r2, [pc, #424]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d103      	bne.n	8003542 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800353a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	e011      	b.n	8003566 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a67      	ldr	r2, [pc, #412]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d102      	bne.n	8003552 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800354c:	4b66      	ldr	r3, [pc, #408]	; (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	e009      	b.n	8003566 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a64      	ldr	r2, [pc, #400]	; (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d102      	bne.n	8003562 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800355c:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	e001      	b.n	8003566 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0b0      	b.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800357a:	2302      	movs	r3, #2
 800357c:	e0a9      	b.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	f040 808d 	bne.w	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f040 8086 	bne.w	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ac:	d004      	beq.n	80035b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a4b      	ldr	r2, [pc, #300]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80035b8:	4b4c      	ldr	r3, [pc, #304]	; (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80035ba:	e000      	b.n	80035be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80035bc:	4b4c      	ldr	r3, [pc, #304]	; (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80035be:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d040      	beq.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80035c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035da:	035b      	lsls	r3, r3, #13
 80035dc:	430b      	orrs	r3, r1
 80035de:	431a      	orrs	r2, r3
 80035e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d108      	bne.n	8003604 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003604:	2300      	movs	r3, #0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d15c      	bne.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003626:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003628:	2b00      	cmp	r3, #0
 800362a:	d14b      	bne.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800362c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003634:	f023 030f 	bic.w	r3, r3, #15
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	6811      	ldr	r1, [r2, #0]
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	6892      	ldr	r2, [r2, #8]
 8003640:	430a      	orrs	r2, r1
 8003642:	431a      	orrs	r2, r3
 8003644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003646:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003648:	e03c      	b.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800364a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003654:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d108      	bne.n	8003676 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003676:	2300      	movs	r3, #0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d123      	bne.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	2b01      	cmp	r3, #1
 8003686:	d107      	bne.n	8003698 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003698:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800369a:	2b00      	cmp	r3, #0
 800369c:	d112      	bne.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800369e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036a6:	f023 030f 	bic.w	r3, r3, #15
 80036aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036ac:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036ae:	e009      	b.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80036c2:	e000      	b.n	80036c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80036ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80036d2:	4618      	mov	r0, r3
 80036d4:	3764      	adds	r7, #100	; 0x64
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	50000100 	.word	0x50000100
 80036e4:	50000400 	.word	0x50000400
 80036e8:	50000500 	.word	0x50000500
 80036ec:	50000300 	.word	0x50000300
 80036f0:	50000700 	.word	0x50000700

080036f4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800370a:	2b00      	cmp	r3, #0
 800370c:	d126      	bne.n	800375c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003724:	2b00      	cmp	r3, #0
 8003726:	d115      	bne.n	8003754 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800372c:	2b00      	cmp	r3, #0
 800372e:	d111      	bne.n	8003754 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d105      	bne.n	8003754 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff f8d5 	bl	8002904 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800375a:	e004      	b.n	8003766 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	4798      	blx	r3
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7ff f8cb 	bl	8002918 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	f043 0204 	orr.w	r2, r3, #4
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7ff f8bb 	bl	800292c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d108      	bne.n	80037ec <ADC_Enable+0x2c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <ADC_Enable+0x2c>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <ADC_Enable+0x2e>
 80037ec:	2300      	movs	r3, #0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d143      	bne.n	800387a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	4b22      	ldr	r3, [pc, #136]	; (8003884 <ADC_Enable+0xc4>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00d      	beq.n	800381c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f043 0210 	orr.w	r2, r3, #16
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	f043 0201 	orr.w	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e02f      	b.n	800387c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800382c:	f7ff f85e 	bl	80028ec <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003832:	e01b      	b.n	800386c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003834:	f7ff f85a 	bl	80028ec <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d914      	bls.n	800386c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d00d      	beq.n	800386c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f043 0210 	orr.w	r2, r3, #16
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	f043 0201 	orr.w	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e007      	b.n	800387c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b01      	cmp	r3, #1
 8003878:	d1dc      	bne.n	8003834 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	8000003f 	.word	0x8000003f

08003888 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d108      	bne.n	80038b4 <ADC_Disable+0x2c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <ADC_Disable+0x2c>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <ADC_Disable+0x2e>
 80038b4:	2300      	movs	r3, #0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d047      	beq.n	800394a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 030d 	and.w	r3, r3, #13
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d10f      	bne.n	80038e8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0202 	orr.w	r2, r2, #2
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2203      	movs	r2, #3
 80038de:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80038e0:	f7ff f804 	bl	80028ec <HAL_GetTick>
 80038e4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80038e6:	e029      	b.n	800393c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	f043 0210 	orr.w	r2, r3, #16
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f043 0201 	orr.w	r2, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e023      	b.n	800394c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003904:	f7fe fff2 	bl	80028ec <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d914      	bls.n	800393c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10d      	bne.n	800393c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f043 0210 	orr.w	r2, r3, #16
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	f043 0201 	orr.w	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e007      	b.n	800394c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b01      	cmp	r3, #1
 8003948:	d0dc      	beq.n	8003904 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0ed      	b.n	8003b42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fe f910 	bl	8001b98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003988:	f7fe ffb0 	bl	80028ec <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800398e:	e012      	b.n	80039b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003990:	f7fe ffac 	bl	80028ec <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b0a      	cmp	r3, #10
 800399c:	d90b      	bls.n	80039b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2205      	movs	r2, #5
 80039ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e0c5      	b.n	8003b42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0e5      	beq.n	8003990 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0202 	bic.w	r2, r2, #2
 80039d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039d4:	f7fe ff8a 	bl	80028ec <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80039da:	e012      	b.n	8003a02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039dc:	f7fe ff86 	bl	80028ec <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b0a      	cmp	r3, #10
 80039e8:	d90b      	bls.n	8003a02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2205      	movs	r2, #5
 80039fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e09f      	b.n	8003b42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e5      	bne.n	80039dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7e1b      	ldrb	r3, [r3, #24]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d108      	bne.n	8003a2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e007      	b.n	8003a3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7e5b      	ldrb	r3, [r3, #25]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d108      	bne.n	8003a54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e007      	b.n	8003a64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7e9b      	ldrb	r3, [r3, #26]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d108      	bne.n	8003a7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0220 	orr.w	r2, r2, #32
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e007      	b.n	8003a8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0220 	bic.w	r2, r2, #32
 8003a8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	7edb      	ldrb	r3, [r3, #27]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d108      	bne.n	8003aa8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0210 	bic.w	r2, r2, #16
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	e007      	b.n	8003ab8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0210 	orr.w	r2, r2, #16
 8003ab6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	7f1b      	ldrb	r3, [r3, #28]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d108      	bne.n	8003ad2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0208 	orr.w	r2, r2, #8
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e007      	b.n	8003ae2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0208 	bic.w	r2, r2, #8
 8003ae0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	7f5b      	ldrb	r3, [r3, #29]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d108      	bne.n	8003afc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0204 	orr.w	r2, r2, #4
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e007      	b.n	8003b0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0204 	bic.w	r2, r2, #4
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	ea42 0103 	orr.w	r1, r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	1e5a      	subs	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b087      	sub	sp, #28
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b60:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d003      	beq.n	8003b70 <HAL_CAN_ConfigFilter+0x26>
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	f040 80aa 	bne.w	8003cc4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b76:	f043 0201 	orr.w	r2, r3, #1
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	2201      	movs	r2, #1
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d123      	bne.n	8003bf2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	401a      	ands	r2, r3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003bcc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	3248      	adds	r2, #72	; 0x48
 8003bd2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003be6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003be8:	6979      	ldr	r1, [r7, #20]
 8003bea:	3348      	adds	r3, #72	; 0x48
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	440b      	add	r3, r1
 8003bf0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d122      	bne.n	8003c40 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c1a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	3248      	adds	r2, #72	; 0x48
 8003c20:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c34:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c36:	6979      	ldr	r1, [r7, #20]
 8003c38:	3348      	adds	r3, #72	; 0x48
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	440b      	add	r3, r1
 8003c3e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d109      	bne.n	8003c5c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	401a      	ands	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003c5a:	e007      	b.n	8003c6c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	431a      	orrs	r2, r3
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	401a      	ands	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003c86:	e007      	b.n	8003c98 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d107      	bne.n	8003cb0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cb6:	f023 0201 	bic.w	r2, r3, #1
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e006      	b.n	8003cd2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d12e      	bne.n	8003d50 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0201 	bic.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d0a:	f7fe fdef 	bl	80028ec <HAL_GetTick>
 8003d0e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d10:	e012      	b.n	8003d38 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d12:	f7fe fdeb 	bl	80028ec <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b0a      	cmp	r3, #10
 8003d1e:	d90b      	bls.n	8003d38 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2205      	movs	r2, #5
 8003d30:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e012      	b.n	8003d5e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e5      	bne.n	8003d12 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e006      	b.n	8003d5e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b089      	sub	sp, #36	; 0x24
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d84:	7ffb      	ldrb	r3, [r7, #31]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d003      	beq.n	8003d92 <HAL_CAN_AddTxMessage+0x2c>
 8003d8a:	7ffb      	ldrb	r3, [r7, #31]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	f040 80b8 	bne.w	8003f02 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80a0 	beq.w	8003ef2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	0e1b      	lsrs	r3, r3, #24
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d907      	bls.n	8003dd2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e09e      	b.n	8003f10 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10d      	bne.n	8003e00 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003dee:	68f9      	ldr	r1, [r7, #12]
 8003df0:	6809      	ldr	r1, [r1, #0]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	3318      	adds	r3, #24
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	440b      	add	r3, r1
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e00f      	b.n	8003e20 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e0a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e10:	68f9      	ldr	r1, [r7, #12]
 8003e12:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003e14:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	3318      	adds	r3, #24
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	440b      	add	r3, r1
 8003e1e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6819      	ldr	r1, [r3, #0]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3318      	adds	r3, #24
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	440b      	add	r3, r1
 8003e30:	3304      	adds	r3, #4
 8003e32:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	7d1b      	ldrb	r3, [r3, #20]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d111      	bne.n	8003e60 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3318      	adds	r3, #24
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	4413      	add	r3, r2
 8003e48:	3304      	adds	r3, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	6811      	ldr	r1, [r2, #0]
 8003e50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	3318      	adds	r3, #24
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3307      	adds	r3, #7
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	061a      	lsls	r2, r3, #24
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3306      	adds	r3, #6
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	041b      	lsls	r3, r3, #16
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3305      	adds	r3, #5
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	3204      	adds	r2, #4
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	4610      	mov	r0, r2
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	6811      	ldr	r1, [r2, #0]
 8003e88:	ea43 0200 	orr.w	r2, r3, r0
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	440b      	add	r3, r1
 8003e92:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003e96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3303      	adds	r3, #3
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	061a      	lsls	r2, r3, #24
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3302      	adds	r3, #2
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	041b      	lsls	r3, r3, #16
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3301      	adds	r3, #1
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	7812      	ldrb	r2, [r2, #0]
 8003eb8:	4610      	mov	r0, r2
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	6811      	ldr	r1, [r2, #0]
 8003ebe:	ea43 0200 	orr.w	r2, r3, r0
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003ecc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	3318      	adds	r3, #24
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	4413      	add	r3, r2
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	6811      	ldr	r1, [r2, #0]
 8003ee0:	f043 0201 	orr.w	r2, r3, #1
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	3318      	adds	r3, #24
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	440b      	add	r3, r1
 8003eec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e00e      	b.n	8003f10 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e006      	b.n	8003f10 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
  }
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3724      	adds	r7, #36	; 0x24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f30:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d003      	beq.n	8003f40 <HAL_CAN_GetRxMessage+0x24>
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	f040 80f3 	bne.w	8004126 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10e      	bne.n	8003f64 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d116      	bne.n	8003f82 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0e7      	b.n	8004134 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d107      	bne.n	8003f82 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e0d8      	b.n	8004134 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	331b      	adds	r3, #27
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	4413      	add	r3, r2
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0204 	and.w	r2, r3, #4
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10c      	bne.n	8003fba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	331b      	adds	r3, #27
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	4413      	add	r3, r2
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	0d5b      	lsrs	r3, r3, #21
 8003fb0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e00b      	b.n	8003fd2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	331b      	adds	r3, #27
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	4413      	add	r3, r2
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	08db      	lsrs	r3, r3, #3
 8003fca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	331b      	adds	r3, #27
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	4413      	add	r3, r2
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0202 	and.w	r2, r3, #2
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	331b      	adds	r3, #27
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 020f 	and.w	r2, r3, #15
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	331b      	adds	r3, #27
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	4413      	add	r3, r2
 800400c:	3304      	adds	r3, #4
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	b2da      	uxtb	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	331b      	adds	r3, #27
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	4413      	add	r3, r2
 8004024:	3304      	adds	r3, #4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	4413      	add	r3, r2
 800403a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	4413      	add	r3, r2
 8004050:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	0a1a      	lsrs	r2, r3, #8
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	4413      	add	r3, r2
 800406a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	0c1a      	lsrs	r2, r3, #16
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	3302      	adds	r3, #2
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	4413      	add	r3, r2
 8004084:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	0e1a      	lsrs	r2, r3, #24
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	3303      	adds	r3, #3
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	4413      	add	r3, r2
 800409e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	3304      	adds	r3, #4
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	0a1a      	lsrs	r2, r3, #8
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	3305      	adds	r3, #5
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	0c1a      	lsrs	r2, r3, #16
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	3306      	adds	r3, #6
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	0e1a      	lsrs	r2, r3, #24
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	3307      	adds	r3, #7
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d108      	bne.n	8004112 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0220 	orr.w	r2, r2, #32
 800410e:	60da      	str	r2, [r3, #12]
 8004110:	e007      	b.n	8004122 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0220 	orr.w	r2, r2, #32
 8004120:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	e006      	b.n	8004134 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
  }
}
 8004134:	4618      	mov	r0, r3
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004150:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d002      	beq.n	800415e <HAL_CAN_ActivateNotification+0x1e>
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d109      	bne.n	8004172 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6959      	ldr	r1, [r3, #20]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e006      	b.n	8004180 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	; 0x28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004194:	2300      	movs	r3, #0
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d07c      	beq.n	80042cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d023      	beq.n	8004224 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2201      	movs	r2, #1
 80041e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f983 	bl	80044fa <HAL_CAN_TxMailbox0CompleteCallback>
 80041f4:	e016      	b.n	8004224 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d004      	beq.n	800420a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
 8004208:	e00c      	b.n	8004224 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
 800421c:	e002      	b.n	8004224 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f989 	bl	8004536 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d024      	beq.n	8004278 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004236:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f963 	bl	800450e <HAL_CAN_TxMailbox1CompleteCallback>
 8004248:	e016      	b.n	8004278 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004250:	2b00      	cmp	r3, #0
 8004252:	d004      	beq.n	800425e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
 800425c:	e00c      	b.n	8004278 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
 8004270:	e002      	b.n	8004278 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f969 	bl	800454a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d024      	beq.n	80042cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800428a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f943 	bl	8004522 <HAL_CAN_TxMailbox2CompleteCallback>
 800429c:	e016      	b.n	80042cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d004      	beq.n	80042b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
 80042b0:	e00c      	b.n	80042cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
 80042c4:	e002      	b.n	80042cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f949 	bl	800455e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00c      	beq.n	80042f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f003 0310 	and.w	r3, r3, #16
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2210      	movs	r2, #16
 80042ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d006      	beq.n	8004312 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2208      	movs	r2, #8
 800430a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f930 	bl	8004572 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f00c f85a 	bl	80103e4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00c      	beq.n	8004354 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800434a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2210      	movs	r2, #16
 8004352:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d006      	beq.n	8004376 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2208      	movs	r2, #8
 800436e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f912 	bl	800459a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	d009      	beq.n	8004394 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8f9 	bl	8004586 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d006      	beq.n	80043b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2210      	movs	r2, #16
 80043ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f8fc 	bl	80045ae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00b      	beq.n	80043d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d006      	beq.n	80043d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2208      	movs	r2, #8
 80043d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f8f5 	bl	80045c2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d07b      	beq.n	80044da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d072      	beq.n	80044d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	f043 0302 	orr.w	r3, r3, #2
 8004422:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004446:	2b00      	cmp	r3, #0
 8004448:	d043      	beq.n	80044d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004450:	2b00      	cmp	r3, #0
 8004452:	d03e      	beq.n	80044d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800445a:	2b60      	cmp	r3, #96	; 0x60
 800445c:	d02b      	beq.n	80044b6 <HAL_CAN_IRQHandler+0x32a>
 800445e:	2b60      	cmp	r3, #96	; 0x60
 8004460:	d82e      	bhi.n	80044c0 <HAL_CAN_IRQHandler+0x334>
 8004462:	2b50      	cmp	r3, #80	; 0x50
 8004464:	d022      	beq.n	80044ac <HAL_CAN_IRQHandler+0x320>
 8004466:	2b50      	cmp	r3, #80	; 0x50
 8004468:	d82a      	bhi.n	80044c0 <HAL_CAN_IRQHandler+0x334>
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	d019      	beq.n	80044a2 <HAL_CAN_IRQHandler+0x316>
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d826      	bhi.n	80044c0 <HAL_CAN_IRQHandler+0x334>
 8004472:	2b30      	cmp	r3, #48	; 0x30
 8004474:	d010      	beq.n	8004498 <HAL_CAN_IRQHandler+0x30c>
 8004476:	2b30      	cmp	r3, #48	; 0x30
 8004478:	d822      	bhi.n	80044c0 <HAL_CAN_IRQHandler+0x334>
 800447a:	2b10      	cmp	r3, #16
 800447c:	d002      	beq.n	8004484 <HAL_CAN_IRQHandler+0x2f8>
 800447e:	2b20      	cmp	r3, #32
 8004480:	d005      	beq.n	800448e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004482:	e01d      	b.n	80044c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	f043 0308 	orr.w	r3, r3, #8
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800448c:	e019      	b.n	80044c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	f043 0310 	orr.w	r3, r3, #16
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004496:	e014      	b.n	80044c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	f043 0320 	orr.w	r3, r3, #32
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044a0:	e00f      	b.n	80044c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044aa:	e00a      	b.n	80044c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044b4:	e005      	b.n	80044c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044be:	e000      	b.n	80044c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80044c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699a      	ldr	r2, [r3, #24]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80044d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2204      	movs	r2, #4
 80044d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f872 	bl	80045d6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80044f2:	bf00      	nop
 80044f4:	3728      	adds	r7, #40	; 0x28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <__NVIC_SetPriorityGrouping+0x44>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004608:	4013      	ands	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800461c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800461e:	4a04      	ldr	r2, [pc, #16]	; (8004630 <__NVIC_SetPriorityGrouping+0x44>)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	60d3      	str	r3, [r2, #12]
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004638:	4b04      	ldr	r3, [pc, #16]	; (800464c <__NVIC_GetPriorityGrouping+0x18>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	0a1b      	lsrs	r3, r3, #8
 800463e:	f003 0307 	and.w	r3, r3, #7
}
 8004642:	4618      	mov	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800465a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465e:	2b00      	cmp	r3, #0
 8004660:	db0b      	blt.n	800467a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	f003 021f 	and.w	r2, r3, #31
 8004668:	4907      	ldr	r1, [pc, #28]	; (8004688 <__NVIC_EnableIRQ+0x38>)
 800466a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	2001      	movs	r0, #1
 8004672:	fa00 f202 	lsl.w	r2, r0, r2
 8004676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	e000e100 	.word	0xe000e100

0800468c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	6039      	str	r1, [r7, #0]
 8004696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469c:	2b00      	cmp	r3, #0
 800469e:	db0a      	blt.n	80046b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	490c      	ldr	r1, [pc, #48]	; (80046d8 <__NVIC_SetPriority+0x4c>)
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	0112      	lsls	r2, r2, #4
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	440b      	add	r3, r1
 80046b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046b4:	e00a      	b.n	80046cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	4908      	ldr	r1, [pc, #32]	; (80046dc <__NVIC_SetPriority+0x50>)
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	3b04      	subs	r3, #4
 80046c4:	0112      	lsls	r2, r2, #4
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	440b      	add	r3, r1
 80046ca:	761a      	strb	r2, [r3, #24]
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	e000e100 	.word	0xe000e100
 80046dc:	e000ed00 	.word	0xe000ed00

080046e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b089      	sub	sp, #36	; 0x24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f1c3 0307 	rsb	r3, r3, #7
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	bf28      	it	cs
 80046fe:	2304      	movcs	r3, #4
 8004700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	3304      	adds	r3, #4
 8004706:	2b06      	cmp	r3, #6
 8004708:	d902      	bls.n	8004710 <NVIC_EncodePriority+0x30>
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3b03      	subs	r3, #3
 800470e:	e000      	b.n	8004712 <NVIC_EncodePriority+0x32>
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004714:	f04f 32ff 	mov.w	r2, #4294967295
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43da      	mvns	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	401a      	ands	r2, r3
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004728:	f04f 31ff 	mov.w	r1, #4294967295
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	fa01 f303 	lsl.w	r3, r1, r3
 8004732:	43d9      	mvns	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004738:	4313      	orrs	r3, r2
         );
}
 800473a:	4618      	mov	r0, r3
 800473c:	3724      	adds	r7, #36	; 0x24
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff ff4c 	bl	80045ec <__NVIC_SetPriorityGrouping>
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800476e:	f7ff ff61 	bl	8004634 <__NVIC_GetPriorityGrouping>
 8004772:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	68b9      	ldr	r1, [r7, #8]
 8004778:	6978      	ldr	r0, [r7, #20]
 800477a:	f7ff ffb1 	bl	80046e0 <NVIC_EncodePriority>
 800477e:	4602      	mov	r2, r0
 8004780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004784:	4611      	mov	r1, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff ff80 	bl	800468c <__NVIC_SetPriority>
}
 800478c:	bf00      	nop
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800479e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff ff54 	bl	8004650 <__NVIC_EnableIRQ>
}
 80047a8:	bf00      	nop
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e054      	b.n	800486c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	7f5b      	ldrb	r3, [r3, #29]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fd fa4e 	bl	8001c74 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	791b      	ldrb	r3, [r3, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10c      	bne.n	8004800 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a22      	ldr	r2, [pc, #136]	; (8004874 <HAL_CRC_Init+0xc4>)
 80047ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0218 	bic.w	r2, r2, #24
 80047fc:	609a      	str	r2, [r3, #8]
 80047fe:	e00c      	b.n	800481a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6899      	ldr	r1, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	461a      	mov	r2, r3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f834 	bl	8004878 <HAL_CRCEx_Polynomial_Set>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e028      	b.n	800486c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	795b      	ldrb	r3, [r3, #5]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d105      	bne.n	800482e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f04f 32ff 	mov.w	r2, #4294967295
 800482a:	611a      	str	r2, [r3, #16]
 800482c:	e004      	b.n	8004838 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6912      	ldr	r2, [r2, #16]
 8004836:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	04c11db7 	.word	0x04c11db7

08004878 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004888:	231f      	movs	r3, #31
 800488a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800488c:	bf00      	nop
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1e5a      	subs	r2, r3, #1
 8004892:	613a      	str	r2, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <HAL_CRCEx_Polynomial_Set+0x34>
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0f0      	beq.n	800488e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b18      	cmp	r3, #24
 80048b0:	d846      	bhi.n	8004940 <HAL_CRCEx_Polynomial_Set+0xc8>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	08004947 	.word	0x08004947
 80048bc:	08004941 	.word	0x08004941
 80048c0:	08004941 	.word	0x08004941
 80048c4:	08004941 	.word	0x08004941
 80048c8:	08004941 	.word	0x08004941
 80048cc:	08004941 	.word	0x08004941
 80048d0:	08004941 	.word	0x08004941
 80048d4:	08004941 	.word	0x08004941
 80048d8:	08004935 	.word	0x08004935
 80048dc:	08004941 	.word	0x08004941
 80048e0:	08004941 	.word	0x08004941
 80048e4:	08004941 	.word	0x08004941
 80048e8:	08004941 	.word	0x08004941
 80048ec:	08004941 	.word	0x08004941
 80048f0:	08004941 	.word	0x08004941
 80048f4:	08004941 	.word	0x08004941
 80048f8:	08004929 	.word	0x08004929
 80048fc:	08004941 	.word	0x08004941
 8004900:	08004941 	.word	0x08004941
 8004904:	08004941 	.word	0x08004941
 8004908:	08004941 	.word	0x08004941
 800490c:	08004941 	.word	0x08004941
 8004910:	08004941 	.word	0x08004941
 8004914:	08004941 	.word	0x08004941
 8004918:	0800491d 	.word	0x0800491d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b06      	cmp	r3, #6
 8004920:	d913      	bls.n	800494a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004926:	e010      	b.n	800494a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b07      	cmp	r3, #7
 800492c:	d90f      	bls.n	800494e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004932:	e00c      	b.n	800494e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b0f      	cmp	r3, #15
 8004938:	d90b      	bls.n	8004952 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800493e:	e008      	b.n	8004952 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	75fb      	strb	r3, [r7, #23]
      break;
 8004944:	e006      	b.n	8004954 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004946:	bf00      	nop
 8004948:	e004      	b.n	8004954 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004952:	bf00      	nop
  }
  if (status == HAL_OK)
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f023 0118 	bic.w	r1, r3, #24
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	430a      	orrs	r2, r1
 8004974:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004976:	7dfb      	ldrb	r3, [r7, #23]
}
 8004978:	4618      	mov	r0, r3
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e037      	b.n	8004a0a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80049b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80049b4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80049be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f941 	bl	8004c74 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}  
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b086      	sub	sp, #24
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
 8004a1e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_DMA_Start_IT+0x20>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e04a      	b.n	8004ac8 <HAL_DMA_Start_IT+0xb6>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d13a      	bne.n	8004aba <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f8d4 	bl	8004c16 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d008      	beq.n	8004a88 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 020e 	orr.w	r2, r2, #14
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e00f      	b.n	8004aa8 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 020a 	orr.w	r2, r2, #10
 8004a96:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0204 	bic.w	r2, r2, #4
 8004aa6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	e005      	b.n	8004ac6 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	2204      	movs	r2, #4
 8004aee:	409a      	lsls	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d024      	beq.n	8004b42 <HAL_DMA_IRQHandler+0x72>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d01f      	beq.n	8004b42 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d107      	bne.n	8004b20 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0204 	bic.w	r2, r2, #4
 8004b1e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b28:	2104      	movs	r1, #4
 8004b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d06a      	beq.n	8004c0e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004b40:	e065      	b.n	8004c0e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2202      	movs	r2, #2
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d02c      	beq.n	8004bac <HAL_DMA_IRQHandler+0xdc>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d027      	beq.n	8004bac <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 020a 	bic.w	r2, r2, #10
 8004b78:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b90:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d035      	beq.n	8004c0e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004baa:	e030      	b.n	8004c0e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d028      	beq.n	8004c0e <HAL_DMA_IRQHandler+0x13e>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d023      	beq.n	8004c0e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 020e 	bic.w	r2, r2, #14
 8004bd4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	2101      	movs	r1, #1
 8004be0:	fa01 f202 	lsl.w	r2, r1, r2
 8004be4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d004      	beq.n	8004c0e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	4798      	blx	r3
    }
  }
}  
 8004c0c:	e7ff      	b.n	8004c0e <HAL_DMA_IRQHandler+0x13e>
 8004c0e:	bf00      	nop
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b085      	sub	sp, #20
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c32:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	d108      	bne.n	8004c56 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c54:	e007      	b.n	8004c66 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	60da      	str	r2, [r3, #12]
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <DMA_CalcBaseAndBitshift+0x60>)
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d80f      	bhi.n	8004ca8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <DMA_CalcBaseAndBitshift+0x64>)
 8004c90:	4413      	add	r3, r2
 8004c92:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <DMA_CalcBaseAndBitshift+0x68>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	091b      	lsrs	r3, r3, #4
 8004c9a:	009a      	lsls	r2, r3, #2
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a0f      	ldr	r2, [pc, #60]	; (8004ce0 <DMA_CalcBaseAndBitshift+0x6c>)
 8004ca4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004ca6:	e00e      	b.n	8004cc6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <DMA_CalcBaseAndBitshift+0x70>)
 8004cb0:	4413      	add	r3, r2
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <DMA_CalcBaseAndBitshift+0x68>)
 8004cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	009a      	lsls	r2, r3, #2
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <DMA_CalcBaseAndBitshift+0x74>)
 8004cc4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40020407 	.word	0x40020407
 8004cd8:	bffdfff8 	.word	0xbffdfff8
 8004cdc:	cccccccd 	.word	0xcccccccd
 8004ce0:	40020000 	.word	0x40020000
 8004ce4:	bffdfbf8 	.word	0xbffdfbf8
 8004ce8:	40020400 	.word	0x40020400

08004cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cfa:	e154      	b.n	8004fa6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	2101      	movs	r1, #1
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	fa01 f303 	lsl.w	r3, r1, r3
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 8146 	beq.w	8004fa0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d005      	beq.n	8004d2c <HAL_GPIO_Init+0x40>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d130      	bne.n	8004d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	2203      	movs	r2, #3
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d62:	2201      	movs	r2, #1
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	091b      	lsrs	r3, r3, #4
 8004d78:	f003 0201 	and.w	r2, r3, #1
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d017      	beq.n	8004dca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	2203      	movs	r2, #3
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43db      	mvns	r3, r3
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4013      	ands	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d123      	bne.n	8004e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	08da      	lsrs	r2, r3, #3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3208      	adds	r2, #8
 8004dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	220f      	movs	r2, #15
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43db      	mvns	r3, r3
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4013      	ands	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	08da      	lsrs	r2, r3, #3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3208      	adds	r2, #8
 8004e18:	6939      	ldr	r1, [r7, #16]
 8004e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	2203      	movs	r2, #3
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4013      	ands	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 0203 	and.w	r2, r3, #3
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 80a0 	beq.w	8004fa0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e60:	4b58      	ldr	r3, [pc, #352]	; (8004fc4 <HAL_GPIO_Init+0x2d8>)
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	4a57      	ldr	r2, [pc, #348]	; (8004fc4 <HAL_GPIO_Init+0x2d8>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	6193      	str	r3, [r2, #24]
 8004e6c:	4b55      	ldr	r3, [pc, #340]	; (8004fc4 <HAL_GPIO_Init+0x2d8>)
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e78:	4a53      	ldr	r2, [pc, #332]	; (8004fc8 <HAL_GPIO_Init+0x2dc>)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	089b      	lsrs	r3, r3, #2
 8004e7e:	3302      	adds	r3, #2
 8004e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	220f      	movs	r2, #15
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ea2:	d019      	beq.n	8004ed8 <HAL_GPIO_Init+0x1ec>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a49      	ldr	r2, [pc, #292]	; (8004fcc <HAL_GPIO_Init+0x2e0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d013      	beq.n	8004ed4 <HAL_GPIO_Init+0x1e8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a48      	ldr	r2, [pc, #288]	; (8004fd0 <HAL_GPIO_Init+0x2e4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00d      	beq.n	8004ed0 <HAL_GPIO_Init+0x1e4>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a47      	ldr	r2, [pc, #284]	; (8004fd4 <HAL_GPIO_Init+0x2e8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d007      	beq.n	8004ecc <HAL_GPIO_Init+0x1e0>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a46      	ldr	r2, [pc, #280]	; (8004fd8 <HAL_GPIO_Init+0x2ec>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d101      	bne.n	8004ec8 <HAL_GPIO_Init+0x1dc>
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	e008      	b.n	8004eda <HAL_GPIO_Init+0x1ee>
 8004ec8:	2305      	movs	r3, #5
 8004eca:	e006      	b.n	8004eda <HAL_GPIO_Init+0x1ee>
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e004      	b.n	8004eda <HAL_GPIO_Init+0x1ee>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e002      	b.n	8004eda <HAL_GPIO_Init+0x1ee>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <HAL_GPIO_Init+0x1ee>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	f002 0203 	and.w	r2, r2, #3
 8004ee0:	0092      	lsls	r2, r2, #2
 8004ee2:	4093      	lsls	r3, r2
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004eea:	4937      	ldr	r1, [pc, #220]	; (8004fc8 <HAL_GPIO_Init+0x2dc>)
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	089b      	lsrs	r3, r3, #2
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ef8:	4b38      	ldr	r3, [pc, #224]	; (8004fdc <HAL_GPIO_Init+0x2f0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	43db      	mvns	r3, r3
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4013      	ands	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004f1c:	4a2f      	ldr	r2, [pc, #188]	; (8004fdc <HAL_GPIO_Init+0x2f0>)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f22:	4b2e      	ldr	r3, [pc, #184]	; (8004fdc <HAL_GPIO_Init+0x2f0>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f46:	4a25      	ldr	r2, [pc, #148]	; (8004fdc <HAL_GPIO_Init+0x2f0>)
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f4c:	4b23      	ldr	r3, [pc, #140]	; (8004fdc <HAL_GPIO_Init+0x2f0>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	43db      	mvns	r3, r3
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f70:	4a1a      	ldr	r2, [pc, #104]	; (8004fdc <HAL_GPIO_Init+0x2f0>)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f76:	4b19      	ldr	r3, [pc, #100]	; (8004fdc <HAL_GPIO_Init+0x2f0>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4013      	ands	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f9a:	4a10      	ldr	r2, [pc, #64]	; (8004fdc <HAL_GPIO_Init+0x2f0>)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f47f aea3 	bne.w	8004cfc <HAL_GPIO_Init+0x10>
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40010000 	.word	0x40010000
 8004fcc:	48000400 	.word	0x48000400
 8004fd0:	48000800 	.word	0x48000800
 8004fd4:	48000c00 	.word	0x48000c00
 8004fd8:	48001000 	.word	0x48001000
 8004fdc:	40010400 	.word	0x40010400

08004fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	807b      	strh	r3, [r7, #2]
 8004fec:	4613      	mov	r3, r2
 8004fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ff0:	787b      	ldrb	r3, [r7, #1]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ff6:	887a      	ldrh	r2, [r7, #2]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ffc:	e002      	b.n	8005004 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ffe:	887a      	ldrh	r2, [r7, #2]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005022:	887a      	ldrh	r2, [r7, #2]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4013      	ands	r3, r2
 8005028:	041a      	lsls	r2, r3, #16
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	43d9      	mvns	r1, r3
 800502e:	887b      	ldrh	r3, [r7, #2]
 8005030:	400b      	ands	r3, r1
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	619a      	str	r2, [r3, #24]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e081      	b.n	800515a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fd f882 	bl	8002174 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2224      	movs	r2, #36	; 0x24
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0201 	bic.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005094:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d107      	bne.n	80050be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	e006      	b.n	80050cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80050ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d104      	bne.n	80050de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005100:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69d9      	ldr	r1, [r3, #28]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1a      	ldr	r2, [r3, #32]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	607a      	str	r2, [r7, #4]
 800516e:	461a      	mov	r2, r3
 8005170:	460b      	mov	r3, r1
 8005172:	817b      	strh	r3, [r7, #10]
 8005174:	4613      	mov	r3, r2
 8005176:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b20      	cmp	r3, #32
 8005182:	f040 80da 	bne.w	800533a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_I2C_Master_Transmit+0x30>
 8005190:	2302      	movs	r3, #2
 8005192:	e0d3      	b.n	800533c <HAL_I2C_Master_Transmit+0x1d8>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800519c:	f7fd fba6 	bl	80028ec <HAL_GetTick>
 80051a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	2319      	movs	r3, #25
 80051a8:	2201      	movs	r2, #1
 80051aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 f9e6 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e0be      	b.n	800533c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2221      	movs	r2, #33	; 0x21
 80051c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2210      	movs	r2, #16
 80051ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	893a      	ldrh	r2, [r7, #8]
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2bff      	cmp	r3, #255	; 0xff
 80051ee:	d90e      	bls.n	800520e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	22ff      	movs	r2, #255	; 0xff
 80051f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	8979      	ldrh	r1, [r7, #10]
 80051fe:	4b51      	ldr	r3, [pc, #324]	; (8005344 <HAL_I2C_Master_Transmit+0x1e0>)
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fb58 	bl	80058bc <I2C_TransferConfig>
 800520c:	e06c      	b.n	80052e8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521c:	b2da      	uxtb	r2, r3
 800521e:	8979      	ldrh	r1, [r7, #10]
 8005220:	4b48      	ldr	r3, [pc, #288]	; (8005344 <HAL_I2C_Master_Transmit+0x1e0>)
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fb47 	bl	80058bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800522e:	e05b      	b.n	80052e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	6a39      	ldr	r1, [r7, #32]
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f9e3 	bl	8005600 <I2C_WaitOnTXISFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e07b      	b.n	800533c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	781a      	ldrb	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d034      	beq.n	80052e8 <HAL_I2C_Master_Transmit+0x184>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005282:	2b00      	cmp	r3, #0
 8005284:	d130      	bne.n	80052e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	2200      	movs	r2, #0
 800528e:	2180      	movs	r1, #128	; 0x80
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f975 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e04d      	b.n	800533c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2bff      	cmp	r3, #255	; 0xff
 80052a8:	d90e      	bls.n	80052c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	22ff      	movs	r2, #255	; 0xff
 80052ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	8979      	ldrh	r1, [r7, #10]
 80052b8:	2300      	movs	r3, #0
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 fafb 	bl	80058bc <I2C_TransferConfig>
 80052c6:	e00f      	b.n	80052e8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	8979      	ldrh	r1, [r7, #10]
 80052da:	2300      	movs	r3, #0
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 faea 	bl	80058bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d19e      	bne.n	8005230 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	6a39      	ldr	r1, [r7, #32]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f9c2 	bl	8005680 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e01a      	b.n	800533c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2220      	movs	r2, #32
 800530c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6859      	ldr	r1, [r3, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_I2C_Master_Transmit+0x1e4>)
 800531a:	400b      	ands	r3, r1
 800531c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e000      	b.n	800533c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800533a:	2302      	movs	r3, #2
  }
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	80002000 	.word	0x80002000
 8005348:	fe00e800 	.word	0xfe00e800

0800534c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	607a      	str	r2, [r7, #4]
 8005356:	461a      	mov	r2, r3
 8005358:	460b      	mov	r3, r1
 800535a:	817b      	strh	r3, [r7, #10]
 800535c:	4613      	mov	r3, r2
 800535e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b20      	cmp	r3, #32
 800536a:	f040 80db 	bne.w	8005524 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_I2C_Master_Receive+0x30>
 8005378:	2302      	movs	r3, #2
 800537a:	e0d4      	b.n	8005526 <HAL_I2C_Master_Receive+0x1da>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005384:	f7fd fab2 	bl	80028ec <HAL_GetTick>
 8005388:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	2319      	movs	r3, #25
 8005390:	2201      	movs	r2, #1
 8005392:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f8f2 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e0bf      	b.n	8005526 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2222      	movs	r2, #34	; 0x22
 80053aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2210      	movs	r2, #16
 80053b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	893a      	ldrh	r2, [r7, #8]
 80053c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2bff      	cmp	r3, #255	; 0xff
 80053d6:	d90e      	bls.n	80053f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	22ff      	movs	r2, #255	; 0xff
 80053dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	8979      	ldrh	r1, [r7, #10]
 80053e6:	4b52      	ldr	r3, [pc, #328]	; (8005530 <HAL_I2C_Master_Receive+0x1e4>)
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 fa64 	bl	80058bc <I2C_TransferConfig>
 80053f4:	e06d      	b.n	80054d2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005404:	b2da      	uxtb	r2, r3
 8005406:	8979      	ldrh	r1, [r7, #10]
 8005408:	4b49      	ldr	r3, [pc, #292]	; (8005530 <HAL_I2C_Master_Receive+0x1e4>)
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fa53 	bl	80058bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005416:	e05c      	b.n	80054d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	6a39      	ldr	r1, [r7, #32]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f96b 	bl	80056f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e07c      	b.n	8005526 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d034      	beq.n	80054d2 <HAL_I2C_Master_Receive+0x186>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546c:	2b00      	cmp	r3, #0
 800546e:	d130      	bne.n	80054d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	2200      	movs	r2, #0
 8005478:	2180      	movs	r1, #128	; 0x80
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f880 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e04d      	b.n	8005526 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548e:	b29b      	uxth	r3, r3
 8005490:	2bff      	cmp	r3, #255	; 0xff
 8005492:	d90e      	bls.n	80054b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	22ff      	movs	r2, #255	; 0xff
 8005498:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	8979      	ldrh	r1, [r7, #10]
 80054a2:	2300      	movs	r3, #0
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 fa06 	bl	80058bc <I2C_TransferConfig>
 80054b0:	e00f      	b.n	80054d2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	8979      	ldrh	r1, [r7, #10]
 80054c4:	2300      	movs	r3, #0
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f9f5 	bl	80058bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d19d      	bne.n	8005418 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	6a39      	ldr	r1, [r7, #32]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f8cd 	bl	8005680 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e01a      	b.n	8005526 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2220      	movs	r2, #32
 80054f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6859      	ldr	r1, [r3, #4]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <HAL_I2C_Master_Receive+0x1e8>)
 8005504:	400b      	ands	r3, r1
 8005506:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	80002400 	.word	0x80002400
 8005534:	fe00e800 	.word	0xfe00e800

08005538 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b02      	cmp	r3, #2
 800554c:	d103      	bne.n	8005556 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d007      	beq.n	8005574 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	619a      	str	r2, [r3, #24]
  }
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005590:	e022      	b.n	80055d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d01e      	beq.n	80055d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fd f9a7 	bl	80028ec <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d113      	bne.n	80055d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e00f      	b.n	80055f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4013      	ands	r3, r2
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	bf0c      	ite	eq
 80055e8:	2301      	moveq	r3, #1
 80055ea:	2300      	movne	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d0cd      	beq.n	8005592 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800560c:	e02c      	b.n	8005668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f8dc 	bl	80057d0 <I2C_IsAcknowledgeFailed>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e02a      	b.n	8005678 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d01e      	beq.n	8005668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562a:	f7fd f95f 	bl	80028ec <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	429a      	cmp	r2, r3
 8005638:	d302      	bcc.n	8005640 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d113      	bne.n	8005668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005644:	f043 0220 	orr.w	r2, r3, #32
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e007      	b.n	8005678 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b02      	cmp	r3, #2
 8005674:	d1cb      	bne.n	800560e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800568c:	e028      	b.n	80056e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f89c 	bl	80057d0 <I2C_IsAcknowledgeFailed>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e026      	b.n	80056f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a2:	f7fd f923 	bl	80028ec <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d302      	bcc.n	80056b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d113      	bne.n	80056e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056bc:	f043 0220 	orr.w	r2, r3, #32
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e007      	b.n	80056f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d1cf      	bne.n	800568e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005704:	e055      	b.n	80057b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f860 	bl	80057d0 <I2C_IsAcknowledgeFailed>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e053      	b.n	80057c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b20      	cmp	r3, #32
 8005726:	d129      	bne.n	800577c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b04      	cmp	r3, #4
 8005734:	d105      	bne.n	8005742 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e03f      	b.n	80057c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2220      	movs	r2, #32
 8005748:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6859      	ldr	r1, [r3, #4]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005756:	400b      	ands	r3, r1
 8005758:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e022      	b.n	80057c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577c:	f7fd f8b6 	bl	80028ec <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	429a      	cmp	r2, r3
 800578a:	d302      	bcc.n	8005792 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10f      	bne.n	80057b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005796:	f043 0220 	orr.w	r2, r3, #32
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e007      	b.n	80057c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d1a2      	bne.n	8005706 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	fe00e800 	.word	0xfe00e800

080057d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f003 0310 	and.w	r3, r3, #16
 80057e6:	2b10      	cmp	r3, #16
 80057e8:	d161      	bne.n	80058ae <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057f8:	d02b      	beq.n	8005852 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005808:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800580a:	e022      	b.n	8005852 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005812:	d01e      	beq.n	8005852 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005814:	f7fd f86a 	bl	80028ec <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	429a      	cmp	r2, r3
 8005822:	d302      	bcc.n	800582a <I2C_IsAcknowledgeFailed+0x5a>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d113      	bne.n	8005852 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582e:	f043 0220 	orr.w	r2, r3, #32
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e02e      	b.n	80058b0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b20      	cmp	r3, #32
 800585e:	d1d5      	bne.n	800580c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2210      	movs	r2, #16
 8005866:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2220      	movs	r2, #32
 800586e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f7ff fe61 	bl	8005538 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6859      	ldr	r1, [r3, #4]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <I2C_IsAcknowledgeFailed+0xe8>)
 8005882:	400b      	ands	r3, r1
 8005884:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588a:	f043 0204 	orr.w	r2, r3, #4
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	fe00e800 	.word	0xfe00e800

080058bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	607b      	str	r3, [r7, #4]
 80058c6:	460b      	mov	r3, r1
 80058c8:	817b      	strh	r3, [r7, #10]
 80058ca:	4613      	mov	r3, r2
 80058cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	0d5b      	lsrs	r3, r3, #21
 80058d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80058dc:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <I2C_TransferConfig+0x58>)
 80058de:	430b      	orrs	r3, r1
 80058e0:	43db      	mvns	r3, r3
 80058e2:	ea02 0103 	and.w	r1, r2, r3
 80058e6:	897b      	ldrh	r3, [r7, #10]
 80058e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80058ec:	7a7b      	ldrb	r3, [r7, #9]
 80058ee:	041b      	lsls	r3, r3, #16
 80058f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	431a      	orrs	r2, r3
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	431a      	orrs	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005906:	bf00      	nop
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	03ff63ff 	.word	0x03ff63ff

08005918 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b20      	cmp	r3, #32
 800592c:	d138      	bne.n	80059a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005938:	2302      	movs	r3, #2
 800593a:	e032      	b.n	80059a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2224      	movs	r2, #36	; 0x24
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800596a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6819      	ldr	r1, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800599c:	2300      	movs	r3, #0
 800599e:	e000      	b.n	80059a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059a0:	2302      	movs	r3, #2
  }
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b085      	sub	sp, #20
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d139      	bne.n	8005a38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e033      	b.n	8005a3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2224      	movs	r2, #36	; 0x24
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	e000      	b.n	8005a3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a38:	2302      	movs	r3, #2
  }
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a48:	b08b      	sub	sp, #44	; 0x2c
 8005a4a:	af06      	add	r7, sp, #24
 8005a4c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0d0      	b.n	8005bfa <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d106      	bne.n	8005a72 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f00f fd4d 	bl	801550c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2203      	movs	r2, #3
 8005a76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f003 fde9 	bl	8009656 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a84:	2300      	movs	r3, #0
 8005a86:	73fb      	strb	r3, [r7, #15]
 8005a88:	e04c      	b.n	8005b24 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	440b      	add	r3, r1
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	440b      	add	r3, r1
 8005ab0:	7bfa      	ldrb	r2, [r7, #15]
 8005ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ab4:	7bfa      	ldrb	r2, [r7, #15]
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	b298      	uxth	r0, r3
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	440b      	add	r3, r1
 8005ac6:	3336      	adds	r3, #54	; 0x36
 8005ac8:	4602      	mov	r2, r0
 8005aca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	6879      	ldr	r1, [r7, #4]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	440b      	add	r3, r1
 8005adc:	3303      	adds	r3, #3
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ae2:	7bfa      	ldrb	r2, [r7, #15]
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	440b      	add	r3, r1
 8005af0:	3338      	adds	r3, #56	; 0x38
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005af6:	7bfa      	ldrb	r2, [r7, #15]
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	440b      	add	r3, r1
 8005b04:	333c      	adds	r3, #60	; 0x3c
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b0a:	7bfa      	ldrb	r2, [r7, #15]
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	440b      	add	r3, r1
 8005b18:	3340      	adds	r3, #64	; 0x40
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	3301      	adds	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
 8005b24:	7bfa      	ldrb	r2, [r7, #15]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d3ad      	bcc.n	8005a8a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b2e:	2300      	movs	r3, #0
 8005b30:	73fb      	strb	r3, [r7, #15]
 8005b32:	e044      	b.n	8005bbe <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b34:	7bfa      	ldrb	r2, [r7, #15]
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	440b      	add	r3, r1
 8005b42:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b4a:	7bfa      	ldrb	r2, [r7, #15]
 8005b4c:	6879      	ldr	r1, [r7, #4]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	440b      	add	r3, r1
 8005b58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b5c:	7bfa      	ldrb	r2, [r7, #15]
 8005b5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b60:	7bfa      	ldrb	r2, [r7, #15]
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	440b      	add	r3, r1
 8005b6e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b76:	7bfa      	ldrb	r2, [r7, #15]
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	440b      	add	r3, r1
 8005b84:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b8c:	7bfa      	ldrb	r2, [r7, #15]
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	440b      	add	r3, r1
 8005b9a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ba2:	7bfa      	ldrb	r2, [r7, #15]
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	440b      	add	r3, r1
 8005bb0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	73fb      	strb	r3, [r7, #15]
 8005bbe:	7bfa      	ldrb	r2, [r7, #15]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d3b5      	bcc.n	8005b34 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	687e      	ldr	r6, [r7, #4]
 8005bd0:	466d      	mov	r5, sp
 8005bd2:	f106 0410 	add.w	r4, r6, #16
 8005bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	602b      	str	r3, [r5, #0]
 8005bde:	1d33      	adds	r3, r6, #4
 8005be0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005be2:	6838      	ldr	r0, [r7, #0]
 8005be4:	f003 fd52 	bl	800968c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_PCD_Start+0x16>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e016      	b.n	8005c46 <HAL_PCD_Start+0x44>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f003 fcff 	bl	8009628 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f00f ff13 	bl	8015a58 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f005 ff14 	bl	800ba64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f005 ff0d 	bl	800ba7a <USB_ReadInterrupts>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c6a:	d102      	bne.n	8005c72 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 faf6 	bl	800625e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f005 feff 	bl	800ba7a <USB_ReadInterrupts>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c86:	d112      	bne.n	8005cae <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c9a:	b292      	uxth	r2, r2
 8005c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f00f fcdc 	bl	801565e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f8c7 	bl	8005e3c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f005 fee1 	bl	800ba7a <USB_ReadInterrupts>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cc2:	d10b      	bne.n	8005cdc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cd6:	b292      	uxth	r2, r2
 8005cd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f005 feca 	bl	800ba7a <USB_ReadInterrupts>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf0:	d10b      	bne.n	8005d0a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d04:	b292      	uxth	r2, r2
 8005d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f005 feb3 	bl	800ba7a <USB_ReadInterrupts>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1e:	d126      	bne.n	8005d6e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0204 	bic.w	r2, r2, #4
 8005d32:	b292      	uxth	r2, r2
 8005d34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0208 	bic.w	r2, r2, #8
 8005d4a:	b292      	uxth	r2, r2
 8005d4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f00f fcbd 	bl	80156d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d68:	b292      	uxth	r2, r2
 8005d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f005 fe81 	bl	800ba7a <USB_ReadInterrupts>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d82:	d126      	bne.n	8005dd2 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0208 	orr.w	r2, r2, #8
 8005d96:	b292      	uxth	r2, r2
 8005d98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dae:	b292      	uxth	r2, r2
 8005db0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0204 	orr.w	r2, r2, #4
 8005dc6:	b292      	uxth	r2, r2
 8005dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f00f fc65 	bl	801569c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f005 fe4f 	bl	800ba7a <USB_ReadInterrupts>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005de6:	d10e      	bne.n	8005e06 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005dfa:	b292      	uxth	r2, r2
 8005dfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f00f fc1e 	bl	8015642 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f005 fe35 	bl	800ba7a <USB_ReadInterrupts>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e1a:	d10b      	bne.n	8005e34 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e2e:	b292      	uxth	r2, r2
 8005e30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_PCD_SetAddress+0x1a>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e013      	b.n	8005e7e <HAL_PCD_SetAddress+0x42>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	78fa      	ldrb	r2, [r7, #3]
 8005e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	78fa      	ldrb	r2, [r7, #3]
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f005 fde4 	bl	800ba3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	4608      	mov	r0, r1
 8005e90:	4611      	mov	r1, r2
 8005e92:	461a      	mov	r2, r3
 8005e94:	4603      	mov	r3, r0
 8005e96:	70fb      	strb	r3, [r7, #3]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	803b      	strh	r3, [r7, #0]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	da0e      	bge.n	8005eca <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	f003 0307 	and.w	r3, r3, #7
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	705a      	strb	r2, [r3, #1]
 8005ec8:	e00e      	b.n	8005ee8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	f003 0207 	and.w	r2, r3, #7
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005ef4:	883a      	ldrh	r2, [r7, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	78ba      	ldrb	r2, [r7, #2]
 8005efe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d004      	beq.n	8005f12 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f12:	78bb      	ldrb	r3, [r7, #2]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d102      	bne.n	8005f1e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_PCD_EP_Open+0xa6>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e00e      	b.n	8005f4a <HAL_PCD_EP_Open+0xc4>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68f9      	ldr	r1, [r7, #12]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f003 fbc8 	bl	80096d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005f48:	7afb      	ldrb	r3, [r7, #11]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	da0e      	bge.n	8005f84 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4413      	add	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	705a      	strb	r2, [r3, #1]
 8005f82:	e00e      	b.n	8005fa2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	f003 0207 	and.w	r2, r3, #7
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	4413      	add	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_PCD_EP_Close+0x6a>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e00e      	b.n	8005fda <HAL_PCD_EP_Close+0x88>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68f9      	ldr	r1, [r7, #12]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f003 ff14 	bl	8009df8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b086      	sub	sp, #24
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ff2:	7afb      	ldrb	r3, [r7, #11]
 8005ff4:	f003 0207 	and.w	r2, r3, #7
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2200      	movs	r2, #0
 800601a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2200      	movs	r2, #0
 8006020:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006022:	7afb      	ldrb	r3, [r7, #11]
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	b2da      	uxtb	r2, r3
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800602e:	7afb      	ldrb	r3, [r7, #11]
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	2b00      	cmp	r3, #0
 8006036:	d106      	bne.n	8006046 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6979      	ldr	r1, [r7, #20]
 800603e:	4618      	mov	r0, r3
 8006040:	f004 f8c7 	bl	800a1d2 <USB_EPStartXfer>
 8006044:	e005      	b.n	8006052 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6979      	ldr	r1, [r7, #20]
 800604c:	4618      	mov	r0, r3
 800604e:	f004 f8c0 	bl	800a1d2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	f003 0207 	and.w	r2, r3, #7
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	440b      	add	r3, r1
 800607a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800607e:	681b      	ldr	r3, [r3, #0]
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	460b      	mov	r3, r1
 800609a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800609c:	7afb      	ldrb	r3, [r7, #11]
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2200      	movs	r2, #0
 80060d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2201      	movs	r2, #1
 80060d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060d8:	7afb      	ldrb	r3, [r7, #11]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060e4:	7afb      	ldrb	r3, [r7, #11]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6979      	ldr	r1, [r7, #20]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f004 f86c 	bl	800a1d2 <USB_EPStartXfer>
 80060fa:	e005      	b.n	8006108 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	4618      	mov	r0, r3
 8006104:	f004 f865 	bl	800a1d2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	460b      	mov	r3, r1
 800611c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	f003 0207 	and.w	r2, r3, #7
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	429a      	cmp	r2, r3
 800612a:	d901      	bls.n	8006130 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e03e      	b.n	80061ae <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006134:	2b00      	cmp	r3, #0
 8006136:	da0e      	bge.n	8006156 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	4413      	add	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	705a      	strb	r2, [r3, #1]
 8006154:	e00c      	b.n	8006170 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006156:	78fa      	ldrb	r2, [r7, #3]
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	4413      	add	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006176:	78fb      	ldrb	r3, [r7, #3]
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	b2da      	uxtb	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_PCD_EP_SetStall+0x7e>
 800618c:	2302      	movs	r3, #2
 800618e:	e00e      	b.n	80061ae <HAL_PCD_EP_SetStall+0x9c>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68f9      	ldr	r1, [r7, #12]
 800619e:	4618      	mov	r0, r3
 80061a0:	f005 fb4d 	bl	800b83e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	460b      	mov	r3, r1
 80061c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	f003 020f 	and.w	r2, r3, #15
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d901      	bls.n	80061d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e040      	b.n	8006256 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	da0e      	bge.n	80061fa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	4413      	add	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	705a      	strb	r2, [r3, #1]
 80061f8:	e00e      	b.n	8006218 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061fa:	78fb      	ldrb	r3, [r7, #3]
 80061fc:	f003 0207 	and.w	r2, r3, #7
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	4413      	add	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	b2da      	uxtb	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_PCD_EP_ClrStall+0x82>
 8006234:	2302      	movs	r3, #2
 8006236:	e00e      	b.n	8006256 <HAL_PCD_EP_ClrStall+0xa0>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68f9      	ldr	r1, [r7, #12]
 8006246:	4618      	mov	r0, r3
 8006248:	f005 fb4a 	bl	800b8e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b096      	sub	sp, #88	; 0x58
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006266:	e3a9      	b.n	80069bc <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006270:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006274:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006278:	b2db      	uxtb	r3, r3
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8006282:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006286:	2b00      	cmp	r3, #0
 8006288:	f040 8164 	bne.w	8006554 <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800628c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b00      	cmp	r3, #0
 8006296:	d152      	bne.n	800633e <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80062a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a8:	81fb      	strh	r3, [r7, #14]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	89fb      	ldrh	r3, [r7, #14]
 80062b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3328      	adds	r3, #40	; 0x28
 80062c0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	461a      	mov	r2, r3
 80062ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	4413      	add	r3, r2
 80062d6:	3302      	adds	r3, #2
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80062ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f0:	695a      	ldr	r2, [r3, #20]
 80062f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	441a      	add	r2, r3
 80062f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062fa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80062fc:	2100      	movs	r1, #0
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f00f f985 	bl	801560e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8355 	beq.w	80069bc <PCD_EP_ISR_Handler+0x75e>
 8006312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	2b00      	cmp	r3, #0
 8006318:	f040 8350 	bne.w	80069bc <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006328:	b2da      	uxtb	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	b292      	uxth	r2, r2
 8006330:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800633c:	e33e      	b.n	80069bc <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006344:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006350:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006358:	2b00      	cmp	r3, #0
 800635a:	d034      	beq.n	80063c6 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006364:	b29b      	uxth	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4413      	add	r3, r2
 8006370:	3306      	adds	r3, #6
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6812      	ldr	r2, [r2, #0]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006386:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006394:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006398:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800639a:	b29b      	uxth	r3, r3
 800639c:	f005 fbc3 	bl	800bb26 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80063ac:	4013      	ands	r3, r2
 80063ae:	823b      	strh	r3, [r7, #16]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	8a3a      	ldrh	r2, [r7, #16]
 80063b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063ba:	b292      	uxth	r2, r2
 80063bc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f00f f8f8 	bl	80155b4 <HAL_PCD_SetupStageCallback>
 80063c4:	e2fa      	b.n	80069bc <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80063c6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f280 82f6 	bge.w	80069bc <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80063dc:	4013      	ands	r3, r2
 80063de:	83fb      	strh	r3, [r7, #30]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	8bfa      	ldrh	r2, [r7, #30]
 80063e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063ea:	b292      	uxth	r2, r2
 80063ec:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	4413      	add	r3, r2
 8006402:	3306      	adds	r3, #6
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6812      	ldr	r2, [r2, #0]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006418:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800641a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d019      	beq.n	8006456 <PCD_EP_ISR_Handler+0x1f8>
 8006422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d015      	beq.n	8006456 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006430:	6959      	ldr	r1, [r3, #20]
 8006432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006434:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006438:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800643a:	b29b      	uxth	r3, r3
 800643c:	f005 fb73 	bl	800bb26 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006442:	695a      	ldr	r2, [r3, #20]
 8006444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	441a      	add	r2, r3
 800644a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800644e:	2100      	movs	r1, #0
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f00f f8c1 	bl	80155d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006462:	2b00      	cmp	r3, #0
 8006464:	f040 82aa 	bne.w	80069bc <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006476:	b29b      	uxth	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	4413      	add	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d112      	bne.n	80064b6 <PCD_EP_ISR_Handler+0x258>
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	b29b      	uxth	r3, r3
 8006496:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800649a:	b29a      	uxth	r2, r3
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	801a      	strh	r2, [r3, #0]
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	801a      	strh	r2, [r3, #0]
 80064b4:	e02f      	b.n	8006516 <PCD_EP_ISR_Handler+0x2b8>
 80064b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b3e      	cmp	r3, #62	; 0x3e
 80064bc:	d813      	bhi.n	80064e6 <PCD_EP_ISR_Handler+0x288>
 80064be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	085b      	lsrs	r3, r3, #1
 80064c4:	647b      	str	r3, [r7, #68]	; 0x44
 80064c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <PCD_EP_ISR_Handler+0x27a>
 80064d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064d4:	3301      	adds	r3, #1
 80064d6:	647b      	str	r3, [r7, #68]	; 0x44
 80064d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064da:	b29b      	uxth	r3, r3
 80064dc:	029b      	lsls	r3, r3, #10
 80064de:	b29a      	uxth	r2, r3
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	e017      	b.n	8006516 <PCD_EP_ISR_Handler+0x2b8>
 80064e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	647b      	str	r3, [r7, #68]	; 0x44
 80064ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 031f 	and.w	r3, r3, #31
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <PCD_EP_ISR_Handler+0x2a2>
 80064fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fc:	3b01      	subs	r3, #1
 80064fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006502:	b29b      	uxth	r3, r3
 8006504:	029b      	lsls	r3, r3, #10
 8006506:	b29b      	uxth	r3, r3
 8006508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800650c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006510:	b29a      	uxth	r2, r3
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	827b      	strh	r3, [r7, #18]
 8006528:	8a7b      	ldrh	r3, [r7, #18]
 800652a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800652e:	827b      	strh	r3, [r7, #18]
 8006530:	8a7b      	ldrh	r3, [r7, #18]
 8006532:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006536:	827b      	strh	r3, [r7, #18]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	8a7b      	ldrh	r3, [r7, #18]
 800653e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800654a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800654e:	b29b      	uxth	r3, r3
 8006550:	8013      	strh	r3, [r2, #0]
 8006552:	e233      	b.n	80069bc <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	461a      	mov	r2, r3
 800655a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006568:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800656c:	2b00      	cmp	r3, #0
 800656e:	f280 80fc 	bge.w	800676a <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29a      	uxth	r2, r3
 8006584:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006588:	4013      	ands	r3, r2
 800658a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80065a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065a4:	b292      	uxth	r2, r2
 80065a6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80065a8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	4413      	add	r3, r2
 80065bc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80065be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c0:	7b1b      	ldrb	r3, [r3, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d125      	bne.n	8006612 <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	4413      	add	r3, r2
 80065da:	3306      	adds	r3, #6
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80065f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 8092 	beq.w	8006720 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006602:	6959      	ldr	r1, [r3, #20]
 8006604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006606:	88da      	ldrh	r2, [r3, #6]
 8006608:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800660c:	f005 fa8b 	bl	800bb26 <USB_ReadPMA>
 8006610:	e086      	b.n	8006720 <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006614:	78db      	ldrb	r3, [r3, #3]
 8006616:	2b02      	cmp	r3, #2
 8006618:	d10a      	bne.n	8006630 <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800661a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800661e:	461a      	mov	r2, r3
 8006620:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f9d8 	bl	80069d8 <HAL_PCD_EP_DB_Receive>
 8006628:	4603      	mov	r3, r0
 800662a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800662e:	e077      	b.n	8006720 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	441a      	add	r2, r3
 800665c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006670:	b29b      	uxth	r3, r3
 8006672:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d024      	beq.n	80066d8 <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006696:	b29b      	uxth	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	4413      	add	r3, r2
 80066a2:	3302      	adds	r3, #2
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6812      	ldr	r2, [r2, #0]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80066ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d02e      	beq.n	8006720 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c8:	6959      	ldr	r1, [r3, #20]
 80066ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066cc:	891a      	ldrh	r2, [r3, #8]
 80066ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066d2:	f005 fa28 	bl	800bb26 <USB_ReadPMA>
 80066d6:	e023      	b.n	8006720 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	4413      	add	r3, r2
 80066ec:	3306      	adds	r3, #6
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006700:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006704:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006708:	2b00      	cmp	r3, #0
 800670a:	d009      	beq.n	8006720 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006712:	6959      	ldr	r1, [r3, #20]
 8006714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006716:	895a      	ldrh	r2, [r3, #10]
 8006718:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800671c:	f005 fa03 	bl	800bb26 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006722:	69da      	ldr	r2, [r3, #28]
 8006724:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006728:	441a      	add	r2, r3
 800672a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800672e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006730:	695a      	ldr	r2, [r3, #20]
 8006732:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006736:	441a      	add	r2, r3
 8006738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800673c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <PCD_EP_ISR_Handler+0x4f2>
 8006744:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	429a      	cmp	r2, r3
 800674e:	d206      	bcs.n	800675e <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f00e ff3e 	bl	80155d8 <HAL_PCD_DataOutStageCallback>
 800675c:	e005      	b.n	800676a <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006764:	4618      	mov	r0, r3
 8006766:	f003 fd34 	bl	800a1d2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800676a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800676e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 8122 	beq.w	80069bc <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8006778:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4413      	add	r3, r2
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	441a      	add	r2, r3
 80067b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80067bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80067c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ca:	78db      	ldrb	r3, [r3, #3]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	f000 809d 	beq.w	800690c <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 80067d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d4:	2200      	movs	r2, #0
 80067d6:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80067d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80067dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d046      	beq.n	8006872 <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d126      	bne.n	800683a <PCD_EP_ISR_Handler+0x5dc>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	4413      	add	r3, r2
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
 8006804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	011a      	lsls	r2, r3, #4
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	4413      	add	r3, r2
 800680e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006812:	623b      	str	r3, [r7, #32]
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800681e:	b29a      	uxth	r2, r3
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	b29b      	uxth	r3, r3
 800682a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006832:	b29a      	uxth	r2, r3
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	801a      	strh	r2, [r3, #0]
 8006838:	e061      	b.n	80068fe <PCD_EP_ISR_Handler+0x6a0>
 800683a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683c:	785b      	ldrb	r3, [r3, #1]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d15d      	bne.n	80068fe <PCD_EP_ISR_Handler+0x6a0>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006850:	b29b      	uxth	r3, r3
 8006852:	461a      	mov	r2, r3
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	4413      	add	r3, r2
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800685a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	011a      	lsls	r2, r3, #4
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	4413      	add	r3, r2
 8006864:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	2200      	movs	r2, #0
 800686e:	801a      	strh	r2, [r3, #0]
 8006870:	e045      	b.n	80068fe <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d126      	bne.n	80068ce <PCD_EP_ISR_Handler+0x670>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688e:	b29b      	uxth	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006894:	4413      	add	r3, r2
 8006896:	637b      	str	r3, [r7, #52]	; 0x34
 8006898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	011a      	lsls	r2, r3, #4
 800689e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068a6:	633b      	str	r3, [r7, #48]	; 0x30
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	801a      	strh	r2, [r3, #0]
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	801a      	strh	r2, [r3, #0]
 80068cc:	e017      	b.n	80068fe <PCD_EP_ISR_Handler+0x6a0>
 80068ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d0:	785b      	ldrb	r3, [r3, #1]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d113      	bne.n	80068fe <PCD_EP_ISR_Handler+0x6a0>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068de:	b29b      	uxth	r3, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e4:	4413      	add	r3, r2
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	011a      	lsls	r2, r3, #4
 80068ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f0:	4413      	add	r3, r2
 80068f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	2200      	movs	r2, #0
 80068fc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f00e fe82 	bl	801560e <HAL_PCD_DataInStageCallback>
 800690a:	e057      	b.n	80069bc <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800690c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690e:	78db      	ldrb	r3, [r3, #3]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d14c      	bne.n	80069ae <PCD_EP_ISR_Handler+0x750>
 8006914:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691c:	2b00      	cmp	r3, #0
 800691e:	d146      	bne.n	80069ae <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006928:	b29b      	uxth	r3, r3
 800692a:	461a      	mov	r2, r3
 800692c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	4413      	add	r3, r2
 8006934:	3302      	adds	r3, #2
 8006936:	005b      	lsls	r3, r3, #1
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006948:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 800694c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694e:	699a      	ldr	r2, [r3, #24]
 8006950:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006954:	429a      	cmp	r2, r3
 8006956:	d907      	bls.n	8006968 <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 8006958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006960:	1ad2      	subs	r2, r2, r3
 8006962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006964:	619a      	str	r2, [r3, #24]
 8006966:	e002      	b.n	800696e <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 8006968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696a:	2200      	movs	r2, #0
 800696c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800696e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f00e fe46 	bl	801560e <HAL_PCD_DataInStageCallback>
 8006982:	e01b      	b.n	80069bc <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006986:	695a      	ldr	r2, [r3, #20]
 8006988:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800698c:	441a      	add	r2, r3
 800698e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006990:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006994:	69da      	ldr	r2, [r3, #28]
 8006996:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800699a:	441a      	add	r2, r3
 800699c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80069a6:	4618      	mov	r0, r3
 80069a8:	f003 fc13 	bl	800a1d2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80069ac:	e006      	b.n	80069bc <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80069ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80069b2:	461a      	mov	r2, r3
 80069b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f91b 	bl	8006bf2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	b21b      	sxth	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f6ff ac4d 	blt.w	8006268 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3758      	adds	r7, #88	; 0x58
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	4613      	mov	r3, r2
 80069e4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d07e      	beq.n	8006aee <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	461a      	mov	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	4413      	add	r3, r2
 8006a04:	3302      	adds	r3, #2
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	6812      	ldr	r2, [r2, #0]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a18:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	8b7b      	ldrh	r3, [r7, #26]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d306      	bcc.n	8006a32 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	699a      	ldr	r2, [r3, #24]
 8006a28:	8b7b      	ldrh	r3, [r7, #26]
 8006a2a:	1ad2      	subs	r2, r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	619a      	str	r2, [r3, #24]
 8006a30:	e002      	b.n	8006a38 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2200      	movs	r2, #0
 8006a36:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d123      	bne.n	8006a88 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5a:	833b      	strh	r3, [r7, #24]
 8006a5c:	8b3b      	ldrh	r3, [r7, #24]
 8006a5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a62:	833b      	strh	r3, [r7, #24]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	441a      	add	r2, r3
 8006a72:	8b3b      	ldrh	r3, [r7, #24]
 8006a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006a88:	88fb      	ldrh	r3, [r7, #6]
 8006a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d01f      	beq.n	8006ad2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aac:	82fb      	strh	r3, [r7, #22]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	8afb      	ldrh	r3, [r7, #22]
 8006abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006ad2:	8b7b      	ldrh	r3, [r7, #26]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 8087 	beq.w	8006be8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	6959      	ldr	r1, [r3, #20]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	891a      	ldrh	r2, [r3, #8]
 8006ae6:	8b7b      	ldrh	r3, [r7, #26]
 8006ae8:	f005 f81d 	bl	800bb26 <USB_ReadPMA>
 8006aec:	e07c      	b.n	8006be8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	4413      	add	r3, r2
 8006b02:	3306      	adds	r3, #6
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	6812      	ldr	r2, [r2, #0]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b16:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	699a      	ldr	r2, [r3, #24]
 8006b1c:	8b7b      	ldrh	r3, [r7, #26]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d306      	bcc.n	8006b30 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	8b7b      	ldrh	r3, [r7, #26]
 8006b28:	1ad2      	subs	r2, r2, r3
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	619a      	str	r2, [r3, #24]
 8006b2e:	e002      	b.n	8006b36 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2200      	movs	r2, #0
 8006b34:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d123      	bne.n	8006b86 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b58:	83fb      	strh	r3, [r7, #30]
 8006b5a:	8bfb      	ldrh	r3, [r7, #30]
 8006b5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b60:	83fb      	strh	r3, [r7, #30]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	441a      	add	r2, r3
 8006b70:	8bfb      	ldrh	r3, [r7, #30]
 8006b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d11f      	bne.n	8006bd0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006baa:	83bb      	strh	r3, [r7, #28]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	441a      	add	r2, r3
 8006bba:	8bbb      	ldrh	r3, [r7, #28]
 8006bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006bd0:	8b7b      	ldrh	r3, [r7, #26]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d008      	beq.n	8006be8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6818      	ldr	r0, [r3, #0]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	6959      	ldr	r1, [r3, #20]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	895a      	ldrh	r2, [r3, #10]
 8006be2:	8b7b      	ldrh	r3, [r7, #26]
 8006be4:	f004 ff9f 	bl	800bb26 <USB_ReadPMA>
    }
  }

  return count;
 8006be8:	8b7b      	ldrh	r3, [r7, #26]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3720      	adds	r7, #32
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b0a2      	sub	sp, #136	; 0x88
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006c00:	88fb      	ldrh	r3, [r7, #6]
 8006c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 81c7 	beq.w	8006f9a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	4413      	add	r3, r2
 8006c20:	3302      	adds	r3, #2
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	6812      	ldr	r2, [r2, #0]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	699a      	ldr	r2, [r3, #24]
 8006c3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d907      	bls.n	8006c54 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	699a      	ldr	r2, [r3, #24]
 8006c48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006c4c:	1ad2      	subs	r2, r2, r3
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	619a      	str	r2, [r3, #24]
 8006c52:	e002      	b.n	8006c5a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2200      	movs	r2, #0
 8006c58:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f040 80b9 	bne.w	8006dd6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	785b      	ldrb	r3, [r3, #1]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d126      	bne.n	8006cba <HAL_PCD_EP_DB_Transmit+0xc8>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	4413      	add	r3, r2
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	011a      	lsls	r2, r3, #4
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	e01a      	b.n	8006cf0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	785b      	ldrb	r3, [r3, #1]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d116      	bne.n	8006cf0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	4413      	add	r3, r2
 8006cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	011a      	lsls	r2, r3, #4
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	2200      	movs	r2, #0
 8006cee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	623b      	str	r3, [r7, #32]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	785b      	ldrb	r3, [r3, #1]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d126      	bne.n	8006d4c <HAL_PCD_EP_DB_Transmit+0x15a>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	461a      	mov	r2, r3
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	4413      	add	r3, r2
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	011a      	lsls	r2, r3, #4
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	801a      	strh	r2, [r3, #0]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	801a      	strh	r2, [r3, #0]
 8006d4a:	e017      	b.n	8006d7c <HAL_PCD_EP_DB_Transmit+0x18a>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d113      	bne.n	8006d7c <HAL_PCD_EP_DB_Transmit+0x18a>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	4413      	add	r3, r2
 8006d64:	623b      	str	r3, [r7, #32]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	011a      	lsls	r2, r3, #4
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d74:	61fb      	str	r3, [r7, #28]
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	4619      	mov	r1, r3
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f00e fc43 	bl	801560e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006d88:	88fb      	ldrh	r3, [r7, #6]
 8006d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 82d4 	beq.w	800733c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dae:	827b      	strh	r3, [r7, #18]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	441a      	add	r2, r3
 8006dbe:	8a7b      	ldrh	r3, [r7, #18]
 8006dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	8013      	strh	r3, [r2, #0]
 8006dd4:	e2b2      	b.n	800733c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006dd6:	88fb      	ldrh	r3, [r7, #6]
 8006dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d021      	beq.n	8006e24 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	461a      	mov	r2, r3
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	441a      	add	r2, r3
 8006e0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	f040 8286 	bne.w	800733c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	695a      	ldr	r2, [r3, #20]
 8006e34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e38:	441a      	add	r2, r3
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	69da      	ldr	r2, [r3, #28]
 8006e42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e46:	441a      	add	r2, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	6a1a      	ldr	r2, [r3, #32]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d309      	bcc.n	8006e6c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	6a1a      	ldr	r2, [r3, #32]
 8006e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e64:	1ad2      	subs	r2, r2, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	621a      	str	r2, [r3, #32]
 8006e6a:	e015      	b.n	8006e98 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d107      	bne.n	8006e84 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8006e74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e78:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006e82:	e009      	b.n	8006e98 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2200      	movs	r2, #0
 8006e96:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	785b      	ldrb	r3, [r3, #1]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d155      	bne.n	8006f4c <HAL_PCD_EP_DB_Transmit+0x35a>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	4413      	add	r3, r2
 8006eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	011a      	lsls	r2, r3, #4
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d112      	bne.n	8006ef4 <HAL_PCD_EP_DB_Transmit+0x302>
 8006ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006edc:	801a      	strh	r2, [r3, #0]
 8006ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef0:	801a      	strh	r2, [r3, #0]
 8006ef2:	e047      	b.n	8006f84 <HAL_PCD_EP_DB_Transmit+0x392>
 8006ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ef8:	d811      	bhi.n	8006f1e <HAL_PCD_EP_DB_Transmit+0x32c>
 8006efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efc:	085b      	lsrs	r3, r3, #1
 8006efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_PCD_EP_DB_Transmit+0x31e>
 8006f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	029b      	lsls	r3, r3, #10
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e032      	b.n	8006f84 <HAL_PCD_EP_DB_Transmit+0x392>
 8006f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f20:	095b      	lsrs	r3, r3, #5
 8006f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f26:	f003 031f 	and.w	r3, r3, #31
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <HAL_PCD_EP_DB_Transmit+0x342>
 8006f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f30:	3b01      	subs	r3, #1
 8006f32:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	029b      	lsls	r3, r3, #10
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	e01b      	b.n	8006f84 <HAL_PCD_EP_DB_Transmit+0x392>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	785b      	ldrb	r3, [r3, #1]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d117      	bne.n	8006f84 <HAL_PCD_EP_DB_Transmit+0x392>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	643b      	str	r3, [r7, #64]	; 0x40
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f68:	4413      	add	r3, r2
 8006f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	011a      	lsls	r2, r3, #4
 8006f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f74:	4413      	add	r3, r2
 8006f76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f82:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6818      	ldr	r0, [r3, #0]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	6959      	ldr	r1, [r3, #20]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	891a      	ldrh	r2, [r3, #8]
 8006f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f004 fd81 	bl	800ba9a <USB_WritePMA>
 8006f98:	e1d0      	b.n	800733c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	4413      	add	r3, r2
 8006fae:	3306      	adds	r3, #6
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	6812      	ldr	r2, [r2, #0]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d307      	bcc.n	8006fe2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	699a      	ldr	r2, [r3, #24]
 8006fd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fda:	1ad2      	subs	r2, r2, r3
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	619a      	str	r2, [r3, #24]
 8006fe0:	e002      	b.n	8006fe8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f040 80c4 	bne.w	800717a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d126      	bne.n	8007048 <HAL_PCD_EP_DB_Transmit+0x456>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007008:	b29b      	uxth	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800700e:	4413      	add	r3, r2
 8007010:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	011a      	lsls	r2, r3, #4
 8007018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701a:	4413      	add	r3, r2
 800701c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007020:	66bb      	str	r3, [r7, #104]	; 0x68
 8007022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800702c:	b29a      	uxth	r2, r3
 800702e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	b29b      	uxth	r3, r3
 8007038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800703c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007040:	b29a      	uxth	r2, r3
 8007042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007044:	801a      	strh	r2, [r3, #0]
 8007046:	e01a      	b.n	800707e <HAL_PCD_EP_DB_Transmit+0x48c>
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d116      	bne.n	800707e <HAL_PCD_EP_DB_Transmit+0x48c>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	677b      	str	r3, [r7, #116]	; 0x74
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007064:	4413      	add	r3, r2
 8007066:	677b      	str	r3, [r7, #116]	; 0x74
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	011a      	lsls	r2, r3, #4
 800706e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007070:	4413      	add	r3, r2
 8007072:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007076:	673b      	str	r3, [r7, #112]	; 0x70
 8007078:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800707a:	2200      	movs	r2, #0
 800707c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	67bb      	str	r3, [r7, #120]	; 0x78
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d12f      	bne.n	80070ec <HAL_PCD_EP_DB_Transmit+0x4fa>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709c:	b29b      	uxth	r3, r3
 800709e:	461a      	mov	r2, r3
 80070a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070a4:	4413      	add	r3, r2
 80070a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	011a      	lsls	r2, r3, #4
 80070b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070b4:	4413      	add	r3, r2
 80070b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070d0:	801a      	strh	r2, [r3, #0]
 80070d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070e8:	801a      	strh	r2, [r3, #0]
 80070ea:	e017      	b.n	800711c <HAL_PCD_EP_DB_Transmit+0x52a>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	785b      	ldrb	r3, [r3, #1]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d113      	bne.n	800711c <HAL_PCD_EP_DB_Transmit+0x52a>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	461a      	mov	r2, r3
 8007100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007102:	4413      	add	r3, r2
 8007104:	67bb      	str	r3, [r7, #120]	; 0x78
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	011a      	lsls	r2, r3, #4
 800710c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800710e:	4413      	add	r3, r2
 8007110:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007114:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007116:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007118:	2200      	movs	r2, #0
 800711a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	4619      	mov	r1, r3
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f00e fa73 	bl	801560e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800712e:	2b00      	cmp	r3, #0
 8007130:	f040 8104 	bne.w	800733c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	441a      	add	r2, r3
 8007160:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800716c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007174:	b29b      	uxth	r3, r3
 8007176:	8013      	strh	r3, [r2, #0]
 8007178:	e0e0      	b.n	800733c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800717a:	88fb      	ldrh	r3, [r7, #6]
 800717c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d121      	bne.n	80071c8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29b      	uxth	r3, r3
 8007196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	441a      	add	r2, r3
 80071b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	f040 80b4 	bne.w	800733c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	695a      	ldr	r2, [r3, #20]
 80071d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071dc:	441a      	add	r2, r3
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	69da      	ldr	r2, [r3, #28]
 80071e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071ea:	441a      	add	r2, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d309      	bcc.n	8007210 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	6a1a      	ldr	r2, [r3, #32]
 8007206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007208:	1ad2      	subs	r2, r2, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	621a      	str	r2, [r3, #32]
 800720e:	e015      	b.n	800723c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d107      	bne.n	8007228 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8007218:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800721c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007226:	e009      	b.n	800723c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	667b      	str	r3, [r7, #100]	; 0x64
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	785b      	ldrb	r3, [r3, #1]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d155      	bne.n	80072f6 <HAL_PCD_EP_DB_Transmit+0x704>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007258:	b29b      	uxth	r3, r3
 800725a:	461a      	mov	r2, r3
 800725c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800725e:	4413      	add	r3, r2
 8007260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	011a      	lsls	r2, r3, #4
 8007268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800726a:	4413      	add	r3, r2
 800726c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007270:	65bb      	str	r3, [r7, #88]	; 0x58
 8007272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007274:	2b00      	cmp	r3, #0
 8007276:	d112      	bne.n	800729e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007278:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007282:	b29a      	uxth	r2, r3
 8007284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007286:	801a      	strh	r2, [r3, #0]
 8007288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	b29b      	uxth	r3, r3
 800728e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007296:	b29a      	uxth	r2, r3
 8007298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800729a:	801a      	strh	r2, [r3, #0]
 800729c:	e044      	b.n	8007328 <HAL_PCD_EP_DB_Transmit+0x736>
 800729e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a0:	2b3e      	cmp	r3, #62	; 0x3e
 80072a2:	d811      	bhi.n	80072c8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80072a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a6:	085b      	lsrs	r3, r3, #1
 80072a8:	657b      	str	r3, [r7, #84]	; 0x54
 80072aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <HAL_PCD_EP_DB_Transmit+0x6c8>
 80072b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072b6:	3301      	adds	r3, #1
 80072b8:	657b      	str	r3, [r7, #84]	; 0x54
 80072ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072bc:	b29b      	uxth	r3, r3
 80072be:	029b      	lsls	r3, r3, #10
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072c4:	801a      	strh	r2, [r3, #0]
 80072c6:	e02f      	b.n	8007328 <HAL_PCD_EP_DB_Transmit+0x736>
 80072c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	657b      	str	r3, [r7, #84]	; 0x54
 80072ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072d0:	f003 031f 	and.w	r3, r3, #31
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d102      	bne.n	80072de <HAL_PCD_EP_DB_Transmit+0x6ec>
 80072d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072da:	3b01      	subs	r3, #1
 80072dc:	657b      	str	r3, [r7, #84]	; 0x54
 80072de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	029b      	lsls	r3, r3, #10
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	e018      	b.n	8007328 <HAL_PCD_EP_DB_Transmit+0x736>
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	785b      	ldrb	r3, [r3, #1]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d114      	bne.n	8007328 <HAL_PCD_EP_DB_Transmit+0x736>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007306:	b29b      	uxth	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800730c:	4413      	add	r3, r2
 800730e:	667b      	str	r3, [r7, #100]	; 0x64
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	011a      	lsls	r2, r3, #4
 8007316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007318:	4413      	add	r3, r2
 800731a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800731e:	663b      	str	r3, [r7, #96]	; 0x60
 8007320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007322:	b29a      	uxth	r2, r3
 8007324:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007326:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6818      	ldr	r0, [r3, #0]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	6959      	ldr	r1, [r3, #20]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	895a      	ldrh	r2, [r3, #10]
 8007334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007336:	b29b      	uxth	r3, r3
 8007338:	f004 fbaf 	bl	800ba9a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	b29b      	uxth	r3, r3
 800734e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007356:	823b      	strh	r3, [r7, #16]
 8007358:	8a3b      	ldrh	r3, [r7, #16]
 800735a:	f083 0310 	eor.w	r3, r3, #16
 800735e:	823b      	strh	r3, [r7, #16]
 8007360:	8a3b      	ldrh	r3, [r7, #16]
 8007362:	f083 0320 	eor.w	r3, r3, #32
 8007366:	823b      	strh	r3, [r7, #16]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	441a      	add	r2, r3
 8007376:	8a3b      	ldrh	r3, [r7, #16]
 8007378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007388:	b29b      	uxth	r3, r3
 800738a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3788      	adds	r7, #136	; 0x88
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007396:	b480      	push	{r7}
 8007398:	b087      	sub	sp, #28
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	607b      	str	r3, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	817b      	strh	r3, [r7, #10]
 80073a4:	4613      	mov	r3, r2
 80073a6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80073a8:	897b      	ldrh	r3, [r7, #10]
 80073aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00b      	beq.n	80073cc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073b4:	897b      	ldrh	r3, [r7, #10]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	4613      	mov	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	e009      	b.n	80073e0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80073cc:	897a      	ldrh	r2, [r7, #10]
 80073ce:	4613      	mov	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4413      	add	r3, r2
 80073de:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80073e0:	893b      	ldrh	r3, [r7, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d107      	bne.n	80073f6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2200      	movs	r2, #0
 80073ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	80da      	strh	r2, [r3, #6]
 80073f4:	e00b      	b.n	800740e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2201      	movs	r2, #1
 80073fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	b29a      	uxth	r2, r3
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	0c1b      	lsrs	r3, r3, #16
 8007408:	b29a      	uxth	r2, r3
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	371c      	adds	r7, #28
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a04      	ldr	r2, [pc, #16]	; (8007438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800742a:	6013      	str	r3, [r2, #0]
}
 800742c:	bf00      	nop
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	40007000 	.word	0x40007000

0800743c <HAL_PWR_EnableWakeUpPin>:
  *         This parameter can be value of :
  *           @ref PWR_WakeUp_Pins
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8007444:	4b05      	ldr	r3, [pc, #20]	; (800745c <HAL_PWR_EnableWakeUpPin+0x20>)
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	4904      	ldr	r1, [pc, #16]	; (800745c <HAL_PWR_EnableWakeUpPin+0x20>)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4313      	orrs	r3, r2
 800744e:	604b      	str	r3, [r1, #4]
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	40007000 	.word	0x40007000

08007460 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be values of :
  *           @ref PWR_WakeUp_Pins
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8007468:	4b06      	ldr	r3, [pc, #24]	; (8007484 <HAL_PWR_DisableWakeUpPin+0x24>)
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	43db      	mvns	r3, r3
 8007470:	4904      	ldr	r1, [pc, #16]	; (8007484 <HAL_PWR_DisableWakeUpPin+0x24>)
 8007472:	4013      	ands	r3, r2
 8007474:	604b      	str	r3, [r1, #4]
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40007000 	.word	0x40007000

08007488 <HAL_PWR_EnterSTANDBYMode>:
  *            Alarm out, or RTC clock calibration out, 
  *          - WKUP pins if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 800748c:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a07      	ldr	r2, [pc, #28]	; (80074b0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007492:	f043 0302 	orr.w	r3, r3, #2
 8007496:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8007498:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	4a05      	ldr	r2, [pc, #20]	; (80074b4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800749e:	f043 0304 	orr.w	r3, r3, #4
 80074a2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80074a4:	bf30      	wfi
}
 80074a6:	bf00      	nop
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	40007000 	.word	0x40007000
 80074b4:	e000ed00 	.word	0xe000ed00

080074b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80074be:	af00      	add	r7, sp, #0
 80074c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80074c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	f001 b823 	b.w	8008524 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 817d 	beq.w	80077ee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80074f4:	4bbc      	ldr	r3, [pc, #752]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f003 030c 	and.w	r3, r3, #12
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d00c      	beq.n	800751a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007500:	4bb9      	ldr	r3, [pc, #740]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f003 030c 	and.w	r3, r3, #12
 8007508:	2b08      	cmp	r3, #8
 800750a:	d15c      	bne.n	80075c6 <HAL_RCC_OscConfig+0x10e>
 800750c:	4bb6      	ldr	r3, [pc, #728]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007518:	d155      	bne.n	80075c6 <HAL_RCC_OscConfig+0x10e>
 800751a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800751e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007522:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007526:	fa93 f3a3 	rbit	r3, r3
 800752a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800752e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007532:	fab3 f383 	clz	r3, r3
 8007536:	b2db      	uxtb	r3, r3
 8007538:	095b      	lsrs	r3, r3, #5
 800753a:	b2db      	uxtb	r3, r3
 800753c:	f043 0301 	orr.w	r3, r3, #1
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b01      	cmp	r3, #1
 8007544:	d102      	bne.n	800754c <HAL_RCC_OscConfig+0x94>
 8007546:	4ba8      	ldr	r3, [pc, #672]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	e015      	b.n	8007578 <HAL_RCC_OscConfig+0xc0>
 800754c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007550:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007554:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007558:	fa93 f3a3 	rbit	r3, r3
 800755c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007564:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007568:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800756c:	fa93 f3a3 	rbit	r3, r3
 8007570:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007574:	4b9c      	ldr	r3, [pc, #624]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800757c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007580:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007584:	fa92 f2a2 	rbit	r2, r2
 8007588:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800758c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007590:	fab2 f282 	clz	r2, r2
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	f042 0220 	orr.w	r2, r2, #32
 800759a:	b2d2      	uxtb	r2, r2
 800759c:	f002 021f 	and.w	r2, r2, #31
 80075a0:	2101      	movs	r1, #1
 80075a2:	fa01 f202 	lsl.w	r2, r1, r2
 80075a6:	4013      	ands	r3, r2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 811f 	beq.w	80077ec <HAL_RCC_OscConfig+0x334>
 80075ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f040 8116 	bne.w	80077ec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	f000 bfaf 	b.w	8008524 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d6:	d106      	bne.n	80075e6 <HAL_RCC_OscConfig+0x12e>
 80075d8:	4b83      	ldr	r3, [pc, #524]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a82      	ldr	r2, [pc, #520]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 80075de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	e036      	b.n	8007654 <HAL_RCC_OscConfig+0x19c>
 80075e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10c      	bne.n	8007610 <HAL_RCC_OscConfig+0x158>
 80075f6:	4b7c      	ldr	r3, [pc, #496]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a7b      	ldr	r2, [pc, #492]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 80075fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	4b79      	ldr	r3, [pc, #484]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a78      	ldr	r2, [pc, #480]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 8007608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	e021      	b.n	8007654 <HAL_RCC_OscConfig+0x19c>
 8007610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007620:	d10c      	bne.n	800763c <HAL_RCC_OscConfig+0x184>
 8007622:	4b71      	ldr	r3, [pc, #452]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a70      	ldr	r2, [pc, #448]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 8007628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	4b6e      	ldr	r3, [pc, #440]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a6d      	ldr	r2, [pc, #436]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 8007634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	e00b      	b.n	8007654 <HAL_RCC_OscConfig+0x19c>
 800763c:	4b6a      	ldr	r3, [pc, #424]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a69      	ldr	r2, [pc, #420]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 8007642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	4b67      	ldr	r3, [pc, #412]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a66      	ldr	r2, [pc, #408]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 800764e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007652:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007654:	4b64      	ldr	r3, [pc, #400]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	f023 020f 	bic.w	r2, r3, #15
 800765c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	495f      	ldr	r1, [pc, #380]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 800766a:	4313      	orrs	r3, r2
 800766c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800766e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d059      	beq.n	8007732 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800767e:	f7fb f935 	bl	80028ec <HAL_GetTick>
 8007682:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007686:	e00a      	b.n	800769e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007688:	f7fb f930 	bl	80028ec <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b64      	cmp	r3, #100	; 0x64
 8007696:	d902      	bls.n	800769e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	f000 bf43 	b.w	8008524 <HAL_RCC_OscConfig+0x106c>
 800769e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80076aa:	fa93 f3a3 	rbit	r3, r3
 80076ae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80076b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076b6:	fab3 f383 	clz	r3, r3
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	095b      	lsrs	r3, r3, #5
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	f043 0301 	orr.w	r3, r3, #1
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d102      	bne.n	80076d0 <HAL_RCC_OscConfig+0x218>
 80076ca:	4b47      	ldr	r3, [pc, #284]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	e015      	b.n	80076fc <HAL_RCC_OscConfig+0x244>
 80076d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076d4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80076dc:	fa93 f3a3 	rbit	r3, r3
 80076e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80076e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076e8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80076ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80076f0:	fa93 f3a3 	rbit	r3, r3
 80076f4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80076f8:	4b3b      	ldr	r3, [pc, #236]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007700:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007704:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007708:	fa92 f2a2 	rbit	r2, r2
 800770c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007710:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007714:	fab2 f282 	clz	r2, r2
 8007718:	b2d2      	uxtb	r2, r2
 800771a:	f042 0220 	orr.w	r2, r2, #32
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	f002 021f 	and.w	r2, r2, #31
 8007724:	2101      	movs	r1, #1
 8007726:	fa01 f202 	lsl.w	r2, r1, r2
 800772a:	4013      	ands	r3, r2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0ab      	beq.n	8007688 <HAL_RCC_OscConfig+0x1d0>
 8007730:	e05d      	b.n	80077ee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007732:	f7fb f8db 	bl	80028ec <HAL_GetTick>
 8007736:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800773a:	e00a      	b.n	8007752 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800773c:	f7fb f8d6 	bl	80028ec <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	2b64      	cmp	r3, #100	; 0x64
 800774a:	d902      	bls.n	8007752 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	f000 bee9 	b.w	8008524 <HAL_RCC_OscConfig+0x106c>
 8007752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007756:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800775a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800775e:	fa93 f3a3 	rbit	r3, r3
 8007762:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007766:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800776a:	fab3 f383 	clz	r3, r3
 800776e:	b2db      	uxtb	r3, r3
 8007770:	095b      	lsrs	r3, r3, #5
 8007772:	b2db      	uxtb	r3, r3
 8007774:	f043 0301 	orr.w	r3, r3, #1
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b01      	cmp	r3, #1
 800777c:	d102      	bne.n	8007784 <HAL_RCC_OscConfig+0x2cc>
 800777e:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	e015      	b.n	80077b0 <HAL_RCC_OscConfig+0x2f8>
 8007784:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007788:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800778c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007790:	fa93 f3a3 	rbit	r3, r3
 8007794:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800779c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80077a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80077a4:	fa93 f3a3 	rbit	r3, r3
 80077a8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80077ac:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <HAL_RCC_OscConfig+0x330>)
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80077b4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80077b8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80077bc:	fa92 f2a2 	rbit	r2, r2
 80077c0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80077c4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80077c8:	fab2 f282 	clz	r2, r2
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	f042 0220 	orr.w	r2, r2, #32
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	f002 021f 	and.w	r2, r2, #31
 80077d8:	2101      	movs	r1, #1
 80077da:	fa01 f202 	lsl.w	r2, r1, r2
 80077de:	4013      	ands	r3, r2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1ab      	bne.n	800773c <HAL_RCC_OscConfig+0x284>
 80077e4:	e003      	b.n	80077ee <HAL_RCC_OscConfig+0x336>
 80077e6:	bf00      	nop
 80077e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 817d 	beq.w	8007afe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007804:	4ba6      	ldr	r3, [pc, #664]	; (8007aa0 <HAL_RCC_OscConfig+0x5e8>)
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f003 030c 	and.w	r3, r3, #12
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007810:	4ba3      	ldr	r3, [pc, #652]	; (8007aa0 <HAL_RCC_OscConfig+0x5e8>)
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f003 030c 	and.w	r3, r3, #12
 8007818:	2b08      	cmp	r3, #8
 800781a:	d172      	bne.n	8007902 <HAL_RCC_OscConfig+0x44a>
 800781c:	4ba0      	ldr	r3, [pc, #640]	; (8007aa0 <HAL_RCC_OscConfig+0x5e8>)
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d16c      	bne.n	8007902 <HAL_RCC_OscConfig+0x44a>
 8007828:	2302      	movs	r3, #2
 800782a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800782e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007832:	fa93 f3a3 	rbit	r3, r3
 8007836:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800783a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800783e:	fab3 f383 	clz	r3, r3
 8007842:	b2db      	uxtb	r3, r3
 8007844:	095b      	lsrs	r3, r3, #5
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b01      	cmp	r3, #1
 8007850:	d102      	bne.n	8007858 <HAL_RCC_OscConfig+0x3a0>
 8007852:	4b93      	ldr	r3, [pc, #588]	; (8007aa0 <HAL_RCC_OscConfig+0x5e8>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	e013      	b.n	8007880 <HAL_RCC_OscConfig+0x3c8>
 8007858:	2302      	movs	r3, #2
 800785a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007862:	fa93 f3a3 	rbit	r3, r3
 8007866:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800786a:	2302      	movs	r3, #2
 800786c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007870:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007874:	fa93 f3a3 	rbit	r3, r3
 8007878:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800787c:	4b88      	ldr	r3, [pc, #544]	; (8007aa0 <HAL_RCC_OscConfig+0x5e8>)
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	2202      	movs	r2, #2
 8007882:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007886:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800788a:	fa92 f2a2 	rbit	r2, r2
 800788e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007892:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007896:	fab2 f282 	clz	r2, r2
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	f042 0220 	orr.w	r2, r2, #32
 80078a0:	b2d2      	uxtb	r2, r2
 80078a2:	f002 021f 	and.w	r2, r2, #31
 80078a6:	2101      	movs	r1, #1
 80078a8:	fa01 f202 	lsl.w	r2, r1, r2
 80078ac:	4013      	ands	r3, r2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <HAL_RCC_OscConfig+0x410>
 80078b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d002      	beq.n	80078c8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	f000 be2e 	b.w	8008524 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078c8:	4b75      	ldr	r3, [pc, #468]	; (8007aa0 <HAL_RCC_OscConfig+0x5e8>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	21f8      	movs	r1, #248	; 0xf8
 80078de:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078e2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80078e6:	fa91 f1a1 	rbit	r1, r1
 80078ea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80078ee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80078f2:	fab1 f181 	clz	r1, r1
 80078f6:	b2c9      	uxtb	r1, r1
 80078f8:	408b      	lsls	r3, r1
 80078fa:	4969      	ldr	r1, [pc, #420]	; (8007aa0 <HAL_RCC_OscConfig+0x5e8>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007900:	e0fd      	b.n	8007afe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007906:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 8088 	beq.w	8007a24 <HAL_RCC_OscConfig+0x56c>
 8007914:	2301      	movs	r3, #1
 8007916:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800791a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800791e:	fa93 f3a3 	rbit	r3, r3
 8007922:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007926:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800792a:	fab3 f383 	clz	r3, r3
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007934:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	461a      	mov	r2, r3
 800793c:	2301      	movs	r3, #1
 800793e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007940:	f7fa ffd4 	bl	80028ec <HAL_GetTick>
 8007944:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007948:	e00a      	b.n	8007960 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800794a:	f7fa ffcf 	bl	80028ec <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d902      	bls.n	8007960 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	f000 bde2 	b.w	8008524 <HAL_RCC_OscConfig+0x106c>
 8007960:	2302      	movs	r3, #2
 8007962:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007966:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800796a:	fa93 f3a3 	rbit	r3, r3
 800796e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007972:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007976:	fab3 f383 	clz	r3, r3
 800797a:	b2db      	uxtb	r3, r3
 800797c:	095b      	lsrs	r3, r3, #5
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f043 0301 	orr.w	r3, r3, #1
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b01      	cmp	r3, #1
 8007988:	d102      	bne.n	8007990 <HAL_RCC_OscConfig+0x4d8>
 800798a:	4b45      	ldr	r3, [pc, #276]	; (8007aa0 <HAL_RCC_OscConfig+0x5e8>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	e013      	b.n	80079b8 <HAL_RCC_OscConfig+0x500>
 8007990:	2302      	movs	r3, #2
 8007992:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007996:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800799a:	fa93 f3a3 	rbit	r3, r3
 800799e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80079a2:	2302      	movs	r3, #2
 80079a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80079a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80079ac:	fa93 f3a3 	rbit	r3, r3
 80079b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80079b4:	4b3a      	ldr	r3, [pc, #232]	; (8007aa0 <HAL_RCC_OscConfig+0x5e8>)
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	2202      	movs	r2, #2
 80079ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80079be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80079c2:	fa92 f2a2 	rbit	r2, r2
 80079c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80079ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80079ce:	fab2 f282 	clz	r2, r2
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	f042 0220 	orr.w	r2, r2, #32
 80079d8:	b2d2      	uxtb	r2, r2
 80079da:	f002 021f 	and.w	r2, r2, #31
 80079de:	2101      	movs	r1, #1
 80079e0:	fa01 f202 	lsl.w	r2, r1, r2
 80079e4:	4013      	ands	r3, r2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0af      	beq.n	800794a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ea:	4b2d      	ldr	r3, [pc, #180]	; (8007aa0 <HAL_RCC_OscConfig+0x5e8>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	21f8      	movs	r1, #248	; 0xf8
 8007a00:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a04:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007a08:	fa91 f1a1 	rbit	r1, r1
 8007a0c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007a10:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007a14:	fab1 f181 	clz	r1, r1
 8007a18:	b2c9      	uxtb	r1, r1
 8007a1a:	408b      	lsls	r3, r1
 8007a1c:	4920      	ldr	r1, [pc, #128]	; (8007aa0 <HAL_RCC_OscConfig+0x5e8>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	600b      	str	r3, [r1, #0]
 8007a22:	e06c      	b.n	8007afe <HAL_RCC_OscConfig+0x646>
 8007a24:	2301      	movs	r3, #1
 8007a26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007a2e:	fa93 f3a3 	rbit	r3, r3
 8007a32:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007a36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a3a:	fab3 f383 	clz	r3, r3
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007a44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a50:	f7fa ff4c 	bl	80028ec <HAL_GetTick>
 8007a54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a58:	e00a      	b.n	8007a70 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a5a:	f7fa ff47 	bl	80028ec <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d902      	bls.n	8007a70 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	f000 bd5a 	b.w	8008524 <HAL_RCC_OscConfig+0x106c>
 8007a70:	2302      	movs	r3, #2
 8007a72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a7a:	fa93 f3a3 	rbit	r3, r3
 8007a7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a86:	fab3 f383 	clz	r3, r3
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	095b      	lsrs	r3, r3, #5
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	f043 0301 	orr.w	r3, r3, #1
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d104      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x5ec>
 8007a9a:	4b01      	ldr	r3, [pc, #4]	; (8007aa0 <HAL_RCC_OscConfig+0x5e8>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	e015      	b.n	8007acc <HAL_RCC_OscConfig+0x614>
 8007aa0:	40021000 	.word	0x40021000
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007aae:	fa93 f3a3 	rbit	r3, r3
 8007ab2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007abc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ac0:	fa93 f3a3 	rbit	r3, r3
 8007ac4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007ac8:	4bc8      	ldr	r3, [pc, #800]	; (8007dec <HAL_RCC_OscConfig+0x934>)
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	2202      	movs	r2, #2
 8007ace:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007ad2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007ad6:	fa92 f2a2 	rbit	r2, r2
 8007ada:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007ade:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007ae2:	fab2 f282 	clz	r2, r2
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	f042 0220 	orr.w	r2, r2, #32
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	f002 021f 	and.w	r2, r2, #31
 8007af2:	2101      	movs	r1, #1
 8007af4:	fa01 f202 	lsl.w	r2, r1, r2
 8007af8:	4013      	ands	r3, r2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1ad      	bne.n	8007a5a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0308 	and.w	r3, r3, #8
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 8110 	beq.w	8007d34 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d079      	beq.n	8007c18 <HAL_RCC_OscConfig+0x760>
 8007b24:	2301      	movs	r3, #1
 8007b26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b2e:	fa93 f3a3 	rbit	r3, r3
 8007b32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b3a:	fab3 f383 	clz	r3, r3
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	461a      	mov	r2, r3
 8007b42:	4bab      	ldr	r3, [pc, #684]	; (8007df0 <HAL_RCC_OscConfig+0x938>)
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	461a      	mov	r2, r3
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b4e:	f7fa fecd 	bl	80028ec <HAL_GetTick>
 8007b52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b56:	e00a      	b.n	8007b6e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b58:	f7fa fec8 	bl	80028ec <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d902      	bls.n	8007b6e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	f000 bcdb 	b.w	8008524 <HAL_RCC_OscConfig+0x106c>
 8007b6e:	2302      	movs	r3, #2
 8007b70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b78:	fa93 f3a3 	rbit	r3, r3
 8007b7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007b88:	2202      	movs	r2, #2
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	fa93 f2a3 	rbit	r2, r3
 8007b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bac:	2202      	movs	r2, #2
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	fa93 f2a3 	rbit	r2, r3
 8007bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007bc6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bc8:	4b88      	ldr	r3, [pc, #544]	; (8007dec <HAL_RCC_OscConfig+0x934>)
 8007bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007bd4:	2102      	movs	r1, #2
 8007bd6:	6019      	str	r1, [r3, #0]
 8007bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bdc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	fa93 f1a3 	rbit	r1, r3
 8007be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007bee:	6019      	str	r1, [r3, #0]
  return result;
 8007bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bf4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	fab3 f383 	clz	r3, r3
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c10:	4013      	ands	r3, r2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d0a0      	beq.n	8007b58 <HAL_RCC_OscConfig+0x6a0>
 8007c16:	e08d      	b.n	8007d34 <HAL_RCC_OscConfig+0x87c>
 8007c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007c20:	2201      	movs	r2, #1
 8007c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	fa93 f2a3 	rbit	r2, r3
 8007c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c3a:	601a      	str	r2, [r3, #0]
  return result;
 8007c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c44:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c46:	fab3 f383 	clz	r3, r3
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4b68      	ldr	r3, [pc, #416]	; (8007df0 <HAL_RCC_OscConfig+0x938>)
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	461a      	mov	r2, r3
 8007c56:	2300      	movs	r3, #0
 8007c58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c5a:	f7fa fe47 	bl	80028ec <HAL_GetTick>
 8007c5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c62:	e00a      	b.n	8007c7a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c64:	f7fa fe42 	bl	80028ec <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d902      	bls.n	8007c7a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	f000 bc55 	b.w	8008524 <HAL_RCC_OscConfig+0x106c>
 8007c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007c82:	2202      	movs	r2, #2
 8007c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	fa93 f2a3 	rbit	r2, r3
 8007c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ca2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	fa93 f2a3 	rbit	r2, r3
 8007cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cca:	2202      	movs	r2, #2
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	fa93 f2a3 	rbit	r2, r3
 8007cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ce0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007ce4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ce6:	4b41      	ldr	r3, [pc, #260]	; (8007dec <HAL_RCC_OscConfig+0x934>)
 8007ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007cf2:	2102      	movs	r1, #2
 8007cf4:	6019      	str	r1, [r3, #0]
 8007cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cfa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	fa93 f1a3 	rbit	r1, r3
 8007d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d08:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007d0c:	6019      	str	r1, [r3, #0]
  return result;
 8007d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d12:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	fab3 f383 	clz	r3, r3
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	f003 031f 	and.w	r3, r3, #31
 8007d28:	2101      	movs	r1, #1
 8007d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d2e:	4013      	ands	r3, r2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d197      	bne.n	8007c64 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 81a1 	beq.w	800808c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d50:	4b26      	ldr	r3, [pc, #152]	; (8007dec <HAL_RCC_OscConfig+0x934>)
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d116      	bne.n	8007d8a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d5c:	4b23      	ldr	r3, [pc, #140]	; (8007dec <HAL_RCC_OscConfig+0x934>)
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	4a22      	ldr	r2, [pc, #136]	; (8007dec <HAL_RCC_OscConfig+0x934>)
 8007d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d66:	61d3      	str	r3, [r2, #28]
 8007d68:	4b20      	ldr	r3, [pc, #128]	; (8007dec <HAL_RCC_OscConfig+0x934>)
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d74:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d7e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007d82:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007d84:	2301      	movs	r3, #1
 8007d86:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d8a:	4b1a      	ldr	r3, [pc, #104]	; (8007df4 <HAL_RCC_OscConfig+0x93c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d11a      	bne.n	8007dcc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d96:	4b17      	ldr	r3, [pc, #92]	; (8007df4 <HAL_RCC_OscConfig+0x93c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a16      	ldr	r2, [pc, #88]	; (8007df4 <HAL_RCC_OscConfig+0x93c>)
 8007d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007da0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007da2:	f7fa fda3 	bl	80028ec <HAL_GetTick>
 8007da6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007daa:	e009      	b.n	8007dc0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dac:	f7fa fd9e 	bl	80028ec <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	2b64      	cmp	r3, #100	; 0x64
 8007dba:	d901      	bls.n	8007dc0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e3b1      	b.n	8008524 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dc0:	4b0c      	ldr	r3, [pc, #48]	; (8007df4 <HAL_RCC_OscConfig+0x93c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0ef      	beq.n	8007dac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d10d      	bne.n	8007df8 <HAL_RCC_OscConfig+0x940>
 8007ddc:	4b03      	ldr	r3, [pc, #12]	; (8007dec <HAL_RCC_OscConfig+0x934>)
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	4a02      	ldr	r2, [pc, #8]	; (8007dec <HAL_RCC_OscConfig+0x934>)
 8007de2:	f043 0301 	orr.w	r3, r3, #1
 8007de6:	6213      	str	r3, [r2, #32]
 8007de8:	e03c      	b.n	8007e64 <HAL_RCC_OscConfig+0x9ac>
 8007dea:	bf00      	nop
 8007dec:	40021000 	.word	0x40021000
 8007df0:	10908120 	.word	0x10908120
 8007df4:	40007000 	.word	0x40007000
 8007df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10c      	bne.n	8007e22 <HAL_RCC_OscConfig+0x96a>
 8007e08:	4bc1      	ldr	r3, [pc, #772]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	4ac0      	ldr	r2, [pc, #768]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007e0e:	f023 0301 	bic.w	r3, r3, #1
 8007e12:	6213      	str	r3, [r2, #32]
 8007e14:	4bbe      	ldr	r3, [pc, #760]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	4abd      	ldr	r2, [pc, #756]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007e1a:	f023 0304 	bic.w	r3, r3, #4
 8007e1e:	6213      	str	r3, [r2, #32]
 8007e20:	e020      	b.n	8007e64 <HAL_RCC_OscConfig+0x9ac>
 8007e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	2b05      	cmp	r3, #5
 8007e30:	d10c      	bne.n	8007e4c <HAL_RCC_OscConfig+0x994>
 8007e32:	4bb7      	ldr	r3, [pc, #732]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	4ab6      	ldr	r2, [pc, #728]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007e38:	f043 0304 	orr.w	r3, r3, #4
 8007e3c:	6213      	str	r3, [r2, #32]
 8007e3e:	4bb4      	ldr	r3, [pc, #720]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	4ab3      	ldr	r2, [pc, #716]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007e44:	f043 0301 	orr.w	r3, r3, #1
 8007e48:	6213      	str	r3, [r2, #32]
 8007e4a:	e00b      	b.n	8007e64 <HAL_RCC_OscConfig+0x9ac>
 8007e4c:	4bb0      	ldr	r3, [pc, #704]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	4aaf      	ldr	r2, [pc, #700]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007e52:	f023 0301 	bic.w	r3, r3, #1
 8007e56:	6213      	str	r3, [r2, #32]
 8007e58:	4bad      	ldr	r3, [pc, #692]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	4aac      	ldr	r2, [pc, #688]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007e5e:	f023 0304 	bic.w	r3, r3, #4
 8007e62:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 8081 	beq.w	8007f78 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e76:	f7fa fd39 	bl	80028ec <HAL_GetTick>
 8007e7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e7e:	e00b      	b.n	8007e98 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e80:	f7fa fd34 	bl	80028ec <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d901      	bls.n	8007e98 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e345      	b.n	8008524 <HAL_RCC_OscConfig+0x106c>
 8007e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ea8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	fa93 f2a3 	rbit	r2, r3
 8007eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eb6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ec0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ecc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	fa93 f2a3 	rbit	r2, r3
 8007ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eda:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007ede:	601a      	str	r2, [r3, #0]
  return result;
 8007ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ee4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007ee8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eea:	fab3 f383 	clz	r3, r3
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	095b      	lsrs	r3, r3, #5
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f043 0302 	orr.w	r3, r3, #2
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d102      	bne.n	8007f04 <HAL_RCC_OscConfig+0xa4c>
 8007efe:	4b84      	ldr	r3, [pc, #528]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	e013      	b.n	8007f2c <HAL_RCC_OscConfig+0xa74>
 8007f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f08:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	fa93 f2a3 	rbit	r2, r3
 8007f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f22:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	4b79      	ldr	r3, [pc, #484]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f30:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007f34:	2102      	movs	r1, #2
 8007f36:	6011      	str	r1, [r2, #0]
 8007f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f3c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007f40:	6812      	ldr	r2, [r2, #0]
 8007f42:	fa92 f1a2 	rbit	r1, r2
 8007f46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f4a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007f4e:	6011      	str	r1, [r2, #0]
  return result;
 8007f50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f54:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007f58:	6812      	ldr	r2, [r2, #0]
 8007f5a:	fab2 f282 	clz	r2, r2
 8007f5e:	b2d2      	uxtb	r2, r2
 8007f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f64:	b2d2      	uxtb	r2, r2
 8007f66:	f002 021f 	and.w	r2, r2, #31
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f70:	4013      	ands	r3, r2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d084      	beq.n	8007e80 <HAL_RCC_OscConfig+0x9c8>
 8007f76:	e07f      	b.n	8008078 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f78:	f7fa fcb8 	bl	80028ec <HAL_GetTick>
 8007f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f80:	e00b      	b.n	8007f9a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f82:	f7fa fcb3 	bl	80028ec <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d901      	bls.n	8007f9a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e2c4      	b.n	8008524 <HAL_RCC_OscConfig+0x106c>
 8007f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f9e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007faa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	fa93 f2a3 	rbit	r2, r3
 8007fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fb8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fc2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	fa93 f2a3 	rbit	r2, r3
 8007fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fdc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007fe0:	601a      	str	r2, [r3, #0]
  return result;
 8007fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fe6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007fea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fec:	fab3 f383 	clz	r3, r3
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	095b      	lsrs	r3, r3, #5
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	f043 0302 	orr.w	r3, r3, #2
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d102      	bne.n	8008006 <HAL_RCC_OscConfig+0xb4e>
 8008000:	4b43      	ldr	r3, [pc, #268]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	e013      	b.n	800802e <HAL_RCC_OscConfig+0xb76>
 8008006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800800a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800800e:	2202      	movs	r2, #2
 8008010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008016:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	fa93 f2a3 	rbit	r2, r3
 8008020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008024:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	4b39      	ldr	r3, [pc, #228]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008032:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8008036:	2102      	movs	r1, #2
 8008038:	6011      	str	r1, [r2, #0]
 800803a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800803e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8008042:	6812      	ldr	r2, [r2, #0]
 8008044:	fa92 f1a2 	rbit	r1, r2
 8008048:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800804c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008050:	6011      	str	r1, [r2, #0]
  return result;
 8008052:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008056:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800805a:	6812      	ldr	r2, [r2, #0]
 800805c:	fab2 f282 	clz	r2, r2
 8008060:	b2d2      	uxtb	r2, r2
 8008062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008066:	b2d2      	uxtb	r2, r2
 8008068:	f002 021f 	and.w	r2, r2, #31
 800806c:	2101      	movs	r1, #1
 800806e:	fa01 f202 	lsl.w	r2, r1, r2
 8008072:	4013      	ands	r3, r2
 8008074:	2b00      	cmp	r3, #0
 8008076:	d184      	bne.n	8007f82 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008078:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800807c:	2b01      	cmp	r3, #1
 800807e:	d105      	bne.n	800808c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008080:	4b23      	ldr	r3, [pc, #140]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	4a22      	ldr	r2, [pc, #136]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 8008086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800808a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800808c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008090:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 8242 	beq.w	8008522 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800809e:	4b1c      	ldr	r3, [pc, #112]	; (8008110 <HAL_RCC_OscConfig+0xc58>)
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f003 030c 	and.w	r3, r3, #12
 80080a6:	2b08      	cmp	r3, #8
 80080a8:	f000 8213 	beq.w	80084d2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69db      	ldr	r3, [r3, #28]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	f040 8162 	bne.w	8008382 <HAL_RCC_OscConfig+0xeca>
 80080be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080c2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80080c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080d0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	fa93 f2a3 	rbit	r2, r3
 80080da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80080e2:	601a      	str	r2, [r3, #0]
  return result;
 80080e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80080ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ee:	fab3 f383 	clz	r3, r3
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80080f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	461a      	mov	r2, r3
 8008100:	2300      	movs	r3, #0
 8008102:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008104:	f7fa fbf2 	bl	80028ec <HAL_GetTick>
 8008108:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800810c:	e00c      	b.n	8008128 <HAL_RCC_OscConfig+0xc70>
 800810e:	bf00      	nop
 8008110:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008114:	f7fa fbea 	bl	80028ec <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e1fd      	b.n	8008524 <HAL_RCC_OscConfig+0x106c>
 8008128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800812c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800813a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	fa93 f2a3 	rbit	r2, r3
 8008144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008148:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800814c:	601a      	str	r2, [r3, #0]
  return result;
 800814e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008152:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008156:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008158:	fab3 f383 	clz	r3, r3
 800815c:	b2db      	uxtb	r3, r3
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f043 0301 	orr.w	r3, r3, #1
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b01      	cmp	r3, #1
 800816a:	d102      	bne.n	8008172 <HAL_RCC_OscConfig+0xcba>
 800816c:	4bb0      	ldr	r3, [pc, #704]	; (8008430 <HAL_RCC_OscConfig+0xf78>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	e027      	b.n	80081c2 <HAL_RCC_OscConfig+0xd0a>
 8008172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008176:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800817a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800817e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008184:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	fa93 f2a3 	rbit	r2, r3
 800818e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008192:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800819c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80081a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	fa93 f2a3 	rbit	r2, r3
 80081b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081b8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	4b9c      	ldr	r3, [pc, #624]	; (8008430 <HAL_RCC_OscConfig+0xf78>)
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081c6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80081ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80081ce:	6011      	str	r1, [r2, #0]
 80081d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081d4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80081d8:	6812      	ldr	r2, [r2, #0]
 80081da:	fa92 f1a2 	rbit	r1, r2
 80081de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081e2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80081e6:	6011      	str	r1, [r2, #0]
  return result;
 80081e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80081f0:	6812      	ldr	r2, [r2, #0]
 80081f2:	fab2 f282 	clz	r2, r2
 80081f6:	b2d2      	uxtb	r2, r2
 80081f8:	f042 0220 	orr.w	r2, r2, #32
 80081fc:	b2d2      	uxtb	r2, r2
 80081fe:	f002 021f 	and.w	r2, r2, #31
 8008202:	2101      	movs	r1, #1
 8008204:	fa01 f202 	lsl.w	r2, r1, r2
 8008208:	4013      	ands	r3, r2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d182      	bne.n	8008114 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800820e:	4b88      	ldr	r3, [pc, #544]	; (8008430 <HAL_RCC_OscConfig+0xf78>)
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800821a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008226:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	430b      	orrs	r3, r1
 8008230:	497f      	ldr	r1, [pc, #508]	; (8008430 <HAL_RCC_OscConfig+0xf78>)
 8008232:	4313      	orrs	r3, r2
 8008234:	604b      	str	r3, [r1, #4]
 8008236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800823a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800823e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008248:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	fa93 f2a3 	rbit	r2, r3
 8008252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008256:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800825a:	601a      	str	r2, [r3, #0]
  return result;
 800825c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008260:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008264:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008266:	fab3 f383 	clz	r3, r3
 800826a:	b2db      	uxtb	r3, r3
 800826c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008270:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	461a      	mov	r2, r3
 8008278:	2301      	movs	r3, #1
 800827a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800827c:	f7fa fb36 	bl	80028ec <HAL_GetTick>
 8008280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008284:	e009      	b.n	800829a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008286:	f7fa fb31 	bl	80028ec <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b02      	cmp	r3, #2
 8008294:	d901      	bls.n	800829a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e144      	b.n	8008524 <HAL_RCC_OscConfig+0x106c>
 800829a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800829e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80082a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80082a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082ac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	fa93 f2a3 	rbit	r2, r3
 80082b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80082be:	601a      	str	r2, [r3, #0]
  return result;
 80082c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082c4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80082c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80082ca:	fab3 f383 	clz	r3, r3
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	095b      	lsrs	r3, r3, #5
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	f043 0301 	orr.w	r3, r3, #1
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d102      	bne.n	80082e4 <HAL_RCC_OscConfig+0xe2c>
 80082de:	4b54      	ldr	r3, [pc, #336]	; (8008430 <HAL_RCC_OscConfig+0xf78>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	e027      	b.n	8008334 <HAL_RCC_OscConfig+0xe7c>
 80082e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082e8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80082ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80082f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082f6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	fa93 f2a3 	rbit	r2, r3
 8008300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008304:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800830e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008312:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800831c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	fa93 f2a3 	rbit	r2, r3
 8008326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800832a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	4b3f      	ldr	r3, [pc, #252]	; (8008430 <HAL_RCC_OscConfig+0xf78>)
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008338:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800833c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008340:	6011      	str	r1, [r2, #0]
 8008342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008346:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800834a:	6812      	ldr	r2, [r2, #0]
 800834c:	fa92 f1a2 	rbit	r1, r2
 8008350:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008354:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008358:	6011      	str	r1, [r2, #0]
  return result;
 800835a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800835e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	fab2 f282 	clz	r2, r2
 8008368:	b2d2      	uxtb	r2, r2
 800836a:	f042 0220 	orr.w	r2, r2, #32
 800836e:	b2d2      	uxtb	r2, r2
 8008370:	f002 021f 	and.w	r2, r2, #31
 8008374:	2101      	movs	r1, #1
 8008376:	fa01 f202 	lsl.w	r2, r1, r2
 800837a:	4013      	ands	r3, r2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d082      	beq.n	8008286 <HAL_RCC_OscConfig+0xdce>
 8008380:	e0cf      	b.n	8008522 <HAL_RCC_OscConfig+0x106a>
 8008382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008386:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800838a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800838e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008394:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	fa93 f2a3 	rbit	r2, r3
 800839e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80083a6:	601a      	str	r2, [r3, #0]
  return result;
 80083a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083ac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80083b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083b2:	fab3 f383 	clz	r3, r3
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80083bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	461a      	mov	r2, r3
 80083c4:	2300      	movs	r3, #0
 80083c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083c8:	f7fa fa90 	bl	80028ec <HAL_GetTick>
 80083cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083d0:	e009      	b.n	80083e6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083d2:	f7fa fa8b 	bl	80028ec <HAL_GetTick>
 80083d6:	4602      	mov	r2, r0
 80083d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d901      	bls.n	80083e6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e09e      	b.n	8008524 <HAL_RCC_OscConfig+0x106c>
 80083e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083ea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80083ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083f8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	fa93 f2a3 	rbit	r2, r3
 8008402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008406:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800840a:	601a      	str	r2, [r3, #0]
  return result;
 800840c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008410:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008414:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008416:	fab3 f383 	clz	r3, r3
 800841a:	b2db      	uxtb	r3, r3
 800841c:	095b      	lsrs	r3, r3, #5
 800841e:	b2db      	uxtb	r3, r3
 8008420:	f043 0301 	orr.w	r3, r3, #1
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b01      	cmp	r3, #1
 8008428:	d104      	bne.n	8008434 <HAL_RCC_OscConfig+0xf7c>
 800842a:	4b01      	ldr	r3, [pc, #4]	; (8008430 <HAL_RCC_OscConfig+0xf78>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	e029      	b.n	8008484 <HAL_RCC_OscConfig+0xfcc>
 8008430:	40021000 	.word	0x40021000
 8008434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008438:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800843c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008446:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	fa93 f2a3 	rbit	r2, r3
 8008450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008454:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800845e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008462:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800846c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	fa93 f2a3 	rbit	r2, r3
 8008476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800847a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	4b2b      	ldr	r3, [pc, #172]	; (8008530 <HAL_RCC_OscConfig+0x1078>)
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008488:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800848c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008490:	6011      	str	r1, [r2, #0]
 8008492:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008496:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	fa92 f1a2 	rbit	r1, r2
 80084a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80084a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80084a8:	6011      	str	r1, [r2, #0]
  return result;
 80084aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80084ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80084b2:	6812      	ldr	r2, [r2, #0]
 80084b4:	fab2 f282 	clz	r2, r2
 80084b8:	b2d2      	uxtb	r2, r2
 80084ba:	f042 0220 	orr.w	r2, r2, #32
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	f002 021f 	and.w	r2, r2, #31
 80084c4:	2101      	movs	r1, #1
 80084c6:	fa01 f202 	lsl.w	r2, r1, r2
 80084ca:	4013      	ands	r3, r2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d180      	bne.n	80083d2 <HAL_RCC_OscConfig+0xf1a>
 80084d0:	e027      	b.n	8008522 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d101      	bne.n	80084e6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e01e      	b.n	8008524 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80084e6:	4b12      	ldr	r3, [pc, #72]	; (8008530 <HAL_RCC_OscConfig+0x1078>)
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80084ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80084f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80084f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	429a      	cmp	r2, r3
 8008504:	d10b      	bne.n	800851e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008506:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800850a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800850e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800851a:	429a      	cmp	r2, r3
 800851c:	d001      	beq.n	8008522 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e000      	b.n	8008524 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40021000 	.word	0x40021000

08008534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b09e      	sub	sp, #120	; 0x78
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e162      	b.n	8008812 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800854c:	4b90      	ldr	r3, [pc, #576]	; (8008790 <HAL_RCC_ClockConfig+0x25c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d910      	bls.n	800857c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800855a:	4b8d      	ldr	r3, [pc, #564]	; (8008790 <HAL_RCC_ClockConfig+0x25c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f023 0207 	bic.w	r2, r3, #7
 8008562:	498b      	ldr	r1, [pc, #556]	; (8008790 <HAL_RCC_ClockConfig+0x25c>)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	4313      	orrs	r3, r2
 8008568:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800856a:	4b89      	ldr	r3, [pc, #548]	; (8008790 <HAL_RCC_ClockConfig+0x25c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0307 	and.w	r3, r3, #7
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	429a      	cmp	r2, r3
 8008576:	d001      	beq.n	800857c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e14a      	b.n	8008812 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d008      	beq.n	800859a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008588:	4b82      	ldr	r3, [pc, #520]	; (8008794 <HAL_RCC_ClockConfig+0x260>)
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	497f      	ldr	r1, [pc, #508]	; (8008794 <HAL_RCC_ClockConfig+0x260>)
 8008596:	4313      	orrs	r3, r2
 8008598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 80dc 	beq.w	8008760 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d13c      	bne.n	800862a <HAL_RCC_ClockConfig+0xf6>
 80085b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085b8:	fa93 f3a3 	rbit	r3, r3
 80085bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80085be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085c0:	fab3 f383 	clz	r3, r3
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	095b      	lsrs	r3, r3, #5
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	f043 0301 	orr.w	r3, r3, #1
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d102      	bne.n	80085da <HAL_RCC_ClockConfig+0xa6>
 80085d4:	4b6f      	ldr	r3, [pc, #444]	; (8008794 <HAL_RCC_ClockConfig+0x260>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	e00f      	b.n	80085fa <HAL_RCC_ClockConfig+0xc6>
 80085da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085e2:	fa93 f3a3 	rbit	r3, r3
 80085e6:	667b      	str	r3, [r7, #100]	; 0x64
 80085e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085ec:	663b      	str	r3, [r7, #96]	; 0x60
 80085ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085f0:	fa93 f3a3 	rbit	r3, r3
 80085f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085f6:	4b67      	ldr	r3, [pc, #412]	; (8008794 <HAL_RCC_ClockConfig+0x260>)
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80085fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8008600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008602:	fa92 f2a2 	rbit	r2, r2
 8008606:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008608:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800860a:	fab2 f282 	clz	r2, r2
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	f042 0220 	orr.w	r2, r2, #32
 8008614:	b2d2      	uxtb	r2, r2
 8008616:	f002 021f 	and.w	r2, r2, #31
 800861a:	2101      	movs	r1, #1
 800861c:	fa01 f202 	lsl.w	r2, r1, r2
 8008620:	4013      	ands	r3, r2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d17b      	bne.n	800871e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e0f3      	b.n	8008812 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d13c      	bne.n	80086ac <HAL_RCC_ClockConfig+0x178>
 8008632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008636:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800863a:	fa93 f3a3 	rbit	r3, r3
 800863e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008642:	fab3 f383 	clz	r3, r3
 8008646:	b2db      	uxtb	r3, r3
 8008648:	095b      	lsrs	r3, r3, #5
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f043 0301 	orr.w	r3, r3, #1
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b01      	cmp	r3, #1
 8008654:	d102      	bne.n	800865c <HAL_RCC_ClockConfig+0x128>
 8008656:	4b4f      	ldr	r3, [pc, #316]	; (8008794 <HAL_RCC_ClockConfig+0x260>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	e00f      	b.n	800867c <HAL_RCC_ClockConfig+0x148>
 800865c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008660:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008664:	fa93 f3a3 	rbit	r3, r3
 8008668:	647b      	str	r3, [r7, #68]	; 0x44
 800866a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800866e:	643b      	str	r3, [r7, #64]	; 0x40
 8008670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008672:	fa93 f3a3 	rbit	r3, r3
 8008676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008678:	4b46      	ldr	r3, [pc, #280]	; (8008794 <HAL_RCC_ClockConfig+0x260>)
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008680:	63ba      	str	r2, [r7, #56]	; 0x38
 8008682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008684:	fa92 f2a2 	rbit	r2, r2
 8008688:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800868a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800868c:	fab2 f282 	clz	r2, r2
 8008690:	b2d2      	uxtb	r2, r2
 8008692:	f042 0220 	orr.w	r2, r2, #32
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	f002 021f 	and.w	r2, r2, #31
 800869c:	2101      	movs	r1, #1
 800869e:	fa01 f202 	lsl.w	r2, r1, r2
 80086a2:	4013      	ands	r3, r2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d13a      	bne.n	800871e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e0b2      	b.n	8008812 <HAL_RCC_ClockConfig+0x2de>
 80086ac:	2302      	movs	r3, #2
 80086ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	fa93 f3a3 	rbit	r3, r3
 80086b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80086b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086ba:	fab3 f383 	clz	r3, r3
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	095b      	lsrs	r3, r3, #5
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	f043 0301 	orr.w	r3, r3, #1
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d102      	bne.n	80086d4 <HAL_RCC_ClockConfig+0x1a0>
 80086ce:	4b31      	ldr	r3, [pc, #196]	; (8008794 <HAL_RCC_ClockConfig+0x260>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	e00d      	b.n	80086f0 <HAL_RCC_ClockConfig+0x1bc>
 80086d4:	2302      	movs	r3, #2
 80086d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	fa93 f3a3 	rbit	r3, r3
 80086de:	627b      	str	r3, [r7, #36]	; 0x24
 80086e0:	2302      	movs	r3, #2
 80086e2:	623b      	str	r3, [r7, #32]
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	fa93 f3a3 	rbit	r3, r3
 80086ea:	61fb      	str	r3, [r7, #28]
 80086ec:	4b29      	ldr	r3, [pc, #164]	; (8008794 <HAL_RCC_ClockConfig+0x260>)
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	2202      	movs	r2, #2
 80086f2:	61ba      	str	r2, [r7, #24]
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	fa92 f2a2 	rbit	r2, r2
 80086fa:	617a      	str	r2, [r7, #20]
  return result;
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	fab2 f282 	clz	r2, r2
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	f042 0220 	orr.w	r2, r2, #32
 8008708:	b2d2      	uxtb	r2, r2
 800870a:	f002 021f 	and.w	r2, r2, #31
 800870e:	2101      	movs	r1, #1
 8008710:	fa01 f202 	lsl.w	r2, r1, r2
 8008714:	4013      	ands	r3, r2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e079      	b.n	8008812 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800871e:	4b1d      	ldr	r3, [pc, #116]	; (8008794 <HAL_RCC_ClockConfig+0x260>)
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f023 0203 	bic.w	r2, r3, #3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	491a      	ldr	r1, [pc, #104]	; (8008794 <HAL_RCC_ClockConfig+0x260>)
 800872c:	4313      	orrs	r3, r2
 800872e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008730:	f7fa f8dc 	bl	80028ec <HAL_GetTick>
 8008734:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008736:	e00a      	b.n	800874e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008738:	f7fa f8d8 	bl	80028ec <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	f241 3288 	movw	r2, #5000	; 0x1388
 8008746:	4293      	cmp	r3, r2
 8008748:	d901      	bls.n	800874e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e061      	b.n	8008812 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800874e:	4b11      	ldr	r3, [pc, #68]	; (8008794 <HAL_RCC_ClockConfig+0x260>)
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f003 020c 	and.w	r2, r3, #12
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	429a      	cmp	r2, r3
 800875e:	d1eb      	bne.n	8008738 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008760:	4b0b      	ldr	r3, [pc, #44]	; (8008790 <HAL_RCC_ClockConfig+0x25c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0307 	and.w	r3, r3, #7
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	429a      	cmp	r2, r3
 800876c:	d214      	bcs.n	8008798 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800876e:	4b08      	ldr	r3, [pc, #32]	; (8008790 <HAL_RCC_ClockConfig+0x25c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f023 0207 	bic.w	r2, r3, #7
 8008776:	4906      	ldr	r1, [pc, #24]	; (8008790 <HAL_RCC_ClockConfig+0x25c>)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	4313      	orrs	r3, r2
 800877c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800877e:	4b04      	ldr	r3, [pc, #16]	; (8008790 <HAL_RCC_ClockConfig+0x25c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0307 	and.w	r3, r3, #7
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	d005      	beq.n	8008798 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e040      	b.n	8008812 <HAL_RCC_ClockConfig+0x2de>
 8008790:	40022000 	.word	0x40022000
 8008794:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0304 	and.w	r3, r3, #4
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d008      	beq.n	80087b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087a4:	4b1d      	ldr	r3, [pc, #116]	; (800881c <HAL_RCC_ClockConfig+0x2e8>)
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	491a      	ldr	r1, [pc, #104]	; (800881c <HAL_RCC_ClockConfig+0x2e8>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0308 	and.w	r3, r3, #8
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d009      	beq.n	80087d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087c2:	4b16      	ldr	r3, [pc, #88]	; (800881c <HAL_RCC_ClockConfig+0x2e8>)
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	00db      	lsls	r3, r3, #3
 80087d0:	4912      	ldr	r1, [pc, #72]	; (800881c <HAL_RCC_ClockConfig+0x2e8>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80087d6:	f000 f85b 	bl	8008890 <HAL_RCC_GetSysClockFreq>
 80087da:	4601      	mov	r1, r0
 80087dc:	4b0f      	ldr	r3, [pc, #60]	; (800881c <HAL_RCC_ClockConfig+0x2e8>)
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087e4:	22f0      	movs	r2, #240	; 0xf0
 80087e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	fa92 f2a2 	rbit	r2, r2
 80087ee:	60fa      	str	r2, [r7, #12]
  return result;
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	fab2 f282 	clz	r2, r2
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	40d3      	lsrs	r3, r2
 80087fa:	4a09      	ldr	r2, [pc, #36]	; (8008820 <HAL_RCC_ClockConfig+0x2ec>)
 80087fc:	5cd3      	ldrb	r3, [r2, r3]
 80087fe:	fa21 f303 	lsr.w	r3, r1, r3
 8008802:	4a08      	ldr	r2, [pc, #32]	; (8008824 <HAL_RCC_ClockConfig+0x2f0>)
 8008804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008806:	4b08      	ldr	r3, [pc, #32]	; (8008828 <HAL_RCC_ClockConfig+0x2f4>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4618      	mov	r0, r3
 800880c:	f7f9 fed6 	bl	80025bc <HAL_InitTick>
  
  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3778      	adds	r7, #120	; 0x78
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	40021000 	.word	0x40021000
 8008820:	08016c74 	.word	0x08016c74
 8008824:	20000000 	.word	0x20000000
 8008828:	20000004 	.word	0x20000004

0800882c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08a      	sub	sp, #40	; 0x28
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8008838:	2302      	movs	r3, #2
 800883a:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800883c:	2303      	movs	r3, #3
 800883e:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8008840:	2300      	movs	r3, #0
 8008842:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8008844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008848:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800884a:	2300      	movs	r3, #0
 800884c:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800884e:	4b0f      	ldr	r3, [pc, #60]	; (800888c <HAL_RCC_MCOConfig+0x60>)
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	4a0e      	ldr	r2, [pc, #56]	; (800888c <HAL_RCC_MCOConfig+0x60>)
 8008854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008858:	6153      	str	r3, [r2, #20]
 800885a:	4b0c      	ldr	r3, [pc, #48]	; (800888c <HAL_RCC_MCOConfig+0x60>)
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008862:	613b      	str	r3, [r7, #16]
 8008864:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8008866:	f107 0314 	add.w	r3, r7, #20
 800886a:	4619      	mov	r1, r3
 800886c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008870:	f7fc fa3c 	bl	8004cec <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8008874:	4b05      	ldr	r3, [pc, #20]	; (800888c <HAL_RCC_MCOConfig+0x60>)
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800887c:	4903      	ldr	r1, [pc, #12]	; (800888c <HAL_RCC_MCOConfig+0x60>)
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	4313      	orrs	r3, r2
 8008882:	604b      	str	r3, [r1, #4]
}
 8008884:	bf00      	nop
 8008886:	3728      	adds	r7, #40	; 0x28
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	40021000 	.word	0x40021000

08008890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008890:	b480      	push	{r7}
 8008892:	b08b      	sub	sp, #44	; 0x2c
 8008894:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	61fb      	str	r3, [r7, #28]
 800889a:	2300      	movs	r3, #0
 800889c:	61bb      	str	r3, [r7, #24]
 800889e:	2300      	movs	r3, #0
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
 80088a2:	2300      	movs	r3, #0
 80088a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80088aa:	4b29      	ldr	r3, [pc, #164]	; (8008950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	f003 030c 	and.w	r3, r3, #12
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d002      	beq.n	80088c0 <HAL_RCC_GetSysClockFreq+0x30>
 80088ba:	2b08      	cmp	r3, #8
 80088bc:	d003      	beq.n	80088c6 <HAL_RCC_GetSysClockFreq+0x36>
 80088be:	e03c      	b.n	800893a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80088c0:	4b24      	ldr	r3, [pc, #144]	; (8008954 <HAL_RCC_GetSysClockFreq+0xc4>)
 80088c2:	623b      	str	r3, [r7, #32]
      break;
 80088c4:	e03c      	b.n	8008940 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80088cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80088d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	fa92 f2a2 	rbit	r2, r2
 80088d8:	607a      	str	r2, [r7, #4]
  return result;
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	fab2 f282 	clz	r2, r2
 80088e0:	b2d2      	uxtb	r2, r2
 80088e2:	40d3      	lsrs	r3, r2
 80088e4:	4a1c      	ldr	r2, [pc, #112]	; (8008958 <HAL_RCC_GetSysClockFreq+0xc8>)
 80088e6:	5cd3      	ldrb	r3, [r2, r3]
 80088e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80088ea:	4b19      	ldr	r3, [pc, #100]	; (8008950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	f003 030f 	and.w	r3, r3, #15
 80088f2:	220f      	movs	r2, #15
 80088f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	fa92 f2a2 	rbit	r2, r2
 80088fc:	60fa      	str	r2, [r7, #12]
  return result;
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	fab2 f282 	clz	r2, r2
 8008904:	b2d2      	uxtb	r2, r2
 8008906:	40d3      	lsrs	r3, r2
 8008908:	4a14      	ldr	r2, [pc, #80]	; (800895c <HAL_RCC_GetSysClockFreq+0xcc>)
 800890a:	5cd3      	ldrb	r3, [r2, r3]
 800890c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d008      	beq.n	800892a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008918:	4a0e      	ldr	r2, [pc, #56]	; (8008954 <HAL_RCC_GetSysClockFreq+0xc4>)
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	fb02 f303 	mul.w	r3, r2, r3
 8008926:	627b      	str	r3, [r7, #36]	; 0x24
 8008928:	e004      	b.n	8008934 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	4a0c      	ldr	r2, [pc, #48]	; (8008960 <HAL_RCC_GetSysClockFreq+0xd0>)
 800892e:	fb02 f303 	mul.w	r3, r2, r3
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	623b      	str	r3, [r7, #32]
      break;
 8008938:	e002      	b.n	8008940 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800893a:	4b06      	ldr	r3, [pc, #24]	; (8008954 <HAL_RCC_GetSysClockFreq+0xc4>)
 800893c:	623b      	str	r3, [r7, #32]
      break;
 800893e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008940:	6a3b      	ldr	r3, [r7, #32]
}
 8008942:	4618      	mov	r0, r3
 8008944:	372c      	adds	r7, #44	; 0x2c
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	40021000 	.word	0x40021000
 8008954:	007a1200 	.word	0x007a1200
 8008958:	08016c8c 	.word	0x08016c8c
 800895c:	08016c9c 	.word	0x08016c9c
 8008960:	003d0900 	.word	0x003d0900

08008964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008964:	b480      	push	{r7}
 8008966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008968:	4b03      	ldr	r3, [pc, #12]	; (8008978 <HAL_RCC_GetHCLKFreq+0x14>)
 800896a:	681b      	ldr	r3, [r3, #0]
}
 800896c:	4618      	mov	r0, r3
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	20000000 	.word	0x20000000

0800897c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008982:	f7ff ffef 	bl	8008964 <HAL_RCC_GetHCLKFreq>
 8008986:	4601      	mov	r1, r0
 8008988:	4b0b      	ldr	r3, [pc, #44]	; (80089b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008990:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008994:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	fa92 f2a2 	rbit	r2, r2
 800899c:	603a      	str	r2, [r7, #0]
  return result;
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	fab2 f282 	clz	r2, r2
 80089a4:	b2d2      	uxtb	r2, r2
 80089a6:	40d3      	lsrs	r3, r2
 80089a8:	4a04      	ldr	r2, [pc, #16]	; (80089bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80089aa:	5cd3      	ldrb	r3, [r2, r3]
 80089ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80089b0:	4618      	mov	r0, r3
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	40021000 	.word	0x40021000
 80089bc:	08016c84 	.word	0x08016c84

080089c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	220f      	movs	r2, #15
 80089ce:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80089d0:	4b12      	ldr	r3, [pc, #72]	; (8008a1c <HAL_RCC_GetClockConfig+0x5c>)
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f003 0203 	and.w	r2, r3, #3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80089dc:	4b0f      	ldr	r3, [pc, #60]	; (8008a1c <HAL_RCC_GetClockConfig+0x5c>)
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80089e8:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <HAL_RCC_GetClockConfig+0x5c>)
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80089f4:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <HAL_RCC_GetClockConfig+0x5c>)
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	08db      	lsrs	r3, r3, #3
 80089fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8008a02:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <HAL_RCC_GetClockConfig+0x60>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0207 	and.w	r2, r3, #7
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	601a      	str	r2, [r3, #0]
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	40021000 	.word	0x40021000
 8008a20:	40022000 	.word	0x40022000

08008a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b092      	sub	sp, #72	; 0x48
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008a34:	2300      	movs	r3, #0
 8008a36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 80d4 	beq.w	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a48:	4b4e      	ldr	r3, [pc, #312]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a4a:	69db      	ldr	r3, [r3, #28]
 8008a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10e      	bne.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a54:	4b4b      	ldr	r3, [pc, #300]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	4a4a      	ldr	r2, [pc, #296]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a5e:	61d3      	str	r3, [r2, #28]
 8008a60:	4b48      	ldr	r3, [pc, #288]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a68:	60bb      	str	r3, [r7, #8]
 8008a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a72:	4b45      	ldr	r3, [pc, #276]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d118      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a7e:	4b42      	ldr	r3, [pc, #264]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a41      	ldr	r2, [pc, #260]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a8a:	f7f9 ff2f 	bl	80028ec <HAL_GetTick>
 8008a8e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a90:	e008      	b.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a92:	f7f9 ff2b 	bl	80028ec <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	2b64      	cmp	r3, #100	; 0x64
 8008a9e:	d901      	bls.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e169      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008aa4:	4b38      	ldr	r3, [pc, #224]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0f0      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008ab0:	4b34      	ldr	r3, [pc, #208]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 8084 	beq.w	8008bca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d07c      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ad0:	4b2c      	ldr	r3, [pc, #176]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ad2:	6a1b      	ldr	r3, [r3, #32]
 8008ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ade:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	fa93 f3a3 	rbit	r3, r3
 8008ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008aea:	fab3 f383 	clz	r3, r3
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	4b26      	ldr	r3, [pc, #152]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008af4:	4413      	add	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	461a      	mov	r2, r3
 8008afa:	2301      	movs	r3, #1
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b06:	fa93 f3a3 	rbit	r3, r3
 8008b0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b0e:	fab3 f383 	clz	r3, r3
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	461a      	mov	r2, r3
 8008b16:	4b1d      	ldr	r3, [pc, #116]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008b18:	4413      	add	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	2300      	movs	r3, #0
 8008b20:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008b22:	4a18      	ldr	r2, [pc, #96]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b26:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d04b      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b32:	f7f9 fedb 	bl	80028ec <HAL_GetTick>
 8008b36:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b38:	e00a      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b3a:	f7f9 fed7 	bl	80028ec <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d901      	bls.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	e113      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008b50:	2302      	movs	r3, #2
 8008b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	fa93 f3a3 	rbit	r3, r3
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	623b      	str	r3, [r7, #32]
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	fa93 f3a3 	rbit	r3, r3
 8008b66:	61fb      	str	r3, [r7, #28]
  return result;
 8008b68:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b6a:	fab3 f383 	clz	r3, r3
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	095b      	lsrs	r3, r3, #5
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	f043 0302 	orr.w	r3, r3, #2
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d108      	bne.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008b7e:	4b01      	ldr	r3, [pc, #4]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	e00d      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008b84:	40021000 	.word	0x40021000
 8008b88:	40007000 	.word	0x40007000
 8008b8c:	10908100 	.word	0x10908100
 8008b90:	2302      	movs	r3, #2
 8008b92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	fa93 f3a3 	rbit	r3, r3
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	4b78      	ldr	r3, [pc, #480]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	613a      	str	r2, [r7, #16]
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	fa92 f2a2 	rbit	r2, r2
 8008baa:	60fa      	str	r2, [r7, #12]
  return result;
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	fab2 f282 	clz	r2, r2
 8008bb2:	b2d2      	uxtb	r2, r2
 8008bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb8:	b2d2      	uxtb	r2, r2
 8008bba:	f002 021f 	and.w	r2, r2, #31
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0b7      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008bca:	4b6d      	ldr	r3, [pc, #436]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	496a      	ldr	r1, [pc, #424]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008bdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d105      	bne.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008be4:	4b66      	ldr	r3, [pc, #408]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	4a65      	ldr	r2, [pc, #404]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d008      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008bfc:	4b60      	ldr	r3, [pc, #384]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c00:	f023 0203 	bic.w	r2, r3, #3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	495d      	ldr	r1, [pc, #372]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d008      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c1a:	4b59      	ldr	r3, [pc, #356]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	4956      	ldr	r1, [pc, #344]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 0304 	and.w	r3, r3, #4
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d008      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008c38:	4b51      	ldr	r3, [pc, #324]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	494e      	ldr	r1, [pc, #312]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d008      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008c56:	4b4a      	ldr	r3, [pc, #296]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	f023 0210 	bic.w	r2, r3, #16
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	4947      	ldr	r1, [pc, #284]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c64:	4313      	orrs	r3, r2
 8008c66:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d008      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008c74:	4b42      	ldr	r3, [pc, #264]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	493f      	ldr	r1, [pc, #252]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d008      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008c92:	4b3b      	ldr	r3, [pc, #236]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c96:	f023 0220 	bic.w	r2, r3, #32
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	4938      	ldr	r1, [pc, #224]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0308 	and.w	r3, r3, #8
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d008      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008cb0:	4b33      	ldr	r3, [pc, #204]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	4930      	ldr	r1, [pc, #192]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0310 	and.w	r3, r3, #16
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d008      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008cce:	4b2c      	ldr	r3, [pc, #176]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	4929      	ldr	r1, [pc, #164]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d008      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008cec:	4b24      	ldr	r3, [pc, #144]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	4921      	ldr	r1, [pc, #132]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d008      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008d0a:	4b1d      	ldr	r3, [pc, #116]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d16:	491a      	ldr	r1, [pc, #104]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d008      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008d28:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d34:	4912      	ldr	r1, [pc, #72]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008d46:	4b0e      	ldr	r3, [pc, #56]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d52:	490b      	ldr	r1, [pc, #44]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d008      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008d64:	4b06      	ldr	r3, [pc, #24]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d70:	4903      	ldr	r1, [pc, #12]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3748      	adds	r7, #72	; 0x48
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	40021000 	.word	0x40021000

08008d84 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e083      	b.n	8008e9e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	7f5b      	ldrb	r3, [r3, #29]
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d105      	bne.n	8008dac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7f9 fb3a 	bl	8002420 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	22ca      	movs	r2, #202	; 0xca
 8008db8:	625a      	str	r2, [r3, #36]	; 0x24
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2253      	movs	r2, #83	; 0x53
 8008dc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f897 	bl	8008ef6 <RTC_EnterInitMode>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d008      	beq.n	8008de0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	22ff      	movs	r2, #255	; 0xff
 8008dd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2204      	movs	r2, #4
 8008dda:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e05e      	b.n	8008e9e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	6812      	ldr	r2, [r2, #0]
 8008dea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008df2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6899      	ldr	r1, [r3, #8]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	431a      	orrs	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	68d2      	ldr	r2, [r2, #12]
 8008e1a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6919      	ldr	r1, [r3, #16]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	041a      	lsls	r2, r3, #16
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10e      	bne.n	8008e6c <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f829 	bl	8008ea6 <HAL_RTC_WaitForSynchro>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d008      	beq.n	8008e6c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	22ff      	movs	r2, #255	; 0xff
 8008e60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2204      	movs	r2, #4
 8008e66:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e018      	b.n	8008e9e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e7a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	699a      	ldr	r2, [r3, #24]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	22ff      	movs	r2, #255	; 0xff
 8008e94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
  }
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68da      	ldr	r2, [r3, #12]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008ec0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008ec2:	f7f9 fd13 	bl	80028ec <HAL_GetTick>
 8008ec6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008ec8:	e009      	b.n	8008ede <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008eca:	f7f9 fd0f 	bl	80028ec <HAL_GetTick>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ed8:	d901      	bls.n	8008ede <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e007      	b.n	8008eee <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f003 0320 	and.w	r3, r3, #32
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0ee      	beq.n	8008eca <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d119      	bne.n	8008f44 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f04f 32ff 	mov.w	r2, #4294967295
 8008f18:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008f1a:	f7f9 fce7 	bl	80028ec <HAL_GetTick>
 8008f1e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008f20:	e009      	b.n	8008f36 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f22:	f7f9 fce3 	bl	80028ec <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f30:	d901      	bls.n	8008f36 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e007      	b.n	8008f46 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d0ee      	beq.n	8008f22 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e09d      	b.n	800909c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d108      	bne.n	8008f7a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f70:	d009      	beq.n	8008f86 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	61da      	str	r2, [r3, #28]
 8008f78:	e005      	b.n	8008f86 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d106      	bne.n	8008fa6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7f9 faa1 	bl	80024e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2202      	movs	r2, #2
 8008faa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fbc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fc6:	d902      	bls.n	8008fce <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	e002      	b.n	8008fd4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fd2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008fdc:	d007      	beq.n	8008fee <HAL_SPI_Init+0xa0>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fe6:	d002      	beq.n	8008fee <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	f003 0302 	and.w	r3, r3, #2
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	431a      	orrs	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800901c:	431a      	orrs	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009026:	431a      	orrs	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a1b      	ldr	r3, [r3, #32]
 800902c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009030:	ea42 0103 	orr.w	r1, r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009038:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	0c1b      	lsrs	r3, r3, #16
 800904a:	f003 0204 	and.w	r2, r3, #4
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	f003 0310 	and.w	r3, r3, #16
 8009056:	431a      	orrs	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800905c:	f003 0308 	and.w	r3, r3, #8
 8009060:	431a      	orrs	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800906a:	ea42 0103 	orr.w	r1, r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	430a      	orrs	r2, r1
 800907a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	69da      	ldr	r2, [r3, #28]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800908a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d101      	bne.n	80090b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e049      	b.n	800914a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d106      	bne.n	80090d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f841 	bl	8009152 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2202      	movs	r2, #2
 80090d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3304      	adds	r3, #4
 80090e0:	4619      	mov	r1, r3
 80090e2:	4610      	mov	r0, r2
 80090e4:	f000 f9f2 	bl	80094cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009152:	b480      	push	{r7}
 8009154:	b083      	sub	sp, #12
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800915a:	bf00      	nop
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
	...

08009168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b01      	cmp	r3, #1
 800917a:	d001      	beq.n	8009180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e04a      	b.n	8009216 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68da      	ldr	r2, [r3, #12]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f042 0201 	orr.w	r2, r2, #1
 8009196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a21      	ldr	r2, [pc, #132]	; (8009224 <HAL_TIM_Base_Start_IT+0xbc>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d018      	beq.n	80091d4 <HAL_TIM_Base_Start_IT+0x6c>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091aa:	d013      	beq.n	80091d4 <HAL_TIM_Base_Start_IT+0x6c>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a1d      	ldr	r2, [pc, #116]	; (8009228 <HAL_TIM_Base_Start_IT+0xc0>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d00e      	beq.n	80091d4 <HAL_TIM_Base_Start_IT+0x6c>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a1c      	ldr	r2, [pc, #112]	; (800922c <HAL_TIM_Base_Start_IT+0xc4>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d009      	beq.n	80091d4 <HAL_TIM_Base_Start_IT+0x6c>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a1a      	ldr	r2, [pc, #104]	; (8009230 <HAL_TIM_Base_Start_IT+0xc8>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d004      	beq.n	80091d4 <HAL_TIM_Base_Start_IT+0x6c>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a19      	ldr	r2, [pc, #100]	; (8009234 <HAL_TIM_Base_Start_IT+0xcc>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d115      	bne.n	8009200 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	689a      	ldr	r2, [r3, #8]
 80091da:	4b17      	ldr	r3, [pc, #92]	; (8009238 <HAL_TIM_Base_Start_IT+0xd0>)
 80091dc:	4013      	ands	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2b06      	cmp	r3, #6
 80091e4:	d015      	beq.n	8009212 <HAL_TIM_Base_Start_IT+0xaa>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091ec:	d011      	beq.n	8009212 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f042 0201 	orr.w	r2, r2, #1
 80091fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091fe:	e008      	b.n	8009212 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0201 	orr.w	r2, r2, #1
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	e000      	b.n	8009214 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009212:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	40012c00 	.word	0x40012c00
 8009228:	40000400 	.word	0x40000400
 800922c:	40000800 	.word	0x40000800
 8009230:	40013400 	.word	0x40013400
 8009234:	40014000 	.word	0x40014000
 8009238:	00010007 	.word	0x00010007

0800923c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	f003 0302 	and.w	r3, r3, #2
 800924e:	2b02      	cmp	r3, #2
 8009250:	d122      	bne.n	8009298 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b02      	cmp	r3, #2
 800925e:	d11b      	bne.n	8009298 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f06f 0202 	mvn.w	r2, #2
 8009268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2201      	movs	r2, #1
 800926e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	f003 0303 	and.w	r3, r3, #3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f905 	bl	800948e <HAL_TIM_IC_CaptureCallback>
 8009284:	e005      	b.n	8009292 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f8f7 	bl	800947a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f908 	bl	80094a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f003 0304 	and.w	r3, r3, #4
 80092a2:	2b04      	cmp	r3, #4
 80092a4:	d122      	bne.n	80092ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f003 0304 	and.w	r3, r3, #4
 80092b0:	2b04      	cmp	r3, #4
 80092b2:	d11b      	bne.n	80092ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f06f 0204 	mvn.w	r2, #4
 80092bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2202      	movs	r2, #2
 80092c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f8db 	bl	800948e <HAL_TIM_IC_CaptureCallback>
 80092d8:	e005      	b.n	80092e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f8cd 	bl	800947a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f8de 	bl	80094a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	f003 0308 	and.w	r3, r3, #8
 80092f6:	2b08      	cmp	r3, #8
 80092f8:	d122      	bne.n	8009340 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f003 0308 	and.w	r3, r3, #8
 8009304:	2b08      	cmp	r3, #8
 8009306:	d11b      	bne.n	8009340 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0208 	mvn.w	r2, #8
 8009310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2204      	movs	r2, #4
 8009316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	f003 0303 	and.w	r3, r3, #3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f8b1 	bl	800948e <HAL_TIM_IC_CaptureCallback>
 800932c:	e005      	b.n	800933a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f8a3 	bl	800947a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f8b4 	bl	80094a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	f003 0310 	and.w	r3, r3, #16
 800934a:	2b10      	cmp	r3, #16
 800934c:	d122      	bne.n	8009394 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f003 0310 	and.w	r3, r3, #16
 8009358:	2b10      	cmp	r3, #16
 800935a:	d11b      	bne.n	8009394 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f06f 0210 	mvn.w	r2, #16
 8009364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2208      	movs	r2, #8
 800936a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f887 	bl	800948e <HAL_TIM_IC_CaptureCallback>
 8009380:	e005      	b.n	800938e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f879 	bl	800947a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f88a 	bl	80094a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d10e      	bne.n	80093c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d107      	bne.n	80093c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f06f 0201 	mvn.w	r2, #1
 80093b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7f8 ffea 	bl	8002394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ca:	2b80      	cmp	r3, #128	; 0x80
 80093cc:	d10e      	bne.n	80093ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d8:	2b80      	cmp	r3, #128	; 0x80
 80093da:	d107      	bne.n	80093ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f90a 	bl	8009600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093fa:	d10e      	bne.n	800941a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009406:	2b80      	cmp	r3, #128	; 0x80
 8009408:	d107      	bne.n	800941a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f8fd 	bl	8009614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009424:	2b40      	cmp	r3, #64	; 0x40
 8009426:	d10e      	bne.n	8009446 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009432:	2b40      	cmp	r3, #64	; 0x40
 8009434:	d107      	bne.n	8009446 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800943e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f838 	bl	80094b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	f003 0320 	and.w	r3, r3, #32
 8009450:	2b20      	cmp	r3, #32
 8009452:	d10e      	bne.n	8009472 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f003 0320 	and.w	r3, r3, #32
 800945e:	2b20      	cmp	r3, #32
 8009460:	d107      	bne.n	8009472 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f06f 0220 	mvn.w	r2, #32
 800946a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f8bd 	bl	80095ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009472:	bf00      	nop
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800948e:	b480      	push	{r7}
 8009490:	b083      	sub	sp, #12
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009496:	bf00      	nop
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b083      	sub	sp, #12
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094aa:	bf00      	nop
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b083      	sub	sp, #12
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094be:	bf00      	nop
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
	...

080094cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a3c      	ldr	r2, [pc, #240]	; (80095d0 <TIM_Base_SetConfig+0x104>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d00f      	beq.n	8009504 <TIM_Base_SetConfig+0x38>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ea:	d00b      	beq.n	8009504 <TIM_Base_SetConfig+0x38>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a39      	ldr	r2, [pc, #228]	; (80095d4 <TIM_Base_SetConfig+0x108>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d007      	beq.n	8009504 <TIM_Base_SetConfig+0x38>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a38      	ldr	r2, [pc, #224]	; (80095d8 <TIM_Base_SetConfig+0x10c>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d003      	beq.n	8009504 <TIM_Base_SetConfig+0x38>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a37      	ldr	r2, [pc, #220]	; (80095dc <TIM_Base_SetConfig+0x110>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d108      	bne.n	8009516 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800950a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a2d      	ldr	r2, [pc, #180]	; (80095d0 <TIM_Base_SetConfig+0x104>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d01b      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009524:	d017      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a2a      	ldr	r2, [pc, #168]	; (80095d4 <TIM_Base_SetConfig+0x108>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d013      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a29      	ldr	r2, [pc, #164]	; (80095d8 <TIM_Base_SetConfig+0x10c>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d00f      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a28      	ldr	r2, [pc, #160]	; (80095dc <TIM_Base_SetConfig+0x110>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d00b      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a27      	ldr	r2, [pc, #156]	; (80095e0 <TIM_Base_SetConfig+0x114>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d007      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a26      	ldr	r2, [pc, #152]	; (80095e4 <TIM_Base_SetConfig+0x118>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d003      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a25      	ldr	r2, [pc, #148]	; (80095e8 <TIM_Base_SetConfig+0x11c>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d108      	bne.n	8009568 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800955c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	4313      	orrs	r3, r2
 8009566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	4313      	orrs	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a10      	ldr	r2, [pc, #64]	; (80095d0 <TIM_Base_SetConfig+0x104>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00f      	beq.n	80095b4 <TIM_Base_SetConfig+0xe8>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a11      	ldr	r2, [pc, #68]	; (80095dc <TIM_Base_SetConfig+0x110>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d00b      	beq.n	80095b4 <TIM_Base_SetConfig+0xe8>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a10      	ldr	r2, [pc, #64]	; (80095e0 <TIM_Base_SetConfig+0x114>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d007      	beq.n	80095b4 <TIM_Base_SetConfig+0xe8>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a0f      	ldr	r2, [pc, #60]	; (80095e4 <TIM_Base_SetConfig+0x118>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d003      	beq.n	80095b4 <TIM_Base_SetConfig+0xe8>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a0e      	ldr	r2, [pc, #56]	; (80095e8 <TIM_Base_SetConfig+0x11c>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d103      	bne.n	80095bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	691a      	ldr	r2, [r3, #16]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	615a      	str	r2, [r3, #20]
}
 80095c2:	bf00      	nop
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	40012c00 	.word	0x40012c00
 80095d4:	40000400 	.word	0x40000400
 80095d8:	40000800 	.word	0x40000800
 80095dc:	40013400 	.word	0x40013400
 80095e0:	40014000 	.word	0x40014000
 80095e4:	40014400 	.word	0x40014400
 80095e8:	40014800 	.word	0x40014800

080095ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009638:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800963c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	b29a      	uxth	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3714      	adds	r7, #20
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009656:	b480      	push	{r7}
 8009658:	b085      	sub	sp, #20
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800965e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009662:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800966a:	b29a      	uxth	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	b29b      	uxth	r3, r3
 8009670:	43db      	mvns	r3, r3
 8009672:	b29b      	uxth	r3, r3
 8009674:	4013      	ands	r3, r2
 8009676:	b29a      	uxth	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800968c:	b084      	sub	sp, #16
 800968e:	b480      	push	{r7}
 8009690:	b083      	sub	sp, #12
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	f107 0014 	add.w	r0, r7, #20
 800969a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	b004      	add	sp, #16
 80096cc:	4770      	bx	lr
	...

080096d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b09d      	sub	sp, #116	; 0x74
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80096f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	78db      	ldrb	r3, [r3, #3]
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d81f      	bhi.n	8009742 <USB_ActivateEndpoint+0x72>
 8009702:	a201      	add	r2, pc, #4	; (adr r2, 8009708 <USB_ActivateEndpoint+0x38>)
 8009704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009708:	08009719 	.word	0x08009719
 800970c:	08009735 	.word	0x08009735
 8009710:	0800974b 	.word	0x0800974b
 8009714:	08009727 	.word	0x08009727
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009718:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800971c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009720:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009724:	e012      	b.n	800974c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009726:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800972a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800972e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009732:	e00b      	b.n	800974c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009734:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800973c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009740:	e004      	b.n	800974c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009748:	e000      	b.n	800974c <USB_ActivateEndpoint+0x7c>
      break;
 800974a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	441a      	add	r2, r3
 8009756:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800975a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800975e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800976a:	b29b      	uxth	r3, r3
 800976c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	b29b      	uxth	r3, r3
 800977c:	b21b      	sxth	r3, r3
 800977e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009786:	b21a      	sxth	r2, r3
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	b21b      	sxth	r3, r3
 800978e:	4313      	orrs	r3, r2
 8009790:	b21b      	sxth	r3, r3
 8009792:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	441a      	add	r2, r3
 80097a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80097a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	7b1b      	ldrb	r3, [r3, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 8149 	bne.w	8009a54 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	785b      	ldrb	r3, [r3, #1]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 8084 	beq.w	80098d4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	61bb      	str	r3, [r7, #24]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	461a      	mov	r2, r3
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	4413      	add	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	011a      	lsls	r2, r3, #4
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	88db      	ldrh	r3, [r3, #6]
 80097f4:	085b      	lsrs	r3, r3, #1
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	005b      	lsls	r3, r3, #1
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	827b      	strh	r3, [r7, #18]
 800980e:	8a7b      	ldrh	r3, [r7, #18]
 8009810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009814:	2b00      	cmp	r3, #0
 8009816:	d01b      	beq.n	8009850 <USB_ActivateEndpoint+0x180>
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	b29b      	uxth	r3, r3
 8009826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800982a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982e:	823b      	strh	r3, [r7, #16]
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	441a      	add	r2, r3
 800983a:	8a3b      	ldrh	r3, [r7, #16]
 800983c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009848:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800984c:	b29b      	uxth	r3, r3
 800984e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	78db      	ldrb	r3, [r3, #3]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d020      	beq.n	800989a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	b29b      	uxth	r3, r3
 8009866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800986a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800986e:	81bb      	strh	r3, [r7, #12]
 8009870:	89bb      	ldrh	r3, [r7, #12]
 8009872:	f083 0320 	eor.w	r3, r3, #32
 8009876:	81bb      	strh	r3, [r7, #12]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	441a      	add	r2, r3
 8009882:	89bb      	ldrh	r3, [r7, #12]
 8009884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800988c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009894:	b29b      	uxth	r3, r3
 8009896:	8013      	strh	r3, [r2, #0]
 8009898:	e2a6      	b.n	8009de8 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098b0:	81fb      	strh	r3, [r7, #14]
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	441a      	add	r2, r3
 80098bc:	89fb      	ldrh	r3, [r7, #14]
 80098be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	8013      	strh	r3, [r2, #0]
 80098d2:	e289      	b.n	8009de8 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	633b      	str	r3, [r7, #48]	; 0x30
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098de:	b29b      	uxth	r3, r3
 80098e0:	461a      	mov	r2, r3
 80098e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e4:	4413      	add	r3, r2
 80098e6:	633b      	str	r3, [r7, #48]	; 0x30
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	011a      	lsls	r2, r3, #4
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	88db      	ldrh	r3, [r3, #6]
 80098fc:	085b      	lsrs	r3, r3, #1
 80098fe:	b29b      	uxth	r3, r3
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	b29a      	uxth	r2, r3
 8009904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009906:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	62bb      	str	r3, [r7, #40]	; 0x28
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009912:	b29b      	uxth	r3, r3
 8009914:	461a      	mov	r2, r3
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	4413      	add	r3, r2
 800991a:	62bb      	str	r3, [r7, #40]	; 0x28
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	011a      	lsls	r2, r3, #4
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	4413      	add	r3, r2
 8009926:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800992a:	627b      	str	r3, [r7, #36]	; 0x24
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d112      	bne.n	800995a <USB_ActivateEndpoint+0x28a>
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	881b      	ldrh	r3, [r3, #0]
 8009938:	b29b      	uxth	r3, r3
 800993a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800993e:	b29a      	uxth	r2, r3
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	801a      	strh	r2, [r3, #0]
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	b29b      	uxth	r3, r3
 800994a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800994e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009952:	b29a      	uxth	r2, r3
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	801a      	strh	r2, [r3, #0]
 8009958:	e02f      	b.n	80099ba <USB_ActivateEndpoint+0x2ea>
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	2b3e      	cmp	r3, #62	; 0x3e
 8009960:	d813      	bhi.n	800998a <USB_ActivateEndpoint+0x2ba>
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	085b      	lsrs	r3, r3, #1
 8009968:	66bb      	str	r3, [r7, #104]	; 0x68
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <USB_ActivateEndpoint+0x2ac>
 8009976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009978:	3301      	adds	r3, #1
 800997a:	66bb      	str	r3, [r7, #104]	; 0x68
 800997c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800997e:	b29b      	uxth	r3, r3
 8009980:	029b      	lsls	r3, r3, #10
 8009982:	b29a      	uxth	r2, r3
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	801a      	strh	r2, [r3, #0]
 8009988:	e017      	b.n	80099ba <USB_ActivateEndpoint+0x2ea>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	095b      	lsrs	r3, r3, #5
 8009990:	66bb      	str	r3, [r7, #104]	; 0x68
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f003 031f 	and.w	r3, r3, #31
 800999a:	2b00      	cmp	r3, #0
 800999c:	d102      	bne.n	80099a4 <USB_ActivateEndpoint+0x2d4>
 800999e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099a0:	3b01      	subs	r3, #1
 80099a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80099a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	029b      	lsls	r3, r3, #10
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80099c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d01b      	beq.n	8009a0a <USB_ActivateEndpoint+0x33a>
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e8:	843b      	strh	r3, [r7, #32]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	441a      	add	r2, r3
 80099f4:	8c3b      	ldrh	r3, [r7, #32]
 80099f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a20:	83fb      	strh	r3, [r7, #30]
 8009a22:	8bfb      	ldrh	r3, [r7, #30]
 8009a24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a28:	83fb      	strh	r3, [r7, #30]
 8009a2a:	8bfb      	ldrh	r3, [r7, #30]
 8009a2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a30:	83fb      	strh	r3, [r7, #30]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	441a      	add	r2, r3
 8009a3c:	8bfb      	ldrh	r3, [r7, #30]
 8009a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	8013      	strh	r3, [r2, #0]
 8009a52:	e1c9      	b.n	8009de8 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	78db      	ldrb	r3, [r3, #3]
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d11e      	bne.n	8009a9a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a72:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	441a      	add	r2, r3
 8009a80:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a8c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	8013      	strh	r3, [r2, #0]
 8009a98:	e01d      	b.n	8009ad6 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	441a      	add	r2, r3
 8009abe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ae6:	4413      	add	r3, r2
 8009ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	011a      	lsls	r2, r3, #4
 8009af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009af8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	891b      	ldrh	r3, [r3, #8]
 8009afe:	085b      	lsrs	r3, r3, #1
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b08:	801a      	strh	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	657b      	str	r3, [r7, #84]	; 0x54
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	461a      	mov	r2, r3
 8009b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b1a:	4413      	add	r3, r2
 8009b1c:	657b      	str	r3, [r7, #84]	; 0x54
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	011a      	lsls	r2, r3, #4
 8009b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009b2c:	653b      	str	r3, [r7, #80]	; 0x50
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	895b      	ldrh	r3, [r3, #10]
 8009b32:	085b      	lsrs	r3, r3, #1
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b3c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	785b      	ldrb	r3, [r3, #1]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f040 8093 	bne.w	8009c6e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d01b      	beq.n	8009b9c <USB_ActivateEndpoint+0x4cc>
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4413      	add	r3, r2
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	441a      	add	r2, r3
 8009b86:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	881b      	ldrh	r3, [r3, #0]
 8009ba8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009baa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d01b      	beq.n	8009bec <USB_ActivateEndpoint+0x51c>
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4413      	add	r3, r2
 8009bbe:	881b      	ldrh	r3, [r3, #0]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bca:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	441a      	add	r2, r3
 8009bd6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009be4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c02:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c0a:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c12:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	441a      	add	r2, r3
 8009c1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4413      	add	r3, r2
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c4a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	441a      	add	r2, r3
 8009c56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	8013      	strh	r3, [r2, #0]
 8009c6c:	e0bc      	b.n	8009de8 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009c7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d01d      	beq.n	8009cc6 <USB_ActivateEndpoint+0x5f6>
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	441a      	add	r2, r3
 8009cae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009cd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d01d      	beq.n	8009d1e <USB_ActivateEndpoint+0x64e>
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	441a      	add	r2, r3
 8009d06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	78db      	ldrb	r3, [r3, #3]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d024      	beq.n	8009d70 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d3c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009d40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d44:	f083 0320 	eor.w	r3, r3, #32
 8009d48:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	441a      	add	r2, r3
 8009d56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	8013      	strh	r3, [r2, #0]
 8009d6e:	e01d      	b.n	8009dac <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	881b      	ldrh	r3, [r3, #0]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	441a      	add	r2, r3
 8009d94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4413      	add	r3, r2
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	441a      	add	r2, r3
 8009dd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009de8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3774      	adds	r7, #116	; 0x74
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b08d      	sub	sp, #52	; 0x34
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	7b1b      	ldrb	r3, [r3, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f040 808e 	bne.w	8009f28 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	785b      	ldrb	r3, [r3, #1]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d044      	beq.n	8009e9e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4413      	add	r3, r2
 8009e1e:	881b      	ldrh	r3, [r3, #0]
 8009e20:	81bb      	strh	r3, [r7, #12]
 8009e22:	89bb      	ldrh	r3, [r7, #12]
 8009e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d01b      	beq.n	8009e64 <USB_DeactivateEndpoint+0x6c>
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4413      	add	r3, r2
 8009e36:	881b      	ldrh	r3, [r3, #0]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e42:	817b      	strh	r3, [r7, #10]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	441a      	add	r2, r3
 8009e4e:	897b      	ldrh	r3, [r7, #10]
 8009e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	881b      	ldrh	r3, [r3, #0]
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e7a:	813b      	strh	r3, [r7, #8]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	441a      	add	r2, r3
 8009e86:	893b      	ldrh	r3, [r7, #8]
 8009e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	8013      	strh	r3, [r2, #0]
 8009e9c:	e192      	b.n	800a1c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	4413      	add	r3, r2
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	827b      	strh	r3, [r7, #18]
 8009eac:	8a7b      	ldrh	r3, [r7, #18]
 8009eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d01b      	beq.n	8009eee <USB_DeactivateEndpoint+0xf6>
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	881b      	ldrh	r3, [r3, #0]
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ecc:	823b      	strh	r3, [r7, #16]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	441a      	add	r2, r3
 8009ed8:	8a3b      	ldrh	r3, [r7, #16]
 8009eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ee2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f04:	81fb      	strh	r3, [r7, #14]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	441a      	add	r2, r3
 8009f10:	89fb      	ldrh	r3, [r7, #14]
 8009f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	8013      	strh	r3, [r2, #0]
 8009f26:	e14d      	b.n	800a1c4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	785b      	ldrb	r3, [r3, #1]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f040 80a5 	bne.w	800a07c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	843b      	strh	r3, [r7, #32]
 8009f40:	8c3b      	ldrh	r3, [r7, #32]
 8009f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d01b      	beq.n	8009f82 <USB_DeactivateEndpoint+0x18a>
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f60:	83fb      	strh	r3, [r7, #30]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	441a      	add	r2, r3
 8009f6c:	8bfb      	ldrh	r3, [r7, #30]
 8009f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	83bb      	strh	r3, [r7, #28]
 8009f90:	8bbb      	ldrh	r3, [r7, #28]
 8009f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d01b      	beq.n	8009fd2 <USB_DeactivateEndpoint+0x1da>
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fb0:	837b      	strh	r3, [r7, #26]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	441a      	add	r2, r3
 8009fbc:	8b7b      	ldrh	r3, [r7, #26]
 8009fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	881b      	ldrh	r3, [r3, #0]
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe8:	833b      	strh	r3, [r7, #24]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	441a      	add	r2, r3
 8009ff4:	8b3b      	ldrh	r3, [r7, #24]
 8009ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a002:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a006:	b29b      	uxth	r3, r3
 800a008:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	881b      	ldrh	r3, [r3, #0]
 800a016:	b29b      	uxth	r3, r3
 800a018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a01c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a020:	82fb      	strh	r3, [r7, #22]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	441a      	add	r2, r3
 800a02c:	8afb      	ldrh	r3, [r7, #22]
 800a02e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a03a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a03e:	b29b      	uxth	r3, r3
 800a040:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a058:	82bb      	strh	r3, [r7, #20]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	441a      	add	r2, r3
 800a064:	8abb      	ldrh	r3, [r7, #20]
 800a066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a06a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a06e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a076:	b29b      	uxth	r3, r3
 800a078:	8013      	strh	r3, [r2, #0]
 800a07a:	e0a3      	b.n	800a1c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a08a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a08c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d01b      	beq.n	800a0cc <USB_DeactivateEndpoint+0x2d4>
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4413      	add	r3, r2
 800a09e:	881b      	ldrh	r3, [r3, #0]
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	441a      	add	r2, r3
 800a0b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a0b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	881b      	ldrh	r3, [r3, #0]
 800a0d8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a0da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d01b      	beq.n	800a11c <USB_DeactivateEndpoint+0x324>
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	881b      	ldrh	r3, [r3, #0]
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fa:	853b      	strh	r3, [r7, #40]	; 0x28
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	441a      	add	r2, r3
 800a106:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a10c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a114:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a118:	b29b      	uxth	r3, r3
 800a11a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a132:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	441a      	add	r2, r3
 800a13e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a150:	b29b      	uxth	r3, r3
 800a152:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	b29b      	uxth	r3, r3
 800a162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a16a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	441a      	add	r2, r3
 800a176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a17c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a188:	b29b      	uxth	r3, r3
 800a18a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	b29b      	uxth	r3, r3
 800a19a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a2:	847b      	strh	r3, [r7, #34]	; 0x22
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	441a      	add	r2, r3
 800a1ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3734      	adds	r7, #52	; 0x34
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b0c2      	sub	sp, #264	; 0x108
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1e0:	6018      	str	r0, [r3, #0]
 800a1e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ea:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	785b      	ldrb	r3, [r3, #1]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	f040 867b 	bne.w	800aef4 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a1fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	699a      	ldr	r2, [r3, #24]
 800a20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	429a      	cmp	r2, r3
 800a218:	d908      	bls.n	800a22c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a21a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a21e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a22a:	e007      	b.n	800a23c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	7b1b      	ldrb	r3, [r3, #12]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d13a      	bne.n	800a2c2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a24c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6959      	ldr	r1, [r3, #20]
 800a258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	88da      	ldrh	r2, [r3, #6]
 800a264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a268:	b29b      	uxth	r3, r3
 800a26a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a26e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a272:	6800      	ldr	r0, [r0, #0]
 800a274:	f001 fc11 	bl	800ba9a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	613b      	str	r3, [r7, #16]
 800a284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a292:	b29b      	uxth	r3, r3
 800a294:	461a      	mov	r2, r3
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	4413      	add	r3, r2
 800a29a:	613b      	str	r3, [r7, #16]
 800a29c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	011a      	lsls	r2, r3, #4
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	801a      	strh	r2, [r3, #0]
 800a2be:	f000 bde3 	b.w	800ae88 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	78db      	ldrb	r3, [r3, #3]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	f040 843a 	bne.w	800ab48 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6a1a      	ldr	r2, [r3, #32]
 800a2e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	f240 83b7 	bls.w	800aa60 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a2f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	4413      	add	r3, r2
 800a30c:	881b      	ldrh	r3, [r3, #0]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a318:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a31c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a320:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a32a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	441a      	add	r2, r3
 800a336:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a33a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a33e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a342:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6a1a      	ldr	r2, [r3, #32]
 800a35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 81b3 	beq.w	800a6fa <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a398:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	633b      	str	r3, [r7, #48]	; 0x30
 800a3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	785b      	ldrb	r3, [r3, #1]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d16d      	bne.n	800a48c <USB_EPStartXfer+0x2ba>
 800a3b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	4413      	add	r3, r2
 800a3d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	011a      	lsls	r2, r3, #4
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a3ea:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d112      	bne.n	800a41a <USB_EPStartXfer+0x248>
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	801a      	strh	r2, [r3, #0]
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	b29b      	uxth	r3, r3
 800a40a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a40e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a412:	b29a      	uxth	r2, r3
 800a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a416:	801a      	strh	r2, [r3, #0]
 800a418:	e05d      	b.n	800a4d6 <USB_EPStartXfer+0x304>
 800a41a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a41e:	2b3e      	cmp	r3, #62	; 0x3e
 800a420:	d817      	bhi.n	800a452 <USB_EPStartXfer+0x280>
 800a422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a426:	085b      	lsrs	r3, r3, #1
 800a428:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d004      	beq.n	800a442 <USB_EPStartXfer+0x270>
 800a438:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a43c:	3301      	adds	r3, #1
 800a43e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a442:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a446:	b29b      	uxth	r3, r3
 800a448:	029b      	lsls	r3, r3, #10
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	801a      	strh	r2, [r3, #0]
 800a450:	e041      	b.n	800a4d6 <USB_EPStartXfer+0x304>
 800a452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a456:	095b      	lsrs	r3, r3, #5
 800a458:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a45c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a460:	f003 031f 	and.w	r3, r3, #31
 800a464:	2b00      	cmp	r3, #0
 800a466:	d104      	bne.n	800a472 <USB_EPStartXfer+0x2a0>
 800a468:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a46c:	3b01      	subs	r3, #1
 800a46e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a472:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a476:	b29b      	uxth	r3, r3
 800a478:	029b      	lsls	r3, r3, #10
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a484:	b29a      	uxth	r2, r3
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	801a      	strh	r2, [r3, #0]
 800a48a:	e024      	b.n	800a4d6 <USB_EPStartXfer+0x304>
 800a48c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	785b      	ldrb	r3, [r3, #1]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d11c      	bne.n	800a4d6 <USB_EPStartXfer+0x304>
 800a49c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	4413      	add	r3, r2
 800a4b2:	633b      	str	r3, [r7, #48]	; 0x30
 800a4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	011a      	lsls	r2, r3, #4
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a4d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	895b      	ldrh	r3, [r3, #10]
 800a4e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6959      	ldr	r1, [r3, #20]
 800a4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a4fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a500:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a504:	6800      	ldr	r0, [r0, #0]
 800a506:	f001 fac8 	bl	800ba9a <USB_WritePMA>
            ep->xfer_buff += len;
 800a50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a50e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	695a      	ldr	r2, [r3, #20]
 800a516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a51a:	441a      	add	r2, r3
 800a51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	6a1a      	ldr	r2, [r3, #32]
 800a534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	429a      	cmp	r2, r3
 800a542:	d90f      	bls.n	800a564 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800a544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	6a1a      	ldr	r2, [r3, #32]
 800a550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a554:	1ad2      	subs	r2, r2, r3
 800a556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	621a      	str	r2, [r3, #32]
 800a562:	e00e      	b.n	800a582 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800a564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	6a1b      	ldr	r3, [r3, #32]
 800a570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2200      	movs	r2, #0
 800a580:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	785b      	ldrb	r3, [r3, #1]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d16d      	bne.n	800a66e <USB_EPStartXfer+0x49c>
 800a592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	61bb      	str	r3, [r7, #24]
 800a59e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	61bb      	str	r3, [r7, #24]
 800a5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	011a      	lsls	r2, r3, #4
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a5cc:	617b      	str	r3, [r7, #20]
 800a5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d112      	bne.n	800a5fc <USB_EPStartXfer+0x42a>
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	801a      	strh	r2, [r3, #0]
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	801a      	strh	r2, [r3, #0]
 800a5fa:	e063      	b.n	800a6c4 <USB_EPStartXfer+0x4f2>
 800a5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a600:	2b3e      	cmp	r3, #62	; 0x3e
 800a602:	d817      	bhi.n	800a634 <USB_EPStartXfer+0x462>
 800a604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a608:	085b      	lsrs	r3, r3, #1
 800a60a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	2b00      	cmp	r3, #0
 800a618:	d004      	beq.n	800a624 <USB_EPStartXfer+0x452>
 800a61a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a61e:	3301      	adds	r3, #1
 800a620:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a628:	b29b      	uxth	r3, r3
 800a62a:	029b      	lsls	r3, r3, #10
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	801a      	strh	r2, [r3, #0]
 800a632:	e047      	b.n	800a6c4 <USB_EPStartXfer+0x4f2>
 800a634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a638:	095b      	lsrs	r3, r3, #5
 800a63a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a642:	f003 031f 	and.w	r3, r3, #31
 800a646:	2b00      	cmp	r3, #0
 800a648:	d104      	bne.n	800a654 <USB_EPStartXfer+0x482>
 800a64a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a64e:	3b01      	subs	r3, #1
 800a650:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a658:	b29b      	uxth	r3, r3
 800a65a:	029b      	lsls	r3, r3, #10
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a666:	b29a      	uxth	r2, r3
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	801a      	strh	r2, [r3, #0]
 800a66c:	e02a      	b.n	800a6c4 <USB_EPStartXfer+0x4f2>
 800a66e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	785b      	ldrb	r3, [r3, #1]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d122      	bne.n	800a6c4 <USB_EPStartXfer+0x4f2>
 800a67e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	623b      	str	r3, [r7, #32]
 800a68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a698:	b29b      	uxth	r3, r3
 800a69a:	461a      	mov	r2, r3
 800a69c:	6a3b      	ldr	r3, [r7, #32]
 800a69e:	4413      	add	r3, r2
 800a6a0:	623b      	str	r3, [r7, #32]
 800a6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	011a      	lsls	r2, r3, #4
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a6b8:	61fb      	str	r3, [r7, #28]
 800a6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	891b      	ldrh	r3, [r3, #8]
 800a6d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6959      	ldr	r1, [r3, #20]
 800a6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a6ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a6ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a6f2:	6800      	ldr	r0, [r0, #0]
 800a6f4:	f001 f9d1 	bl	800ba9a <USB_WritePMA>
 800a6f8:	e3c6      	b.n	800ae88 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	785b      	ldrb	r3, [r3, #1]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d16d      	bne.n	800a7e6 <USB_EPStartXfer+0x614>
 800a70a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a70e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	64bb      	str	r3, [r7, #72]	; 0x48
 800a716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a71a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a724:	b29b      	uxth	r3, r3
 800a726:	461a      	mov	r2, r3
 800a728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a72a:	4413      	add	r3, r2
 800a72c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	011a      	lsls	r2, r3, #4
 800a73c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a73e:	4413      	add	r3, r2
 800a740:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a744:	647b      	str	r3, [r7, #68]	; 0x44
 800a746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d112      	bne.n	800a774 <USB_EPStartXfer+0x5a2>
 800a74e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	b29b      	uxth	r3, r3
 800a754:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a758:	b29a      	uxth	r2, r3
 800a75a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a75c:	801a      	strh	r2, [r3, #0]
 800a75e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	b29b      	uxth	r3, r3
 800a764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a770:	801a      	strh	r2, [r3, #0]
 800a772:	e063      	b.n	800a83c <USB_EPStartXfer+0x66a>
 800a774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a778:	2b3e      	cmp	r3, #62	; 0x3e
 800a77a:	d817      	bhi.n	800a7ac <USB_EPStartXfer+0x5da>
 800a77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a780:	085b      	lsrs	r3, r3, #1
 800a782:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d004      	beq.n	800a79c <USB_EPStartXfer+0x5ca>
 800a792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a796:	3301      	adds	r3, #1
 800a798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a79c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	029b      	lsls	r3, r3, #10
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7a8:	801a      	strh	r2, [r3, #0]
 800a7aa:	e047      	b.n	800a83c <USB_EPStartXfer+0x66a>
 800a7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b0:	095b      	lsrs	r3, r3, #5
 800a7b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ba:	f003 031f 	and.w	r3, r3, #31
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d104      	bne.n	800a7cc <USB_EPStartXfer+0x5fa>
 800a7c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	029b      	lsls	r3, r3, #10
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7e2:	801a      	strh	r2, [r3, #0]
 800a7e4:	e02a      	b.n	800a83c <USB_EPStartXfer+0x66a>
 800a7e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	785b      	ldrb	r3, [r3, #1]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d122      	bne.n	800a83c <USB_EPStartXfer+0x66a>
 800a7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	653b      	str	r3, [r7, #80]	; 0x50
 800a802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a806:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a810:	b29b      	uxth	r3, r3
 800a812:	461a      	mov	r2, r3
 800a814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a816:	4413      	add	r3, r2
 800a818:	653b      	str	r3, [r7, #80]	; 0x50
 800a81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a81e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	011a      	lsls	r2, r3, #4
 800a828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a82a:	4413      	add	r3, r2
 800a82c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a830:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a836:	b29a      	uxth	r2, r3
 800a838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a83a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	891b      	ldrh	r3, [r3, #8]
 800a848:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a84c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6959      	ldr	r1, [r3, #20]
 800a858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a862:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a866:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a86a:	6800      	ldr	r0, [r0, #0]
 800a86c:	f001 f915 	bl	800ba9a <USB_WritePMA>
            ep->xfer_buff += len;
 800a870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	695a      	ldr	r2, [r3, #20]
 800a87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a880:	441a      	add	r2, r3
 800a882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a88e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6a1a      	ldr	r2, [r3, #32]
 800a89a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d90f      	bls.n	800a8ca <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800a8aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6a1a      	ldr	r2, [r3, #32]
 800a8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ba:	1ad2      	subs	r2, r2, r3
 800a8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	621a      	str	r2, [r3, #32]
 800a8c8:	e00e      	b.n	800a8e8 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800a8ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	643b      	str	r3, [r7, #64]	; 0x40
 800a8f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	785b      	ldrb	r3, [r3, #1]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d16d      	bne.n	800a9e0 <USB_EPStartXfer+0x80e>
 800a904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a908:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a914:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a91e:	b29b      	uxth	r3, r3
 800a920:	461a      	mov	r2, r3
 800a922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a924:	4413      	add	r3, r2
 800a926:	63bb      	str	r3, [r7, #56]	; 0x38
 800a928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a92c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	011a      	lsls	r2, r3, #4
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	4413      	add	r3, r2
 800a93a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a93e:	637b      	str	r3, [r7, #52]	; 0x34
 800a940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a944:	2b00      	cmp	r3, #0
 800a946:	d112      	bne.n	800a96e <USB_EPStartXfer+0x79c>
 800a948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94a:	881b      	ldrh	r3, [r3, #0]
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a952:	b29a      	uxth	r2, r3
 800a954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a956:	801a      	strh	r2, [r3, #0]
 800a958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a95a:	881b      	ldrh	r3, [r3, #0]
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a966:	b29a      	uxth	r2, r3
 800a968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96a:	801a      	strh	r2, [r3, #0]
 800a96c:	e05d      	b.n	800aa2a <USB_EPStartXfer+0x858>
 800a96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a972:	2b3e      	cmp	r3, #62	; 0x3e
 800a974:	d817      	bhi.n	800a9a6 <USB_EPStartXfer+0x7d4>
 800a976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97a:	085b      	lsrs	r3, r3, #1
 800a97c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a984:	f003 0301 	and.w	r3, r3, #1
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d004      	beq.n	800a996 <USB_EPStartXfer+0x7c4>
 800a98c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a990:	3301      	adds	r3, #1
 800a992:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	029b      	lsls	r3, r3, #10
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a2:	801a      	strh	r2, [r3, #0]
 800a9a4:	e041      	b.n	800aa2a <USB_EPStartXfer+0x858>
 800a9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9aa:	095b      	lsrs	r3, r3, #5
 800a9ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b4:	f003 031f 	and.w	r3, r3, #31
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d104      	bne.n	800a9c6 <USB_EPStartXfer+0x7f4>
 800a9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	029b      	lsls	r3, r3, #10
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9dc:	801a      	strh	r2, [r3, #0]
 800a9de:	e024      	b.n	800aa2a <USB_EPStartXfer+0x858>
 800a9e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	785b      	ldrb	r3, [r3, #1]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d11c      	bne.n	800aa2a <USB_EPStartXfer+0x858>
 800a9f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	461a      	mov	r2, r3
 800aa02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa04:	4413      	add	r3, r2
 800aa06:	643b      	str	r3, [r7, #64]	; 0x40
 800aa08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	011a      	lsls	r2, r3, #4
 800aa16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa18:	4413      	add	r3, r2
 800aa1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aa1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa24:	b29a      	uxth	r2, r3
 800aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aa2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	895b      	ldrh	r3, [r3, #10]
 800aa36:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6959      	ldr	r1, [r3, #20]
 800aa46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa50:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aa54:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aa58:	6800      	ldr	r0, [r0, #0]
 800aa5a:	f001 f81e 	bl	800ba9a <USB_WritePMA>
 800aa5e:	e213      	b.n	800ae88 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aa60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6a1b      	ldr	r3, [r3, #32]
 800aa6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aa70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aa92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa96:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aa9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	441a      	add	r2, r3
 800aab4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aabc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aacc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aadc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	461a      	mov	r2, r3
 800aaea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaec:	4413      	add	r3, r2
 800aaee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aaf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	011a      	lsls	r2, r3, #4
 800aafe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab00:	4413      	add	r3, r2
 800ab02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab06:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab0c:	b29a      	uxth	r2, r3
 800ab0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ab12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	891b      	ldrh	r3, [r3, #8]
 800ab1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	6959      	ldr	r1, [r3, #20]
 800ab2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ab3c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ab40:	6800      	ldr	r0, [r0, #0]
 800ab42:	f000 ffaa 	bl	800ba9a <USB_WritePMA>
 800ab46:	e19f      	b.n	800ae88 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ab48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6a1a      	ldr	r2, [r3, #32]
 800ab54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab58:	1ad2      	subs	r2, r2, r3
 800ab5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	4413      	add	r3, r2
 800ab80:	881b      	ldrh	r3, [r3, #0]
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 80bc 	beq.w	800ad06 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	673b      	str	r3, [r7, #112]	; 0x70
 800ab9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	785b      	ldrb	r3, [r3, #1]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d16d      	bne.n	800ac86 <USB_EPStartXfer+0xab4>
 800abaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	66bb      	str	r3, [r7, #104]	; 0x68
 800abb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	461a      	mov	r2, r3
 800abc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abca:	4413      	add	r3, r2
 800abcc:	66bb      	str	r3, [r7, #104]	; 0x68
 800abce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	011a      	lsls	r2, r3, #4
 800abdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abde:	4413      	add	r3, r2
 800abe0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800abe4:	667b      	str	r3, [r7, #100]	; 0x64
 800abe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abea:	2b00      	cmp	r3, #0
 800abec:	d112      	bne.n	800ac14 <USB_EPStartXfer+0xa42>
 800abee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abf0:	881b      	ldrh	r3, [r3, #0]
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abfc:	801a      	strh	r2, [r3, #0]
 800abfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac10:	801a      	strh	r2, [r3, #0]
 800ac12:	e05d      	b.n	800acd0 <USB_EPStartXfer+0xafe>
 800ac14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac18:	2b3e      	cmp	r3, #62	; 0x3e
 800ac1a:	d817      	bhi.n	800ac4c <USB_EPStartXfer+0xa7a>
 800ac1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac20:	085b      	lsrs	r3, r3, #1
 800ac22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d004      	beq.n	800ac3c <USB_EPStartXfer+0xa6a>
 800ac32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac36:	3301      	adds	r3, #1
 800ac38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	029b      	lsls	r3, r3, #10
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac48:	801a      	strh	r2, [r3, #0]
 800ac4a:	e041      	b.n	800acd0 <USB_EPStartXfer+0xafe>
 800ac4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac50:	095b      	lsrs	r3, r3, #5
 800ac52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac5a:	f003 031f 	and.w	r3, r3, #31
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d104      	bne.n	800ac6c <USB_EPStartXfer+0xa9a>
 800ac62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac66:	3b01      	subs	r3, #1
 800ac68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	029b      	lsls	r3, r3, #10
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac82:	801a      	strh	r2, [r3, #0]
 800ac84:	e024      	b.n	800acd0 <USB_EPStartXfer+0xafe>
 800ac86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	785b      	ldrb	r3, [r3, #1]
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d11c      	bne.n	800acd0 <USB_EPStartXfer+0xafe>
 800ac96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	461a      	mov	r2, r3
 800aca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acaa:	4413      	add	r3, r2
 800acac:	673b      	str	r3, [r7, #112]	; 0x70
 800acae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	011a      	lsls	r2, r3, #4
 800acbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acbe:	4413      	add	r3, r2
 800acc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800acc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800acc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acca:	b29a      	uxth	r2, r3
 800accc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800acd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	895b      	ldrh	r3, [r3, #10]
 800acdc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ace0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6959      	ldr	r1, [r3, #20]
 800acec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800acf6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800acfa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800acfe:	6800      	ldr	r0, [r0, #0]
 800ad00:	f000 fecb 	bl	800ba9a <USB_WritePMA>
 800ad04:	e0c0      	b.n	800ae88 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	785b      	ldrb	r3, [r3, #1]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d16d      	bne.n	800adf2 <USB_EPStartXfer+0xc20>
 800ad16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	461a      	mov	r2, r3
 800ad34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad36:	4413      	add	r3, r2
 800ad38:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	011a      	lsls	r2, r3, #4
 800ad48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad50:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d112      	bne.n	800ad80 <USB_EPStartXfer+0xbae>
 800ad5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad68:	801a      	strh	r2, [r3, #0]
 800ad6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad7c:	801a      	strh	r2, [r3, #0]
 800ad7e:	e069      	b.n	800ae54 <USB_EPStartXfer+0xc82>
 800ad80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad84:	2b3e      	cmp	r3, #62	; 0x3e
 800ad86:	d817      	bhi.n	800adb8 <USB_EPStartXfer+0xbe6>
 800ad88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad8c:	085b      	lsrs	r3, r3, #1
 800ad8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad96:	f003 0301 	and.w	r3, r3, #1
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d004      	beq.n	800ada8 <USB_EPStartXfer+0xbd6>
 800ad9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ada2:	3301      	adds	r3, #1
 800ada4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ada8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800adac:	b29b      	uxth	r3, r3
 800adae:	029b      	lsls	r3, r3, #10
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adb4:	801a      	strh	r2, [r3, #0]
 800adb6:	e04d      	b.n	800ae54 <USB_EPStartXfer+0xc82>
 800adb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adbc:	095b      	lsrs	r3, r3, #5
 800adbe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800adc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc6:	f003 031f 	and.w	r3, r3, #31
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d104      	bne.n	800add8 <USB_EPStartXfer+0xc06>
 800adce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800add2:	3b01      	subs	r3, #1
 800add4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800add8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800addc:	b29b      	uxth	r3, r3
 800adde:	029b      	lsls	r3, r3, #10
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ade6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adea:	b29a      	uxth	r2, r3
 800adec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adee:	801a      	strh	r2, [r3, #0]
 800adf0:	e030      	b.n	800ae54 <USB_EPStartXfer+0xc82>
 800adf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	785b      	ldrb	r3, [r3, #1]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d128      	bne.n	800ae54 <USB_EPStartXfer+0xc82>
 800ae02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	461a      	mov	r2, r3
 800ae22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae26:	4413      	add	r3, r2
 800ae28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	011a      	lsls	r2, r3, #4
 800ae3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae3e:	4413      	add	r3, r2
 800ae40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ae44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	891b      	ldrh	r3, [r3, #8]
 800ae60:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	6959      	ldr	r1, [r3, #20]
 800ae70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ae7a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ae7e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ae82:	6800      	ldr	r0, [r0, #0]
 800ae84:	f000 fe09 	bl	800ba9a <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ae88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	881b      	ldrh	r3, [r3, #0]
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aeae:	817b      	strh	r3, [r7, #10]
 800aeb0:	897b      	ldrh	r3, [r7, #10]
 800aeb2:	f083 0310 	eor.w	r3, r3, #16
 800aeb6:	817b      	strh	r3, [r7, #10]
 800aeb8:	897b      	ldrh	r3, [r7, #10]
 800aeba:	f083 0320 	eor.w	r3, r3, #32
 800aebe:	817b      	strh	r3, [r7, #10]
 800aec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	441a      	add	r2, r3
 800aeda:	897b      	ldrh	r3, [r7, #10]
 800aedc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	8013      	strh	r3, [r2, #0]
 800aef0:	f000 bc9f 	b.w	800b832 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800aef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	7b1b      	ldrb	r3, [r3, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	f040 80ae 	bne.w	800b062 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800af06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	699a      	ldr	r2, [r3, #24]
 800af12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d917      	bls.n	800af52 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800af22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800af32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	699a      	ldr	r2, [r3, #24]
 800af3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af42:	1ad2      	subs	r2, r2, r3
 800af44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	619a      	str	r2, [r3, #24]
 800af50:	e00e      	b.n	800af70 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800af52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800af62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2200      	movs	r2, #0
 800af6e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800af70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	461a      	mov	r2, r3
 800af90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af94:	4413      	add	r3, r2
 800af96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	011a      	lsls	r2, r3, #4
 800afa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afac:	4413      	add	r3, r2
 800afae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800afb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800afb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d116      	bne.n	800afec <USB_EPStartXfer+0xe1a>
 800afbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afc2:	881b      	ldrh	r3, [r3, #0]
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afca:	b29a      	uxth	r2, r3
 800afcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afd0:	801a      	strh	r2, [r3, #0]
 800afd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	b29b      	uxth	r3, r3
 800afda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afe8:	801a      	strh	r2, [r3, #0]
 800afea:	e3e8      	b.n	800b7be <USB_EPStartXfer+0x15ec>
 800afec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff0:	2b3e      	cmp	r3, #62	; 0x3e
 800aff2:	d818      	bhi.n	800b026 <USB_EPStartXfer+0xe54>
 800aff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff8:	085b      	lsrs	r3, r3, #1
 800affa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800affe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b002:	f003 0301 	and.w	r3, r3, #1
 800b006:	2b00      	cmp	r3, #0
 800b008:	d004      	beq.n	800b014 <USB_EPStartXfer+0xe42>
 800b00a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b00e:	3301      	adds	r3, #1
 800b010:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b014:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b018:	b29b      	uxth	r3, r3
 800b01a:	029b      	lsls	r3, r3, #10
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b022:	801a      	strh	r2, [r3, #0]
 800b024:	e3cb      	b.n	800b7be <USB_EPStartXfer+0x15ec>
 800b026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02a:	095b      	lsrs	r3, r3, #5
 800b02c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b034:	f003 031f 	and.w	r3, r3, #31
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d104      	bne.n	800b046 <USB_EPStartXfer+0xe74>
 800b03c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b040:	3b01      	subs	r3, #1
 800b042:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b046:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	029b      	lsls	r3, r3, #10
 800b04e:	b29b      	uxth	r3, r3
 800b050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b058:	b29a      	uxth	r2, r3
 800b05a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b05e:	801a      	strh	r2, [r3, #0]
 800b060:	e3ad      	b.n	800b7be <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	78db      	ldrb	r3, [r3, #3]
 800b06e:	2b02      	cmp	r3, #2
 800b070:	f040 8200 	bne.w	800b474 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	785b      	ldrb	r3, [r3, #1]
 800b080:	2b00      	cmp	r3, #0
 800b082:	f040 8091 	bne.w	800b1a8 <USB_EPStartXfer+0xfd6>
 800b086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b08a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b0aa:	4413      	add	r3, r2
 800b0ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	011a      	lsls	r2, r3, #4
 800b0be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b0c2:	4413      	add	r3, r2
 800b0c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b0c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d116      	bne.n	800b10a <USB_EPStartXfer+0xf38>
 800b0dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0e8:	b29a      	uxth	r2, r3
 800b0ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0ee:	801a      	strh	r2, [r3, #0]
 800b0f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b100:	b29a      	uxth	r2, r3
 800b102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b106:	801a      	strh	r2, [r3, #0]
 800b108:	e083      	b.n	800b212 <USB_EPStartXfer+0x1040>
 800b10a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b10e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	2b3e      	cmp	r3, #62	; 0x3e
 800b118:	d820      	bhi.n	800b15c <USB_EPStartXfer+0xf8a>
 800b11a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b11e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	085b      	lsrs	r3, r3, #1
 800b128:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b12c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	f003 0301 	and.w	r3, r3, #1
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d004      	beq.n	800b14a <USB_EPStartXfer+0xf78>
 800b140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b144:	3301      	adds	r3, #1
 800b146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b14a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b14e:	b29b      	uxth	r3, r3
 800b150:	029b      	lsls	r3, r3, #10
 800b152:	b29a      	uxth	r2, r3
 800b154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b158:	801a      	strh	r2, [r3, #0]
 800b15a:	e05a      	b.n	800b212 <USB_EPStartXfer+0x1040>
 800b15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	095b      	lsrs	r3, r3, #5
 800b16a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	f003 031f 	and.w	r3, r3, #31
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d104      	bne.n	800b18c <USB_EPStartXfer+0xfba>
 800b182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b186:	3b01      	subs	r3, #1
 800b188:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b190:	b29b      	uxth	r3, r3
 800b192:	029b      	lsls	r3, r3, #10
 800b194:	b29b      	uxth	r3, r3
 800b196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b19a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1a4:	801a      	strh	r2, [r3, #0]
 800b1a6:	e034      	b.n	800b212 <USB_EPStartXfer+0x1040>
 800b1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	785b      	ldrb	r3, [r3, #1]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d12c      	bne.n	800b212 <USB_EPStartXfer+0x1040>
 800b1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b1dc:	4413      	add	r3, r2
 800b1de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	011a      	lsls	r2, r3, #4
 800b1f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b1fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b210:	801a      	strh	r2, [r3, #0]
 800b212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	785b      	ldrb	r3, [r3, #1]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f040 8091 	bne.w	800b354 <USB_EPStartXfer+0x1182>
 800b232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b24e:	b29b      	uxth	r3, r3
 800b250:	461a      	mov	r2, r3
 800b252:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b256:	4413      	add	r3, r2
 800b258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	011a      	lsls	r2, r3, #4
 800b26a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b26e:	4413      	add	r3, r2
 800b270:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b27c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d116      	bne.n	800b2b6 <USB_EPStartXfer+0x10e4>
 800b288:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b28c:	881b      	ldrh	r3, [r3, #0]
 800b28e:	b29b      	uxth	r3, r3
 800b290:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b294:	b29a      	uxth	r2, r3
 800b296:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b29a:	801a      	strh	r2, [r3, #0]
 800b29c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2a0:	881b      	ldrh	r3, [r3, #0]
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2ac:	b29a      	uxth	r2, r3
 800b2ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2b2:	801a      	strh	r2, [r3, #0]
 800b2b4:	e07c      	b.n	800b3b0 <USB_EPStartXfer+0x11de>
 800b2b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	2b3e      	cmp	r3, #62	; 0x3e
 800b2c4:	d820      	bhi.n	800b308 <USB_EPStartXfer+0x1136>
 800b2c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	691b      	ldr	r3, [r3, #16]
 800b2d2:	085b      	lsrs	r3, r3, #1
 800b2d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	691b      	ldr	r3, [r3, #16]
 800b2e4:	f003 0301 	and.w	r3, r3, #1
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d004      	beq.n	800b2f6 <USB_EPStartXfer+0x1124>
 800b2ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	029b      	lsls	r3, r3, #10
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b304:	801a      	strh	r2, [r3, #0]
 800b306:	e053      	b.n	800b3b0 <USB_EPStartXfer+0x11de>
 800b308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b30c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	095b      	lsrs	r3, r3, #5
 800b316:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b31a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b31e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	f003 031f 	and.w	r3, r3, #31
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d104      	bne.n	800b338 <USB_EPStartXfer+0x1166>
 800b32e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b332:	3b01      	subs	r3, #1
 800b334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	029b      	lsls	r3, r3, #10
 800b340:	b29b      	uxth	r3, r3
 800b342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b350:	801a      	strh	r2, [r3, #0]
 800b352:	e02d      	b.n	800b3b0 <USB_EPStartXfer+0x11de>
 800b354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	785b      	ldrb	r3, [r3, #1]
 800b360:	2b01      	cmp	r3, #1
 800b362:	d125      	bne.n	800b3b0 <USB_EPStartXfer+0x11de>
 800b364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b372:	b29b      	uxth	r3, r3
 800b374:	461a      	mov	r2, r3
 800b376:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b37a:	4413      	add	r3, r2
 800b37c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	011a      	lsls	r2, r3, #4
 800b38e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b392:	4413      	add	r3, r2
 800b394:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b398:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b39c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	691b      	ldr	r3, [r3, #16]
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3ae:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b3b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	69db      	ldr	r3, [r3, #28]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f000 81fe 	beq.w	800b7be <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b3c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4413      	add	r3, r2
 800b3dc:	881b      	ldrh	r3, [r3, #0]
 800b3de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b3e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b3e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d005      	beq.n	800b3fa <USB_EPStartXfer+0x1228>
 800b3ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d10d      	bne.n	800b416 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b3fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b3fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b402:	2b00      	cmp	r3, #0
 800b404:	f040 81db 	bne.w	800b7be <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b408:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b410:	2b00      	cmp	r3, #0
 800b412:	f040 81d4 	bne.w	800b7be <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800b416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b41a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4413      	add	r3, r2
 800b430:	881b      	ldrh	r3, [r3, #0]
 800b432:	b29b      	uxth	r3, r3
 800b434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b43c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	441a      	add	r2, r3
 800b45a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b45e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b46a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b46e:	b29b      	uxth	r3, r3
 800b470:	8013      	strh	r3, [r2, #0]
 800b472:	e1a4      	b.n	800b7be <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	78db      	ldrb	r3, [r3, #3]
 800b480:	2b01      	cmp	r3, #1
 800b482:	f040 819a 	bne.w	800b7ba <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	699a      	ldr	r2, [r3, #24]
 800b492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d917      	bls.n	800b4d2 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800b4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	699a      	ldr	r2, [r3, #24]
 800b4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c2:	1ad2      	subs	r2, r2, r3
 800b4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	619a      	str	r2, [r3, #24]
 800b4d0:	e00e      	b.n	800b4f0 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800b4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b4f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	785b      	ldrb	r3, [r3, #1]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d178      	bne.n	800b5f2 <USB_EPStartXfer+0x1420>
 800b500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b50e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	461a      	mov	r2, r3
 800b520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b524:	4413      	add	r3, r2
 800b526:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b52e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	011a      	lsls	r2, r3, #4
 800b538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b53c:	4413      	add	r3, r2
 800b53e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b542:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d116      	bne.n	800b57c <USB_EPStartXfer+0x13aa>
 800b54e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b552:	881b      	ldrh	r3, [r3, #0]
 800b554:	b29b      	uxth	r3, r3
 800b556:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b560:	801a      	strh	r2, [r3, #0]
 800b562:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b566:	881b      	ldrh	r3, [r3, #0]
 800b568:	b29b      	uxth	r3, r3
 800b56a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b56e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b572:	b29a      	uxth	r2, r3
 800b574:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b578:	801a      	strh	r2, [r3, #0]
 800b57a:	e06b      	b.n	800b654 <USB_EPStartXfer+0x1482>
 800b57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b580:	2b3e      	cmp	r3, #62	; 0x3e
 800b582:	d818      	bhi.n	800b5b6 <USB_EPStartXfer+0x13e4>
 800b584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b588:	085b      	lsrs	r3, r3, #1
 800b58a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b592:	f003 0301 	and.w	r3, r3, #1
 800b596:	2b00      	cmp	r3, #0
 800b598:	d004      	beq.n	800b5a4 <USB_EPStartXfer+0x13d2>
 800b59a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b59e:	3301      	adds	r3, #1
 800b5a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b5a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	029b      	lsls	r3, r3, #10
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5b2:	801a      	strh	r2, [r3, #0]
 800b5b4:	e04e      	b.n	800b654 <USB_EPStartXfer+0x1482>
 800b5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ba:	095b      	lsrs	r3, r3, #5
 800b5bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c4:	f003 031f 	and.w	r3, r3, #31
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d104      	bne.n	800b5d6 <USB_EPStartXfer+0x1404>
 800b5cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b5d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	029b      	lsls	r3, r3, #10
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5ee:	801a      	strh	r2, [r3, #0]
 800b5f0:	e030      	b.n	800b654 <USB_EPStartXfer+0x1482>
 800b5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	785b      	ldrb	r3, [r3, #1]
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d128      	bne.n	800b654 <USB_EPStartXfer+0x1482>
 800b602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b614:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b61e:	b29b      	uxth	r3, r3
 800b620:	461a      	mov	r2, r3
 800b622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b626:	4413      	add	r3, r2
 800b628:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	011a      	lsls	r2, r3, #4
 800b63a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b63e:	4413      	add	r3, r2
 800b640:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b652:	801a      	strh	r2, [r3, #0]
 800b654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	785b      	ldrb	r3, [r3, #1]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d178      	bne.n	800b764 <USB_EPStartXfer+0x1592>
 800b672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b68e:	b29b      	uxth	r3, r3
 800b690:	461a      	mov	r2, r3
 800b692:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b696:	4413      	add	r3, r2
 800b698:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b69c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	011a      	lsls	r2, r3, #4
 800b6aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b6b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d116      	bne.n	800b6ee <USB_EPStartXfer+0x151c>
 800b6c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6c4:	881b      	ldrh	r3, [r3, #0]
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6d2:	801a      	strh	r2, [r3, #0]
 800b6d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6d8:	881b      	ldrh	r3, [r3, #0]
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6ea:	801a      	strh	r2, [r3, #0]
 800b6ec:	e067      	b.n	800b7be <USB_EPStartXfer+0x15ec>
 800b6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f2:	2b3e      	cmp	r3, #62	; 0x3e
 800b6f4:	d818      	bhi.n	800b728 <USB_EPStartXfer+0x1556>
 800b6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fa:	085b      	lsrs	r3, r3, #1
 800b6fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b704:	f003 0301 	and.w	r3, r3, #1
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d004      	beq.n	800b716 <USB_EPStartXfer+0x1544>
 800b70c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b710:	3301      	adds	r3, #1
 800b712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	029b      	lsls	r3, r3, #10
 800b71e:	b29a      	uxth	r2, r3
 800b720:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b724:	801a      	strh	r2, [r3, #0]
 800b726:	e04a      	b.n	800b7be <USB_EPStartXfer+0x15ec>
 800b728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72c:	095b      	lsrs	r3, r3, #5
 800b72e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b736:	f003 031f 	and.w	r3, r3, #31
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d104      	bne.n	800b748 <USB_EPStartXfer+0x1576>
 800b73e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b742:	3b01      	subs	r3, #1
 800b744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b748:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	029b      	lsls	r3, r3, #10
 800b750:	b29b      	uxth	r3, r3
 800b752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b760:	801a      	strh	r2, [r3, #0]
 800b762:	e02c      	b.n	800b7be <USB_EPStartXfer+0x15ec>
 800b764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	785b      	ldrb	r3, [r3, #1]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d124      	bne.n	800b7be <USB_EPStartXfer+0x15ec>
 800b774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b782:	b29b      	uxth	r3, r3
 800b784:	461a      	mov	r2, r3
 800b786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b78a:	4413      	add	r3, r2
 800b78c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	011a      	lsls	r2, r3, #4
 800b79e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b7a2:	4413      	add	r3, r2
 800b7a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b7a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b7b6:	801a      	strh	r2, [r3, #0]
 800b7b8:	e001      	b.n	800b7be <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e03a      	b.n	800b834 <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b7be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4413      	add	r3, r2
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b7e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b7ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b7f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b7f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b7f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b7fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b804:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b80e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	441a      	add	r2, r3
 800b81a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b81e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b82a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b82e:	b29b      	uxth	r3, r3
 800b830:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b83e:	b480      	push	{r7}
 800b840:	b085      	sub	sp, #20
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	785b      	ldrb	r3, [r3, #1]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d020      	beq.n	800b892 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4413      	add	r3, r2
 800b85a:	881b      	ldrh	r3, [r3, #0]
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b866:	81bb      	strh	r3, [r7, #12]
 800b868:	89bb      	ldrh	r3, [r7, #12]
 800b86a:	f083 0310 	eor.w	r3, r3, #16
 800b86e:	81bb      	strh	r3, [r7, #12]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	441a      	add	r2, r3
 800b87a:	89bb      	ldrh	r3, [r7, #12]
 800b87c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	8013      	strh	r3, [r2, #0]
 800b890:	e01f      	b.n	800b8d2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4413      	add	r3, r2
 800b89c:	881b      	ldrh	r3, [r3, #0]
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8a8:	81fb      	strh	r3, [r7, #14]
 800b8aa:	89fb      	ldrh	r3, [r7, #14]
 800b8ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b8b0:	81fb      	strh	r3, [r7, #14]
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	441a      	add	r2, r3
 800b8bc:	89fb      	ldrh	r3, [r7, #14]
 800b8be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	7b1b      	ldrb	r3, [r3, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f040 809d 	bne.w	800ba2e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	785b      	ldrb	r3, [r3, #1]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d04c      	beq.n	800b996 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4413      	add	r3, r2
 800b906:	881b      	ldrh	r3, [r3, #0]
 800b908:	823b      	strh	r3, [r7, #16]
 800b90a:	8a3b      	ldrh	r3, [r7, #16]
 800b90c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b910:	2b00      	cmp	r3, #0
 800b912:	d01b      	beq.n	800b94c <USB_EPClearStall+0x6c>
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4413      	add	r3, r2
 800b91e:	881b      	ldrh	r3, [r3, #0]
 800b920:	b29b      	uxth	r3, r3
 800b922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b92a:	81fb      	strh	r3, [r7, #14]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	441a      	add	r2, r3
 800b936:	89fb      	ldrh	r3, [r7, #14]
 800b938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b93c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b944:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b948:	b29b      	uxth	r3, r3
 800b94a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	78db      	ldrb	r3, [r3, #3]
 800b950:	2b01      	cmp	r3, #1
 800b952:	d06c      	beq.n	800ba2e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	4413      	add	r3, r2
 800b95e:	881b      	ldrh	r3, [r3, #0]
 800b960:	b29b      	uxth	r3, r3
 800b962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b96a:	81bb      	strh	r3, [r7, #12]
 800b96c:	89bb      	ldrh	r3, [r7, #12]
 800b96e:	f083 0320 	eor.w	r3, r3, #32
 800b972:	81bb      	strh	r3, [r7, #12]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	441a      	add	r2, r3
 800b97e:	89bb      	ldrh	r3, [r7, #12]
 800b980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b990:	b29b      	uxth	r3, r3
 800b992:	8013      	strh	r3, [r2, #0]
 800b994:	e04b      	b.n	800ba2e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4413      	add	r3, r2
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	82fb      	strh	r3, [r7, #22]
 800b9a4:	8afb      	ldrh	r3, [r7, #22]
 800b9a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d01b      	beq.n	800b9e6 <USB_EPClearStall+0x106>
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	4413      	add	r3, r2
 800b9b8:	881b      	ldrh	r3, [r3, #0]
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9c4:	82bb      	strh	r3, [r7, #20]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	441a      	add	r2, r3
 800b9d0:	8abb      	ldrh	r3, [r7, #20]
 800b9d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b9de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	4413      	add	r3, r2
 800b9f0:	881b      	ldrh	r3, [r3, #0]
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9fc:	827b      	strh	r3, [r7, #18]
 800b9fe:	8a7b      	ldrh	r3, [r7, #18]
 800ba00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ba04:	827b      	strh	r3, [r7, #18]
 800ba06:	8a7b      	ldrh	r3, [r7, #18]
 800ba08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ba0c:	827b      	strh	r3, [r7, #18]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	441a      	add	r2, r3
 800ba18:	8a7b      	ldrh	r3, [r7, #18]
 800ba1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	371c      	adds	r7, #28
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ba48:	78fb      	ldrb	r3, [r7, #3]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d103      	bne.n	800ba56 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2280      	movs	r2, #128	; 0x80
 800ba52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ba7a:	b480      	push	{r7}
 800ba7c:	b085      	sub	sp, #20
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b08d      	sub	sp, #52	; 0x34
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	60f8      	str	r0, [r7, #12]
 800baa2:	60b9      	str	r1, [r7, #8]
 800baa4:	4611      	mov	r1, r2
 800baa6:	461a      	mov	r2, r3
 800baa8:	460b      	mov	r3, r1
 800baaa:	80fb      	strh	r3, [r7, #6]
 800baac:	4613      	mov	r3, r2
 800baae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bab0:	88bb      	ldrh	r3, [r7, #4]
 800bab2:	3301      	adds	r3, #1
 800bab4:	085b      	lsrs	r3, r3, #1
 800bab6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bac0:	88fb      	ldrh	r3, [r7, #6]
 800bac2:	005a      	lsls	r2, r3, #1
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	4413      	add	r3, r2
 800bac8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bacc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800bace:	6a3b      	ldr	r3, [r7, #32]
 800bad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bad2:	e01e      	b.n	800bb12 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800bad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800bada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800badc:	3301      	adds	r3, #1
 800bade:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	021b      	lsls	r3, r3, #8
 800bae8:	b29b      	uxth	r3, r3
 800baea:	461a      	mov	r2, r3
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	4313      	orrs	r3, r2
 800baf0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	b29a      	uxth	r2, r3
 800baf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafc:	3302      	adds	r3, #2
 800bafe:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	3302      	adds	r3, #2
 800bb04:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800bb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb08:	3301      	adds	r3, #1
 800bb0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d1dd      	bne.n	800bad4 <USB_WritePMA+0x3a>
  }
}
 800bb18:	bf00      	nop
 800bb1a:	bf00      	nop
 800bb1c:	3734      	adds	r7, #52	; 0x34
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr

0800bb26 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b08b      	sub	sp, #44	; 0x2c
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	60f8      	str	r0, [r7, #12]
 800bb2e:	60b9      	str	r1, [r7, #8]
 800bb30:	4611      	mov	r1, r2
 800bb32:	461a      	mov	r2, r3
 800bb34:	460b      	mov	r3, r1
 800bb36:	80fb      	strh	r3, [r7, #6]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bb3c:	88bb      	ldrh	r3, [r7, #4]
 800bb3e:	085b      	lsrs	r3, r3, #1
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb4c:	88fb      	ldrh	r3, [r7, #6]
 800bb4e:	005a      	lsls	r2, r3, #1
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb58:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	627b      	str	r3, [r7, #36]	; 0x24
 800bb5e:	e01b      	b.n	800bb98 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bb60:	6a3b      	ldr	r3, [r7, #32]
 800bb62:	881b      	ldrh	r3, [r3, #0]
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bb68:	6a3b      	ldr	r3, [r7, #32]
 800bb6a:	3302      	adds	r3, #2
 800bb6c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	0a1b      	lsrs	r3, r3, #8
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800bb8c:	6a3b      	ldr	r3, [r7, #32]
 800bb8e:	3302      	adds	r3, #2
 800bb90:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	3b01      	subs	r3, #1
 800bb96:	627b      	str	r3, [r7, #36]	; 0x24
 800bb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1e0      	bne.n	800bb60 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800bb9e:	88bb      	ldrh	r3, [r7, #4]
 800bba0:	f003 0301 	and.w	r3, r3, #1
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d007      	beq.n	800bbba <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	881b      	ldrh	r3, [r3, #0]
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	b2da      	uxtb	r2, r3
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	701a      	strb	r2, [r3, #0]
  }
}
 800bbba:	bf00      	nop
 800bbbc:	372c      	adds	r7, #44	; 0x2c
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b084      	sub	sp, #16
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	460b      	mov	r3, r1
 800bbd0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	7c1b      	ldrb	r3, [r3, #16]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d115      	bne.n	800bc0a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbde:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbe2:	2202      	movs	r2, #2
 800bbe4:	2181      	movs	r1, #129	; 0x81
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f009 fdf5 	bl	80157d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbf6:	2202      	movs	r2, #2
 800bbf8:	2101      	movs	r1, #1
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f009 fdeb 	bl	80157d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800bc08:	e012      	b.n	800bc30 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc0a:	2340      	movs	r3, #64	; 0x40
 800bc0c:	2202      	movs	r2, #2
 800bc0e:	2181      	movs	r1, #129	; 0x81
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f009 fde0 	bl	80157d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc1c:	2340      	movs	r3, #64	; 0x40
 800bc1e:	2202      	movs	r2, #2
 800bc20:	2101      	movs	r1, #1
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f009 fdd7 	bl	80157d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc30:	2308      	movs	r3, #8
 800bc32:	2203      	movs	r2, #3
 800bc34:	2182      	movs	r1, #130	; 0x82
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f009 fdcd 	bl	80157d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc42:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc46:	f009 feef 	bl	8015a28 <USBD_static_malloc>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d102      	bne.n	800bc62 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	73fb      	strb	r3, [r7, #15]
 800bc60:	e026      	b.n	800bcb0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc68:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	7c1b      	ldrb	r3, [r3, #16]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d109      	bne.n	800bca0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc96:	2101      	movs	r1, #1
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f009 fe8e 	bl	80159ba <USBD_LL_PrepareReceive>
 800bc9e:	e007      	b.n	800bcb0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bca6:	2340      	movs	r3, #64	; 0x40
 800bca8:	2101      	movs	r1, #1
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f009 fe85 	bl	80159ba <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bcb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b084      	sub	sp, #16
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bcca:	2181      	movs	r1, #129	; 0x81
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f009 fda8 	bl	8015822 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bcd8:	2101      	movs	r1, #1
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f009 fda1 	bl	8015822 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bce8:	2182      	movs	r1, #130	; 0x82
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f009 fd99 	bl	8015822 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00e      	beq.n	800bd1e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd10:	4618      	mov	r0, r3
 800bd12:	f009 fe97 	bl	8015a44 <USBD_static_free>
    pdev->pClassData = NULL;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd38:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800bd42:	2300      	movs	r3, #0
 800bd44:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d039      	beq.n	800bdc6 <USBD_CDC_Setup+0x9e>
 800bd52:	2b20      	cmp	r3, #32
 800bd54:	d17f      	bne.n	800be56 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	88db      	ldrh	r3, [r3, #6]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d029      	beq.n	800bdb2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	b25b      	sxtb	r3, r3
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	da11      	bge.n	800bd8c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	683a      	ldr	r2, [r7, #0]
 800bd72:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800bd74:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd76:	683a      	ldr	r2, [r7, #0]
 800bd78:	88d2      	ldrh	r2, [r2, #6]
 800bd7a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bd7c:	6939      	ldr	r1, [r7, #16]
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	88db      	ldrh	r3, [r3, #6]
 800bd82:	461a      	mov	r2, r3
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f001 fa14 	bl	800d1b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800bd8a:	e06b      	b.n	800be64 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	785a      	ldrb	r2, [r3, #1]
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	88db      	ldrh	r3, [r3, #6]
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bda2:	6939      	ldr	r1, [r7, #16]
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	88db      	ldrh	r3, [r3, #6]
 800bda8:	461a      	mov	r2, r3
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f001 fa2f 	bl	800d20e <USBD_CtlPrepareRx>
      break;
 800bdb0:	e058      	b.n	800be64 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	7850      	ldrb	r0, [r2, #1]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	4798      	blx	r3
      break;
 800bdc4:	e04e      	b.n	800be64 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	785b      	ldrb	r3, [r3, #1]
 800bdca:	2b0b      	cmp	r3, #11
 800bdcc:	d02e      	beq.n	800be2c <USBD_CDC_Setup+0x104>
 800bdce:	2b0b      	cmp	r3, #11
 800bdd0:	dc38      	bgt.n	800be44 <USBD_CDC_Setup+0x11c>
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d002      	beq.n	800bddc <USBD_CDC_Setup+0xb4>
 800bdd6:	2b0a      	cmp	r3, #10
 800bdd8:	d014      	beq.n	800be04 <USBD_CDC_Setup+0xdc>
 800bdda:	e033      	b.n	800be44 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bde2:	2b03      	cmp	r3, #3
 800bde4:	d107      	bne.n	800bdf6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800bde6:	f107 030c 	add.w	r3, r7, #12
 800bdea:	2202      	movs	r2, #2
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f001 f9df 	bl	800d1b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bdf4:	e02e      	b.n	800be54 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800bdf6:	6839      	ldr	r1, [r7, #0]
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f001 f96f 	bl	800d0dc <USBD_CtlError>
            ret = USBD_FAIL;
 800bdfe:	2302      	movs	r3, #2
 800be00:	75fb      	strb	r3, [r7, #23]
          break;
 800be02:	e027      	b.n	800be54 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	d107      	bne.n	800be1e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800be0e:	f107 030f 	add.w	r3, r7, #15
 800be12:	2201      	movs	r2, #1
 800be14:	4619      	mov	r1, r3
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f001 f9cb 	bl	800d1b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be1c:	e01a      	b.n	800be54 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f001 f95b 	bl	800d0dc <USBD_CtlError>
            ret = USBD_FAIL;
 800be26:	2302      	movs	r3, #2
 800be28:	75fb      	strb	r3, [r7, #23]
          break;
 800be2a:	e013      	b.n	800be54 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be32:	2b03      	cmp	r3, #3
 800be34:	d00d      	beq.n	800be52 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f001 f94f 	bl	800d0dc <USBD_CtlError>
            ret = USBD_FAIL;
 800be3e:	2302      	movs	r3, #2
 800be40:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800be42:	e006      	b.n	800be52 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f001 f948 	bl	800d0dc <USBD_CtlError>
          ret = USBD_FAIL;
 800be4c:	2302      	movs	r3, #2
 800be4e:	75fb      	strb	r3, [r7, #23]
          break;
 800be50:	e000      	b.n	800be54 <USBD_CDC_Setup+0x12c>
          break;
 800be52:	bf00      	nop
      }
      break;
 800be54:	e006      	b.n	800be64 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f001 f93f 	bl	800d0dc <USBD_CtlError>
      ret = USBD_FAIL;
 800be5e:	2302      	movs	r3, #2
 800be60:	75fb      	strb	r3, [r7, #23]
      break;
 800be62:	bf00      	nop
  }

  return ret;
 800be64:	7dfb      	ldrb	r3, [r7, #23]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b084      	sub	sp, #16
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	460b      	mov	r3, r1
 800be78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be80:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be88:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be90:	2b00      	cmp	r3, #0
 800be92:	d03a      	beq.n	800bf0a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800be94:	78fa      	ldrb	r2, [r7, #3]
 800be96:	6879      	ldr	r1, [r7, #4]
 800be98:	4613      	mov	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4413      	add	r3, r2
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	440b      	add	r3, r1
 800bea2:	331c      	adds	r3, #28
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d029      	beq.n	800befe <USBD_CDC_DataIn+0x90>
 800beaa:	78fa      	ldrb	r2, [r7, #3]
 800beac:	6879      	ldr	r1, [r7, #4]
 800beae:	4613      	mov	r3, r2
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	4413      	add	r3, r2
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	440b      	add	r3, r1
 800beb8:	331c      	adds	r3, #28
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	78f9      	ldrb	r1, [r7, #3]
 800bebe:	68b8      	ldr	r0, [r7, #8]
 800bec0:	460b      	mov	r3, r1
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	440b      	add	r3, r1
 800bec6:	00db      	lsls	r3, r3, #3
 800bec8:	4403      	add	r3, r0
 800beca:	3338      	adds	r3, #56	; 0x38
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	fbb2 f1f3 	udiv	r1, r2, r3
 800bed2:	fb01 f303 	mul.w	r3, r1, r3
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d110      	bne.n	800befe <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800bedc:	78fa      	ldrb	r2, [r7, #3]
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	4613      	mov	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4413      	add	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	440b      	add	r3, r1
 800beea:	331c      	adds	r3, #28
 800beec:	2200      	movs	r2, #0
 800beee:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bef0:	78f9      	ldrb	r1, [r7, #3]
 800bef2:	2300      	movs	r3, #0
 800bef4:	2200      	movs	r2, #0
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f009 fd3c 	bl	8015974 <USBD_LL_Transmit>
 800befc:	e003      	b.n	800bf06 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	e000      	b.n	800bf0c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800bf0a:	2302      	movs	r3, #2
  }
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf26:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf28:	78fb      	ldrb	r3, [r7, #3]
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f009 fd67 	bl	8015a00 <USBD_LL_GetRxDataSize>
 800bf32:	4602      	mov	r2, r0
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00d      	beq.n	800bf60 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf58:	4611      	mov	r1, r2
 800bf5a:	4798      	blx	r3

    return USBD_OK;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	e000      	b.n	800bf62 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bf60:	2302      	movs	r3, #2
  }
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b084      	sub	sp, #16
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf78:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d015      	beq.n	800bfb0 <USBD_CDC_EP0_RxReady+0x46>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bf8a:	2bff      	cmp	r3, #255	; 0xff
 800bf8c:	d010      	beq.n	800bfb0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800bf9c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfa4:	b292      	uxth	r2, r2
 800bfa6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	22ff      	movs	r2, #255	; 0xff
 800bfac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
	...

0800bfbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2243      	movs	r2, #67	; 0x43
 800bfc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bfca:	4b03      	ldr	r3, [pc, #12]	; (800bfd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	20000094 	.word	0x20000094

0800bfdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2243      	movs	r2, #67	; 0x43
 800bfe8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800bfea:	4b03      	ldr	r3, [pc, #12]	; (800bff8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr
 800bff8:	20000050 	.word	0x20000050

0800bffc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2243      	movs	r2, #67	; 0x43
 800c008:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c00a:	4b03      	ldr	r3, [pc, #12]	; (800c018 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	200000d8 	.word	0x200000d8

0800c01c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	220a      	movs	r2, #10
 800c028:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c02a:	4b03      	ldr	r3, [pc, #12]	; (800c038 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr
 800c038:	2000000c 	.word	0x2000000c

0800c03c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c046:	2302      	movs	r3, #2
 800c048:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d005      	beq.n	800c05c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800c058:	2300      	movs	r3, #0
 800c05a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3714      	adds	r7, #20
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c06a:	b480      	push	{r7}
 800c06c:	b087      	sub	sp, #28
 800c06e:	af00      	add	r7, sp, #0
 800c070:	60f8      	str	r0, [r7, #12]
 800c072:	60b9      	str	r1, [r7, #8]
 800c074:	4613      	mov	r3, r2
 800c076:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c07e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c088:	88fa      	ldrh	r2, [r7, #6]
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c090:	2300      	movs	r3, #0
}
 800c092:	4618      	mov	r0, r3
 800c094:	371c      	adds	r7, #28
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b085      	sub	sp, #20
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3714      	adds	r7, #20
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b084      	sub	sp, #16
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d01c      	beq.n	800c11a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d115      	bne.n	800c116 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c108:	b29b      	uxth	r3, r3
 800c10a:	2181      	movs	r1, #129	; 0x81
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f009 fc31 	bl	8015974 <USBD_LL_Transmit>

      return USBD_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	e002      	b.n	800c11c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c116:	2301      	movs	r3, #1
 800c118:	e000      	b.n	800c11c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c11a:	2302      	movs	r3, #2
  }
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3710      	adds	r7, #16
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c132:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d017      	beq.n	800c16e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	7c1b      	ldrb	r3, [r3, #16]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d109      	bne.n	800c15a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c14c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c150:	2101      	movs	r1, #1
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f009 fc31 	bl	80159ba <USBD_LL_PrepareReceive>
 800c158:	e007      	b.n	800c16a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c160:	2340      	movs	r3, #64	; 0x40
 800c162:	2101      	movs	r1, #1
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f009 fc28 	bl	80159ba <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	e000      	b.n	800c170 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c16e:	2302      	movs	r3, #2
  }
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	4613      	mov	r3, r2
 800c184:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d101      	bne.n	800c190 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c18c:	2302      	movs	r3, #2
 800c18e:	e01a      	b.n	800c1c6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c196:	2b00      	cmp	r3, #0
 800c198:	d003      	beq.n	800c1a2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d003      	beq.n	800c1b0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	79fa      	ldrb	r2, [r7, #7]
 800c1bc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c1be:	68f8      	ldr	r0, [r7, #12]
 800c1c0:	f009 fa94 	bl	80156ec <USBD_LL_Init>

  return USBD_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b085      	sub	sp, #20
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
 800c1d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d006      	beq.n	800c1f0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	73fb      	strb	r3, [r7, #15]
 800c1ee:	e001      	b.n	800c1f4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b082      	sub	sp, #8
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f009 fac8 	bl	80157a0 <USBD_LL_Start>

  return USBD_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3708      	adds	r7, #8
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}

0800c21a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c21a:	b480      	push	{r7}
 800c21c:	b083      	sub	sp, #12
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	460b      	mov	r3, r1
 800c23a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c23c:	2302      	movs	r3, #2
 800c23e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c246:	2b00      	cmp	r3, #0
 800c248:	d00c      	beq.n	800c264 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	78fa      	ldrb	r2, [r7, #3]
 800c254:	4611      	mov	r1, r2
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	4798      	blx	r3
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c264:	7bfb      	ldrb	r3, [r7, #15]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b082      	sub	sp, #8
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	460b      	mov	r3, r1
 800c278:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	78fa      	ldrb	r2, [r7, #3]
 800c284:	4611      	mov	r1, r2
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	4798      	blx	r3

  return USBD_OK;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 fedb 	bl	800d062 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c2c8:	f003 031f 	and.w	r3, r3, #31
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d016      	beq.n	800c2fe <USBD_LL_SetupStage+0x6a>
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d81c      	bhi.n	800c30e <USBD_LL_SetupStage+0x7a>
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d002      	beq.n	800c2de <USBD_LL_SetupStage+0x4a>
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d008      	beq.n	800c2ee <USBD_LL_SetupStage+0x5a>
 800c2dc:	e017      	b.n	800c30e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 f9ce 	bl	800c688 <USBD_StdDevReq>
      break;
 800c2ec:	e01a      	b.n	800c324 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fa30 	bl	800c75c <USBD_StdItfReq>
      break;
 800c2fc:	e012      	b.n	800c324 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fa70 	bl	800c7ec <USBD_StdEPReq>
      break;
 800c30c:	e00a      	b.n	800c324 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c314:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f009 fa9f 	bl	8015860 <USBD_LL_StallEP>
      break;
 800c322:	bf00      	nop
  }

  return USBD_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b086      	sub	sp, #24
 800c332:	af00      	add	r7, sp, #0
 800c334:	60f8      	str	r0, [r7, #12]
 800c336:	460b      	mov	r3, r1
 800c338:	607a      	str	r2, [r7, #4]
 800c33a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c33c:	7afb      	ldrb	r3, [r7, #11]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d14b      	bne.n	800c3da <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c348:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c350:	2b03      	cmp	r3, #3
 800c352:	d134      	bne.n	800c3be <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	68da      	ldr	r2, [r3, #12]
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d919      	bls.n	800c394 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	68da      	ldr	r2, [r3, #12]
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	1ad2      	subs	r2, r2, r3
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	68da      	ldr	r2, [r3, #12]
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c376:	429a      	cmp	r2, r3
 800c378:	d203      	bcs.n	800c382 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c37e:	b29b      	uxth	r3, r3
 800c380:	e002      	b.n	800c388 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c386:	b29b      	uxth	r3, r3
 800c388:	461a      	mov	r2, r3
 800c38a:	6879      	ldr	r1, [r7, #4]
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f000 ff5c 	bl	800d24a <USBD_CtlContinueRx>
 800c392:	e038      	b.n	800c406 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00a      	beq.n	800c3b6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c3a6:	2b03      	cmp	r3, #3
 800c3a8:	d105      	bne.n	800c3b6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3b0:	691b      	ldr	r3, [r3, #16]
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c3b6:	68f8      	ldr	r0, [r7, #12]
 800c3b8:	f000 ff59 	bl	800d26e <USBD_CtlSendStatus>
 800c3bc:	e023      	b.n	800c406 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c3c4:	2b05      	cmp	r3, #5
 800c3c6:	d11e      	bne.n	800c406 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	f009 fa44 	bl	8015860 <USBD_LL_StallEP>
 800c3d8:	e015      	b.n	800c406 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00d      	beq.n	800c402 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c3ec:	2b03      	cmp	r3, #3
 800c3ee:	d108      	bne.n	800c402 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f6:	699b      	ldr	r3, [r3, #24]
 800c3f8:	7afa      	ldrb	r2, [r7, #11]
 800c3fa:	4611      	mov	r1, r2
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	4798      	blx	r3
 800c400:	e001      	b.n	800c406 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c402:	2302      	movs	r3, #2
 800c404:	e000      	b.n	800c408 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3718      	adds	r7, #24
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	460b      	mov	r3, r1
 800c41a:	607a      	str	r2, [r7, #4]
 800c41c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c41e:	7afb      	ldrb	r3, [r7, #11]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d17f      	bne.n	800c524 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	3314      	adds	r3, #20
 800c428:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c430:	2b02      	cmp	r3, #2
 800c432:	d15c      	bne.n	800c4ee <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	68da      	ldr	r2, [r3, #12]
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d915      	bls.n	800c46c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	68da      	ldr	r2, [r3, #12]
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	1ad2      	subs	r2, r2, r3
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	b29b      	uxth	r3, r3
 800c454:	461a      	mov	r2, r3
 800c456:	6879      	ldr	r1, [r7, #4]
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 fec6 	bl	800d1ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c45e:	2300      	movs	r3, #0
 800c460:	2200      	movs	r2, #0
 800c462:	2100      	movs	r1, #0
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f009 faa8 	bl	80159ba <USBD_LL_PrepareReceive>
 800c46a:	e04e      	b.n	800c50a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	6912      	ldr	r2, [r2, #16]
 800c474:	fbb3 f1f2 	udiv	r1, r3, r2
 800c478:	fb01 f202 	mul.w	r2, r1, r2
 800c47c:	1a9b      	subs	r3, r3, r2
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d11c      	bne.n	800c4bc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	689a      	ldr	r2, [r3, #8]
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d316      	bcc.n	800c4bc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	689a      	ldr	r2, [r3, #8]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c498:	429a      	cmp	r2, r3
 800c49a:	d20f      	bcs.n	800c4bc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c49c:	2200      	movs	r2, #0
 800c49e:	2100      	movs	r1, #0
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f000 fea2 	bl	800d1ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f009 fa80 	bl	80159ba <USBD_LL_PrepareReceive>
 800c4ba:	e026      	b.n	800c50a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d00a      	beq.n	800c4de <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d105      	bne.n	800c4de <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c4de:	2180      	movs	r1, #128	; 0x80
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f009 f9bd 	bl	8015860 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f000 fed4 	bl	800d294 <USBD_CtlReceiveStatus>
 800c4ec:	e00d      	b.n	800c50a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4f4:	2b04      	cmp	r3, #4
 800c4f6:	d004      	beq.n	800c502 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d103      	bne.n	800c50a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c502:	2180      	movs	r1, #128	; 0x80
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f009 f9ab 	bl	8015860 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c510:	2b01      	cmp	r3, #1
 800c512:	d11d      	bne.n	800c550 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	f7ff fe80 	bl	800c21a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c522:	e015      	b.n	800c550 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c52a:	695b      	ldr	r3, [r3, #20]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d00d      	beq.n	800c54c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c536:	2b03      	cmp	r3, #3
 800c538:	d108      	bne.n	800c54c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	7afa      	ldrb	r2, [r7, #11]
 800c544:	4611      	mov	r1, r2
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	4798      	blx	r3
 800c54a:	e001      	b.n	800c550 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c54c:	2302      	movs	r3, #2
 800c54e:	e000      	b.n	800c552 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3718      	adds	r7, #24
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b082      	sub	sp, #8
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c562:	2340      	movs	r3, #64	; 0x40
 800c564:	2200      	movs	r2, #0
 800c566:	2100      	movs	r1, #0
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f009 f934 	bl	80157d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2201      	movs	r2, #1
 800c572:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2240      	movs	r2, #64	; 0x40
 800c57a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c57e:	2340      	movs	r3, #64	; 0x40
 800c580:	2200      	movs	r2, #0
 800c582:	2180      	movs	r1, #128	; 0x80
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f009 f926 	bl	80157d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2240      	movs	r2, #64	; 0x40
 800c594:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d009      	beq.n	800c5d2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	6852      	ldr	r2, [r2, #4]
 800c5ca:	b2d2      	uxtb	r2, r2
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	4798      	blx	r3
  }

  return USBD_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	78fa      	ldrb	r2, [r7, #3]
 800c5ec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c5ee:	2300      	movs	r3, #0
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2204      	movs	r2, #4
 800c614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c626:	b480      	push	{r7}
 800c628:	b083      	sub	sp, #12
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c634:	2b04      	cmp	r3, #4
 800c636:	d105      	bne.n	800c644 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	370c      	adds	r7, #12
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr

0800c652 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b082      	sub	sp, #8
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c660:	2b03      	cmp	r3, #3
 800c662:	d10b      	bne.n	800c67c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c66a:	69db      	ldr	r3, [r3, #28]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d005      	beq.n	800c67c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c676:	69db      	ldr	r3, [r3, #28]
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3708      	adds	r7, #8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
	...

0800c688 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c692:	2300      	movs	r3, #0
 800c694:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c69e:	2b40      	cmp	r3, #64	; 0x40
 800c6a0:	d005      	beq.n	800c6ae <USBD_StdDevReq+0x26>
 800c6a2:	2b40      	cmp	r3, #64	; 0x40
 800c6a4:	d84f      	bhi.n	800c746 <USBD_StdDevReq+0xbe>
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d009      	beq.n	800c6be <USBD_StdDevReq+0x36>
 800c6aa:	2b20      	cmp	r3, #32
 800c6ac:	d14b      	bne.n	800c746 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	4798      	blx	r3
      break;
 800c6bc:	e048      	b.n	800c750 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	785b      	ldrb	r3, [r3, #1]
 800c6c2:	2b09      	cmp	r3, #9
 800c6c4:	d839      	bhi.n	800c73a <USBD_StdDevReq+0xb2>
 800c6c6:	a201      	add	r2, pc, #4	; (adr r2, 800c6cc <USBD_StdDevReq+0x44>)
 800c6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6cc:	0800c71d 	.word	0x0800c71d
 800c6d0:	0800c731 	.word	0x0800c731
 800c6d4:	0800c73b 	.word	0x0800c73b
 800c6d8:	0800c727 	.word	0x0800c727
 800c6dc:	0800c73b 	.word	0x0800c73b
 800c6e0:	0800c6ff 	.word	0x0800c6ff
 800c6e4:	0800c6f5 	.word	0x0800c6f5
 800c6e8:	0800c73b 	.word	0x0800c73b
 800c6ec:	0800c713 	.word	0x0800c713
 800c6f0:	0800c709 	.word	0x0800c709
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c6f4:	6839      	ldr	r1, [r7, #0]
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f9dc 	bl	800cab4 <USBD_GetDescriptor>
          break;
 800c6fc:	e022      	b.n	800c744 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c6fe:	6839      	ldr	r1, [r7, #0]
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 fb3f 	bl	800cd84 <USBD_SetAddress>
          break;
 800c706:	e01d      	b.n	800c744 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c708:	6839      	ldr	r1, [r7, #0]
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 fb7e 	bl	800ce0c <USBD_SetConfig>
          break;
 800c710:	e018      	b.n	800c744 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c712:	6839      	ldr	r1, [r7, #0]
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 fc07 	bl	800cf28 <USBD_GetConfig>
          break;
 800c71a:	e013      	b.n	800c744 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 fc37 	bl	800cf92 <USBD_GetStatus>
          break;
 800c724:	e00e      	b.n	800c744 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 fc65 	bl	800cff8 <USBD_SetFeature>
          break;
 800c72e:	e009      	b.n	800c744 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 fc74 	bl	800d020 <USBD_ClrFeature>
          break;
 800c738:	e004      	b.n	800c744 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c73a:	6839      	ldr	r1, [r7, #0]
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 fccd 	bl	800d0dc <USBD_CtlError>
          break;
 800c742:	bf00      	nop
      }
      break;
 800c744:	e004      	b.n	800c750 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fcc7 	bl	800d0dc <USBD_CtlError>
      break;
 800c74e:	bf00      	nop
  }

  return ret;
 800c750:	7bfb      	ldrb	r3, [r7, #15]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop

0800c75c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c766:	2300      	movs	r3, #0
 800c768:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c772:	2b40      	cmp	r3, #64	; 0x40
 800c774:	d005      	beq.n	800c782 <USBD_StdItfReq+0x26>
 800c776:	2b40      	cmp	r3, #64	; 0x40
 800c778:	d82e      	bhi.n	800c7d8 <USBD_StdItfReq+0x7c>
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d001      	beq.n	800c782 <USBD_StdItfReq+0x26>
 800c77e:	2b20      	cmp	r3, #32
 800c780:	d12a      	bne.n	800c7d8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c788:	3b01      	subs	r3, #1
 800c78a:	2b02      	cmp	r3, #2
 800c78c:	d81d      	bhi.n	800c7ca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	889b      	ldrh	r3, [r3, #4]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	2b01      	cmp	r3, #1
 800c796:	d813      	bhi.n	800c7c0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	4798      	blx	r3
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	88db      	ldrh	r3, [r3, #6]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d110      	bne.n	800c7d4 <USBD_StdItfReq+0x78>
 800c7b2:	7bfb      	ldrb	r3, [r7, #15]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d10d      	bne.n	800c7d4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 fd58 	bl	800d26e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c7be:	e009      	b.n	800c7d4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c7c0:	6839      	ldr	r1, [r7, #0]
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 fc8a 	bl	800d0dc <USBD_CtlError>
          break;
 800c7c8:	e004      	b.n	800c7d4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c7ca:	6839      	ldr	r1, [r7, #0]
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 fc85 	bl	800d0dc <USBD_CtlError>
          break;
 800c7d2:	e000      	b.n	800c7d6 <USBD_StdItfReq+0x7a>
          break;
 800c7d4:	bf00      	nop
      }
      break;
 800c7d6:	e004      	b.n	800c7e2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fc7e 	bl	800d0dc <USBD_CtlError>
      break;
 800c7e0:	bf00      	nop
  }

  return USBD_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3710      	adds	r7, #16
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	889b      	ldrh	r3, [r3, #4]
 800c7fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c808:	2b40      	cmp	r3, #64	; 0x40
 800c80a:	d007      	beq.n	800c81c <USBD_StdEPReq+0x30>
 800c80c:	2b40      	cmp	r3, #64	; 0x40
 800c80e:	f200 8146 	bhi.w	800ca9e <USBD_StdEPReq+0x2b2>
 800c812:	2b00      	cmp	r3, #0
 800c814:	d00a      	beq.n	800c82c <USBD_StdEPReq+0x40>
 800c816:	2b20      	cmp	r3, #32
 800c818:	f040 8141 	bne.w	800ca9e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	6839      	ldr	r1, [r7, #0]
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	4798      	blx	r3
      break;
 800c82a:	e13d      	b.n	800caa8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c834:	2b20      	cmp	r3, #32
 800c836:	d10a      	bne.n	800c84e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	6839      	ldr	r1, [r7, #0]
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	4798      	blx	r3
 800c846:	4603      	mov	r3, r0
 800c848:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c84a:	7bfb      	ldrb	r3, [r7, #15]
 800c84c:	e12d      	b.n	800caaa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	785b      	ldrb	r3, [r3, #1]
 800c852:	2b03      	cmp	r3, #3
 800c854:	d007      	beq.n	800c866 <USBD_StdEPReq+0x7a>
 800c856:	2b03      	cmp	r3, #3
 800c858:	f300 811b 	bgt.w	800ca92 <USBD_StdEPReq+0x2a6>
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d072      	beq.n	800c946 <USBD_StdEPReq+0x15a>
 800c860:	2b01      	cmp	r3, #1
 800c862:	d03a      	beq.n	800c8da <USBD_StdEPReq+0xee>
 800c864:	e115      	b.n	800ca92 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d002      	beq.n	800c876 <USBD_StdEPReq+0x8a>
 800c870:	2b03      	cmp	r3, #3
 800c872:	d015      	beq.n	800c8a0 <USBD_StdEPReq+0xb4>
 800c874:	e02b      	b.n	800c8ce <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c876:	7bbb      	ldrb	r3, [r7, #14]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00c      	beq.n	800c896 <USBD_StdEPReq+0xaa>
 800c87c:	7bbb      	ldrb	r3, [r7, #14]
 800c87e:	2b80      	cmp	r3, #128	; 0x80
 800c880:	d009      	beq.n	800c896 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c882:	7bbb      	ldrb	r3, [r7, #14]
 800c884:	4619      	mov	r1, r3
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f008 ffea 	bl	8015860 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c88c:	2180      	movs	r1, #128	; 0x80
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f008 ffe6 	bl	8015860 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c894:	e020      	b.n	800c8d8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c896:	6839      	ldr	r1, [r7, #0]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 fc1f 	bl	800d0dc <USBD_CtlError>
              break;
 800c89e:	e01b      	b.n	800c8d8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	885b      	ldrh	r3, [r3, #2]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d10e      	bne.n	800c8c6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c8a8:	7bbb      	ldrb	r3, [r7, #14]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00b      	beq.n	800c8c6 <USBD_StdEPReq+0xda>
 800c8ae:	7bbb      	ldrb	r3, [r7, #14]
 800c8b0:	2b80      	cmp	r3, #128	; 0x80
 800c8b2:	d008      	beq.n	800c8c6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	88db      	ldrh	r3, [r3, #6]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d104      	bne.n	800c8c6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c8bc:	7bbb      	ldrb	r3, [r7, #14]
 800c8be:	4619      	mov	r1, r3
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f008 ffcd 	bl	8015860 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fcd1 	bl	800d26e <USBD_CtlSendStatus>

              break;
 800c8cc:	e004      	b.n	800c8d8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 fc03 	bl	800d0dc <USBD_CtlError>
              break;
 800c8d6:	bf00      	nop
          }
          break;
 800c8d8:	e0e0      	b.n	800ca9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	d002      	beq.n	800c8ea <USBD_StdEPReq+0xfe>
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	d015      	beq.n	800c914 <USBD_StdEPReq+0x128>
 800c8e8:	e026      	b.n	800c938 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8ea:	7bbb      	ldrb	r3, [r7, #14]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d00c      	beq.n	800c90a <USBD_StdEPReq+0x11e>
 800c8f0:	7bbb      	ldrb	r3, [r7, #14]
 800c8f2:	2b80      	cmp	r3, #128	; 0x80
 800c8f4:	d009      	beq.n	800c90a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c8f6:	7bbb      	ldrb	r3, [r7, #14]
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f008 ffb0 	bl	8015860 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c900:	2180      	movs	r1, #128	; 0x80
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f008 ffac 	bl	8015860 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c908:	e01c      	b.n	800c944 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c90a:	6839      	ldr	r1, [r7, #0]
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fbe5 	bl	800d0dc <USBD_CtlError>
              break;
 800c912:	e017      	b.n	800c944 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	885b      	ldrh	r3, [r3, #2]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d112      	bne.n	800c942 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c91c:	7bbb      	ldrb	r3, [r7, #14]
 800c91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c922:	2b00      	cmp	r3, #0
 800c924:	d004      	beq.n	800c930 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c926:	7bbb      	ldrb	r3, [r7, #14]
 800c928:	4619      	mov	r1, r3
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f008 ffb7 	bl	801589e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 fc9c 	bl	800d26e <USBD_CtlSendStatus>
              }
              break;
 800c936:	e004      	b.n	800c942 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c938:	6839      	ldr	r1, [r7, #0]
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 fbce 	bl	800d0dc <USBD_CtlError>
              break;
 800c940:	e000      	b.n	800c944 <USBD_StdEPReq+0x158>
              break;
 800c942:	bf00      	nop
          }
          break;
 800c944:	e0aa      	b.n	800ca9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d002      	beq.n	800c956 <USBD_StdEPReq+0x16a>
 800c950:	2b03      	cmp	r3, #3
 800c952:	d032      	beq.n	800c9ba <USBD_StdEPReq+0x1ce>
 800c954:	e097      	b.n	800ca86 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c956:	7bbb      	ldrb	r3, [r7, #14]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d007      	beq.n	800c96c <USBD_StdEPReq+0x180>
 800c95c:	7bbb      	ldrb	r3, [r7, #14]
 800c95e:	2b80      	cmp	r3, #128	; 0x80
 800c960:	d004      	beq.n	800c96c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c962:	6839      	ldr	r1, [r7, #0]
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 fbb9 	bl	800d0dc <USBD_CtlError>
                break;
 800c96a:	e091      	b.n	800ca90 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c96c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c970:	2b00      	cmp	r3, #0
 800c972:	da0b      	bge.n	800c98c <USBD_StdEPReq+0x1a0>
 800c974:	7bbb      	ldrb	r3, [r7, #14]
 800c976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c97a:	4613      	mov	r3, r2
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	4413      	add	r3, r2
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	3310      	adds	r3, #16
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	4413      	add	r3, r2
 800c988:	3304      	adds	r3, #4
 800c98a:	e00b      	b.n	800c9a4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c98c:	7bbb      	ldrb	r3, [r7, #14]
 800c98e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c992:	4613      	mov	r3, r2
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4413      	add	r3, r2
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	3304      	adds	r3, #4
 800c9a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fbfd 	bl	800d1b2 <USBD_CtlSendData>
              break;
 800c9b8:	e06a      	b.n	800ca90 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c9ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	da11      	bge.n	800c9e6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c9c2:	7bbb      	ldrb	r3, [r7, #14]
 800c9c4:	f003 020f 	and.w	r2, r3, #15
 800c9c8:	6879      	ldr	r1, [r7, #4]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	4413      	add	r3, r2
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	440b      	add	r3, r1
 800c9d4:	3318      	adds	r3, #24
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d117      	bne.n	800ca0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c9dc:	6839      	ldr	r1, [r7, #0]
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 fb7c 	bl	800d0dc <USBD_CtlError>
                  break;
 800c9e4:	e054      	b.n	800ca90 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c9e6:	7bbb      	ldrb	r3, [r7, #14]
 800c9e8:	f003 020f 	and.w	r2, r3, #15
 800c9ec:	6879      	ldr	r1, [r7, #4]
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	4413      	add	r3, r2
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	440b      	add	r3, r1
 800c9f8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d104      	bne.n	800ca0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ca02:	6839      	ldr	r1, [r7, #0]
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 fb69 	bl	800d0dc <USBD_CtlError>
                  break;
 800ca0a:	e041      	b.n	800ca90 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	da0b      	bge.n	800ca2c <USBD_StdEPReq+0x240>
 800ca14:	7bbb      	ldrb	r3, [r7, #14]
 800ca16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	3310      	adds	r3, #16
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	4413      	add	r3, r2
 800ca28:	3304      	adds	r3, #4
 800ca2a:	e00b      	b.n	800ca44 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca2c:	7bbb      	ldrb	r3, [r7, #14]
 800ca2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca32:	4613      	mov	r3, r2
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	4413      	add	r3, r2
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	4413      	add	r3, r2
 800ca42:	3304      	adds	r3, #4
 800ca44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ca46:	7bbb      	ldrb	r3, [r7, #14]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d002      	beq.n	800ca52 <USBD_StdEPReq+0x266>
 800ca4c:	7bbb      	ldrb	r3, [r7, #14]
 800ca4e:	2b80      	cmp	r3, #128	; 0x80
 800ca50:	d103      	bne.n	800ca5a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	2200      	movs	r2, #0
 800ca56:	601a      	str	r2, [r3, #0]
 800ca58:	e00e      	b.n	800ca78 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ca5a:	7bbb      	ldrb	r3, [r7, #14]
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f008 ff3c 	bl	80158dc <USBD_LL_IsStallEP>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d003      	beq.n	800ca72 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	601a      	str	r2, [r3, #0]
 800ca70:	e002      	b.n	800ca78 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	2200      	movs	r2, #0
 800ca76:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	2202      	movs	r2, #2
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fb97 	bl	800d1b2 <USBD_CtlSendData>
              break;
 800ca84:	e004      	b.n	800ca90 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 fb27 	bl	800d0dc <USBD_CtlError>
              break;
 800ca8e:	bf00      	nop
          }
          break;
 800ca90:	e004      	b.n	800ca9c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ca92:	6839      	ldr	r1, [r7, #0]
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 fb21 	bl	800d0dc <USBD_CtlError>
          break;
 800ca9a:	bf00      	nop
      }
      break;
 800ca9c:	e004      	b.n	800caa8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ca9e:	6839      	ldr	r1, [r7, #0]
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fb1b 	bl	800d0dc <USBD_CtlError>
      break;
 800caa6:	bf00      	nop
  }

  return ret;
 800caa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
	...

0800cab4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cabe:	2300      	movs	r3, #0
 800cac0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cac2:	2300      	movs	r3, #0
 800cac4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cac6:	2300      	movs	r3, #0
 800cac8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	885b      	ldrh	r3, [r3, #2]
 800cace:	0a1b      	lsrs	r3, r3, #8
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	3b01      	subs	r3, #1
 800cad4:	2b06      	cmp	r3, #6
 800cad6:	f200 8128 	bhi.w	800cd2a <USBD_GetDescriptor+0x276>
 800cada:	a201      	add	r2, pc, #4	; (adr r2, 800cae0 <USBD_GetDescriptor+0x2c>)
 800cadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae0:	0800cafd 	.word	0x0800cafd
 800cae4:	0800cb15 	.word	0x0800cb15
 800cae8:	0800cb55 	.word	0x0800cb55
 800caec:	0800cd2b 	.word	0x0800cd2b
 800caf0:	0800cd2b 	.word	0x0800cd2b
 800caf4:	0800cccb 	.word	0x0800cccb
 800caf8:	0800ccf7 	.word	0x0800ccf7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	7c12      	ldrb	r2, [r2, #16]
 800cb08:	f107 0108 	add.w	r1, r7, #8
 800cb0c:	4610      	mov	r0, r2
 800cb0e:	4798      	blx	r3
 800cb10:	60f8      	str	r0, [r7, #12]
      break;
 800cb12:	e112      	b.n	800cd3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	7c1b      	ldrb	r3, [r3, #16]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10d      	bne.n	800cb38 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb24:	f107 0208 	add.w	r2, r7, #8
 800cb28:	4610      	mov	r0, r2
 800cb2a:	4798      	blx	r3
 800cb2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3301      	adds	r3, #1
 800cb32:	2202      	movs	r2, #2
 800cb34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cb36:	e100      	b.n	800cd3a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb40:	f107 0208 	add.w	r2, r7, #8
 800cb44:	4610      	mov	r0, r2
 800cb46:	4798      	blx	r3
 800cb48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	2202      	movs	r2, #2
 800cb50:	701a      	strb	r2, [r3, #0]
      break;
 800cb52:	e0f2      	b.n	800cd3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	885b      	ldrh	r3, [r3, #2]
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	2b05      	cmp	r3, #5
 800cb5c:	f200 80ac 	bhi.w	800ccb8 <USBD_GetDescriptor+0x204>
 800cb60:	a201      	add	r2, pc, #4	; (adr r2, 800cb68 <USBD_GetDescriptor+0xb4>)
 800cb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb66:	bf00      	nop
 800cb68:	0800cb81 	.word	0x0800cb81
 800cb6c:	0800cbb5 	.word	0x0800cbb5
 800cb70:	0800cbe9 	.word	0x0800cbe9
 800cb74:	0800cc1d 	.word	0x0800cc1d
 800cb78:	0800cc51 	.word	0x0800cc51
 800cb7c:	0800cc85 	.word	0x0800cc85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00b      	beq.n	800cba4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	7c12      	ldrb	r2, [r2, #16]
 800cb98:	f107 0108 	add.w	r1, r7, #8
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	4798      	blx	r3
 800cba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cba2:	e091      	b.n	800ccc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cba4:	6839      	ldr	r1, [r7, #0]
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 fa98 	bl	800d0dc <USBD_CtlError>
            err++;
 800cbac:	7afb      	ldrb	r3, [r7, #11]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	72fb      	strb	r3, [r7, #11]
          break;
 800cbb2:	e089      	b.n	800ccc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00b      	beq.n	800cbd8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	7c12      	ldrb	r2, [r2, #16]
 800cbcc:	f107 0108 	add.w	r1, r7, #8
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	4798      	blx	r3
 800cbd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbd6:	e077      	b.n	800ccc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbd8:	6839      	ldr	r1, [r7, #0]
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 fa7e 	bl	800d0dc <USBD_CtlError>
            err++;
 800cbe0:	7afb      	ldrb	r3, [r7, #11]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	72fb      	strb	r3, [r7, #11]
          break;
 800cbe6:	e06f      	b.n	800ccc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cbee:	68db      	ldr	r3, [r3, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00b      	beq.n	800cc0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	7c12      	ldrb	r2, [r2, #16]
 800cc00:	f107 0108 	add.w	r1, r7, #8
 800cc04:	4610      	mov	r0, r2
 800cc06:	4798      	blx	r3
 800cc08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc0a:	e05d      	b.n	800ccc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc0c:	6839      	ldr	r1, [r7, #0]
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 fa64 	bl	800d0dc <USBD_CtlError>
            err++;
 800cc14:	7afb      	ldrb	r3, [r7, #11]
 800cc16:	3301      	adds	r3, #1
 800cc18:	72fb      	strb	r3, [r7, #11]
          break;
 800cc1a:	e055      	b.n	800ccc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00b      	beq.n	800cc40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc2e:	691b      	ldr	r3, [r3, #16]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	7c12      	ldrb	r2, [r2, #16]
 800cc34:	f107 0108 	add.w	r1, r7, #8
 800cc38:	4610      	mov	r0, r2
 800cc3a:	4798      	blx	r3
 800cc3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc3e:	e043      	b.n	800ccc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc40:	6839      	ldr	r1, [r7, #0]
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 fa4a 	bl	800d0dc <USBD_CtlError>
            err++;
 800cc48:	7afb      	ldrb	r3, [r7, #11]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	72fb      	strb	r3, [r7, #11]
          break;
 800cc4e:	e03b      	b.n	800ccc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc56:	695b      	ldr	r3, [r3, #20]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00b      	beq.n	800cc74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc62:	695b      	ldr	r3, [r3, #20]
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	7c12      	ldrb	r2, [r2, #16]
 800cc68:	f107 0108 	add.w	r1, r7, #8
 800cc6c:	4610      	mov	r0, r2
 800cc6e:	4798      	blx	r3
 800cc70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc72:	e029      	b.n	800ccc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc74:	6839      	ldr	r1, [r7, #0]
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 fa30 	bl	800d0dc <USBD_CtlError>
            err++;
 800cc7c:	7afb      	ldrb	r3, [r7, #11]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	72fb      	strb	r3, [r7, #11]
          break;
 800cc82:	e021      	b.n	800ccc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00b      	beq.n	800cca8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc96:	699b      	ldr	r3, [r3, #24]
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	7c12      	ldrb	r2, [r2, #16]
 800cc9c:	f107 0108 	add.w	r1, r7, #8
 800cca0:	4610      	mov	r0, r2
 800cca2:	4798      	blx	r3
 800cca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cca6:	e00f      	b.n	800ccc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cca8:	6839      	ldr	r1, [r7, #0]
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 fa16 	bl	800d0dc <USBD_CtlError>
            err++;
 800ccb0:	7afb      	ldrb	r3, [r7, #11]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	72fb      	strb	r3, [r7, #11]
          break;
 800ccb6:	e007      	b.n	800ccc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ccb8:	6839      	ldr	r1, [r7, #0]
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 fa0e 	bl	800d0dc <USBD_CtlError>
          err++;
 800ccc0:	7afb      	ldrb	r3, [r7, #11]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ccc6:	e038      	b.n	800cd3a <USBD_GetDescriptor+0x286>
 800ccc8:	e037      	b.n	800cd3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	7c1b      	ldrb	r3, [r3, #16]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d109      	bne.n	800cce6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccda:	f107 0208 	add.w	r2, r7, #8
 800ccde:	4610      	mov	r0, r2
 800cce0:	4798      	blx	r3
 800cce2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cce4:	e029      	b.n	800cd3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cce6:	6839      	ldr	r1, [r7, #0]
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 f9f7 	bl	800d0dc <USBD_CtlError>
        err++;
 800ccee:	7afb      	ldrb	r3, [r7, #11]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	72fb      	strb	r3, [r7, #11]
      break;
 800ccf4:	e021      	b.n	800cd3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	7c1b      	ldrb	r3, [r3, #16]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d10d      	bne.n	800cd1a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd06:	f107 0208 	add.w	r2, r7, #8
 800cd0a:	4610      	mov	r0, r2
 800cd0c:	4798      	blx	r3
 800cd0e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	3301      	adds	r3, #1
 800cd14:	2207      	movs	r2, #7
 800cd16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd18:	e00f      	b.n	800cd3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 f9dd 	bl	800d0dc <USBD_CtlError>
        err++;
 800cd22:	7afb      	ldrb	r3, [r7, #11]
 800cd24:	3301      	adds	r3, #1
 800cd26:	72fb      	strb	r3, [r7, #11]
      break;
 800cd28:	e007      	b.n	800cd3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cd2a:	6839      	ldr	r1, [r7, #0]
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 f9d5 	bl	800d0dc <USBD_CtlError>
      err++;
 800cd32:	7afb      	ldrb	r3, [r7, #11]
 800cd34:	3301      	adds	r3, #1
 800cd36:	72fb      	strb	r3, [r7, #11]
      break;
 800cd38:	bf00      	nop
  }

  if (err != 0U)
 800cd3a:	7afb      	ldrb	r3, [r7, #11]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d11c      	bne.n	800cd7a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800cd40:	893b      	ldrh	r3, [r7, #8]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d011      	beq.n	800cd6a <USBD_GetDescriptor+0x2b6>
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	88db      	ldrh	r3, [r3, #6]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00d      	beq.n	800cd6a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	88da      	ldrh	r2, [r3, #6]
 800cd52:	893b      	ldrh	r3, [r7, #8]
 800cd54:	4293      	cmp	r3, r2
 800cd56:	bf28      	it	cs
 800cd58:	4613      	movcs	r3, r2
 800cd5a:	b29b      	uxth	r3, r3
 800cd5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cd5e:	893b      	ldrh	r3, [r7, #8]
 800cd60:	461a      	mov	r2, r3
 800cd62:	68f9      	ldr	r1, [r7, #12]
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 fa24 	bl	800d1b2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	88db      	ldrh	r3, [r3, #6]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d104      	bne.n	800cd7c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 fa7b 	bl	800d26e <USBD_CtlSendStatus>
 800cd78:	e000      	b.n	800cd7c <USBD_GetDescriptor+0x2c8>
    return;
 800cd7a:	bf00      	nop
    }
  }
}
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop

0800cd84 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	889b      	ldrh	r3, [r3, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d130      	bne.n	800cdf8 <USBD_SetAddress+0x74>
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	88db      	ldrh	r3, [r3, #6]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d12c      	bne.n	800cdf8 <USBD_SetAddress+0x74>
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	885b      	ldrh	r3, [r3, #2]
 800cda2:	2b7f      	cmp	r3, #127	; 0x7f
 800cda4:	d828      	bhi.n	800cdf8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	885b      	ldrh	r3, [r3, #2]
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdb8:	2b03      	cmp	r3, #3
 800cdba:	d104      	bne.n	800cdc6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800cdbc:	6839      	ldr	r1, [r7, #0]
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 f98c 	bl	800d0dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdc4:	e01d      	b.n	800ce02 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	7bfa      	ldrb	r2, [r7, #15]
 800cdca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f008 fdaf 	bl	8015936 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fa48 	bl	800d26e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cdde:	7bfb      	ldrb	r3, [r7, #15]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d004      	beq.n	800cdee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2202      	movs	r2, #2
 800cde8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdec:	e009      	b.n	800ce02 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdf6:	e004      	b.n	800ce02 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f96e 	bl	800d0dc <USBD_CtlError>
  }
}
 800ce00:	bf00      	nop
 800ce02:	bf00      	nop
 800ce04:	3710      	adds	r7, #16
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
	...

0800ce0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	885b      	ldrh	r3, [r3, #2]
 800ce1a:	b2da      	uxtb	r2, r3
 800ce1c:	4b41      	ldr	r3, [pc, #260]	; (800cf24 <USBD_SetConfig+0x118>)
 800ce1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ce20:	4b40      	ldr	r3, [pc, #256]	; (800cf24 <USBD_SetConfig+0x118>)
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d904      	bls.n	800ce32 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ce28:	6839      	ldr	r1, [r7, #0]
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f956 	bl	800d0dc <USBD_CtlError>
 800ce30:	e075      	b.n	800cf1e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce38:	2b02      	cmp	r3, #2
 800ce3a:	d002      	beq.n	800ce42 <USBD_SetConfig+0x36>
 800ce3c:	2b03      	cmp	r3, #3
 800ce3e:	d023      	beq.n	800ce88 <USBD_SetConfig+0x7c>
 800ce40:	e062      	b.n	800cf08 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ce42:	4b38      	ldr	r3, [pc, #224]	; (800cf24 <USBD_SetConfig+0x118>)
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d01a      	beq.n	800ce80 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ce4a:	4b36      	ldr	r3, [pc, #216]	; (800cf24 <USBD_SetConfig+0x118>)
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	461a      	mov	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2203      	movs	r2, #3
 800ce58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ce5c:	4b31      	ldr	r3, [pc, #196]	; (800cf24 <USBD_SetConfig+0x118>)
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	4619      	mov	r1, r3
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7ff f9e4 	bl	800c230 <USBD_SetClassConfig>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d104      	bne.n	800ce78 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ce6e:	6839      	ldr	r1, [r7, #0]
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 f933 	bl	800d0dc <USBD_CtlError>
            return;
 800ce76:	e052      	b.n	800cf1e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 f9f8 	bl	800d26e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ce7e:	e04e      	b.n	800cf1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f9f4 	bl	800d26e <USBD_CtlSendStatus>
        break;
 800ce86:	e04a      	b.n	800cf1e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ce88:	4b26      	ldr	r3, [pc, #152]	; (800cf24 <USBD_SetConfig+0x118>)
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d112      	bne.n	800ceb6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2202      	movs	r2, #2
 800ce94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ce98:	4b22      	ldr	r3, [pc, #136]	; (800cf24 <USBD_SetConfig+0x118>)
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800cea2:	4b20      	ldr	r3, [pc, #128]	; (800cf24 <USBD_SetConfig+0x118>)
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	4619      	mov	r1, r3
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f7ff f9e0 	bl	800c26e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 f9dd 	bl	800d26e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ceb4:	e033      	b.n	800cf1e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ceb6:	4b1b      	ldr	r3, [pc, #108]	; (800cf24 <USBD_SetConfig+0x118>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	461a      	mov	r2, r3
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d01d      	beq.n	800cf00 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	4619      	mov	r1, r3
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7ff f9ce 	bl	800c26e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ced2:	4b14      	ldr	r3, [pc, #80]	; (800cf24 <USBD_SetConfig+0x118>)
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	461a      	mov	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cedc:	4b11      	ldr	r3, [pc, #68]	; (800cf24 <USBD_SetConfig+0x118>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	4619      	mov	r1, r3
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7ff f9a4 	bl	800c230 <USBD_SetClassConfig>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d104      	bne.n	800cef8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 f8f3 	bl	800d0dc <USBD_CtlError>
            return;
 800cef6:	e012      	b.n	800cf1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 f9b8 	bl	800d26e <USBD_CtlSendStatus>
        break;
 800cefe:	e00e      	b.n	800cf1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 f9b4 	bl	800d26e <USBD_CtlSendStatus>
        break;
 800cf06:	e00a      	b.n	800cf1e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800cf08:	6839      	ldr	r1, [r7, #0]
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 f8e6 	bl	800d0dc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800cf10:	4b04      	ldr	r3, [pc, #16]	; (800cf24 <USBD_SetConfig+0x118>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	4619      	mov	r1, r3
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f7ff f9a9 	bl	800c26e <USBD_ClrClassConfig>
        break;
 800cf1c:	bf00      	nop
    }
  }
}
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	200004fc 	.word	0x200004fc

0800cf28 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	88db      	ldrh	r3, [r3, #6]
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d004      	beq.n	800cf44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cf3a:	6839      	ldr	r1, [r7, #0]
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 f8cd 	bl	800d0dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cf42:	e022      	b.n	800cf8a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	dc02      	bgt.n	800cf54 <USBD_GetConfig+0x2c>
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	dc03      	bgt.n	800cf5a <USBD_GetConfig+0x32>
 800cf52:	e015      	b.n	800cf80 <USBD_GetConfig+0x58>
 800cf54:	2b03      	cmp	r3, #3
 800cf56:	d00b      	beq.n	800cf70 <USBD_GetConfig+0x48>
 800cf58:	e012      	b.n	800cf80 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	3308      	adds	r3, #8
 800cf64:	2201      	movs	r2, #1
 800cf66:	4619      	mov	r1, r3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 f922 	bl	800d1b2 <USBD_CtlSendData>
        break;
 800cf6e:	e00c      	b.n	800cf8a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	3304      	adds	r3, #4
 800cf74:	2201      	movs	r2, #1
 800cf76:	4619      	mov	r1, r3
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 f91a 	bl	800d1b2 <USBD_CtlSendData>
        break;
 800cf7e:	e004      	b.n	800cf8a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800cf80:	6839      	ldr	r1, [r7, #0]
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 f8aa 	bl	800d0dc <USBD_CtlError>
        break;
 800cf88:	bf00      	nop
}
 800cf8a:	bf00      	nop
 800cf8c:	3708      	adds	r7, #8
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b082      	sub	sp, #8
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
 800cf9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfa2:	3b01      	subs	r3, #1
 800cfa4:	2b02      	cmp	r3, #2
 800cfa6:	d81e      	bhi.n	800cfe6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	88db      	ldrh	r3, [r3, #6]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d004      	beq.n	800cfba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800cfb0:	6839      	ldr	r1, [r7, #0]
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f892 	bl	800d0dc <USBD_CtlError>
        break;
 800cfb8:	e01a      	b.n	800cff0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d005      	beq.n	800cfd6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	f043 0202 	orr.w	r2, r3, #2
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	330c      	adds	r3, #12
 800cfda:	2202      	movs	r2, #2
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 f8e7 	bl	800d1b2 <USBD_CtlSendData>
      break;
 800cfe4:	e004      	b.n	800cff0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800cfe6:	6839      	ldr	r1, [r7, #0]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 f877 	bl	800d0dc <USBD_CtlError>
      break;
 800cfee:	bf00      	nop
  }
}
 800cff0:	bf00      	nop
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	885b      	ldrh	r3, [r3, #2]
 800d006:	2b01      	cmp	r3, #1
 800d008:	d106      	bne.n	800d018 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2201      	movs	r2, #1
 800d00e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 f92b 	bl	800d26e <USBD_CtlSendStatus>
  }
}
 800d018:	bf00      	nop
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d030:	3b01      	subs	r3, #1
 800d032:	2b02      	cmp	r3, #2
 800d034:	d80b      	bhi.n	800d04e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	885b      	ldrh	r3, [r3, #2]
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d10c      	bne.n	800d058 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 f911 	bl	800d26e <USBD_CtlSendStatus>
      }
      break;
 800d04c:	e004      	b.n	800d058 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d04e:	6839      	ldr	r1, [r7, #0]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 f843 	bl	800d0dc <USBD_CtlError>
      break;
 800d056:	e000      	b.n	800d05a <USBD_ClrFeature+0x3a>
      break;
 800d058:	bf00      	nop
  }
}
 800d05a:	bf00      	nop
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d062:	b480      	push	{r7}
 800d064:	b083      	sub	sp, #12
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	781a      	ldrb	r2, [r3, #0]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	785a      	ldrb	r2, [r3, #1]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	3302      	adds	r3, #2
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	b29a      	uxth	r2, r3
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	3303      	adds	r3, #3
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	021b      	lsls	r3, r3, #8
 800d08e:	b29b      	uxth	r3, r3
 800d090:	4413      	add	r3, r2
 800d092:	b29a      	uxth	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	3304      	adds	r3, #4
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	3305      	adds	r3, #5
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	021b      	lsls	r3, r3, #8
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	4413      	add	r3, r2
 800d0ae:	b29a      	uxth	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	3306      	adds	r3, #6
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	3307      	adds	r3, #7
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	021b      	lsls	r3, r3, #8
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	4413      	add	r3, r2
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	80da      	strh	r2, [r3, #6]

}
 800d0d0:	bf00      	nop
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d0e6:	2180      	movs	r1, #128	; 0x80
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f008 fbb9 	bl	8015860 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f008 fbb5 	bl	8015860 <USBD_LL_StallEP>
}
 800d0f6:	bf00      	nop
 800d0f8:	3708      	adds	r7, #8
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}

0800d0fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b086      	sub	sp, #24
 800d102:	af00      	add	r7, sp, #0
 800d104:	60f8      	str	r0, [r7, #12]
 800d106:	60b9      	str	r1, [r7, #8]
 800d108:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d10a:	2300      	movs	r3, #0
 800d10c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d032      	beq.n	800d17a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f000 f834 	bl	800d182 <USBD_GetLen>
 800d11a:	4603      	mov	r3, r0
 800d11c:	3301      	adds	r3, #1
 800d11e:	b29b      	uxth	r3, r3
 800d120:	005b      	lsls	r3, r3, #1
 800d122:	b29a      	uxth	r2, r3
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d128:	7dfb      	ldrb	r3, [r7, #23]
 800d12a:	1c5a      	adds	r2, r3, #1
 800d12c:	75fa      	strb	r2, [r7, #23]
 800d12e:	461a      	mov	r2, r3
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	4413      	add	r3, r2
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	7812      	ldrb	r2, [r2, #0]
 800d138:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d13a:	7dfb      	ldrb	r3, [r7, #23]
 800d13c:	1c5a      	adds	r2, r3, #1
 800d13e:	75fa      	strb	r2, [r7, #23]
 800d140:	461a      	mov	r2, r3
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	4413      	add	r3, r2
 800d146:	2203      	movs	r2, #3
 800d148:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d14a:	e012      	b.n	800d172 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	1c5a      	adds	r2, r3, #1
 800d150:	60fa      	str	r2, [r7, #12]
 800d152:	7dfa      	ldrb	r2, [r7, #23]
 800d154:	1c51      	adds	r1, r2, #1
 800d156:	75f9      	strb	r1, [r7, #23]
 800d158:	4611      	mov	r1, r2
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	440a      	add	r2, r1
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d162:	7dfb      	ldrb	r3, [r7, #23]
 800d164:	1c5a      	adds	r2, r3, #1
 800d166:	75fa      	strb	r2, [r7, #23]
 800d168:	461a      	mov	r2, r3
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	4413      	add	r3, r2
 800d16e:	2200      	movs	r2, #0
 800d170:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1e8      	bne.n	800d14c <USBD_GetString+0x4e>
    }
  }
}
 800d17a:	bf00      	nop
 800d17c:	3718      	adds	r7, #24
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d182:	b480      	push	{r7}
 800d184:	b085      	sub	sp, #20
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d18a:	2300      	movs	r3, #0
 800d18c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800d18e:	e005      	b.n	800d19c <USBD_GetLen+0x1a>
  {
    len++;
 800d190:	7bfb      	ldrb	r3, [r7, #15]
 800d192:	3301      	adds	r3, #1
 800d194:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	3301      	adds	r3, #1
 800d19a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1f5      	bne.n	800d190 <USBD_GetLen+0xe>
  }

  return len;
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3714      	adds	r7, #20
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr

0800d1b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b084      	sub	sp, #16
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	60f8      	str	r0, [r7, #12]
 800d1ba:	60b9      	str	r1, [r7, #8]
 800d1bc:	4613      	mov	r3, r2
 800d1be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2202      	movs	r2, #2
 800d1c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d1c8:	88fa      	ldrh	r2, [r7, #6]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d1ce:	88fa      	ldrh	r2, [r7, #6]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d1d4:	88fb      	ldrh	r3, [r7, #6]
 800d1d6:	68ba      	ldr	r2, [r7, #8]
 800d1d8:	2100      	movs	r1, #0
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f008 fbca 	bl	8015974 <USBD_LL_Transmit>

  return USBD_OK;
 800d1e0:	2300      	movs	r3, #0
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b084      	sub	sp, #16
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	60f8      	str	r0, [r7, #12]
 800d1f2:	60b9      	str	r1, [r7, #8]
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d1f8:	88fb      	ldrh	r3, [r7, #6]
 800d1fa:	68ba      	ldr	r2, [r7, #8]
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	68f8      	ldr	r0, [r7, #12]
 800d200:	f008 fbb8 	bl	8015974 <USBD_LL_Transmit>

  return USBD_OK;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b084      	sub	sp, #16
 800d212:	af00      	add	r7, sp, #0
 800d214:	60f8      	str	r0, [r7, #12]
 800d216:	60b9      	str	r1, [r7, #8]
 800d218:	4613      	mov	r3, r2
 800d21a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2203      	movs	r2, #3
 800d220:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d224:	88fa      	ldrh	r2, [r7, #6]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800d22c:	88fa      	ldrh	r2, [r7, #6]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d234:	88fb      	ldrh	r3, [r7, #6]
 800d236:	68ba      	ldr	r2, [r7, #8]
 800d238:	2100      	movs	r1, #0
 800d23a:	68f8      	ldr	r0, [r7, #12]
 800d23c:	f008 fbbd 	bl	80159ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b084      	sub	sp, #16
 800d24e:	af00      	add	r7, sp, #0
 800d250:	60f8      	str	r0, [r7, #12]
 800d252:	60b9      	str	r1, [r7, #8]
 800d254:	4613      	mov	r3, r2
 800d256:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d258:	88fb      	ldrh	r3, [r7, #6]
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	2100      	movs	r1, #0
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f008 fbab 	bl	80159ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d264:	2300      	movs	r3, #0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b082      	sub	sp, #8
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2204      	movs	r2, #4
 800d27a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d27e:	2300      	movs	r3, #0
 800d280:	2200      	movs	r2, #0
 800d282:	2100      	movs	r1, #0
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f008 fb75 	bl	8015974 <USBD_LL_Transmit>

  return USBD_OK;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2205      	movs	r2, #5
 800d2a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f008 fb85 	bl	80159ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2b0:	2300      	movs	r3, #0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3708      	adds	r7, #8
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
	...

0800d2bc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2c2:	f3ef 8305 	mrs	r3, IPSR
 800d2c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d2c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d10f      	bne.n	800d2ee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2ce:	f3ef 8310 	mrs	r3, PRIMASK
 800d2d2:	607b      	str	r3, [r7, #4]
  return(result);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d109      	bne.n	800d2ee <osKernelInitialize+0x32>
 800d2da:	4b11      	ldr	r3, [pc, #68]	; (800d320 <osKernelInitialize+0x64>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b02      	cmp	r3, #2
 800d2e0:	d109      	bne.n	800d2f6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d2e2:	f3ef 8311 	mrs	r3, BASEPRI
 800d2e6:	603b      	str	r3, [r7, #0]
  return(result);
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d003      	beq.n	800d2f6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d2ee:	f06f 0305 	mvn.w	r3, #5
 800d2f2:	60fb      	str	r3, [r7, #12]
 800d2f4:	e00c      	b.n	800d310 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d2f6:	4b0a      	ldr	r3, [pc, #40]	; (800d320 <osKernelInitialize+0x64>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d105      	bne.n	800d30a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800d2fe:	4b08      	ldr	r3, [pc, #32]	; (800d320 <osKernelInitialize+0x64>)
 800d300:	2201      	movs	r2, #1
 800d302:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d304:	2300      	movs	r3, #0
 800d306:	60fb      	str	r3, [r7, #12]
 800d308:	e002      	b.n	800d310 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d30a:	f04f 33ff 	mov.w	r3, #4294967295
 800d30e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d310:	68fb      	ldr	r3, [r7, #12]
}
 800d312:	4618      	mov	r0, r3
 800d314:	3714      	adds	r7, #20
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	20000500 	.word	0x20000500

0800d324 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d32a:	f3ef 8305 	mrs	r3, IPSR
 800d32e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d330:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d332:	2b00      	cmp	r3, #0
 800d334:	d10f      	bne.n	800d356 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d336:	f3ef 8310 	mrs	r3, PRIMASK
 800d33a:	607b      	str	r3, [r7, #4]
  return(result);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d109      	bne.n	800d356 <osKernelStart+0x32>
 800d342:	4b11      	ldr	r3, [pc, #68]	; (800d388 <osKernelStart+0x64>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b02      	cmp	r3, #2
 800d348:	d109      	bne.n	800d35e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d34a:	f3ef 8311 	mrs	r3, BASEPRI
 800d34e:	603b      	str	r3, [r7, #0]
  return(result);
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <osKernelStart+0x3a>
    stat = osErrorISR;
 800d356:	f06f 0305 	mvn.w	r3, #5
 800d35a:	60fb      	str	r3, [r7, #12]
 800d35c:	e00e      	b.n	800d37c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800d35e:	4b0a      	ldr	r3, [pc, #40]	; (800d388 <osKernelStart+0x64>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2b01      	cmp	r3, #1
 800d364:	d107      	bne.n	800d376 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800d366:	4b08      	ldr	r3, [pc, #32]	; (800d388 <osKernelStart+0x64>)
 800d368:	2202      	movs	r2, #2
 800d36a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800d36c:	f001 fb1a 	bl	800e9a4 <vTaskStartScheduler>
      stat = osOK;
 800d370:	2300      	movs	r3, #0
 800d372:	60fb      	str	r3, [r7, #12]
 800d374:	e002      	b.n	800d37c <osKernelStart+0x58>
    } else {
      stat = osError;
 800d376:	f04f 33ff 	mov.w	r3, #4294967295
 800d37a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d37c:	68fb      	ldr	r3, [r7, #12]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	20000500 	.word	0x20000500

0800d38c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b092      	sub	sp, #72	; 0x48
 800d390:	af04      	add	r7, sp, #16
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d398:	2300      	movs	r3, #0
 800d39a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d39c:	f3ef 8305 	mrs	r3, IPSR
 800d3a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800d3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f040 8094 	bne.w	800d4d2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3aa:	f3ef 8310 	mrs	r3, PRIMASK
 800d3ae:	623b      	str	r3, [r7, #32]
  return(result);
 800d3b0:	6a3b      	ldr	r3, [r7, #32]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	f040 808d 	bne.w	800d4d2 <osThreadNew+0x146>
 800d3b8:	4b48      	ldr	r3, [pc, #288]	; (800d4dc <osThreadNew+0x150>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d106      	bne.n	800d3ce <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d3c0:	f3ef 8311 	mrs	r3, BASEPRI
 800d3c4:	61fb      	str	r3, [r7, #28]
  return(result);
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	f040 8082 	bne.w	800d4d2 <osThreadNew+0x146>
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d07e      	beq.n	800d4d2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800d3d4:	2380      	movs	r3, #128	; 0x80
 800d3d6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800d3d8:	2318      	movs	r3, #24
 800d3da:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800d3dc:	2300      	movs	r3, #0
 800d3de:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800d3e0:	f107 031b 	add.w	r3, r7, #27
 800d3e4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800d3e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ea:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d045      	beq.n	800d47e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d002      	beq.n	800d400 <osThreadNew+0x74>
        name = attr->name;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d002      	beq.n	800d40e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	699b      	ldr	r3, [r3, #24]
 800d40c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d410:	2b00      	cmp	r3, #0
 800d412:	d008      	beq.n	800d426 <osThreadNew+0x9a>
 800d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d416:	2b38      	cmp	r3, #56	; 0x38
 800d418:	d805      	bhi.n	800d426 <osThreadNew+0x9a>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	f003 0301 	and.w	r3, r3, #1
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <osThreadNew+0x9e>
        return (NULL);
 800d426:	2300      	movs	r3, #0
 800d428:	e054      	b.n	800d4d4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	695b      	ldr	r3, [r3, #20]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	695b      	ldr	r3, [r3, #20]
 800d436:	089b      	lsrs	r3, r3, #2
 800d438:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	689b      	ldr	r3, [r3, #8]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d00e      	beq.n	800d460 <osThreadNew+0xd4>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	2b5f      	cmp	r3, #95	; 0x5f
 800d448:	d90a      	bls.n	800d460 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d006      	beq.n	800d460 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	695b      	ldr	r3, [r3, #20]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d002      	beq.n	800d460 <osThreadNew+0xd4>
        mem = 1;
 800d45a:	2301      	movs	r3, #1
 800d45c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d45e:	e010      	b.n	800d482 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10c      	bne.n	800d482 <osThreadNew+0xf6>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d108      	bne.n	800d482 <osThreadNew+0xf6>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	691b      	ldr	r3, [r3, #16]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d104      	bne.n	800d482 <osThreadNew+0xf6>
          mem = 0;
 800d478:	2300      	movs	r3, #0
 800d47a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d47c:	e001      	b.n	800d482 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800d47e:	2300      	movs	r3, #0
 800d480:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800d482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d484:	2b01      	cmp	r3, #1
 800d486:	d110      	bne.n	800d4aa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d490:	9202      	str	r2, [sp, #8]
 800d492:	9301      	str	r3, [sp, #4]
 800d494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d496:	9300      	str	r3, [sp, #0]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d49c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f001 f8b0 	bl	800e604 <xTaskCreateStatic>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	617b      	str	r3, [r7, #20]
 800d4a8:	e013      	b.n	800d4d2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800d4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d110      	bne.n	800d4d2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	f107 0314 	add.w	r3, r7, #20
 800d4b8:	9301      	str	r3, [sp, #4]
 800d4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f001 f8fa 	bl	800e6bc <xTaskCreate>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d001      	beq.n	800d4d2 <osThreadNew+0x146>
          hTask = NULL;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d4d2:	697b      	ldr	r3, [r7, #20]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3738      	adds	r7, #56	; 0x38
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	20000500 	.word	0x20000500

0800d4e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4e8:	f3ef 8305 	mrs	r3, IPSR
 800d4ec:	613b      	str	r3, [r7, #16]
  return(result);
 800d4ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10f      	bne.n	800d514 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4f4:	f3ef 8310 	mrs	r3, PRIMASK
 800d4f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d109      	bne.n	800d514 <osDelay+0x34>
 800d500:	4b0d      	ldr	r3, [pc, #52]	; (800d538 <osDelay+0x58>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2b02      	cmp	r3, #2
 800d506:	d109      	bne.n	800d51c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d508:	f3ef 8311 	mrs	r3, BASEPRI
 800d50c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d003      	beq.n	800d51c <osDelay+0x3c>
    stat = osErrorISR;
 800d514:	f06f 0305 	mvn.w	r3, #5
 800d518:	617b      	str	r3, [r7, #20]
 800d51a:	e007      	b.n	800d52c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d51c:	2300      	movs	r3, #0
 800d51e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <osDelay+0x4c>
      vTaskDelay(ticks);
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f001 fa08 	bl	800e93c <vTaskDelay>
    }
  }

  return (stat);
 800d52c:	697b      	ldr	r3, [r7, #20]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3718      	adds	r7, #24
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	20000500 	.word	0x20000500

0800d53c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08c      	sub	sp, #48	; 0x30
 800d540:	af02      	add	r7, sp, #8
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d548:	2300      	movs	r3, #0
 800d54a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d54c:	f3ef 8305 	mrs	r3, IPSR
 800d550:	61bb      	str	r3, [r7, #24]
  return(result);
 800d552:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d554:	2b00      	cmp	r3, #0
 800d556:	d16f      	bne.n	800d638 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d558:	f3ef 8310 	mrs	r3, PRIMASK
 800d55c:	617b      	str	r3, [r7, #20]
  return(result);
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d169      	bne.n	800d638 <osMessageQueueNew+0xfc>
 800d564:	4b37      	ldr	r3, [pc, #220]	; (800d644 <osMessageQueueNew+0x108>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2b02      	cmp	r3, #2
 800d56a:	d105      	bne.n	800d578 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d56c:	f3ef 8311 	mrs	r3, BASEPRI
 800d570:	613b      	str	r3, [r7, #16]
  return(result);
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d15f      	bne.n	800d638 <osMessageQueueNew+0xfc>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d05c      	beq.n	800d638 <osMessageQueueNew+0xfc>
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d059      	beq.n	800d638 <osMessageQueueNew+0xfc>
    mem = -1;
 800d584:	f04f 33ff 	mov.w	r3, #4294967295
 800d588:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d029      	beq.n	800d5e4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d012      	beq.n	800d5be <osMessageQueueNew+0x82>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	68db      	ldr	r3, [r3, #12]
 800d59c:	2b4f      	cmp	r3, #79	; 0x4f
 800d59e:	d90e      	bls.n	800d5be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00a      	beq.n	800d5be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	695a      	ldr	r2, [r3, #20]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	68b9      	ldr	r1, [r7, #8]
 800d5b0:	fb01 f303 	mul.w	r3, r1, r3
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d302      	bcc.n	800d5be <osMessageQueueNew+0x82>
        mem = 1;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	623b      	str	r3, [r7, #32]
 800d5bc:	e014      	b.n	800d5e8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d110      	bne.n	800d5e8 <osMessageQueueNew+0xac>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d10c      	bne.n	800d5e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d108      	bne.n	800d5e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	695b      	ldr	r3, [r3, #20]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d104      	bne.n	800d5e8 <osMessageQueueNew+0xac>
          mem = 0;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	623b      	str	r3, [r7, #32]
 800d5e2:	e001      	b.n	800d5e8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d5e8:	6a3b      	ldr	r3, [r7, #32]
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d10b      	bne.n	800d606 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	691a      	ldr	r2, [r3, #16]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	9100      	str	r1, [sp, #0]
 800d5fa:	68b9      	ldr	r1, [r7, #8]
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f000 fa8b 	bl	800db18 <xQueueGenericCreateStatic>
 800d602:	6278      	str	r0, [r7, #36]	; 0x24
 800d604:	e008      	b.n	800d618 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d105      	bne.n	800d618 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d60c:	2200      	movs	r2, #0
 800d60e:	68b9      	ldr	r1, [r7, #8]
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f000 faf8 	bl	800dc06 <xQueueGenericCreate>
 800d616:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00c      	beq.n	800d638 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d003      	beq.n	800d62c <osMessageQueueNew+0xf0>
        name = attr->name;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	61fb      	str	r3, [r7, #28]
 800d62a:	e001      	b.n	800d630 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800d62c:	2300      	movs	r3, #0
 800d62e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d630:	69f9      	ldr	r1, [r7, #28]
 800d632:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d634:	f000 ff88 	bl	800e548 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3728      	adds	r7, #40	; 0x28
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	20000500 	.word	0x20000500

0800d648 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d648:	b580      	push	{r7, lr}
 800d64a:	b08a      	sub	sp, #40	; 0x28
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	603b      	str	r3, [r7, #0]
 800d654:	4613      	mov	r3, r2
 800d656:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d65c:	2300      	movs	r3, #0
 800d65e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d660:	f3ef 8305 	mrs	r3, IPSR
 800d664:	61fb      	str	r3, [r7, #28]
  return(result);
 800d666:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10f      	bne.n	800d68c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d66c:	f3ef 8310 	mrs	r3, PRIMASK
 800d670:	61bb      	str	r3, [r7, #24]
  return(result);
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d109      	bne.n	800d68c <osMessageQueuePut+0x44>
 800d678:	4b2b      	ldr	r3, [pc, #172]	; (800d728 <osMessageQueuePut+0xe0>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2b02      	cmp	r3, #2
 800d67e:	d12e      	bne.n	800d6de <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d680:	f3ef 8311 	mrs	r3, BASEPRI
 800d684:	617b      	str	r3, [r7, #20]
  return(result);
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d028      	beq.n	800d6de <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d005      	beq.n	800d69e <osMessageQueuePut+0x56>
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d002      	beq.n	800d69e <osMessageQueuePut+0x56>
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d003      	beq.n	800d6a6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d69e:	f06f 0303 	mvn.w	r3, #3
 800d6a2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d6a4:	e039      	b.n	800d71a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d6aa:	f107 0210 	add.w	r2, r7, #16
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	68b9      	ldr	r1, [r7, #8]
 800d6b2:	6a38      	ldr	r0, [r7, #32]
 800d6b4:	f000 fc06 	bl	800dec4 <xQueueGenericSendFromISR>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d003      	beq.n	800d6c6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d6be:	f06f 0302 	mvn.w	r3, #2
 800d6c2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d6c4:	e029      	b.n	800d71a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d026      	beq.n	800d71a <osMessageQueuePut+0xd2>
 800d6cc:	4b17      	ldr	r3, [pc, #92]	; (800d72c <osMessageQueuePut+0xe4>)
 800d6ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6d2:	601a      	str	r2, [r3, #0]
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d6dc:	e01d      	b.n	800d71a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d6de:	6a3b      	ldr	r3, [r7, #32]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <osMessageQueuePut+0xa2>
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d103      	bne.n	800d6f2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d6ea:	f06f 0303 	mvn.w	r3, #3
 800d6ee:	627b      	str	r3, [r7, #36]	; 0x24
 800d6f0:	e014      	b.n	800d71c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	683a      	ldr	r2, [r7, #0]
 800d6f6:	68b9      	ldr	r1, [r7, #8]
 800d6f8:	6a38      	ldr	r0, [r7, #32]
 800d6fa:	f000 fae5 	bl	800dcc8 <xQueueGenericSend>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b01      	cmp	r3, #1
 800d702:	d00b      	beq.n	800d71c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d003      	beq.n	800d712 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d70a:	f06f 0301 	mvn.w	r3, #1
 800d70e:	627b      	str	r3, [r7, #36]	; 0x24
 800d710:	e004      	b.n	800d71c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d712:	f06f 0302 	mvn.w	r3, #2
 800d716:	627b      	str	r3, [r7, #36]	; 0x24
 800d718:	e000      	b.n	800d71c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d71a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3728      	adds	r7, #40	; 0x28
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	20000500 	.word	0x20000500
 800d72c:	e000ed04 	.word	0xe000ed04

0800d730 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d730:	b580      	push	{r7, lr}
 800d732:	b08a      	sub	sp, #40	; 0x28
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	607a      	str	r2, [r7, #4]
 800d73c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d742:	2300      	movs	r3, #0
 800d744:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d746:	f3ef 8305 	mrs	r3, IPSR
 800d74a:	61fb      	str	r3, [r7, #28]
  return(result);
 800d74c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d10f      	bne.n	800d772 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d752:	f3ef 8310 	mrs	r3, PRIMASK
 800d756:	61bb      	str	r3, [r7, #24]
  return(result);
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d109      	bne.n	800d772 <osMessageQueueGet+0x42>
 800d75e:	4b2b      	ldr	r3, [pc, #172]	; (800d80c <osMessageQueueGet+0xdc>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2b02      	cmp	r3, #2
 800d764:	d12e      	bne.n	800d7c4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d766:	f3ef 8311 	mrs	r3, BASEPRI
 800d76a:	617b      	str	r3, [r7, #20]
  return(result);
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d028      	beq.n	800d7c4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d772:	6a3b      	ldr	r3, [r7, #32]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d005      	beq.n	800d784 <osMessageQueueGet+0x54>
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d002      	beq.n	800d784 <osMessageQueueGet+0x54>
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d003      	beq.n	800d78c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d784:	f06f 0303 	mvn.w	r3, #3
 800d788:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d78a:	e038      	b.n	800d7fe <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d78c:	2300      	movs	r3, #0
 800d78e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d790:	f107 0310 	add.w	r3, r7, #16
 800d794:	461a      	mov	r2, r3
 800d796:	68b9      	ldr	r1, [r7, #8]
 800d798:	6a38      	ldr	r0, [r7, #32]
 800d79a:	f000 fd0b 	bl	800e1b4 <xQueueReceiveFromISR>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d003      	beq.n	800d7ac <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d7a4:	f06f 0302 	mvn.w	r3, #2
 800d7a8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7aa:	e028      	b.n	800d7fe <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d025      	beq.n	800d7fe <osMessageQueueGet+0xce>
 800d7b2:	4b17      	ldr	r3, [pc, #92]	; (800d810 <osMessageQueueGet+0xe0>)
 800d7b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b8:	601a      	str	r2, [r3, #0]
 800d7ba:	f3bf 8f4f 	dsb	sy
 800d7be:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7c2:	e01c      	b.n	800d7fe <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d7c4:	6a3b      	ldr	r3, [r7, #32]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d002      	beq.n	800d7d0 <osMessageQueueGet+0xa0>
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d103      	bne.n	800d7d8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d7d0:	f06f 0303 	mvn.w	r3, #3
 800d7d4:	627b      	str	r3, [r7, #36]	; 0x24
 800d7d6:	e013      	b.n	800d800 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d7d8:	683a      	ldr	r2, [r7, #0]
 800d7da:	68b9      	ldr	r1, [r7, #8]
 800d7dc:	6a38      	ldr	r0, [r7, #32]
 800d7de:	f000 fc09 	bl	800dff4 <xQueueReceive>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d00b      	beq.n	800d800 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d003      	beq.n	800d7f6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d7ee:	f06f 0301 	mvn.w	r3, #1
 800d7f2:	627b      	str	r3, [r7, #36]	; 0x24
 800d7f4:	e004      	b.n	800d800 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d7f6:	f06f 0302 	mvn.w	r3, #2
 800d7fa:	627b      	str	r3, [r7, #36]	; 0x24
 800d7fc:	e000      	b.n	800d800 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7fe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d802:	4618      	mov	r0, r3
 800d804:	3728      	adds	r7, #40	; 0x28
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	20000500 	.word	0x20000500
 800d810:	e000ed04 	.word	0xe000ed04

0800d814 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d814:	b580      	push	{r7, lr}
 800d816:	b088      	sub	sp, #32
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d102      	bne.n	800d82c <osMessageQueueGetCount+0x18>
    count = 0U;
 800d826:	2300      	movs	r3, #0
 800d828:	61fb      	str	r3, [r7, #28]
 800d82a:	e01e      	b.n	800d86a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d82c:	f3ef 8305 	mrs	r3, IPSR
 800d830:	617b      	str	r3, [r7, #20]
  return(result);
 800d832:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d834:	2b00      	cmp	r3, #0
 800d836:	d10f      	bne.n	800d858 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d838:	f3ef 8310 	mrs	r3, PRIMASK
 800d83c:	613b      	str	r3, [r7, #16]
  return(result);
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d109      	bne.n	800d858 <osMessageQueueGetCount+0x44>
 800d844:	4b0b      	ldr	r3, [pc, #44]	; (800d874 <osMessageQueueGetCount+0x60>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2b02      	cmp	r3, #2
 800d84a:	d10a      	bne.n	800d862 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d84c:	f3ef 8311 	mrs	r3, BASEPRI
 800d850:	60fb      	str	r3, [r7, #12]
  return(result);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d004      	beq.n	800d862 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800d858:	69b8      	ldr	r0, [r7, #24]
 800d85a:	f000 fd49 	bl	800e2f0 <uxQueueMessagesWaitingFromISR>
 800d85e:	61f8      	str	r0, [r7, #28]
 800d860:	e003      	b.n	800d86a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800d862:	69b8      	ldr	r0, [r7, #24]
 800d864:	f000 fd26 	bl	800e2b4 <uxQueueMessagesWaiting>
 800d868:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800d86a:	69fb      	ldr	r3, [r7, #28]
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3720      	adds	r7, #32
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	20000500 	.word	0x20000500

0800d878 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d878:	b480      	push	{r7}
 800d87a:	b085      	sub	sp, #20
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	4a07      	ldr	r2, [pc, #28]	; (800d8a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800d888:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	4a06      	ldr	r2, [pc, #24]	; (800d8a8 <vApplicationGetIdleTaskMemory+0x30>)
 800d88e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2280      	movs	r2, #128	; 0x80
 800d894:	601a      	str	r2, [r3, #0]
}
 800d896:	bf00      	nop
 800d898:	3714      	adds	r7, #20
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	20000504 	.word	0x20000504
 800d8a8:	20000564 	.word	0x20000564

0800d8ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	4a07      	ldr	r2, [pc, #28]	; (800d8d8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d8bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	4a06      	ldr	r2, [pc, #24]	; (800d8dc <vApplicationGetTimerTaskMemory+0x30>)
 800d8c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8ca:	601a      	str	r2, [r3, #0]
}
 800d8cc:	bf00      	nop
 800d8ce:	3714      	adds	r7, #20
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	20000764 	.word	0x20000764
 800d8dc:	200007c4 	.word	0x200007c4

0800d8e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f103 0208 	add.w	r2, r3, #8
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f103 0208 	add.w	r2, r3, #8
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f103 0208 	add.w	r2, r3, #8
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2200      	movs	r2, #0
 800d912:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d914:	bf00      	nop
 800d916:	370c      	adds	r7, #12
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr

0800d920 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d92e:	bf00      	nop
 800d930:	370c      	adds	r7, #12
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr

0800d93a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d93a:	b480      	push	{r7}
 800d93c:	b085      	sub	sp, #20
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
 800d942:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	68fa      	ldr	r2, [r7, #12]
 800d94e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	689a      	ldr	r2, [r3, #8]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	689b      	ldr	r3, [r3, #8]
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	1c5a      	adds	r2, r3, #1
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	601a      	str	r2, [r3, #0]
}
 800d976:	bf00      	nop
 800d978:	3714      	adds	r7, #20
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr

0800d982 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d982:	b480      	push	{r7}
 800d984:	b085      	sub	sp, #20
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d998:	d103      	bne.n	800d9a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	60fb      	str	r3, [r7, #12]
 800d9a0:	e00c      	b.n	800d9bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	3308      	adds	r3, #8
 800d9a6:	60fb      	str	r3, [r7, #12]
 800d9a8:	e002      	b.n	800d9b0 <vListInsert+0x2e>
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	60fb      	str	r3, [r7, #12]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d2f6      	bcs.n	800d9aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	685a      	ldr	r2, [r3, #4]
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	683a      	ldr	r2, [r7, #0]
 800d9ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	68fa      	ldr	r2, [r7, #12]
 800d9d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	683a      	ldr	r2, [r7, #0]
 800d9d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	1c5a      	adds	r2, r3, #1
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	601a      	str	r2, [r3, #0]
}
 800d9e8:	bf00      	nop
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr

0800d9f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b085      	sub	sp, #20
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	691b      	ldr	r3, [r3, #16]
 800da00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	6892      	ldr	r2, [r2, #8]
 800da0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	689b      	ldr	r3, [r3, #8]
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	6852      	ldr	r2, [r2, #4]
 800da14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d103      	bne.n	800da28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	689a      	ldr	r2, [r3, #8]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	1e5a      	subs	r2, r3, #1
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3714      	adds	r7, #20
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10a      	bne.n	800da72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800da5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800da6e:	bf00      	nop
 800da70:	e7fe      	b.n	800da70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800da72:	f002 f927 	bl	800fcc4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da7e:	68f9      	ldr	r1, [r7, #12]
 800da80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800da82:	fb01 f303 	mul.w	r3, r1, r3
 800da86:	441a      	add	r2, r3
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2200      	movs	r2, #0
 800da90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daa2:	3b01      	subs	r3, #1
 800daa4:	68f9      	ldr	r1, [r7, #12]
 800daa6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800daa8:	fb01 f303 	mul.w	r3, r1, r3
 800daac:	441a      	add	r2, r3
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	22ff      	movs	r2, #255	; 0xff
 800dab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	22ff      	movs	r2, #255	; 0xff
 800dabe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d114      	bne.n	800daf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	691b      	ldr	r3, [r3, #16]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d01a      	beq.n	800db06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	3310      	adds	r3, #16
 800dad4:	4618      	mov	r0, r3
 800dad6:	f001 fa0f 	bl	800eef8 <xTaskRemoveFromEventList>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d012      	beq.n	800db06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dae0:	4b0c      	ldr	r3, [pc, #48]	; (800db14 <xQueueGenericReset+0xcc>)
 800dae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	e009      	b.n	800db06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	3310      	adds	r3, #16
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7ff fef2 	bl	800d8e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	3324      	adds	r3, #36	; 0x24
 800db00:	4618      	mov	r0, r3
 800db02:	f7ff feed 	bl	800d8e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800db06:	f002 f90d 	bl	800fd24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800db0a:	2301      	movs	r3, #1
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3710      	adds	r7, #16
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	e000ed04 	.word	0xe000ed04

0800db18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b08e      	sub	sp, #56	; 0x38
 800db1c:	af02      	add	r7, sp, #8
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	607a      	str	r2, [r7, #4]
 800db24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10a      	bne.n	800db42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800db2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db30:	f383 8811 	msr	BASEPRI, r3
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800db3e:	bf00      	nop
 800db40:	e7fe      	b.n	800db40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d10a      	bne.n	800db5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800db48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4c:	f383 8811 	msr	BASEPRI, r3
 800db50:	f3bf 8f6f 	isb	sy
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800db5a:	bf00      	nop
 800db5c:	e7fe      	b.n	800db5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d002      	beq.n	800db6a <xQueueGenericCreateStatic+0x52>
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d001      	beq.n	800db6e <xQueueGenericCreateStatic+0x56>
 800db6a:	2301      	movs	r3, #1
 800db6c:	e000      	b.n	800db70 <xQueueGenericCreateStatic+0x58>
 800db6e:	2300      	movs	r3, #0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d10a      	bne.n	800db8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800db74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db78:	f383 8811 	msr	BASEPRI, r3
 800db7c:	f3bf 8f6f 	isb	sy
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	623b      	str	r3, [r7, #32]
}
 800db86:	bf00      	nop
 800db88:	e7fe      	b.n	800db88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d102      	bne.n	800db96 <xQueueGenericCreateStatic+0x7e>
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d101      	bne.n	800db9a <xQueueGenericCreateStatic+0x82>
 800db96:	2301      	movs	r3, #1
 800db98:	e000      	b.n	800db9c <xQueueGenericCreateStatic+0x84>
 800db9a:	2300      	movs	r3, #0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d10a      	bne.n	800dbb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800dba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	61fb      	str	r3, [r7, #28]
}
 800dbb2:	bf00      	nop
 800dbb4:	e7fe      	b.n	800dbb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dbb6:	2350      	movs	r3, #80	; 0x50
 800dbb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	2b50      	cmp	r3, #80	; 0x50
 800dbbe:	d00a      	beq.n	800dbd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800dbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	61bb      	str	r3, [r7, #24]
}
 800dbd2:	bf00      	nop
 800dbd4:	e7fe      	b.n	800dbd4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00d      	beq.n	800dbfc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dbe8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	68b9      	ldr	r1, [r7, #8]
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	f000 f843 	bl	800dc82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800dbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3730      	adds	r7, #48	; 0x30
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b08a      	sub	sp, #40	; 0x28
 800dc0a:	af02      	add	r7, sp, #8
 800dc0c:	60f8      	str	r0, [r7, #12]
 800dc0e:	60b9      	str	r1, [r7, #8]
 800dc10:	4613      	mov	r3, r2
 800dc12:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d10a      	bne.n	800dc30 <xQueueGenericCreate+0x2a>
	__asm volatile
 800dc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1e:	f383 8811 	msr	BASEPRI, r3
 800dc22:	f3bf 8f6f 	isb	sy
 800dc26:	f3bf 8f4f 	dsb	sy
 800dc2a:	613b      	str	r3, [r7, #16]
}
 800dc2c:	bf00      	nop
 800dc2e:	e7fe      	b.n	800dc2e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d102      	bne.n	800dc3c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800dc36:	2300      	movs	r3, #0
 800dc38:	61fb      	str	r3, [r7, #28]
 800dc3a:	e004      	b.n	800dc46 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	68ba      	ldr	r2, [r7, #8]
 800dc40:	fb02 f303 	mul.w	r3, r2, r3
 800dc44:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	3350      	adds	r3, #80	; 0x50
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f002 f95c 	bl	800ff08 <pvPortMalloc>
 800dc50:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d00f      	beq.n	800dc78 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	3350      	adds	r3, #80	; 0x50
 800dc5c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dc5e:	69bb      	ldr	r3, [r7, #24]
 800dc60:	2200      	movs	r2, #0
 800dc62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dc66:	79fa      	ldrb	r2, [r7, #7]
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	697a      	ldr	r2, [r7, #20]
 800dc70:	68b9      	ldr	r1, [r7, #8]
 800dc72:	68f8      	ldr	r0, [r7, #12]
 800dc74:	f000 f805 	bl	800dc82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800dc78:	69bb      	ldr	r3, [r7, #24]
	}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3720      	adds	r7, #32
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b084      	sub	sp, #16
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	60f8      	str	r0, [r7, #12]
 800dc8a:	60b9      	str	r1, [r7, #8]
 800dc8c:	607a      	str	r2, [r7, #4]
 800dc8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d103      	bne.n	800dc9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	69ba      	ldr	r2, [r7, #24]
 800dc9a:	601a      	str	r2, [r3, #0]
 800dc9c:	e002      	b.n	800dca4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dca4:	69bb      	ldr	r3, [r7, #24]
 800dca6:	68fa      	ldr	r2, [r7, #12]
 800dca8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	69b8      	ldr	r0, [r7, #24]
 800dcb4:	f7ff fec8 	bl	800da48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dcb8:	69bb      	ldr	r3, [r7, #24]
 800dcba:	78fa      	ldrb	r2, [r7, #3]
 800dcbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dcc0:	bf00      	nop
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b08e      	sub	sp, #56	; 0x38
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
 800dcd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10a      	bne.n	800dcfa <xQueueGenericSend+0x32>
	__asm volatile
 800dce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce8:	f383 8811 	msr	BASEPRI, r3
 800dcec:	f3bf 8f6f 	isb	sy
 800dcf0:	f3bf 8f4f 	dsb	sy
 800dcf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dcf6:	bf00      	nop
 800dcf8:	e7fe      	b.n	800dcf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d103      	bne.n	800dd08 <xQueueGenericSend+0x40>
 800dd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d101      	bne.n	800dd0c <xQueueGenericSend+0x44>
 800dd08:	2301      	movs	r3, #1
 800dd0a:	e000      	b.n	800dd0e <xQueueGenericSend+0x46>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d10a      	bne.n	800dd28 <xQueueGenericSend+0x60>
	__asm volatile
 800dd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd16:	f383 8811 	msr	BASEPRI, r3
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dd24:	bf00      	nop
 800dd26:	e7fe      	b.n	800dd26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	2b02      	cmp	r3, #2
 800dd2c:	d103      	bne.n	800dd36 <xQueueGenericSend+0x6e>
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d101      	bne.n	800dd3a <xQueueGenericSend+0x72>
 800dd36:	2301      	movs	r3, #1
 800dd38:	e000      	b.n	800dd3c <xQueueGenericSend+0x74>
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d10a      	bne.n	800dd56 <xQueueGenericSend+0x8e>
	__asm volatile
 800dd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd44:	f383 8811 	msr	BASEPRI, r3
 800dd48:	f3bf 8f6f 	isb	sy
 800dd4c:	f3bf 8f4f 	dsb	sy
 800dd50:	623b      	str	r3, [r7, #32]
}
 800dd52:	bf00      	nop
 800dd54:	e7fe      	b.n	800dd54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd56:	f001 fa93 	bl	800f280 <xTaskGetSchedulerState>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d102      	bne.n	800dd66 <xQueueGenericSend+0x9e>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d101      	bne.n	800dd6a <xQueueGenericSend+0xa2>
 800dd66:	2301      	movs	r3, #1
 800dd68:	e000      	b.n	800dd6c <xQueueGenericSend+0xa4>
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d10a      	bne.n	800dd86 <xQueueGenericSend+0xbe>
	__asm volatile
 800dd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	61fb      	str	r3, [r7, #28]
}
 800dd82:	bf00      	nop
 800dd84:	e7fe      	b.n	800dd84 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd86:	f001 ff9d 	bl	800fcc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d302      	bcc.n	800dd9c <xQueueGenericSend+0xd4>
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	2b02      	cmp	r3, #2
 800dd9a:	d129      	bne.n	800ddf0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd9c:	683a      	ldr	r2, [r7, #0]
 800dd9e:	68b9      	ldr	r1, [r7, #8]
 800dda0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dda2:	f000 fac1 	bl	800e328 <prvCopyDataToQueue>
 800dda6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d010      	beq.n	800ddd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb2:	3324      	adds	r3, #36	; 0x24
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f001 f89f 	bl	800eef8 <xTaskRemoveFromEventList>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d013      	beq.n	800dde8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ddc0:	4b3f      	ldr	r3, [pc, #252]	; (800dec0 <xQueueGenericSend+0x1f8>)
 800ddc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddc6:	601a      	str	r2, [r3, #0]
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	f3bf 8f6f 	isb	sy
 800ddd0:	e00a      	b.n	800dde8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ddd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d007      	beq.n	800dde8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ddd8:	4b39      	ldr	r3, [pc, #228]	; (800dec0 <xQueueGenericSend+0x1f8>)
 800ddda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddde:	601a      	str	r2, [r3, #0]
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dde8:	f001 ff9c 	bl	800fd24 <vPortExitCritical>
				return pdPASS;
 800ddec:	2301      	movs	r3, #1
 800ddee:	e063      	b.n	800deb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d103      	bne.n	800ddfe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ddf6:	f001 ff95 	bl	800fd24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	e05c      	b.n	800deb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ddfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de00:	2b00      	cmp	r3, #0
 800de02:	d106      	bne.n	800de12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de04:	f107 0314 	add.w	r3, r7, #20
 800de08:	4618      	mov	r0, r3
 800de0a:	f001 f8d9 	bl	800efc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de0e:	2301      	movs	r3, #1
 800de10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de12:	f001 ff87 	bl	800fd24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de16:	f000 fe2d 	bl	800ea74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de1a:	f001 ff53 	bl	800fcc4 <vPortEnterCritical>
 800de1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de24:	b25b      	sxtb	r3, r3
 800de26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2a:	d103      	bne.n	800de34 <xQueueGenericSend+0x16c>
 800de2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2e:	2200      	movs	r2, #0
 800de30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de3a:	b25b      	sxtb	r3, r3
 800de3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de40:	d103      	bne.n	800de4a <xQueueGenericSend+0x182>
 800de42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de44:	2200      	movs	r2, #0
 800de46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de4a:	f001 ff6b 	bl	800fd24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de4e:	1d3a      	adds	r2, r7, #4
 800de50:	f107 0314 	add.w	r3, r7, #20
 800de54:	4611      	mov	r1, r2
 800de56:	4618      	mov	r0, r3
 800de58:	f001 f8c8 	bl	800efec <xTaskCheckForTimeOut>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d124      	bne.n	800deac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800de62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de64:	f000 fb58 	bl	800e518 <prvIsQueueFull>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d018      	beq.n	800dea0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	3310      	adds	r3, #16
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	4611      	mov	r1, r2
 800de76:	4618      	mov	r0, r3
 800de78:	f000 ffee 	bl	800ee58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800de7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de7e:	f000 fae3 	bl	800e448 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800de82:	f000 fe05 	bl	800ea90 <xTaskResumeAll>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f47f af7c 	bne.w	800dd86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800de8e:	4b0c      	ldr	r3, [pc, #48]	; (800dec0 <xQueueGenericSend+0x1f8>)
 800de90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de94:	601a      	str	r2, [r3, #0]
 800de96:	f3bf 8f4f 	dsb	sy
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	e772      	b.n	800dd86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dea2:	f000 fad1 	bl	800e448 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dea6:	f000 fdf3 	bl	800ea90 <xTaskResumeAll>
 800deaa:	e76c      	b.n	800dd86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800deac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800deae:	f000 facb 	bl	800e448 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800deb2:	f000 fded 	bl	800ea90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800deb6:	2300      	movs	r3, #0
		}
	}
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3738      	adds	r7, #56	; 0x38
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	e000ed04 	.word	0xe000ed04

0800dec4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b08e      	sub	sp, #56	; 0x38
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
 800ded0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ded6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d10a      	bne.n	800def2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee0:	f383 8811 	msr	BASEPRI, r3
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800deee:	bf00      	nop
 800def0:	e7fe      	b.n	800def0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d103      	bne.n	800df00 <xQueueGenericSendFromISR+0x3c>
 800def8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defc:	2b00      	cmp	r3, #0
 800defe:	d101      	bne.n	800df04 <xQueueGenericSendFromISR+0x40>
 800df00:	2301      	movs	r3, #1
 800df02:	e000      	b.n	800df06 <xQueueGenericSendFromISR+0x42>
 800df04:	2300      	movs	r3, #0
 800df06:	2b00      	cmp	r3, #0
 800df08:	d10a      	bne.n	800df20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800df0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0e:	f383 8811 	msr	BASEPRI, r3
 800df12:	f3bf 8f6f 	isb	sy
 800df16:	f3bf 8f4f 	dsb	sy
 800df1a:	623b      	str	r3, [r7, #32]
}
 800df1c:	bf00      	nop
 800df1e:	e7fe      	b.n	800df1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	2b02      	cmp	r3, #2
 800df24:	d103      	bne.n	800df2e <xQueueGenericSendFromISR+0x6a>
 800df26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	d101      	bne.n	800df32 <xQueueGenericSendFromISR+0x6e>
 800df2e:	2301      	movs	r3, #1
 800df30:	e000      	b.n	800df34 <xQueueGenericSendFromISR+0x70>
 800df32:	2300      	movs	r3, #0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10a      	bne.n	800df4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800df38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3c:	f383 8811 	msr	BASEPRI, r3
 800df40:	f3bf 8f6f 	isb	sy
 800df44:	f3bf 8f4f 	dsb	sy
 800df48:	61fb      	str	r3, [r7, #28]
}
 800df4a:	bf00      	nop
 800df4c:	e7fe      	b.n	800df4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df4e:	f001 ff9b 	bl	800fe88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800df52:	f3ef 8211 	mrs	r2, BASEPRI
 800df56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df5a:	f383 8811 	msr	BASEPRI, r3
 800df5e:	f3bf 8f6f 	isb	sy
 800df62:	f3bf 8f4f 	dsb	sy
 800df66:	61ba      	str	r2, [r7, #24]
 800df68:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800df6a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df76:	429a      	cmp	r2, r3
 800df78:	d302      	bcc.n	800df80 <xQueueGenericSendFromISR+0xbc>
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	2b02      	cmp	r3, #2
 800df7e:	d12c      	bne.n	800dfda <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df8a:	683a      	ldr	r2, [r7, #0]
 800df8c:	68b9      	ldr	r1, [r7, #8]
 800df8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df90:	f000 f9ca 	bl	800e328 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800df94:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800df98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df9c:	d112      	bne.n	800dfc4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d016      	beq.n	800dfd4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa8:	3324      	adds	r3, #36	; 0x24
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f000 ffa4 	bl	800eef8 <xTaskRemoveFromEventList>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d00e      	beq.n	800dfd4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d00b      	beq.n	800dfd4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	601a      	str	r2, [r3, #0]
 800dfc2:	e007      	b.n	800dfd4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dfc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dfc8:	3301      	adds	r3, #1
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	b25a      	sxtb	r2, r3
 800dfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800dfd8:	e001      	b.n	800dfde <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	637b      	str	r3, [r7, #52]	; 0x34
 800dfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dfe8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3738      	adds	r7, #56	; 0x38
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b08c      	sub	sp, #48	; 0x30
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e000:	2300      	movs	r3, #0
 800e002:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10a      	bne.n	800e024 <xQueueReceive+0x30>
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	623b      	str	r3, [r7, #32]
}
 800e020:	bf00      	nop
 800e022:	e7fe      	b.n	800e022 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d103      	bne.n	800e032 <xQueueReceive+0x3e>
 800e02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d101      	bne.n	800e036 <xQueueReceive+0x42>
 800e032:	2301      	movs	r3, #1
 800e034:	e000      	b.n	800e038 <xQueueReceive+0x44>
 800e036:	2300      	movs	r3, #0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d10a      	bne.n	800e052 <xQueueReceive+0x5e>
	__asm volatile
 800e03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e040:	f383 8811 	msr	BASEPRI, r3
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	f3bf 8f4f 	dsb	sy
 800e04c:	61fb      	str	r3, [r7, #28]
}
 800e04e:	bf00      	nop
 800e050:	e7fe      	b.n	800e050 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e052:	f001 f915 	bl	800f280 <xTaskGetSchedulerState>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d102      	bne.n	800e062 <xQueueReceive+0x6e>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d101      	bne.n	800e066 <xQueueReceive+0x72>
 800e062:	2301      	movs	r3, #1
 800e064:	e000      	b.n	800e068 <xQueueReceive+0x74>
 800e066:	2300      	movs	r3, #0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d10a      	bne.n	800e082 <xQueueReceive+0x8e>
	__asm volatile
 800e06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e070:	f383 8811 	msr	BASEPRI, r3
 800e074:	f3bf 8f6f 	isb	sy
 800e078:	f3bf 8f4f 	dsb	sy
 800e07c:	61bb      	str	r3, [r7, #24]
}
 800e07e:	bf00      	nop
 800e080:	e7fe      	b.n	800e080 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800e082:	f001 fe1f 	bl	800fcc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e08a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d01f      	beq.n	800e0d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e092:	68b9      	ldr	r1, [r7, #8]
 800e094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e096:	f000 f9b1 	bl	800e3fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09c:	1e5a      	subs	r2, r3, #1
 800e09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00f      	beq.n	800e0ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ac:	3310      	adds	r3, #16
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f000 ff22 	bl	800eef8 <xTaskRemoveFromEventList>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d007      	beq.n	800e0ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e0ba:	4b3d      	ldr	r3, [pc, #244]	; (800e1b0 <xQueueReceive+0x1bc>)
 800e0bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0c0:	601a      	str	r2, [r3, #0]
 800e0c2:	f3bf 8f4f 	dsb	sy
 800e0c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e0ca:	f001 fe2b 	bl	800fd24 <vPortExitCritical>
				return pdPASS;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e069      	b.n	800e1a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d103      	bne.n	800e0e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e0d8:	f001 fe24 	bl	800fd24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	e062      	b.n	800e1a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d106      	bne.n	800e0f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0e6:	f107 0310 	add.w	r3, r7, #16
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 ff68 	bl	800efc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e0f4:	f001 fe16 	bl	800fd24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e0f8:	f000 fcbc 	bl	800ea74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e0fc:	f001 fde2 	bl	800fcc4 <vPortEnterCritical>
 800e100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e106:	b25b      	sxtb	r3, r3
 800e108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e10c:	d103      	bne.n	800e116 <xQueueReceive+0x122>
 800e10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e110:	2200      	movs	r2, #0
 800e112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e11c:	b25b      	sxtb	r3, r3
 800e11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e122:	d103      	bne.n	800e12c <xQueueReceive+0x138>
 800e124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e126:	2200      	movs	r2, #0
 800e128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e12c:	f001 fdfa 	bl	800fd24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e130:	1d3a      	adds	r2, r7, #4
 800e132:	f107 0310 	add.w	r3, r7, #16
 800e136:	4611      	mov	r1, r2
 800e138:	4618      	mov	r0, r3
 800e13a:	f000 ff57 	bl	800efec <xTaskCheckForTimeOut>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d123      	bne.n	800e18c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e146:	f000 f9d1 	bl	800e4ec <prvIsQueueEmpty>
 800e14a:	4603      	mov	r3, r0
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d017      	beq.n	800e180 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e152:	3324      	adds	r3, #36	; 0x24
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	4611      	mov	r1, r2
 800e158:	4618      	mov	r0, r3
 800e15a:	f000 fe7d 	bl	800ee58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e15e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e160:	f000 f972 	bl	800e448 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e164:	f000 fc94 	bl	800ea90 <xTaskResumeAll>
 800e168:	4603      	mov	r3, r0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d189      	bne.n	800e082 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e16e:	4b10      	ldr	r3, [pc, #64]	; (800e1b0 <xQueueReceive+0x1bc>)
 800e170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e174:	601a      	str	r2, [r3, #0]
 800e176:	f3bf 8f4f 	dsb	sy
 800e17a:	f3bf 8f6f 	isb	sy
 800e17e:	e780      	b.n	800e082 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e182:	f000 f961 	bl	800e448 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e186:	f000 fc83 	bl	800ea90 <xTaskResumeAll>
 800e18a:	e77a      	b.n	800e082 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e18e:	f000 f95b 	bl	800e448 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e192:	f000 fc7d 	bl	800ea90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e198:	f000 f9a8 	bl	800e4ec <prvIsQueueEmpty>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f43f af6f 	beq.w	800e082 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e1a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3730      	adds	r7, #48	; 0x30
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	e000ed04 	.word	0xe000ed04

0800e1b4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b08e      	sub	sp, #56	; 0x38
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d10a      	bne.n	800e1e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	623b      	str	r3, [r7, #32]
}
 800e1dc:	bf00      	nop
 800e1de:	e7fe      	b.n	800e1de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d103      	bne.n	800e1ee <xQueueReceiveFromISR+0x3a>
 800e1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d101      	bne.n	800e1f2 <xQueueReceiveFromISR+0x3e>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e000      	b.n	800e1f4 <xQueueReceiveFromISR+0x40>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d10a      	bne.n	800e20e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	61fb      	str	r3, [r7, #28]
}
 800e20a:	bf00      	nop
 800e20c:	e7fe      	b.n	800e20c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e20e:	f001 fe3b 	bl	800fe88 <vPortValidateInterruptPriority>
	__asm volatile
 800e212:	f3ef 8211 	mrs	r2, BASEPRI
 800e216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21a:	f383 8811 	msr	BASEPRI, r3
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	61ba      	str	r2, [r7, #24]
 800e228:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e22a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e22c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e232:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e236:	2b00      	cmp	r3, #0
 800e238:	d02f      	beq.n	800e29a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e244:	68b9      	ldr	r1, [r7, #8]
 800e246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e248:	f000 f8d8 	bl	800e3fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24e:	1e5a      	subs	r2, r3, #1
 800e250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e252:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e254:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e25c:	d112      	bne.n	800e284 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e260:	691b      	ldr	r3, [r3, #16]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d016      	beq.n	800e294 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e268:	3310      	adds	r3, #16
 800e26a:	4618      	mov	r0, r3
 800e26c:	f000 fe44 	bl	800eef8 <xTaskRemoveFromEventList>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00e      	beq.n	800e294 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00b      	beq.n	800e294 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2201      	movs	r2, #1
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	e007      	b.n	800e294 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e288:	3301      	adds	r3, #1
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	b25a      	sxtb	r2, r3
 800e28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e294:	2301      	movs	r3, #1
 800e296:	637b      	str	r3, [r7, #52]	; 0x34
 800e298:	e001      	b.n	800e29e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e29a:	2300      	movs	r3, #0
 800e29c:	637b      	str	r3, [r7, #52]	; 0x34
 800e29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	f383 8811 	msr	BASEPRI, r3
}
 800e2a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3738      	adds	r7, #56	; 0x38
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d10a      	bne.n	800e2d8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800e2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c6:	f383 8811 	msr	BASEPRI, r3
 800e2ca:	f3bf 8f6f 	isb	sy
 800e2ce:	f3bf 8f4f 	dsb	sy
 800e2d2:	60bb      	str	r3, [r7, #8]
}
 800e2d4:	bf00      	nop
 800e2d6:	e7fe      	b.n	800e2d6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800e2d8:	f001 fcf4 	bl	800fcc4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2e0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e2e2:	f001 fd1f 	bl	800fd24 <vPortExitCritical>

	return uxReturn;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d10a      	bne.n	800e314 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 800e2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e302:	f383 8811 	msr	BASEPRI, r3
 800e306:	f3bf 8f6f 	isb	sy
 800e30a:	f3bf 8f4f 	dsb	sy
 800e30e:	60bb      	str	r3, [r7, #8]
}
 800e310:	bf00      	nop
 800e312:	e7fe      	b.n	800e312 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e318:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800e31a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e31c:	4618      	mov	r0, r3
 800e31e:	3714      	adds	r7, #20
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b086      	sub	sp, #24
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	60b9      	str	r1, [r7, #8]
 800e332:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e334:	2300      	movs	r3, #0
 800e336:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e33c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e342:	2b00      	cmp	r3, #0
 800e344:	d10d      	bne.n	800e362 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d14d      	bne.n	800e3ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	4618      	mov	r0, r3
 800e354:	f000 ffb2 	bl	800f2bc <xTaskPriorityDisinherit>
 800e358:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2200      	movs	r2, #0
 800e35e:	605a      	str	r2, [r3, #4]
 800e360:	e043      	b.n	800e3ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d119      	bne.n	800e39c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6898      	ldr	r0, [r3, #8]
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e370:	461a      	mov	r2, r3
 800e372:	68b9      	ldr	r1, [r7, #8]
 800e374:	f007 fbd2 	bl	8015b1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	689a      	ldr	r2, [r3, #8]
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e380:	441a      	add	r2, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	689a      	ldr	r2, [r3, #8]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d32b      	bcc.n	800e3ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	609a      	str	r2, [r3, #8]
 800e39a:	e026      	b.n	800e3ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	68d8      	ldr	r0, [r3, #12]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	68b9      	ldr	r1, [r7, #8]
 800e3a8:	f007 fbb8 	bl	8015b1c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	68da      	ldr	r2, [r3, #12]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3b4:	425b      	negs	r3, r3
 800e3b6:	441a      	add	r2, r3
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	68da      	ldr	r2, [r3, #12]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d207      	bcs.n	800e3d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	685a      	ldr	r2, [r3, #4]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3d0:	425b      	negs	r3, r3
 800e3d2:	441a      	add	r2, r3
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2b02      	cmp	r3, #2
 800e3dc:	d105      	bne.n	800e3ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d002      	beq.n	800e3ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	3b01      	subs	r3, #1
 800e3e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	1c5a      	adds	r2, r3, #1
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e3f2:	697b      	ldr	r3, [r7, #20]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3718      	adds	r7, #24
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d018      	beq.n	800e440 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	68da      	ldr	r2, [r3, #12]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e416:	441a      	add	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	68da      	ldr	r2, [r3, #12]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	429a      	cmp	r2, r3
 800e426:	d303      	bcc.n	800e430 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	68d9      	ldr	r1, [r3, #12]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e438:	461a      	mov	r2, r3
 800e43a:	6838      	ldr	r0, [r7, #0]
 800e43c:	f007 fb6e 	bl	8015b1c <memcpy>
	}
}
 800e440:	bf00      	nop
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e450:	f001 fc38 	bl	800fcc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e45a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e45c:	e011      	b.n	800e482 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e462:	2b00      	cmp	r3, #0
 800e464:	d012      	beq.n	800e48c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	3324      	adds	r3, #36	; 0x24
 800e46a:	4618      	mov	r0, r3
 800e46c:	f000 fd44 	bl	800eef8 <xTaskRemoveFromEventList>
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	d001      	beq.n	800e47a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e476:	f000 fe1b 	bl	800f0b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e47a:	7bfb      	ldrb	r3, [r7, #15]
 800e47c:	3b01      	subs	r3, #1
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e486:	2b00      	cmp	r3, #0
 800e488:	dce9      	bgt.n	800e45e <prvUnlockQueue+0x16>
 800e48a:	e000      	b.n	800e48e <prvUnlockQueue+0x46>
					break;
 800e48c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	22ff      	movs	r2, #255	; 0xff
 800e492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e496:	f001 fc45 	bl	800fd24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e49a:	f001 fc13 	bl	800fcc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e4a6:	e011      	b.n	800e4cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	691b      	ldr	r3, [r3, #16]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d012      	beq.n	800e4d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	3310      	adds	r3, #16
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f000 fd1f 	bl	800eef8 <xTaskRemoveFromEventList>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d001      	beq.n	800e4c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e4c0:	f000 fdf6 	bl	800f0b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e4c4:	7bbb      	ldrb	r3, [r7, #14]
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e4cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	dce9      	bgt.n	800e4a8 <prvUnlockQueue+0x60>
 800e4d4:	e000      	b.n	800e4d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e4d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	22ff      	movs	r2, #255	; 0xff
 800e4dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e4e0:	f001 fc20 	bl	800fd24 <vPortExitCritical>
}
 800e4e4:	bf00      	nop
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e4f4:	f001 fbe6 	bl	800fcc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d102      	bne.n	800e506 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e500:	2301      	movs	r3, #1
 800e502:	60fb      	str	r3, [r7, #12]
 800e504:	e001      	b.n	800e50a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e506:	2300      	movs	r3, #0
 800e508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e50a:	f001 fc0b 	bl	800fd24 <vPortExitCritical>

	return xReturn;
 800e50e:	68fb      	ldr	r3, [r7, #12]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e520:	f001 fbd0 	bl	800fcc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d102      	bne.n	800e536 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e530:	2301      	movs	r3, #1
 800e532:	60fb      	str	r3, [r7, #12]
 800e534:	e001      	b.n	800e53a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e536:	2300      	movs	r3, #0
 800e538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e53a:	f001 fbf3 	bl	800fd24 <vPortExitCritical>

	return xReturn;
 800e53e:	68fb      	ldr	r3, [r7, #12]
}
 800e540:	4618      	mov	r0, r3
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e548:	b480      	push	{r7}
 800e54a:	b085      	sub	sp, #20
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e552:	2300      	movs	r3, #0
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	e014      	b.n	800e582 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e558:	4a0f      	ldr	r2, [pc, #60]	; (800e598 <vQueueAddToRegistry+0x50>)
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d10b      	bne.n	800e57c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e564:	490c      	ldr	r1, [pc, #48]	; (800e598 <vQueueAddToRegistry+0x50>)
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	683a      	ldr	r2, [r7, #0]
 800e56a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e56e:	4a0a      	ldr	r2, [pc, #40]	; (800e598 <vQueueAddToRegistry+0x50>)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	00db      	lsls	r3, r3, #3
 800e574:	4413      	add	r3, r2
 800e576:	687a      	ldr	r2, [r7, #4]
 800e578:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e57a:	e006      	b.n	800e58a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	3301      	adds	r3, #1
 800e580:	60fb      	str	r3, [r7, #12]
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2b07      	cmp	r3, #7
 800e586:	d9e7      	bls.n	800e558 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e588:	bf00      	nop
 800e58a:	bf00      	nop
 800e58c:	3714      	adds	r7, #20
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
 800e596:	bf00      	nop
 800e598:	20000bc4 	.word	0x20000bc4

0800e59c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b086      	sub	sp, #24
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	60b9      	str	r1, [r7, #8]
 800e5a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e5ac:	f001 fb8a 	bl	800fcc4 <vPortEnterCritical>
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5b6:	b25b      	sxtb	r3, r3
 800e5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5bc:	d103      	bne.n	800e5c6 <vQueueWaitForMessageRestricted+0x2a>
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5cc:	b25b      	sxtb	r3, r3
 800e5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5d2:	d103      	bne.n	800e5dc <vQueueWaitForMessageRestricted+0x40>
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5dc:	f001 fba2 	bl	800fd24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d106      	bne.n	800e5f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	3324      	adds	r3, #36	; 0x24
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	68b9      	ldr	r1, [r7, #8]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f000 fc55 	bl	800eea0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e5f6:	6978      	ldr	r0, [r7, #20]
 800e5f8:	f7ff ff26 	bl	800e448 <prvUnlockQueue>
	}
 800e5fc:	bf00      	nop
 800e5fe:	3718      	adds	r7, #24
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e604:	b580      	push	{r7, lr}
 800e606:	b08e      	sub	sp, #56	; 0x38
 800e608:	af04      	add	r7, sp, #16
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
 800e610:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10a      	bne.n	800e62e <xTaskCreateStatic+0x2a>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	623b      	str	r3, [r7, #32]
}
 800e62a:	bf00      	nop
 800e62c:	e7fe      	b.n	800e62c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e630:	2b00      	cmp	r3, #0
 800e632:	d10a      	bne.n	800e64a <xTaskCreateStatic+0x46>
	__asm volatile
 800e634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e638:	f383 8811 	msr	BASEPRI, r3
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	61fb      	str	r3, [r7, #28]
}
 800e646:	bf00      	nop
 800e648:	e7fe      	b.n	800e648 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e64a:	2360      	movs	r3, #96	; 0x60
 800e64c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	2b60      	cmp	r3, #96	; 0x60
 800e652:	d00a      	beq.n	800e66a <xTaskCreateStatic+0x66>
	__asm volatile
 800e654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e658:	f383 8811 	msr	BASEPRI, r3
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f3bf 8f4f 	dsb	sy
 800e664:	61bb      	str	r3, [r7, #24]
}
 800e666:	bf00      	nop
 800e668:	e7fe      	b.n	800e668 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d01e      	beq.n	800e6ae <xTaskCreateStatic+0xaa>
 800e670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e672:	2b00      	cmp	r3, #0
 800e674:	d01b      	beq.n	800e6ae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e678:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e67e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e682:	2202      	movs	r2, #2
 800e684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e688:	2300      	movs	r3, #0
 800e68a:	9303      	str	r3, [sp, #12]
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68e:	9302      	str	r3, [sp, #8]
 800e690:	f107 0314 	add.w	r3, r7, #20
 800e694:	9301      	str	r3, [sp, #4]
 800e696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	68b9      	ldr	r1, [r7, #8]
 800e6a0:	68f8      	ldr	r0, [r7, #12]
 800e6a2:	f000 f850 	bl	800e746 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e6a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6a8:	f000 f8d8 	bl	800e85c <prvAddNewTaskToReadyList>
 800e6ac:	e001      	b.n	800e6b2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e6b2:	697b      	ldr	r3, [r7, #20]
	}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3728      	adds	r7, #40	; 0x28
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b08c      	sub	sp, #48	; 0x30
 800e6c0:	af04      	add	r7, sp, #16
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	603b      	str	r3, [r7, #0]
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6cc:	88fb      	ldrh	r3, [r7, #6]
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f001 fc19 	bl	800ff08 <pvPortMalloc>
 800e6d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00e      	beq.n	800e6fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800e6de:	2060      	movs	r0, #96	; 0x60
 800e6e0:	f001 fc12 	bl	800ff08 <pvPortMalloc>
 800e6e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d003      	beq.n	800e6f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e6ec:	69fb      	ldr	r3, [r7, #28]
 800e6ee:	697a      	ldr	r2, [r7, #20]
 800e6f0:	631a      	str	r2, [r3, #48]	; 0x30
 800e6f2:	e005      	b.n	800e700 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e6f4:	6978      	ldr	r0, [r7, #20]
 800e6f6:	f001 fc4d 	bl	800ff94 <vPortFree>
 800e6fa:	e001      	b.n	800e700 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d017      	beq.n	800e736 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	2200      	movs	r2, #0
 800e70a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e70e:	88fa      	ldrh	r2, [r7, #6]
 800e710:	2300      	movs	r3, #0
 800e712:	9303      	str	r3, [sp, #12]
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	9302      	str	r3, [sp, #8]
 800e718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71a:	9301      	str	r3, [sp, #4]
 800e71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71e:	9300      	str	r3, [sp, #0]
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	68b9      	ldr	r1, [r7, #8]
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f000 f80e 	bl	800e746 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e72a:	69f8      	ldr	r0, [r7, #28]
 800e72c:	f000 f896 	bl	800e85c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e730:	2301      	movs	r3, #1
 800e732:	61bb      	str	r3, [r7, #24]
 800e734:	e002      	b.n	800e73c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e736:	f04f 33ff 	mov.w	r3, #4294967295
 800e73a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e73c:	69bb      	ldr	r3, [r7, #24]
	}
 800e73e:	4618      	mov	r0, r3
 800e740:	3720      	adds	r7, #32
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e746:	b580      	push	{r7, lr}
 800e748:	b088      	sub	sp, #32
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	60f8      	str	r0, [r7, #12]
 800e74e:	60b9      	str	r1, [r7, #8]
 800e750:	607a      	str	r2, [r7, #4]
 800e752:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e756:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	461a      	mov	r2, r3
 800e75e:	21a5      	movs	r1, #165	; 0xa5
 800e760:	f007 f9ea 	bl	8015b38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800e764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e76e:	3b01      	subs	r3, #1
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	4413      	add	r3, r2
 800e774:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e776:	69bb      	ldr	r3, [r7, #24]
 800e778:	f023 0307 	bic.w	r3, r3, #7
 800e77c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	f003 0307 	and.w	r3, r3, #7
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00a      	beq.n	800e79e <prvInitialiseNewTask+0x58>
	__asm volatile
 800e788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78c:	f383 8811 	msr	BASEPRI, r3
 800e790:	f3bf 8f6f 	isb	sy
 800e794:	f3bf 8f4f 	dsb	sy
 800e798:	617b      	str	r3, [r7, #20]
}
 800e79a:	bf00      	nop
 800e79c:	e7fe      	b.n	800e79c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e79e:	2300      	movs	r3, #0
 800e7a0:	61fb      	str	r3, [r7, #28]
 800e7a2:	e012      	b.n	800e7ca <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e7a4:	68ba      	ldr	r2, [r7, #8]
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	7819      	ldrb	r1, [r3, #0]
 800e7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	4413      	add	r3, r2
 800e7b2:	3334      	adds	r3, #52	; 0x34
 800e7b4:	460a      	mov	r2, r1
 800e7b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800e7b8:	68ba      	ldr	r2, [r7, #8]
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	4413      	add	r3, r2
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d006      	beq.n	800e7d2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	61fb      	str	r3, [r7, #28]
 800e7ca:	69fb      	ldr	r3, [r7, #28]
 800e7cc:	2b0f      	cmp	r3, #15
 800e7ce:	d9e9      	bls.n	800e7a4 <prvInitialiseNewTask+0x5e>
 800e7d0:	e000      	b.n	800e7d4 <prvInitialiseNewTask+0x8e>
		{
			break;
 800e7d2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7de:	2b37      	cmp	r3, #55	; 0x37
 800e7e0:	d901      	bls.n	800e7e6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e7e2:	2337      	movs	r3, #55	; 0x37
 800e7e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fa:	3304      	adds	r3, #4
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7ff f88f 	bl	800d920 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e804:	3318      	adds	r3, #24
 800e806:	4618      	mov	r0, r3
 800e808:	f7ff f88a 	bl	800d920 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e810:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e814:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e820:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e824:	2200      	movs	r2, #0
 800e826:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82a:	2200      	movs	r2, #0
 800e82c:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	2200      	movs	r2, #0
 800e832:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e836:	683a      	ldr	r2, [r7, #0]
 800e838:	68f9      	ldr	r1, [r7, #12]
 800e83a:	69b8      	ldr	r0, [r7, #24]
 800e83c:	f001 f912 	bl	800fa64 <pxPortInitialiseStack>
 800e840:	4602      	mov	r2, r0
 800e842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e844:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800e846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d002      	beq.n	800e852 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e852:	bf00      	nop
 800e854:	3720      	adds	r7, #32
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
	...

0800e85c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e864:	f001 fa2e 	bl	800fcc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e868:	4b2d      	ldr	r3, [pc, #180]	; (800e920 <prvAddNewTaskToReadyList+0xc4>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	3301      	adds	r3, #1
 800e86e:	4a2c      	ldr	r2, [pc, #176]	; (800e920 <prvAddNewTaskToReadyList+0xc4>)
 800e870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e872:	4b2c      	ldr	r3, [pc, #176]	; (800e924 <prvAddNewTaskToReadyList+0xc8>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d109      	bne.n	800e88e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e87a:	4a2a      	ldr	r2, [pc, #168]	; (800e924 <prvAddNewTaskToReadyList+0xc8>)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e880:	4b27      	ldr	r3, [pc, #156]	; (800e920 <prvAddNewTaskToReadyList+0xc4>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2b01      	cmp	r3, #1
 800e886:	d110      	bne.n	800e8aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e888:	f000 fc36 	bl	800f0f8 <prvInitialiseTaskLists>
 800e88c:	e00d      	b.n	800e8aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e88e:	4b26      	ldr	r3, [pc, #152]	; (800e928 <prvAddNewTaskToReadyList+0xcc>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d109      	bne.n	800e8aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e896:	4b23      	ldr	r3, [pc, #140]	; (800e924 <prvAddNewTaskToReadyList+0xc8>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d802      	bhi.n	800e8aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e8a4:	4a1f      	ldr	r2, [pc, #124]	; (800e924 <prvAddNewTaskToReadyList+0xc8>)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e8aa:	4b20      	ldr	r3, [pc, #128]	; (800e92c <prvAddNewTaskToReadyList+0xd0>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	4a1e      	ldr	r2, [pc, #120]	; (800e92c <prvAddNewTaskToReadyList+0xd0>)
 800e8b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e8b4:	4b1d      	ldr	r3, [pc, #116]	; (800e92c <prvAddNewTaskToReadyList+0xd0>)
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8c0:	4b1b      	ldr	r3, [pc, #108]	; (800e930 <prvAddNewTaskToReadyList+0xd4>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d903      	bls.n	800e8d0 <prvAddNewTaskToReadyList+0x74>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8cc:	4a18      	ldr	r2, [pc, #96]	; (800e930 <prvAddNewTaskToReadyList+0xd4>)
 800e8ce:	6013      	str	r3, [r2, #0]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	4413      	add	r3, r2
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	4a15      	ldr	r2, [pc, #84]	; (800e934 <prvAddNewTaskToReadyList+0xd8>)
 800e8de:	441a      	add	r2, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	3304      	adds	r3, #4
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	4610      	mov	r0, r2
 800e8e8:	f7ff f827 	bl	800d93a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e8ec:	f001 fa1a 	bl	800fd24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e8f0:	4b0d      	ldr	r3, [pc, #52]	; (800e928 <prvAddNewTaskToReadyList+0xcc>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d00e      	beq.n	800e916 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e8f8:	4b0a      	ldr	r3, [pc, #40]	; (800e924 <prvAddNewTaskToReadyList+0xc8>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e902:	429a      	cmp	r2, r3
 800e904:	d207      	bcs.n	800e916 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e906:	4b0c      	ldr	r3, [pc, #48]	; (800e938 <prvAddNewTaskToReadyList+0xdc>)
 800e908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e90c:	601a      	str	r2, [r3, #0]
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e916:	bf00      	nop
 800e918:	3708      	adds	r7, #8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	200010d8 	.word	0x200010d8
 800e924:	20000c04 	.word	0x20000c04
 800e928:	200010e4 	.word	0x200010e4
 800e92c:	200010f4 	.word	0x200010f4
 800e930:	200010e0 	.word	0x200010e0
 800e934:	20000c08 	.word	0x20000c08
 800e938:	e000ed04 	.word	0xe000ed04

0800e93c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e944:	2300      	movs	r3, #0
 800e946:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d017      	beq.n	800e97e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e94e:	4b13      	ldr	r3, [pc, #76]	; (800e99c <vTaskDelay+0x60>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d00a      	beq.n	800e96c <vTaskDelay+0x30>
	__asm volatile
 800e956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95a:	f383 8811 	msr	BASEPRI, r3
 800e95e:	f3bf 8f6f 	isb	sy
 800e962:	f3bf 8f4f 	dsb	sy
 800e966:	60bb      	str	r3, [r7, #8]
}
 800e968:	bf00      	nop
 800e96a:	e7fe      	b.n	800e96a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e96c:	f000 f882 	bl	800ea74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e970:	2100      	movs	r1, #0
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 fd10 	bl	800f398 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e978:	f000 f88a 	bl	800ea90 <xTaskResumeAll>
 800e97c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d107      	bne.n	800e994 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e984:	4b06      	ldr	r3, [pc, #24]	; (800e9a0 <vTaskDelay+0x64>)
 800e986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e98a:	601a      	str	r2, [r3, #0]
 800e98c:	f3bf 8f4f 	dsb	sy
 800e990:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e994:	bf00      	nop
 800e996:	3710      	adds	r7, #16
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	20001100 	.word	0x20001100
 800e9a0:	e000ed04 	.word	0xe000ed04

0800e9a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b08a      	sub	sp, #40	; 0x28
 800e9a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e9b2:	463a      	mov	r2, r7
 800e9b4:	1d39      	adds	r1, r7, #4
 800e9b6:	f107 0308 	add.w	r3, r7, #8
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7fe ff5c 	bl	800d878 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e9c0:	6839      	ldr	r1, [r7, #0]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	68ba      	ldr	r2, [r7, #8]
 800e9c6:	9202      	str	r2, [sp, #8]
 800e9c8:	9301      	str	r3, [sp, #4]
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	9300      	str	r3, [sp, #0]
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	460a      	mov	r2, r1
 800e9d2:	4922      	ldr	r1, [pc, #136]	; (800ea5c <vTaskStartScheduler+0xb8>)
 800e9d4:	4822      	ldr	r0, [pc, #136]	; (800ea60 <vTaskStartScheduler+0xbc>)
 800e9d6:	f7ff fe15 	bl	800e604 <xTaskCreateStatic>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	4a21      	ldr	r2, [pc, #132]	; (800ea64 <vTaskStartScheduler+0xc0>)
 800e9de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e9e0:	4b20      	ldr	r3, [pc, #128]	; (800ea64 <vTaskStartScheduler+0xc0>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d002      	beq.n	800e9ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	617b      	str	r3, [r7, #20]
 800e9ec:	e001      	b.n	800e9f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d102      	bne.n	800e9fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e9f8:	f000 fd22 	bl	800f440 <xTimerCreateTimerTask>
 800e9fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d118      	bne.n	800ea36 <vTaskStartScheduler+0x92>
	__asm volatile
 800ea04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea08:	f383 8811 	msr	BASEPRI, r3
 800ea0c:	f3bf 8f6f 	isb	sy
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	613b      	str	r3, [r7, #16]
}
 800ea16:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ea18:	4b13      	ldr	r3, [pc, #76]	; (800ea68 <vTaskStartScheduler+0xc4>)
 800ea1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ea20:	4b12      	ldr	r3, [pc, #72]	; (800ea6c <vTaskStartScheduler+0xc8>)
 800ea22:	2201      	movs	r2, #1
 800ea24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ea26:	4b12      	ldr	r3, [pc, #72]	; (800ea70 <vTaskStartScheduler+0xcc>)
 800ea28:	2200      	movs	r2, #0
 800ea2a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ea2c:	f7f3 fa52 	bl	8001ed4 <ConfigureRunTimeCounter>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ea30:	f001 f8a6 	bl	800fb80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ea34:	e00e      	b.n	800ea54 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea3c:	d10a      	bne.n	800ea54 <vTaskStartScheduler+0xb0>
	__asm volatile
 800ea3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea42:	f383 8811 	msr	BASEPRI, r3
 800ea46:	f3bf 8f6f 	isb	sy
 800ea4a:	f3bf 8f4f 	dsb	sy
 800ea4e:	60fb      	str	r3, [r7, #12]
}
 800ea50:	bf00      	nop
 800ea52:	e7fe      	b.n	800ea52 <vTaskStartScheduler+0xae>
}
 800ea54:	bf00      	nop
 800ea56:	3718      	adds	r7, #24
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	08016598 	.word	0x08016598
 800ea60:	0800f0c9 	.word	0x0800f0c9
 800ea64:	200010fc 	.word	0x200010fc
 800ea68:	200010f8 	.word	0x200010f8
 800ea6c:	200010e4 	.word	0x200010e4
 800ea70:	200010dc 	.word	0x200010dc

0800ea74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ea74:	b480      	push	{r7}
 800ea76:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ea78:	4b04      	ldr	r3, [pc, #16]	; (800ea8c <vTaskSuspendAll+0x18>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	4a03      	ldr	r2, [pc, #12]	; (800ea8c <vTaskSuspendAll+0x18>)
 800ea80:	6013      	str	r3, [r2, #0]
}
 800ea82:	bf00      	nop
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr
 800ea8c:	20001100 	.word	0x20001100

0800ea90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ea96:	2300      	movs	r3, #0
 800ea98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ea9e:	4b42      	ldr	r3, [pc, #264]	; (800eba8 <xTaskResumeAll+0x118>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d10a      	bne.n	800eabc <xTaskResumeAll+0x2c>
	__asm volatile
 800eaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaaa:	f383 8811 	msr	BASEPRI, r3
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	f3bf 8f4f 	dsb	sy
 800eab6:	603b      	str	r3, [r7, #0]
}
 800eab8:	bf00      	nop
 800eaba:	e7fe      	b.n	800eaba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800eabc:	f001 f902 	bl	800fcc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eac0:	4b39      	ldr	r3, [pc, #228]	; (800eba8 <xTaskResumeAll+0x118>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	3b01      	subs	r3, #1
 800eac6:	4a38      	ldr	r2, [pc, #224]	; (800eba8 <xTaskResumeAll+0x118>)
 800eac8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eaca:	4b37      	ldr	r3, [pc, #220]	; (800eba8 <xTaskResumeAll+0x118>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d162      	bne.n	800eb98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ead2:	4b36      	ldr	r3, [pc, #216]	; (800ebac <xTaskResumeAll+0x11c>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d05e      	beq.n	800eb98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eada:	e02f      	b.n	800eb3c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800eadc:	4b34      	ldr	r3, [pc, #208]	; (800ebb0 <xTaskResumeAll+0x120>)
 800eade:	68db      	ldr	r3, [r3, #12]
 800eae0:	68db      	ldr	r3, [r3, #12]
 800eae2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	3318      	adds	r3, #24
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7fe ff83 	bl	800d9f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	3304      	adds	r3, #4
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fe ff7e 	bl	800d9f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eafc:	4b2d      	ldr	r3, [pc, #180]	; (800ebb4 <xTaskResumeAll+0x124>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d903      	bls.n	800eb0c <xTaskResumeAll+0x7c>
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb08:	4a2a      	ldr	r2, [pc, #168]	; (800ebb4 <xTaskResumeAll+0x124>)
 800eb0a:	6013      	str	r3, [r2, #0]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb10:	4613      	mov	r3, r2
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	4413      	add	r3, r2
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	4a27      	ldr	r2, [pc, #156]	; (800ebb8 <xTaskResumeAll+0x128>)
 800eb1a:	441a      	add	r2, r3
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	3304      	adds	r3, #4
 800eb20:	4619      	mov	r1, r3
 800eb22:	4610      	mov	r0, r2
 800eb24:	f7fe ff09 	bl	800d93a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb2c:	4b23      	ldr	r3, [pc, #140]	; (800ebbc <xTaskResumeAll+0x12c>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d302      	bcc.n	800eb3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800eb36:	4b22      	ldr	r3, [pc, #136]	; (800ebc0 <xTaskResumeAll+0x130>)
 800eb38:	2201      	movs	r2, #1
 800eb3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb3c:	4b1c      	ldr	r3, [pc, #112]	; (800ebb0 <xTaskResumeAll+0x120>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1cb      	bne.n	800eadc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d001      	beq.n	800eb4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eb4a:	f000 fb73 	bl	800f234 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800eb4e:	4b1d      	ldr	r3, [pc, #116]	; (800ebc4 <xTaskResumeAll+0x134>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d010      	beq.n	800eb7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eb5a:	f000 f847 	bl	800ebec <xTaskIncrementTick>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d002      	beq.n	800eb6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800eb64:	4b16      	ldr	r3, [pc, #88]	; (800ebc0 <xTaskResumeAll+0x130>)
 800eb66:	2201      	movs	r2, #1
 800eb68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	3b01      	subs	r3, #1
 800eb6e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d1f1      	bne.n	800eb5a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800eb76:	4b13      	ldr	r3, [pc, #76]	; (800ebc4 <xTaskResumeAll+0x134>)
 800eb78:	2200      	movs	r2, #0
 800eb7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eb7c:	4b10      	ldr	r3, [pc, #64]	; (800ebc0 <xTaskResumeAll+0x130>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d009      	beq.n	800eb98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eb84:	2301      	movs	r3, #1
 800eb86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eb88:	4b0f      	ldr	r3, [pc, #60]	; (800ebc8 <xTaskResumeAll+0x138>)
 800eb8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb8e:	601a      	str	r2, [r3, #0]
 800eb90:	f3bf 8f4f 	dsb	sy
 800eb94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb98:	f001 f8c4 	bl	800fd24 <vPortExitCritical>

	return xAlreadyYielded;
 800eb9c:	68bb      	ldr	r3, [r7, #8]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	20001100 	.word	0x20001100
 800ebac:	200010d8 	.word	0x200010d8
 800ebb0:	20001098 	.word	0x20001098
 800ebb4:	200010e0 	.word	0x200010e0
 800ebb8:	20000c08 	.word	0x20000c08
 800ebbc:	20000c04 	.word	0x20000c04
 800ebc0:	200010ec 	.word	0x200010ec
 800ebc4:	200010e8 	.word	0x200010e8
 800ebc8:	e000ed04 	.word	0xe000ed04

0800ebcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ebd2:	4b05      	ldr	r3, [pc, #20]	; (800ebe8 <xTaskGetTickCount+0x1c>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ebd8:	687b      	ldr	r3, [r7, #4]
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	370c      	adds	r7, #12
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr
 800ebe6:	bf00      	nop
 800ebe8:	200010dc 	.word	0x200010dc

0800ebec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b086      	sub	sp, #24
 800ebf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebf6:	4b51      	ldr	r3, [pc, #324]	; (800ed3c <xTaskIncrementTick+0x150>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f040 808e 	bne.w	800ed1c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ec00:	4b4f      	ldr	r3, [pc, #316]	; (800ed40 <xTaskIncrementTick+0x154>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	3301      	adds	r3, #1
 800ec06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ec08:	4a4d      	ldr	r2, [pc, #308]	; (800ed40 <xTaskIncrementTick+0x154>)
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d120      	bne.n	800ec56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ec14:	4b4b      	ldr	r3, [pc, #300]	; (800ed44 <xTaskIncrementTick+0x158>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d00a      	beq.n	800ec34 <xTaskIncrementTick+0x48>
	__asm volatile
 800ec1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec22:	f383 8811 	msr	BASEPRI, r3
 800ec26:	f3bf 8f6f 	isb	sy
 800ec2a:	f3bf 8f4f 	dsb	sy
 800ec2e:	603b      	str	r3, [r7, #0]
}
 800ec30:	bf00      	nop
 800ec32:	e7fe      	b.n	800ec32 <xTaskIncrementTick+0x46>
 800ec34:	4b43      	ldr	r3, [pc, #268]	; (800ed44 <xTaskIncrementTick+0x158>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	60fb      	str	r3, [r7, #12]
 800ec3a:	4b43      	ldr	r3, [pc, #268]	; (800ed48 <xTaskIncrementTick+0x15c>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a41      	ldr	r2, [pc, #260]	; (800ed44 <xTaskIncrementTick+0x158>)
 800ec40:	6013      	str	r3, [r2, #0]
 800ec42:	4a41      	ldr	r2, [pc, #260]	; (800ed48 <xTaskIncrementTick+0x15c>)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	6013      	str	r3, [r2, #0]
 800ec48:	4b40      	ldr	r3, [pc, #256]	; (800ed4c <xTaskIncrementTick+0x160>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	4a3f      	ldr	r2, [pc, #252]	; (800ed4c <xTaskIncrementTick+0x160>)
 800ec50:	6013      	str	r3, [r2, #0]
 800ec52:	f000 faef 	bl	800f234 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ec56:	4b3e      	ldr	r3, [pc, #248]	; (800ed50 <xTaskIncrementTick+0x164>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	693a      	ldr	r2, [r7, #16]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d34e      	bcc.n	800ecfe <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec60:	4b38      	ldr	r3, [pc, #224]	; (800ed44 <xTaskIncrementTick+0x158>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d101      	bne.n	800ec6e <xTaskIncrementTick+0x82>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	e000      	b.n	800ec70 <xTaskIncrementTick+0x84>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d004      	beq.n	800ec7e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec74:	4b36      	ldr	r3, [pc, #216]	; (800ed50 <xTaskIncrementTick+0x164>)
 800ec76:	f04f 32ff 	mov.w	r2, #4294967295
 800ec7a:	601a      	str	r2, [r3, #0]
					break;
 800ec7c:	e03f      	b.n	800ecfe <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ec7e:	4b31      	ldr	r3, [pc, #196]	; (800ed44 <xTaskIncrementTick+0x158>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	68db      	ldr	r3, [r3, #12]
 800ec86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ec8e:	693a      	ldr	r2, [r7, #16]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d203      	bcs.n	800ec9e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ec96:	4a2e      	ldr	r2, [pc, #184]	; (800ed50 <xTaskIncrementTick+0x164>)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6013      	str	r3, [r2, #0]
						break;
 800ec9c:	e02f      	b.n	800ecfe <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	3304      	adds	r3, #4
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fe fea6 	bl	800d9f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d004      	beq.n	800ecba <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	3318      	adds	r3, #24
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7fe fe9d 	bl	800d9f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecbe:	4b25      	ldr	r3, [pc, #148]	; (800ed54 <xTaskIncrementTick+0x168>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d903      	bls.n	800ecce <xTaskIncrementTick+0xe2>
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecca:	4a22      	ldr	r2, [pc, #136]	; (800ed54 <xTaskIncrementTick+0x168>)
 800eccc:	6013      	str	r3, [r2, #0]
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	4413      	add	r3, r2
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	4a1f      	ldr	r2, [pc, #124]	; (800ed58 <xTaskIncrementTick+0x16c>)
 800ecdc:	441a      	add	r2, r3
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	3304      	adds	r3, #4
 800ece2:	4619      	mov	r1, r3
 800ece4:	4610      	mov	r0, r2
 800ece6:	f7fe fe28 	bl	800d93a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecee:	4b1b      	ldr	r3, [pc, #108]	; (800ed5c <xTaskIncrementTick+0x170>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d3b3      	bcc.n	800ec60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecfc:	e7b0      	b.n	800ec60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ecfe:	4b17      	ldr	r3, [pc, #92]	; (800ed5c <xTaskIncrementTick+0x170>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed04:	4914      	ldr	r1, [pc, #80]	; (800ed58 <xTaskIncrementTick+0x16c>)
 800ed06:	4613      	mov	r3, r2
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	4413      	add	r3, r2
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	440b      	add	r3, r1
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d907      	bls.n	800ed26 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ed16:	2301      	movs	r3, #1
 800ed18:	617b      	str	r3, [r7, #20]
 800ed1a:	e004      	b.n	800ed26 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ed1c:	4b10      	ldr	r3, [pc, #64]	; (800ed60 <xTaskIncrementTick+0x174>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	3301      	adds	r3, #1
 800ed22:	4a0f      	ldr	r2, [pc, #60]	; (800ed60 <xTaskIncrementTick+0x174>)
 800ed24:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ed26:	4b0f      	ldr	r3, [pc, #60]	; (800ed64 <xTaskIncrementTick+0x178>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d001      	beq.n	800ed32 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ed32:	697b      	ldr	r3, [r7, #20]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3718      	adds	r7, #24
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	20001100 	.word	0x20001100
 800ed40:	200010dc 	.word	0x200010dc
 800ed44:	20001090 	.word	0x20001090
 800ed48:	20001094 	.word	0x20001094
 800ed4c:	200010f0 	.word	0x200010f0
 800ed50:	200010f8 	.word	0x200010f8
 800ed54:	200010e0 	.word	0x200010e0
 800ed58:	20000c08 	.word	0x20000c08
 800ed5c:	20000c04 	.word	0x20000c04
 800ed60:	200010e8 	.word	0x200010e8
 800ed64:	200010ec 	.word	0x200010ec

0800ed68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ed6e:	4b33      	ldr	r3, [pc, #204]	; (800ee3c <vTaskSwitchContext+0xd4>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d003      	beq.n	800ed7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ed76:	4b32      	ldr	r3, [pc, #200]	; (800ee40 <vTaskSwitchContext+0xd8>)
 800ed78:	2201      	movs	r2, #1
 800ed7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ed7c:	e05a      	b.n	800ee34 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 800ed7e:	4b30      	ldr	r3, [pc, #192]	; (800ee40 <vTaskSwitchContext+0xd8>)
 800ed80:	2200      	movs	r2, #0
 800ed82:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ed84:	f7f3 f8b2 	bl	8001eec <GetRunTimeCounter>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	4a2e      	ldr	r2, [pc, #184]	; (800ee44 <vTaskSwitchContext+0xdc>)
 800ed8c:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ed8e:	4b2d      	ldr	r3, [pc, #180]	; (800ee44 <vTaskSwitchContext+0xdc>)
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	4b2d      	ldr	r3, [pc, #180]	; (800ee48 <vTaskSwitchContext+0xe0>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d909      	bls.n	800edae <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ed9a:	4b2c      	ldr	r3, [pc, #176]	; (800ee4c <vTaskSwitchContext+0xe4>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eda0:	4a28      	ldr	r2, [pc, #160]	; (800ee44 <vTaskSwitchContext+0xdc>)
 800eda2:	6810      	ldr	r0, [r2, #0]
 800eda4:	4a28      	ldr	r2, [pc, #160]	; (800ee48 <vTaskSwitchContext+0xe0>)
 800eda6:	6812      	ldr	r2, [r2, #0]
 800eda8:	1a82      	subs	r2, r0, r2
 800edaa:	440a      	add	r2, r1
 800edac:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800edae:	4b25      	ldr	r3, [pc, #148]	; (800ee44 <vTaskSwitchContext+0xdc>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4a25      	ldr	r2, [pc, #148]	; (800ee48 <vTaskSwitchContext+0xe0>)
 800edb4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800edb6:	4b26      	ldr	r3, [pc, #152]	; (800ee50 <vTaskSwitchContext+0xe8>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	60fb      	str	r3, [r7, #12]
 800edbc:	e010      	b.n	800ede0 <vTaskSwitchContext+0x78>
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d10a      	bne.n	800edda <vTaskSwitchContext+0x72>
	__asm volatile
 800edc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	607b      	str	r3, [r7, #4]
}
 800edd6:	bf00      	nop
 800edd8:	e7fe      	b.n	800edd8 <vTaskSwitchContext+0x70>
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	3b01      	subs	r3, #1
 800edde:	60fb      	str	r3, [r7, #12]
 800ede0:	491c      	ldr	r1, [pc, #112]	; (800ee54 <vTaskSwitchContext+0xec>)
 800ede2:	68fa      	ldr	r2, [r7, #12]
 800ede4:	4613      	mov	r3, r2
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	4413      	add	r3, r2
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	440b      	add	r3, r1
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d0e4      	beq.n	800edbe <vTaskSwitchContext+0x56>
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	4613      	mov	r3, r2
 800edf8:	009b      	lsls	r3, r3, #2
 800edfa:	4413      	add	r3, r2
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	4a15      	ldr	r2, [pc, #84]	; (800ee54 <vTaskSwitchContext+0xec>)
 800ee00:	4413      	add	r3, r2
 800ee02:	60bb      	str	r3, [r7, #8]
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	685a      	ldr	r2, [r3, #4]
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	605a      	str	r2, [r3, #4]
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	685a      	ldr	r2, [r3, #4]
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	3308      	adds	r3, #8
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d104      	bne.n	800ee24 <vTaskSwitchContext+0xbc>
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	685a      	ldr	r2, [r3, #4]
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	605a      	str	r2, [r3, #4]
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	68db      	ldr	r3, [r3, #12]
 800ee2a:	4a08      	ldr	r2, [pc, #32]	; (800ee4c <vTaskSwitchContext+0xe4>)
 800ee2c:	6013      	str	r3, [r2, #0]
 800ee2e:	4a08      	ldr	r2, [pc, #32]	; (800ee50 <vTaskSwitchContext+0xe8>)
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	6013      	str	r3, [r2, #0]
}
 800ee34:	bf00      	nop
 800ee36:	3710      	adds	r7, #16
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	20001100 	.word	0x20001100
 800ee40:	200010ec 	.word	0x200010ec
 800ee44:	20001108 	.word	0x20001108
 800ee48:	20001104 	.word	0x20001104
 800ee4c:	20000c04 	.word	0x20000c04
 800ee50:	200010e0 	.word	0x200010e0
 800ee54:	20000c08 	.word	0x20000c08

0800ee58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d10a      	bne.n	800ee7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ee68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6c:	f383 8811 	msr	BASEPRI, r3
 800ee70:	f3bf 8f6f 	isb	sy
 800ee74:	f3bf 8f4f 	dsb	sy
 800ee78:	60fb      	str	r3, [r7, #12]
}
 800ee7a:	bf00      	nop
 800ee7c:	e7fe      	b.n	800ee7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee7e:	4b07      	ldr	r3, [pc, #28]	; (800ee9c <vTaskPlaceOnEventList+0x44>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	3318      	adds	r3, #24
 800ee84:	4619      	mov	r1, r3
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f7fe fd7b 	bl	800d982 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee8c:	2101      	movs	r1, #1
 800ee8e:	6838      	ldr	r0, [r7, #0]
 800ee90:	f000 fa82 	bl	800f398 <prvAddCurrentTaskToDelayedList>
}
 800ee94:	bf00      	nop
 800ee96:	3710      	adds	r7, #16
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	20000c04 	.word	0x20000c04

0800eea0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b086      	sub	sp, #24
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	60b9      	str	r1, [r7, #8]
 800eeaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d10a      	bne.n	800eec8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800eeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	617b      	str	r3, [r7, #20]
}
 800eec4:	bf00      	nop
 800eec6:	e7fe      	b.n	800eec6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eec8:	4b0a      	ldr	r3, [pc, #40]	; (800eef4 <vTaskPlaceOnEventListRestricted+0x54>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	3318      	adds	r3, #24
 800eece:	4619      	mov	r1, r3
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f7fe fd32 	bl	800d93a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d002      	beq.n	800eee2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800eedc:	f04f 33ff 	mov.w	r3, #4294967295
 800eee0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eee2:	6879      	ldr	r1, [r7, #4]
 800eee4:	68b8      	ldr	r0, [r7, #8]
 800eee6:	f000 fa57 	bl	800f398 <prvAddCurrentTaskToDelayedList>
	}
 800eeea:	bf00      	nop
 800eeec:	3718      	adds	r7, #24
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	20000c04 	.word	0x20000c04

0800eef8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b086      	sub	sp, #24
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	68db      	ldr	r3, [r3, #12]
 800ef06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d10a      	bne.n	800ef24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ef0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef12:	f383 8811 	msr	BASEPRI, r3
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	60fb      	str	r3, [r7, #12]
}
 800ef20:	bf00      	nop
 800ef22:	e7fe      	b.n	800ef22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	3318      	adds	r3, #24
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7fe fd63 	bl	800d9f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef2e:	4b1e      	ldr	r3, [pc, #120]	; (800efa8 <xTaskRemoveFromEventList+0xb0>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d11d      	bne.n	800ef72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	3304      	adds	r3, #4
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fe fd5a 	bl	800d9f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef44:	4b19      	ldr	r3, [pc, #100]	; (800efac <xTaskRemoveFromEventList+0xb4>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d903      	bls.n	800ef54 <xTaskRemoveFromEventList+0x5c>
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef50:	4a16      	ldr	r2, [pc, #88]	; (800efac <xTaskRemoveFromEventList+0xb4>)
 800ef52:	6013      	str	r3, [r2, #0]
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef58:	4613      	mov	r3, r2
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	4413      	add	r3, r2
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	4a13      	ldr	r2, [pc, #76]	; (800efb0 <xTaskRemoveFromEventList+0xb8>)
 800ef62:	441a      	add	r2, r3
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	3304      	adds	r3, #4
 800ef68:	4619      	mov	r1, r3
 800ef6a:	4610      	mov	r0, r2
 800ef6c:	f7fe fce5 	bl	800d93a <vListInsertEnd>
 800ef70:	e005      	b.n	800ef7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	3318      	adds	r3, #24
 800ef76:	4619      	mov	r1, r3
 800ef78:	480e      	ldr	r0, [pc, #56]	; (800efb4 <xTaskRemoveFromEventList+0xbc>)
 800ef7a:	f7fe fcde 	bl	800d93a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef82:	4b0d      	ldr	r3, [pc, #52]	; (800efb8 <xTaskRemoveFromEventList+0xc0>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d905      	bls.n	800ef98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ef90:	4b0a      	ldr	r3, [pc, #40]	; (800efbc <xTaskRemoveFromEventList+0xc4>)
 800ef92:	2201      	movs	r2, #1
 800ef94:	601a      	str	r2, [r3, #0]
 800ef96:	e001      	b.n	800ef9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ef9c:	697b      	ldr	r3, [r7, #20]
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3718      	adds	r7, #24
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	20001100 	.word	0x20001100
 800efac:	200010e0 	.word	0x200010e0
 800efb0:	20000c08 	.word	0x20000c08
 800efb4:	20001098 	.word	0x20001098
 800efb8:	20000c04 	.word	0x20000c04
 800efbc:	200010ec 	.word	0x200010ec

0800efc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800efc8:	4b06      	ldr	r3, [pc, #24]	; (800efe4 <vTaskInternalSetTimeOutState+0x24>)
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800efd0:	4b05      	ldr	r3, [pc, #20]	; (800efe8 <vTaskInternalSetTimeOutState+0x28>)
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	605a      	str	r2, [r3, #4]
}
 800efd8:	bf00      	nop
 800efda:	370c      	adds	r7, #12
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr
 800efe4:	200010f0 	.word	0x200010f0
 800efe8:	200010dc 	.word	0x200010dc

0800efec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b088      	sub	sp, #32
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d10a      	bne.n	800f012 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800effc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f000:	f383 8811 	msr	BASEPRI, r3
 800f004:	f3bf 8f6f 	isb	sy
 800f008:	f3bf 8f4f 	dsb	sy
 800f00c:	613b      	str	r3, [r7, #16]
}
 800f00e:	bf00      	nop
 800f010:	e7fe      	b.n	800f010 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d10a      	bne.n	800f02e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01c:	f383 8811 	msr	BASEPRI, r3
 800f020:	f3bf 8f6f 	isb	sy
 800f024:	f3bf 8f4f 	dsb	sy
 800f028:	60fb      	str	r3, [r7, #12]
}
 800f02a:	bf00      	nop
 800f02c:	e7fe      	b.n	800f02c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f02e:	f000 fe49 	bl	800fcc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f032:	4b1d      	ldr	r3, [pc, #116]	; (800f0a8 <xTaskCheckForTimeOut+0xbc>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	69ba      	ldr	r2, [r7, #24]
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f04a:	d102      	bne.n	800f052 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f04c:	2300      	movs	r3, #0
 800f04e:	61fb      	str	r3, [r7, #28]
 800f050:	e023      	b.n	800f09a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	4b15      	ldr	r3, [pc, #84]	; (800f0ac <xTaskCheckForTimeOut+0xc0>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d007      	beq.n	800f06e <xTaskCheckForTimeOut+0x82>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	69ba      	ldr	r2, [r7, #24]
 800f064:	429a      	cmp	r2, r3
 800f066:	d302      	bcc.n	800f06e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f068:	2301      	movs	r3, #1
 800f06a:	61fb      	str	r3, [r7, #28]
 800f06c:	e015      	b.n	800f09a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	697a      	ldr	r2, [r7, #20]
 800f074:	429a      	cmp	r2, r3
 800f076:	d20b      	bcs.n	800f090 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	681a      	ldr	r2, [r3, #0]
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	1ad2      	subs	r2, r2, r3
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7ff ff9b 	bl	800efc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f08a:	2300      	movs	r3, #0
 800f08c:	61fb      	str	r3, [r7, #28]
 800f08e:	e004      	b.n	800f09a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	2200      	movs	r2, #0
 800f094:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f096:	2301      	movs	r3, #1
 800f098:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f09a:	f000 fe43 	bl	800fd24 <vPortExitCritical>

	return xReturn;
 800f09e:	69fb      	ldr	r3, [r7, #28]
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3720      	adds	r7, #32
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}
 800f0a8:	200010dc 	.word	0x200010dc
 800f0ac:	200010f0 	.word	0x200010f0

0800f0b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f0b4:	4b03      	ldr	r3, [pc, #12]	; (800f0c4 <vTaskMissedYield+0x14>)
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	601a      	str	r2, [r3, #0]
}
 800f0ba:	bf00      	nop
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr
 800f0c4:	200010ec 	.word	0x200010ec

0800f0c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f0d0:	f000 f852 	bl	800f178 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f0d4:	4b06      	ldr	r3, [pc, #24]	; (800f0f0 <prvIdleTask+0x28>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d9f9      	bls.n	800f0d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f0dc:	4b05      	ldr	r3, [pc, #20]	; (800f0f4 <prvIdleTask+0x2c>)
 800f0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0e2:	601a      	str	r2, [r3, #0]
 800f0e4:	f3bf 8f4f 	dsb	sy
 800f0e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f0ec:	e7f0      	b.n	800f0d0 <prvIdleTask+0x8>
 800f0ee:	bf00      	nop
 800f0f0:	20000c08 	.word	0x20000c08
 800f0f4:	e000ed04 	.word	0xe000ed04

0800f0f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f0fe:	2300      	movs	r3, #0
 800f100:	607b      	str	r3, [r7, #4]
 800f102:	e00c      	b.n	800f11e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	4613      	mov	r3, r2
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	4413      	add	r3, r2
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	4a12      	ldr	r2, [pc, #72]	; (800f158 <prvInitialiseTaskLists+0x60>)
 800f110:	4413      	add	r3, r2
 800f112:	4618      	mov	r0, r3
 800f114:	f7fe fbe4 	bl	800d8e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	3301      	adds	r3, #1
 800f11c:	607b      	str	r3, [r7, #4]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2b37      	cmp	r3, #55	; 0x37
 800f122:	d9ef      	bls.n	800f104 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f124:	480d      	ldr	r0, [pc, #52]	; (800f15c <prvInitialiseTaskLists+0x64>)
 800f126:	f7fe fbdb 	bl	800d8e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f12a:	480d      	ldr	r0, [pc, #52]	; (800f160 <prvInitialiseTaskLists+0x68>)
 800f12c:	f7fe fbd8 	bl	800d8e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f130:	480c      	ldr	r0, [pc, #48]	; (800f164 <prvInitialiseTaskLists+0x6c>)
 800f132:	f7fe fbd5 	bl	800d8e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f136:	480c      	ldr	r0, [pc, #48]	; (800f168 <prvInitialiseTaskLists+0x70>)
 800f138:	f7fe fbd2 	bl	800d8e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f13c:	480b      	ldr	r0, [pc, #44]	; (800f16c <prvInitialiseTaskLists+0x74>)
 800f13e:	f7fe fbcf 	bl	800d8e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f142:	4b0b      	ldr	r3, [pc, #44]	; (800f170 <prvInitialiseTaskLists+0x78>)
 800f144:	4a05      	ldr	r2, [pc, #20]	; (800f15c <prvInitialiseTaskLists+0x64>)
 800f146:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f148:	4b0a      	ldr	r3, [pc, #40]	; (800f174 <prvInitialiseTaskLists+0x7c>)
 800f14a:	4a05      	ldr	r2, [pc, #20]	; (800f160 <prvInitialiseTaskLists+0x68>)
 800f14c:	601a      	str	r2, [r3, #0]
}
 800f14e:	bf00      	nop
 800f150:	3708      	adds	r7, #8
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	20000c08 	.word	0x20000c08
 800f15c:	20001068 	.word	0x20001068
 800f160:	2000107c 	.word	0x2000107c
 800f164:	20001098 	.word	0x20001098
 800f168:	200010ac 	.word	0x200010ac
 800f16c:	200010c4 	.word	0x200010c4
 800f170:	20001090 	.word	0x20001090
 800f174:	20001094 	.word	0x20001094

0800f178 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f17e:	e019      	b.n	800f1b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f180:	f000 fda0 	bl	800fcc4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f184:	4b10      	ldr	r3, [pc, #64]	; (800f1c8 <prvCheckTasksWaitingTermination+0x50>)
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	68db      	ldr	r3, [r3, #12]
 800f18a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	3304      	adds	r3, #4
 800f190:	4618      	mov	r0, r3
 800f192:	f7fe fc2f 	bl	800d9f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f196:	4b0d      	ldr	r3, [pc, #52]	; (800f1cc <prvCheckTasksWaitingTermination+0x54>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	3b01      	subs	r3, #1
 800f19c:	4a0b      	ldr	r2, [pc, #44]	; (800f1cc <prvCheckTasksWaitingTermination+0x54>)
 800f19e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f1a0:	4b0b      	ldr	r3, [pc, #44]	; (800f1d0 <prvCheckTasksWaitingTermination+0x58>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	3b01      	subs	r3, #1
 800f1a6:	4a0a      	ldr	r2, [pc, #40]	; (800f1d0 <prvCheckTasksWaitingTermination+0x58>)
 800f1a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f1aa:	f000 fdbb 	bl	800fd24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 f810 	bl	800f1d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f1b4:	4b06      	ldr	r3, [pc, #24]	; (800f1d0 <prvCheckTasksWaitingTermination+0x58>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d1e1      	bne.n	800f180 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f1bc:	bf00      	nop
 800f1be:	bf00      	nop
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	200010ac 	.word	0x200010ac
 800f1cc:	200010d8 	.word	0x200010d8
 800f1d0:	200010c0 	.word	0x200010c0

0800f1d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d108      	bne.n	800f1f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 fed2 	bl	800ff94 <vPortFree>
				vPortFree( pxTCB );
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 fecf 	bl	800ff94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f1f6:	e018      	b.n	800f22a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f1fe:	2b01      	cmp	r3, #1
 800f200:	d103      	bne.n	800f20a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f000 fec6 	bl	800ff94 <vPortFree>
	}
 800f208:	e00f      	b.n	800f22a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f210:	2b02      	cmp	r3, #2
 800f212:	d00a      	beq.n	800f22a <prvDeleteTCB+0x56>
	__asm volatile
 800f214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f218:	f383 8811 	msr	BASEPRI, r3
 800f21c:	f3bf 8f6f 	isb	sy
 800f220:	f3bf 8f4f 	dsb	sy
 800f224:	60fb      	str	r3, [r7, #12]
}
 800f226:	bf00      	nop
 800f228:	e7fe      	b.n	800f228 <prvDeleteTCB+0x54>
	}
 800f22a:	bf00      	nop
 800f22c:	3710      	adds	r7, #16
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
	...

0800f234 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f23a:	4b0f      	ldr	r3, [pc, #60]	; (800f278 <prvResetNextTaskUnblockTime+0x44>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d101      	bne.n	800f248 <prvResetNextTaskUnblockTime+0x14>
 800f244:	2301      	movs	r3, #1
 800f246:	e000      	b.n	800f24a <prvResetNextTaskUnblockTime+0x16>
 800f248:	2300      	movs	r3, #0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d004      	beq.n	800f258 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f24e:	4b0b      	ldr	r3, [pc, #44]	; (800f27c <prvResetNextTaskUnblockTime+0x48>)
 800f250:	f04f 32ff 	mov.w	r2, #4294967295
 800f254:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f256:	e008      	b.n	800f26a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f258:	4b07      	ldr	r3, [pc, #28]	; (800f278 <prvResetNextTaskUnblockTime+0x44>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	68db      	ldr	r3, [r3, #12]
 800f260:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	4a05      	ldr	r2, [pc, #20]	; (800f27c <prvResetNextTaskUnblockTime+0x48>)
 800f268:	6013      	str	r3, [r2, #0]
}
 800f26a:	bf00      	nop
 800f26c:	370c      	adds	r7, #12
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr
 800f276:	bf00      	nop
 800f278:	20001090 	.word	0x20001090
 800f27c:	200010f8 	.word	0x200010f8

0800f280 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f286:	4b0b      	ldr	r3, [pc, #44]	; (800f2b4 <xTaskGetSchedulerState+0x34>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d102      	bne.n	800f294 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f28e:	2301      	movs	r3, #1
 800f290:	607b      	str	r3, [r7, #4]
 800f292:	e008      	b.n	800f2a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f294:	4b08      	ldr	r3, [pc, #32]	; (800f2b8 <xTaskGetSchedulerState+0x38>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d102      	bne.n	800f2a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f29c:	2302      	movs	r3, #2
 800f29e:	607b      	str	r3, [r7, #4]
 800f2a0:	e001      	b.n	800f2a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f2a6:	687b      	ldr	r3, [r7, #4]
	}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr
 800f2b4:	200010e4 	.word	0x200010e4
 800f2b8:	20001100 	.word	0x20001100

0800f2bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d056      	beq.n	800f380 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f2d2:	4b2e      	ldr	r3, [pc, #184]	; (800f38c <xTaskPriorityDisinherit+0xd0>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	693a      	ldr	r2, [r7, #16]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d00a      	beq.n	800f2f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e0:	f383 8811 	msr	BASEPRI, r3
 800f2e4:	f3bf 8f6f 	isb	sy
 800f2e8:	f3bf 8f4f 	dsb	sy
 800f2ec:	60fb      	str	r3, [r7, #12]
}
 800f2ee:	bf00      	nop
 800f2f0:	e7fe      	b.n	800f2f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d10a      	bne.n	800f310 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fe:	f383 8811 	msr	BASEPRI, r3
 800f302:	f3bf 8f6f 	isb	sy
 800f306:	f3bf 8f4f 	dsb	sy
 800f30a:	60bb      	str	r3, [r7, #8]
}
 800f30c:	bf00      	nop
 800f30e:	e7fe      	b.n	800f30e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f314:	1e5a      	subs	r2, r3, #1
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f322:	429a      	cmp	r2, r3
 800f324:	d02c      	beq.n	800f380 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d128      	bne.n	800f380 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	3304      	adds	r3, #4
 800f332:	4618      	mov	r0, r3
 800f334:	f7fe fb5e 	bl	800d9f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f344:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f350:	4b0f      	ldr	r3, [pc, #60]	; (800f390 <xTaskPriorityDisinherit+0xd4>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	429a      	cmp	r2, r3
 800f356:	d903      	bls.n	800f360 <xTaskPriorityDisinherit+0xa4>
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f35c:	4a0c      	ldr	r2, [pc, #48]	; (800f390 <xTaskPriorityDisinherit+0xd4>)
 800f35e:	6013      	str	r3, [r2, #0]
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f364:	4613      	mov	r3, r2
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	4413      	add	r3, r2
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	4a09      	ldr	r2, [pc, #36]	; (800f394 <xTaskPriorityDisinherit+0xd8>)
 800f36e:	441a      	add	r2, r3
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	3304      	adds	r3, #4
 800f374:	4619      	mov	r1, r3
 800f376:	4610      	mov	r0, r2
 800f378:	f7fe fadf 	bl	800d93a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f37c:	2301      	movs	r3, #1
 800f37e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f380:	697b      	ldr	r3, [r7, #20]
	}
 800f382:	4618      	mov	r0, r3
 800f384:	3718      	adds	r7, #24
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	20000c04 	.word	0x20000c04
 800f390:	200010e0 	.word	0x200010e0
 800f394:	20000c08 	.word	0x20000c08

0800f398 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b084      	sub	sp, #16
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f3a2:	4b21      	ldr	r3, [pc, #132]	; (800f428 <prvAddCurrentTaskToDelayedList+0x90>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3a8:	4b20      	ldr	r3, [pc, #128]	; (800f42c <prvAddCurrentTaskToDelayedList+0x94>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	3304      	adds	r3, #4
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7fe fb20 	bl	800d9f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ba:	d10a      	bne.n	800f3d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d007      	beq.n	800f3d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3c2:	4b1a      	ldr	r3, [pc, #104]	; (800f42c <prvAddCurrentTaskToDelayedList+0x94>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	4819      	ldr	r0, [pc, #100]	; (800f430 <prvAddCurrentTaskToDelayedList+0x98>)
 800f3cc:	f7fe fab5 	bl	800d93a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f3d0:	e026      	b.n	800f420 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	4413      	add	r3, r2
 800f3d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f3da:	4b14      	ldr	r3, [pc, #80]	; (800f42c <prvAddCurrentTaskToDelayedList+0x94>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	68ba      	ldr	r2, [r7, #8]
 800f3e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f3e2:	68ba      	ldr	r2, [r7, #8]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d209      	bcs.n	800f3fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3ea:	4b12      	ldr	r3, [pc, #72]	; (800f434 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f3ec:	681a      	ldr	r2, [r3, #0]
 800f3ee:	4b0f      	ldr	r3, [pc, #60]	; (800f42c <prvAddCurrentTaskToDelayedList+0x94>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	3304      	adds	r3, #4
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	4610      	mov	r0, r2
 800f3f8:	f7fe fac3 	bl	800d982 <vListInsert>
}
 800f3fc:	e010      	b.n	800f420 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3fe:	4b0e      	ldr	r3, [pc, #56]	; (800f438 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	4b0a      	ldr	r3, [pc, #40]	; (800f42c <prvAddCurrentTaskToDelayedList+0x94>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	3304      	adds	r3, #4
 800f408:	4619      	mov	r1, r3
 800f40a:	4610      	mov	r0, r2
 800f40c:	f7fe fab9 	bl	800d982 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f410:	4b0a      	ldr	r3, [pc, #40]	; (800f43c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	68ba      	ldr	r2, [r7, #8]
 800f416:	429a      	cmp	r2, r3
 800f418:	d202      	bcs.n	800f420 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f41a:	4a08      	ldr	r2, [pc, #32]	; (800f43c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	6013      	str	r3, [r2, #0]
}
 800f420:	bf00      	nop
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	200010dc 	.word	0x200010dc
 800f42c:	20000c04 	.word	0x20000c04
 800f430:	200010c4 	.word	0x200010c4
 800f434:	20001094 	.word	0x20001094
 800f438:	20001090 	.word	0x20001090
 800f43c:	200010f8 	.word	0x200010f8

0800f440 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b08a      	sub	sp, #40	; 0x28
 800f444:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f446:	2300      	movs	r3, #0
 800f448:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f44a:	f000 facb 	bl	800f9e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f44e:	4b1c      	ldr	r3, [pc, #112]	; (800f4c0 <xTimerCreateTimerTask+0x80>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d021      	beq.n	800f49a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f456:	2300      	movs	r3, #0
 800f458:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f45a:	2300      	movs	r3, #0
 800f45c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f45e:	1d3a      	adds	r2, r7, #4
 800f460:	f107 0108 	add.w	r1, r7, #8
 800f464:	f107 030c 	add.w	r3, r7, #12
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fe fa1f 	bl	800d8ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f46e:	6879      	ldr	r1, [r7, #4]
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	68fa      	ldr	r2, [r7, #12]
 800f474:	9202      	str	r2, [sp, #8]
 800f476:	9301      	str	r3, [sp, #4]
 800f478:	2302      	movs	r3, #2
 800f47a:	9300      	str	r3, [sp, #0]
 800f47c:	2300      	movs	r3, #0
 800f47e:	460a      	mov	r2, r1
 800f480:	4910      	ldr	r1, [pc, #64]	; (800f4c4 <xTimerCreateTimerTask+0x84>)
 800f482:	4811      	ldr	r0, [pc, #68]	; (800f4c8 <xTimerCreateTimerTask+0x88>)
 800f484:	f7ff f8be 	bl	800e604 <xTaskCreateStatic>
 800f488:	4603      	mov	r3, r0
 800f48a:	4a10      	ldr	r2, [pc, #64]	; (800f4cc <xTimerCreateTimerTask+0x8c>)
 800f48c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f48e:	4b0f      	ldr	r3, [pc, #60]	; (800f4cc <xTimerCreateTimerTask+0x8c>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d001      	beq.n	800f49a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f496:	2301      	movs	r3, #1
 800f498:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d10a      	bne.n	800f4b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a4:	f383 8811 	msr	BASEPRI, r3
 800f4a8:	f3bf 8f6f 	isb	sy
 800f4ac:	f3bf 8f4f 	dsb	sy
 800f4b0:	613b      	str	r3, [r7, #16]
}
 800f4b2:	bf00      	nop
 800f4b4:	e7fe      	b.n	800f4b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f4b6:	697b      	ldr	r3, [r7, #20]
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3718      	adds	r7, #24
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	2000113c 	.word	0x2000113c
 800f4c4:	080165a0 	.word	0x080165a0
 800f4c8:	0800f5ed 	.word	0x0800f5ed
 800f4cc:	20001140 	.word	0x20001140

0800f4d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b08a      	sub	sp, #40	; 0x28
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
 800f4dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d10a      	bne.n	800f4fe <xTimerGenericCommand+0x2e>
	__asm volatile
 800f4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ec:	f383 8811 	msr	BASEPRI, r3
 800f4f0:	f3bf 8f6f 	isb	sy
 800f4f4:	f3bf 8f4f 	dsb	sy
 800f4f8:	623b      	str	r3, [r7, #32]
}
 800f4fa:	bf00      	nop
 800f4fc:	e7fe      	b.n	800f4fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f4fe:	4b1a      	ldr	r3, [pc, #104]	; (800f568 <xTimerGenericCommand+0x98>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d02a      	beq.n	800f55c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	2b05      	cmp	r3, #5
 800f516:	dc18      	bgt.n	800f54a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f518:	f7ff feb2 	bl	800f280 <xTaskGetSchedulerState>
 800f51c:	4603      	mov	r3, r0
 800f51e:	2b02      	cmp	r3, #2
 800f520:	d109      	bne.n	800f536 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f522:	4b11      	ldr	r3, [pc, #68]	; (800f568 <xTimerGenericCommand+0x98>)
 800f524:	6818      	ldr	r0, [r3, #0]
 800f526:	f107 0110 	add.w	r1, r7, #16
 800f52a:	2300      	movs	r3, #0
 800f52c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f52e:	f7fe fbcb 	bl	800dcc8 <xQueueGenericSend>
 800f532:	6278      	str	r0, [r7, #36]	; 0x24
 800f534:	e012      	b.n	800f55c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f536:	4b0c      	ldr	r3, [pc, #48]	; (800f568 <xTimerGenericCommand+0x98>)
 800f538:	6818      	ldr	r0, [r3, #0]
 800f53a:	f107 0110 	add.w	r1, r7, #16
 800f53e:	2300      	movs	r3, #0
 800f540:	2200      	movs	r2, #0
 800f542:	f7fe fbc1 	bl	800dcc8 <xQueueGenericSend>
 800f546:	6278      	str	r0, [r7, #36]	; 0x24
 800f548:	e008      	b.n	800f55c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f54a:	4b07      	ldr	r3, [pc, #28]	; (800f568 <xTimerGenericCommand+0x98>)
 800f54c:	6818      	ldr	r0, [r3, #0]
 800f54e:	f107 0110 	add.w	r1, r7, #16
 800f552:	2300      	movs	r3, #0
 800f554:	683a      	ldr	r2, [r7, #0]
 800f556:	f7fe fcb5 	bl	800dec4 <xQueueGenericSendFromISR>
 800f55a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3728      	adds	r7, #40	; 0x28
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	2000113c 	.word	0x2000113c

0800f56c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b088      	sub	sp, #32
 800f570:	af02      	add	r7, sp, #8
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f576:	4b1c      	ldr	r3, [pc, #112]	; (800f5e8 <prvProcessExpiredTimer+0x7c>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	68db      	ldr	r3, [r3, #12]
 800f57e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	3304      	adds	r3, #4
 800f584:	4618      	mov	r0, r3
 800f586:	f7fe fa35 	bl	800d9f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	69db      	ldr	r3, [r3, #28]
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d122      	bne.n	800f5d8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	699a      	ldr	r2, [r3, #24]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	18d1      	adds	r1, r2, r3
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	683a      	ldr	r2, [r7, #0]
 800f59e:	6978      	ldr	r0, [r7, #20]
 800f5a0:	f000 f8c8 	bl	800f734 <prvInsertTimerInActiveList>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d016      	beq.n	800f5d8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	9300      	str	r3, [sp, #0]
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	2100      	movs	r1, #0
 800f5b4:	6978      	ldr	r0, [r7, #20]
 800f5b6:	f7ff ff8b 	bl	800f4d0 <xTimerGenericCommand>
 800f5ba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d10a      	bne.n	800f5d8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800f5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c6:	f383 8811 	msr	BASEPRI, r3
 800f5ca:	f3bf 8f6f 	isb	sy
 800f5ce:	f3bf 8f4f 	dsb	sy
 800f5d2:	60fb      	str	r3, [r7, #12]
}
 800f5d4:	bf00      	nop
 800f5d6:	e7fe      	b.n	800f5d6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5dc:	6978      	ldr	r0, [r7, #20]
 800f5de:	4798      	blx	r3
}
 800f5e0:	bf00      	nop
 800f5e2:	3718      	adds	r7, #24
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	20001134 	.word	0x20001134

0800f5ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5f4:	f107 0308 	add.w	r3, r7, #8
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f000 f857 	bl	800f6ac <prvGetNextExpireTime>
 800f5fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	4619      	mov	r1, r3
 800f604:	68f8      	ldr	r0, [r7, #12]
 800f606:	f000 f803 	bl	800f610 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f60a:	f000 f8d5 	bl	800f7b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f60e:	e7f1      	b.n	800f5f4 <prvTimerTask+0x8>

0800f610 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f61a:	f7ff fa2b 	bl	800ea74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f61e:	f107 0308 	add.w	r3, r7, #8
 800f622:	4618      	mov	r0, r3
 800f624:	f000 f866 	bl	800f6f4 <prvSampleTimeNow>
 800f628:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d130      	bne.n	800f692 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d10a      	bne.n	800f64c <prvProcessTimerOrBlockTask+0x3c>
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d806      	bhi.n	800f64c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f63e:	f7ff fa27 	bl	800ea90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f642:	68f9      	ldr	r1, [r7, #12]
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f7ff ff91 	bl	800f56c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f64a:	e024      	b.n	800f696 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d008      	beq.n	800f664 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f652:	4b13      	ldr	r3, [pc, #76]	; (800f6a0 <prvProcessTimerOrBlockTask+0x90>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	bf0c      	ite	eq
 800f65c:	2301      	moveq	r3, #1
 800f65e:	2300      	movne	r3, #0
 800f660:	b2db      	uxtb	r3, r3
 800f662:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f664:	4b0f      	ldr	r3, [pc, #60]	; (800f6a4 <prvProcessTimerOrBlockTask+0x94>)
 800f666:	6818      	ldr	r0, [r3, #0]
 800f668:	687a      	ldr	r2, [r7, #4]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	1ad3      	subs	r3, r2, r3
 800f66e:	683a      	ldr	r2, [r7, #0]
 800f670:	4619      	mov	r1, r3
 800f672:	f7fe ff93 	bl	800e59c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f676:	f7ff fa0b 	bl	800ea90 <xTaskResumeAll>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d10a      	bne.n	800f696 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f680:	4b09      	ldr	r3, [pc, #36]	; (800f6a8 <prvProcessTimerOrBlockTask+0x98>)
 800f682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f686:	601a      	str	r2, [r3, #0]
 800f688:	f3bf 8f4f 	dsb	sy
 800f68c:	f3bf 8f6f 	isb	sy
}
 800f690:	e001      	b.n	800f696 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f692:	f7ff f9fd 	bl	800ea90 <xTaskResumeAll>
}
 800f696:	bf00      	nop
 800f698:	3710      	adds	r7, #16
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	20001138 	.word	0x20001138
 800f6a4:	2000113c 	.word	0x2000113c
 800f6a8:	e000ed04 	.word	0xe000ed04

0800f6ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b085      	sub	sp, #20
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f6b4:	4b0e      	ldr	r3, [pc, #56]	; (800f6f0 <prvGetNextExpireTime+0x44>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	bf0c      	ite	eq
 800f6be:	2301      	moveq	r3, #1
 800f6c0:	2300      	movne	r3, #0
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d105      	bne.n	800f6de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6d2:	4b07      	ldr	r3, [pc, #28]	; (800f6f0 <prvGetNextExpireTime+0x44>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	60fb      	str	r3, [r7, #12]
 800f6dc:	e001      	b.n	800f6e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3714      	adds	r7, #20
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr
 800f6f0:	20001134 	.word	0x20001134

0800f6f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b084      	sub	sp, #16
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f6fc:	f7ff fa66 	bl	800ebcc <xTaskGetTickCount>
 800f700:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f702:	4b0b      	ldr	r3, [pc, #44]	; (800f730 <prvSampleTimeNow+0x3c>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d205      	bcs.n	800f718 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f70c:	f000 f908 	bl	800f920 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2201      	movs	r2, #1
 800f714:	601a      	str	r2, [r3, #0]
 800f716:	e002      	b.n	800f71e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2200      	movs	r2, #0
 800f71c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f71e:	4a04      	ldr	r2, [pc, #16]	; (800f730 <prvSampleTimeNow+0x3c>)
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f724:	68fb      	ldr	r3, [r7, #12]
}
 800f726:	4618      	mov	r0, r3
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	20001144 	.word	0x20001144

0800f734 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b086      	sub	sp, #24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	607a      	str	r2, [r7, #4]
 800f740:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f742:	2300      	movs	r3, #0
 800f744:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	68ba      	ldr	r2, [r7, #8]
 800f74a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	68fa      	ldr	r2, [r7, #12]
 800f750:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f752:	68ba      	ldr	r2, [r7, #8]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	429a      	cmp	r2, r3
 800f758:	d812      	bhi.n	800f780 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	1ad2      	subs	r2, r2, r3
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	699b      	ldr	r3, [r3, #24]
 800f764:	429a      	cmp	r2, r3
 800f766:	d302      	bcc.n	800f76e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f768:	2301      	movs	r3, #1
 800f76a:	617b      	str	r3, [r7, #20]
 800f76c:	e01b      	b.n	800f7a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f76e:	4b10      	ldr	r3, [pc, #64]	; (800f7b0 <prvInsertTimerInActiveList+0x7c>)
 800f770:	681a      	ldr	r2, [r3, #0]
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	3304      	adds	r3, #4
 800f776:	4619      	mov	r1, r3
 800f778:	4610      	mov	r0, r2
 800f77a:	f7fe f902 	bl	800d982 <vListInsert>
 800f77e:	e012      	b.n	800f7a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	429a      	cmp	r2, r3
 800f786:	d206      	bcs.n	800f796 <prvInsertTimerInActiveList+0x62>
 800f788:	68ba      	ldr	r2, [r7, #8]
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d302      	bcc.n	800f796 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f790:	2301      	movs	r3, #1
 800f792:	617b      	str	r3, [r7, #20]
 800f794:	e007      	b.n	800f7a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f796:	4b07      	ldr	r3, [pc, #28]	; (800f7b4 <prvInsertTimerInActiveList+0x80>)
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	3304      	adds	r3, #4
 800f79e:	4619      	mov	r1, r3
 800f7a0:	4610      	mov	r0, r2
 800f7a2:	f7fe f8ee 	bl	800d982 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f7a6:	697b      	ldr	r3, [r7, #20]
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3718      	adds	r7, #24
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	20001138 	.word	0x20001138
 800f7b4:	20001134 	.word	0x20001134

0800f7b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b08e      	sub	sp, #56	; 0x38
 800f7bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7be:	e09d      	b.n	800f8fc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	da18      	bge.n	800f7f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f7c6:	1d3b      	adds	r3, r7, #4
 800f7c8:	3304      	adds	r3, #4
 800f7ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d10a      	bne.n	800f7e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d6:	f383 8811 	msr	BASEPRI, r3
 800f7da:	f3bf 8f6f 	isb	sy
 800f7de:	f3bf 8f4f 	dsb	sy
 800f7e2:	61fb      	str	r3, [r7, #28]
}
 800f7e4:	bf00      	nop
 800f7e6:	e7fe      	b.n	800f7e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7ee:	6850      	ldr	r0, [r2, #4]
 800f7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7f2:	6892      	ldr	r2, [r2, #8]
 800f7f4:	4611      	mov	r1, r2
 800f7f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	db7d      	blt.n	800f8fa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f804:	695b      	ldr	r3, [r3, #20]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d004      	beq.n	800f814 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80c:	3304      	adds	r3, #4
 800f80e:	4618      	mov	r0, r3
 800f810:	f7fe f8f0 	bl	800d9f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f814:	463b      	mov	r3, r7
 800f816:	4618      	mov	r0, r3
 800f818:	f7ff ff6c 	bl	800f6f4 <prvSampleTimeNow>
 800f81c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2b09      	cmp	r3, #9
 800f822:	d86b      	bhi.n	800f8fc <prvProcessReceivedCommands+0x144>
 800f824:	a201      	add	r2, pc, #4	; (adr r2, 800f82c <prvProcessReceivedCommands+0x74>)
 800f826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f82a:	bf00      	nop
 800f82c:	0800f855 	.word	0x0800f855
 800f830:	0800f855 	.word	0x0800f855
 800f834:	0800f855 	.word	0x0800f855
 800f838:	0800f8fd 	.word	0x0800f8fd
 800f83c:	0800f8b1 	.word	0x0800f8b1
 800f840:	0800f8e9 	.word	0x0800f8e9
 800f844:	0800f855 	.word	0x0800f855
 800f848:	0800f855 	.word	0x0800f855
 800f84c:	0800f8fd 	.word	0x0800f8fd
 800f850:	0800f8b1 	.word	0x0800f8b1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f854:	68ba      	ldr	r2, [r7, #8]
 800f856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f858:	699b      	ldr	r3, [r3, #24]
 800f85a:	18d1      	adds	r1, r2, r3
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f862:	f7ff ff67 	bl	800f734 <prvInsertTimerInActiveList>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d047      	beq.n	800f8fc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f872:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f876:	69db      	ldr	r3, [r3, #28]
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d13f      	bne.n	800f8fc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f87c:	68ba      	ldr	r2, [r7, #8]
 800f87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f880:	699b      	ldr	r3, [r3, #24]
 800f882:	441a      	add	r2, r3
 800f884:	2300      	movs	r3, #0
 800f886:	9300      	str	r3, [sp, #0]
 800f888:	2300      	movs	r3, #0
 800f88a:	2100      	movs	r1, #0
 800f88c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f88e:	f7ff fe1f 	bl	800f4d0 <xTimerGenericCommand>
 800f892:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f894:	6a3b      	ldr	r3, [r7, #32]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d130      	bne.n	800f8fc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800f89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89e:	f383 8811 	msr	BASEPRI, r3
 800f8a2:	f3bf 8f6f 	isb	sy
 800f8a6:	f3bf 8f4f 	dsb	sy
 800f8aa:	61bb      	str	r3, [r7, #24]
}
 800f8ac:	bf00      	nop
 800f8ae:	e7fe      	b.n	800f8ae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f8b0:	68ba      	ldr	r2, [r7, #8]
 800f8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b8:	699b      	ldr	r3, [r3, #24]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d10a      	bne.n	800f8d4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800f8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c2:	f383 8811 	msr	BASEPRI, r3
 800f8c6:	f3bf 8f6f 	isb	sy
 800f8ca:	f3bf 8f4f 	dsb	sy
 800f8ce:	617b      	str	r3, [r7, #20]
}
 800f8d0:	bf00      	nop
 800f8d2:	e7fe      	b.n	800f8d2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d6:	699a      	ldr	r2, [r3, #24]
 800f8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8da:	18d1      	adds	r1, r2, r3
 800f8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8e2:	f7ff ff27 	bl	800f734 <prvInsertTimerInActiveList>
					break;
 800f8e6:	e009      	b.n	800f8fc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d104      	bne.n	800f8fc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800f8f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8f4:	f000 fb4e 	bl	800ff94 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f8f8:	e000      	b.n	800f8fc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f8fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f8fc:	4b07      	ldr	r3, [pc, #28]	; (800f91c <prvProcessReceivedCommands+0x164>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	1d39      	adds	r1, r7, #4
 800f902:	2200      	movs	r2, #0
 800f904:	4618      	mov	r0, r3
 800f906:	f7fe fb75 	bl	800dff4 <xQueueReceive>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f47f af57 	bne.w	800f7c0 <prvProcessReceivedCommands+0x8>
	}
}
 800f912:	bf00      	nop
 800f914:	bf00      	nop
 800f916:	3730      	adds	r7, #48	; 0x30
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	2000113c 	.word	0x2000113c

0800f920 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b088      	sub	sp, #32
 800f924:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f926:	e045      	b.n	800f9b4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f928:	4b2c      	ldr	r3, [pc, #176]	; (800f9dc <prvSwitchTimerLists+0xbc>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f932:	4b2a      	ldr	r3, [pc, #168]	; (800f9dc <prvSwitchTimerLists+0xbc>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	68db      	ldr	r3, [r3, #12]
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	3304      	adds	r3, #4
 800f940:	4618      	mov	r0, r3
 800f942:	f7fe f857 	bl	800d9f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94a:	68f8      	ldr	r0, [r7, #12]
 800f94c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	69db      	ldr	r3, [r3, #28]
 800f952:	2b01      	cmp	r3, #1
 800f954:	d12e      	bne.n	800f9b4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	699b      	ldr	r3, [r3, #24]
 800f95a:	693a      	ldr	r2, [r7, #16]
 800f95c:	4413      	add	r3, r2
 800f95e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f960:	68ba      	ldr	r2, [r7, #8]
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	429a      	cmp	r2, r3
 800f966:	d90e      	bls.n	800f986 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	68ba      	ldr	r2, [r7, #8]
 800f96c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f974:	4b19      	ldr	r3, [pc, #100]	; (800f9dc <prvSwitchTimerLists+0xbc>)
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	3304      	adds	r3, #4
 800f97c:	4619      	mov	r1, r3
 800f97e:	4610      	mov	r0, r2
 800f980:	f7fd ffff 	bl	800d982 <vListInsert>
 800f984:	e016      	b.n	800f9b4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f986:	2300      	movs	r3, #0
 800f988:	9300      	str	r3, [sp, #0]
 800f98a:	2300      	movs	r3, #0
 800f98c:	693a      	ldr	r2, [r7, #16]
 800f98e:	2100      	movs	r1, #0
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	f7ff fd9d 	bl	800f4d0 <xTimerGenericCommand>
 800f996:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d10a      	bne.n	800f9b4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800f99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a2:	f383 8811 	msr	BASEPRI, r3
 800f9a6:	f3bf 8f6f 	isb	sy
 800f9aa:	f3bf 8f4f 	dsb	sy
 800f9ae:	603b      	str	r3, [r7, #0]
}
 800f9b0:	bf00      	nop
 800f9b2:	e7fe      	b.n	800f9b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9b4:	4b09      	ldr	r3, [pc, #36]	; (800f9dc <prvSwitchTimerLists+0xbc>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d1b4      	bne.n	800f928 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f9be:	4b07      	ldr	r3, [pc, #28]	; (800f9dc <prvSwitchTimerLists+0xbc>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f9c4:	4b06      	ldr	r3, [pc, #24]	; (800f9e0 <prvSwitchTimerLists+0xc0>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4a04      	ldr	r2, [pc, #16]	; (800f9dc <prvSwitchTimerLists+0xbc>)
 800f9ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f9cc:	4a04      	ldr	r2, [pc, #16]	; (800f9e0 <prvSwitchTimerLists+0xc0>)
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	6013      	str	r3, [r2, #0]
}
 800f9d2:	bf00      	nop
 800f9d4:	3718      	adds	r7, #24
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}
 800f9da:	bf00      	nop
 800f9dc:	20001134 	.word	0x20001134
 800f9e0:	20001138 	.word	0x20001138

0800f9e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f9ea:	f000 f96b 	bl	800fcc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f9ee:	4b15      	ldr	r3, [pc, #84]	; (800fa44 <prvCheckForValidListAndQueue+0x60>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d120      	bne.n	800fa38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f9f6:	4814      	ldr	r0, [pc, #80]	; (800fa48 <prvCheckForValidListAndQueue+0x64>)
 800f9f8:	f7fd ff72 	bl	800d8e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f9fc:	4813      	ldr	r0, [pc, #76]	; (800fa4c <prvCheckForValidListAndQueue+0x68>)
 800f9fe:	f7fd ff6f 	bl	800d8e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa02:	4b13      	ldr	r3, [pc, #76]	; (800fa50 <prvCheckForValidListAndQueue+0x6c>)
 800fa04:	4a10      	ldr	r2, [pc, #64]	; (800fa48 <prvCheckForValidListAndQueue+0x64>)
 800fa06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa08:	4b12      	ldr	r3, [pc, #72]	; (800fa54 <prvCheckForValidListAndQueue+0x70>)
 800fa0a:	4a10      	ldr	r2, [pc, #64]	; (800fa4c <prvCheckForValidListAndQueue+0x68>)
 800fa0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa0e:	2300      	movs	r3, #0
 800fa10:	9300      	str	r3, [sp, #0]
 800fa12:	4b11      	ldr	r3, [pc, #68]	; (800fa58 <prvCheckForValidListAndQueue+0x74>)
 800fa14:	4a11      	ldr	r2, [pc, #68]	; (800fa5c <prvCheckForValidListAndQueue+0x78>)
 800fa16:	2110      	movs	r1, #16
 800fa18:	200a      	movs	r0, #10
 800fa1a:	f7fe f87d 	bl	800db18 <xQueueGenericCreateStatic>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	4a08      	ldr	r2, [pc, #32]	; (800fa44 <prvCheckForValidListAndQueue+0x60>)
 800fa22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa24:	4b07      	ldr	r3, [pc, #28]	; (800fa44 <prvCheckForValidListAndQueue+0x60>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d005      	beq.n	800fa38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa2c:	4b05      	ldr	r3, [pc, #20]	; (800fa44 <prvCheckForValidListAndQueue+0x60>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	490b      	ldr	r1, [pc, #44]	; (800fa60 <prvCheckForValidListAndQueue+0x7c>)
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7fe fd88 	bl	800e548 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa38:	f000 f974 	bl	800fd24 <vPortExitCritical>
}
 800fa3c:	bf00      	nop
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	2000113c 	.word	0x2000113c
 800fa48:	2000110c 	.word	0x2000110c
 800fa4c:	20001120 	.word	0x20001120
 800fa50:	20001134 	.word	0x20001134
 800fa54:	20001138 	.word	0x20001138
 800fa58:	200011e8 	.word	0x200011e8
 800fa5c:	20001148 	.word	0x20001148
 800fa60:	080165a8 	.word	0x080165a8

0800fa64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fa64:	b480      	push	{r7}
 800fa66:	b085      	sub	sp, #20
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	60f8      	str	r0, [r7, #12]
 800fa6c:	60b9      	str	r1, [r7, #8]
 800fa6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	3b04      	subs	r3, #4
 800fa74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fa7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	3b04      	subs	r3, #4
 800fa82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	f023 0201 	bic.w	r2, r3, #1
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	3b04      	subs	r3, #4
 800fa92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fa94:	4a0c      	ldr	r2, [pc, #48]	; (800fac8 <pxPortInitialiseStack+0x64>)
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	3b14      	subs	r3, #20
 800fa9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800faa0:	687a      	ldr	r2, [r7, #4]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	3b04      	subs	r3, #4
 800faaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f06f 0202 	mvn.w	r2, #2
 800fab2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	3b20      	subs	r3, #32
 800fab8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800faba:	68fb      	ldr	r3, [r7, #12]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3714      	adds	r7, #20
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr
 800fac8:	0800facd 	.word	0x0800facd

0800facc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800facc:	b480      	push	{r7}
 800face:	b085      	sub	sp, #20
 800fad0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fad2:	2300      	movs	r3, #0
 800fad4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fad6:	4b12      	ldr	r3, [pc, #72]	; (800fb20 <prvTaskExitError+0x54>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fade:	d00a      	beq.n	800faf6 <prvTaskExitError+0x2a>
	__asm volatile
 800fae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae4:	f383 8811 	msr	BASEPRI, r3
 800fae8:	f3bf 8f6f 	isb	sy
 800faec:	f3bf 8f4f 	dsb	sy
 800faf0:	60fb      	str	r3, [r7, #12]
}
 800faf2:	bf00      	nop
 800faf4:	e7fe      	b.n	800faf4 <prvTaskExitError+0x28>
	__asm volatile
 800faf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fafa:	f383 8811 	msr	BASEPRI, r3
 800fafe:	f3bf 8f6f 	isb	sy
 800fb02:	f3bf 8f4f 	dsb	sy
 800fb06:	60bb      	str	r3, [r7, #8]
}
 800fb08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb0a:	bf00      	nop
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d0fc      	beq.n	800fb0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb12:	bf00      	nop
 800fb14:	bf00      	nop
 800fb16:	3714      	adds	r7, #20
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr
 800fb20:	2000011c 	.word	0x2000011c
	...

0800fb30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb30:	4b07      	ldr	r3, [pc, #28]	; (800fb50 <pxCurrentTCBConst2>)
 800fb32:	6819      	ldr	r1, [r3, #0]
 800fb34:	6808      	ldr	r0, [r1, #0]
 800fb36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3a:	f380 8809 	msr	PSP, r0
 800fb3e:	f3bf 8f6f 	isb	sy
 800fb42:	f04f 0000 	mov.w	r0, #0
 800fb46:	f380 8811 	msr	BASEPRI, r0
 800fb4a:	4770      	bx	lr
 800fb4c:	f3af 8000 	nop.w

0800fb50 <pxCurrentTCBConst2>:
 800fb50:	20000c04 	.word	0x20000c04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fb54:	bf00      	nop
 800fb56:	bf00      	nop

0800fb58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb58:	4808      	ldr	r0, [pc, #32]	; (800fb7c <prvPortStartFirstTask+0x24>)
 800fb5a:	6800      	ldr	r0, [r0, #0]
 800fb5c:	6800      	ldr	r0, [r0, #0]
 800fb5e:	f380 8808 	msr	MSP, r0
 800fb62:	f04f 0000 	mov.w	r0, #0
 800fb66:	f380 8814 	msr	CONTROL, r0
 800fb6a:	b662      	cpsie	i
 800fb6c:	b661      	cpsie	f
 800fb6e:	f3bf 8f4f 	dsb	sy
 800fb72:	f3bf 8f6f 	isb	sy
 800fb76:	df00      	svc	0
 800fb78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb7a:	bf00      	nop
 800fb7c:	e000ed08 	.word	0xe000ed08

0800fb80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b086      	sub	sp, #24
 800fb84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fb86:	4b46      	ldr	r3, [pc, #280]	; (800fca0 <xPortStartScheduler+0x120>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	4a46      	ldr	r2, [pc, #280]	; (800fca4 <xPortStartScheduler+0x124>)
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	d10a      	bne.n	800fba6 <xPortStartScheduler+0x26>
	__asm volatile
 800fb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb94:	f383 8811 	msr	BASEPRI, r3
 800fb98:	f3bf 8f6f 	isb	sy
 800fb9c:	f3bf 8f4f 	dsb	sy
 800fba0:	613b      	str	r3, [r7, #16]
}
 800fba2:	bf00      	nop
 800fba4:	e7fe      	b.n	800fba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fba6:	4b3e      	ldr	r3, [pc, #248]	; (800fca0 <xPortStartScheduler+0x120>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4a3f      	ldr	r2, [pc, #252]	; (800fca8 <xPortStartScheduler+0x128>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d10a      	bne.n	800fbc6 <xPortStartScheduler+0x46>
	__asm volatile
 800fbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb4:	f383 8811 	msr	BASEPRI, r3
 800fbb8:	f3bf 8f6f 	isb	sy
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	60fb      	str	r3, [r7, #12]
}
 800fbc2:	bf00      	nop
 800fbc4:	e7fe      	b.n	800fbc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fbc6:	4b39      	ldr	r3, [pc, #228]	; (800fcac <xPortStartScheduler+0x12c>)
 800fbc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	22ff      	movs	r2, #255	; 0xff
 800fbd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fbe0:	78fb      	ldrb	r3, [r7, #3]
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fbe8:	b2da      	uxtb	r2, r3
 800fbea:	4b31      	ldr	r3, [pc, #196]	; (800fcb0 <xPortStartScheduler+0x130>)
 800fbec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fbee:	4b31      	ldr	r3, [pc, #196]	; (800fcb4 <xPortStartScheduler+0x134>)
 800fbf0:	2207      	movs	r2, #7
 800fbf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fbf4:	e009      	b.n	800fc0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fbf6:	4b2f      	ldr	r3, [pc, #188]	; (800fcb4 <xPortStartScheduler+0x134>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	3b01      	subs	r3, #1
 800fbfc:	4a2d      	ldr	r2, [pc, #180]	; (800fcb4 <xPortStartScheduler+0x134>)
 800fbfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc00:	78fb      	ldrb	r3, [r7, #3]
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	005b      	lsls	r3, r3, #1
 800fc06:	b2db      	uxtb	r3, r3
 800fc08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc0a:	78fb      	ldrb	r3, [r7, #3]
 800fc0c:	b2db      	uxtb	r3, r3
 800fc0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc12:	2b80      	cmp	r3, #128	; 0x80
 800fc14:	d0ef      	beq.n	800fbf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc16:	4b27      	ldr	r3, [pc, #156]	; (800fcb4 <xPortStartScheduler+0x134>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	f1c3 0307 	rsb	r3, r3, #7
 800fc1e:	2b04      	cmp	r3, #4
 800fc20:	d00a      	beq.n	800fc38 <xPortStartScheduler+0xb8>
	__asm volatile
 800fc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc26:	f383 8811 	msr	BASEPRI, r3
 800fc2a:	f3bf 8f6f 	isb	sy
 800fc2e:	f3bf 8f4f 	dsb	sy
 800fc32:	60bb      	str	r3, [r7, #8]
}
 800fc34:	bf00      	nop
 800fc36:	e7fe      	b.n	800fc36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc38:	4b1e      	ldr	r3, [pc, #120]	; (800fcb4 <xPortStartScheduler+0x134>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	021b      	lsls	r3, r3, #8
 800fc3e:	4a1d      	ldr	r2, [pc, #116]	; (800fcb4 <xPortStartScheduler+0x134>)
 800fc40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc42:	4b1c      	ldr	r3, [pc, #112]	; (800fcb4 <xPortStartScheduler+0x134>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fc4a:	4a1a      	ldr	r2, [pc, #104]	; (800fcb4 <xPortStartScheduler+0x134>)
 800fc4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	b2da      	uxtb	r2, r3
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc56:	4b18      	ldr	r3, [pc, #96]	; (800fcb8 <xPortStartScheduler+0x138>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	4a17      	ldr	r2, [pc, #92]	; (800fcb8 <xPortStartScheduler+0x138>)
 800fc5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fc60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc62:	4b15      	ldr	r3, [pc, #84]	; (800fcb8 <xPortStartScheduler+0x138>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4a14      	ldr	r2, [pc, #80]	; (800fcb8 <xPortStartScheduler+0x138>)
 800fc68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fc6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fc6e:	f000 f8dd 	bl	800fe2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc72:	4b12      	ldr	r3, [pc, #72]	; (800fcbc <xPortStartScheduler+0x13c>)
 800fc74:	2200      	movs	r2, #0
 800fc76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fc78:	f000 f8fc 	bl	800fe74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fc7c:	4b10      	ldr	r3, [pc, #64]	; (800fcc0 <xPortStartScheduler+0x140>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a0f      	ldr	r2, [pc, #60]	; (800fcc0 <xPortStartScheduler+0x140>)
 800fc82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fc86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fc88:	f7ff ff66 	bl	800fb58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fc8c:	f7ff f86c 	bl	800ed68 <vTaskSwitchContext>
	prvTaskExitError();
 800fc90:	f7ff ff1c 	bl	800facc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fc94:	2300      	movs	r3, #0
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3718      	adds	r7, #24
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	e000ed00 	.word	0xe000ed00
 800fca4:	410fc271 	.word	0x410fc271
 800fca8:	410fc270 	.word	0x410fc270
 800fcac:	e000e400 	.word	0xe000e400
 800fcb0:	20001238 	.word	0x20001238
 800fcb4:	2000123c 	.word	0x2000123c
 800fcb8:	e000ed20 	.word	0xe000ed20
 800fcbc:	2000011c 	.word	0x2000011c
 800fcc0:	e000ef34 	.word	0xe000ef34

0800fcc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
	__asm volatile
 800fcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcce:	f383 8811 	msr	BASEPRI, r3
 800fcd2:	f3bf 8f6f 	isb	sy
 800fcd6:	f3bf 8f4f 	dsb	sy
 800fcda:	607b      	str	r3, [r7, #4]
}
 800fcdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fcde:	4b0f      	ldr	r3, [pc, #60]	; (800fd1c <vPortEnterCritical+0x58>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	3301      	adds	r3, #1
 800fce4:	4a0d      	ldr	r2, [pc, #52]	; (800fd1c <vPortEnterCritical+0x58>)
 800fce6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fce8:	4b0c      	ldr	r3, [pc, #48]	; (800fd1c <vPortEnterCritical+0x58>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d10f      	bne.n	800fd10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fcf0:	4b0b      	ldr	r3, [pc, #44]	; (800fd20 <vPortEnterCritical+0x5c>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d00a      	beq.n	800fd10 <vPortEnterCritical+0x4c>
	__asm volatile
 800fcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfe:	f383 8811 	msr	BASEPRI, r3
 800fd02:	f3bf 8f6f 	isb	sy
 800fd06:	f3bf 8f4f 	dsb	sy
 800fd0a:	603b      	str	r3, [r7, #0]
}
 800fd0c:	bf00      	nop
 800fd0e:	e7fe      	b.n	800fd0e <vPortEnterCritical+0x4a>
	}
}
 800fd10:	bf00      	nop
 800fd12:	370c      	adds	r7, #12
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr
 800fd1c:	2000011c 	.word	0x2000011c
 800fd20:	e000ed04 	.word	0xe000ed04

0800fd24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd24:	b480      	push	{r7}
 800fd26:	b083      	sub	sp, #12
 800fd28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd2a:	4b12      	ldr	r3, [pc, #72]	; (800fd74 <vPortExitCritical+0x50>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d10a      	bne.n	800fd48 <vPortExitCritical+0x24>
	__asm volatile
 800fd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd36:	f383 8811 	msr	BASEPRI, r3
 800fd3a:	f3bf 8f6f 	isb	sy
 800fd3e:	f3bf 8f4f 	dsb	sy
 800fd42:	607b      	str	r3, [r7, #4]
}
 800fd44:	bf00      	nop
 800fd46:	e7fe      	b.n	800fd46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fd48:	4b0a      	ldr	r3, [pc, #40]	; (800fd74 <vPortExitCritical+0x50>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	3b01      	subs	r3, #1
 800fd4e:	4a09      	ldr	r2, [pc, #36]	; (800fd74 <vPortExitCritical+0x50>)
 800fd50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd52:	4b08      	ldr	r3, [pc, #32]	; (800fd74 <vPortExitCritical+0x50>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d105      	bne.n	800fd66 <vPortExitCritical+0x42>
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	f383 8811 	msr	BASEPRI, r3
}
 800fd64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fd66:	bf00      	nop
 800fd68:	370c      	adds	r7, #12
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr
 800fd72:	bf00      	nop
 800fd74:	2000011c 	.word	0x2000011c
	...

0800fd80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fd80:	f3ef 8009 	mrs	r0, PSP
 800fd84:	f3bf 8f6f 	isb	sy
 800fd88:	4b15      	ldr	r3, [pc, #84]	; (800fde0 <pxCurrentTCBConst>)
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	f01e 0f10 	tst.w	lr, #16
 800fd90:	bf08      	it	eq
 800fd92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fd96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9a:	6010      	str	r0, [r2, #0]
 800fd9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fda0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fda4:	f380 8811 	msr	BASEPRI, r0
 800fda8:	f3bf 8f4f 	dsb	sy
 800fdac:	f3bf 8f6f 	isb	sy
 800fdb0:	f7fe ffda 	bl	800ed68 <vTaskSwitchContext>
 800fdb4:	f04f 0000 	mov.w	r0, #0
 800fdb8:	f380 8811 	msr	BASEPRI, r0
 800fdbc:	bc09      	pop	{r0, r3}
 800fdbe:	6819      	ldr	r1, [r3, #0]
 800fdc0:	6808      	ldr	r0, [r1, #0]
 800fdc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc6:	f01e 0f10 	tst.w	lr, #16
 800fdca:	bf08      	it	eq
 800fdcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fdd0:	f380 8809 	msr	PSP, r0
 800fdd4:	f3bf 8f6f 	isb	sy
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop
 800fddc:	f3af 8000 	nop.w

0800fde0 <pxCurrentTCBConst>:
 800fde0:	20000c04 	.word	0x20000c04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fde4:	bf00      	nop
 800fde6:	bf00      	nop

0800fde8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
	__asm volatile
 800fdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf2:	f383 8811 	msr	BASEPRI, r3
 800fdf6:	f3bf 8f6f 	isb	sy
 800fdfa:	f3bf 8f4f 	dsb	sy
 800fdfe:	607b      	str	r3, [r7, #4]
}
 800fe00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe02:	f7fe fef3 	bl	800ebec <xTaskIncrementTick>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d003      	beq.n	800fe14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe0c:	4b06      	ldr	r3, [pc, #24]	; (800fe28 <SysTick_Handler+0x40>)
 800fe0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe12:	601a      	str	r2, [r3, #0]
 800fe14:	2300      	movs	r3, #0
 800fe16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	f383 8811 	msr	BASEPRI, r3
}
 800fe1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe20:	bf00      	nop
 800fe22:	3708      	adds	r7, #8
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	e000ed04 	.word	0xe000ed04

0800fe2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe30:	4b0b      	ldr	r3, [pc, #44]	; (800fe60 <vPortSetupTimerInterrupt+0x34>)
 800fe32:	2200      	movs	r2, #0
 800fe34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe36:	4b0b      	ldr	r3, [pc, #44]	; (800fe64 <vPortSetupTimerInterrupt+0x38>)
 800fe38:	2200      	movs	r2, #0
 800fe3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe3c:	4b0a      	ldr	r3, [pc, #40]	; (800fe68 <vPortSetupTimerInterrupt+0x3c>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4a0a      	ldr	r2, [pc, #40]	; (800fe6c <vPortSetupTimerInterrupt+0x40>)
 800fe42:	fba2 2303 	umull	r2, r3, r2, r3
 800fe46:	099b      	lsrs	r3, r3, #6
 800fe48:	4a09      	ldr	r2, [pc, #36]	; (800fe70 <vPortSetupTimerInterrupt+0x44>)
 800fe4a:	3b01      	subs	r3, #1
 800fe4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe4e:	4b04      	ldr	r3, [pc, #16]	; (800fe60 <vPortSetupTimerInterrupt+0x34>)
 800fe50:	2207      	movs	r2, #7
 800fe52:	601a      	str	r2, [r3, #0]
}
 800fe54:	bf00      	nop
 800fe56:	46bd      	mov	sp, r7
 800fe58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5c:	4770      	bx	lr
 800fe5e:	bf00      	nop
 800fe60:	e000e010 	.word	0xe000e010
 800fe64:	e000e018 	.word	0xe000e018
 800fe68:	20000000 	.word	0x20000000
 800fe6c:	10624dd3 	.word	0x10624dd3
 800fe70:	e000e014 	.word	0xe000e014

0800fe74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fe74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fe84 <vPortEnableVFP+0x10>
 800fe78:	6801      	ldr	r1, [r0, #0]
 800fe7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fe7e:	6001      	str	r1, [r0, #0]
 800fe80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fe82:	bf00      	nop
 800fe84:	e000ed88 	.word	0xe000ed88

0800fe88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fe88:	b480      	push	{r7}
 800fe8a:	b085      	sub	sp, #20
 800fe8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fe8e:	f3ef 8305 	mrs	r3, IPSR
 800fe92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2b0f      	cmp	r3, #15
 800fe98:	d914      	bls.n	800fec4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fe9a:	4a17      	ldr	r2, [pc, #92]	; (800fef8 <vPortValidateInterruptPriority+0x70>)
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	4413      	add	r3, r2
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fea4:	4b15      	ldr	r3, [pc, #84]	; (800fefc <vPortValidateInterruptPriority+0x74>)
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	7afa      	ldrb	r2, [r7, #11]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d20a      	bcs.n	800fec4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800feae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb2:	f383 8811 	msr	BASEPRI, r3
 800feb6:	f3bf 8f6f 	isb	sy
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	607b      	str	r3, [r7, #4]
}
 800fec0:	bf00      	nop
 800fec2:	e7fe      	b.n	800fec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fec4:	4b0e      	ldr	r3, [pc, #56]	; (800ff00 <vPortValidateInterruptPriority+0x78>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fecc:	4b0d      	ldr	r3, [pc, #52]	; (800ff04 <vPortValidateInterruptPriority+0x7c>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d90a      	bls.n	800feea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed8:	f383 8811 	msr	BASEPRI, r3
 800fedc:	f3bf 8f6f 	isb	sy
 800fee0:	f3bf 8f4f 	dsb	sy
 800fee4:	603b      	str	r3, [r7, #0]
}
 800fee6:	bf00      	nop
 800fee8:	e7fe      	b.n	800fee8 <vPortValidateInterruptPriority+0x60>
	}
 800feea:	bf00      	nop
 800feec:	3714      	adds	r7, #20
 800feee:	46bd      	mov	sp, r7
 800fef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef4:	4770      	bx	lr
 800fef6:	bf00      	nop
 800fef8:	e000e3f0 	.word	0xe000e3f0
 800fefc:	20001238 	.word	0x20001238
 800ff00:	e000ed0c 	.word	0xe000ed0c
 800ff04:	2000123c 	.word	0x2000123c

0800ff08 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800ff10:	2300      	movs	r3, #0
 800ff12:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f003 0307 	and.w	r3, r3, #7
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d004      	beq.n	800ff28 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f023 0307 	bic.w	r3, r3, #7
 800ff24:	3308      	adds	r3, #8
 800ff26:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800ff28:	f7fe fda4 	bl	800ea74 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800ff2c:	4b16      	ldr	r3, [pc, #88]	; (800ff88 <pvPortMalloc+0x80>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d105      	bne.n	800ff40 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800ff34:	4b15      	ldr	r3, [pc, #84]	; (800ff8c <pvPortMalloc+0x84>)
 800ff36:	f023 0307 	bic.w	r3, r3, #7
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	4b12      	ldr	r3, [pc, #72]	; (800ff88 <pvPortMalloc+0x80>)
 800ff3e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800ff40:	4b13      	ldr	r3, [pc, #76]	; (800ff90 <pvPortMalloc+0x88>)
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	4413      	add	r3, r2
 800ff48:	f241 72f7 	movw	r2, #6135	; 0x17f7
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d813      	bhi.n	800ff78 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800ff50:	4b0f      	ldr	r3, [pc, #60]	; (800ff90 <pvPortMalloc+0x88>)
 800ff52:	681a      	ldr	r2, [r3, #0]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	441a      	add	r2, r3
 800ff58:	4b0d      	ldr	r3, [pc, #52]	; (800ff90 <pvPortMalloc+0x88>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d90b      	bls.n	800ff78 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800ff60:	4b09      	ldr	r3, [pc, #36]	; (800ff88 <pvPortMalloc+0x80>)
 800ff62:	681a      	ldr	r2, [r3, #0]
 800ff64:	4b0a      	ldr	r3, [pc, #40]	; (800ff90 <pvPortMalloc+0x88>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	4413      	add	r3, r2
 800ff6a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800ff6c:	4b08      	ldr	r3, [pc, #32]	; (800ff90 <pvPortMalloc+0x88>)
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	4413      	add	r3, r2
 800ff74:	4a06      	ldr	r2, [pc, #24]	; (800ff90 <pvPortMalloc+0x88>)
 800ff76:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ff78:	f7fe fd8a 	bl	800ea90 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
 800ff86:	bf00      	nop
 800ff88:	20002a44 	.word	0x20002a44
 800ff8c:	20001248 	.word	0x20001248
 800ff90:	20002a40 	.word	0x20002a40

0800ff94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ff94:	b480      	push	{r7}
 800ff96:	b085      	sub	sp, #20
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d00a      	beq.n	800ffb8 <vPortFree+0x24>
	__asm volatile
 800ffa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa6:	f383 8811 	msr	BASEPRI, r3
 800ffaa:	f3bf 8f6f 	isb	sy
 800ffae:	f3bf 8f4f 	dsb	sy
 800ffb2:	60fb      	str	r3, [r7, #12]
}
 800ffb4:	bf00      	nop
 800ffb6:	e7fe      	b.n	800ffb6 <vPortFree+0x22>
}
 800ffb8:	bf00      	nop
 800ffba:	3714      	adds	r7, #20
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr

0800ffc4 <EvaluateCANInput>:
 */

#include "can_input.h"

uint8_t EvaluateCANInput(CAN_RxHeaderTypeDef* stRxHeader, uint8_t nRxData[8], PdmConfig_CanInput_t *in, uint16_t* nResult)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b088      	sub	sp, #32
 800ffc8:	af02      	add	r7, sp, #8
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
 800ffd0:	603b      	str	r3, [r7, #0]
  if(!in->nEnabled)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d101      	bne.n	800ffde <EvaluateCANInput+0x1a>
    return 0;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	e0a6      	b.n	801012c <EvaluateCANInput+0x168>
  if(stRxHeader->StdId != in->nId)
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	8852      	ldrh	r2, [r2, #2]
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d001      	beq.n	800ffee <EvaluateCANInput+0x2a>
    return 0;
 800ffea:	2300      	movs	r3, #0
 800ffec:	e09e      	b.n	801012c <EvaluateCANInput+0x168>

  uint16_t nSelected;

  //8 bit
  if(in->nHighByte == 0)
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	88db      	ldrh	r3, [r3, #6]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d107      	bne.n	8010006 <EvaluateCANInput+0x42>
  {
    nSelected = nRxData[in->nLowByte];
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	889b      	ldrh	r3, [r3, #4]
 800fffa:	461a      	mov	r2, r3
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	4413      	add	r3, r2
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	82fb      	strh	r3, [r7, #22]
 8010004:	e011      	b.n	801002a <EvaluateCANInput+0x66>
  }
  else
  {
    nSelected = (nRxData[in->nHighByte] << 8) + nRxData[in->nLowByte];
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	88db      	ldrh	r3, [r3, #6]
 801000a:	461a      	mov	r2, r3
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	4413      	add	r3, r2
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	b29b      	uxth	r3, r3
 8010014:	021b      	lsls	r3, r3, #8
 8010016:	b29a      	uxth	r2, r3
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	889b      	ldrh	r3, [r3, #4]
 801001c:	4619      	mov	r1, r3
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	440b      	add	r3, r1
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	b29b      	uxth	r3, r3
 8010026:	4413      	add	r3, r2
 8010028:	82fb      	strh	r3, [r7, #22]
  }

  switch(in->eOperator)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	7a1b      	ldrb	r3, [r3, #8]
 801002e:	2b04      	cmp	r3, #4
 8010030:	d87b      	bhi.n	801012a <EvaluateCANInput+0x166>
 8010032:	a201      	add	r2, pc, #4	; (adr r2, 8010038 <EvaluateCANInput+0x74>)
 8010034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010038:	0801004d 	.word	0x0801004d
 801003c:	0801005b 	.word	0x0801005b
 8010040:	08010075 	.word	0x08010075
 8010044:	0801008f 	.word	0x0801008f
 8010048:	080100d5 	.word	0x080100d5
  {
  case OPER_EQUAL:
    *nResult = nSelected & 0xFF;
 801004c:	8afb      	ldrh	r3, [r7, #22]
 801004e:	b2db      	uxtb	r3, r3
 8010050:	b29a      	uxth	r2, r3
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	801a      	strh	r2, [r3, #0]
    return 1;
 8010056:	2301      	movs	r3, #1
 8010058:	e068      	b.n	801012c <EvaluateCANInput+0x168>

  case OPER_GREATER_THAN:
    *nResult = nSelected > in->nOnVal;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	895b      	ldrh	r3, [r3, #10]
 801005e:	8afa      	ldrh	r2, [r7, #22]
 8010060:	429a      	cmp	r2, r3
 8010062:	bf8c      	ite	hi
 8010064:	2301      	movhi	r3, #1
 8010066:	2300      	movls	r3, #0
 8010068:	b2db      	uxtb	r3, r3
 801006a:	b29a      	uxth	r2, r3
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	801a      	strh	r2, [r3, #0]
    return 1;
 8010070:	2301      	movs	r3, #1
 8010072:	e05b      	b.n	801012c <EvaluateCANInput+0x168>

  case OPER_LESS_THAN:
    *nResult = nSelected < in->nOnVal;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	895b      	ldrh	r3, [r3, #10]
 8010078:	8afa      	ldrh	r2, [r7, #22]
 801007a:	429a      	cmp	r2, r3
 801007c:	bf34      	ite	cc
 801007e:	2301      	movcc	r3, #1
 8010080:	2300      	movcs	r3, #0
 8010082:	b2db      	uxtb	r3, r3
 8010084:	b29a      	uxth	r2, r3
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	801a      	strh	r2, [r3, #0]
    return 1;
 801008a:	2301      	movs	r3, #1
 801008c:	e04e      	b.n	801012c <EvaluateCANInput+0x168>

  case OPER_BITWISE_AND:
    if (in->eMode == MODE_NUM)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	7b1b      	ldrb	r3, [r3, #12]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d107      	bne.n	80100a6 <EvaluateCANInput+0xe2>
      *nResult = (nSelected & in->nOnVal);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	895a      	ldrh	r2, [r3, #10]
 801009a:	8afb      	ldrh	r3, [r7, #22]
 801009c:	4013      	ands	r3, r2
 801009e:	b29a      	uxth	r2, r3
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	801a      	strh	r2, [r3, #0]
 80100a4:	e014      	b.n	80100d0 <EvaluateCANInput+0x10c>
    else
      CheckPushbutton(&in->ePbConfig, in->eMode, ((nSelected & in->nOnVal) > 0), nResult, NO_DEBOUNCE);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f103 0010 	add.w	r0, r3, #16
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	7b19      	ldrb	r1, [r3, #12]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	895a      	ldrh	r2, [r3, #10]
 80100b4:	8afb      	ldrh	r3, [r7, #22]
 80100b6:	4013      	ands	r3, r2
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	bf14      	ite	ne
 80100be:	2301      	movne	r3, #1
 80100c0:	2300      	moveq	r3, #0
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	b29a      	uxth	r2, r3
 80100c6:	2300      	movs	r3, #0
 80100c8:	9300      	str	r3, [sp, #0]
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	f004 ffa5 	bl	801501a <CheckPushbutton>
    return 1;
 80100d0:	2301      	movs	r3, #1
 80100d2:	e02b      	b.n	801012c <EvaluateCANInput+0x168>

  case OPER_BITWISE_NAND:
    if (in->eMode == MODE_NUM)
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	7b1b      	ldrb	r3, [r3, #12]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d10f      	bne.n	80100fc <EvaluateCANInput+0x138>
      *nResult = (nSelected & !in->nOnVal);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	895b      	ldrh	r3, [r3, #10]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	bf0c      	ite	eq
 80100e4:	2301      	moveq	r3, #1
 80100e6:	2300      	movne	r3, #0
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	b21a      	sxth	r2, r3
 80100ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80100f0:	4013      	ands	r3, r2
 80100f2:	b21b      	sxth	r3, r3
 80100f4:	b29a      	uxth	r2, r3
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	801a      	strh	r2, [r3, #0]
 80100fa:	e014      	b.n	8010126 <EvaluateCANInput+0x162>
    else
      CheckPushbutton(&in->ePbConfig, in->eMode, !((nSelected & in->nOnVal) > 0), nResult, NO_DEBOUNCE);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f103 0010 	add.w	r0, r3, #16
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	7b19      	ldrb	r1, [r3, #12]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	895a      	ldrh	r2, [r3, #10]
 801010a:	8afb      	ldrh	r3, [r7, #22]
 801010c:	4013      	ands	r3, r2
 801010e:	b29b      	uxth	r3, r3
 8010110:	2b00      	cmp	r3, #0
 8010112:	bf0c      	ite	eq
 8010114:	2301      	moveq	r3, #1
 8010116:	2300      	movne	r3, #0
 8010118:	b2db      	uxtb	r3, r3
 801011a:	b29a      	uxth	r2, r3
 801011c:	2300      	movs	r3, #0
 801011e:	9300      	str	r3, [sp, #0]
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	f004 ff7a 	bl	801501a <CheckPushbutton>
    return 1;
 8010126:	2301      	movs	r3, #1
 8010128:	e000      	b.n	801012c <EvaluateCANInput+0x168>
  }

  return 0;
 801012a:	2300      	movs	r3, #0

}
 801012c:	4618      	mov	r0, r3
 801012e:	3718      	adds	r7, #24
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <CANBoardCheckConnection>:
  rx->nHeartbeat = msg[7];
  rx->nLastHeartbeatTime = HAL_GetTick();
}

void CANBoardCheckConnection(volatile CANBoard_RX_t* rx)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  if( (rx->nHeartbeat == rx->nLastHeartbeat) &&
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010142:	b2da      	uxtb	r2, r3
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801014a:	b2db      	uxtb	r3, r3
 801014c:	429a      	cmp	r2, r3
 801014e:	d10c      	bne.n	801016a <CANBoardCheckConnection+0x36>
      ((HAL_GetTick() - rx->nLastHeartbeatTime) > (CANBOARD_TX_DELAY * 4)))
 8010150:	f7f2 fbcc 	bl	80028ec <HAL_GetTick>
 8010154:	4602      	mov	r2, r0
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801015a:	1ad3      	subs	r3, r2, r3
  if( (rx->nHeartbeat == rx->nLastHeartbeat) &&
 801015c:	2bc8      	cmp	r3, #200	; 0xc8
 801015e:	d904      	bls.n	801016a <CANBoardCheckConnection+0x36>
  {
    rx->nConnected = 0;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2200      	movs	r2, #0
 8010164:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010168:	e003      	b.n	8010172 <CANBoardCheckConnection+0x3e>
  }
  else
  {
    rx->nConnected = 1;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2201      	movs	r2, #1
 801016e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }
  rx->nLastHeartbeat = rx->nHeartbeat;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010178:	b2da      	uxtb	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8010180:	bf00      	nop
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8010190:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8010194:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8010198:	f003 0301 	and.w	r3, r3, #1
 801019c:	2b00      	cmp	r3, #0
 801019e:	d013      	beq.n	80101c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80101a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80101a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80101a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d00b      	beq.n	80101c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80101b0:	e000      	b.n	80101b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80101b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80101b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d0f9      	beq.n	80101b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80101be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	b2d2      	uxtb	r2, r2
 80101c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80101c8:	687b      	ldr	r3, [r7, #4]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	370c      	adds	r7, #12
 80101ce:	46bd      	mov	sp, r7
 80101d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d4:	4770      	bx	lr
	...

080101d8 <USBD_CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Init(void)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUSBD, USBD_TxBuffer, 0);
 80101dc:	2200      	movs	r2, #0
 80101de:	4905      	ldr	r1, [pc, #20]	; (80101f4 <USBD_CDC_Init+0x1c>)
 80101e0:	4805      	ldr	r0, [pc, #20]	; (80101f8 <USBD_CDC_Init+0x20>)
 80101e2:	f7fb ff42 	bl	800c06a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUSBD, USBD_RxBuffer);
 80101e6:	4905      	ldr	r1, [pc, #20]	; (80101fc <USBD_CDC_Init+0x24>)
 80101e8:	4803      	ldr	r0, [pc, #12]	; (80101f8 <USBD_CDC_Init+0x20>)
 80101ea:	f7fb ff58 	bl	800c09e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80101ee:	2300      	movs	r3, #0
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	200040e8 	.word	0x200040e8
 80101f8:	200048e8 	.word	0x200048e8
 80101fc:	200038e8 	.word	0x200038e8

08010200 <USBD_CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_DeInit(void)
{
 8010200:	b480      	push	{r7}
 8010202:	af00      	add	r7, sp, #0
  return (USBD_OK);
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <USBD_CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Control(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
 8010216:	4603      	mov	r3, r0
 8010218:	6039      	str	r1, [r7, #0]
 801021a:	71fb      	strb	r3, [r7, #7]
 801021c:	4613      	mov	r3, r2
 801021e:	80bb      	strh	r3, [r7, #4]
  switch(cmd)
 8010220:	79fb      	ldrb	r3, [r7, #7]
 8010222:	2b23      	cmp	r3, #35	; 0x23
 8010224:	d866      	bhi.n	80102f4 <USBD_CDC_Control+0xe4>
 8010226:	a201      	add	r2, pc, #4	; (adr r2, 801022c <USBD_CDC_Control+0x1c>)
 8010228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801022c:	080102f5 	.word	0x080102f5
 8010230:	080102f5 	.word	0x080102f5
 8010234:	080102f5 	.word	0x080102f5
 8010238:	080102f5 	.word	0x080102f5
 801023c:	080102f5 	.word	0x080102f5
 8010240:	080102f5 	.word	0x080102f5
 8010244:	080102f5 	.word	0x080102f5
 8010248:	080102f5 	.word	0x080102f5
 801024c:	080102f5 	.word	0x080102f5
 8010250:	080102f5 	.word	0x080102f5
 8010254:	080102f5 	.word	0x080102f5
 8010258:	080102f5 	.word	0x080102f5
 801025c:	080102f5 	.word	0x080102f5
 8010260:	080102f5 	.word	0x080102f5
 8010264:	080102f5 	.word	0x080102f5
 8010268:	080102f5 	.word	0x080102f5
 801026c:	080102f5 	.word	0x080102f5
 8010270:	080102f5 	.word	0x080102f5
 8010274:	080102f5 	.word	0x080102f5
 8010278:	080102f5 	.word	0x080102f5
 801027c:	080102f5 	.word	0x080102f5
 8010280:	080102f5 	.word	0x080102f5
 8010284:	080102f5 	.word	0x080102f5
 8010288:	080102f5 	.word	0x080102f5
 801028c:	080102f5 	.word	0x080102f5
 8010290:	080102f5 	.word	0x080102f5
 8010294:	080102f5 	.word	0x080102f5
 8010298:	080102f5 	.word	0x080102f5
 801029c:	080102f5 	.word	0x080102f5
 80102a0:	080102f5 	.word	0x080102f5
 80102a4:	080102f5 	.word	0x080102f5
 80102a8:	080102f5 	.word	0x080102f5
 80102ac:	080102f5 	.word	0x080102f5
 80102b0:	080102bd 	.word	0x080102bd
 80102b4:	080102f5 	.word	0x080102f5
 80102b8:	080102f5 	.word	0x080102f5
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(115200);
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	2200      	movs	r2, #0
 80102c0:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(115200 >> 8);
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	3301      	adds	r3, #1
 80102c6:	22c2      	movs	r2, #194	; 0xc2
 80102c8:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(115200 >> 16);
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	3302      	adds	r3, #2
 80102ce:	2201      	movs	r2, #1
 80102d0:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(115200 >> 24);
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	3303      	adds	r3, #3
 80102d6:	2200      	movs	r2, #0
 80102d8:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0; //Stop bits (1)
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	3304      	adds	r3, #4
 80102de:	2200      	movs	r2, #0
 80102e0:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0; //Parity (none)
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	3305      	adds	r3, #5
 80102e6:	2200      	movs	r2, #0
 80102e8:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8; //Number of bits (8)
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	3306      	adds	r3, #6
 80102ee:	2208      	movs	r2, #8
 80102f0:	701a      	strb	r2, [r3, #0]
    break;
 80102f2:	e000      	b.n	80102f6 <USBD_CDC_Control+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80102f4:	bf00      	nop
  }

  return (USBD_OK);
 80102f6:	2300      	movs	r3, #0
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	370c      	adds	r7, #12
 80102fc:	46bd      	mov	sp, r7
 80102fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010302:	4770      	bx	lr

08010304 <USBD_CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Receive(uint8_t* Buf, uint32_t *Len)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b090      	sub	sp, #64	; 0x40
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	6039      	str	r1, [r7, #0]
  MsgQueueRx_t stMsg;
  stMsg.eMsgSrc = USB_RX;
 801030e:	2301      	movs	r3, #1
 8010310:	733b      	strb	r3, [r7, #12]
  stMsg.nCRC = 0xFFFFFFFF;
 8010312:	f04f 33ff 	mov.w	r3, #4294967295
 8010316:	63bb      	str	r3, [r7, #56]	; 0x38
  stMsg.nRxLen = 0;
 8010318:	2300      	movs	r3, #0
 801031a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  for(uint8_t i=0; i<*Len; i++){
 801031e:	2300      	movs	r3, #0
 8010320:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010324:	e019      	b.n	801035a <USBD_CDC_Receive+0x56>
    if(i < 8){
 8010326:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801032a:	2b07      	cmp	r3, #7
 801032c:	d810      	bhi.n	8010350 <USBD_CDC_Receive+0x4c>
      stMsg.nRxData[i] = Buf[i];
 801032e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010332:	687a      	ldr	r2, [r7, #4]
 8010334:	441a      	add	r2, r3
 8010336:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801033a:	7812      	ldrb	r2, [r2, #0]
 801033c:	3340      	adds	r3, #64	; 0x40
 801033e:	443b      	add	r3, r7
 8010340:	f803 2c14 	strb.w	r2, [r3, #-20]
      stMsg.nRxLen++;
 8010344:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010348:	3301      	adds	r3, #1
 801034a:	b2db      	uxtb	r3, r3
 801034c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  for(uint8_t i=0; i<*Len; i++){
 8010350:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010354:	3301      	adds	r3, #1
 8010356:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801035a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	429a      	cmp	r2, r3
 8010364:	d3df      	bcc.n	8010326 <USBD_CDC_Receive+0x22>
    }
  }

  osMessageQueuePut(qMsgQueueRx, &stMsg, 0U, 0U);
 8010366:	4b0a      	ldr	r3, [pc, #40]	; (8010390 <USBD_CDC_Receive+0x8c>)
 8010368:	6818      	ldr	r0, [r3, #0]
 801036a:	f107 010c 	add.w	r1, r7, #12
 801036e:	2300      	movs	r3, #0
 8010370:	2200      	movs	r2, #0
 8010372:	f7fd f969 	bl	800d648 <osMessageQueuePut>

  USBD_CDC_SetRxBuffer(&hUSBD, &Buf[0]);
 8010376:	6879      	ldr	r1, [r7, #4]
 8010378:	4806      	ldr	r0, [pc, #24]	; (8010394 <USBD_CDC_Receive+0x90>)
 801037a:	f7fb fe90 	bl	800c09e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUSBD);
 801037e:	4805      	ldr	r0, [pc, #20]	; (8010394 <USBD_CDC_Receive+0x90>)
 8010380:	f7fb fed0 	bl	800c124 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010384:	2300      	movs	r3, #0
}
 8010386:	4618      	mov	r0, r3
 8010388:	3740      	adds	r7, #64	; 0x40
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	20003324 	.word	0x20003324
 8010394:	200048e8 	.word	0x200048e8

08010398 <USBD_CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t USBD_CDC_Transmit(uint8_t* Buf, uint16_t Len)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	460b      	mov	r3, r1
 80103a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80103a4:	2300      	movs	r3, #0
 80103a6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUSBD.pClassData;
 80103a8:	4b0d      	ldr	r3, [pc, #52]	; (80103e0 <USBD_CDC_Transmit+0x48>)
 80103aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d001      	beq.n	80103be <USBD_CDC_Transmit+0x26>
    return USBD_BUSY;
 80103ba:	2301      	movs	r3, #1
 80103bc:	e00b      	b.n	80103d6 <USBD_CDC_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUSBD, Buf, Len);
 80103be:	887b      	ldrh	r3, [r7, #2]
 80103c0:	461a      	mov	r2, r3
 80103c2:	6879      	ldr	r1, [r7, #4]
 80103c4:	4806      	ldr	r0, [pc, #24]	; (80103e0 <USBD_CDC_Transmit+0x48>)
 80103c6:	f7fb fe50 	bl	800c06a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUSBD);
 80103ca:	4805      	ldr	r0, [pc, #20]	; (80103e0 <USBD_CDC_Transmit+0x48>)
 80103cc:	f7fb fe7b 	bl	800c0c6 <USBD_CDC_TransmitPacket>
 80103d0:	4603      	mov	r3, r0
 80103d2:	73fb      	strb	r3, [r7, #15]
  return result;
 80103d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3710      	adds	r7, #16
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	200048e8 	.word	0x200048e8

080103e4 <HAL_CAN_RxFifo0MsgPendingCallback>:

//========================================================================
// CAN Receive Callback
//========================================================================
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80103e4:	b5b0      	push	{r4, r5, r7, lr}
 80103e6:	b08e      	sub	sp, #56	; 0x38
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]

  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &stCanRxHeader, nCanRxData) != HAL_OK)
 80103ec:	4b19      	ldr	r3, [pc, #100]	; (8010454 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80103ee:	4a1a      	ldr	r2, [pc, #104]	; (8010458 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80103f0:	2100      	movs	r1, #0
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f7f3 fd92 	bl	8003f1c <HAL_CAN_GetRxMessage>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d001      	beq.n	8010402 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 80103fe:	f7f1 ffe1 	bl	80023c4 <Error_Handler>
  }

  //Store latest receive time
  //Use to determine connection status
  nLastCanUpdate = HAL_GetTick();
 8010402:	f7f2 fa73 	bl	80028ec <HAL_GetTick>
 8010406:	4603      	mov	r3, r0
 8010408:	4a14      	ldr	r2, [pc, #80]	; (801045c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 801040a:	6013      	str	r3, [r2, #0]

  MsgQueueRx_t stMsg;
  stMsg.eMsgSrc = CAN_RX;
 801040c:	2300      	movs	r3, #0
 801040e:	723b      	strb	r3, [r7, #8]
  stMsg.nRxLen = (uint8_t)stCanRxHeader.DLC;
 8010410:	4b11      	ldr	r3, [pc, #68]	; (8010458 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8010412:	691b      	ldr	r3, [r3, #16]
 8010414:	b2db      	uxtb	r3, r3
 8010416:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  memcpy(&stMsg.stCanRxHeader, &stCanRxHeader, sizeof(stCanRxHeader));
 801041a:	4b0f      	ldr	r3, [pc, #60]	; (8010458 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 801041c:	f107 040c 	add.w	r4, r7, #12
 8010420:	461d      	mov	r5, r3
 8010422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010426:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801042a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  memcpy(&stMsg.nRxData, &nCanRxData, sizeof(nCanRxData));
 801042e:	4a09      	ldr	r2, [pc, #36]	; (8010454 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8010430:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010434:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010438:	e883 0003 	stmia.w	r3, {r0, r1}
  osMessageQueuePut(qMsgQueueRx, &stMsg, 0U, 0U);
 801043c:	4b08      	ldr	r3, [pc, #32]	; (8010460 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 801043e:	6818      	ldr	r0, [r3, #0]
 8010440:	f107 0108 	add.w	r1, r7, #8
 8010444:	2300      	movs	r3, #0
 8010446:	2200      	movs	r2, #0
 8010448:	f7fd f8fe 	bl	800d648 <osMessageQueuePut>

}
 801044c:	bf00      	nop
 801044e:	3738      	adds	r7, #56	; 0x38
 8010450:	46bd      	mov	sp, r7
 8010452:	bdb0      	pop	{r4, r5, r7, pc}
 8010454:	20003670 	.word	0x20003670
 8010458:	2000364c 	.word	0x2000364c
 801045c:	2000367c 	.word	0x2000367c
 8010460:	20003324 	.word	0x20003324
 8010464:	00000000 	.word	0x00000000

08010468 <PdmMainTask>:
//========================================================================
//========================================================================
// MAIN
//========================================================================
//========================================================================
void PdmMainTask(osThreadId_t* thisThreadId, ADC_HandleTypeDef* hadc1, ADC_HandleTypeDef* hadc4, RTC_HandleTypeDef* hrtc, CRC_HandleTypeDef* hcrc){
 8010468:	b5b0      	push	{r4, r5, r7, lr}
 801046a:	b086      	sub	sp, #24
 801046c:	af00      	add	r7, sp, #0
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	60b9      	str	r1, [r7, #8]
 8010472:	607a      	str	r2, [r7, #4]
 8010474:	603b      	str	r3, [r7, #0]

  HAL_ADC_Start_DMA(hadc1, (uint32_t*) nAdc1Data, ADC_1_COUNT);
 8010476:	2201      	movs	r2, #1
 8010478:	4997      	ldr	r1, [pc, #604]	; (80106d8 <PdmMainTask+0x270>)
 801047a:	68b8      	ldr	r0, [r7, #8]
 801047c:	f7f2 fc40 	bl	8002d00 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(hadc4, (uint32_t*) nAdc4Data, ADC_4_COUNT);
 8010480:	2201      	movs	r2, #1
 8010482:	4996      	ldr	r1, [pc, #600]	; (80106dc <PdmMainTask+0x274>)
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f7f2 fc3b 	bl	8002d00 <HAL_ADC_Start_DMA>

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUSBD, &FS_Desc, DEVICE_FS) != USBD_OK)
 801048a:	2200      	movs	r2, #0
 801048c:	4994      	ldr	r1, [pc, #592]	; (80106e0 <PdmMainTask+0x278>)
 801048e:	4895      	ldr	r0, [pc, #596]	; (80106e4 <PdmMainTask+0x27c>)
 8010490:	f7fb fe72 	bl	800c178 <USBD_Init>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d001      	beq.n	801049e <PdmMainTask+0x36>
  {
    Error_Handler();
 801049a:	f7f1 ff93 	bl	80023c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUSBD, &USBD_CDC) != USBD_OK)
 801049e:	4992      	ldr	r1, [pc, #584]	; (80106e8 <PdmMainTask+0x280>)
 80104a0:	4890      	ldr	r0, [pc, #576]	; (80106e4 <PdmMainTask+0x27c>)
 80104a2:	f7fb fe94 	bl	800c1ce <USBD_RegisterClass>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d001      	beq.n	80104b0 <PdmMainTask+0x48>
  {
    Error_Handler();
 80104ac:	f7f1 ff8a 	bl	80023c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUSBD, &USBD_Interface_PDM) != USBD_OK)
 80104b0:	498e      	ldr	r1, [pc, #568]	; (80106ec <PdmMainTask+0x284>)
 80104b2:	488c      	ldr	r0, [pc, #560]	; (80106e4 <PdmMainTask+0x27c>)
 80104b4:	f7fb fdc2 	bl	800c03c <USBD_CDC_RegisterInterface>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d001      	beq.n	80104c2 <PdmMainTask+0x5a>
  {
    Error_Handler();
 80104be:	f7f1 ff81 	bl	80023c4 <Error_Handler>
  }
  if (USBD_Start(&hUSBD) != USBD_OK)
 80104c2:	4888      	ldr	r0, [pc, #544]	; (80106e4 <PdmMainTask+0x27c>)
 80104c4:	f7fb fe9d 	bl	800c202 <USBD_Start>
 80104c8:	4603      	mov	r3, r0
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d001      	beq.n	80104d2 <PdmMainTask+0x6a>
  {
    Error_Handler();
 80104ce:	f7f1 ff79 	bl	80023c4 <Error_Handler>

    //=====================================================================================================
    // Standby
    //=====================================================================================================
    /* Check if the system was resumed from Standby mode */
    if ((__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) ||
 80104d2:	4b87      	ldr	r3, [pc, #540]	; (80106f0 <PdmMainTask+0x288>)
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	f003 0302 	and.w	r3, r3, #2
 80104da:	2b02      	cmp	r3, #2
 80104dc:	d005      	beq.n	80104ea <PdmMainTask+0x82>
        (__HAL_PWR_GET_FLAG(PWR_FLAG_WU) != RESET))
 80104de:	4b84      	ldr	r3, [pc, #528]	; (80106f0 <PdmMainTask+0x288>)
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	f003 0301 	and.w	r3, r3, #1
    if ((__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) ||
 80104e6:	2b01      	cmp	r3, #1
 80104e8:	d112      	bne.n	8010510 <PdmMainTask+0xa8>
    {
      /* Clear Standby flag */
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80104ea:	4b81      	ldr	r3, [pc, #516]	; (80106f0 <PdmMainTask+0x288>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	4a80      	ldr	r2, [pc, #512]	; (80106f0 <PdmMainTask+0x288>)
 80104f0:	f043 0308 	orr.w	r3, r3, #8
 80104f4:	6013      	str	r3, [r2, #0]
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80104f6:	4b7e      	ldr	r3, [pc, #504]	; (80106f0 <PdmMainTask+0x288>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	4a7d      	ldr	r2, [pc, #500]	; (80106f0 <PdmMainTask+0x288>)
 80104fc:	f043 0304 	orr.w	r3, r3, #4
 8010500:	6013      	str	r3, [r2, #0]

      HAL_GPIO_WritePin(EXTRA3_GPIO_Port, EXTRA3_Pin, GPIO_PIN_RESET);
 8010502:	2200      	movs	r2, #0
 8010504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801050c:	f7f4 fd68 	bl	8004fe0 <HAL_GPIO_WritePin>
    }


    //Check standby pin
    //If no voltage - enter standby
    if(!(STANDBY_GPIO_Port->IDR & STANDBY_Pin)){
 8010510:	4b78      	ldr	r3, [pc, #480]	; (80106f4 <PdmMainTask+0x28c>)
 8010512:	691b      	ldr	r3, [r3, #16]
 8010514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010518:	2b00      	cmp	r3, #0
 801051a:	d117      	bne.n	801054c <PdmMainTask+0xe4>

      HAL_GPIO_WritePin(EXTRA3_GPIO_Port, EXTRA3_Pin, GPIO_PIN_SET);
 801051c:	2201      	movs	r2, #1
 801051e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010526:	f7f4 fd5b 	bl	8004fe0 <HAL_GPIO_WritePin>

      HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2); //PC13
 801052a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801052e:	f7f6 ff97 	bl	8007460 <HAL_PWR_DisableWakeUpPin>

      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8010532:	4b6f      	ldr	r3, [pc, #444]	; (80106f0 <PdmMainTask+0x288>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	4a6e      	ldr	r2, [pc, #440]	; (80106f0 <PdmMainTask+0x288>)
 8010538:	f043 0304 	orr.w	r3, r3, #4
 801053c:	6013      	str	r3, [r2, #0]

      HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2); //PC13
 801053e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010542:	f7f6 ff7b 	bl	800743c <HAL_PWR_EnableWakeUpPin>

      HAL_PWR_EnterSTANDBYMode();
 8010546:	f7f6 ff9f 	bl	8007488 <HAL_PWR_EnterSTANDBYMode>
 801054a:	e003      	b.n	8010554 <PdmMainTask+0xec>
    }
    else
    {
      HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2); //PC13
 801054c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010550:	f7f6 ff86 	bl	8007460 <HAL_PWR_DisableWakeUpPin>
    //=====================================================================================================
    // ADC channels
    // ADC1 = Vbat and device temperature
    // ADC4 = Battery sense
    //=====================================================================================================
    nBattSense = (uint16_t)(((float)nAdc4Data[0]) * 0.0519 - 11.3);
 8010554:	4b61      	ldr	r3, [pc, #388]	; (80106dc <PdmMainTask+0x274>)
 8010556:	881b      	ldrh	r3, [r3, #0]
 8010558:	b29b      	uxth	r3, r3
 801055a:	ee07 3a90 	vmov	s15, r3
 801055e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010562:	ee17 0a90 	vmov	r0, s15
 8010566:	f7ef ff97 	bl	8000498 <__aeabi_f2d>
 801056a:	a357      	add	r3, pc, #348	; (adr r3, 80106c8 <PdmMainTask+0x260>)
 801056c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010570:	f7ef ffea 	bl	8000548 <__aeabi_dmul>
 8010574:	4602      	mov	r2, r0
 8010576:	460b      	mov	r3, r1
 8010578:	4610      	mov	r0, r2
 801057a:	4619      	mov	r1, r3
 801057c:	a354      	add	r3, pc, #336	; (adr r3, 80106d0 <PdmMainTask+0x268>)
 801057e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010582:	f7ef fe29 	bl	80001d8 <__aeabi_dsub>
 8010586:	4602      	mov	r2, r0
 8010588:	460b      	mov	r3, r1
 801058a:	4610      	mov	r0, r2
 801058c:	4619      	mov	r1, r3
 801058e:	f7f0 f9ed 	bl	800096c <__aeabi_d2uiz>
 8010592:	4603      	mov	r3, r0
 8010594:	b29a      	uxth	r2, r3
 8010596:	4b58      	ldr	r3, [pc, #352]	; (80106f8 <PdmMainTask+0x290>)
 8010598:	801a      	strh	r2, [r3, #0]
    nStmTemp = (uint16_t)(80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 801059a:	4b58      	ldr	r3, [pc, #352]	; (80106fc <PdmMainTask+0x294>)
 801059c:	881b      	ldrh	r3, [r3, #0]
 801059e:	ee07 3a90 	vmov	s15, r3
 80105a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80105a6:	4b56      	ldr	r3, [pc, #344]	; (8010700 <PdmMainTask+0x298>)
 80105a8:	881b      	ldrh	r3, [r3, #0]
 80105aa:	ee07 3a90 	vmov	s15, r3
 80105ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105b6:	ee17 0a90 	vmov	r0, s15
 80105ba:	f7ef ff6d 	bl	8000498 <__aeabi_f2d>
 80105be:	4602      	mov	r2, r0
 80105c0:	460b      	mov	r3, r1
 80105c2:	f04f 0000 	mov.w	r0, #0
 80105c6:	494f      	ldr	r1, [pc, #316]	; (8010704 <PdmMainTask+0x29c>)
 80105c8:	f7f0 f8e8 	bl	800079c <__aeabi_ddiv>
 80105cc:	4602      	mov	r2, r0
 80105ce:	460b      	mov	r3, r1
 80105d0:	4614      	mov	r4, r2
 80105d2:	461d      	mov	r5, r3
                          (((float)nAdc1Data[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0);
 80105d4:	4b40      	ldr	r3, [pc, #256]	; (80106d8 <PdmMainTask+0x270>)
 80105d6:	881b      	ldrh	r3, [r3, #0]
 80105d8:	b29b      	uxth	r3, r3
 80105da:	ee07 3a90 	vmov	s15, r3
 80105de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80105e2:	4b47      	ldr	r3, [pc, #284]	; (8010700 <PdmMainTask+0x298>)
 80105e4:	881b      	ldrh	r3, [r3, #0]
 80105e6:	ee07 3a90 	vmov	s15, r3
 80105ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105f2:	ee17 0a90 	vmov	r0, s15
 80105f6:	f7ef ff4f 	bl	8000498 <__aeabi_f2d>
 80105fa:	4602      	mov	r2, r0
 80105fc:	460b      	mov	r3, r1
    nStmTemp = (uint16_t)(80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 80105fe:	4620      	mov	r0, r4
 8010600:	4629      	mov	r1, r5
 8010602:	f7ef ffa1 	bl	8000548 <__aeabi_dmul>
 8010606:	4602      	mov	r2, r0
 8010608:	460b      	mov	r3, r1
 801060a:	4610      	mov	r0, r2
 801060c:	4619      	mov	r1, r3
                          (((float)nAdc1Data[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0);
 801060e:	f04f 0200 	mov.w	r2, #0
 8010612:	4b3d      	ldr	r3, [pc, #244]	; (8010708 <PdmMainTask+0x2a0>)
 8010614:	f7ef fde2 	bl	80001dc <__adddf3>
 8010618:	4602      	mov	r2, r0
 801061a:	460b      	mov	r3, r1
    nStmTemp = (uint16_t)(80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 801061c:	4610      	mov	r0, r2
 801061e:	4619      	mov	r1, r3
 8010620:	f7f0 f9a4 	bl	800096c <__aeabi_d2uiz>
 8010624:	4603      	mov	r3, r0
 8010626:	b29a      	uxth	r2, r3
 8010628:	4b38      	ldr	r3, [pc, #224]	; (801070c <PdmMainTask+0x2a4>)
 801062a:	801a      	strh	r2, [r3, #0]

    //=====================================================================================================
    // CANBoard check connection
    //=====================================================================================================
    CANBoardCheckConnection(&stCANBoard_RX);
 801062c:	4838      	ldr	r0, [pc, #224]	; (8010710 <PdmMainTask+0x2a8>)
 801062e:	f7ff fd81 	bl	8010134 <CANBoardCheckConnection>

    //=====================================================================================================
    // USB Connection
    //=====================================================================================================
    if( (USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && !bUsbConnected){
 8010632:	4b38      	ldr	r3, [pc, #224]	; (8010714 <PdmMainTask+0x2ac>)
 8010634:	691b      	ldr	r3, [r3, #16]
 8010636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801063a:	2b00      	cmp	r3, #0
 801063c:	d00f      	beq.n	801065e <PdmMainTask+0x1f6>
 801063e:	4b36      	ldr	r3, [pc, #216]	; (8010718 <PdmMainTask+0x2b0>)
 8010640:	781b      	ldrb	r3, [r3, #0]
 8010642:	f083 0301 	eor.w	r3, r3, #1
 8010646:	b2db      	uxtb	r3, r3
 8010648:	2b00      	cmp	r3, #0
 801064a:	d008      	beq.n	801065e <PdmMainTask+0x1f6>
      HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_SET);
 801064c:	2201      	movs	r2, #1
 801064e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010652:	4830      	ldr	r0, [pc, #192]	; (8010714 <PdmMainTask+0x2ac>)
 8010654:	f7f4 fcc4 	bl	8004fe0 <HAL_GPIO_WritePin>
      bUsbConnected = true;
 8010658:	4b2f      	ldr	r3, [pc, #188]	; (8010718 <PdmMainTask+0x2b0>)
 801065a:	2201      	movs	r2, #1
 801065c:	701a      	strb	r2, [r3, #0]
    }

    if( !(USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && bUsbConnected){
 801065e:	4b2d      	ldr	r3, [pc, #180]	; (8010714 <PdmMainTask+0x2ac>)
 8010660:	691b      	ldr	r3, [r3, #16]
 8010662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010666:	2b00      	cmp	r3, #0
 8010668:	d10c      	bne.n	8010684 <PdmMainTask+0x21c>
 801066a:	4b2b      	ldr	r3, [pc, #172]	; (8010718 <PdmMainTask+0x2b0>)
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d008      	beq.n	8010684 <PdmMainTask+0x21c>
      HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_RESET);
 8010672:	2200      	movs	r2, #0
 8010674:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010678:	4826      	ldr	r0, [pc, #152]	; (8010714 <PdmMainTask+0x2ac>)
 801067a:	f7f4 fcb1 	bl	8004fe0 <HAL_GPIO_WritePin>
      bUsbConnected = false;
 801067e:	4b26      	ldr	r3, [pc, #152]	; (8010718 <PdmMainTask+0x2b0>)
 8010680:	2200      	movs	r2, #0
 8010682:	701a      	strb	r2, [r3, #0]
    }

    nILTotal = 0;
 8010684:	4b25      	ldr	r3, [pc, #148]	; (801071c <PdmMainTask+0x2b4>)
 8010686:	2200      	movs	r2, #0
 8010688:	801a      	strh	r2, [r3, #0]
    for(int i=0;i<PDM_NUM_OUTPUTS;i++)
 801068a:	2300      	movs	r3, #0
 801068c:	617b      	str	r3, [r7, #20]
 801068e:	e013      	b.n	80106b8 <PdmMainTask+0x250>
      nILTotal += pf[i].nIL;
 8010690:	4923      	ldr	r1, [pc, #140]	; (8010720 <PdmMainTask+0x2b8>)
 8010692:	697a      	ldr	r2, [r7, #20]
 8010694:	4613      	mov	r3, r2
 8010696:	00db      	lsls	r3, r3, #3
 8010698:	1a9b      	subs	r3, r3, r2
 801069a:	00db      	lsls	r3, r3, #3
 801069c:	440b      	add	r3, r1
 801069e:	3320      	adds	r3, #32
 80106a0:	881b      	ldrh	r3, [r3, #0]
 80106a2:	b29a      	uxth	r2, r3
 80106a4:	4b1d      	ldr	r3, [pc, #116]	; (801071c <PdmMainTask+0x2b4>)
 80106a6:	881b      	ldrh	r3, [r3, #0]
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	4413      	add	r3, r2
 80106ac:	b29a      	uxth	r2, r3
 80106ae:	4b1b      	ldr	r3, [pc, #108]	; (801071c <PdmMainTask+0x2b4>)
 80106b0:	801a      	strh	r2, [r3, #0]
    for(int i=0;i<PDM_NUM_OUTPUTS;i++)
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	3301      	adds	r3, #1
 80106b6:	617b      	str	r3, [r7, #20]
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	2b0b      	cmp	r3, #11
 80106bc:	dde8      	ble.n	8010690 <PdmMainTask+0x228>

#ifdef MEAS_HEAP_USE
    __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

    osDelay(MAIN_TASK_DELAY);
 80106be:	2064      	movs	r0, #100	; 0x64
 80106c0:	f7fc ff0e 	bl	800d4e0 <osDelay>
    if ((__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) ||
 80106c4:	e705      	b.n	80104d2 <PdmMainTask+0x6a>
 80106c6:	bf00      	nop
 80106c8:	05532618 	.word	0x05532618
 80106cc:	3faa92a3 	.word	0x3faa92a3
 80106d0:	9999999a 	.word	0x9999999a
 80106d4:	40269999 	.word	0x40269999
 80106d8:	2000360c 	.word	0x2000360c
 80106dc:	20003610 	.word	0x20003610
 80106e0:	20000130 	.word	0x20000130
 80106e4:	200048e8 	.word	0x200048e8
 80106e8:	20000018 	.word	0x20000018
 80106ec:	20000120 	.word	0x20000120
 80106f0:	40007000 	.word	0x40007000
 80106f4:	48000800 	.word	0x48000800
 80106f8:	20003612 	.word	0x20003612
 80106fc:	1ffff7c2 	.word	0x1ffff7c2
 8010700:	1ffff7b8 	.word	0x1ffff7b8
 8010704:	40540000 	.word	0x40540000
 8010708:	403e0000 	.word	0x403e0000
 801070c:	20003614 	.word	0x20003614
 8010710:	20003680 	.word	0x20003680
 8010714:	48000400 	.word	0x48000400
 8010718:	20003608 	.word	0x20003608
 801071c:	200035d4 	.word	0x200035d4
 8010720:	20003334 	.word	0x20003334

08010724 <InputLogic>:
    //Debug GPIO
    //EXTRA3_GPIO_Port->ODR ^= EXTRA3_Pin;
  }
}

void InputLogic(){
 8010724:	b580      	push	{r7, lr}
 8010726:	b086      	sub	sp, #24
 8010728:	af00      	add	r7, sp, #0
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 801072a:	2300      	movs	r3, #0
 801072c:	617b      	str	r3, [r7, #20]
 801072e:	e012      	b.n	8010756 <InputLogic+0x32>
    EvaluateInput(&stPdmConfig.stInput[i], &nPdmInputs[i]);
 8010730:	697a      	ldr	r2, [r7, #20]
 8010732:	4613      	mov	r3, r2
 8010734:	00db      	lsls	r3, r3, #3
 8010736:	1a9b      	subs	r3, r3, r2
 8010738:	009b      	lsls	r3, r3, #2
 801073a:	3308      	adds	r3, #8
 801073c:	4a4a      	ldr	r2, [pc, #296]	; (8010868 <InputLogic+0x144>)
 801073e:	441a      	add	r2, r3
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	005b      	lsls	r3, r3, #1
 8010744:	4949      	ldr	r1, [pc, #292]	; (801086c <InputLogic+0x148>)
 8010746:	440b      	add	r3, r1
 8010748:	4619      	mov	r1, r3
 801074a:	4610      	mov	r0, r2
 801074c:	f004 fc3f 	bl	8014fce <EvaluateInput>
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	3301      	adds	r3, #1
 8010754:	617b      	str	r3, [r7, #20]
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	2b07      	cmp	r3, #7
 801075a:	dde9      	ble.n	8010730 <InputLogic+0xc>

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 801075c:	2300      	movs	r3, #0
 801075e:	613b      	str	r3, [r7, #16]
 8010760:	e012      	b.n	8010788 <InputLogic+0x64>
    EvaluateVirtInput(&stPdmConfig.stVirtualInput[i], &nVirtInputs[i]);
 8010762:	693a      	ldr	r2, [r7, #16]
 8010764:	4613      	mov	r3, r2
 8010766:	009b      	lsls	r3, r3, #2
 8010768:	4413      	add	r3, r2
 801076a:	00db      	lsls	r3, r3, #3
 801076c:	33e8      	adds	r3, #232	; 0xe8
 801076e:	4a3e      	ldr	r2, [pc, #248]	; (8010868 <InputLogic+0x144>)
 8010770:	441a      	add	r2, r3
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	005b      	lsls	r3, r3, #1
 8010776:	493e      	ldr	r1, [pc, #248]	; (8010870 <InputLogic+0x14c>)
 8010778:	440b      	add	r3, r1
 801077a:	4619      	mov	r1, r3
 801077c:	4610      	mov	r0, r2
 801077e:	f004 fce7 	bl	8015150 <EvaluateVirtInput>
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	3301      	adds	r3, #1
 8010786:	613b      	str	r3, [r7, #16]
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	2b13      	cmp	r3, #19
 801078c:	dde9      	ble.n	8010762 <InputLogic+0x3e>

  //Map profet state to integer for use as virtual input pointer
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 801078e:	2300      	movs	r3, #0
 8010790:	60fb      	str	r3, [r7, #12]
 8010792:	e020      	b.n	80107d6 <InputLogic+0xb2>
    nOutputs[i] = pf[i].eState == ON;
 8010794:	4937      	ldr	r1, [pc, #220]	; (8010874 <InputLogic+0x150>)
 8010796:	68fa      	ldr	r2, [r7, #12]
 8010798:	4613      	mov	r3, r2
 801079a:	00db      	lsls	r3, r3, #3
 801079c:	1a9b      	subs	r3, r3, r2
 801079e:	00db      	lsls	r3, r3, #3
 80107a0:	440b      	add	r3, r1
 80107a2:	3301      	adds	r3, #1
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	bf0c      	ite	eq
 80107ac:	2301      	moveq	r3, #1
 80107ae:	2300      	movne	r3, #0
 80107b0:	b2db      	uxtb	r3, r3
 80107b2:	b299      	uxth	r1, r3
 80107b4:	4a30      	ldr	r2, [pc, #192]	; (8010878 <InputLogic+0x154>)
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    EvaluateStarter(&stPdmConfig.stStarter, i, &nStarterDisable[i]);
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	b2d9      	uxtb	r1, r3
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	005b      	lsls	r3, r3, #1
 80107c4:	4a2d      	ldr	r2, [pc, #180]	; (801087c <InputLogic+0x158>)
 80107c6:	4413      	add	r3, r2
 80107c8:	461a      	mov	r2, r3
 80107ca:	482d      	ldr	r0, [pc, #180]	; (8010880 <InputLogic+0x15c>)
 80107cc:	f004 fc9a 	bl	8015104 <EvaluateStarter>
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	3301      	adds	r3, #1
 80107d4:	60fb      	str	r3, [r7, #12]
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	2b0b      	cmp	r3, #11
 80107da:	dddb      	ble.n	8010794 <InputLogic+0x70>
  }

  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 80107dc:	2300      	movs	r3, #0
 80107de:	60bb      	str	r3, [r7, #8]
 80107e0:	e023      	b.n	801082a <InputLogic+0x106>
      if( (stPdmConfig.stFlasher[0].nOutput != i) &&
 80107e2:	4b21      	ldr	r3, [pc, #132]	; (8010868 <InputLogic+0x144>)
 80107e4:	f893 3525 	ldrb.w	r3, [r3, #1317]	; 0x525
 80107e8:	461a      	mov	r2, r3
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d019      	beq.n	8010824 <InputLogic+0x100>
          (stPdmConfig.stFlasher[1].nOutput != i) &&
 80107f0:	4b1d      	ldr	r3, [pc, #116]	; (8010868 <InputLogic+0x144>)
 80107f2:	f893 353d 	ldrb.w	r3, [r3, #1341]	; 0x53d
 80107f6:	461a      	mov	r2, r3
      if( (stPdmConfig.stFlasher[0].nOutput != i) &&
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d012      	beq.n	8010824 <InputLogic+0x100>
          (stPdmConfig.stFlasher[2].nOutput != i) &&
 80107fe:	4b1a      	ldr	r3, [pc, #104]	; (8010868 <InputLogic+0x144>)
 8010800:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 8010804:	461a      	mov	r2, r3
          (stPdmConfig.stFlasher[1].nOutput != i) &&
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	4293      	cmp	r3, r2
 801080a:	d00b      	beq.n	8010824 <InputLogic+0x100>
          (stPdmConfig.stFlasher[3].nOutput != i))
 801080c:	4b16      	ldr	r3, [pc, #88]	; (8010868 <InputLogic+0x144>)
 801080e:	f893 356d 	ldrb.w	r3, [r3, #1389]	; 0x56d
 8010812:	461a      	mov	r2, r3
          (stPdmConfig.stFlasher[2].nOutput != i) &&
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	4293      	cmp	r3, r2
 8010818:	d004      	beq.n	8010824 <InputLogic+0x100>
        nOutputFlasher[i] = 1;
 801081a:	4a1a      	ldr	r2, [pc, #104]	; (8010884 <InputLogic+0x160>)
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	2101      	movs	r1, #1
 8010820:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	3301      	adds	r3, #1
 8010828:	60bb      	str	r3, [r7, #8]
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	2b0b      	cmp	r3, #11
 801082e:	ddd8      	ble.n	80107e2 <InputLogic+0xbe>
  }
  for(int i=0; i<PDM_NUM_FLASHERS; i++){
 8010830:	2300      	movs	r3, #0
 8010832:	607b      	str	r3, [r7, #4]
 8010834:	e00f      	b.n	8010856 <InputLogic+0x132>
    EvaluateFlasher(&stPdmConfig.stFlasher[i], nOutputFlasher);
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	4613      	mov	r3, r2
 801083a:	005b      	lsls	r3, r3, #1
 801083c:	4413      	add	r3, r2
 801083e:	00db      	lsls	r3, r3, #3
 8010840:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8010844:	4a08      	ldr	r2, [pc, #32]	; (8010868 <InputLogic+0x144>)
 8010846:	4413      	add	r3, r2
 8010848:	490e      	ldr	r1, [pc, #56]	; (8010884 <InputLogic+0x160>)
 801084a:	4618      	mov	r0, r3
 801084c:	f001 fe4e 	bl	80124ec <EvaluateFlasher>
  for(int i=0; i<PDM_NUM_FLASHERS; i++){
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	3301      	adds	r3, #1
 8010854:	607b      	str	r3, [r7, #4]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2b03      	cmp	r3, #3
 801085a:	ddec      	ble.n	8010836 <InputLogic+0x112>
  }
}
 801085c:	bf00      	nop
 801085e:	bf00      	nop
 8010860:	3718      	adds	r7, #24
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	20002a48 	.word	0x20002a48
 801086c:	20003828 	.word	0x20003828
 8010870:	20003874 	.word	0x20003874
 8010874:	20003334 	.word	0x20003334
 8010878:	2000389c 	.word	0x2000389c
 801087c:	200038b4 	.word	0x200038b4
 8010880:	20002fc0 	.word	0x20002fc0
 8010884:	200038cc 	.word	0x200038cc

08010888 <OutputLogic>:

void OutputLogic(){
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
  //Copy output logic to profet requested state
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 801088e:	2300      	movs	r3, #0
 8010890:	607b      	str	r3, [r7, #4]
 8010892:	e03f      	b.n	8010914 <OutputLogic+0x8c>
  {
    if(eDevMode == DEVICE_AUTO){
 8010894:	4b24      	ldr	r3, [pc, #144]	; (8010928 <OutputLogic+0xa0>)
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d126      	bne.n	80108ea <OutputLogic+0x62>
      pf[i].eReqState = (ProfetStateTypeDef)(*stPdmConfig.stOutput[i].pInput && nStarterDisable[i] && nOutputFlasher[i]);
 801089c:	4923      	ldr	r1, [pc, #140]	; (801092c <OutputLogic+0xa4>)
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	4613      	mov	r3, r2
 80108a2:	009b      	lsls	r3, r3, #2
 80108a4:	4413      	add	r3, r2
 80108a6:	009b      	lsls	r3, r3, #2
 80108a8:	440b      	add	r3, r1
 80108aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	881b      	ldrh	r3, [r3, #0]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d00d      	beq.n	80108d2 <OutputLogic+0x4a>
 80108b6:	4a1e      	ldr	r2, [pc, #120]	; (8010930 <OutputLogic+0xa8>)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d007      	beq.n	80108d2 <OutputLogic+0x4a>
 80108c2:	4a1c      	ldr	r2, [pc, #112]	; (8010934 <OutputLogic+0xac>)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d001      	beq.n	80108d2 <OutputLogic+0x4a>
 80108ce:	2301      	movs	r3, #1
 80108d0:	e000      	b.n	80108d4 <OutputLogic+0x4c>
 80108d2:	2300      	movs	r3, #0
 80108d4:	b2d8      	uxtb	r0, r3
 80108d6:	4918      	ldr	r1, [pc, #96]	; (8010938 <OutputLogic+0xb0>)
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	4613      	mov	r3, r2
 80108dc:	00db      	lsls	r3, r3, #3
 80108de:	1a9b      	subs	r3, r3, r2
 80108e0:	00db      	lsls	r3, r3, #3
 80108e2:	440b      	add	r3, r1
 80108e4:	3302      	adds	r3, #2
 80108e6:	4602      	mov	r2, r0
 80108e8:	701a      	strb	r2, [r3, #0]
    }
    if(eDevMode == DEVICE_MANUAL){
 80108ea:	4b0f      	ldr	r3, [pc, #60]	; (8010928 <OutputLogic+0xa0>)
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	2b01      	cmp	r3, #1
 80108f0:	d10d      	bne.n	801090e <OutputLogic+0x86>
      pf[i].eReqState = (ProfetStateTypeDef)nManualOutputs[i];
 80108f2:	4a12      	ldr	r2, [pc, #72]	; (801093c <OutputLogic+0xb4>)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	4413      	add	r3, r2
 80108f8:	7818      	ldrb	r0, [r3, #0]
 80108fa:	490f      	ldr	r1, [pc, #60]	; (8010938 <OutputLogic+0xb0>)
 80108fc:	687a      	ldr	r2, [r7, #4]
 80108fe:	4613      	mov	r3, r2
 8010900:	00db      	lsls	r3, r3, #3
 8010902:	1a9b      	subs	r3, r3, r2
 8010904:	00db      	lsls	r3, r3, #3
 8010906:	440b      	add	r3, r1
 8010908:	3302      	adds	r3, #2
 801090a:	4602      	mov	r2, r0
 801090c:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	3301      	adds	r3, #1
 8010912:	607b      	str	r3, [r7, #4]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2b0b      	cmp	r3, #11
 8010918:	ddbc      	ble.n	8010894 <OutputLogic+0xc>
    }
  }
}
 801091a:	bf00      	nop
 801091c:	bf00      	nop
 801091e:	370c      	adds	r7, #12
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr
 8010928:	20003330 	.word	0x20003330
 801092c:	20002a48 	.word	0x20002a48
 8010930:	200038b4 	.word	0x200038b4
 8010934:	200038cc 	.word	0x200038cc
 8010938:	20003334 	.word	0x20003334
 801093c:	20004bac 	.word	0x20004bac

08010940 <I2CTask>:

void I2CTask(osThreadId_t* thisThreadId, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2){
 8010940:	b580      	push	{r7, lr}
 8010942:	b08a      	sub	sp, #40	; 0x28
 8010944:	af00      	add	r7, sp, #0
 8010946:	60f8      	str	r0, [r7, #12]
 8010948:	60b9      	str	r1, [r7, #8]
 801094a:	607a      	str	r2, [r7, #4]
  //=====================================================================================================
  // MCP9808 Temperature Sensor Configuration
  //=====================================================================================================
  if(MCP9808_Init(hi2c1, MCP9808_ADDRESS) != MCP9808_OK)
 801094c:	2118      	movs	r1, #24
 801094e:	68b8      	ldr	r0, [r7, #8]
 8010950:	f7f0 f8e8 	bl	8000b24 <MCP9808_Init>
 8010954:	4603      	mov	r3, r0
 8010956:	2b01      	cmp	r3, #1
 8010958:	d002      	beq.n	8010960 <I2CTask+0x20>
    printf("MCP9808 Init FAIL\n");
 801095a:	48a5      	ldr	r0, [pc, #660]	; (8010bf0 <I2CTask+0x2b0>)
 801095c:	f005 f962 	bl	8015c24 <puts>

  MCP9808_SetResolution(hi2c1, MCP9808_ADDRESS, MCP9808_RESOLUTION_0_5DEG);
 8010960:	2200      	movs	r2, #0
 8010962:	2118      	movs	r1, #24
 8010964:	68b8      	ldr	r0, [r7, #8]
 8010966:	f7f0 f945 	bl	8000bf4 <MCP9808_SetResolution>

  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_UPPER_TEMP, BOARD_TEMP_MAX) != MCP9808_OK)
 801096a:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8010bf4 <I2CTask+0x2b4>
 801096e:	2202      	movs	r2, #2
 8010970:	2118      	movs	r1, #24
 8010972:	68b8      	ldr	r0, [r7, #8]
 8010974:	f7f0 f952 	bl	8000c1c <MCP9808_SetLimit>
 8010978:	4603      	mov	r3, r0
 801097a:	2b01      	cmp	r3, #1
 801097c:	d002      	beq.n	8010984 <I2CTask+0x44>
    printf("MCP9808 Set Upper Limit Failed\n");
 801097e:	489e      	ldr	r0, [pc, #632]	; (8010bf8 <I2CTask+0x2b8>)
 8010980:	f005 f950 	bl	8015c24 <puts>
  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_LOWER_TEMP, BOARD_TEMP_MIN) != MCP9808_OK)
 8010984:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8010bfc <I2CTask+0x2bc>
 8010988:	2203      	movs	r2, #3
 801098a:	2118      	movs	r1, #24
 801098c:	68b8      	ldr	r0, [r7, #8]
 801098e:	f7f0 f945 	bl	8000c1c <MCP9808_SetLimit>
 8010992:	4603      	mov	r3, r0
 8010994:	2b01      	cmp	r3, #1
 8010996:	d002      	beq.n	801099e <I2CTask+0x5e>
    printf("MCP9808 Set Lower Limit Failed\n");
 8010998:	4899      	ldr	r0, [pc, #612]	; (8010c00 <I2CTask+0x2c0>)
 801099a:	f005 f943 	bl	8015c24 <puts>
  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_CRIT_TEMP, BOARD_TEMP_CRIT) != MCP9808_OK)
 801099e:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8010c04 <I2CTask+0x2c4>
 80109a2:	2204      	movs	r2, #4
 80109a4:	2118      	movs	r1, #24
 80109a6:	68b8      	ldr	r0, [r7, #8]
 80109a8:	f7f0 f938 	bl	8000c1c <MCP9808_SetLimit>
 80109ac:	4603      	mov	r3, r0
 80109ae:	2b01      	cmp	r3, #1
 80109b0:	d002      	beq.n	80109b8 <I2CTask+0x78>
    printf("MCP9808 Set Critical Limit Failed\n");
 80109b2:	4895      	ldr	r0, [pc, #596]	; (8010c08 <I2CTask+0x2c8>)
 80109b4:	f005 f936 	bl	8015c24 <puts>
  //Setup configuration
  //Enable alert pin
  //Lock Tupper/Tlower window settings
  //Lock Tcrit settings
  //Set Tupper/Tlower hysteresis to +1.5 deg C
  MCP9808_Write16(hi2c1, MCP9808_ADDRESS, MCP9808_REG_CONFIG, (MCP9808_REG_CONFIG_ALERTCTRL | MCP9808_REG_CONFIG_WINLOCKED | MCP9808_REG_CONFIG_CRITLOCKED | MCP9808_REG_CONFIG_HYST_1_5));
 80109b8:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 80109bc:	2201      	movs	r2, #1
 80109be:	2118      	movs	r1, #24
 80109c0:	68b8      	ldr	r0, [r7, #8]
 80109c2:	f7f0 f9e3 	bl	8000d8c <MCP9808_Write16>

  //=====================================================================================================
  // PCAL9554B User Input Configuration
  //=====================================================================================================
  //Set configuration registers (all to input = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_CFG, 0xFF);
 80109c6:	23ff      	movs	r3, #255	; 0xff
 80109c8:	2203      	movs	r2, #3
 80109ca:	2120      	movs	r1, #32
 80109cc:	68b8      	ldr	r0, [r7, #8]
 80109ce:	f7f0 fbdd 	bl	800118c <PCAL9554B_WriteReg8>
  //Set latch register (no latch = 0)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_IN_LATCH, 0x00);
 80109d2:	2300      	movs	r3, #0
 80109d4:	2242      	movs	r2, #66	; 0x42
 80109d6:	2120      	movs	r1, #32
 80109d8:	68b8      	ldr	r0, [r7, #8]
 80109da:	f7f0 fbd7 	bl	800118c <PCAL9554B_WriteReg8>
  //Set pullup/pulldown enable register (all enable = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_PU_PD_ENABLE, 0xFF);
 80109de:	23ff      	movs	r3, #255	; 0xff
 80109e0:	2243      	movs	r2, #67	; 0x43
 80109e2:	2120      	movs	r1, #32
 80109e4:	68b8      	ldr	r0, [r7, #8]
 80109e6:	f7f0 fbd1 	bl	800118c <PCAL9554B_WriteReg8>
  //Set pullup/pulldown selection register (all to pullup = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_PU_PD_SELECT, 0xFF);
 80109ea:	23ff      	movs	r3, #255	; 0xff
 80109ec:	2244      	movs	r2, #68	; 0x44
 80109ee:	2120      	movs	r1, #32
 80109f0:	68b8      	ldr	r0, [r7, #8]
 80109f2:	f7f0 fbcb 	bl	800118c <PCAL9554B_WriteReg8>
  //Set interrupt mask (all to disable interrupt = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_INT_MASK, 0xFF);
 80109f6:	23ff      	movs	r3, #255	; 0xff
 80109f8:	2245      	movs	r2, #69	; 0x45
 80109fa:	2120      	movs	r1, #32
 80109fc:	68b8      	ldr	r0, [r7, #8]
 80109fe:	f7f0 fbc5 	bl	800118c <PCAL9554B_WriteReg8>


  //=====================================================================================================
  // PCA9539 Profet GPIO Configuration
  //=====================================================================================================
  HAL_GPIO_WritePin(PF_RESET_GPIO_Port, PF_RESET_Pin, GPIO_PIN_SET);
 8010a02:	2201      	movs	r2, #1
 8010a04:	2110      	movs	r1, #16
 8010a06:	4881      	ldr	r0, [pc, #516]	; (8010c0c <I2CTask+0x2cc>)
 8010a08:	f7f4 faea 	bl	8004fe0 <HAL_GPIO_WritePin>
  //Set all outputs to push-pull
  PCA9539_WriteReg8(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT_CONFIG, 0x00);
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	224f      	movs	r2, #79	; 0x4f
 8010a10:	2174      	movs	r1, #116	; 0x74
 8010a12:	68b8      	ldr	r0, [r7, #8]
 8010a14:	f7f0 fa4a 	bl	8000eac <PCA9539_WriteReg8>
  //Set configuration registers (all to output)
  PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_CONFIG_PORT0, 0x0000);
 8010a18:	2300      	movs	r3, #0
 8010a1a:	2206      	movs	r2, #6
 8010a1c:	2174      	movs	r1, #116	; 0x74
 8010a1e:	68b8      	ldr	r0, [r7, #8]
 8010a20:	f7f0 fa64 	bl	8000eec <PCA9539_WriteReg16>
  //Enable all pullup/pulldown
  PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_PU_PD_ENABLE_PORT0, 0x0000);
 8010a24:	2300      	movs	r3, #0
 8010a26:	2246      	movs	r2, #70	; 0x46
 8010a28:	2174      	movs	r1, #116	; 0x74
 8010a2a:	68b8      	ldr	r0, [r7, #8]
 8010a2c:	f7f0 fa5e 	bl	8000eec <PCA9539_WriteReg16>
  //Set all outputs to pulldown
  PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_PU_PD_SELECT_PORT0, 0x0000);
 8010a30:	2300      	movs	r3, #0
 8010a32:	2248      	movs	r2, #72	; 0x48
 8010a34:	2174      	movs	r1, #116	; 0x74
 8010a36:	68b8      	ldr	r0, [r7, #8]
 8010a38:	f7f0 fa58 	bl	8000eec <PCA9539_WriteReg16>

  //=====================================================================================================
  // ADS1x15 Analog In Configuration
  //=====================================================================================================
  stAdcPfBank1.deviceType = ADS1015;
 8010a3c:	4b74      	ldr	r3, [pc, #464]	; (8010c10 <I2CTask+0x2d0>)
 8010a3e:	2200      	movs	r2, #0
 8010a40:	701a      	strb	r2, [r3, #0]
  stAdcPfBank1.bitShift = 0;
 8010a42:	4b73      	ldr	r3, [pc, #460]	; (8010c10 <I2CTask+0x2d0>)
 8010a44:	2200      	movs	r2, #0
 8010a46:	715a      	strb	r2, [r3, #5]
  stAdcPfBank1.gain = GAIN_ONE;
 8010a48:	4b71      	ldr	r3, [pc, #452]	; (8010c10 <I2CTask+0x2d0>)
 8010a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a4e:	805a      	strh	r2, [r3, #2]
  stAdcPfBank1.dataRate = ADS1015_DATARATE_3300SPS;
 8010a50:	4b6f      	ldr	r3, [pc, #444]	; (8010c10 <I2CTask+0x2d0>)
 8010a52:	22c0      	movs	r2, #192	; 0xc0
 8010a54:	711a      	strb	r2, [r3, #4]

  //=====================================================================================================
  // PCA9539 Profet GPIO Configuration
  //=====================================================================================================
  //Set all outputs to push-pull
  PCA9539_WriteReg8(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT_CONFIG, 0x00);
 8010a56:	2300      	movs	r3, #0
 8010a58:	224f      	movs	r2, #79	; 0x4f
 8010a5a:	2174      	movs	r1, #116	; 0x74
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f7f0 fa25 	bl	8000eac <PCA9539_WriteReg8>
  //Set configuration registers (all to output)
  PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_CONFIG_PORT0, 0x0000);
 8010a62:	2300      	movs	r3, #0
 8010a64:	2206      	movs	r2, #6
 8010a66:	2174      	movs	r1, #116	; 0x74
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f7f0 fa3f 	bl	8000eec <PCA9539_WriteReg16>
  //Enable all pullup/pulldown
  PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_PU_PD_ENABLE_PORT0, 0x0000);
 8010a6e:	2300      	movs	r3, #0
 8010a70:	2246      	movs	r2, #70	; 0x46
 8010a72:	2174      	movs	r1, #116	; 0x74
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f7f0 fa39 	bl	8000eec <PCA9539_WriteReg16>
  //Set all outputs to pulldown
  PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_PU_PD_SELECT_PORT0, 0x0000);
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	2248      	movs	r2, #72	; 0x48
 8010a7e:	2174      	movs	r1, #116	; 0x74
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f7f0 fa33 	bl	8000eec <PCA9539_WriteReg16>

  //=====================================================================================================
  // ADS1x15 Analog In Configuration
  //=====================================================================================================
  stAdcPfBank2.deviceType = ADS1015;
 8010a86:	4b63      	ldr	r3, [pc, #396]	; (8010c14 <I2CTask+0x2d4>)
 8010a88:	2200      	movs	r2, #0
 8010a8a:	701a      	strb	r2, [r3, #0]
  stAdcPfBank2.bitShift = 0;
 8010a8c:	4b61      	ldr	r3, [pc, #388]	; (8010c14 <I2CTask+0x2d4>)
 8010a8e:	2200      	movs	r2, #0
 8010a90:	715a      	strb	r2, [r3, #5]
  stAdcPfBank2.gain = GAIN_ONE;
 8010a92:	4b60      	ldr	r3, [pc, #384]	; (8010c14 <I2CTask+0x2d4>)
 8010a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a98:	805a      	strh	r2, [r3, #2]
  stAdcPfBank2.dataRate = ADS1015_DATARATE_3300SPS;
 8010a9a:	4b5e      	ldr	r3, [pc, #376]	; (8010c14 <I2CTask+0x2d4>)
 8010a9c:	22c0      	movs	r2, #192	; 0xc0
 8010a9e:	711a      	strb	r2, [r3, #4]

  //=====================================================================================================
  // PCA9635 LED Configuration
  //=====================================================================================================
  //Send configuration, set to blink/flasher
  PCA9635_Init(hi2c2, PCA9635_ADDRESS, PCA9635_BLINK);
 8010aa0:	2201      	movs	r2, #1
 8010aa2:	2130      	movs	r1, #48	; 0x30
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f7f0 fa47 	bl	8000f38 <PCA9635_Init>

  //Set flashing frequency
  PCA9635_SetGroupFreq(hi2c2, PCA9635_ADDRESS, PCA9635_FLASH_FREQ);
 8010aaa:	2202      	movs	r2, #2
 8010aac:	2130      	movs	r1, #48	; 0x30
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f7f0 faaf 	bl	8001012 <PCA9635_SetGroupFreq>

  //Set PWM duty cycle for each channel (overriden by group PWM)
  for(int i=0; i<PDM_NUM_LEDS; i++){
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8010ab8:	e009      	b.n	8010ace <I2CTask+0x18e>
    PCA9635_SetPWM(hi2c2, PCA9635_ADDRESS, i, 255);
 8010aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abc:	b2da      	uxtb	r2, r3
 8010abe:	23ff      	movs	r3, #255	; 0xff
 8010ac0:	2130      	movs	r1, #48	; 0x30
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f7f0 fa65 	bl	8000f92 <PCA9635_SetPWM>
  for(int i=0; i<PDM_NUM_LEDS; i++){
 8010ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aca:	3301      	adds	r3, #1
 8010acc:	627b      	str	r3, [r7, #36]	; 0x24
 8010ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad0:	2b0f      	cmp	r3, #15
 8010ad2:	ddf2      	ble.n	8010aba <I2CTask+0x17a>
  }

  //Set flashing duty cycle
  PCA9635_SetGroupPWM(hi2c2, PCA9635_ADDRESS, PCA9635_FLASH_DUTY_CYCLE); //Have to set individual brightness levels first
 8010ad4:	2280      	movs	r2, #128	; 0x80
 8010ad6:	2130      	movs	r1, #48	; 0x30
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f7f0 fa7f 	bl	8000fdc <PCA9635_SetGroupPWM>

  //Start LED test sequence
  nLEDTestSeqIndex = 1;
 8010ade:	4b4e      	ldr	r3, [pc, #312]	; (8010c18 <I2CTask+0x2d8>)
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	701a      	strb	r2, [r3, #0]
  nLEDTestSeqLastTime = HAL_GetTick();
 8010ae4:	f7f1 ff02 	bl	80028ec <HAL_GetTick>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	4a4c      	ldr	r2, [pc, #304]	; (8010c1c <I2CTask+0x2dc>)
 8010aec:	6013      	str	r3, [r2, #0]
  for(;;)
  {
   //=====================================================================================================
   // PCAL9554B User Input
   //=====================================================================================================
   nUserDigInputRaw = PCAL9554B_ReadReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_IN_PORT);
 8010aee:	2200      	movs	r2, #0
 8010af0:	2120      	movs	r1, #32
 8010af2:	68b8      	ldr	r0, [r7, #8]
 8010af4:	f7f0 fb6a 	bl	80011cc <PCAL9554B_ReadReg8>
 8010af8:	4603      	mov	r3, r0
 8010afa:	461a      	mov	r2, r3
 8010afc:	4b48      	ldr	r3, [pc, #288]	; (8010c20 <I2CTask+0x2e0>)
 8010afe:	701a      	strb	r2, [r3, #0]
   nUserDigInput[0] = !((nUserDigInputRaw & 0x08) >> 3);
 8010b00:	4b47      	ldr	r3, [pc, #284]	; (8010c20 <I2CTask+0x2e0>)
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	f003 0308 	and.w	r3, r3, #8
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	bf0c      	ite	eq
 8010b0c:	2301      	moveq	r3, #1
 8010b0e:	2300      	movne	r3, #0
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	461a      	mov	r2, r3
 8010b14:	4b43      	ldr	r3, [pc, #268]	; (8010c24 <I2CTask+0x2e4>)
 8010b16:	701a      	strb	r2, [r3, #0]
   nUserDigInput[1] = !((nUserDigInputRaw & 0x04) >> 2);
 8010b18:	4b41      	ldr	r3, [pc, #260]	; (8010c20 <I2CTask+0x2e0>)
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	f003 0304 	and.w	r3, r3, #4
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	bf0c      	ite	eq
 8010b24:	2301      	moveq	r3, #1
 8010b26:	2300      	movne	r3, #0
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	461a      	mov	r2, r3
 8010b2c:	4b3d      	ldr	r3, [pc, #244]	; (8010c24 <I2CTask+0x2e4>)
 8010b2e:	705a      	strb	r2, [r3, #1]
   nUserDigInput[2] = !((nUserDigInputRaw & 0x02) >> 1);
 8010b30:	4b3b      	ldr	r3, [pc, #236]	; (8010c20 <I2CTask+0x2e0>)
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	f003 0302 	and.w	r3, r3, #2
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	bf0c      	ite	eq
 8010b3c:	2301      	moveq	r3, #1
 8010b3e:	2300      	movne	r3, #0
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	461a      	mov	r2, r3
 8010b44:	4b37      	ldr	r3, [pc, #220]	; (8010c24 <I2CTask+0x2e4>)
 8010b46:	709a      	strb	r2, [r3, #2]
   nUserDigInput[3] = !(nUserDigInputRaw & 0x01);
 8010b48:	4b35      	ldr	r3, [pc, #212]	; (8010c20 <I2CTask+0x2e0>)
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	f003 0301 	and.w	r3, r3, #1
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	bf0c      	ite	eq
 8010b54:	2301      	moveq	r3, #1
 8010b56:	2300      	movne	r3, #0
 8010b58:	b2db      	uxtb	r3, r3
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	4b31      	ldr	r3, [pc, #196]	; (8010c24 <I2CTask+0x2e4>)
 8010b5e:	70da      	strb	r2, [r3, #3]
   nUserDigInput[4] = !((nUserDigInputRaw & 0x10) >> 4);
 8010b60:	4b2f      	ldr	r3, [pc, #188]	; (8010c20 <I2CTask+0x2e0>)
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	f003 0310 	and.w	r3, r3, #16
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	bf0c      	ite	eq
 8010b6c:	2301      	moveq	r3, #1
 8010b6e:	2300      	movne	r3, #0
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	461a      	mov	r2, r3
 8010b74:	4b2b      	ldr	r3, [pc, #172]	; (8010c24 <I2CTask+0x2e4>)
 8010b76:	711a      	strb	r2, [r3, #4]
   nUserDigInput[5] = !((nUserDigInputRaw & 0x20) >> 5);
 8010b78:	4b29      	ldr	r3, [pc, #164]	; (8010c20 <I2CTask+0x2e0>)
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	f003 0320 	and.w	r3, r3, #32
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	bf0c      	ite	eq
 8010b84:	2301      	moveq	r3, #1
 8010b86:	2300      	movne	r3, #0
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	4b25      	ldr	r3, [pc, #148]	; (8010c24 <I2CTask+0x2e4>)
 8010b8e:	715a      	strb	r2, [r3, #5]
   nUserDigInput[6] = !((nUserDigInputRaw & 0x40) >> 6);
 8010b90:	4b23      	ldr	r3, [pc, #140]	; (8010c20 <I2CTask+0x2e0>)
 8010b92:	781b      	ldrb	r3, [r3, #0]
 8010b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	bf0c      	ite	eq
 8010b9c:	2301      	moveq	r3, #1
 8010b9e:	2300      	movne	r3, #0
 8010ba0:	b2db      	uxtb	r3, r3
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	4b1f      	ldr	r3, [pc, #124]	; (8010c24 <I2CTask+0x2e4>)
 8010ba6:	719a      	strb	r2, [r3, #6]
   nUserDigInput[7] = !((nUserDigInputRaw & 0x80) >> 7);
 8010ba8:	4b1d      	ldr	r3, [pc, #116]	; (8010c20 <I2CTask+0x2e0>)
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	b25b      	sxtb	r3, r3
 8010bae:	43db      	mvns	r3, r3
 8010bb0:	b2db      	uxtb	r3, r3
 8010bb2:	09db      	lsrs	r3, r3, #7
 8010bb4:	b2db      	uxtb	r3, r3
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	4b1a      	ldr	r3, [pc, #104]	; (8010c24 <I2CTask+0x2e4>)
 8010bba:	71da      	strb	r2, [r3, #7]
   //=====================================================================================================
   // Set Profet
   // DSEL to channel 1
   // Enable all DEN
   //=====================================================================================================
   pfGpioBank1 &= ~PF_BANK1_DSEL;
 8010bbc:	4b1a      	ldr	r3, [pc, #104]	; (8010c28 <I2CTask+0x2e8>)
 8010bbe:	881b      	ldrh	r3, [r3, #0]
 8010bc0:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	4b18      	ldr	r3, [pc, #96]	; (8010c28 <I2CTask+0x2e8>)
 8010bc8:	801a      	strh	r2, [r3, #0]
   pfGpioBank1 |= PF_BANK1_DEN;
 8010bca:	4b17      	ldr	r3, [pc, #92]	; (8010c28 <I2CTask+0x2e8>)
 8010bcc:	881b      	ldrh	r3, [r3, #0]
 8010bce:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8010bd2:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	4b13      	ldr	r3, [pc, #76]	; (8010c28 <I2CTask+0x2e8>)
 8010bda:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 8010bdc:	4b12      	ldr	r3, [pc, #72]	; (8010c28 <I2CTask+0x2e8>)
 8010bde:	881b      	ldrh	r3, [r3, #0]
 8010be0:	2202      	movs	r2, #2
 8010be2:	2174      	movs	r1, #116	; 0x74
 8010be4:	68b8      	ldr	r0, [r7, #8]
 8010be6:	f7f0 f981 	bl	8000eec <PCA9539_WriteReg16>

   //=====================================================================================================
   // ADS1x15 Analog Input
   //=====================================================================================================
   for(int i = 0; i < 4; i++){
 8010bea:	2300      	movs	r3, #0
 8010bec:	623b      	str	r3, [r7, #32]
 8010bee:	e042      	b.n	8010c76 <I2CTask+0x336>
 8010bf0:	080165b0 	.word	0x080165b0
 8010bf4:	42480000 	.word	0x42480000
 8010bf8:	080165c4 	.word	0x080165c4
 8010bfc:	00000000 	.word	0x00000000
 8010c00:	080165e4 	.word	0x080165e4
 8010c04:	42a00000 	.word	0x42a00000
 8010c08:	08016604 	.word	0x08016604
 8010c0c:	48000400 	.word	0x48000400
 8010c10:	200035ec 	.word	0x200035ec
 8010c14:	200035f4 	.word	0x200035f4
 8010c18:	20003628 	.word	0x20003628
 8010c1c:	20003630 	.word	0x20003630
 8010c20:	200035fc 	.word	0x200035fc
 8010c24:	20003600 	.word	0x20003600
 8010c28:	200035d6 	.word	0x200035d6
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, i);
 8010c2c:	6a3b      	ldr	r3, [r7, #32]
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	4a88      	ldr	r2, [pc, #544]	; (8010e54 <I2CTask+0x514>)
 8010c32:	2148      	movs	r1, #72	; 0x48
 8010c34:	68b8      	ldr	r0, [r7, #8]
 8010c36:	f7ef feb9 	bl	80009ac <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	2104      	movs	r1, #4
 8010c3e:	4886      	ldr	r0, [pc, #536]	; (8010e58 <I2CTask+0x518>)
 8010c40:	f7f4 f9ce 	bl	8004fe0 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 8010c44:	2002      	movs	r0, #2
 8010c46:	f7fc fc4b 	bl	800d4e0 <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	2104      	movs	r1, #4
 8010c4e:	4882      	ldr	r0, [pc, #520]	; (8010e58 <I2CTask+0x518>)
 8010c50:	f7f4 f9c6 	bl	8004fe0 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, &nPfISBank1Raw[i]) != HAL_OK)
 8010c54:	6a3b      	ldr	r3, [r7, #32]
 8010c56:	005b      	lsls	r3, r3, #1
 8010c58:	4a80      	ldr	r2, [pc, #512]	; (8010e5c <I2CTask+0x51c>)
 8010c5a:	4413      	add	r3, r2
 8010c5c:	4a7d      	ldr	r2, [pc, #500]	; (8010e54 <I2CTask+0x514>)
 8010c5e:	2148      	movs	r1, #72	; 0x48
 8010c60:	68b8      	ldr	r0, [r7, #8]
 8010c62:	f7ef ff1f 	bl	8000aa4 <ADS1x15_ReadADC>
 8010c66:	4603      	mov	r3, r0
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d001      	beq.n	8010c70 <I2CTask+0x330>
     {
       Error_Handler();
 8010c6c:	f7f1 fbaa 	bl	80023c4 <Error_Handler>
   for(int i = 0; i < 4; i++){
 8010c70:	6a3b      	ldr	r3, [r7, #32]
 8010c72:	3301      	adds	r3, #1
 8010c74:	623b      	str	r3, [r7, #32]
 8010c76:	6a3b      	ldr	r3, [r7, #32]
 8010c78:	2b03      	cmp	r3, #3
 8010c7a:	ddd7      	ble.n	8010c2c <I2CTask+0x2ec>
     }
   }

   Profet_UpdateIS(&pf[0], nPfISBank1Raw[3]);
 8010c7c:	4b77      	ldr	r3, [pc, #476]	; (8010e5c <I2CTask+0x51c>)
 8010c7e:	88db      	ldrh	r3, [r3, #6]
 8010c80:	4619      	mov	r1, r3
 8010c82:	4877      	ldr	r0, [pc, #476]	; (8010e60 <I2CTask+0x520>)
 8010c84:	f7f0 fd1c 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[1], nPfISBank1Raw[2]);
 8010c88:	4b74      	ldr	r3, [pc, #464]	; (8010e5c <I2CTask+0x51c>)
 8010c8a:	889b      	ldrh	r3, [r3, #4]
 8010c8c:	4619      	mov	r1, r3
 8010c8e:	4875      	ldr	r0, [pc, #468]	; (8010e64 <I2CTask+0x524>)
 8010c90:	f7f0 fd16 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[2], nPfISBank1Raw[1]);
 8010c94:	4b71      	ldr	r3, [pc, #452]	; (8010e5c <I2CTask+0x51c>)
 8010c96:	885b      	ldrh	r3, [r3, #2]
 8010c98:	4619      	mov	r1, r3
 8010c9a:	4873      	ldr	r0, [pc, #460]	; (8010e68 <I2CTask+0x528>)
 8010c9c:	f7f0 fd10 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[4], nPfISBank1Raw[0]);
 8010ca0:	4b6e      	ldr	r3, [pc, #440]	; (8010e5c <I2CTask+0x51c>)
 8010ca2:	881b      	ldrh	r3, [r3, #0]
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	4871      	ldr	r0, [pc, #452]	; (8010e6c <I2CTask+0x52c>)
 8010ca8:	f7f0 fd0a 	bl	80016c0 <Profet_UpdateIS>

   //=====================================================================================================
   //Flip Profet DSEL to channel 2
   //=====================================================================================================
   pfGpioBank1 |= PF_BANK1_DSEL;
 8010cac:	4b70      	ldr	r3, [pc, #448]	; (8010e70 <I2CTask+0x530>)
 8010cae:	881b      	ldrh	r3, [r3, #0]
 8010cb0:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8010cb4:	b29a      	uxth	r2, r3
 8010cb6:	4b6e      	ldr	r3, [pc, #440]	; (8010e70 <I2CTask+0x530>)
 8010cb8:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 8010cba:	4b6d      	ldr	r3, [pc, #436]	; (8010e70 <I2CTask+0x530>)
 8010cbc:	881b      	ldrh	r3, [r3, #0]
 8010cbe:	2202      	movs	r2, #2
 8010cc0:	2174      	movs	r1, #116	; 0x74
 8010cc2:	68b8      	ldr	r0, [r7, #8]
 8010cc4:	f7f0 f912 	bl	8000eec <PCA9539_WriteReg16>

   for(int i = 0; i < 2; i++){
 8010cc8:	2300      	movs	r3, #0
 8010cca:	61fb      	str	r3, [r7, #28]
 8010ccc:	e024      	b.n	8010d18 <I2CTask+0x3d8>
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, i);
 8010cce:	69fb      	ldr	r3, [r7, #28]
 8010cd0:	b2db      	uxtb	r3, r3
 8010cd2:	4a60      	ldr	r2, [pc, #384]	; (8010e54 <I2CTask+0x514>)
 8010cd4:	2148      	movs	r1, #72	; 0x48
 8010cd6:	68b8      	ldr	r0, [r7, #8]
 8010cd8:	f7ef fe68 	bl	80009ac <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 8010cdc:	2201      	movs	r2, #1
 8010cde:	2104      	movs	r1, #4
 8010ce0:	485d      	ldr	r0, [pc, #372]	; (8010e58 <I2CTask+0x518>)
 8010ce2:	f7f4 f97d 	bl	8004fe0 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 8010ce6:	2002      	movs	r0, #2
 8010ce8:	f7fc fbfa 	bl	800d4e0 <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 8010cec:	2200      	movs	r2, #0
 8010cee:	2104      	movs	r1, #4
 8010cf0:	4859      	ldr	r0, [pc, #356]	; (8010e58 <I2CTask+0x518>)
 8010cf2:	f7f4 f975 	bl	8004fe0 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, &nPfISBank1Raw[i]) != HAL_OK)
 8010cf6:	69fb      	ldr	r3, [r7, #28]
 8010cf8:	005b      	lsls	r3, r3, #1
 8010cfa:	4a58      	ldr	r2, [pc, #352]	; (8010e5c <I2CTask+0x51c>)
 8010cfc:	4413      	add	r3, r2
 8010cfe:	4a55      	ldr	r2, [pc, #340]	; (8010e54 <I2CTask+0x514>)
 8010d00:	2148      	movs	r1, #72	; 0x48
 8010d02:	68b8      	ldr	r0, [r7, #8]
 8010d04:	f7ef fece 	bl	8000aa4 <ADS1x15_ReadADC>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d001      	beq.n	8010d12 <I2CTask+0x3d2>
     {
        Error_Handler();
 8010d0e:	f7f1 fb59 	bl	80023c4 <Error_Handler>
   for(int i = 0; i < 2; i++){
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	3301      	adds	r3, #1
 8010d16:	61fb      	str	r3, [r7, #28]
 8010d18:	69fb      	ldr	r3, [r7, #28]
 8010d1a:	2b01      	cmp	r3, #1
 8010d1c:	ddd7      	ble.n	8010cce <I2CTask+0x38e>
   }

   //=====================================================================================================
   // Scale to IS Values
   //=====================================================================================================
   Profet_UpdateIS(&pf[3], nPfISBank1Raw[1]);
 8010d1e:	4b4f      	ldr	r3, [pc, #316]	; (8010e5c <I2CTask+0x51c>)
 8010d20:	885b      	ldrh	r3, [r3, #2]
 8010d22:	4619      	mov	r1, r3
 8010d24:	4853      	ldr	r0, [pc, #332]	; (8010e74 <I2CTask+0x534>)
 8010d26:	f7f0 fccb 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[5], nPfISBank1Raw[0]);
 8010d2a:	4b4c      	ldr	r3, [pc, #304]	; (8010e5c <I2CTask+0x51c>)
 8010d2c:	881b      	ldrh	r3, [r3, #0]
 8010d2e:	4619      	mov	r1, r3
 8010d30:	4851      	ldr	r0, [pc, #324]	; (8010e78 <I2CTask+0x538>)
 8010d32:	f7f0 fcc5 	bl	80016c0 <Profet_UpdateIS>
   //=====================================================================================================
   // Profet I2C GPIO
   // PCA9555
   // PF1-6 Bank 1
   //=====================================================================================================
   InputLogic();
 8010d36:	f7ff fcf5 	bl	8010724 <InputLogic>
   OutputLogic();
 8010d3a:	f7ff fda5 	bl	8010888 <OutputLogic>
   PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 8010d3e:	4b4c      	ldr	r3, [pc, #304]	; (8010e70 <I2CTask+0x530>)
 8010d40:	881b      	ldrh	r3, [r3, #0]
 8010d42:	2202      	movs	r2, #2
 8010d44:	2174      	movs	r1, #116	; 0x74
 8010d46:	68b8      	ldr	r0, [r7, #8]
 8010d48:	f7f0 f8d0 	bl	8000eec <PCA9539_WriteReg16>

   //=====================================================================================================
   // MCP9808 temperature sensor
   //=====================================================================================================
   nBoardTempC = MCP9808_ReadTempC_Int(hi2c1, MCP9808_ADDRESS);
 8010d4c:	2118      	movs	r1, #24
 8010d4e:	68b8      	ldr	r0, [r7, #8]
 8010d50:	f7ef ff14 	bl	8000b7c <MCP9808_ReadTempC_Int>
 8010d54:	4603      	mov	r3, r0
 8010d56:	461a      	mov	r2, r3
 8010d58:	4b48      	ldr	r3, [pc, #288]	; (8010e7c <I2CTask+0x53c>)
 8010d5a:	801a      	strh	r2, [r3, #0]

   if(MCP9808_GetOvertemp()) printf("*******MCP9808 Overtemp Detected*******\n");
 8010d5c:	f7f0 f89a 	bl	8000e94 <MCP9808_GetOvertemp>
 8010d60:	4603      	mov	r3, r0
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d002      	beq.n	8010d6c <I2CTask+0x42c>
 8010d66:	4846      	ldr	r0, [pc, #280]	; (8010e80 <I2CTask+0x540>)
 8010d68:	f004 ff5c 	bl	8015c24 <puts>
   if(MCP9808_GetCriticalTemp()) printf("*******MCP9808 CRITICAL Overtemp Detected*******\n");
 8010d6c:	f7f0 f886 	bl	8000e7c <MCP9808_GetCriticalTemp>
 8010d70:	4603      	mov	r3, r0
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d002      	beq.n	8010d7c <I2CTask+0x43c>
 8010d76:	4843      	ldr	r0, [pc, #268]	; (8010e84 <I2CTask+0x544>)
 8010d78:	f004 ff54 	bl	8015c24 <puts>
   //=====================================================================================================
   // Set Profet
   // DSEL to channel 1
   // Enable all DEN
   //=====================================================================================================
   pfGpioBank2 &= ~PF_BANK2_DSEL;
 8010d7c:	4b42      	ldr	r3, [pc, #264]	; (8010e88 <I2CTask+0x548>)
 8010d7e:	881b      	ldrh	r3, [r3, #0]
 8010d80:	f423 7308 	bic.w	r3, r3, #544	; 0x220
 8010d84:	b29a      	uxth	r2, r3
 8010d86:	4b40      	ldr	r3, [pc, #256]	; (8010e88 <I2CTask+0x548>)
 8010d88:	801a      	strh	r2, [r3, #0]
   pfGpioBank2 |= PF_BANK2_DEN;
 8010d8a:	4b3f      	ldr	r3, [pc, #252]	; (8010e88 <I2CTask+0x548>)
 8010d8c:	881b      	ldrh	r3, [r3, #0]
 8010d8e:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
 8010d92:	f043 0305 	orr.w	r3, r3, #5
 8010d96:	b29a      	uxth	r2, r3
 8010d98:	4b3b      	ldr	r3, [pc, #236]	; (8010e88 <I2CTask+0x548>)
 8010d9a:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 8010d9c:	4b3a      	ldr	r3, [pc, #232]	; (8010e88 <I2CTask+0x548>)
 8010d9e:	881b      	ldrh	r3, [r3, #0]
 8010da0:	2202      	movs	r2, #2
 8010da2:	2174      	movs	r1, #116	; 0x74
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f7f0 f8a1 	bl	8000eec <PCA9539_WriteReg16>

   //=====================================================================================================
   // ADS1115 Analog Input
   //=====================================================================================================
   for(int i = 0; i < 4; i++){
 8010daa:	2300      	movs	r3, #0
 8010dac:	61bb      	str	r3, [r7, #24]
 8010dae:	e024      	b.n	8010dfa <I2CTask+0x4ba>
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, i);
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	b2db      	uxtb	r3, r3
 8010db4:	4a35      	ldr	r2, [pc, #212]	; (8010e8c <I2CTask+0x54c>)
 8010db6:	2148      	movs	r1, #72	; 0x48
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f7ef fdf7 	bl	80009ac <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	2104      	movs	r1, #4
 8010dc2:	4825      	ldr	r0, [pc, #148]	; (8010e58 <I2CTask+0x518>)
 8010dc4:	f7f4 f90c 	bl	8004fe0 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 8010dc8:	2002      	movs	r0, #2
 8010dca:	f7fc fb89 	bl	800d4e0 <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 8010dce:	2200      	movs	r2, #0
 8010dd0:	2104      	movs	r1, #4
 8010dd2:	4821      	ldr	r0, [pc, #132]	; (8010e58 <I2CTask+0x518>)
 8010dd4:	f7f4 f904 	bl	8004fe0 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, &nPfISBank2Raw[i]) != HAL_OK)
 8010dd8:	69bb      	ldr	r3, [r7, #24]
 8010dda:	005b      	lsls	r3, r3, #1
 8010ddc:	4a2c      	ldr	r2, [pc, #176]	; (8010e90 <I2CTask+0x550>)
 8010dde:	4413      	add	r3, r2
 8010de0:	4a2a      	ldr	r2, [pc, #168]	; (8010e8c <I2CTask+0x54c>)
 8010de2:	2148      	movs	r1, #72	; 0x48
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f7ef fe5d 	bl	8000aa4 <ADS1x15_ReadADC>
 8010dea:	4603      	mov	r3, r0
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d001      	beq.n	8010df4 <I2CTask+0x4b4>
     {
       Error_Handler();
 8010df0:	f7f1 fae8 	bl	80023c4 <Error_Handler>
   for(int i = 0; i < 4; i++){
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	3301      	adds	r3, #1
 8010df8:	61bb      	str	r3, [r7, #24]
 8010dfa:	69bb      	ldr	r3, [r7, #24]
 8010dfc:	2b03      	cmp	r3, #3
 8010dfe:	ddd7      	ble.n	8010db0 <I2CTask+0x470>
     }
   }

   Profet_UpdateIS(&pf[6], nPfISBank2Raw[0]);
 8010e00:	4b23      	ldr	r3, [pc, #140]	; (8010e90 <I2CTask+0x550>)
 8010e02:	881b      	ldrh	r3, [r3, #0]
 8010e04:	4619      	mov	r1, r3
 8010e06:	4823      	ldr	r0, [pc, #140]	; (8010e94 <I2CTask+0x554>)
 8010e08:	f7f0 fc5a 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[7], nPfISBank2Raw[1]);
 8010e0c:	4b20      	ldr	r3, [pc, #128]	; (8010e90 <I2CTask+0x550>)
 8010e0e:	885b      	ldrh	r3, [r3, #2]
 8010e10:	4619      	mov	r1, r3
 8010e12:	4821      	ldr	r0, [pc, #132]	; (8010e98 <I2CTask+0x558>)
 8010e14:	f7f0 fc54 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[9], nPfISBank2Raw[2]);
 8010e18:	4b1d      	ldr	r3, [pc, #116]	; (8010e90 <I2CTask+0x550>)
 8010e1a:	889b      	ldrh	r3, [r3, #4]
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	481f      	ldr	r0, [pc, #124]	; (8010e9c <I2CTask+0x55c>)
 8010e20:	f7f0 fc4e 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[11], nPfISBank2Raw[3]);
 8010e24:	4b1a      	ldr	r3, [pc, #104]	; (8010e90 <I2CTask+0x550>)
 8010e26:	88db      	ldrh	r3, [r3, #6]
 8010e28:	4619      	mov	r1, r3
 8010e2a:	481d      	ldr	r0, [pc, #116]	; (8010ea0 <I2CTask+0x560>)
 8010e2c:	f7f0 fc48 	bl	80016c0 <Profet_UpdateIS>

   //=====================================================================================================
   //Flip Profet DSEL to channel 2
   //=====================================================================================================
   pfGpioBank2 |= PF_BANK2_DSEL;
 8010e30:	4b15      	ldr	r3, [pc, #84]	; (8010e88 <I2CTask+0x548>)
 8010e32:	881b      	ldrh	r3, [r3, #0]
 8010e34:	f443 7308 	orr.w	r3, r3, #544	; 0x220
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	4b13      	ldr	r3, [pc, #76]	; (8010e88 <I2CTask+0x548>)
 8010e3c:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 8010e3e:	4b12      	ldr	r3, [pc, #72]	; (8010e88 <I2CTask+0x548>)
 8010e40:	881b      	ldrh	r3, [r3, #0]
 8010e42:	2202      	movs	r2, #2
 8010e44:	2174      	movs	r1, #116	; 0x74
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f7f0 f850 	bl	8000eec <PCA9539_WriteReg16>

   for(int i = 0; i < 2; i++){
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	617b      	str	r3, [r7, #20]
 8010e50:	e050      	b.n	8010ef4 <I2CTask+0x5b4>
 8010e52:	bf00      	nop
 8010e54:	200035ec 	.word	0x200035ec
 8010e58:	48000400 	.word	0x48000400
 8010e5c:	200035dc 	.word	0x200035dc
 8010e60:	20003334 	.word	0x20003334
 8010e64:	2000336c 	.word	0x2000336c
 8010e68:	200033a4 	.word	0x200033a4
 8010e6c:	20003414 	.word	0x20003414
 8010e70:	200035d6 	.word	0x200035d6
 8010e74:	200033dc 	.word	0x200033dc
 8010e78:	2000344c 	.word	0x2000344c
 8010e7c:	2000360a 	.word	0x2000360a
 8010e80:	08016628 	.word	0x08016628
 8010e84:	08016650 	.word	0x08016650
 8010e88:	200035d8 	.word	0x200035d8
 8010e8c:	200035f4 	.word	0x200035f4
 8010e90:	200035e4 	.word	0x200035e4
 8010e94:	20003484 	.word	0x20003484
 8010e98:	200034bc 	.word	0x200034bc
 8010e9c:	2000352c 	.word	0x2000352c
 8010ea0:	2000359c 	.word	0x2000359c
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, i+2);
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	b2db      	uxtb	r3, r3
 8010ea8:	3302      	adds	r3, #2
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	4a61      	ldr	r2, [pc, #388]	; (8011034 <I2CTask+0x6f4>)
 8010eae:	2148      	movs	r1, #72	; 0x48
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f7ef fd7b 	bl	80009ac <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	2104      	movs	r1, #4
 8010eba:	485f      	ldr	r0, [pc, #380]	; (8011038 <I2CTask+0x6f8>)
 8010ebc:	f7f4 f890 	bl	8004fe0 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 8010ec0:	2002      	movs	r0, #2
 8010ec2:	f7fc fb0d 	bl	800d4e0 <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	2104      	movs	r1, #4
 8010eca:	485b      	ldr	r0, [pc, #364]	; (8011038 <I2CTask+0x6f8>)
 8010ecc:	f7f4 f888 	bl	8004fe0 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, &nPfISBank2Raw[i+2]) != HAL_OK)
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	3302      	adds	r3, #2
 8010ed4:	005b      	lsls	r3, r3, #1
 8010ed6:	4a59      	ldr	r2, [pc, #356]	; (801103c <I2CTask+0x6fc>)
 8010ed8:	4413      	add	r3, r2
 8010eda:	4a56      	ldr	r2, [pc, #344]	; (8011034 <I2CTask+0x6f4>)
 8010edc:	2148      	movs	r1, #72	; 0x48
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f7ef fde0 	bl	8000aa4 <ADS1x15_ReadADC>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d001      	beq.n	8010eee <I2CTask+0x5ae>
     {
       Error_Handler();
 8010eea:	f7f1 fa6b 	bl	80023c4 <Error_Handler>
   for(int i = 0; i < 2; i++){
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	617b      	str	r3, [r7, #20]
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	2b01      	cmp	r3, #1
 8010ef8:	ddd4      	ble.n	8010ea4 <I2CTask+0x564>
   }

   //=====================================================================================================
   // Scale to IS Values
   //=====================================================================================================
   Profet_UpdateIS(&pf[8], nPfISBank2Raw[2]);
 8010efa:	4b50      	ldr	r3, [pc, #320]	; (801103c <I2CTask+0x6fc>)
 8010efc:	889b      	ldrh	r3, [r3, #4]
 8010efe:	4619      	mov	r1, r3
 8010f00:	484f      	ldr	r0, [pc, #316]	; (8011040 <I2CTask+0x700>)
 8010f02:	f7f0 fbdd 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[10], nPfISBank2Raw[3]);
 8010f06:	4b4d      	ldr	r3, [pc, #308]	; (801103c <I2CTask+0x6fc>)
 8010f08:	88db      	ldrh	r3, [r3, #6]
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	484d      	ldr	r0, [pc, #308]	; (8011044 <I2CTask+0x704>)
 8010f0e:	f7f0 fbd7 	bl	80016c0 <Profet_UpdateIS>
   // Profet I2C GPIO
   // PCA9555
   // PF1-6 Bank 1
   // PF7-12 Bank 2
   //=====================================================================================================
   InputLogic();
 8010f12:	f7ff fc07 	bl	8010724 <InputLogic>
   OutputLogic();
 8010f16:	f7ff fcb7 	bl	8010888 <OutputLogic>
   PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 8010f1a:	4b4b      	ldr	r3, [pc, #300]	; (8011048 <I2CTask+0x708>)
 8010f1c:	881b      	ldrh	r3, [r3, #0]
 8010f1e:	2202      	movs	r2, #2
 8010f20:	2174      	movs	r1, #116	; 0x74
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f7ef ffe2 	bl	8000eec <PCA9539_WriteReg16>

   //=====================================================================================================
   // Status LEDs
   //=====================================================================================================
   if(nLEDTestSeqIndex > 0)
 8010f28:	4b48      	ldr	r3, [pc, #288]	; (801104c <I2CTask+0x70c>)
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d02b      	beq.n	8010f88 <I2CTask+0x648>
   {
     nLEDTestSeqValues = (0x00000001 << ((nLEDTestSeqIndex-1)*2));
 8010f30:	4b46      	ldr	r3, [pc, #280]	; (801104c <I2CTask+0x70c>)
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	3b01      	subs	r3, #1
 8010f36:	005b      	lsls	r3, r3, #1
 8010f38:	2201      	movs	r2, #1
 8010f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f3e:	461a      	mov	r2, r3
 8010f40:	4b43      	ldr	r3, [pc, #268]	; (8011050 <I2CTask+0x710>)
 8010f42:	601a      	str	r2, [r3, #0]

     PCA9635_SetAllNum(hi2c2, PCA9635_ADDRESS, nLEDTestSeqValues);
 8010f44:	4b42      	ldr	r3, [pc, #264]	; (8011050 <I2CTask+0x710>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	461a      	mov	r2, r3
 8010f4a:	2130      	movs	r1, #48	; 0x30
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f7f0 f87b 	bl	8001048 <PCA9635_SetAllNum>

     if((HAL_GetTick() - nLEDTestSeqLastTime) > LED_TEST_SEQ_DELAY)
 8010f52:	f7f1 fccb 	bl	80028ec <HAL_GetTick>
 8010f56:	4602      	mov	r2, r0
 8010f58:	4b3e      	ldr	r3, [pc, #248]	; (8011054 <I2CTask+0x714>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	1ad3      	subs	r3, r2, r3
 8010f5e:	2b32      	cmp	r3, #50	; 0x32
 8010f60:	d90a      	bls.n	8010f78 <I2CTask+0x638>
     {
       nLEDTestSeqLastTime = HAL_GetTick();
 8010f62:	f7f1 fcc3 	bl	80028ec <HAL_GetTick>
 8010f66:	4603      	mov	r3, r0
 8010f68:	4a3a      	ldr	r2, [pc, #232]	; (8011054 <I2CTask+0x714>)
 8010f6a:	6013      	str	r3, [r2, #0]
       nLEDTestSeqIndex++;
 8010f6c:	4b37      	ldr	r3, [pc, #220]	; (801104c <I2CTask+0x70c>)
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	3301      	adds	r3, #1
 8010f72:	b2da      	uxtb	r2, r3
 8010f74:	4b35      	ldr	r3, [pc, #212]	; (801104c <I2CTask+0x70c>)
 8010f76:	701a      	strb	r2, [r3, #0]
     }

     //Last step
     if(nLEDTestSeqIndex > 16)
 8010f78:	4b34      	ldr	r3, [pc, #208]	; (801104c <I2CTask+0x70c>)
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	2b10      	cmp	r3, #16
 8010f7e:	d950      	bls.n	8011022 <I2CTask+0x6e2>
       nLEDTestSeqIndex = 0;
 8010f80:	4b32      	ldr	r3, [pc, #200]	; (801104c <I2CTask+0x70c>)
 8010f82:	2200      	movs	r2, #0
 8010f84:	701a      	strb	r2, [r3, #0]
 8010f86:	e04c      	b.n	8011022 <I2CTask+0x6e2>
   }
   else
   {
     for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8010f88:	2300      	movs	r3, #0
 8010f8a:	613b      	str	r3, [r7, #16]
 8010f8c:	e00f      	b.n	8010fae <I2CTask+0x66e>
       SetPfStatusLed(&eStatusLeds[i], &pf[i]);
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	4a31      	ldr	r2, [pc, #196]	; (8011058 <I2CTask+0x718>)
 8010f92:	1898      	adds	r0, r3, r2
 8010f94:	693a      	ldr	r2, [r7, #16]
 8010f96:	4613      	mov	r3, r2
 8010f98:	00db      	lsls	r3, r3, #3
 8010f9a:	1a9b      	subs	r3, r3, r2
 8010f9c:	00db      	lsls	r3, r3, #3
 8010f9e:	4a2f      	ldr	r2, [pc, #188]	; (801105c <I2CTask+0x71c>)
 8010fa0:	4413      	add	r3, r2
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	f000 ff20 	bl	8011de8 <SetPfStatusLed>
     for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	3301      	adds	r3, #1
 8010fac:	613b      	str	r3, [r7, #16]
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	2b0b      	cmp	r3, #11
 8010fb2:	ddec      	ble.n	8010f8e <I2CTask+0x64e>
     }
     eStatusLeds[12] = (eDevMode == DEVICE_AUTO) + ((eDevMode == DEVICE_MANUAL) * LED_FLASH);              //State
 8010fb4:	4b2a      	ldr	r3, [pc, #168]	; (8011060 <I2CTask+0x720>)
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	bf0c      	ite	eq
 8010fbc:	2301      	moveq	r3, #1
 8010fbe:	2300      	movne	r3, #0
 8010fc0:	b2db      	uxtb	r3, r3
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	4b26      	ldr	r3, [pc, #152]	; (8011060 <I2CTask+0x720>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	2b01      	cmp	r3, #1
 8010fca:	d101      	bne.n	8010fd0 <I2CTask+0x690>
 8010fcc:	2303      	movs	r3, #3
 8010fce:	e000      	b.n	8010fd2 <I2CTask+0x692>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	4413      	add	r3, r2
 8010fd4:	b2da      	uxtb	r2, r3
 8010fd6:	4b20      	ldr	r3, [pc, #128]	; (8011058 <I2CTask+0x718>)
 8010fd8:	731a      	strb	r2, [r3, #12]
     eStatusLeds[13] = bUsbConnected;   //USB
 8010fda:	4b22      	ldr	r3, [pc, #136]	; (8011064 <I2CTask+0x724>)
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	461a      	mov	r2, r3
 8010fe0:	4b1d      	ldr	r3, [pc, #116]	; (8011058 <I2CTask+0x718>)
 8010fe2:	735a      	strb	r2, [r3, #13]
     eStatusLeds[14] = (HAL_GetTick() - nLastCanUpdate) < 1000;              //CAN
 8010fe4:	f7f1 fc82 	bl	80028ec <HAL_GetTick>
 8010fe8:	4602      	mov	r2, r0
 8010fea:	4b1f      	ldr	r3, [pc, #124]	; (8011068 <I2CTask+0x728>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	1ad3      	subs	r3, r2, r3
 8010ff0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	bf94      	ite	ls
 8010ff8:	2301      	movls	r3, #1
 8010ffa:	2300      	movhi	r3, #0
 8010ffc:	b2db      	uxtb	r3, r3
 8010ffe:	461a      	mov	r2, r3
 8011000:	4b15      	ldr	r3, [pc, #84]	; (8011058 <I2CTask+0x718>)
 8011002:	739a      	strb	r2, [r3, #14]
     eStatusLeds[15] = (eDevState == DEVICE_ERROR);   //Fault
 8011004:	4b19      	ldr	r3, [pc, #100]	; (801106c <I2CTask+0x72c>)
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	2b03      	cmp	r3, #3
 801100a:	bf0c      	ite	eq
 801100c:	2301      	moveq	r3, #1
 801100e:	2300      	movne	r3, #0
 8011010:	b2db      	uxtb	r3, r3
 8011012:	461a      	mov	r2, r3
 8011014:	4b10      	ldr	r3, [pc, #64]	; (8011058 <I2CTask+0x718>)
 8011016:	73da      	strb	r2, [r3, #15]
     PCA9635_SetAll(hi2c2, PCA9635_ADDRESS, eStatusLeds);
 8011018:	4a0f      	ldr	r2, [pc, #60]	; (8011058 <I2CTask+0x718>)
 801101a:	2130      	movs	r1, #48	; 0x30
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f7f0 f83a 	bl	8001096 <PCA9635_SetAll>
   }

   //Debug GPIO
   HAL_GPIO_TogglePin(EXTRA1_GPIO_Port, EXTRA1_Pin);
 8011022:	2104      	movs	r1, #4
 8011024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011028:	f7f3 fff2 	bl	8005010 <HAL_GPIO_TogglePin>

#ifdef MEAS_HEAP_USE
   __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

   osDelay(I2C_TASK_DELAY);
 801102c:	2005      	movs	r0, #5
 801102e:	f7fc fa57 	bl	800d4e0 <osDelay>
   nUserDigInputRaw = PCAL9554B_ReadReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_IN_PORT);
 8011032:	e55c      	b.n	8010aee <I2CTask+0x1ae>
 8011034:	200035f4 	.word	0x200035f4
 8011038:	48000400 	.word	0x48000400
 801103c:	200035e4 	.word	0x200035e4
 8011040:	200034f4 	.word	0x200034f4
 8011044:	20003564 	.word	0x20003564
 8011048:	200035d8 	.word	0x200035d8
 801104c:	20003628 	.word	0x20003628
 8011050:	2000362c 	.word	0x2000362c
 8011054:	20003630 	.word	0x20003630
 8011058:	20003618 	.word	0x20003618
 801105c:	20003334 	.word	0x20003334
 8011060:	20003330 	.word	0x20003330
 8011064:	20003608 	.word	0x20003608
 8011068:	2000367c 	.word	0x2000367c
 801106c:	20003331 	.word	0x20003331

08011070 <ProfetSMTask>:
 }
}


void ProfetSMTask(osThreadId_t* thisThreadId)
{
 8011070:	b590      	push	{r4, r7, lr}
 8011072:	b0a9      	sub	sp, #164	; 0xa4
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  Profet_Init();
 8011078:	f000 fefe 	bl	8011e78 <Profet_Init>

  MsgQueueUsbTx_t stMsgUsbTx;
  MsgQueueCanTx_t stMsgCanTx;

  RTC_TimeTypeDef stTime = {0};
 801107c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011080:	2200      	movs	r2, #0
 8011082:	601a      	str	r2, [r3, #0]
 8011084:	605a      	str	r2, [r3, #4]
 8011086:	609a      	str	r2, [r3, #8]
 8011088:	60da      	str	r2, [r3, #12]
 801108a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef stDate = {0};
 801108c:	2300      	movs	r3, #0
 801108e:	64bb      	str	r3, [r7, #72]	; 0x48

  uint8_t nSend;

  for(;;){
    for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8011090:	2300      	movs	r3, #0
 8011092:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011096:	e00f      	b.n	80110b8 <ProfetSMTask+0x48>
      Profet_SM(&pf[i]);
 8011098:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801109c:	4613      	mov	r3, r2
 801109e:	00db      	lsls	r3, r3, #3
 80110a0:	1a9b      	subs	r3, r3, r2
 80110a2:	00db      	lsls	r3, r3, #3
 80110a4:	4aad      	ldr	r2, [pc, #692]	; (801135c <ProfetSMTask+0x2ec>)
 80110a6:	4413      	add	r3, r2
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7f0 faa5 	bl	80015f8 <Profet_SM>
    for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 80110ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80110b2:	3301      	adds	r3, #1
 80110b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80110b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80110bc:	2b0b      	cmp	r3, #11
 80110be:	ddeb      	ble.n	8011098 <ProfetSMTask+0x28>
    }
    //WiperSM(&stWiper);
    MsgQueueRx_t stMsgRx;
    osStatus_t eStatus;

    nMsgCnt = osMessageQueueGetCount(qMsgQueueRx);
 80110c0:	4ba7      	ldr	r3, [pc, #668]	; (8011360 <ProfetSMTask+0x2f0>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7fc fba5 	bl	800d814 <osMessageQueueGetCount>
 80110ca:	4603      	mov	r3, r0
 80110cc:	4aa5      	ldr	r2, [pc, #660]	; (8011364 <ProfetSMTask+0x2f4>)
 80110ce:	6013      	str	r3, [r2, #0]
    if(nMsgCnt == 16)
      EXTRA2_GPIO_Port->ODR |= EXTRA2_Pin;
    else
      EXTRA2_GPIO_Port->ODR &= ~EXTRA2_Pin;
*/
    eStatus = osMessageQueueGet(qMsgQueueRx, &stMsgRx, NULL, 0U);
 80110d0:	4ba3      	ldr	r3, [pc, #652]	; (8011360 <ProfetSMTask+0x2f0>)
 80110d2:	6818      	ldr	r0, [r3, #0]
 80110d4:	f107 010c 	add.w	r1, r7, #12
 80110d8:	2300      	movs	r3, #0
 80110da:	2200      	movs	r2, #0
 80110dc:	f7fc fb28 	bl	800d730 <osMessageQueueGet>
 80110e0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if(eStatus == osOK){
 80110e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	f040 839e 	bne.w	801182a <ProfetSMTask+0x7ba>
      if(stMsgRx.eMsgSrc == CAN_RX){
 80110ee:	7b3b      	ldrb	r3, [r7, #12]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d126      	bne.n	8011142 <ProfetSMTask+0xd2>
        for(int i=0; i<PDM_NUM_CAN_INPUTS; i++){
 80110f4:	2300      	movs	r3, #0
 80110f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80110fa:	e01e      	b.n	801113a <ProfetSMTask+0xca>
          EvaluateCANInput(&stMsgRx.stCanRxHeader, stMsgRx.nRxData, &stPdmConfig.stCanInput[i], &nCanInputs[i]);
 80110fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011100:	4613      	mov	r3, r2
 8011102:	00db      	lsls	r3, r3, #3
 8011104:	1a9b      	subs	r3, r3, r2
 8011106:	009b      	lsls	r3, r3, #2
 8011108:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 801110c:	4a96      	ldr	r2, [pc, #600]	; (8011368 <ProfetSMTask+0x2f8>)
 801110e:	4413      	add	r3, r2
 8011110:	1d1a      	adds	r2, r3, #4
 8011112:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011116:	005b      	lsls	r3, r3, #1
 8011118:	4994      	ldr	r1, [pc, #592]	; (801136c <ProfetSMTask+0x2fc>)
 801111a:	185c      	adds	r4, r3, r1
 801111c:	f107 030c 	add.w	r3, r7, #12
 8011120:	f103 0120 	add.w	r1, r3, #32
 8011124:	f107 030c 	add.w	r3, r7, #12
 8011128:	1d18      	adds	r0, r3, #4
 801112a:	4623      	mov	r3, r4
 801112c:	f7fe ff4a 	bl	800ffc4 <EvaluateCANInput>
        for(int i=0; i<PDM_NUM_CAN_INPUTS; i++){
 8011130:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011134:	3301      	adds	r3, #1
 8011136:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801113a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801113e:	2b1d      	cmp	r3, #29
 8011140:	dddc      	ble.n	80110fc <ProfetSMTask+0x8c>
        }
      }
      if((stMsgRx.eMsgSrc == CAN_RX && stMsgRx.stCanRxHeader.StdId == stPdmConfig.stCanOutput.nBaseId + 21) || (stMsgRx.eMsgSrc == USB_RX)){
 8011142:	7b3b      	ldrb	r3, [r7, #12]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d106      	bne.n	8011156 <ProfetSMTask+0xe6>
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	4a87      	ldr	r2, [pc, #540]	; (8011368 <ProfetSMTask+0x2f8>)
 801114c:	f8b2 28d6 	ldrh.w	r2, [r2, #2262]	; 0x8d6
 8011150:	3215      	adds	r2, #21
 8011152:	4293      	cmp	r3, r2
 8011154:	d003      	beq.n	801115e <ProfetSMTask+0xee>
 8011156:	7b3b      	ldrb	r3, [r7, #12]
 8011158:	2b01      	cmp	r3, #1
 801115a:	f040 8366 	bne.w	801182a <ProfetSMTask+0x7ba>
        //EXTRA2_GPIO_Port->ODR ^= EXTRA2_Pin;

        nSend = 0;
 801115e:	2300      	movs	r3, #0
 8011160:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

        switch((MsgQueueRxCmd_t)stMsgRx.nRxData[0]){
 8011164:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011168:	3b42      	subs	r3, #66	; 0x42
 801116a:	2b12      	cmp	r3, #18
 801116c:	f200 8355 	bhi.w	801181a <ProfetSMTask+0x7aa>
 8011170:	a201      	add	r2, pc, #4	; (adr r2, 8011178 <ProfetSMTask+0x108>)
 8011172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011176:	bf00      	nop
 8011178:	080111c5 	.word	0x080111c5
 801117c:	0801181b 	.word	0x0801181b
 8011180:	0801181b 	.word	0x0801181b
 8011184:	0801181b 	.word	0x0801181b
 8011188:	08011775 	.word	0x08011775
 801118c:	0801181b 	.word	0x0801181b
 8011190:	0801181b 	.word	0x0801181b
 8011194:	0801181b 	.word	0x0801181b
 8011198:	0801181b 	.word	0x0801181b
 801119c:	0801181b 	.word	0x0801181b
 80111a0:	0801181b 	.word	0x0801181b
 80111a4:	08011263 	.word	0x08011263
 80111a8:	0801181b 	.word	0x0801181b
 80111ac:	0801181b 	.word	0x0801181b
 80111b0:	0801181b 	.word	0x0801181b
 80111b4:	08011381 	.word	0x08011381
 80111b8:	080115bd 	.word	0x080115bd
 80111bc:	0801181b 	.word	0x0801181b
 80111c0:	08011695 	.word	0x08011695

            //Burn Settings
            // 'B'
            case MSG_RX_BURN_SETTINGS:
              //Check special number sequence
              if(stMsgRx.nRxLen == 4){
 80111c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80111c8:	2b04      	cmp	r3, #4
 80111ca:	f040 8330 	bne.w	801182e <ProfetSMTask+0x7be>
                if((stMsgRx.nRxData[1] == 1) && (stMsgRx.nRxData[2] == 23) && (stMsgRx.nRxData[3] == 20)){
 80111ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	f040 832b 	bne.w	801182e <ProfetSMTask+0x7be>
 80111d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80111dc:	2b17      	cmp	r3, #23
 80111de:	f040 8326 	bne.w	801182e <ProfetSMTask+0x7be>
 80111e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111e6:	2b14      	cmp	r3, #20
 80111e8:	f040 8321 	bne.w	801182e <ProfetSMTask+0x7be>
                  //Write settings to FRAM
                  //uint8_t nRet = PdmConfig_Write(hi2c2, MB85RC_ADDRESS, &stPdmConfig);
                  //TODO: Use flag to I2C task

                  stMsgUsbTx.nTxLen = 2;
 80111ec:	2302      	movs	r3, #2
 80111ee:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                  stMsgCanTx.stTxHeader.DLC = 2;
 80111f2:	2302      	movs	r3, #2
 80111f4:	673b      	str	r3, [r7, #112]	; 0x70

                  stMsgUsbTx.nTxData[0] = MSG_TX_BURN_SETTINGS;
 80111f6:	2362      	movs	r3, #98	; 0x62
 80111f8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
                  stMsgUsbTx.nTxData[1] = 0;// nRet;
 80111fc:	2300      	movs	r3, #0
 80111fe:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
                  stMsgUsbTx.nTxData[2] = 0;
 8011202:	2300      	movs	r3, #0
 8011204:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                  stMsgUsbTx.nTxData[3] = 0;
 8011208:	2300      	movs	r3, #0
 801120a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                  stMsgUsbTx.nTxData[4] = 0;
 801120e:	2300      	movs	r3, #0
 8011210:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                  stMsgUsbTx.nTxData[5] = 0;
 8011214:	2300      	movs	r3, #0
 8011216:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                  stMsgUsbTx.nTxData[6] = 0;
 801121a:	2300      	movs	r3, #0
 801121c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                  stMsgUsbTx.nTxData[7] = 0;
 8011220:	2300      	movs	r3, #0
 8011222:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                  stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8011226:	4b50      	ldr	r3, [pc, #320]	; (8011368 <ProfetSMTask+0x2f8>)
 8011228:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 801122c:	3314      	adds	r3, #20
 801122e:	663b      	str	r3, [r7, #96]	; 0x60

                  memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8011230:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011234:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8011238:	e892 0003 	ldmia.w	r2, {r0, r1}
 801123c:	e883 0003 	stmia.w	r3, {r0, r1}

                  osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8011240:	4b4b      	ldr	r3, [pc, #300]	; (8011370 <ProfetSMTask+0x300>)
 8011242:	6818      	ldr	r0, [r3, #0]
 8011244:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8011248:	2300      	movs	r3, #0
 801124a:	2200      	movs	r2, #0
 801124c:	f7fc f9fc 	bl	800d648 <osMessageQueuePut>
                  osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8011250:	4b48      	ldr	r3, [pc, #288]	; (8011374 <ProfetSMTask+0x304>)
 8011252:	6818      	ldr	r0, [r3, #0]
 8011254:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8011258:	2300      	movs	r3, #0
 801125a:	2200      	movs	r2, #0
 801125c:	f7fc f9f4 	bl	800d648 <osMessageQueuePut>
                }
              }
            break;
 8011260:	e2e5      	b.n	801182e <ProfetSMTask+0x7be>

           //Set Mode
           // 'M'
           case MSG_RX_SET_MODE:
             if(stMsgRx.nRxLen == 2){
 8011262:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011266:	2b02      	cmp	r3, #2
 8011268:	d133      	bne.n	80112d2 <ProfetSMTask+0x262>
               switch(eDevMode){
 801126a:	4b43      	ldr	r3, [pc, #268]	; (8011378 <ProfetSMTask+0x308>)
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d002      	beq.n	8011278 <ProfetSMTask+0x208>
 8011272:	2b01      	cmp	r3, #1
 8011274:	d01d      	beq.n	80112b2 <ProfetSMTask+0x242>
 8011276:	e029      	b.n	80112cc <ProfetSMTask+0x25c>
               case DEVICE_AUTO:
                 if(stMsgRx.nRxData[1] & 0x01){ //Manual sent
 8011278:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801127c:	f003 0301 	and.w	r3, r3, #1
 8011280:	2b00      	cmp	r3, #0
 8011282:	d020      	beq.n	80112c6 <ProfetSMTask+0x256>
                   for(int i=0; i<12; i++)
 8011284:	2300      	movs	r3, #0
 8011286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801128a:	e00a      	b.n	80112a2 <ProfetSMTask+0x232>
                     nManualOutputs[i] = 0;
 801128c:	4a3b      	ldr	r2, [pc, #236]	; (801137c <ProfetSMTask+0x30c>)
 801128e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011292:	4413      	add	r3, r2
 8011294:	2200      	movs	r2, #0
 8011296:	701a      	strb	r2, [r3, #0]
                   for(int i=0; i<12; i++)
 8011298:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801129c:	3301      	adds	r3, #1
 801129e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80112a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80112a6:	2b0b      	cmp	r3, #11
 80112a8:	ddf0      	ble.n	801128c <ProfetSMTask+0x21c>
                   eDevMode = DEVICE_MANUAL;
 80112aa:	4b33      	ldr	r3, [pc, #204]	; (8011378 <ProfetSMTask+0x308>)
 80112ac:	2201      	movs	r2, #1
 80112ae:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 80112b0:	e009      	b.n	80112c6 <ProfetSMTask+0x256>

               case DEVICE_MANUAL:
                 if(!(stMsgRx.nRxData[1] & 0x01)){ //Auto sent
 80112b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80112b6:	f003 0301 	and.w	r3, r3, #1
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d105      	bne.n	80112ca <ProfetSMTask+0x25a>
                   eDevMode = DEVICE_AUTO;
 80112be:	4b2e      	ldr	r3, [pc, #184]	; (8011378 <ProfetSMTask+0x308>)
 80112c0:	2200      	movs	r2, #0
 80112c2:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 80112c4:	e001      	b.n	80112ca <ProfetSMTask+0x25a>
                 break;
 80112c6:	bf00      	nop
 80112c8:	e000      	b.n	80112cc <ProfetSMTask+0x25c>
                 break;
 80112ca:	bf00      	nop
               }
               nSend = 1;
 80112cc:	2301      	movs	r3, #1
 80112ce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
             }

             if((stMsgRx.nRxLen == 1) || (nSend)){
 80112d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	d004      	beq.n	80112e4 <ProfetSMTask+0x274>
 80112da:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80112de:	2b00      	cmp	r3, #0
 80112e0:	f000 82a7 	beq.w	8011832 <ProfetSMTask+0x7c2>
               stMsgUsbTx.nTxLen = 2;
 80112e4:	2302      	movs	r3, #2
 80112e6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgCanTx.stTxHeader.DLC = 2;
 80112ea:	2302      	movs	r3, #2
 80112ec:	673b      	str	r3, [r7, #112]	; 0x70

               stMsgUsbTx.nTxData[0] = MSG_TX_SET_MODE;
 80112ee:	236d      	movs	r3, #109	; 0x6d
 80112f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
               stMsgUsbTx.nTxData[1] = (uint8_t)eDevMode;
 80112f4:	4b20      	ldr	r3, [pc, #128]	; (8011378 <ProfetSMTask+0x308>)
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
               stMsgUsbTx.nTxData[2] = 0;
 80112fc:	2300      	movs	r3, #0
 80112fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
               stMsgUsbTx.nTxData[3] = 0;
 8011302:	2300      	movs	r3, #0
 8011304:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
               stMsgUsbTx.nTxData[4] = 0;
 8011308:	2300      	movs	r3, #0
 801130a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
               stMsgUsbTx.nTxData[5] = 0;
 801130e:	2300      	movs	r3, #0
 8011310:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
               stMsgUsbTx.nTxData[6] = 0;
 8011314:	2300      	movs	r3, #0
 8011316:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
               stMsgUsbTx.nTxData[7] = 0;
 801131a:	2300      	movs	r3, #0
 801131c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8011320:	4b11      	ldr	r3, [pc, #68]	; (8011368 <ProfetSMTask+0x2f8>)
 8011322:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8011326:	3314      	adds	r3, #20
 8011328:	663b      	str	r3, [r7, #96]	; 0x60

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 801132a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801132e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8011332:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011336:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 801133a:	4b0d      	ldr	r3, [pc, #52]	; (8011370 <ProfetSMTask+0x300>)
 801133c:	6818      	ldr	r0, [r3, #0]
 801133e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8011342:	2300      	movs	r3, #0
 8011344:	2200      	movs	r2, #0
 8011346:	f7fc f97f 	bl	800d648 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 801134a:	4b0a      	ldr	r3, [pc, #40]	; (8011374 <ProfetSMTask+0x304>)
 801134c:	6818      	ldr	r0, [r3, #0]
 801134e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8011352:	2300      	movs	r3, #0
 8011354:	2200      	movs	r2, #0
 8011356:	f7fc f977 	bl	800d648 <osMessageQueuePut>
             }
           break;
 801135a:	e26a      	b.n	8011832 <ProfetSMTask+0x7c2>
 801135c:	20003334 	.word	0x20003334
 8011360:	20003324 	.word	0x20003324
 8011364:	200038e4 	.word	0x200038e4
 8011368:	20002a48 	.word	0x20002a48
 801136c:	20003838 	.word	0x20003838
 8011370:	20003328 	.word	0x20003328
 8011374:	2000332c 	.word	0x2000332c
 8011378:	20003330 	.word	0x20003330
 801137c:	20004bac 	.word	0x20004bac


           //Force Outputs
           // 'Q'
           case MSG_RX_FORCE_OUTPUTS:
             if(stMsgRx.nRxLen == 7){
 8011380:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011384:	2b07      	cmp	r3, #7
 8011386:	d16b      	bne.n	8011460 <ProfetSMTask+0x3f0>
               if(eDevMode == DEVICE_MANUAL){
 8011388:	4b87      	ldr	r3, [pc, #540]	; (80115a8 <ProfetSMTask+0x538>)
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	2b01      	cmp	r3, #1
 801138e:	d167      	bne.n	8011460 <ProfetSMTask+0x3f0>
                 nManualOutputs[0] = (stMsgRx.nRxData[1] & 0x01);
 8011390:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011394:	f003 0301 	and.w	r3, r3, #1
 8011398:	b2da      	uxtb	r2, r3
 801139a:	4b84      	ldr	r3, [pc, #528]	; (80115ac <ProfetSMTask+0x53c>)
 801139c:	701a      	strb	r2, [r3, #0]
                 nManualOutputs[1] = (stMsgRx.nRxData[1] & 0x02) >> 1;
 801139e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80113a2:	105b      	asrs	r3, r3, #1
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	f003 0301 	and.w	r3, r3, #1
 80113aa:	b2da      	uxtb	r2, r3
 80113ac:	4b7f      	ldr	r3, [pc, #508]	; (80115ac <ProfetSMTask+0x53c>)
 80113ae:	705a      	strb	r2, [r3, #1]
                 nManualOutputs[2] = (stMsgRx.nRxData[1] & 0x04) >> 2;
 80113b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80113b4:	109b      	asrs	r3, r3, #2
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	f003 0301 	and.w	r3, r3, #1
 80113bc:	b2da      	uxtb	r2, r3
 80113be:	4b7b      	ldr	r3, [pc, #492]	; (80115ac <ProfetSMTask+0x53c>)
 80113c0:	709a      	strb	r2, [r3, #2]
                 nManualOutputs[3] = (stMsgRx.nRxData[1] & 0x08) >> 3;
 80113c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80113c6:	10db      	asrs	r3, r3, #3
 80113c8:	b2db      	uxtb	r3, r3
 80113ca:	f003 0301 	and.w	r3, r3, #1
 80113ce:	b2da      	uxtb	r2, r3
 80113d0:	4b76      	ldr	r3, [pc, #472]	; (80115ac <ProfetSMTask+0x53c>)
 80113d2:	70da      	strb	r2, [r3, #3]
                 nManualOutputs[4] = (stMsgRx.nRxData[1] & 0x10) >> 4;
 80113d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80113d8:	111b      	asrs	r3, r3, #4
 80113da:	b2db      	uxtb	r3, r3
 80113dc:	f003 0301 	and.w	r3, r3, #1
 80113e0:	b2da      	uxtb	r2, r3
 80113e2:	4b72      	ldr	r3, [pc, #456]	; (80115ac <ProfetSMTask+0x53c>)
 80113e4:	711a      	strb	r2, [r3, #4]
                 nManualOutputs[5] = (stMsgRx.nRxData[1] & 0x20) >> 5;
 80113e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80113ea:	115b      	asrs	r3, r3, #5
 80113ec:	b2db      	uxtb	r3, r3
 80113ee:	f003 0301 	and.w	r3, r3, #1
 80113f2:	b2da      	uxtb	r2, r3
 80113f4:	4b6d      	ldr	r3, [pc, #436]	; (80115ac <ProfetSMTask+0x53c>)
 80113f6:	715a      	strb	r2, [r3, #5]
                 nManualOutputs[6] = (stMsgRx.nRxData[1] & 0x40) >> 6;
 80113f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80113fc:	119b      	asrs	r3, r3, #6
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	f003 0301 	and.w	r3, r3, #1
 8011404:	b2da      	uxtb	r2, r3
 8011406:	4b69      	ldr	r3, [pc, #420]	; (80115ac <ProfetSMTask+0x53c>)
 8011408:	719a      	strb	r2, [r3, #6]
                 nManualOutputs[7] = (stMsgRx.nRxData[1] & 0x80) >> 7;
 801140a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801140e:	09db      	lsrs	r3, r3, #7
 8011410:	b2da      	uxtb	r2, r3
 8011412:	4b66      	ldr	r3, [pc, #408]	; (80115ac <ProfetSMTask+0x53c>)
 8011414:	71da      	strb	r2, [r3, #7]
                 nManualOutputs[8] = (stMsgRx.nRxData[2] & 0x01);
 8011416:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801141a:	f003 0301 	and.w	r3, r3, #1
 801141e:	b2da      	uxtb	r2, r3
 8011420:	4b62      	ldr	r3, [pc, #392]	; (80115ac <ProfetSMTask+0x53c>)
 8011422:	721a      	strb	r2, [r3, #8]
                 nManualOutputs[9] = (stMsgRx.nRxData[2] & 0x02) >> 1;
 8011424:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011428:	105b      	asrs	r3, r3, #1
 801142a:	b2db      	uxtb	r3, r3
 801142c:	f003 0301 	and.w	r3, r3, #1
 8011430:	b2da      	uxtb	r2, r3
 8011432:	4b5e      	ldr	r3, [pc, #376]	; (80115ac <ProfetSMTask+0x53c>)
 8011434:	725a      	strb	r2, [r3, #9]
                 nManualOutputs[10] = (stMsgRx.nRxData[2] & 0x04) >> 2;
 8011436:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801143a:	109b      	asrs	r3, r3, #2
 801143c:	b2db      	uxtb	r3, r3
 801143e:	f003 0301 	and.w	r3, r3, #1
 8011442:	b2da      	uxtb	r2, r3
 8011444:	4b59      	ldr	r3, [pc, #356]	; (80115ac <ProfetSMTask+0x53c>)
 8011446:	729a      	strb	r2, [r3, #10]
                 nManualOutputs[11] = (stMsgRx.nRxData[2] & 0x08) >> 3;
 8011448:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801144c:	10db      	asrs	r3, r3, #3
 801144e:	b2db      	uxtb	r3, r3
 8011450:	f003 0301 	and.w	r3, r3, #1
 8011454:	b2da      	uxtb	r2, r3
 8011456:	4b55      	ldr	r3, [pc, #340]	; (80115ac <ProfetSMTask+0x53c>)
 8011458:	72da      	strb	r2, [r3, #11]
                 nSend = 1;
 801145a:	2301      	movs	r3, #1
 801145c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
               }
             }
             if((stMsgRx.nRxLen == 1) || (nSend)){
 8011460:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011464:	2b01      	cmp	r3, #1
 8011466:	d004      	beq.n	8011472 <ProfetSMTask+0x402>
 8011468:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801146c:	2b00      	cmp	r3, #0
 801146e:	f000 81e2 	beq.w	8011836 <ProfetSMTask+0x7c6>
               stMsgUsbTx.nTxLen = 7;
 8011472:	2307      	movs	r3, #7
 8011474:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgCanTx.stTxHeader.DLC = 7;
 8011478:	2307      	movs	r3, #7
 801147a:	673b      	str	r3, [r7, #112]	; 0x70

               stMsgUsbTx.nTxData[0] = MSG_TX_FORCE_OUTPUTS;
 801147c:	2371      	movs	r3, #113	; 0x71
 801147e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8011482:	4b4a      	ldr	r3, [pc, #296]	; (80115ac <ProfetSMTask+0x53c>)
 8011484:	79db      	ldrb	r3, [r3, #7]
 8011486:	01db      	lsls	r3, r3, #7
 8011488:	b2da      	uxtb	r2, r3
 801148a:	4b48      	ldr	r3, [pc, #288]	; (80115ac <ProfetSMTask+0x53c>)
 801148c:	799b      	ldrb	r3, [r3, #6]
 801148e:	019b      	lsls	r3, r3, #6
 8011490:	b2db      	uxtb	r3, r3
 8011492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011496:	b2db      	uxtb	r3, r3
 8011498:	4413      	add	r3, r2
 801149a:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 801149c:	4b43      	ldr	r3, [pc, #268]	; (80115ac <ProfetSMTask+0x53c>)
 801149e:	795b      	ldrb	r3, [r3, #5]
 80114a0:	015b      	lsls	r3, r3, #5
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	f003 0320 	and.w	r3, r3, #32
 80114a8:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 80114aa:	4413      	add	r3, r2
 80114ac:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 80114ae:	4b3f      	ldr	r3, [pc, #252]	; (80115ac <ProfetSMTask+0x53c>)
 80114b0:	791b      	ldrb	r3, [r3, #4]
 80114b2:	011b      	lsls	r3, r3, #4
 80114b4:	b2db      	uxtb	r3, r3
 80114b6:	f003 0310 	and.w	r3, r3, #16
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	4413      	add	r3, r2
 80114be:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 80114c0:	4b3a      	ldr	r3, [pc, #232]	; (80115ac <ProfetSMTask+0x53c>)
 80114c2:	78db      	ldrb	r3, [r3, #3]
 80114c4:	00db      	lsls	r3, r3, #3
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	f003 0308 	and.w	r3, r3, #8
 80114cc:	b2db      	uxtb	r3, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 80114ce:	4413      	add	r3, r2
 80114d0:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 80114d2:	4b36      	ldr	r3, [pc, #216]	; (80115ac <ProfetSMTask+0x53c>)
 80114d4:	789b      	ldrb	r3, [r3, #2]
 80114d6:	009b      	lsls	r3, r3, #2
 80114d8:	b2db      	uxtb	r3, r3
 80114da:	f003 0304 	and.w	r3, r3, #4
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	4413      	add	r3, r2
 80114e2:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[1] & 0x01) << 1) + (nManualOutputs[0] & 0x01);
 80114e4:	4b31      	ldr	r3, [pc, #196]	; (80115ac <ProfetSMTask+0x53c>)
 80114e6:	785b      	ldrb	r3, [r3, #1]
 80114e8:	005b      	lsls	r3, r3, #1
 80114ea:	b2db      	uxtb	r3, r3
 80114ec:	f003 0302 	and.w	r3, r3, #2
 80114f0:	b2db      	uxtb	r3, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 80114f2:	4413      	add	r3, r2
 80114f4:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[1] & 0x01) << 1) + (nManualOutputs[0] & 0x01);
 80114f6:	4b2d      	ldr	r3, [pc, #180]	; (80115ac <ProfetSMTask+0x53c>)
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	f003 0301 	and.w	r3, r3, #1
 80114fe:	b2db      	uxtb	r3, r3
 8011500:	4413      	add	r3, r2
 8011502:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8011504:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8011508:	4b28      	ldr	r3, [pc, #160]	; (80115ac <ProfetSMTask+0x53c>)
 801150a:	7adb      	ldrb	r3, [r3, #11]
 801150c:	00db      	lsls	r3, r3, #3
 801150e:	b25b      	sxtb	r3, r3
 8011510:	f003 0308 	and.w	r3, r3, #8
 8011514:	b25a      	sxtb	r2, r3
 8011516:	4b25      	ldr	r3, [pc, #148]	; (80115ac <ProfetSMTask+0x53c>)
 8011518:	7a9b      	ldrb	r3, [r3, #10]
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	b25b      	sxtb	r3, r3
 801151e:	f003 0304 	and.w	r3, r3, #4
 8011522:	b25b      	sxtb	r3, r3
 8011524:	4313      	orrs	r3, r2
 8011526:	b25b      	sxtb	r3, r3
 8011528:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[9] & 0x01) << 1) + (nManualOutputs[8] & 0x01);
 801152a:	4b20      	ldr	r3, [pc, #128]	; (80115ac <ProfetSMTask+0x53c>)
 801152c:	7a5b      	ldrb	r3, [r3, #9]
 801152e:	005b      	lsls	r3, r3, #1
 8011530:	b2db      	uxtb	r3, r3
 8011532:	f003 0302 	and.w	r3, r3, #2
 8011536:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8011538:	4413      	add	r3, r2
 801153a:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[9] & 0x01) << 1) + (nManualOutputs[8] & 0x01);
 801153c:	4b1b      	ldr	r3, [pc, #108]	; (80115ac <ProfetSMTask+0x53c>)
 801153e:	7a1b      	ldrb	r3, [r3, #8]
 8011540:	f003 0301 	and.w	r3, r3, #1
 8011544:	b2db      	uxtb	r3, r3
 8011546:	4413      	add	r3, r2
 8011548:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 801154a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

               //TODO:Add manual output modes
               stMsgUsbTx.nTxData[3] = 0;
 801154e:	2300      	movs	r3, #0
 8011550:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
               stMsgUsbTx.nTxData[4] = 0;
 8011554:	2300      	movs	r3, #0
 8011556:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
               stMsgUsbTx.nTxData[5] = 0;
 801155a:	2300      	movs	r3, #0
 801155c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
               stMsgUsbTx.nTxData[6] = 0;
 8011560:	2300      	movs	r3, #0
 8011562:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
               stMsgUsbTx.nTxData[7] = 0;
 8011566:	2300      	movs	r3, #0
 8011568:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 801156c:	4b10      	ldr	r3, [pc, #64]	; (80115b0 <ProfetSMTask+0x540>)
 801156e:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8011572:	3314      	adds	r3, #20
 8011574:	663b      	str	r3, [r7, #96]	; 0x60

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8011576:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801157a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801157e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011582:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8011586:	4b0b      	ldr	r3, [pc, #44]	; (80115b4 <ProfetSMTask+0x544>)
 8011588:	6818      	ldr	r0, [r3, #0]
 801158a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 801158e:	2300      	movs	r3, #0
 8011590:	2200      	movs	r2, #0
 8011592:	f7fc f859 	bl	800d648 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8011596:	4b08      	ldr	r3, [pc, #32]	; (80115b8 <ProfetSMTask+0x548>)
 8011598:	6818      	ldr	r0, [r3, #0]
 801159a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801159e:	2300      	movs	r3, #0
 80115a0:	2200      	movs	r2, #0
 80115a2:	f7fc f851 	bl	800d648 <osMessageQueuePut>
             }
           break;
 80115a6:	e146      	b.n	8011836 <ProfetSMTask+0x7c6>
 80115a8:	20003330 	.word	0x20003330
 80115ac:	20004bac 	.word	0x20004bac
 80115b0:	20002a48 	.word	0x20002a48
 80115b4:	20003328 	.word	0x20003328
 80115b8:	2000332c 	.word	0x2000332c

           //Set Reporting
           // 'R'
           case MSG_RX_SET_REPORTING:
             if(stMsgRx.nRxLen == 3){
 80115bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80115c0:	2b03      	cmp	r3, #3
 80115c2:	d118      	bne.n	80115f6 <ProfetSMTask+0x586>
               nReportingOn = stMsgRx.nRxData[1] & 0x01;
 80115c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80115c8:	f003 0301 	and.w	r3, r3, #1
 80115cc:	b2da      	uxtb	r2, r3
 80115ce:	4bab      	ldr	r3, [pc, #684]	; (801187c <ProfetSMTask+0x80c>)
 80115d0:	701a      	strb	r2, [r3, #0]
               nReportingDelay = stMsgRx.nRxData[2] * 100;
 80115d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	461a      	mov	r2, r3
 80115da:	0092      	lsls	r2, r2, #2
 80115dc:	4413      	add	r3, r2
 80115de:	461a      	mov	r2, r3
 80115e0:	0091      	lsls	r1, r2, #2
 80115e2:	461a      	mov	r2, r3
 80115e4:	460b      	mov	r3, r1
 80115e6:	4413      	add	r3, r2
 80115e8:	009b      	lsls	r3, r3, #2
 80115ea:	b29a      	uxth	r2, r3
 80115ec:	4ba4      	ldr	r3, [pc, #656]	; (8011880 <ProfetSMTask+0x810>)
 80115ee:	801a      	strh	r2, [r3, #0]
               nSend = 1;
 80115f0:	2301      	movs	r3, #1
 80115f2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
             }
             if((stMsgRx.nRxLen == 1) || (nSend)){
 80115f6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d004      	beq.n	8011608 <ProfetSMTask+0x598>
 80115fe:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011602:	2b00      	cmp	r3, #0
 8011604:	f000 8119 	beq.w	801183a <ProfetSMTask+0x7ca>
               stMsgUsbTx.nTxLen = 3;
 8011608:	2303      	movs	r3, #3
 801160a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgCanTx.stTxHeader.DLC = 3;
 801160e:	2303      	movs	r3, #3
 8011610:	673b      	str	r3, [r7, #112]	; 0x70

               stMsgUsbTx.nTxData[0] = MSG_TX_SET_REPORTING;
 8011612:	2372      	movs	r3, #114	; 0x72
 8011614:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
               stMsgUsbTx.nTxData[1] = (nReportingOn & 0x01);
 8011618:	4b98      	ldr	r3, [pc, #608]	; (801187c <ProfetSMTask+0x80c>)
 801161a:	781b      	ldrb	r3, [r3, #0]
 801161c:	f003 0301 	and.w	r3, r3, #1
 8011620:	b2db      	uxtb	r3, r3
 8011622:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
               stMsgUsbTx.nTxData[2] = (uint8_t)(nReportingDelay / 100);
 8011626:	4b96      	ldr	r3, [pc, #600]	; (8011880 <ProfetSMTask+0x810>)
 8011628:	881b      	ldrh	r3, [r3, #0]
 801162a:	4a96      	ldr	r2, [pc, #600]	; (8011884 <ProfetSMTask+0x814>)
 801162c:	fba2 2303 	umull	r2, r3, r2, r3
 8011630:	095b      	lsrs	r3, r3, #5
 8011632:	b29b      	uxth	r3, r3
 8011634:	b2db      	uxtb	r3, r3
 8011636:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
               stMsgUsbTx.nTxData[3] = 0;
 801163a:	2300      	movs	r3, #0
 801163c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
               stMsgUsbTx.nTxData[4] = 0;
 8011640:	2300      	movs	r3, #0
 8011642:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
               stMsgUsbTx.nTxData[5] = 0;
 8011646:	2300      	movs	r3, #0
 8011648:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
               stMsgUsbTx.nTxData[6] = 0;
 801164c:	2300      	movs	r3, #0
 801164e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
               stMsgUsbTx.nTxData[7] = 0;
 8011652:	2300      	movs	r3, #0
 8011654:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8011658:	4b8b      	ldr	r3, [pc, #556]	; (8011888 <ProfetSMTask+0x818>)
 801165a:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 801165e:	3314      	adds	r3, #20
 8011660:	663b      	str	r3, [r7, #96]	; 0x60

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8011662:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011666:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801166a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801166e:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8011672:	4b86      	ldr	r3, [pc, #536]	; (801188c <ProfetSMTask+0x81c>)
 8011674:	6818      	ldr	r0, [r3, #0]
 8011676:	f107 0180 	add.w	r1, r7, #128	; 0x80
 801167a:	2300      	movs	r3, #0
 801167c:	2200      	movs	r2, #0
 801167e:	f7fb ffe3 	bl	800d648 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8011682:	4b83      	ldr	r3, [pc, #524]	; (8011890 <ProfetSMTask+0x820>)
 8011684:	6818      	ldr	r0, [r3, #0]
 8011686:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801168a:	2300      	movs	r3, #0
 801168c:	2200      	movs	r2, #0
 801168e:	f7fb ffdb 	bl	800d648 <osMessageQueuePut>
             }
           break;
 8011692:	e0d2      	b.n	801183a <ProfetSMTask+0x7ca>

           //Set Time
           // 'T'
           case MSG_RX_SET_TIME:
             if(stMsgRx.nRxLen == 7){
 8011694:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011698:	2b07      	cmp	r3, #7
 801169a:	d121      	bne.n	80116e0 <ProfetSMTask+0x670>
               stTime.Hours = stMsgRx.nRxData[1];
 801169c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80116a0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
               stTime.Minutes = stMsgRx.nRxData[2];
 80116a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80116a8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
               stTime.Seconds = stMsgRx.nRxData[3];
 80116ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116b0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
               stTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80116b4:	2300      	movs	r3, #0
 80116b6:	65bb      	str	r3, [r7, #88]	; 0x58
               stTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80116b8:	2300      	movs	r3, #0
 80116ba:	65fb      	str	r3, [r7, #92]	; 0x5c

               stDate.Year = stMsgRx.nRxData[4];
 80116bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80116c0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
               stDate.Month = stMsgRx.nRxData[5];
 80116c4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80116c8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
               stDate.Date = stMsgRx.nRxData[6];
 80116cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80116d0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
               stDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80116d4:	2301      	movs	r3, #1
 80116d6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

               //HAL_RTC_SetTime(hrtc, &stTime, RTC_FORMAT_BCD);
               //HAL_RTC_SetDate(hrtc, &stDate, RTC_FORMAT_BCD);
               //TODO: Use flag to Main task
               nSend = 1;
 80116da:	2301      	movs	r3, #1
 80116dc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
             }

             if((stMsgRx.nRxLen == 1) || nSend){
 80116e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80116e4:	2b01      	cmp	r3, #1
 80116e6:	d004      	beq.n	80116f2 <ProfetSMTask+0x682>
 80116e8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	f000 80a6 	beq.w	801183e <ProfetSMTask+0x7ce>
                 //HAL_RTC_GetTime(hrtc, &stTime, RTC_FORMAT_BCD);
                 //HAL_RTC_GetDate(hrtc, &stDate, RTC_FORMAT_BCD);
                 //TODO: Use flag to Main task

                 stMsgUsbTx.nTxLen = 7;
 80116f2:	2307      	movs	r3, #7
 80116f4:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                 stMsgCanTx.stTxHeader.DLC = 7;
 80116f8:	2307      	movs	r3, #7
 80116fa:	673b      	str	r3, [r7, #112]	; 0x70

                 stMsgUsbTx.nTxData[0] = MSG_TX_SET_TIME;
 80116fc:	2374      	movs	r3, #116	; 0x74
 80116fe:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
                 stMsgUsbTx.nTxData[1] = stTime.Hours;
 8011702:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011706:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
                 stMsgUsbTx.nTxData[2] = stTime.Minutes;
 801170a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 801170e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                 stMsgUsbTx.nTxData[3] = stTime.Seconds;
 8011712:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8011716:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                 stMsgUsbTx.nTxData[4] = stDate.Year;
 801171a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801171e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                 stMsgUsbTx.nTxData[5] = stDate.Month;
 8011722:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8011726:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                 stMsgUsbTx.nTxData[6] = stDate.Date;
 801172a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801172e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                 stMsgUsbTx.nTxData[7] = 0;
 8011732:	2300      	movs	r3, #0
 8011734:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                 stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8011738:	4b53      	ldr	r3, [pc, #332]	; (8011888 <ProfetSMTask+0x818>)
 801173a:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 801173e:	3314      	adds	r3, #20
 8011740:	663b      	str	r3, [r7, #96]	; 0x60

                 memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8011742:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011746:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801174a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801174e:	e883 0003 	stmia.w	r3, {r0, r1}

                 osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8011752:	4b4e      	ldr	r3, [pc, #312]	; (801188c <ProfetSMTask+0x81c>)
 8011754:	6818      	ldr	r0, [r3, #0]
 8011756:	f107 0180 	add.w	r1, r7, #128	; 0x80
 801175a:	2300      	movs	r3, #0
 801175c:	2200      	movs	r2, #0
 801175e:	f7fb ff73 	bl	800d648 <osMessageQueuePut>
                 osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8011762:	4b4b      	ldr	r3, [pc, #300]	; (8011890 <ProfetSMTask+0x820>)
 8011764:	6818      	ldr	r0, [r3, #0]
 8011766:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801176a:	2300      	movs	r3, #0
 801176c:	2200      	movs	r2, #0
 801176e:	f7fb ff6b 	bl	800d648 <osMessageQueuePut>
             }


             break;
 8011772:	e064      	b.n	801183e <ProfetSMTask+0x7ce>

           //Get Temperature
           // 'F'
           case MSG_RX_GET_TEMP:
             if((stMsgRx.nRxLen == 1) || nSend){
 8011774:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011778:	2b01      	cmp	r3, #1
 801177a:	d003      	beq.n	8011784 <ProfetSMTask+0x714>
 801177c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011780:	2b00      	cmp	r3, #0
 8011782:	d05e      	beq.n	8011842 <ProfetSMTask+0x7d2>
                  stMsgUsbTx.nTxLen = 7;
 8011784:	2307      	movs	r3, #7
 8011786:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                  stMsgCanTx.stTxHeader.DLC = 7;
 801178a:	2307      	movs	r3, #7
 801178c:	673b      	str	r3, [r7, #112]	; 0x70

                  stMsgUsbTx.nTxData[0] = MSG_TX_GET_TEMP;
 801178e:	2366      	movs	r3, #102	; 0x66
 8011790:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
                  stMsgUsbTx.nTxData[1] = nBoardTempC >> 8;
 8011794:	4b3f      	ldr	r3, [pc, #252]	; (8011894 <ProfetSMTask+0x824>)
 8011796:	f9b3 3000 	ldrsh.w	r3, [r3]
 801179a:	121b      	asrs	r3, r3, #8
 801179c:	b21b      	sxth	r3, r3
 801179e:	b2db      	uxtb	r3, r3
 80117a0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
                  stMsgUsbTx.nTxData[2] = nBoardTempC;
 80117a4:	4b3b      	ldr	r3, [pc, #236]	; (8011894 <ProfetSMTask+0x824>)
 80117a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80117aa:	b2db      	uxtb	r3, r3
 80117ac:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                  stMsgUsbTx.nTxData[3] = nStmTemp >> 8;
 80117b0:	4b39      	ldr	r3, [pc, #228]	; (8011898 <ProfetSMTask+0x828>)
 80117b2:	881b      	ldrh	r3, [r3, #0]
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	0a1b      	lsrs	r3, r3, #8
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                  stMsgUsbTx.nTxData[4] = nStmTemp;
 80117c0:	4b35      	ldr	r3, [pc, #212]	; (8011898 <ProfetSMTask+0x828>)
 80117c2:	881b      	ldrh	r3, [r3, #0]
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                  stMsgUsbTx.nTxData[5] = 0;
 80117cc:	2300      	movs	r3, #0
 80117ce:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                  stMsgUsbTx.nTxData[6] = 0;
 80117d2:	2300      	movs	r3, #0
 80117d4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                  stMsgUsbTx.nTxData[7] = 0;
 80117d8:	2300      	movs	r3, #0
 80117da:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                  stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 80117de:	4b2a      	ldr	r3, [pc, #168]	; (8011888 <ProfetSMTask+0x818>)
 80117e0:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80117e4:	3314      	adds	r3, #20
 80117e6:	663b      	str	r3, [r7, #96]	; 0x60

                  memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 80117e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80117ec:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80117f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117f4:	e883 0003 	stmia.w	r3, {r0, r1}

                  osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 80117f8:	4b24      	ldr	r3, [pc, #144]	; (801188c <ProfetSMTask+0x81c>)
 80117fa:	6818      	ldr	r0, [r3, #0]
 80117fc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8011800:	2300      	movs	r3, #0
 8011802:	2200      	movs	r2, #0
 8011804:	f7fb ff20 	bl	800d648 <osMessageQueuePut>
                  osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8011808:	4b21      	ldr	r3, [pc, #132]	; (8011890 <ProfetSMTask+0x820>)
 801180a:	6818      	ldr	r0, [r3, #0]
 801180c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8011810:	2300      	movs	r3, #0
 8011812:	2200      	movs	r2, #0
 8011814:	f7fb ff18 	bl	800d648 <osMessageQueuePut>
             }
             break;
 8011818:	e013      	b.n	8011842 <ProfetSMTask+0x7d2>

           default:
             PdmConfig_Set(&stPdmConfig, &stMsgRx, &qMsgQueueUsbTx, &qMsgQueueCanTx);
 801181a:	f107 010c 	add.w	r1, r7, #12
 801181e:	4b1c      	ldr	r3, [pc, #112]	; (8011890 <ProfetSMTask+0x820>)
 8011820:	4a1a      	ldr	r2, [pc, #104]	; (801188c <ProfetSMTask+0x81c>)
 8011822:	4819      	ldr	r0, [pc, #100]	; (8011888 <ProfetSMTask+0x818>)
 8011824:	f000 fec0 	bl	80125a8 <PdmConfig_Set>
             break;
 8011828:	e00c      	b.n	8011844 <ProfetSMTask+0x7d4>
        }
      }
 801182a:	bf00      	nop
 801182c:	e00a      	b.n	8011844 <ProfetSMTask+0x7d4>
            break;
 801182e:	bf00      	nop
 8011830:	e008      	b.n	8011844 <ProfetSMTask+0x7d4>
           break;
 8011832:	bf00      	nop
 8011834:	e006      	b.n	8011844 <ProfetSMTask+0x7d4>
           break;
 8011836:	bf00      	nop
 8011838:	e004      	b.n	8011844 <ProfetSMTask+0x7d4>
           break;
 801183a:	bf00      	nop
 801183c:	e002      	b.n	8011844 <ProfetSMTask+0x7d4>
             break;
 801183e:	bf00      	nop
 8011840:	e000      	b.n	8011844 <ProfetSMTask+0x7d4>
             break;
 8011842:	bf00      	nop
    }

    MsgQueueUsbTx_t stMsgTx;
    if(osMessageQueueGet(qMsgQueueUsbTx, &stMsgTx, NULL, 0U) == osOK){
 8011844:	4b11      	ldr	r3, [pc, #68]	; (801188c <ProfetSMTask+0x81c>)
 8011846:	6818      	ldr	r0, [r3, #0]
 8011848:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801184c:	2300      	movs	r3, #0
 801184e:	2200      	movs	r2, #0
 8011850:	f7fb ff6e 	bl	800d730 <osMessageQueueGet>
 8011854:	4603      	mov	r3, r0
 8011856:	2b00      	cmp	r3, #0
 8011858:	d10c      	bne.n	8011874 <ProfetSMTask+0x804>
      if(bUsbConnected){
 801185a:	4b10      	ldr	r3, [pc, #64]	; (801189c <ProfetSMTask+0x82c>)
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d008      	beq.n	8011874 <ProfetSMTask+0x804>
        //memcpy(&nUsbMsgTx, &stMsgTx.nTxData, stMsgTx.nTxLen);
        //nUsbMsgTx[stMsgTx.nTxLen] = '\r';
        if(USBD_CDC_Transmit((uint8_t*)stMsgTx.nTxData, stMsgTx.nTxLen) != USBD_OK){
 8011862:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8011866:	b29a      	uxth	r2, r3
 8011868:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801186c:	4611      	mov	r1, r2
 801186e:	4618      	mov	r0, r3
 8011870:	f7fe fd92 	bl	8010398 <USBD_CDC_Transmit>

#ifdef MEAS_HEAP_USE
    __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

    osDelay(5);
 8011874:	2005      	movs	r0, #5
 8011876:	f7fb fe33 	bl	800d4e0 <osDelay>
  for(;;){
 801187a:	e409      	b.n	8011090 <ProfetSMTask+0x20>
 801187c:	20004bb8 	.word	0x20004bb8
 8011880:	20004bba 	.word	0x20004bba
 8011884:	51eb851f 	.word	0x51eb851f
 8011888:	20002a48 	.word	0x20002a48
 801188c:	20003328 	.word	0x20003328
 8011890:	2000332c 	.word	0x2000332c
 8011894:	2000360a 	.word	0x2000360a
 8011898:	20003614 	.word	0x20003614
 801189c:	20003608 	.word	0x20003608

080118a0 <CanTxTask>:
  }

}

void CanTxTask(osThreadId_t* thisThreadId, CAN_HandleTypeDef* hcan)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b096      	sub	sp, #88	; 0x58
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6039      	str	r1, [r7, #0]
  //Configure the CAN Filter
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 80118aa:	2300      	movs	r3, #0
 80118ac:	643b      	str	r3, [r7, #64]	; 0x40
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80118ae:	2300      	movs	r3, #0
 80118b0:	647b      	str	r3, [r7, #68]	; 0x44
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80118b2:	2301      	movs	r3, #1
 80118b4:	64bb      	str	r3, [r7, #72]	; 0x48
  sFilterConfig.FilterIdHigh = 0x0000;
 80118b6:	2300      	movs	r3, #0
 80118b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sFilterConfig.FilterIdLow = 0x0000;
 80118ba:	2300      	movs	r3, #0
 80118bc:	633b      	str	r3, [r7, #48]	; 0x30
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80118be:	2300      	movs	r3, #0
 80118c0:	637b      	str	r3, [r7, #52]	; 0x34
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80118c2:	2300      	movs	r3, #0
 80118c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80118c6:	2300      	movs	r3, #0
 80118c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sFilterConfig.FilterActivation = ENABLE;
 80118ca:	2301      	movs	r3, #1
 80118cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sFilterConfig.SlaveStartFilterBank = 14;
 80118ce:	230e      	movs	r3, #14
 80118d0:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 80118d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80118d6:	4619      	mov	r1, r3
 80118d8:	6838      	ldr	r0, [r7, #0]
 80118da:	f7f2 f936 	bl	8003b4a <HAL_CAN_ConfigFilter>
 80118de:	4603      	mov	r3, r0
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d001      	beq.n	80118e8 <CanTxTask+0x48>
  {
    /* Filter configuration Error */
    Error_Handler();
 80118e4:	f7f0 fd6e 	bl	80023c4 <Error_Handler>
  }

  //Start the CAN periphera
  if (HAL_CAN_Start(hcan) != HAL_OK)
 80118e8:	6838      	ldr	r0, [r7, #0]
 80118ea:	f7f2 f9f8 	bl	8003cde <HAL_CAN_Start>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d001      	beq.n	80118f8 <CanTxTask+0x58>
  {
    /* Start Error */
    Error_Handler();
 80118f4:	f7f0 fd66 	bl	80023c4 <Error_Handler>
  }

  //Activate CAN RX notification
  if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80118f8:	2102      	movs	r1, #2
 80118fa:	6838      	ldr	r0, [r7, #0]
 80118fc:	f7f2 fc20 	bl	8004140 <HAL_CAN_ActivateNotification>
 8011900:	4603      	mov	r3, r0
 8011902:	2b00      	cmp	r3, #0
 8011904:	d001      	beq.n	801190a <CanTxTask+0x6a>
  {
    /* Notification Error */
    Error_Handler();
 8011906:	f7f0 fd5d 	bl	80023c4 <Error_Handler>
  }

  //Configure Transmission
  stCanTxHeader.StdId = 1620;
 801190a:	4ba7      	ldr	r3, [pc, #668]	; (8011ba8 <CanTxTask+0x308>)
 801190c:	f240 6254 	movw	r2, #1620	; 0x654
 8011910:	601a      	str	r2, [r3, #0]
  stCanTxHeader.ExtId = 0;
 8011912:	4ba5      	ldr	r3, [pc, #660]	; (8011ba8 <CanTxTask+0x308>)
 8011914:	2200      	movs	r2, #0
 8011916:	605a      	str	r2, [r3, #4]
  stCanTxHeader.RTR = CAN_RTR_DATA;
 8011918:	4ba3      	ldr	r3, [pc, #652]	; (8011ba8 <CanTxTask+0x308>)
 801191a:	2200      	movs	r2, #0
 801191c:	60da      	str	r2, [r3, #12]
  stCanTxHeader.IDE = CAN_ID_STD;
 801191e:	4ba2      	ldr	r3, [pc, #648]	; (8011ba8 <CanTxTask+0x308>)
 8011920:	2200      	movs	r2, #0
 8011922:	609a      	str	r2, [r3, #8]
  stCanTxHeader.DLC = 8;
 8011924:	4ba0      	ldr	r3, [pc, #640]	; (8011ba8 <CanTxTask+0x308>)
 8011926:	2208      	movs	r2, #8
 8011928:	611a      	str	r2, [r3, #16]
  stCanTxHeader.TransmitGlobalTime = DISABLE;
 801192a:	4b9f      	ldr	r3, [pc, #636]	; (8011ba8 <CanTxTask+0x308>)
 801192c:	2200      	movs	r2, #0
 801192e:	751a      	strb	r2, [r3, #20]

  for(;;){
    if(stPdmConfig.stCanOutput.nEnabled &&
 8011930:	4b9e      	ldr	r3, [pc, #632]	; (8011bac <CanTxTask+0x30c>)
 8011932:	f893 38d4 	ldrb.w	r3, [r3, #2260]	; 0x8d4
 8011936:	2b00      	cmp	r3, #0
 8011938:	f000 8248 	beq.w	8011dcc <CanTxTask+0x52c>
        (stPdmConfig.stCanOutput.nUpdateTime > 0) &&
 801193c:	4b9b      	ldr	r3, [pc, #620]	; (8011bac <CanTxTask+0x30c>)
 801193e:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
    if(stPdmConfig.stCanOutput.nEnabled &&
 8011942:	2b00      	cmp	r3, #0
 8011944:	f000 8242 	beq.w	8011dcc <CanTxTask+0x52c>
        stPdmConfig.stCanOutput.nBaseId > 0 &&
 8011948:	4b98      	ldr	r3, [pc, #608]	; (8011bac <CanTxTask+0x30c>)
 801194a:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
        (stPdmConfig.stCanOutput.nUpdateTime > 0) &&
 801194e:	2b00      	cmp	r3, #0
 8011950:	f000 823c 	beq.w	8011dcc <CanTxTask+0x52c>
        stPdmConfig.stCanOutput.nBaseId < 2048){
 8011954:	4b95      	ldr	r3, [pc, #596]	; (8011bac <CanTxTask+0x30c>)
 8011956:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
        stPdmConfig.stCanOutput.nBaseId > 0 &&
 801195a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801195e:	f080 8235 	bcs.w	8011dcc <CanTxTask+0x52c>

      MsgQueueCanTx_t stMsgTx;
      osStatus_t stStatus;
      //Keep sending queued messages until empty
      do{
        stStatus = osMessageQueueGet(qMsgQueueCanTx, &stMsgTx, NULL, 0U);
 8011962:	4b93      	ldr	r3, [pc, #588]	; (8011bb0 <CanTxTask+0x310>)
 8011964:	6818      	ldr	r0, [r3, #0]
 8011966:	f107 010c 	add.w	r1, r7, #12
 801196a:	2300      	movs	r3, #0
 801196c:	2200      	movs	r2, #0
 801196e:	f7fb fedf 	bl	800d730 <osMessageQueueGet>
 8011972:	6578      	str	r0, [r7, #84]	; 0x54
        if(stStatus == osOK){
 8011974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011976:	2b00      	cmp	r3, #0
 8011978:	d11d      	bne.n	80119b6 <CanTxTask+0x116>
          stMsgTx.stTxHeader.ExtId = 0;
 801197a:	2300      	movs	r3, #0
 801197c:	613b      	str	r3, [r7, #16]
          stMsgTx.stTxHeader.IDE = CAN_ID_STD;
 801197e:	2300      	movs	r3, #0
 8011980:	617b      	str	r3, [r7, #20]
          stMsgTx.stTxHeader.RTR = CAN_RTR_DATA;
 8011982:	2300      	movs	r3, #0
 8011984:	61bb      	str	r3, [r7, #24]
          stMsgTx.stTxHeader.TransmitGlobalTime = DISABLE;
 8011986:	2300      	movs	r3, #0
 8011988:	f887 3020 	strb.w	r3, [r7, #32]

          if(HAL_CAN_AddTxMessage(hcan, &stMsgTx.stTxHeader, stMsgTx.nTxData, &nCanTxMailbox) != HAL_OK){
 801198c:	f107 030c 	add.w	r3, r7, #12
 8011990:	f103 0218 	add.w	r2, r3, #24
 8011994:	f107 010c 	add.w	r1, r7, #12
 8011998:	4b86      	ldr	r3, [pc, #536]	; (8011bb4 <CanTxTask+0x314>)
 801199a:	6838      	ldr	r0, [r7, #0]
 801199c:	f7f2 f9e3 	bl	8003d66 <HAL_CAN_AddTxMessage>
 80119a0:	4603      	mov	r3, r0
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d007      	beq.n	80119b6 <CanTxTask+0x116>
            //Send failed - add back to queue
            osMessageQueuePut(qMsgQueueCanTx, &stMsgTx, 0U, 0U);
 80119a6:	4b82      	ldr	r3, [pc, #520]	; (8011bb0 <CanTxTask+0x310>)
 80119a8:	6818      	ldr	r0, [r3, #0]
 80119aa:	f107 010c 	add.w	r1, r7, #12
 80119ae:	2300      	movs	r3, #0
 80119b0:	2200      	movs	r2, #0
 80119b2:	f7fb fe49 	bl	800d648 <osMessageQueuePut>
          }
        }
      }while(stStatus == osOK);
 80119b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d0d2      	beq.n	8011962 <CanTxTask+0xc2>


      //=======================================================
      //Build Msg 0 (Analog inputs 1-4)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 0;
 80119bc:	4b7b      	ldr	r3, [pc, #492]	; (8011bac <CanTxTask+0x30c>)
 80119be:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80119c2:	461a      	mov	r2, r3
 80119c4:	4b78      	ldr	r3, [pc, #480]	; (8011ba8 <CanTxTask+0x308>)
 80119c6:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 80119c8:	4b77      	ldr	r3, [pc, #476]	; (8011ba8 <CanTxTask+0x308>)
 80119ca:	2208      	movs	r2, #8
 80119cc:	611a      	str	r2, [r3, #16]
      //nCanTxData[7] = nAiBank1Raw[3];

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 80119ce:	4b79      	ldr	r3, [pc, #484]	; (8011bb4 <CanTxTask+0x314>)
 80119d0:	4a79      	ldr	r2, [pc, #484]	; (8011bb8 <CanTxTask+0x318>)
 80119d2:	4975      	ldr	r1, [pc, #468]	; (8011ba8 <CanTxTask+0x308>)
 80119d4:	6838      	ldr	r0, [r7, #0]
 80119d6:	f7f2 f9c6 	bl	8003d66 <HAL_CAN_AddTxMessage>
 80119da:	4603      	mov	r3, r0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d001      	beq.n	80119e4 <CanTxTask+0x144>
        Error_Handler();
 80119e0:	f7f0 fcf0 	bl	80023c4 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 80119e4:	2005      	movs	r0, #5
 80119e6:	f7fb fd7b 	bl	800d4e0 <osDelay>

      //=======================================================
      //Build Msg 1 (Analog inputs 5-6)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 1;
 80119ea:	4b70      	ldr	r3, [pc, #448]	; (8011bac <CanTxTask+0x30c>)
 80119ec:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 80119f0:	3301      	adds	r3, #1
 80119f2:	461a      	mov	r2, r3
 80119f4:	4b6c      	ldr	r3, [pc, #432]	; (8011ba8 <CanTxTask+0x308>)
 80119f6:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 80119f8:	4b6b      	ldr	r3, [pc, #428]	; (8011ba8 <CanTxTask+0x308>)
 80119fa:	2208      	movs	r2, #8
 80119fc:	611a      	str	r2, [r3, #16]
      //nCanTxData[7] = 0;

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 80119fe:	4b6d      	ldr	r3, [pc, #436]	; (8011bb4 <CanTxTask+0x314>)
 8011a00:	4a6d      	ldr	r2, [pc, #436]	; (8011bb8 <CanTxTask+0x318>)
 8011a02:	4969      	ldr	r1, [pc, #420]	; (8011ba8 <CanTxTask+0x308>)
 8011a04:	6838      	ldr	r0, [r7, #0]
 8011a06:	f7f2 f9ae 	bl	8003d66 <HAL_CAN_AddTxMessage>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d001      	beq.n	8011a14 <CanTxTask+0x174>
        Error_Handler();
 8011a10:	f7f0 fcd8 	bl	80023c4 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8011a14:	2005      	movs	r0, #5
 8011a16:	f7fb fd63 	bl	800d4e0 <osDelay>

      //=======================================================
      //Build Msg 2 (Device status)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 2;
 8011a1a:	4b64      	ldr	r3, [pc, #400]	; (8011bac <CanTxTask+0x30c>)
 8011a1c:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8011a20:	3302      	adds	r3, #2
 8011a22:	461a      	mov	r2, r3
 8011a24:	4b60      	ldr	r3, [pc, #384]	; (8011ba8 <CanTxTask+0x308>)
 8011a26:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8011a28:	4b5f      	ldr	r3, [pc, #380]	; (8011ba8 <CanTxTask+0x308>)
 8011a2a:	2208      	movs	r2, #8
 8011a2c:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = eDevState;
 8011a2e:	4b63      	ldr	r3, [pc, #396]	; (8011bbc <CanTxTask+0x31c>)
 8011a30:	781a      	ldrb	r2, [r3, #0]
 8011a32:	4b61      	ldr	r3, [pc, #388]	; (8011bb8 <CanTxTask+0x318>)
 8011a34:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = 0;
 8011a36:	4b60      	ldr	r3, [pc, #384]	; (8011bb8 <CanTxTask+0x318>)
 8011a38:	2200      	movs	r2, #0
 8011a3a:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = nILTotal >> 8;
 8011a3c:	4b60      	ldr	r3, [pc, #384]	; (8011bc0 <CanTxTask+0x320>)
 8011a3e:	881b      	ldrh	r3, [r3, #0]
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	0a1b      	lsrs	r3, r3, #8
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	b2da      	uxtb	r2, r3
 8011a48:	4b5b      	ldr	r3, [pc, #364]	; (8011bb8 <CanTxTask+0x318>)
 8011a4a:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = nILTotal;
 8011a4c:	4b5c      	ldr	r3, [pc, #368]	; (8011bc0 <CanTxTask+0x320>)
 8011a4e:	881b      	ldrh	r3, [r3, #0]
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	b2da      	uxtb	r2, r3
 8011a54:	4b58      	ldr	r3, [pc, #352]	; (8011bb8 <CanTxTask+0x318>)
 8011a56:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = nBattSense >> 8;
 8011a58:	4b5a      	ldr	r3, [pc, #360]	; (8011bc4 <CanTxTask+0x324>)
 8011a5a:	881b      	ldrh	r3, [r3, #0]
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	0a1b      	lsrs	r3, r3, #8
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	b2da      	uxtb	r2, r3
 8011a64:	4b54      	ldr	r3, [pc, #336]	; (8011bb8 <CanTxTask+0x318>)
 8011a66:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = nBattSense;
 8011a68:	4b56      	ldr	r3, [pc, #344]	; (8011bc4 <CanTxTask+0x324>)
 8011a6a:	881b      	ldrh	r3, [r3, #0]
 8011a6c:	b29b      	uxth	r3, r3
 8011a6e:	b2da      	uxtb	r2, r3
 8011a70:	4b51      	ldr	r3, [pc, #324]	; (8011bb8 <CanTxTask+0x318>)
 8011a72:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = nBoardTempC >> 8;
 8011a74:	4b54      	ldr	r3, [pc, #336]	; (8011bc8 <CanTxTask+0x328>)
 8011a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a7a:	121b      	asrs	r3, r3, #8
 8011a7c:	b21b      	sxth	r3, r3
 8011a7e:	b2da      	uxtb	r2, r3
 8011a80:	4b4d      	ldr	r3, [pc, #308]	; (8011bb8 <CanTxTask+0x318>)
 8011a82:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = nBoardTempC;
 8011a84:	4b50      	ldr	r3, [pc, #320]	; (8011bc8 <CanTxTask+0x328>)
 8011a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a8a:	b2da      	uxtb	r2, r3
 8011a8c:	4b4a      	ldr	r3, [pc, #296]	; (8011bb8 <CanTxTask+0x318>)
 8011a8e:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8011a90:	4b48      	ldr	r3, [pc, #288]	; (8011bb4 <CanTxTask+0x314>)
 8011a92:	4a49      	ldr	r2, [pc, #292]	; (8011bb8 <CanTxTask+0x318>)
 8011a94:	4944      	ldr	r1, [pc, #272]	; (8011ba8 <CanTxTask+0x308>)
 8011a96:	6838      	ldr	r0, [r7, #0]
 8011a98:	f7f2 f965 	bl	8003d66 <HAL_CAN_AddTxMessage>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d001      	beq.n	8011aa6 <CanTxTask+0x206>
        Error_Handler();
 8011aa2:	f7f0 fc8f 	bl	80023c4 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8011aa6:	2005      	movs	r0, #5
 8011aa8:	f7fb fd1a 	bl	800d4e0 <osDelay>

      //=======================================================
      //Build Msg 3 (Out 1-4 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 3;
 8011aac:	4b3f      	ldr	r3, [pc, #252]	; (8011bac <CanTxTask+0x30c>)
 8011aae:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8011ab2:	3303      	adds	r3, #3
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	4b3c      	ldr	r3, [pc, #240]	; (8011ba8 <CanTxTask+0x308>)
 8011ab8:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8011aba:	4b3b      	ldr	r3, [pc, #236]	; (8011ba8 <CanTxTask+0x308>)
 8011abc:	2208      	movs	r2, #8
 8011abe:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[0].nIL >> 8;
 8011ac0:	4b42      	ldr	r3, [pc, #264]	; (8011bcc <CanTxTask+0x32c>)
 8011ac2:	8c1b      	ldrh	r3, [r3, #32]
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	0a1b      	lsrs	r3, r3, #8
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	b2da      	uxtb	r2, r3
 8011acc:	4b3a      	ldr	r3, [pc, #232]	; (8011bb8 <CanTxTask+0x318>)
 8011ace:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[0].nIL;
 8011ad0:	4b3e      	ldr	r3, [pc, #248]	; (8011bcc <CanTxTask+0x32c>)
 8011ad2:	8c1b      	ldrh	r3, [r3, #32]
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	b2da      	uxtb	r2, r3
 8011ad8:	4b37      	ldr	r3, [pc, #220]	; (8011bb8 <CanTxTask+0x318>)
 8011ada:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[1].nIL >> 8;
 8011adc:	4b3b      	ldr	r3, [pc, #236]	; (8011bcc <CanTxTask+0x32c>)
 8011ade:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	0a1b      	lsrs	r3, r3, #8
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	b2da      	uxtb	r2, r3
 8011aea:	4b33      	ldr	r3, [pc, #204]	; (8011bb8 <CanTxTask+0x318>)
 8011aec:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[1].nIL;
 8011aee:	4b37      	ldr	r3, [pc, #220]	; (8011bcc <CanTxTask+0x32c>)
 8011af0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	b2da      	uxtb	r2, r3
 8011af8:	4b2f      	ldr	r3, [pc, #188]	; (8011bb8 <CanTxTask+0x318>)
 8011afa:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[2].nIL >> 8;
 8011afc:	4b33      	ldr	r3, [pc, #204]	; (8011bcc <CanTxTask+0x32c>)
 8011afe:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8011b02:	b29b      	uxth	r3, r3
 8011b04:	0a1b      	lsrs	r3, r3, #8
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	b2da      	uxtb	r2, r3
 8011b0a:	4b2b      	ldr	r3, [pc, #172]	; (8011bb8 <CanTxTask+0x318>)
 8011b0c:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[2].nIL;
 8011b0e:	4b2f      	ldr	r3, [pc, #188]	; (8011bcc <CanTxTask+0x32c>)
 8011b10:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	b2da      	uxtb	r2, r3
 8011b18:	4b27      	ldr	r3, [pc, #156]	; (8011bb8 <CanTxTask+0x318>)
 8011b1a:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[3].nIL >> 8;
 8011b1c:	4b2b      	ldr	r3, [pc, #172]	; (8011bcc <CanTxTask+0x32c>)
 8011b1e:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	0a1b      	lsrs	r3, r3, #8
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	b2da      	uxtb	r2, r3
 8011b2a:	4b23      	ldr	r3, [pc, #140]	; (8011bb8 <CanTxTask+0x318>)
 8011b2c:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[3].nIL;
 8011b2e:	4b27      	ldr	r3, [pc, #156]	; (8011bcc <CanTxTask+0x32c>)
 8011b30:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	b2da      	uxtb	r2, r3
 8011b38:	4b1f      	ldr	r3, [pc, #124]	; (8011bb8 <CanTxTask+0x318>)
 8011b3a:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8011b3c:	4b1d      	ldr	r3, [pc, #116]	; (8011bb4 <CanTxTask+0x314>)
 8011b3e:	4a1e      	ldr	r2, [pc, #120]	; (8011bb8 <CanTxTask+0x318>)
 8011b40:	4919      	ldr	r1, [pc, #100]	; (8011ba8 <CanTxTask+0x308>)
 8011b42:	6838      	ldr	r0, [r7, #0]
 8011b44:	f7f2 f90f 	bl	8003d66 <HAL_CAN_AddTxMessage>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d001      	beq.n	8011b52 <CanTxTask+0x2b2>
        Error_Handler();
 8011b4e:	f7f0 fc39 	bl	80023c4 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8011b52:	2005      	movs	r0, #5
 8011b54:	f7fb fcc4 	bl	800d4e0 <osDelay>

      //=======================================================
      //Build Msg 4 (Out 5-8 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 4;
 8011b58:	4b14      	ldr	r3, [pc, #80]	; (8011bac <CanTxTask+0x30c>)
 8011b5a:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8011b5e:	3304      	adds	r3, #4
 8011b60:	461a      	mov	r2, r3
 8011b62:	4b11      	ldr	r3, [pc, #68]	; (8011ba8 <CanTxTask+0x308>)
 8011b64:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8011b66:	4b10      	ldr	r3, [pc, #64]	; (8011ba8 <CanTxTask+0x308>)
 8011b68:	2208      	movs	r2, #8
 8011b6a:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[4].nIL >> 8;
 8011b6c:	4b17      	ldr	r3, [pc, #92]	; (8011bcc <CanTxTask+0x32c>)
 8011b6e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	0a1b      	lsrs	r3, r3, #8
 8011b76:	b29b      	uxth	r3, r3
 8011b78:	b2da      	uxtb	r2, r3
 8011b7a:	4b0f      	ldr	r3, [pc, #60]	; (8011bb8 <CanTxTask+0x318>)
 8011b7c:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[4].nIL;
 8011b7e:	4b13      	ldr	r3, [pc, #76]	; (8011bcc <CanTxTask+0x32c>)
 8011b80:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	b2da      	uxtb	r2, r3
 8011b88:	4b0b      	ldr	r3, [pc, #44]	; (8011bb8 <CanTxTask+0x318>)
 8011b8a:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[5].nIL >> 8;
 8011b8c:	4b0f      	ldr	r3, [pc, #60]	; (8011bcc <CanTxTask+0x32c>)
 8011b8e:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	0a1b      	lsrs	r3, r3, #8
 8011b96:	b29b      	uxth	r3, r3
 8011b98:	b2da      	uxtb	r2, r3
 8011b9a:	4b07      	ldr	r3, [pc, #28]	; (8011bb8 <CanTxTask+0x318>)
 8011b9c:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[5].nIL;
 8011b9e:	4b0b      	ldr	r3, [pc, #44]	; (8011bcc <CanTxTask+0x32c>)
 8011ba0:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	e013      	b.n	8011bd0 <CanTxTask+0x330>
 8011ba8:	20003634 	.word	0x20003634
 8011bac:	20002a48 	.word	0x20002a48
 8011bb0:	2000332c 	.word	0x2000332c
 8011bb4:	20003678 	.word	0x20003678
 8011bb8:	20003668 	.word	0x20003668
 8011bbc:	20003331 	.word	0x20003331
 8011bc0:	200035d4 	.word	0x200035d4
 8011bc4:	20003612 	.word	0x20003612
 8011bc8:	2000360a 	.word	0x2000360a
 8011bcc:	20003334 	.word	0x20003334
 8011bd0:	b2da      	uxtb	r2, r3
 8011bd2:	4b80      	ldr	r3, [pc, #512]	; (8011dd4 <CanTxTask+0x534>)
 8011bd4:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[6].nIL >> 8;
 8011bd6:	4b80      	ldr	r3, [pc, #512]	; (8011dd8 <CanTxTask+0x538>)
 8011bd8:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	0a1b      	lsrs	r3, r3, #8
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	b2da      	uxtb	r2, r3
 8011be4:	4b7b      	ldr	r3, [pc, #492]	; (8011dd4 <CanTxTask+0x534>)
 8011be6:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[6].nIL;
 8011be8:	4b7b      	ldr	r3, [pc, #492]	; (8011dd8 <CanTxTask+0x538>)
 8011bea:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	b2da      	uxtb	r2, r3
 8011bf2:	4b78      	ldr	r3, [pc, #480]	; (8011dd4 <CanTxTask+0x534>)
 8011bf4:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[7].nIL >> 8;
 8011bf6:	4b78      	ldr	r3, [pc, #480]	; (8011dd8 <CanTxTask+0x538>)
 8011bf8:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8011bfc:	b29b      	uxth	r3, r3
 8011bfe:	0a1b      	lsrs	r3, r3, #8
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	b2da      	uxtb	r2, r3
 8011c04:	4b73      	ldr	r3, [pc, #460]	; (8011dd4 <CanTxTask+0x534>)
 8011c06:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[7].nIL;
 8011c08:	4b73      	ldr	r3, [pc, #460]	; (8011dd8 <CanTxTask+0x538>)
 8011c0a:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	b2da      	uxtb	r2, r3
 8011c12:	4b70      	ldr	r3, [pc, #448]	; (8011dd4 <CanTxTask+0x534>)
 8011c14:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8011c16:	4b71      	ldr	r3, [pc, #452]	; (8011ddc <CanTxTask+0x53c>)
 8011c18:	4a6e      	ldr	r2, [pc, #440]	; (8011dd4 <CanTxTask+0x534>)
 8011c1a:	4971      	ldr	r1, [pc, #452]	; (8011de0 <CanTxTask+0x540>)
 8011c1c:	6838      	ldr	r0, [r7, #0]
 8011c1e:	f7f2 f8a2 	bl	8003d66 <HAL_CAN_AddTxMessage>
 8011c22:	4603      	mov	r3, r0
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d001      	beq.n	8011c2c <CanTxTask+0x38c>
        Error_Handler();
 8011c28:	f7f0 fbcc 	bl	80023c4 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8011c2c:	2005      	movs	r0, #5
 8011c2e:	f7fb fc57 	bl	800d4e0 <osDelay>

      //=======================================================
      //Build Msg 5 (Out 9-12 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 5;
 8011c32:	4b6c      	ldr	r3, [pc, #432]	; (8011de4 <CanTxTask+0x544>)
 8011c34:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8011c38:	3305      	adds	r3, #5
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	4b68      	ldr	r3, [pc, #416]	; (8011de0 <CanTxTask+0x540>)
 8011c3e:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8011c40:	4b67      	ldr	r3, [pc, #412]	; (8011de0 <CanTxTask+0x540>)
 8011c42:	2208      	movs	r2, #8
 8011c44:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[8].nIL >> 8;
 8011c46:	4b64      	ldr	r3, [pc, #400]	; (8011dd8 <CanTxTask+0x538>)
 8011c48:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	0a1b      	lsrs	r3, r3, #8
 8011c50:	b29b      	uxth	r3, r3
 8011c52:	b2da      	uxtb	r2, r3
 8011c54:	4b5f      	ldr	r3, [pc, #380]	; (8011dd4 <CanTxTask+0x534>)
 8011c56:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[8].nIL;
 8011c58:	4b5f      	ldr	r3, [pc, #380]	; (8011dd8 <CanTxTask+0x538>)
 8011c5a:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 8011c5e:	b29b      	uxth	r3, r3
 8011c60:	b2da      	uxtb	r2, r3
 8011c62:	4b5c      	ldr	r3, [pc, #368]	; (8011dd4 <CanTxTask+0x534>)
 8011c64:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[9].nIL >> 8;
 8011c66:	4b5c      	ldr	r3, [pc, #368]	; (8011dd8 <CanTxTask+0x538>)
 8011c68:	f8b3 3218 	ldrh.w	r3, [r3, #536]	; 0x218
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	0a1b      	lsrs	r3, r3, #8
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	b2da      	uxtb	r2, r3
 8011c74:	4b57      	ldr	r3, [pc, #348]	; (8011dd4 <CanTxTask+0x534>)
 8011c76:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[9].nIL;
 8011c78:	4b57      	ldr	r3, [pc, #348]	; (8011dd8 <CanTxTask+0x538>)
 8011c7a:	f8b3 3218 	ldrh.w	r3, [r3, #536]	; 0x218
 8011c7e:	b29b      	uxth	r3, r3
 8011c80:	b2da      	uxtb	r2, r3
 8011c82:	4b54      	ldr	r3, [pc, #336]	; (8011dd4 <CanTxTask+0x534>)
 8011c84:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[10].nIL >> 8;
 8011c86:	4b54      	ldr	r3, [pc, #336]	; (8011dd8 <CanTxTask+0x538>)
 8011c88:	f8b3 3250 	ldrh.w	r3, [r3, #592]	; 0x250
 8011c8c:	b29b      	uxth	r3, r3
 8011c8e:	0a1b      	lsrs	r3, r3, #8
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	b2da      	uxtb	r2, r3
 8011c94:	4b4f      	ldr	r3, [pc, #316]	; (8011dd4 <CanTxTask+0x534>)
 8011c96:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[10].nIL;
 8011c98:	4b4f      	ldr	r3, [pc, #316]	; (8011dd8 <CanTxTask+0x538>)
 8011c9a:	f8b3 3250 	ldrh.w	r3, [r3, #592]	; 0x250
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	b2da      	uxtb	r2, r3
 8011ca2:	4b4c      	ldr	r3, [pc, #304]	; (8011dd4 <CanTxTask+0x534>)
 8011ca4:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[11].nIL >> 8;
 8011ca6:	4b4c      	ldr	r3, [pc, #304]	; (8011dd8 <CanTxTask+0x538>)
 8011ca8:	f8b3 3288 	ldrh.w	r3, [r3, #648]	; 0x288
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	0a1b      	lsrs	r3, r3, #8
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	b2da      	uxtb	r2, r3
 8011cb4:	4b47      	ldr	r3, [pc, #284]	; (8011dd4 <CanTxTask+0x534>)
 8011cb6:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[11].nIL;
 8011cb8:	4b47      	ldr	r3, [pc, #284]	; (8011dd8 <CanTxTask+0x538>)
 8011cba:	f8b3 3288 	ldrh.w	r3, [r3, #648]	; 0x288
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	b2da      	uxtb	r2, r3
 8011cc2:	4b44      	ldr	r3, [pc, #272]	; (8011dd4 <CanTxTask+0x534>)
 8011cc4:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8011cc6:	4b45      	ldr	r3, [pc, #276]	; (8011ddc <CanTxTask+0x53c>)
 8011cc8:	4a42      	ldr	r2, [pc, #264]	; (8011dd4 <CanTxTask+0x534>)
 8011cca:	4945      	ldr	r1, [pc, #276]	; (8011de0 <CanTxTask+0x540>)
 8011ccc:	6838      	ldr	r0, [r7, #0]
 8011cce:	f7f2 f84a 	bl	8003d66 <HAL_CAN_AddTxMessage>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d001      	beq.n	8011cdc <CanTxTask+0x43c>
        Error_Handler();
 8011cd8:	f7f0 fb74 	bl	80023c4 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8011cdc:	2005      	movs	r0, #5
 8011cde:	f7fb fbff 	bl	800d4e0 <osDelay>

      //=======================================================
      //Build Msg 6 (Out 1-12 Status)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 6;
 8011ce2:	4b40      	ldr	r3, [pc, #256]	; (8011de4 <CanTxTask+0x544>)
 8011ce4:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8011ce8:	3306      	adds	r3, #6
 8011cea:	461a      	mov	r2, r3
 8011cec:	4b3c      	ldr	r3, [pc, #240]	; (8011de0 <CanTxTask+0x540>)
 8011cee:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8011cf0:	4b3b      	ldr	r3, [pc, #236]	; (8011de0 <CanTxTask+0x540>)
 8011cf2:	2208      	movs	r2, #8
 8011cf4:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = (pf[1].eState << 4) + pf[0].eState;
 8011cf6:	4b38      	ldr	r3, [pc, #224]	; (8011dd8 <CanTxTask+0x538>)
 8011cf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011cfc:	b2db      	uxtb	r3, r3
 8011cfe:	011b      	lsls	r3, r3, #4
 8011d00:	b2da      	uxtb	r2, r3
 8011d02:	4b35      	ldr	r3, [pc, #212]	; (8011dd8 <CanTxTask+0x538>)
 8011d04:	785b      	ldrb	r3, [r3, #1]
 8011d06:	b2db      	uxtb	r3, r3
 8011d08:	4413      	add	r3, r2
 8011d0a:	b2da      	uxtb	r2, r3
 8011d0c:	4b31      	ldr	r3, [pc, #196]	; (8011dd4 <CanTxTask+0x534>)
 8011d0e:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = (pf[3].eState << 4) + pf[2].eState;
 8011d10:	4b31      	ldr	r3, [pc, #196]	; (8011dd8 <CanTxTask+0x538>)
 8011d12:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8011d16:	b2db      	uxtb	r3, r3
 8011d18:	011b      	lsls	r3, r3, #4
 8011d1a:	b2da      	uxtb	r2, r3
 8011d1c:	4b2e      	ldr	r3, [pc, #184]	; (8011dd8 <CanTxTask+0x538>)
 8011d1e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8011d22:	b2db      	uxtb	r3, r3
 8011d24:	4413      	add	r3, r2
 8011d26:	b2da      	uxtb	r2, r3
 8011d28:	4b2a      	ldr	r3, [pc, #168]	; (8011dd4 <CanTxTask+0x534>)
 8011d2a:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = (pf[5].eState << 4) + pf[4].eState;
 8011d2c:	4b2a      	ldr	r3, [pc, #168]	; (8011dd8 <CanTxTask+0x538>)
 8011d2e:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	011b      	lsls	r3, r3, #4
 8011d36:	b2da      	uxtb	r2, r3
 8011d38:	4b27      	ldr	r3, [pc, #156]	; (8011dd8 <CanTxTask+0x538>)
 8011d3a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	4413      	add	r3, r2
 8011d42:	b2da      	uxtb	r2, r3
 8011d44:	4b23      	ldr	r3, [pc, #140]	; (8011dd4 <CanTxTask+0x534>)
 8011d46:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = (pf[7].eState << 4) + pf[6].eState;
 8011d48:	4b23      	ldr	r3, [pc, #140]	; (8011dd8 <CanTxTask+0x538>)
 8011d4a:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8011d4e:	b2db      	uxtb	r3, r3
 8011d50:	011b      	lsls	r3, r3, #4
 8011d52:	b2da      	uxtb	r2, r3
 8011d54:	4b20      	ldr	r3, [pc, #128]	; (8011dd8 <CanTxTask+0x538>)
 8011d56:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8011d5a:	b2db      	uxtb	r3, r3
 8011d5c:	4413      	add	r3, r2
 8011d5e:	b2da      	uxtb	r2, r3
 8011d60:	4b1c      	ldr	r3, [pc, #112]	; (8011dd4 <CanTxTask+0x534>)
 8011d62:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = (pf[9].eState << 4) + pf[8].eState;
 8011d64:	4b1c      	ldr	r3, [pc, #112]	; (8011dd8 <CanTxTask+0x538>)
 8011d66:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8011d6a:	b2db      	uxtb	r3, r3
 8011d6c:	011b      	lsls	r3, r3, #4
 8011d6e:	b2da      	uxtb	r2, r3
 8011d70:	4b19      	ldr	r3, [pc, #100]	; (8011dd8 <CanTxTask+0x538>)
 8011d72:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	4413      	add	r3, r2
 8011d7a:	b2da      	uxtb	r2, r3
 8011d7c:	4b15      	ldr	r3, [pc, #84]	; (8011dd4 <CanTxTask+0x534>)
 8011d7e:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = (pf[11].eState << 4) + pf[10].eState;
 8011d80:	4b15      	ldr	r3, [pc, #84]	; (8011dd8 <CanTxTask+0x538>)
 8011d82:	f893 3269 	ldrb.w	r3, [r3, #617]	; 0x269
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	011b      	lsls	r3, r3, #4
 8011d8a:	b2da      	uxtb	r2, r3
 8011d8c:	4b12      	ldr	r3, [pc, #72]	; (8011dd8 <CanTxTask+0x538>)
 8011d8e:	f893 3231 	ldrb.w	r3, [r3, #561]	; 0x231
 8011d92:	b2db      	uxtb	r3, r3
 8011d94:	4413      	add	r3, r2
 8011d96:	b2da      	uxtb	r2, r3
 8011d98:	4b0e      	ldr	r3, [pc, #56]	; (8011dd4 <CanTxTask+0x534>)
 8011d9a:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = 0;
 8011d9c:	4b0d      	ldr	r3, [pc, #52]	; (8011dd4 <CanTxTask+0x534>)
 8011d9e:	2200      	movs	r2, #0
 8011da0:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = 0;
 8011da2:	4b0c      	ldr	r3, [pc, #48]	; (8011dd4 <CanTxTask+0x534>)
 8011da4:	2200      	movs	r2, #0
 8011da6:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8011da8:	4b0c      	ldr	r3, [pc, #48]	; (8011ddc <CanTxTask+0x53c>)
 8011daa:	4a0a      	ldr	r2, [pc, #40]	; (8011dd4 <CanTxTask+0x534>)
 8011dac:	490c      	ldr	r1, [pc, #48]	; (8011de0 <CanTxTask+0x540>)
 8011dae:	6838      	ldr	r0, [r7, #0]
 8011db0:	f7f1 ffd9 	bl	8003d66 <HAL_CAN_AddTxMessage>
 8011db4:	4603      	mov	r3, r0
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d001      	beq.n	8011dbe <CanTxTask+0x51e>
        Error_Handler();
 8011dba:	f7f0 fb03 	bl	80023c4 <Error_Handler>

#ifdef MEAS_HEAP_USE
      __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

      osDelay(stPdmConfig.stCanOutput.nUpdateTime);
 8011dbe:	4b09      	ldr	r3, [pc, #36]	; (8011de4 <CanTxTask+0x544>)
 8011dc0:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7fb fb8b 	bl	800d4e0 <osDelay>
        stPdmConfig.stCanOutput.nBaseId < 2048){
 8011dca:	e002      	b.n	8011dd2 <CanTxTask+0x532>
    }
    else{
      osDelay(50);
 8011dcc:	2032      	movs	r0, #50	; 0x32
 8011dce:	f7fb fb87 	bl	800d4e0 <osDelay>
    if(stPdmConfig.stCanOutput.nEnabled &&
 8011dd2:	e5ad      	b.n	8011930 <CanTxTask+0x90>
 8011dd4:	20003668 	.word	0x20003668
 8011dd8:	20003334 	.word	0x20003334
 8011ddc:	20003678 	.word	0x20003678
 8011de0:	20003634 	.word	0x20003634
 8011de4:	20002a48 	.word	0x20002a48

08011de8 <SetPfStatusLed>:

  }
}

void SetPfStatusLed(PCA9635_LEDOnState_t *ledState, volatile ProfetTypeDef *profet)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b083      	sub	sp, #12
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
  //0 = Off
  //1 = On
  //3 = Flash
  *ledState = (profet->eState == ON) +          //On
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	785b      	ldrb	r3, [r3, #1]
 8011df6:	b2db      	uxtb	r3, r3
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	bf0c      	ite	eq
 8011dfc:	2301      	moveq	r3, #1
 8011dfe:	2300      	movne	r3, #0
 8011e00:	b2db      	uxtb	r3, r3
 8011e02:	461a      	mov	r2, r3
              (profet->eState == IN_RUSH) +     //On
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	785b      	ldrb	r3, [r3, #1]
 8011e08:	b2db      	uxtb	r3, r3
 8011e0a:	2b02      	cmp	r3, #2
 8011e0c:	bf0c      	ite	eq
 8011e0e:	2301      	moveq	r3, #1
 8011e10:	2300      	movne	r3, #0
 8011e12:	b2db      	uxtb	r3, r3
  *ledState = (profet->eState == ON) +          //On
 8011e14:	4413      	add	r3, r2
 8011e16:	b2db      	uxtb	r3, r3
              (profet->eState == OVERCURRENT)   * LED_FLASH +
 8011e18:	683a      	ldr	r2, [r7, #0]
 8011e1a:	7852      	ldrb	r2, [r2, #1]
 8011e1c:	b2d2      	uxtb	r2, r2
              (profet->eState == IN_RUSH) +     //On
 8011e1e:	2a04      	cmp	r2, #4
 8011e20:	d101      	bne.n	8011e26 <SetPfStatusLed+0x3e>
 8011e22:	2203      	movs	r2, #3
 8011e24:	e000      	b.n	8011e28 <SetPfStatusLed+0x40>
 8011e26:	2200      	movs	r2, #0
 8011e28:	4413      	add	r3, r2
 8011e2a:	b2db      	uxtb	r3, r3
              (profet->eState == SHORT_CIRCUIT) * LED_FLASH +
 8011e2c:	683a      	ldr	r2, [r7, #0]
 8011e2e:	7852      	ldrb	r2, [r2, #1]
 8011e30:	b2d2      	uxtb	r2, r2
              (profet->eState == OVERCURRENT)   * LED_FLASH +
 8011e32:	2a03      	cmp	r2, #3
 8011e34:	d101      	bne.n	8011e3a <SetPfStatusLed+0x52>
 8011e36:	2203      	movs	r2, #3
 8011e38:	e000      	b.n	8011e3c <SetPfStatusLed+0x54>
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	4413      	add	r3, r2
 8011e3e:	b2db      	uxtb	r3, r3
              (profet->eState == SUSPENDED)     * LED_FLASH +
 8011e40:	683a      	ldr	r2, [r7, #0]
 8011e42:	7852      	ldrb	r2, [r2, #1]
 8011e44:	b2d2      	uxtb	r2, r2
              (profet->eState == SHORT_CIRCUIT) * LED_FLASH +
 8011e46:	2a06      	cmp	r2, #6
 8011e48:	d101      	bne.n	8011e4e <SetPfStatusLed+0x66>
 8011e4a:	2203      	movs	r2, #3
 8011e4c:	e000      	b.n	8011e50 <SetPfStatusLed+0x68>
 8011e4e:	2200      	movs	r2, #0
 8011e50:	4413      	add	r3, r2
 8011e52:	b2db      	uxtb	r3, r3
              (profet->eState == FAULT)         * LED_FLASH;
 8011e54:	683a      	ldr	r2, [r7, #0]
 8011e56:	7852      	ldrb	r2, [r2, #1]
 8011e58:	b2d2      	uxtb	r2, r2
              (profet->eState == SUSPENDED)     * LED_FLASH +
 8011e5a:	2a05      	cmp	r2, #5
 8011e5c:	d101      	bne.n	8011e62 <SetPfStatusLed+0x7a>
 8011e5e:	2203      	movs	r2, #3
 8011e60:	e000      	b.n	8011e64 <SetPfStatusLed+0x7c>
 8011e62:	2200      	movs	r2, #0
 8011e64:	4413      	add	r3, r2
 8011e66:	b2da      	uxtb	r2, r3
  *ledState = (profet->eState == ON) +          //On
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	701a      	strb	r2, [r3, #0]
}
 8011e6c:	bf00      	nop
 8011e6e:	370c      	adds	r7, #12
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr

08011e78 <Profet_Init>:

void Profet_Init(){
 8011e78:	b480      	push	{r7}
 8011e7a:	af00      	add	r7, sp, #0

  pf[0].eModel = BTS7002_1EPP;
 8011e7c:	4b8a      	ldr	r3, [pc, #552]	; (80120a8 <Profet_Init+0x230>)
 8011e7e:	2200      	movs	r2, #0
 8011e80:	701a      	strb	r2, [r3, #0]
  pf[0].nNum = 0;
 8011e82:	4b89      	ldr	r3, [pc, #548]	; (80120a8 <Profet_Init+0x230>)
 8011e84:	2200      	movs	r2, #0
 8011e86:	809a      	strh	r2, [r3, #4]
  pf[0].nIN_Port = &pfGpioBank1;
 8011e88:	4b87      	ldr	r3, [pc, #540]	; (80120a8 <Profet_Init+0x230>)
 8011e8a:	4a88      	ldr	r2, [pc, #544]	; (80120ac <Profet_Init+0x234>)
 8011e8c:	609a      	str	r2, [r3, #8]
  pf[0].nIN_Pin = 0x0080;
 8011e8e:	4b86      	ldr	r3, [pc, #536]	; (80120a8 <Profet_Init+0x230>)
 8011e90:	2280      	movs	r2, #128	; 0x80
 8011e92:	819a      	strh	r2, [r3, #12]
  pf[0].fKilis = 2.286;
 8011e94:	4b84      	ldr	r3, [pc, #528]	; (80120a8 <Profet_Init+0x230>)
 8011e96:	4a86      	ldr	r2, [pc, #536]	; (80120b0 <Profet_Init+0x238>)
 8011e98:	635a      	str	r2, [r3, #52]	; 0x34

  pf[1].eModel = BTS7002_1EPP;
 8011e9a:	4b83      	ldr	r3, [pc, #524]	; (80120a8 <Profet_Init+0x230>)
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pf[1].nNum = 1;
 8011ea2:	4b81      	ldr	r3, [pc, #516]	; (80120a8 <Profet_Init+0x230>)
 8011ea4:	2201      	movs	r2, #1
 8011ea6:	879a      	strh	r2, [r3, #60]	; 0x3c
  pf[1].nIN_Port = &pfGpioBank1;
 8011ea8:	4b7f      	ldr	r3, [pc, #508]	; (80120a8 <Profet_Init+0x230>)
 8011eaa:	4a80      	ldr	r2, [pc, #512]	; (80120ac <Profet_Init+0x234>)
 8011eac:	641a      	str	r2, [r3, #64]	; 0x40
  pf[1].nIN_Pin = 0x0002;
 8011eae:	4b7e      	ldr	r3, [pc, #504]	; (80120a8 <Profet_Init+0x230>)
 8011eb0:	2202      	movs	r2, #2
 8011eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  pf[1].fKilis = 2.286;
 8011eb6:	4b7c      	ldr	r3, [pc, #496]	; (80120a8 <Profet_Init+0x230>)
 8011eb8:	4a7d      	ldr	r2, [pc, #500]	; (80120b0 <Profet_Init+0x238>)
 8011eba:	66da      	str	r2, [r3, #108]	; 0x6c

  pf[2].eModel = BTS7008_2EPA_CH1;
 8011ebc:	4b7a      	ldr	r3, [pc, #488]	; (80120a8 <Profet_Init+0x230>)
 8011ebe:	2201      	movs	r2, #1
 8011ec0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  pf[2].nNum = 2;
 8011ec4:	4b78      	ldr	r3, [pc, #480]	; (80120a8 <Profet_Init+0x230>)
 8011ec6:	2202      	movs	r2, #2
 8011ec8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  pf[2].nIN_Port = &pfGpioBank1;
 8011ecc:	4b76      	ldr	r3, [pc, #472]	; (80120a8 <Profet_Init+0x230>)
 8011ece:	4a77      	ldr	r2, [pc, #476]	; (80120ac <Profet_Init+0x234>)
 8011ed0:	679a      	str	r2, [r3, #120]	; 0x78
  pf[2].nIN_Pin = 0x8000;
 8011ed2:	4b75      	ldr	r3, [pc, #468]	; (80120a8 <Profet_Init+0x230>)
 8011ed4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011ed8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
  pf[2].fKilis = 0.554;
 8011edc:	4b72      	ldr	r3, [pc, #456]	; (80120a8 <Profet_Init+0x230>)
 8011ede:	4a75      	ldr	r2, [pc, #468]	; (80120b4 <Profet_Init+0x23c>)
 8011ee0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  pf[3].eModel = BTS7008_2EPA_CH2;
 8011ee4:	4b70      	ldr	r3, [pc, #448]	; (80120a8 <Profet_Init+0x230>)
 8011ee6:	2202      	movs	r2, #2
 8011ee8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
  pf[3].eState = OFF;
 8011eec:	4b6e      	ldr	r3, [pc, #440]	; (80120a8 <Profet_Init+0x230>)
 8011eee:	2200      	movs	r2, #0
 8011ef0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
  pf[3].nNum = 3;
 8011ef4:	4b6c      	ldr	r3, [pc, #432]	; (80120a8 <Profet_Init+0x230>)
 8011ef6:	2203      	movs	r2, #3
 8011ef8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  pf[3].nIN_Port = &pfGpioBank1;
 8011efc:	4b6a      	ldr	r3, [pc, #424]	; (80120a8 <Profet_Init+0x230>)
 8011efe:	4a6b      	ldr	r2, [pc, #428]	; (80120ac <Profet_Init+0x234>)
 8011f00:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  pf[3].nIN_Pin = 0x1000;
 8011f04:	4b68      	ldr	r3, [pc, #416]	; (80120a8 <Profet_Init+0x230>)
 8011f06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011f0a:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  pf[3].fKilis = 0.554;
 8011f0e:	4b66      	ldr	r3, [pc, #408]	; (80120a8 <Profet_Init+0x230>)
 8011f10:	4a68      	ldr	r2, [pc, #416]	; (80120b4 <Profet_Init+0x23c>)
 8011f12:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  pf[4].eModel = BTS7008_2EPA_CH1;
 8011f16:	4b64      	ldr	r3, [pc, #400]	; (80120a8 <Profet_Init+0x230>)
 8011f18:	2201      	movs	r2, #1
 8011f1a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  pf[4].eState = OFF;
 8011f1e:	4b62      	ldr	r3, [pc, #392]	; (80120a8 <Profet_Init+0x230>)
 8011f20:	2200      	movs	r2, #0
 8011f22:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  pf[4].nNum = 4;
 8011f26:	4b60      	ldr	r3, [pc, #384]	; (80120a8 <Profet_Init+0x230>)
 8011f28:	2204      	movs	r2, #4
 8011f2a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
  pf[4].nIN_Port = &pfGpioBank1;
 8011f2e:	4b5e      	ldr	r3, [pc, #376]	; (80120a8 <Profet_Init+0x230>)
 8011f30:	4a5e      	ldr	r2, [pc, #376]	; (80120ac <Profet_Init+0x234>)
 8011f32:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  pf[4].nIN_Pin = 0x0800;
 8011f36:	4b5c      	ldr	r3, [pc, #368]	; (80120a8 <Profet_Init+0x230>)
 8011f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011f3c:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  pf[4].fKilis = 0.554;
 8011f40:	4b59      	ldr	r3, [pc, #356]	; (80120a8 <Profet_Init+0x230>)
 8011f42:	4a5c      	ldr	r2, [pc, #368]	; (80120b4 <Profet_Init+0x23c>)
 8011f44:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  pf[5].eModel = BTS7008_2EPA_CH2;
 8011f48:	4b57      	ldr	r3, [pc, #348]	; (80120a8 <Profet_Init+0x230>)
 8011f4a:	2202      	movs	r2, #2
 8011f4c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
  pf[5].eState = OFF;
 8011f50:	4b55      	ldr	r3, [pc, #340]	; (80120a8 <Profet_Init+0x230>)
 8011f52:	2200      	movs	r2, #0
 8011f54:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  pf[5].nNum = 5;
 8011f58:	4b53      	ldr	r3, [pc, #332]	; (80120a8 <Profet_Init+0x230>)
 8011f5a:	2205      	movs	r2, #5
 8011f5c:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
  pf[5].nIN_Port = &pfGpioBank1;
 8011f60:	4b51      	ldr	r3, [pc, #324]	; (80120a8 <Profet_Init+0x230>)
 8011f62:	4a52      	ldr	r2, [pc, #328]	; (80120ac <Profet_Init+0x234>)
 8011f64:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  pf[5].nIN_Pin = 0x0100;
 8011f68:	4b4f      	ldr	r3, [pc, #316]	; (80120a8 <Profet_Init+0x230>)
 8011f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011f6e:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
  pf[5].fKilis = 0.554;
 8011f72:	4b4d      	ldr	r3, [pc, #308]	; (80120a8 <Profet_Init+0x230>)
 8011f74:	4a4f      	ldr	r2, [pc, #316]	; (80120b4 <Profet_Init+0x23c>)
 8011f76:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  pf[6].eModel = BTS7002_1EPP;
 8011f7a:	4b4b      	ldr	r3, [pc, #300]	; (80120a8 <Profet_Init+0x230>)
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  pf[6].eState = OFF;
 8011f82:	4b49      	ldr	r3, [pc, #292]	; (80120a8 <Profet_Init+0x230>)
 8011f84:	2200      	movs	r2, #0
 8011f86:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  pf[6].nNum = 6;
 8011f8a:	4b47      	ldr	r3, [pc, #284]	; (80120a8 <Profet_Init+0x230>)
 8011f8c:	2206      	movs	r2, #6
 8011f8e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
  pf[6].nIN_Port = &pfGpioBank2;
 8011f92:	4b45      	ldr	r3, [pc, #276]	; (80120a8 <Profet_Init+0x230>)
 8011f94:	4a48      	ldr	r2, [pc, #288]	; (80120b8 <Profet_Init+0x240>)
 8011f96:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pf[6].nIN_Pin = 0x0002;
 8011f9a:	4b43      	ldr	r3, [pc, #268]	; (80120a8 <Profet_Init+0x230>)
 8011f9c:	2202      	movs	r2, #2
 8011f9e:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
  pf[6].fKilis = 2.286;
 8011fa2:	4b41      	ldr	r3, [pc, #260]	; (80120a8 <Profet_Init+0x230>)
 8011fa4:	4a42      	ldr	r2, [pc, #264]	; (80120b0 <Profet_Init+0x238>)
 8011fa6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

  pf[7].eModel = BTS7002_1EPP;
 8011faa:	4b3f      	ldr	r3, [pc, #252]	; (80120a8 <Profet_Init+0x230>)
 8011fac:	2200      	movs	r2, #0
 8011fae:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
  pf[7].eState = OFF;
 8011fb2:	4b3d      	ldr	r3, [pc, #244]	; (80120a8 <Profet_Init+0x230>)
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  pf[7].nNum = 7;
 8011fba:	4b3b      	ldr	r3, [pc, #236]	; (80120a8 <Profet_Init+0x230>)
 8011fbc:	2207      	movs	r2, #7
 8011fbe:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pf[7].nIN_Port = &pfGpioBank2;
 8011fc2:	4b39      	ldr	r3, [pc, #228]	; (80120a8 <Profet_Init+0x230>)
 8011fc4:	4a3c      	ldr	r2, [pc, #240]	; (80120b8 <Profet_Init+0x240>)
 8011fc6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  pf[7].nIN_Pin = 0x0008;
 8011fca:	4b37      	ldr	r3, [pc, #220]	; (80120a8 <Profet_Init+0x230>)
 8011fcc:	2208      	movs	r2, #8
 8011fce:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
  pf[7].fKilis = 2.286;
 8011fd2:	4b35      	ldr	r3, [pc, #212]	; (80120a8 <Profet_Init+0x230>)
 8011fd4:	4a36      	ldr	r2, [pc, #216]	; (80120b0 <Profet_Init+0x238>)
 8011fd6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

  pf[8].eModel = BTS7008_2EPA_CH1;
 8011fda:	4b33      	ldr	r3, [pc, #204]	; (80120a8 <Profet_Init+0x230>)
 8011fdc:	2201      	movs	r2, #1
 8011fde:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
  pf[8].eState = OFF;
 8011fe2:	4b31      	ldr	r3, [pc, #196]	; (80120a8 <Profet_Init+0x230>)
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  pf[8].nNum = 8;
 8011fea:	4b2f      	ldr	r3, [pc, #188]	; (80120a8 <Profet_Init+0x230>)
 8011fec:	2208      	movs	r2, #8
 8011fee:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  pf[8].nIN_Port = &pfGpioBank2;
 8011ff2:	4b2d      	ldr	r3, [pc, #180]	; (80120a8 <Profet_Init+0x230>)
 8011ff4:	4a30      	ldr	r2, [pc, #192]	; (80120b8 <Profet_Init+0x240>)
 8011ff6:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  pf[8].nIN_Pin = 0x0010;
 8011ffa:	4b2b      	ldr	r3, [pc, #172]	; (80120a8 <Profet_Init+0x230>)
 8011ffc:	2210      	movs	r2, #16
 8011ffe:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
  pf[8].fKilis = 0.554;
 8012002:	4b29      	ldr	r3, [pc, #164]	; (80120a8 <Profet_Init+0x230>)
 8012004:	4a2b      	ldr	r2, [pc, #172]	; (80120b4 <Profet_Init+0x23c>)
 8012006:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  pf[9].eModel = BTS7008_2EPA_CH2;
 801200a:	4b27      	ldr	r3, [pc, #156]	; (80120a8 <Profet_Init+0x230>)
 801200c:	2202      	movs	r2, #2
 801200e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  pf[9].eState = OFF;
 8012012:	4b25      	ldr	r3, [pc, #148]	; (80120a8 <Profet_Init+0x230>)
 8012014:	2200      	movs	r2, #0
 8012016:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
  pf[9].nNum = 9;
 801201a:	4b23      	ldr	r3, [pc, #140]	; (80120a8 <Profet_Init+0x230>)
 801201c:	2209      	movs	r2, #9
 801201e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
  pf[9].nIN_Port = &pfGpioBank2;
 8012022:	4b21      	ldr	r3, [pc, #132]	; (80120a8 <Profet_Init+0x230>)
 8012024:	4a24      	ldr	r2, [pc, #144]	; (80120b8 <Profet_Init+0x240>)
 8012026:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  pf[9].nIN_Pin = 0x0080;
 801202a:	4b1f      	ldr	r3, [pc, #124]	; (80120a8 <Profet_Init+0x230>)
 801202c:	2280      	movs	r2, #128	; 0x80
 801202e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
  pf[9].fKilis = 0.554;
 8012032:	4b1d      	ldr	r3, [pc, #116]	; (80120a8 <Profet_Init+0x230>)
 8012034:	4a1f      	ldr	r2, [pc, #124]	; (80120b4 <Profet_Init+0x23c>)
 8012036:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

  pf[10].eModel = BTS7008_2EPA_CH1;
 801203a:	4b1b      	ldr	r3, [pc, #108]	; (80120a8 <Profet_Init+0x230>)
 801203c:	2201      	movs	r2, #1
 801203e:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
  pf[10].eState = OFF;
 8012042:	4b19      	ldr	r3, [pc, #100]	; (80120a8 <Profet_Init+0x230>)
 8012044:	2200      	movs	r2, #0
 8012046:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
  pf[10].nNum = 10;
 801204a:	4b17      	ldr	r3, [pc, #92]	; (80120a8 <Profet_Init+0x230>)
 801204c:	220a      	movs	r2, #10
 801204e:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
  pf[10].nIN_Port = &pfGpioBank2;
 8012052:	4b15      	ldr	r3, [pc, #84]	; (80120a8 <Profet_Init+0x230>)
 8012054:	4a18      	ldr	r2, [pc, #96]	; (80120b8 <Profet_Init+0x240>)
 8012056:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  pf[10].nIN_Pin = 0x0100;
 801205a:	4b13      	ldr	r3, [pc, #76]	; (80120a8 <Profet_Init+0x230>)
 801205c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012060:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
  pf[10].fKilis = 0.554;
 8012064:	4b10      	ldr	r3, [pc, #64]	; (80120a8 <Profet_Init+0x230>)
 8012066:	4a13      	ldr	r2, [pc, #76]	; (80120b4 <Profet_Init+0x23c>)
 8012068:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

  pf[11].eModel = BTS7008_2EPA_CH2;
 801206c:	4b0e      	ldr	r3, [pc, #56]	; (80120a8 <Profet_Init+0x230>)
 801206e:	2202      	movs	r2, #2
 8012070:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
  pf[11].eState = OFF;
 8012074:	4b0c      	ldr	r3, [pc, #48]	; (80120a8 <Profet_Init+0x230>)
 8012076:	2200      	movs	r2, #0
 8012078:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
  pf[11].nNum = 11;
 801207c:	4b0a      	ldr	r3, [pc, #40]	; (80120a8 <Profet_Init+0x230>)
 801207e:	220b      	movs	r2, #11
 8012080:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
  pf[11].nIN_Port = &pfGpioBank2;
 8012084:	4b08      	ldr	r3, [pc, #32]	; (80120a8 <Profet_Init+0x230>)
 8012086:	4a0c      	ldr	r2, [pc, #48]	; (80120b8 <Profet_Init+0x240>)
 8012088:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
  pf[11].nIN_Pin = 0x0800;
 801208c:	4b06      	ldr	r3, [pc, #24]	; (80120a8 <Profet_Init+0x230>)
 801208e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012092:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
  pf[11].fKilis = 0.554;
 8012096:	4b04      	ldr	r3, [pc, #16]	; (80120a8 <Profet_Init+0x230>)
 8012098:	4a06      	ldr	r2, [pc, #24]	; (80120b4 <Profet_Init+0x23c>)
 801209a:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
}
 801209e:	bf00      	nop
 80120a0:	46bd      	mov	sp, r7
 80120a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a6:	4770      	bx	lr
 80120a8:	20003334 	.word	0x20003334
 80120ac:	200035d6 	.word	0x200035d6
 80120b0:	40124dd3 	.word	0x40124dd3
 80120b4:	3f0dd2f2 	.word	0x3f0dd2f2
 80120b8:	200035d8 	.word	0x200035d8

080120bc <_write>:


//Overwrite printf _write to send to ITM_SendChar
int _write(int file, char *ptr, int len){
 80120bc:	b580      	push	{r7, lr}
 80120be:	b086      	sub	sp, #24
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	60f8      	str	r0, [r7, #12]
 80120c4:	60b9      	str	r1, [r7, #8]
 80120c6:	607a      	str	r2, [r7, #4]
  int i=0;
 80120c8:	2300      	movs	r3, #0
 80120ca:	617b      	str	r3, [r7, #20]
  for(i=0; i<len; i++){
 80120cc:	2300      	movs	r3, #0
 80120ce:	617b      	str	r3, [r7, #20]
 80120d0:	e009      	b.n	80120e6 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	1c5a      	adds	r2, r3, #1
 80120d6:	60ba      	str	r2, [r7, #8]
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	4618      	mov	r0, r3
 80120dc:	f7fe f854 	bl	8010188 <ITM_SendChar>
  for(i=0; i<len; i++){
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	3301      	adds	r3, #1
 80120e4:	617b      	str	r3, [r7, #20]
 80120e6:	697a      	ldr	r2, [r7, #20]
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	dbf1      	blt.n	80120d2 <_write+0x16>
  }
  return len;
 80120ee:	687b      	ldr	r3, [r7, #4]
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3718      	adds	r7, #24
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <ReadPdmConfig>:

uint8_t ReadPdmConfig()
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b08c      	sub	sp, #48	; 0x30
 80120fc:	af00      	add	r7, sp, #0
  PdmConfig_SetDefault(&stPdmConfig);
 80120fe:	4872      	ldr	r0, [pc, #456]	; (80122c8 <ReadPdmConfig+0x1d0>)
 8012100:	f001 fda2 	bl	8013c48 <PdmConfig_SetDefault>

  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8012104:	2300      	movs	r3, #0
 8012106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012108:	e052      	b.n	80121b0 <ReadPdmConfig+0xb8>
  {
    pf[i].nIL_Limit = stPdmConfig.stOutput[i].nCurrentLimit;
 801210a:	496f      	ldr	r1, [pc, #444]	; (80122c8 <ReadPdmConfig+0x1d0>)
 801210c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801210e:	4613      	mov	r3, r2
 8012110:	009b      	lsls	r3, r3, #2
 8012112:	4413      	add	r3, r2
 8012114:	009b      	lsls	r3, r3, #2
 8012116:	440b      	add	r3, r1
 8012118:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801211c:	8818      	ldrh	r0, [r3, #0]
 801211e:	496b      	ldr	r1, [pc, #428]	; (80122cc <ReadPdmConfig+0x1d4>)
 8012120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012122:	4613      	mov	r3, r2
 8012124:	00db      	lsls	r3, r3, #3
 8012126:	1a9b      	subs	r3, r3, r2
 8012128:	00db      	lsls	r3, r3, #3
 801212a:	440b      	add	r3, r1
 801212c:	3314      	adds	r3, #20
 801212e:	4602      	mov	r2, r0
 8012130:	801a      	strh	r2, [r3, #0]
    pf[i].nIL_InRush_Limit = stPdmConfig.stOutput[i].nInrushLimit;
 8012132:	4965      	ldr	r1, [pc, #404]	; (80122c8 <ReadPdmConfig+0x1d0>)
 8012134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012136:	4613      	mov	r3, r2
 8012138:	009b      	lsls	r3, r3, #2
 801213a:	4413      	add	r3, r2
 801213c:	009b      	lsls	r3, r3, #2
 801213e:	440b      	add	r3, r1
 8012140:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8012144:	8818      	ldrh	r0, [r3, #0]
 8012146:	4961      	ldr	r1, [pc, #388]	; (80122cc <ReadPdmConfig+0x1d4>)
 8012148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801214a:	4613      	mov	r3, r2
 801214c:	00db      	lsls	r3, r3, #3
 801214e:	1a9b      	subs	r3, r3, r2
 8012150:	00db      	lsls	r3, r3, #3
 8012152:	440b      	add	r3, r1
 8012154:	3316      	adds	r3, #22
 8012156:	4602      	mov	r2, r0
 8012158:	801a      	strh	r2, [r3, #0]
    pf[i].nIL_InRush_Time = stPdmConfig.stOutput[i].nInrushTime;
 801215a:	495b      	ldr	r1, [pc, #364]	; (80122c8 <ReadPdmConfig+0x1d0>)
 801215c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801215e:	4613      	mov	r3, r2
 8012160:	009b      	lsls	r3, r3, #2
 8012162:	4413      	add	r3, r2
 8012164:	009b      	lsls	r3, r3, #2
 8012166:	440b      	add	r3, r1
 8012168:	f203 4314 	addw	r3, r3, #1044	; 0x414
 801216c:	8818      	ldrh	r0, [r3, #0]
 801216e:	4957      	ldr	r1, [pc, #348]	; (80122cc <ReadPdmConfig+0x1d4>)
 8012170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012172:	4613      	mov	r3, r2
 8012174:	00db      	lsls	r3, r3, #3
 8012176:	1a9b      	subs	r3, r3, r2
 8012178:	00db      	lsls	r3, r3, #3
 801217a:	440b      	add	r3, r1
 801217c:	3318      	adds	r3, #24
 801217e:	4602      	mov	r2, r0
 8012180:	801a      	strh	r2, [r3, #0]
    //pf[i]. = stPdmConfig.stOutput[i].eResetMode;
    //pf[i] = stPdmConfig.stOutput[i].nResetTime;
    pf[i].nOC_ResetLimit = stPdmConfig.stOutput[i].nResetLimit;
 8012182:	4951      	ldr	r1, [pc, #324]	; (80122c8 <ReadPdmConfig+0x1d0>)
 8012184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012186:	4613      	mov	r3, r2
 8012188:	009b      	lsls	r3, r3, #2
 801218a:	4413      	add	r3, r2
 801218c:	009b      	lsls	r3, r3, #2
 801218e:	440b      	add	r3, r1
 8012190:	f203 431a 	addw	r3, r3, #1050	; 0x41a
 8012194:	7818      	ldrb	r0, [r3, #0]
 8012196:	494d      	ldr	r1, [pc, #308]	; (80122cc <ReadPdmConfig+0x1d4>)
 8012198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801219a:	4613      	mov	r3, r2
 801219c:	00db      	lsls	r3, r3, #3
 801219e:	1a9b      	subs	r3, r3, r2
 80121a0:	00db      	lsls	r3, r3, #3
 80121a2:	440b      	add	r3, r1
 80121a4:	3331      	adds	r3, #49	; 0x31
 80121a6:	4602      	mov	r2, r0
 80121a8:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 80121aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ac:	3301      	adds	r3, #1
 80121ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80121b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b2:	2b0b      	cmp	r3, #11
 80121b4:	dda9      	ble.n	801210a <ReadPdmConfig+0x12>
  }
  */

  //Map the variable map first before using
  //User inputs
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 80121b6:	2300      	movs	r3, #0
 80121b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80121ba:	e00b      	b.n	80121d4 <ReadPdmConfig+0xdc>
    pVariableMap[i+1] = &nPdmInputs[i];
 80121bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121be:	3301      	adds	r3, #1
 80121c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121c2:	0052      	lsls	r2, r2, #1
 80121c4:	4942      	ldr	r1, [pc, #264]	; (80122d0 <ReadPdmConfig+0x1d8>)
 80121c6:	440a      	add	r2, r1
 80121c8:	4942      	ldr	r1, [pc, #264]	; (80122d4 <ReadPdmConfig+0x1dc>)
 80121ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 80121ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d0:	3301      	adds	r3, #1
 80121d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80121d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d6:	2b07      	cmp	r3, #7
 80121d8:	ddf0      	ble.n	80121bc <ReadPdmConfig+0xc4>

  //CAN inputs
  for(int i=0; i<PDM_NUM_CAN_INPUTS; i++)
 80121da:	2300      	movs	r3, #0
 80121dc:	627b      	str	r3, [r7, #36]	; 0x24
 80121de:	e00b      	b.n	80121f8 <ReadPdmConfig+0x100>
    pVariableMap[i + 9] = &nCanInputs[i];
 80121e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e2:	3309      	adds	r3, #9
 80121e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121e6:	0052      	lsls	r2, r2, #1
 80121e8:	493b      	ldr	r1, [pc, #236]	; (80122d8 <ReadPdmConfig+0x1e0>)
 80121ea:	440a      	add	r2, r1
 80121ec:	4939      	ldr	r1, [pc, #228]	; (80122d4 <ReadPdmConfig+0x1dc>)
 80121ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_CAN_INPUTS; i++)
 80121f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f4:	3301      	adds	r3, #1
 80121f6:	627b      	str	r3, [r7, #36]	; 0x24
 80121f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121fa:	2b1d      	cmp	r3, #29
 80121fc:	ddf0      	ble.n	80121e0 <ReadPdmConfig+0xe8>

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 80121fe:	2300      	movs	r3, #0
 8012200:	623b      	str	r3, [r7, #32]
 8012202:	e00b      	b.n	801221c <ReadPdmConfig+0x124>
    pVariableMap[i + 39] = &nVirtInputs[i];
 8012204:	6a3b      	ldr	r3, [r7, #32]
 8012206:	3327      	adds	r3, #39	; 0x27
 8012208:	6a3a      	ldr	r2, [r7, #32]
 801220a:	0052      	lsls	r2, r2, #1
 801220c:	4933      	ldr	r1, [pc, #204]	; (80122dc <ReadPdmConfig+0x1e4>)
 801220e:	440a      	add	r2, r1
 8012210:	4930      	ldr	r1, [pc, #192]	; (80122d4 <ReadPdmConfig+0x1dc>)
 8012212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8012216:	6a3b      	ldr	r3, [r7, #32]
 8012218:	3301      	adds	r3, #1
 801221a:	623b      	str	r3, [r7, #32]
 801221c:	6a3b      	ldr	r3, [r7, #32]
 801221e:	2b13      	cmp	r3, #19
 8012220:	ddf0      	ble.n	8012204 <ReadPdmConfig+0x10c>

  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8012222:	2300      	movs	r3, #0
 8012224:	61fb      	str	r3, [r7, #28]
 8012226:	e00b      	b.n	8012240 <ReadPdmConfig+0x148>
  {
    pVariableMap[i + 59] = &nOutputs[i];
 8012228:	69fb      	ldr	r3, [r7, #28]
 801222a:	333b      	adds	r3, #59	; 0x3b
 801222c:	69fa      	ldr	r2, [r7, #28]
 801222e:	0052      	lsls	r2, r2, #1
 8012230:	492b      	ldr	r1, [pc, #172]	; (80122e0 <ReadPdmConfig+0x1e8>)
 8012232:	440a      	add	r2, r1
 8012234:	4927      	ldr	r1, [pc, #156]	; (80122d4 <ReadPdmConfig+0x1dc>)
 8012236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	3301      	adds	r3, #1
 801223e:	61fb      	str	r3, [r7, #28]
 8012240:	69fb      	ldr	r3, [r7, #28]
 8012242:	2b0b      	cmp	r3, #11
 8012244:	ddf0      	ble.n	8012228 <ReadPdmConfig+0x130>
  }

  pVariableMap[71] = &stWiper.nSlowOut;
 8012246:	4b23      	ldr	r3, [pc, #140]	; (80122d4 <ReadPdmConfig+0x1dc>)
 8012248:	4a26      	ldr	r2, [pc, #152]	; (80122e4 <ReadPdmConfig+0x1ec>)
 801224a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  pVariableMap[72] = &stWiper.nFastOut;
 801224e:	4b21      	ldr	r3, [pc, #132]	; (80122d4 <ReadPdmConfig+0x1dc>)
 8012250:	4a25      	ldr	r2, [pc, #148]	; (80122e8 <ReadPdmConfig+0x1f0>)
 8012252:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120


  //Assign variable map values
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8012256:	2300      	movs	r3, #0
 8012258:	61bb      	str	r3, [r7, #24]
 801225a:	e01a      	b.n	8012292 <ReadPdmConfig+0x19a>
  {
    stPdmConfig.stOutput[i].pInput = pVariableMap[stPdmConfig.stOutput[i].nInput];
 801225c:	491a      	ldr	r1, [pc, #104]	; (80122c8 <ReadPdmConfig+0x1d0>)
 801225e:	69ba      	ldr	r2, [r7, #24]
 8012260:	4613      	mov	r3, r2
 8012262:	009b      	lsls	r3, r3, #2
 8012264:	4413      	add	r3, r2
 8012266:	009b      	lsls	r3, r3, #2
 8012268:	440b      	add	r3, r1
 801226a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801226e:	781b      	ldrb	r3, [r3, #0]
 8012270:	461a      	mov	r2, r3
 8012272:	4b18      	ldr	r3, [pc, #96]	; (80122d4 <ReadPdmConfig+0x1dc>)
 8012274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012278:	4813      	ldr	r0, [pc, #76]	; (80122c8 <ReadPdmConfig+0x1d0>)
 801227a:	69ba      	ldr	r2, [r7, #24]
 801227c:	4613      	mov	r3, r2
 801227e:	009b      	lsls	r3, r3, #2
 8012280:	4413      	add	r3, r2
 8012282:	009b      	lsls	r3, r3, #2
 8012284:	4403      	add	r3, r0
 8012286:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801228a:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 801228c:	69bb      	ldr	r3, [r7, #24]
 801228e:	3301      	adds	r3, #1
 8012290:	61bb      	str	r3, [r7, #24]
 8012292:	69bb      	ldr	r3, [r7, #24]
 8012294:	2b0b      	cmp	r3, #11
 8012296:	dde1      	ble.n	801225c <ReadPdmConfig+0x164>
  }

  //Map input values to config structure
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 8012298:	2300      	movs	r3, #0
 801229a:	617b      	str	r3, [r7, #20]
 801229c:	e00e      	b.n	80122bc <ReadPdmConfig+0x1c4>
  {
    stPdmConfig.stInput[i].pInput = &nUserDigInput[i];
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	4a12      	ldr	r2, [pc, #72]	; (80122ec <ReadPdmConfig+0x1f4>)
 80122a2:	1899      	adds	r1, r3, r2
 80122a4:	4808      	ldr	r0, [pc, #32]	; (80122c8 <ReadPdmConfig+0x1d0>)
 80122a6:	697a      	ldr	r2, [r7, #20]
 80122a8:	4613      	mov	r3, r2
 80122aa:	00db      	lsls	r3, r3, #3
 80122ac:	1a9b      	subs	r3, r3, r2
 80122ae:	009b      	lsls	r3, r3, #2
 80122b0:	4403      	add	r3, r0
 80122b2:	330c      	adds	r3, #12
 80122b4:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	3301      	adds	r3, #1
 80122ba:	617b      	str	r3, [r7, #20]
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	2b07      	cmp	r3, #7
 80122c0:	dded      	ble.n	801229e <ReadPdmConfig+0x1a6>
  }

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 80122c2:	2300      	movs	r3, #0
 80122c4:	613b      	str	r3, [r7, #16]
 80122c6:	e058      	b.n	801237a <ReadPdmConfig+0x282>
 80122c8:	20002a48 	.word	0x20002a48
 80122cc:	20003334 	.word	0x20003334
 80122d0:	20003828 	.word	0x20003828
 80122d4:	20003704 	.word	0x20003704
 80122d8:	20003838 	.word	0x20003838
 80122dc:	20003874 	.word	0x20003874
 80122e0:	2000389c 	.word	0x2000389c
 80122e4:	200036b6 	.word	0x200036b6
 80122e8:	200036b8 	.word	0x200036b8
 80122ec:	20003600 	.word	0x20003600
  {
    stPdmConfig.stVirtualInput[i].pVar0 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar0];
 80122f0:	497b      	ldr	r1, [pc, #492]	; (80124e0 <ReadPdmConfig+0x3e8>)
 80122f2:	693a      	ldr	r2, [r7, #16]
 80122f4:	4613      	mov	r3, r2
 80122f6:	009b      	lsls	r3, r3, #2
 80122f8:	4413      	add	r3, r2
 80122fa:	00db      	lsls	r3, r3, #3
 80122fc:	440b      	add	r3, r1
 80122fe:	33ea      	adds	r3, #234	; 0xea
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	461a      	mov	r2, r3
 8012304:	4b77      	ldr	r3, [pc, #476]	; (80124e4 <ReadPdmConfig+0x3ec>)
 8012306:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801230a:	4875      	ldr	r0, [pc, #468]	; (80124e0 <ReadPdmConfig+0x3e8>)
 801230c:	693a      	ldr	r2, [r7, #16]
 801230e:	4613      	mov	r3, r2
 8012310:	009b      	lsls	r3, r3, #2
 8012312:	4413      	add	r3, r2
 8012314:	00db      	lsls	r3, r3, #3
 8012316:	4403      	add	r3, r0
 8012318:	33ec      	adds	r3, #236	; 0xec
 801231a:	6019      	str	r1, [r3, #0]
    stPdmConfig.stVirtualInput[i].pVar1 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar1];
 801231c:	4970      	ldr	r1, [pc, #448]	; (80124e0 <ReadPdmConfig+0x3e8>)
 801231e:	693a      	ldr	r2, [r7, #16]
 8012320:	4613      	mov	r3, r2
 8012322:	009b      	lsls	r3, r3, #2
 8012324:	4413      	add	r3, r2
 8012326:	00db      	lsls	r3, r3, #3
 8012328:	440b      	add	r3, r1
 801232a:	33f2      	adds	r3, #242	; 0xf2
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	461a      	mov	r2, r3
 8012330:	4b6c      	ldr	r3, [pc, #432]	; (80124e4 <ReadPdmConfig+0x3ec>)
 8012332:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012336:	486a      	ldr	r0, [pc, #424]	; (80124e0 <ReadPdmConfig+0x3e8>)
 8012338:	693a      	ldr	r2, [r7, #16]
 801233a:	4613      	mov	r3, r2
 801233c:	009b      	lsls	r3, r3, #2
 801233e:	4413      	add	r3, r2
 8012340:	00db      	lsls	r3, r3, #3
 8012342:	4403      	add	r3, r0
 8012344:	33f4      	adds	r3, #244	; 0xf4
 8012346:	6019      	str	r1, [r3, #0]
    stPdmConfig.stVirtualInput[i].pVar2 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar2];
 8012348:	4965      	ldr	r1, [pc, #404]	; (80124e0 <ReadPdmConfig+0x3e8>)
 801234a:	693a      	ldr	r2, [r7, #16]
 801234c:	4613      	mov	r3, r2
 801234e:	009b      	lsls	r3, r3, #2
 8012350:	4413      	add	r3, r2
 8012352:	00db      	lsls	r3, r3, #3
 8012354:	440b      	add	r3, r1
 8012356:	33fa      	adds	r3, #250	; 0xfa
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	461a      	mov	r2, r3
 801235c:	4b61      	ldr	r3, [pc, #388]	; (80124e4 <ReadPdmConfig+0x3ec>)
 801235e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012362:	485f      	ldr	r0, [pc, #380]	; (80124e0 <ReadPdmConfig+0x3e8>)
 8012364:	693a      	ldr	r2, [r7, #16]
 8012366:	4613      	mov	r3, r2
 8012368:	009b      	lsls	r3, r3, #2
 801236a:	4413      	add	r3, r2
 801236c:	00db      	lsls	r3, r3, #3
 801236e:	4403      	add	r3, r0
 8012370:	33fc      	adds	r3, #252	; 0xfc
 8012372:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	3301      	adds	r3, #1
 8012378:	613b      	str	r3, [r7, #16]
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	2b13      	cmp	r3, #19
 801237e:	ddb7      	ble.n	80122f0 <ReadPdmConfig+0x1f8>
  }

  stWiper.eMode = stPdmConfig.stWiper.nMode;
 8012380:	4b57      	ldr	r3, [pc, #348]	; (80124e0 <ReadPdmConfig+0x3e8>)
 8012382:	f893 24f9 	ldrb.w	r2, [r3, #1273]	; 0x4f9
 8012386:	4b58      	ldr	r3, [pc, #352]	; (80124e8 <ReadPdmConfig+0x3f0>)
 8012388:	701a      	strb	r2, [r3, #0]
  stWiper.pSlowInput = pVariableMap[stPdmConfig.stWiper.nSlowInput];
 801238a:	4b55      	ldr	r3, [pc, #340]	; (80124e0 <ReadPdmConfig+0x3e8>)
 801238c:	f893 34fa 	ldrb.w	r3, [r3, #1274]	; 0x4fa
 8012390:	461a      	mov	r2, r3
 8012392:	4b54      	ldr	r3, [pc, #336]	; (80124e4 <ReadPdmConfig+0x3ec>)
 8012394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012398:	4a53      	ldr	r2, [pc, #332]	; (80124e8 <ReadPdmConfig+0x3f0>)
 801239a:	6253      	str	r3, [r2, #36]	; 0x24
  stWiper.pFastInput = pVariableMap[stPdmConfig.stWiper.nFastInput];
 801239c:	4b50      	ldr	r3, [pc, #320]	; (80124e0 <ReadPdmConfig+0x3e8>)
 801239e:	f893 34fb 	ldrb.w	r3, [r3, #1275]	; 0x4fb
 80123a2:	461a      	mov	r2, r3
 80123a4:	4b4f      	ldr	r3, [pc, #316]	; (80124e4 <ReadPdmConfig+0x3ec>)
 80123a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123aa:	4a4f      	ldr	r2, [pc, #316]	; (80124e8 <ReadPdmConfig+0x3f0>)
 80123ac:	6293      	str	r3, [r2, #40]	; 0x28
  stWiper.pInterInput = pVariableMap[stPdmConfig.stWiper.nInterInput];
 80123ae:	4b4c      	ldr	r3, [pc, #304]	; (80124e0 <ReadPdmConfig+0x3e8>)
 80123b0:	f893 34fc 	ldrb.w	r3, [r3, #1276]	; 0x4fc
 80123b4:	461a      	mov	r2, r3
 80123b6:	4b4b      	ldr	r3, [pc, #300]	; (80124e4 <ReadPdmConfig+0x3ec>)
 80123b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123bc:	4a4a      	ldr	r2, [pc, #296]	; (80124e8 <ReadPdmConfig+0x3f0>)
 80123be:	62d3      	str	r3, [r2, #44]	; 0x2c
  stWiper.pSwipeInput = pVariableMap[stPdmConfig.stWiper.nSwipeInput];
 80123c0:	4b47      	ldr	r3, [pc, #284]	; (80124e0 <ReadPdmConfig+0x3e8>)
 80123c2:	f893 3501 	ldrb.w	r3, [r3, #1281]	; 0x501
 80123c6:	461a      	mov	r2, r3
 80123c8:	4b46      	ldr	r3, [pc, #280]	; (80124e4 <ReadPdmConfig+0x3ec>)
 80123ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123ce:	4a46      	ldr	r2, [pc, #280]	; (80124e8 <ReadPdmConfig+0x3f0>)
 80123d0:	6193      	str	r3, [r2, #24]
  stWiper.pOnSw = pVariableMap[stPdmConfig.stWiper.nOnInput];
 80123d2:	4b43      	ldr	r3, [pc, #268]	; (80124e0 <ReadPdmConfig+0x3e8>)
 80123d4:	f893 34fd 	ldrb.w	r3, [r3, #1277]	; 0x4fd
 80123d8:	461a      	mov	r2, r3
 80123da:	4b42      	ldr	r3, [pc, #264]	; (80124e4 <ReadPdmConfig+0x3ec>)
 80123dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123e0:	4a41      	ldr	r2, [pc, #260]	; (80124e8 <ReadPdmConfig+0x3f0>)
 80123e2:	6413      	str	r3, [r2, #64]	; 0x40
  stWiper.pParkSw = pVariableMap[stPdmConfig.stWiper.nParkInput];
 80123e4:	4b3e      	ldr	r3, [pc, #248]	; (80124e0 <ReadPdmConfig+0x3e8>)
 80123e6:	f893 34ff 	ldrb.w	r3, [r3, #1279]	; 0x4ff
 80123ea:	461a      	mov	r2, r3
 80123ec:	4b3d      	ldr	r3, [pc, #244]	; (80124e4 <ReadPdmConfig+0x3ec>)
 80123ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123f2:	4a3d      	ldr	r2, [pc, #244]	; (80124e8 <ReadPdmConfig+0x3f0>)
 80123f4:	6093      	str	r3, [r2, #8]
  stWiper.pSpeedInput = pVariableMap[stPdmConfig.stWiper.nSpeedInput];
 80123f6:	4b3a      	ldr	r3, [pc, #232]	; (80124e0 <ReadPdmConfig+0x3e8>)
 80123f8:	f893 34fe 	ldrb.w	r3, [r3, #1278]	; 0x4fe
 80123fc:	461a      	mov	r2, r3
 80123fe:	4b39      	ldr	r3, [pc, #228]	; (80124e4 <ReadPdmConfig+0x3ec>)
 8012400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012404:	4a38      	ldr	r2, [pc, #224]	; (80124e8 <ReadPdmConfig+0x3f0>)
 8012406:	6313      	str	r3, [r2, #48]	; 0x30
  stWiper.pWashInput = pVariableMap[stPdmConfig.stWiper.nWashInput];
 8012408:	4b35      	ldr	r3, [pc, #212]	; (80124e0 <ReadPdmConfig+0x3e8>)
 801240a:	f893 3502 	ldrb.w	r3, [r3, #1282]	; 0x502
 801240e:	461a      	mov	r2, r3
 8012410:	4b34      	ldr	r3, [pc, #208]	; (80124e4 <ReadPdmConfig+0x3ec>)
 8012412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012416:	4a34      	ldr	r2, [pc, #208]	; (80124e8 <ReadPdmConfig+0x3f0>)
 8012418:	61d3      	str	r3, [r2, #28]
  stWiper.nWashWipeCycles = stPdmConfig.stWiper.nWashWipeCycles;
 801241a:	4b31      	ldr	r3, [pc, #196]	; (80124e0 <ReadPdmConfig+0x3e8>)
 801241c:	f893 2503 	ldrb.w	r2, [r3, #1283]	; 0x503
 8012420:	4b31      	ldr	r3, [pc, #196]	; (80124e8 <ReadPdmConfig+0x3f0>)
 8012422:	f883 2020 	strb.w	r2, [r3, #32]
  for(int i=0; i<PDM_NUM_WIPER_INTER_DELAYS; i++)
 8012426:	2300      	movs	r3, #0
 8012428:	60fb      	str	r3, [r7, #12]
 801242a:	e010      	b.n	801244e <ReadPdmConfig+0x356>
    stWiper.nInterDelays[i] = stPdmConfig.stWiper.nIntermitTime[i];
 801242c:	4a2c      	ldr	r2, [pc, #176]	; (80124e0 <ReadPdmConfig+0x3e8>)
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012434:	005b      	lsls	r3, r3, #1
 8012436:	4413      	add	r3, r2
 8012438:	8899      	ldrh	r1, [r3, #4]
 801243a:	4a2b      	ldr	r2, [pc, #172]	; (80124e8 <ReadPdmConfig+0x3f0>)
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	3304      	adds	r3, #4
 8012440:	005b      	lsls	r3, r3, #1
 8012442:	4413      	add	r3, r2
 8012444:	460a      	mov	r2, r1
 8012446:	809a      	strh	r2, [r3, #4]
  for(int i=0; i<PDM_NUM_WIPER_INTER_DELAYS; i++)
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	3301      	adds	r3, #1
 801244c:	60fb      	str	r3, [r7, #12]
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	2b05      	cmp	r3, #5
 8012452:	ddeb      	ble.n	801242c <ReadPdmConfig+0x334>
  for(int i=0; i<PDM_NUM_WIPER_SPEED_MAP; i++)
 8012454:	2300      	movs	r3, #0
 8012456:	60bb      	str	r3, [r7, #8]
 8012458:	e00e      	b.n	8012478 <ReadPdmConfig+0x380>
    stWiper.eSpeedMap[i] = (WiperSpeed_t)stPdmConfig.stWiper.nSpeedMap[i];
 801245a:	4a21      	ldr	r2, [pc, #132]	; (80124e0 <ReadPdmConfig+0x3e8>)
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	4413      	add	r3, r2
 8012460:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8012464:	7819      	ldrb	r1, [r3, #0]
 8012466:	4a20      	ldr	r2, [pc, #128]	; (80124e8 <ReadPdmConfig+0x3f0>)
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	4413      	add	r3, r2
 801246c:	3334      	adds	r3, #52	; 0x34
 801246e:	460a      	mov	r2, r1
 8012470:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<PDM_NUM_WIPER_SPEED_MAP; i++)
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	3301      	adds	r3, #1
 8012476:	60bb      	str	r3, [r7, #8]
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	2b07      	cmp	r3, #7
 801247c:	dded      	ble.n	801245a <ReadPdmConfig+0x362>

  stPdmConfig.stStarter.pInput = pVariableMap[stPdmConfig.stStarter.nInput];
 801247e:	4b18      	ldr	r3, [pc, #96]	; (80124e0 <ReadPdmConfig+0x3e8>)
 8012480:	f893 3579 	ldrb.w	r3, [r3, #1401]	; 0x579
 8012484:	461a      	mov	r2, r3
 8012486:	4b17      	ldr	r3, [pc, #92]	; (80124e4 <ReadPdmConfig+0x3ec>)
 8012488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801248c:	4a14      	ldr	r2, [pc, #80]	; (80124e0 <ReadPdmConfig+0x3e8>)
 801248e:	f8c2 357c 	str.w	r3, [r2, #1404]	; 0x57c

  for(int i=0; i<PDM_NUM_FLASHERS; i++)
 8012492:	2300      	movs	r3, #0
 8012494:	607b      	str	r3, [r7, #4]
 8012496:	e01a      	b.n	80124ce <ReadPdmConfig+0x3d6>
    stPdmConfig.stFlasher[i].pInput = pVariableMap[stPdmConfig.stFlasher[i].nInput];
 8012498:	4911      	ldr	r1, [pc, #68]	; (80124e0 <ReadPdmConfig+0x3e8>)
 801249a:	687a      	ldr	r2, [r7, #4]
 801249c:	4613      	mov	r3, r2
 801249e:	005b      	lsls	r3, r3, #1
 80124a0:	4413      	add	r3, r2
 80124a2:	00db      	lsls	r3, r3, #3
 80124a4:	440b      	add	r3, r1
 80124a6:	f203 5319 	addw	r3, r3, #1305	; 0x519
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	461a      	mov	r2, r3
 80124ae:	4b0d      	ldr	r3, [pc, #52]	; (80124e4 <ReadPdmConfig+0x3ec>)
 80124b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80124b4:	480a      	ldr	r0, [pc, #40]	; (80124e0 <ReadPdmConfig+0x3e8>)
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	4613      	mov	r3, r2
 80124ba:	005b      	lsls	r3, r3, #1
 80124bc:	4413      	add	r3, r2
 80124be:	00db      	lsls	r3, r3, #3
 80124c0:	4403      	add	r3, r0
 80124c2:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80124c6:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_FLASHERS; i++)
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	3301      	adds	r3, #1
 80124cc:	607b      	str	r3, [r7, #4]
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2b03      	cmp	r3, #3
 80124d2:	dde1      	ble.n	8012498 <ReadPdmConfig+0x3a0>


  return PDM_OK;
 80124d4:	2301      	movs	r3, #1

}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3730      	adds	r7, #48	; 0x30
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop
 80124e0:	20002a48 	.word	0x20002a48
 80124e4:	20003704 	.word	0x20003704
 80124e8:	200036b4 	.word	0x200036b4

080124ec <EvaluateFlasher>:
 */

#include "flasher.h"

void EvaluateFlasher(PdmConfig_Flasher_t* pFlasher, uint16_t pResult[12])
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
  if(!pFlasher->nEnabled){
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	781b      	ldrb	r3, [r3, #0]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d107      	bne.n	801250e <EvaluateFlasher+0x22>
    pResult[pFlasher->nOutput] = 1;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	7b5b      	ldrb	r3, [r3, #13]
 8012502:	005b      	lsls	r3, r3, #1
 8012504:	683a      	ldr	r2, [r7, #0]
 8012506:	4413      	add	r3, r2
 8012508:	2201      	movs	r2, #1
 801250a:	801a      	strh	r2, [r3, #0]
    return;
 801250c:	e048      	b.n	80125a0 <EvaluateFlasher+0xb4>
  }
  if(!*pFlasher->pInput){
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	685b      	ldr	r3, [r3, #4]
 8012512:	881b      	ldrh	r3, [r3, #0]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d107      	bne.n	8012528 <EvaluateFlasher+0x3c>
    pResult[pFlasher->nOutput] = 1;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	7b5b      	ldrb	r3, [r3, #13]
 801251c:	005b      	lsls	r3, r3, #1
 801251e:	683a      	ldr	r2, [r7, #0]
 8012520:	4413      	add	r3, r2
 8012522:	2201      	movs	r2, #1
 8012524:	801a      	strh	r2, [r3, #0]
    return;
 8012526:	e03b      	b.n	80125a0 <EvaluateFlasher+0xb4>
  }

  if((pResult[pFlasher->nOutput] == 0) && ((HAL_GetTick() - pFlasher->nTimeOff) > pFlasher->nFlashOffTime)){
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	7b5b      	ldrb	r3, [r3, #13]
 801252c:	005b      	lsls	r3, r3, #1
 801252e:	683a      	ldr	r2, [r7, #0]
 8012530:	4413      	add	r3, r2
 8012532:	881b      	ldrh	r3, [r3, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d115      	bne.n	8012564 <EvaluateFlasher+0x78>
 8012538:	f7f0 f9d8 	bl	80028ec <HAL_GetTick>
 801253c:	4602      	mov	r2, r0
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	691b      	ldr	r3, [r3, #16]
 8012542:	1ad3      	subs	r3, r2, r3
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	8952      	ldrh	r2, [r2, #10]
 8012548:	4293      	cmp	r3, r2
 801254a:	d90b      	bls.n	8012564 <EvaluateFlasher+0x78>
    pResult[pFlasher->nOutput] = 1;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	7b5b      	ldrb	r3, [r3, #13]
 8012550:	005b      	lsls	r3, r3, #1
 8012552:	683a      	ldr	r2, [r7, #0]
 8012554:	4413      	add	r3, r2
 8012556:	2201      	movs	r2, #1
 8012558:	801a      	strh	r2, [r3, #0]
    pFlasher->nTimeOn = HAL_GetTick();
 801255a:	f7f0 f9c7 	bl	80028ec <HAL_GetTick>
 801255e:	4602      	mov	r2, r0
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	615a      	str	r2, [r3, #20]
  }
  if((pResult[pFlasher->nOutput] == 1) && ((HAL_GetTick() - pFlasher->nTimeOn) > pFlasher->nFlashOnTime)){
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	7b5b      	ldrb	r3, [r3, #13]
 8012568:	005b      	lsls	r3, r3, #1
 801256a:	683a      	ldr	r2, [r7, #0]
 801256c:	4413      	add	r3, r2
 801256e:	881b      	ldrh	r3, [r3, #0]
 8012570:	2b01      	cmp	r3, #1
 8012572:	d115      	bne.n	80125a0 <EvaluateFlasher+0xb4>
 8012574:	f7f0 f9ba 	bl	80028ec <HAL_GetTick>
 8012578:	4602      	mov	r2, r0
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	695b      	ldr	r3, [r3, #20]
 801257e:	1ad3      	subs	r3, r2, r3
 8012580:	687a      	ldr	r2, [r7, #4]
 8012582:	8912      	ldrh	r2, [r2, #8]
 8012584:	4293      	cmp	r3, r2
 8012586:	d90b      	bls.n	80125a0 <EvaluateFlasher+0xb4>
    pResult[pFlasher->nOutput] = 0;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	7b5b      	ldrb	r3, [r3, #13]
 801258c:	005b      	lsls	r3, r3, #1
 801258e:	683a      	ldr	r2, [r7, #0]
 8012590:	4413      	add	r3, r2
 8012592:	2200      	movs	r2, #0
 8012594:	801a      	strh	r2, [r3, #0]
    pFlasher->nTimeOff = HAL_GetTick();
 8012596:	f7f0 f9a9 	bl	80028ec <HAL_GetTick>
 801259a:	4602      	mov	r2, r0
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	611a      	str	r2, [r3, #16]
  }

}
 80125a0:	3708      	adds	r7, #8
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
	...

080125a8 <PdmConfig_Set>:
  MB85RC_Write(hi2c, nAddr, 0x0, (uint8_t*)pConfig, sizeof(*pConfig));

  return 1;
}

uint8_t PdmConfig_Set(PdmConfig_t* pConfig, MsgQueueRx_t* stMsgRx, osMessageQueueId_t* qMsgQueueUsbTx, osMessageQueueId_t* qMsgQueueCanTx){
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b084      	sub	sp, #16
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	60f8      	str	r0, [r7, #12]
 80125b0:	60b9      	str	r1, [r7, #8]
 80125b2:	607a      	str	r2, [r7, #4]
 80125b4:	603b      	str	r3, [r7, #0]

  nSend = 0;
 80125b6:	4b6a      	ldr	r3, [pc, #424]	; (8012760 <PdmConfig_Set+0x1b8>)
 80125b8:	2200      	movs	r2, #0
 80125ba:	701a      	strb	r2, [r3, #0]

  switch((MsgQueueRxCmd_t)stMsgRx->nRxData[0]){
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80125c2:	3b43      	subs	r3, #67	; 0x43
 80125c4:	2b16      	cmp	r3, #22
 80125c6:	f201 82f4 	bhi.w	8013bb2 <PdmConfig_Set+0x160a>
 80125ca:	a201      	add	r2, pc, #4	; (adr r2, 80125d0 <PdmConfig_Set+0x28>)
 80125cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125d0:	0801262d 	.word	0x0801262d
 80125d4:	08013665 	.word	0x08013665
 80125d8:	08013bb3 	.word	0x08013bb3
 80125dc:	08013bb3 	.word	0x08013bb3
 80125e0:	08013bb3 	.word	0x08013bb3
 80125e4:	080133f9 	.word	0x080133f9
 80125e8:	08012771 	.word	0x08012771
 80125ec:	08013bb3 	.word	0x08013bb3
 80125f0:	08013bb3 	.word	0x08013bb3
 80125f4:	08012753 	.word	0x08012753
 80125f8:	08013bb3 	.word	0x08013bb3
 80125fc:	080138d9 	.word	0x080138d9
 8012600:	08012909 	.word	0x08012909
 8012604:	080130b1 	.word	0x080130b1
 8012608:	08013bb3 	.word	0x08013bb3
 801260c:	08013bb3 	.word	0x08013bb3
 8012610:	08013bb3 	.word	0x08013bb3
 8012614:	08013bb3 	.word	0x08013bb3
 8012618:	08012c15 	.word	0x08012c15
 801261c:	08013b65 	.word	0x08013b65
 8012620:	08012f43 	.word	0x08012f43
 8012624:	08013bb3 	.word	0x08013bb3
 8012628:	08013253 	.word	0x08013253

    //Set CAN Settings
    // 'C'
    case MSG_RX_SET_CAN:
      if(stMsgRx->nRxLen == 5){
 801262c:	68bb      	ldr	r3, [r7, #8]
 801262e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012632:	2b05      	cmp	r3, #5
 8012634:	d13c      	bne.n	80126b0 <PdmConfig_Set+0x108>

        pConfig->stDevConfig.nCanEnabled = stMsgRx->nRxData[1] & 0x01;
 8012636:	68bb      	ldr	r3, [r7, #8]
 8012638:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801263c:	f003 0301 	and.w	r3, r3, #1
 8012640:	b2da      	uxtb	r2, r3
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	705a      	strb	r2, [r3, #1]
        pConfig->stCanOutput.nEnabled = (stMsgRx->nRxData[1] & 0x02) >> 1;
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801264c:	105b      	asrs	r3, r3, #1
 801264e:	b2db      	uxtb	r3, r3
 8012650:	f003 0301 	and.w	r3, r3, #1
 8012654:	b2da      	uxtb	r2, r3
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
        pConfig->stDevConfig.nCanSpeed = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012662:	091b      	lsrs	r3, r3, #4
 8012664:	b2da      	uxtb	r2, r3
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	709a      	strb	r2, [r3, #2]

        pConfig->stCanOutput.nBaseId = (stMsgRx->nRxData[2] << 8) + stMsgRx->nRxData[3];
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012670:	b29b      	uxth	r3, r3
 8012672:	021b      	lsls	r3, r3, #8
 8012674:	b29a      	uxth	r2, r3
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801267c:	b29b      	uxth	r3, r3
 801267e:	4413      	add	r3, r2
 8012680:	b29a      	uxth	r2, r3
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	f8a3 28d6 	strh.w	r2, [r3, #2262]	; 0x8d6
        pConfig->stCanOutput.nUpdateTime = stMsgRx->nRxData[4] * 100;
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801268e:	b29b      	uxth	r3, r3
 8012690:	461a      	mov	r2, r3
 8012692:	0092      	lsls	r2, r2, #2
 8012694:	4413      	add	r3, r2
 8012696:	461a      	mov	r2, r3
 8012698:	0091      	lsls	r1, r2, #2
 801269a:	461a      	mov	r2, r3
 801269c:	460b      	mov	r3, r1
 801269e:	4413      	add	r3, r2
 80126a0:	009b      	lsls	r3, r3, #2
 80126a2:	b29a      	uxth	r2, r3
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	f8a3 28d8 	strh.w	r2, [r3, #2264]	; 0x8d8
        nSend = 1;
 80126aa:	4b2d      	ldr	r3, [pc, #180]	; (8012760 <PdmConfig_Set+0x1b8>)
 80126ac:	2201      	movs	r2, #1
 80126ae:	701a      	strb	r2, [r3, #0]
      }

      if((stMsgRx->nRxLen == 1) || (nSend)){
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d004      	beq.n	80126c4 <PdmConfig_Set+0x11c>
 80126ba:	4b29      	ldr	r3, [pc, #164]	; (8012760 <PdmConfig_Set+0x1b8>)
 80126bc:	781b      	ldrb	r3, [r3, #0]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	f001 8279 	beq.w	8013bb6 <PdmConfig_Set+0x160e>
        stMsgUsbTx.nTxLen = 5;
 80126c4:	4b27      	ldr	r3, [pc, #156]	; (8012764 <PdmConfig_Set+0x1bc>)
 80126c6:	2205      	movs	r2, #5
 80126c8:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 80126ca:	4b27      	ldr	r3, [pc, #156]	; (8012768 <PdmConfig_Set+0x1c0>)
 80126cc:	2205      	movs	r2, #5
 80126ce:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_CAN;
 80126d0:	4b24      	ldr	r3, [pc, #144]	; (8012764 <PdmConfig_Set+0x1bc>)
 80126d2:	2263      	movs	r2, #99	; 0x63
 80126d4:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stDevConfig.nCanSpeed & 0x0F) << 4) + ((pConfig->stCanOutput.nEnabled & 0x01) << 1) + (pConfig->stDevConfig.nCanEnabled & 0x01);
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	789b      	ldrb	r3, [r3, #2]
 80126da:	011b      	lsls	r3, r3, #4
 80126dc:	b2da      	uxtb	r2, r3
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	f893 38d4 	ldrb.w	r3, [r3, #2260]	; 0x8d4
 80126e4:	005b      	lsls	r3, r3, #1
 80126e6:	b2db      	uxtb	r3, r3
 80126e8:	f003 0302 	and.w	r3, r3, #2
 80126ec:	b2db      	uxtb	r3, r3
 80126ee:	4413      	add	r3, r2
 80126f0:	b2da      	uxtb	r2, r3
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	785b      	ldrb	r3, [r3, #1]
 80126f6:	f003 0301 	and.w	r3, r3, #1
 80126fa:	b2db      	uxtb	r3, r3
 80126fc:	4413      	add	r3, r2
 80126fe:	b2da      	uxtb	r2, r3
 8012700:	4b18      	ldr	r3, [pc, #96]	; (8012764 <PdmConfig_Set+0x1bc>)
 8012702:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)((pConfig->stCanOutput.nBaseId & 0xFF00) >> 8);
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 801270a:	0a1b      	lsrs	r3, r3, #8
 801270c:	b29b      	uxth	r3, r3
 801270e:	b2da      	uxtb	r2, r3
 8012710:	4b14      	ldr	r3, [pc, #80]	; (8012764 <PdmConfig_Set+0x1bc>)
 8012712:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stCanOutput.nBaseId & 0x00FF);
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 801271a:	b2da      	uxtb	r2, r3
 801271c:	4b11      	ldr	r3, [pc, #68]	; (8012764 <PdmConfig_Set+0x1bc>)
 801271e:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)((pConfig->stCanOutput.nUpdateTime) / 100);
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
 8012726:	4a11      	ldr	r2, [pc, #68]	; (801276c <PdmConfig_Set+0x1c4>)
 8012728:	fba2 2303 	umull	r2, r3, r2, r3
 801272c:	095b      	lsrs	r3, r3, #5
 801272e:	b29b      	uxth	r3, r3
 8012730:	b2da      	uxtb	r2, r3
 8012732:	4b0c      	ldr	r3, [pc, #48]	; (8012764 <PdmConfig_Set+0x1bc>)
 8012734:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8012736:	4b0b      	ldr	r3, [pc, #44]	; (8012764 <PdmConfig_Set+0x1bc>)
 8012738:	2200      	movs	r2, #0
 801273a:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 801273c:	4b09      	ldr	r3, [pc, #36]	; (8012764 <PdmConfig_Set+0x1bc>)
 801273e:	2200      	movs	r2, #0
 8012740:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8012742:	4b08      	ldr	r3, [pc, #32]	; (8012764 <PdmConfig_Set+0x1bc>)
 8012744:	2200      	movs	r2, #0
 8012746:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8012748:	4b05      	ldr	r3, [pc, #20]	; (8012760 <PdmConfig_Set+0x1b8>)
 801274a:	2201      	movs	r2, #1
 801274c:	701a      	strb	r2, [r3, #0]
      }
    break;
 801274e:	f001 ba32 	b.w	8013bb6 <PdmConfig_Set+0x160e>
    // 'L'
    case MSG_RX_SET_LOGGING:
      if(stMsgRx->nRxLen == 3){
        //TODO:Send response
      }
      if((stMsgRx->nRxLen == 1) || (nSend)){
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012758:	2b01      	cmp	r3, #1

      }
    break;
 801275a:	f001 ba4a 	b.w	8013bf2 <PdmConfig_Set+0x164a>
 801275e:	bf00      	nop
 8012760:	20004be8 	.word	0x20004be8
 8012764:	20004bbc 	.word	0x20004bbc
 8012768:	20004bc8 	.word	0x20004bc8
 801276c:	51eb851f 	.word	0x51eb851f

    //Set Input Settings
    // 'I'
    case MSG_RX_SET_INPUTS:
      if(stMsgRx->nRxLen == 3){
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012776:	2b03      	cmp	r3, #3
 8012778:	d14e      	bne.n	8012818 <PdmConfig_Set+0x270>
        nInNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012780:	091b      	lsrs	r3, r3, #4
 8012782:	b2da      	uxtb	r2, r3
 8012784:	4b5b      	ldr	r3, [pc, #364]	; (80128f4 <PdmConfig_Set+0x34c>)
 8012786:	701a      	strb	r2, [r3, #0]
        if(nInNum < PDM_NUM_INPUTS){
 8012788:	4b5a      	ldr	r3, [pc, #360]	; (80128f4 <PdmConfig_Set+0x34c>)
 801278a:	781b      	ldrb	r3, [r3, #0]
 801278c:	2b07      	cmp	r3, #7
 801278e:	d843      	bhi.n	8012818 <PdmConfig_Set+0x270>
          pConfig->stInput[nInNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012796:	4a57      	ldr	r2, [pc, #348]	; (80128f4 <PdmConfig_Set+0x34c>)
 8012798:	7812      	ldrb	r2, [r2, #0]
 801279a:	4611      	mov	r1, r2
 801279c:	f003 0301 	and.w	r3, r3, #1
 80127a0:	b2d8      	uxtb	r0, r3
 80127a2:	68fa      	ldr	r2, [r7, #12]
 80127a4:	460b      	mov	r3, r1
 80127a6:	00db      	lsls	r3, r3, #3
 80127a8:	1a5b      	subs	r3, r3, r1
 80127aa:	009b      	lsls	r3, r3, #2
 80127ac:	4413      	add	r3, r2
 80127ae:	3308      	adds	r3, #8
 80127b0:	4602      	mov	r2, r0
 80127b2:	701a      	strb	r2, [r3, #0]
          pConfig->stInput[nInNum].eMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80127ba:	105b      	asrs	r3, r3, #1
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	4a4d      	ldr	r2, [pc, #308]	; (80128f4 <PdmConfig_Set+0x34c>)
 80127c0:	7812      	ldrb	r2, [r2, #0]
 80127c2:	4611      	mov	r1, r2
 80127c4:	f003 0303 	and.w	r3, r3, #3
 80127c8:	b2d8      	uxtb	r0, r3
 80127ca:	68fa      	ldr	r2, [r7, #12]
 80127cc:	460b      	mov	r3, r1
 80127ce:	00db      	lsls	r3, r3, #3
 80127d0:	1a5b      	subs	r3, r3, r1
 80127d2:	009b      	lsls	r3, r3, #2
 80127d4:	4413      	add	r3, r2
 80127d6:	3310      	adds	r3, #16
 80127d8:	4602      	mov	r2, r0
 80127da:	701a      	strb	r2, [r3, #0]
          //TODO:Include binary on level on V3 PCB
          //pConfig->stInput[nInNum].nOnLevel = (stMsgRx->nRxData[1] & 0x08) >> 3;
          pConfig->stInput[nInNum].nDebounceTime = stMsgRx->nRxData[2] * 100;
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80127e2:	b29a      	uxth	r2, r3
 80127e4:	4b43      	ldr	r3, [pc, #268]	; (80128f4 <PdmConfig_Set+0x34c>)
 80127e6:	781b      	ldrb	r3, [r3, #0]
 80127e8:	4619      	mov	r1, r3
 80127ea:	4613      	mov	r3, r2
 80127ec:	461a      	mov	r2, r3
 80127ee:	0092      	lsls	r2, r2, #2
 80127f0:	4413      	add	r3, r2
 80127f2:	461a      	mov	r2, r3
 80127f4:	0090      	lsls	r0, r2, #2
 80127f6:	461a      	mov	r2, r3
 80127f8:	4603      	mov	r3, r0
 80127fa:	4413      	add	r3, r2
 80127fc:	009b      	lsls	r3, r3, #2
 80127fe:	b298      	uxth	r0, r3
 8012800:	68fa      	ldr	r2, [r7, #12]
 8012802:	460b      	mov	r3, r1
 8012804:	00db      	lsls	r3, r3, #3
 8012806:	1a5b      	subs	r3, r3, r1
 8012808:	009b      	lsls	r3, r3, #2
 801280a:	4413      	add	r3, r2
 801280c:	3322      	adds	r3, #34	; 0x22
 801280e:	4602      	mov	r2, r0
 8012810:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 8012812:	4b39      	ldr	r3, [pc, #228]	; (80128f8 <PdmConfig_Set+0x350>)
 8012814:	2201      	movs	r2, #1
 8012816:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801281e:	2b02      	cmp	r3, #2
 8012820:	d10d      	bne.n	801283e <PdmConfig_Set+0x296>
        nInNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012828:	091b      	lsrs	r3, r3, #4
 801282a:	b2da      	uxtb	r2, r3
 801282c:	4b31      	ldr	r3, [pc, #196]	; (80128f4 <PdmConfig_Set+0x34c>)
 801282e:	701a      	strb	r2, [r3, #0]
        if(nInNum < PDM_NUM_INPUTS){
 8012830:	4b30      	ldr	r3, [pc, #192]	; (80128f4 <PdmConfig_Set+0x34c>)
 8012832:	781b      	ldrb	r3, [r3, #0]
 8012834:	2b07      	cmp	r3, #7
 8012836:	d802      	bhi.n	801283e <PdmConfig_Set+0x296>
          nSend = 1;
 8012838:	4b2f      	ldr	r3, [pc, #188]	; (80128f8 <PdmConfig_Set+0x350>)
 801283a:	2201      	movs	r2, #1
 801283c:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 801283e:	4b2e      	ldr	r3, [pc, #184]	; (80128f8 <PdmConfig_Set+0x350>)
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	f001 81b9 	beq.w	8013bba <PdmConfig_Set+0x1612>
        stMsgUsbTx.nTxLen = 3;
 8012848:	4b2c      	ldr	r3, [pc, #176]	; (80128fc <PdmConfig_Set+0x354>)
 801284a:	2203      	movs	r2, #3
 801284c:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 3;
 801284e:	4b2c      	ldr	r3, [pc, #176]	; (8012900 <PdmConfig_Set+0x358>)
 8012850:	2203      	movs	r2, #3
 8012852:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_INPUTS;
 8012854:	4b29      	ldr	r3, [pc, #164]	; (80128fc <PdmConfig_Set+0x354>)
 8012856:	2269      	movs	r2, #105	; 0x69
 8012858:	701a      	strb	r2, [r3, #0]
        //TODO:Add binary On Level on V3 PCB
        stMsgUsbTx.nTxData[1] = ((nInNum & 0x0F) << 4) + ((pConfig->stInput[nInNum].eMode & 0x03) << 2) + (pConfig->stInput[nInNum].nEnabled & 0x01);
 801285a:	4b26      	ldr	r3, [pc, #152]	; (80128f4 <PdmConfig_Set+0x34c>)
 801285c:	781b      	ldrb	r3, [r3, #0]
 801285e:	011b      	lsls	r3, r3, #4
 8012860:	b2da      	uxtb	r2, r3
 8012862:	4b24      	ldr	r3, [pc, #144]	; (80128f4 <PdmConfig_Set+0x34c>)
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	4618      	mov	r0, r3
 8012868:	68f9      	ldr	r1, [r7, #12]
 801286a:	4603      	mov	r3, r0
 801286c:	00db      	lsls	r3, r3, #3
 801286e:	1a1b      	subs	r3, r3, r0
 8012870:	009b      	lsls	r3, r3, #2
 8012872:	440b      	add	r3, r1
 8012874:	3310      	adds	r3, #16
 8012876:	781b      	ldrb	r3, [r3, #0]
 8012878:	009b      	lsls	r3, r3, #2
 801287a:	b2db      	uxtb	r3, r3
 801287c:	f003 030c 	and.w	r3, r3, #12
 8012880:	b2db      	uxtb	r3, r3
 8012882:	4413      	add	r3, r2
 8012884:	b2da      	uxtb	r2, r3
 8012886:	4b1b      	ldr	r3, [pc, #108]	; (80128f4 <PdmConfig_Set+0x34c>)
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	4618      	mov	r0, r3
 801288c:	68f9      	ldr	r1, [r7, #12]
 801288e:	4603      	mov	r3, r0
 8012890:	00db      	lsls	r3, r3, #3
 8012892:	1a1b      	subs	r3, r3, r0
 8012894:	009b      	lsls	r3, r3, #2
 8012896:	440b      	add	r3, r1
 8012898:	3308      	adds	r3, #8
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	f003 0301 	and.w	r3, r3, #1
 80128a0:	b2db      	uxtb	r3, r3
 80128a2:	4413      	add	r3, r2
 80128a4:	b2da      	uxtb	r2, r3
 80128a6:	4b15      	ldr	r3, [pc, #84]	; (80128fc <PdmConfig_Set+0x354>)
 80128a8:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)(pConfig->stInput[nInNum].nDebounceTime / 100);
 80128aa:	4b12      	ldr	r3, [pc, #72]	; (80128f4 <PdmConfig_Set+0x34c>)
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	4619      	mov	r1, r3
 80128b0:	68fa      	ldr	r2, [r7, #12]
 80128b2:	460b      	mov	r3, r1
 80128b4:	00db      	lsls	r3, r3, #3
 80128b6:	1a5b      	subs	r3, r3, r1
 80128b8:	009b      	lsls	r3, r3, #2
 80128ba:	4413      	add	r3, r2
 80128bc:	3322      	adds	r3, #34	; 0x22
 80128be:	881b      	ldrh	r3, [r3, #0]
 80128c0:	4a10      	ldr	r2, [pc, #64]	; (8012904 <PdmConfig_Set+0x35c>)
 80128c2:	fba2 2303 	umull	r2, r3, r2, r3
 80128c6:	095b      	lsrs	r3, r3, #5
 80128c8:	b29b      	uxth	r3, r3
 80128ca:	b2da      	uxtb	r2, r3
 80128cc:	4b0b      	ldr	r3, [pc, #44]	; (80128fc <PdmConfig_Set+0x354>)
 80128ce:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = 0;
 80128d0:	4b0a      	ldr	r3, [pc, #40]	; (80128fc <PdmConfig_Set+0x354>)
 80128d2:	2200      	movs	r2, #0
 80128d4:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = 0;
 80128d6:	4b09      	ldr	r3, [pc, #36]	; (80128fc <PdmConfig_Set+0x354>)
 80128d8:	2200      	movs	r2, #0
 80128da:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 80128dc:	4b07      	ldr	r3, [pc, #28]	; (80128fc <PdmConfig_Set+0x354>)
 80128de:	2200      	movs	r2, #0
 80128e0:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 80128e2:	4b06      	ldr	r3, [pc, #24]	; (80128fc <PdmConfig_Set+0x354>)
 80128e4:	2200      	movs	r2, #0
 80128e6:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 80128e8:	4b04      	ldr	r3, [pc, #16]	; (80128fc <PdmConfig_Set+0x354>)
 80128ea:	2200      	movs	r2, #0
 80128ec:	71da      	strb	r2, [r3, #7]
      }

    break;
 80128ee:	f001 b964 	b.w	8013bba <PdmConfig_Set+0x1612>
 80128f2:	bf00      	nop
 80128f4:	20004be9 	.word	0x20004be9
 80128f8:	20004be8 	.word	0x20004be8
 80128fc:	20004bbc 	.word	0x20004bbc
 8012900:	20004bc8 	.word	0x20004bc8
 8012904:	51eb851f 	.word	0x51eb851f

    //Set Output Settings
    // 'O'
    case MSG_RX_SET_OUTPUTS:
      if(stMsgRx->nRxLen == 8){
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801290e:	2b08      	cmp	r3, #8
 8012910:	f040 80bb 	bne.w	8012a8a <PdmConfig_Set+0x4e2>
        nOutNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801291a:	091b      	lsrs	r3, r3, #4
 801291c:	b2da      	uxtb	r2, r3
 801291e:	4bb7      	ldr	r3, [pc, #732]	; (8012bfc <PdmConfig_Set+0x654>)
 8012920:	701a      	strb	r2, [r3, #0]
        if(nOutNum < PDM_NUM_OUTPUTS){
 8012922:	4bb6      	ldr	r3, [pc, #728]	; (8012bfc <PdmConfig_Set+0x654>)
 8012924:	781b      	ldrb	r3, [r3, #0]
 8012926:	2b0b      	cmp	r3, #11
 8012928:	f200 80af 	bhi.w	8012a8a <PdmConfig_Set+0x4e2>
          pConfig->stOutput[nOutNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012932:	4ab2      	ldr	r2, [pc, #712]	; (8012bfc <PdmConfig_Set+0x654>)
 8012934:	7812      	ldrb	r2, [r2, #0]
 8012936:	4611      	mov	r1, r2
 8012938:	f003 0301 	and.w	r3, r3, #1
 801293c:	b2d8      	uxtb	r0, r3
 801293e:	68fa      	ldr	r2, [r7, #12]
 8012940:	460b      	mov	r3, r1
 8012942:	009b      	lsls	r3, r3, #2
 8012944:	440b      	add	r3, r1
 8012946:	009b      	lsls	r3, r3, #2
 8012948:	4413      	add	r3, r2
 801294a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801294e:	4602      	mov	r2, r0
 8012950:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInput = stMsgRx->nRxData[2];
 8012952:	4baa      	ldr	r3, [pc, #680]	; (8012bfc <PdmConfig_Set+0x654>)
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	4619      	mov	r1, r3
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 801295e:	68fa      	ldr	r2, [r7, #12]
 8012960:	460b      	mov	r3, r1
 8012962:	009b      	lsls	r3, r3, #2
 8012964:	440b      	add	r3, r1
 8012966:	009b      	lsls	r3, r3, #2
 8012968:	4413      	add	r3, r2
 801296a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801296e:	4602      	mov	r2, r0
 8012970:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nCurrentLimit = stMsgRx->nRxData[3] / 10;
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012978:	4aa1      	ldr	r2, [pc, #644]	; (8012c00 <PdmConfig_Set+0x658>)
 801297a:	fba2 2303 	umull	r2, r3, r2, r3
 801297e:	08db      	lsrs	r3, r3, #3
 8012980:	b2da      	uxtb	r2, r3
 8012982:	4b9e      	ldr	r3, [pc, #632]	; (8012bfc <PdmConfig_Set+0x654>)
 8012984:	781b      	ldrb	r3, [r3, #0]
 8012986:	4619      	mov	r1, r3
 8012988:	b290      	uxth	r0, r2
 801298a:	68fa      	ldr	r2, [r7, #12]
 801298c:	460b      	mov	r3, r1
 801298e:	009b      	lsls	r3, r3, #2
 8012990:	440b      	add	r3, r1
 8012992:	009b      	lsls	r3, r3, #2
 8012994:	4413      	add	r3, r2
 8012996:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801299a:	4602      	mov	r2, r0
 801299c:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].eResetMode = (stMsgRx->nRxData[4] & 0x0F);
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80129a4:	4a95      	ldr	r2, [pc, #596]	; (8012bfc <PdmConfig_Set+0x654>)
 80129a6:	7812      	ldrb	r2, [r2, #0]
 80129a8:	4611      	mov	r1, r2
 80129aa:	f003 030f 	and.w	r3, r3, #15
 80129ae:	b2d8      	uxtb	r0, r3
 80129b0:	68fa      	ldr	r2, [r7, #12]
 80129b2:	460b      	mov	r3, r1
 80129b4:	009b      	lsls	r3, r3, #2
 80129b6:	440b      	add	r3, r1
 80129b8:	009b      	lsls	r3, r3, #2
 80129ba:	4413      	add	r3, r2
 80129bc:	f203 4316 	addw	r3, r3, #1046	; 0x416
 80129c0:	4602      	mov	r2, r0
 80129c2:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nResetLimit = (stMsgRx->nRxData[4] & 0xF0) >> 4;
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80129ca:	4a8c      	ldr	r2, [pc, #560]	; (8012bfc <PdmConfig_Set+0x654>)
 80129cc:	7812      	ldrb	r2, [r2, #0]
 80129ce:	4611      	mov	r1, r2
 80129d0:	091b      	lsrs	r3, r3, #4
 80129d2:	b2d8      	uxtb	r0, r3
 80129d4:	68fa      	ldr	r2, [r7, #12]
 80129d6:	460b      	mov	r3, r1
 80129d8:	009b      	lsls	r3, r3, #2
 80129da:	440b      	add	r3, r1
 80129dc:	009b      	lsls	r3, r3, #2
 80129de:	4413      	add	r3, r2
 80129e0:	f203 431a 	addw	r3, r3, #1050	; 0x41a
 80129e4:	4602      	mov	r2, r0
 80129e6:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nResetTime = stMsgRx->nRxData[5] * 100;
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80129ee:	b29a      	uxth	r2, r3
 80129f0:	4b82      	ldr	r3, [pc, #520]	; (8012bfc <PdmConfig_Set+0x654>)
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	4619      	mov	r1, r3
 80129f6:	4613      	mov	r3, r2
 80129f8:	461a      	mov	r2, r3
 80129fa:	0092      	lsls	r2, r2, #2
 80129fc:	4413      	add	r3, r2
 80129fe:	461a      	mov	r2, r3
 8012a00:	0090      	lsls	r0, r2, #2
 8012a02:	461a      	mov	r2, r3
 8012a04:	4603      	mov	r3, r0
 8012a06:	4413      	add	r3, r2
 8012a08:	009b      	lsls	r3, r3, #2
 8012a0a:	b298      	uxth	r0, r3
 8012a0c:	68fa      	ldr	r2, [r7, #12]
 8012a0e:	460b      	mov	r3, r1
 8012a10:	009b      	lsls	r3, r3, #2
 8012a12:	440b      	add	r3, r1
 8012a14:	009b      	lsls	r3, r3, #2
 8012a16:	4413      	add	r3, r2
 8012a18:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8012a1c:	4602      	mov	r2, r0
 8012a1e:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInrushLimit = stMsgRx->nRxData[6] / 10;
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8012a26:	4a76      	ldr	r2, [pc, #472]	; (8012c00 <PdmConfig_Set+0x658>)
 8012a28:	fba2 2303 	umull	r2, r3, r2, r3
 8012a2c:	08db      	lsrs	r3, r3, #3
 8012a2e:	b2da      	uxtb	r2, r3
 8012a30:	4b72      	ldr	r3, [pc, #456]	; (8012bfc <PdmConfig_Set+0x654>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	4619      	mov	r1, r3
 8012a36:	b290      	uxth	r0, r2
 8012a38:	68fa      	ldr	r2, [r7, #12]
 8012a3a:	460b      	mov	r3, r1
 8012a3c:	009b      	lsls	r3, r3, #2
 8012a3e:	440b      	add	r3, r1
 8012a40:	009b      	lsls	r3, r3, #2
 8012a42:	4413      	add	r3, r2
 8012a44:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8012a48:	4602      	mov	r2, r0
 8012a4a:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInrushTime = stMsgRx->nRxData[7] * 100;
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	4b69      	ldr	r3, [pc, #420]	; (8012bfc <PdmConfig_Set+0x654>)
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	4619      	mov	r1, r3
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	0092      	lsls	r2, r2, #2
 8012a60:	4413      	add	r3, r2
 8012a62:	461a      	mov	r2, r3
 8012a64:	0090      	lsls	r0, r2, #2
 8012a66:	461a      	mov	r2, r3
 8012a68:	4603      	mov	r3, r0
 8012a6a:	4413      	add	r3, r2
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	b298      	uxth	r0, r3
 8012a70:	68fa      	ldr	r2, [r7, #12]
 8012a72:	460b      	mov	r3, r1
 8012a74:	009b      	lsls	r3, r3, #2
 8012a76:	440b      	add	r3, r1
 8012a78:	009b      	lsls	r3, r3, #2
 8012a7a:	4413      	add	r3, r2
 8012a7c:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8012a80:	4602      	mov	r2, r0
 8012a82:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 8012a84:	4b5f      	ldr	r3, [pc, #380]	; (8012c04 <PdmConfig_Set+0x65c>)
 8012a86:	2201      	movs	r2, #1
 8012a88:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a90:	2b02      	cmp	r3, #2
 8012a92:	d10d      	bne.n	8012ab0 <PdmConfig_Set+0x508>
        nOutNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012a9a:	091b      	lsrs	r3, r3, #4
 8012a9c:	b2da      	uxtb	r2, r3
 8012a9e:	4b57      	ldr	r3, [pc, #348]	; (8012bfc <PdmConfig_Set+0x654>)
 8012aa0:	701a      	strb	r2, [r3, #0]
        if(nOutNum < PDM_NUM_OUTPUTS){
 8012aa2:	4b56      	ldr	r3, [pc, #344]	; (8012bfc <PdmConfig_Set+0x654>)
 8012aa4:	781b      	ldrb	r3, [r3, #0]
 8012aa6:	2b0b      	cmp	r3, #11
 8012aa8:	d802      	bhi.n	8012ab0 <PdmConfig_Set+0x508>
          nSend = 1;
 8012aaa:	4b56      	ldr	r3, [pc, #344]	; (8012c04 <PdmConfig_Set+0x65c>)
 8012aac:	2201      	movs	r2, #1
 8012aae:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8012ab0:	4b54      	ldr	r3, [pc, #336]	; (8012c04 <PdmConfig_Set+0x65c>)
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	f001 8082 	beq.w	8013bbe <PdmConfig_Set+0x1616>
        stMsgUsbTx.nTxLen = 8;
 8012aba:	4b53      	ldr	r3, [pc, #332]	; (8012c08 <PdmConfig_Set+0x660>)
 8012abc:	2208      	movs	r2, #8
 8012abe:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 8;
 8012ac0:	4b52      	ldr	r3, [pc, #328]	; (8012c0c <PdmConfig_Set+0x664>)
 8012ac2:	2208      	movs	r2, #8
 8012ac4:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_OUTPUTS;
 8012ac6:	4b50      	ldr	r3, [pc, #320]	; (8012c08 <PdmConfig_Set+0x660>)
 8012ac8:	226f      	movs	r2, #111	; 0x6f
 8012aca:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((nOutNum & 0x0F) << 4) + (pConfig->stOutput[nOutNum].nEnabled & 0x01);
 8012acc:	4b4b      	ldr	r3, [pc, #300]	; (8012bfc <PdmConfig_Set+0x654>)
 8012ace:	781b      	ldrb	r3, [r3, #0]
 8012ad0:	011b      	lsls	r3, r3, #4
 8012ad2:	b2da      	uxtb	r2, r3
 8012ad4:	4b49      	ldr	r3, [pc, #292]	; (8012bfc <PdmConfig_Set+0x654>)
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	4618      	mov	r0, r3
 8012ada:	68f9      	ldr	r1, [r7, #12]
 8012adc:	4603      	mov	r3, r0
 8012ade:	009b      	lsls	r3, r3, #2
 8012ae0:	4403      	add	r3, r0
 8012ae2:	009b      	lsls	r3, r3, #2
 8012ae4:	440b      	add	r3, r1
 8012ae6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	f003 0301 	and.w	r3, r3, #1
 8012af0:	b2db      	uxtb	r3, r3
 8012af2:	4413      	add	r3, r2
 8012af4:	b2da      	uxtb	r2, r3
 8012af6:	4b44      	ldr	r3, [pc, #272]	; (8012c08 <PdmConfig_Set+0x660>)
 8012af8:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stOutput[nOutNum].nInput;
 8012afa:	4b40      	ldr	r3, [pc, #256]	; (8012bfc <PdmConfig_Set+0x654>)
 8012afc:	781b      	ldrb	r3, [r3, #0]
 8012afe:	4619      	mov	r1, r3
 8012b00:	68fa      	ldr	r2, [r7, #12]
 8012b02:	460b      	mov	r3, r1
 8012b04:	009b      	lsls	r3, r3, #2
 8012b06:	440b      	add	r3, r1
 8012b08:	009b      	lsls	r3, r3, #2
 8012b0a:	4413      	add	r3, r2
 8012b0c:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8012b10:	781a      	ldrb	r2, [r3, #0]
 8012b12:	4b3d      	ldr	r3, [pc, #244]	; (8012c08 <PdmConfig_Set+0x660>)
 8012b14:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stOutput[nOutNum].nCurrentLimit * 10);
 8012b16:	4b39      	ldr	r3, [pc, #228]	; (8012bfc <PdmConfig_Set+0x654>)
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	68fa      	ldr	r2, [r7, #12]
 8012b1e:	460b      	mov	r3, r1
 8012b20:	009b      	lsls	r3, r3, #2
 8012b22:	440b      	add	r3, r1
 8012b24:	009b      	lsls	r3, r3, #2
 8012b26:	4413      	add	r3, r2
 8012b28:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012b2c:	881b      	ldrh	r3, [r3, #0]
 8012b2e:	b2db      	uxtb	r3, r3
 8012b30:	461a      	mov	r2, r3
 8012b32:	0092      	lsls	r2, r2, #2
 8012b34:	4413      	add	r3, r2
 8012b36:	005b      	lsls	r3, r3, #1
 8012b38:	b2da      	uxtb	r2, r3
 8012b3a:	4b33      	ldr	r3, [pc, #204]	; (8012c08 <PdmConfig_Set+0x660>)
 8012b3c:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stOutput[nOutNum].nResetLimit & 0x0F) << 4) + (pConfig->stOutput[nOutNum].eResetMode & 0x0F);
 8012b3e:	4b2f      	ldr	r3, [pc, #188]	; (8012bfc <PdmConfig_Set+0x654>)
 8012b40:	781b      	ldrb	r3, [r3, #0]
 8012b42:	4619      	mov	r1, r3
 8012b44:	68fa      	ldr	r2, [r7, #12]
 8012b46:	460b      	mov	r3, r1
 8012b48:	009b      	lsls	r3, r3, #2
 8012b4a:	440b      	add	r3, r1
 8012b4c:	009b      	lsls	r3, r3, #2
 8012b4e:	4413      	add	r3, r2
 8012b50:	f203 431a 	addw	r3, r3, #1050	; 0x41a
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	011b      	lsls	r3, r3, #4
 8012b58:	b2da      	uxtb	r2, r3
 8012b5a:	4b28      	ldr	r3, [pc, #160]	; (8012bfc <PdmConfig_Set+0x654>)
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	4618      	mov	r0, r3
 8012b60:	68f9      	ldr	r1, [r7, #12]
 8012b62:	4603      	mov	r3, r0
 8012b64:	009b      	lsls	r3, r3, #2
 8012b66:	4403      	add	r3, r0
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	440b      	add	r3, r1
 8012b6c:	f203 4316 	addw	r3, r3, #1046	; 0x416
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	f003 030f 	and.w	r3, r3, #15
 8012b76:	b2db      	uxtb	r3, r3
 8012b78:	4413      	add	r3, r2
 8012b7a:	b2da      	uxtb	r2, r3
 8012b7c:	4b22      	ldr	r3, [pc, #136]	; (8012c08 <PdmConfig_Set+0x660>)
 8012b7e:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stOutput[nOutNum].nResetTime / 100);
 8012b80:	4b1e      	ldr	r3, [pc, #120]	; (8012bfc <PdmConfig_Set+0x654>)
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	4619      	mov	r1, r3
 8012b86:	68fa      	ldr	r2, [r7, #12]
 8012b88:	460b      	mov	r3, r1
 8012b8a:	009b      	lsls	r3, r3, #2
 8012b8c:	440b      	add	r3, r1
 8012b8e:	009b      	lsls	r3, r3, #2
 8012b90:	4413      	add	r3, r2
 8012b92:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8012b96:	881b      	ldrh	r3, [r3, #0]
 8012b98:	4a1d      	ldr	r2, [pc, #116]	; (8012c10 <PdmConfig_Set+0x668>)
 8012b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8012b9e:	095b      	lsrs	r3, r3, #5
 8012ba0:	b29b      	uxth	r3, r3
 8012ba2:	b2da      	uxtb	r2, r3
 8012ba4:	4b18      	ldr	r3, [pc, #96]	; (8012c08 <PdmConfig_Set+0x660>)
 8012ba6:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stOutput[nOutNum].nInrushLimit * 10);
 8012ba8:	4b14      	ldr	r3, [pc, #80]	; (8012bfc <PdmConfig_Set+0x654>)
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	4619      	mov	r1, r3
 8012bae:	68fa      	ldr	r2, [r7, #12]
 8012bb0:	460b      	mov	r3, r1
 8012bb2:	009b      	lsls	r3, r3, #2
 8012bb4:	440b      	add	r3, r1
 8012bb6:	009b      	lsls	r3, r3, #2
 8012bb8:	4413      	add	r3, r2
 8012bba:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8012bbe:	881b      	ldrh	r3, [r3, #0]
 8012bc0:	b2db      	uxtb	r3, r3
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	0092      	lsls	r2, r2, #2
 8012bc6:	4413      	add	r3, r2
 8012bc8:	005b      	lsls	r3, r3, #1
 8012bca:	b2da      	uxtb	r2, r3
 8012bcc:	4b0e      	ldr	r3, [pc, #56]	; (8012c08 <PdmConfig_Set+0x660>)
 8012bce:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = (uint8_t)(pConfig->stOutput[nOutNum].nInrushTime / 100);
 8012bd0:	4b0a      	ldr	r3, [pc, #40]	; (8012bfc <PdmConfig_Set+0x654>)
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	4619      	mov	r1, r3
 8012bd6:	68fa      	ldr	r2, [r7, #12]
 8012bd8:	460b      	mov	r3, r1
 8012bda:	009b      	lsls	r3, r3, #2
 8012bdc:	440b      	add	r3, r1
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	4413      	add	r3, r2
 8012be2:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8012be6:	881b      	ldrh	r3, [r3, #0]
 8012be8:	4a09      	ldr	r2, [pc, #36]	; (8012c10 <PdmConfig_Set+0x668>)
 8012bea:	fba2 2303 	umull	r2, r3, r2, r3
 8012bee:	095b      	lsrs	r3, r3, #5
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	b2da      	uxtb	r2, r3
 8012bf4:	4b04      	ldr	r3, [pc, #16]	; (8012c08 <PdmConfig_Set+0x660>)
 8012bf6:	71da      	strb	r2, [r3, #7]
      }
    break;
 8012bf8:	f000 bfe1 	b.w	8013bbe <PdmConfig_Set+0x1616>
 8012bfc:	20004bea 	.word	0x20004bea
 8012c00:	cccccccd 	.word	0xcccccccd
 8012c04:	20004be8 	.word	0x20004be8
 8012c08:	20004bbc 	.word	0x20004bbc
 8012c0c:	20004bc8 	.word	0x20004bc8
 8012c10:	51eb851f 	.word	0x51eb851f

    //Set Virtual Input Settings
    // 'U'
    case MSG_RX_SET_VIRTUAL_INPUTS:
      if(stMsgRx->nRxLen == 7){
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c1a:	2b07      	cmp	r3, #7
 8012c1c:	f040 80c0 	bne.w	8012da0 <PdmConfig_Set+0x7f8>
        nVirtInNum = (stMsgRx->nRxData[2]);
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8012c26:	4bbb      	ldr	r3, [pc, #748]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012c28:	701a      	strb	r2, [r3, #0]
        if(nVirtInNum < PDM_NUM_VIRT_INPUTS){
 8012c2a:	4bba      	ldr	r3, [pc, #744]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	2b13      	cmp	r3, #19
 8012c30:	f200 80b6 	bhi.w	8012da0 <PdmConfig_Set+0x7f8>
          pConfig->stVirtualInput[nVirtInNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012c3a:	4ab6      	ldr	r2, [pc, #728]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012c3c:	7812      	ldrb	r2, [r2, #0]
 8012c3e:	4611      	mov	r1, r2
 8012c40:	f003 0301 	and.w	r3, r3, #1
 8012c44:	b2d8      	uxtb	r0, r3
 8012c46:	68fa      	ldr	r2, [r7, #12]
 8012c48:	460b      	mov	r3, r1
 8012c4a:	009b      	lsls	r3, r3, #2
 8012c4c:	440b      	add	r3, r1
 8012c4e:	00db      	lsls	r3, r3, #3
 8012c50:	4413      	add	r3, r2
 8012c52:	33e8      	adds	r3, #232	; 0xe8
 8012c54:	4602      	mov	r2, r0
 8012c56:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot0 = (stMsgRx->nRxData[1] & 0x02) >> 1;
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012c5e:	105b      	asrs	r3, r3, #1
 8012c60:	b2db      	uxtb	r3, r3
 8012c62:	4aac      	ldr	r2, [pc, #688]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012c64:	7812      	ldrb	r2, [r2, #0]
 8012c66:	4611      	mov	r1, r2
 8012c68:	f003 0301 	and.w	r3, r3, #1
 8012c6c:	b2d8      	uxtb	r0, r3
 8012c6e:	68fa      	ldr	r2, [r7, #12]
 8012c70:	460b      	mov	r3, r1
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	440b      	add	r3, r1
 8012c76:	00db      	lsls	r3, r3, #3
 8012c78:	4413      	add	r3, r2
 8012c7a:	33e9      	adds	r3, #233	; 0xe9
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot1 = (stMsgRx->nRxData[1] & 0x04) >> 2;
 8012c80:	68bb      	ldr	r3, [r7, #8]
 8012c82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012c86:	109b      	asrs	r3, r3, #2
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	4aa2      	ldr	r2, [pc, #648]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012c8c:	7812      	ldrb	r2, [r2, #0]
 8012c8e:	4611      	mov	r1, r2
 8012c90:	f003 0301 	and.w	r3, r3, #1
 8012c94:	b2d8      	uxtb	r0, r3
 8012c96:	68fa      	ldr	r2, [r7, #12]
 8012c98:	460b      	mov	r3, r1
 8012c9a:	009b      	lsls	r3, r3, #2
 8012c9c:	440b      	add	r3, r1
 8012c9e:	00db      	lsls	r3, r3, #3
 8012ca0:	4413      	add	r3, r2
 8012ca2:	33f1      	adds	r3, #241	; 0xf1
 8012ca4:	4602      	mov	r2, r0
 8012ca6:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot2 = (stMsgRx->nRxData[1] & 0x08) >> 3;
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012cae:	10db      	asrs	r3, r3, #3
 8012cb0:	b2db      	uxtb	r3, r3
 8012cb2:	4a98      	ldr	r2, [pc, #608]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012cb4:	7812      	ldrb	r2, [r2, #0]
 8012cb6:	4611      	mov	r1, r2
 8012cb8:	f003 0301 	and.w	r3, r3, #1
 8012cbc:	b2d8      	uxtb	r0, r3
 8012cbe:	68fa      	ldr	r2, [r7, #12]
 8012cc0:	460b      	mov	r3, r1
 8012cc2:	009b      	lsls	r3, r3, #2
 8012cc4:	440b      	add	r3, r1
 8012cc6:	00db      	lsls	r3, r3, #3
 8012cc8:	4413      	add	r3, r2
 8012cca:	33f9      	adds	r3, #249	; 0xf9
 8012ccc:	4602      	mov	r2, r0
 8012cce:	701a      	strb	r2, [r3, #0]

          pConfig->stVirtualInput[nVirtInNum].nVar0 = stMsgRx->nRxData[3];
 8012cd0:	4b90      	ldr	r3, [pc, #576]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	4619      	mov	r1, r3
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8012cdc:	68fa      	ldr	r2, [r7, #12]
 8012cde:	460b      	mov	r3, r1
 8012ce0:	009b      	lsls	r3, r3, #2
 8012ce2:	440b      	add	r3, r1
 8012ce4:	00db      	lsls	r3, r3, #3
 8012ce6:	4413      	add	r3, r2
 8012ce8:	33ea      	adds	r3, #234	; 0xea
 8012cea:	4602      	mov	r2, r0
 8012cec:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nVar1 = stMsgRx->nRxData[4];
 8012cee:	4b89      	ldr	r3, [pc, #548]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8012cfa:	68fa      	ldr	r2, [r7, #12]
 8012cfc:	460b      	mov	r3, r1
 8012cfe:	009b      	lsls	r3, r3, #2
 8012d00:	440b      	add	r3, r1
 8012d02:	00db      	lsls	r3, r3, #3
 8012d04:	4413      	add	r3, r2
 8012d06:	33f2      	adds	r3, #242	; 0xf2
 8012d08:	4602      	mov	r2, r0
 8012d0a:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nVar2 = stMsgRx->nRxData[5];
 8012d0c:	4b81      	ldr	r3, [pc, #516]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012d0e:	781b      	ldrb	r3, [r3, #0]
 8012d10:	4619      	mov	r1, r3
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8012d18:	68fa      	ldr	r2, [r7, #12]
 8012d1a:	460b      	mov	r3, r1
 8012d1c:	009b      	lsls	r3, r3, #2
 8012d1e:	440b      	add	r3, r1
 8012d20:	00db      	lsls	r3, r3, #3
 8012d22:	4413      	add	r3, r2
 8012d24:	33fa      	adds	r3, #250	; 0xfa
 8012d26:	4602      	mov	r2, r0
 8012d28:	701a      	strb	r2, [r3, #0]

          pConfig->stVirtualInput[nVirtInNum].eCond0 = (stMsgRx->nRxData[6] & 0x03);
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8012d30:	4a78      	ldr	r2, [pc, #480]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012d32:	7812      	ldrb	r2, [r2, #0]
 8012d34:	4611      	mov	r1, r2
 8012d36:	f003 0303 	and.w	r3, r3, #3
 8012d3a:	b2d8      	uxtb	r0, r3
 8012d3c:	68fa      	ldr	r2, [r7, #12]
 8012d3e:	460b      	mov	r3, r1
 8012d40:	009b      	lsls	r3, r3, #2
 8012d42:	440b      	add	r3, r1
 8012d44:	00db      	lsls	r3, r3, #3
 8012d46:	4413      	add	r3, r2
 8012d48:	33f0      	adds	r3, #240	; 0xf0
 8012d4a:	4602      	mov	r2, r0
 8012d4c:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].eCond1 = (stMsgRx->nRxData[6] & 0x0C) >> 2;
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8012d54:	109b      	asrs	r3, r3, #2
 8012d56:	b2db      	uxtb	r3, r3
 8012d58:	4a6e      	ldr	r2, [pc, #440]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012d5a:	7812      	ldrb	r2, [r2, #0]
 8012d5c:	4611      	mov	r1, r2
 8012d5e:	f003 0303 	and.w	r3, r3, #3
 8012d62:	b2d8      	uxtb	r0, r3
 8012d64:	68fa      	ldr	r2, [r7, #12]
 8012d66:	460b      	mov	r3, r1
 8012d68:	009b      	lsls	r3, r3, #2
 8012d6a:	440b      	add	r3, r1
 8012d6c:	00db      	lsls	r3, r3, #3
 8012d6e:	4413      	add	r3, r2
 8012d70:	33f8      	adds	r3, #248	; 0xf8
 8012d72:	4602      	mov	r2, r0
 8012d74:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].eMode = (stMsgRx->nRxData[6] & 0xC0) >> 6;
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8012d7c:	4a65      	ldr	r2, [pc, #404]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012d7e:	7812      	ldrb	r2, [r2, #0]
 8012d80:	4611      	mov	r1, r2
 8012d82:	099b      	lsrs	r3, r3, #6
 8012d84:	b2d8      	uxtb	r0, r3
 8012d86:	68fa      	ldr	r2, [r7, #12]
 8012d88:	460b      	mov	r3, r1
 8012d8a:	009b      	lsls	r3, r3, #2
 8012d8c:	440b      	add	r3, r1
 8012d8e:	00db      	lsls	r3, r3, #3
 8012d90:	4413      	add	r3, r2
 8012d92:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012d96:	4602      	mov	r2, r0
 8012d98:	701a      	strb	r2, [r3, #0]
          nSend = 1;
 8012d9a:	4b5f      	ldr	r3, [pc, #380]	; (8012f18 <PdmConfig_Set+0x970>)
 8012d9c:	2201      	movs	r2, #1
 8012d9e:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012da6:	2b02      	cmp	r3, #2
 8012da8:	d10b      	bne.n	8012dc2 <PdmConfig_Set+0x81a>
        nVirtInNum = (stMsgRx->nRxData[1]);
 8012daa:	68bb      	ldr	r3, [r7, #8]
 8012dac:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8012db0:	4b58      	ldr	r3, [pc, #352]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012db2:	701a      	strb	r2, [r3, #0]
        if(nVirtInNum < PDM_NUM_VIRT_INPUTS){
 8012db4:	4b57      	ldr	r3, [pc, #348]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	2b13      	cmp	r3, #19
 8012dba:	d802      	bhi.n	8012dc2 <PdmConfig_Set+0x81a>
          nSend = 1;
 8012dbc:	4b56      	ldr	r3, [pc, #344]	; (8012f18 <PdmConfig_Set+0x970>)
 8012dbe:	2201      	movs	r2, #1
 8012dc0:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8012dc2:	4b55      	ldr	r3, [pc, #340]	; (8012f18 <PdmConfig_Set+0x970>)
 8012dc4:	781b      	ldrb	r3, [r3, #0]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	f000 8704 	beq.w	8013bd4 <PdmConfig_Set+0x162c>
        stMsgUsbTx.nTxLen = 7;
 8012dcc:	4b53      	ldr	r3, [pc, #332]	; (8012f1c <PdmConfig_Set+0x974>)
 8012dce:	2207      	movs	r2, #7
 8012dd0:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 8012dd2:	4b53      	ldr	r3, [pc, #332]	; (8012f20 <PdmConfig_Set+0x978>)
 8012dd4:	2207      	movs	r2, #7
 8012dd6:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_VIRTUAL_INPUTS;
 8012dd8:	4b50      	ldr	r3, [pc, #320]	; (8012f1c <PdmConfig_Set+0x974>)
 8012dda:	2275      	movs	r2, #117	; 0x75
 8012ddc:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 8012dde:	4b4d      	ldr	r3, [pc, #308]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	4619      	mov	r1, r3
 8012de4:	68fa      	ldr	r2, [r7, #12]
 8012de6:	460b      	mov	r3, r1
 8012de8:	009b      	lsls	r3, r3, #2
 8012dea:	440b      	add	r3, r1
 8012dec:	00db      	lsls	r3, r3, #3
 8012dee:	4413      	add	r3, r2
 8012df0:	33f9      	adds	r3, #249	; 0xf9
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	00db      	lsls	r3, r3, #3
 8012df6:	b25b      	sxtb	r3, r3
 8012df8:	f003 0308 	and.w	r3, r3, #8
 8012dfc:	b25a      	sxtb	r2, r3
 8012dfe:	4b45      	ldr	r3, [pc, #276]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	4618      	mov	r0, r3
 8012e04:	68f9      	ldr	r1, [r7, #12]
 8012e06:	4603      	mov	r3, r0
 8012e08:	009b      	lsls	r3, r3, #2
 8012e0a:	4403      	add	r3, r0
 8012e0c:	00db      	lsls	r3, r3, #3
 8012e0e:	440b      	add	r3, r1
 8012e10:	33f1      	adds	r3, #241	; 0xf1
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	b25b      	sxtb	r3, r3
 8012e18:	f003 0304 	and.w	r3, r3, #4
 8012e1c:	b25b      	sxtb	r3, r3
 8012e1e:	4313      	orrs	r3, r2
 8012e20:	b25b      	sxtb	r3, r3
 8012e22:	b2da      	uxtb	r2, r3
                                ((pConfig->stVirtualInput[nVirtInNum].nNot0 & 0x01) << 1) + (pConfig->stVirtualInput[nVirtInNum].nEnabled & 0x01);
 8012e24:	4b3b      	ldr	r3, [pc, #236]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	4618      	mov	r0, r3
 8012e2a:	68f9      	ldr	r1, [r7, #12]
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	009b      	lsls	r3, r3, #2
 8012e30:	4403      	add	r3, r0
 8012e32:	00db      	lsls	r3, r3, #3
 8012e34:	440b      	add	r3, r1
 8012e36:	33e9      	adds	r3, #233	; 0xe9
 8012e38:	781b      	ldrb	r3, [r3, #0]
 8012e3a:	005b      	lsls	r3, r3, #1
 8012e3c:	b2db      	uxtb	r3, r3
 8012e3e:	f003 0302 	and.w	r3, r3, #2
 8012e42:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 8012e44:	4413      	add	r3, r2
 8012e46:	b2da      	uxtb	r2, r3
                                ((pConfig->stVirtualInput[nVirtInNum].nNot0 & 0x01) << 1) + (pConfig->stVirtualInput[nVirtInNum].nEnabled & 0x01);
 8012e48:	4b32      	ldr	r3, [pc, #200]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	68f9      	ldr	r1, [r7, #12]
 8012e50:	4603      	mov	r3, r0
 8012e52:	009b      	lsls	r3, r3, #2
 8012e54:	4403      	add	r3, r0
 8012e56:	00db      	lsls	r3, r3, #3
 8012e58:	440b      	add	r3, r1
 8012e5a:	33e8      	adds	r3, #232	; 0xe8
 8012e5c:	781b      	ldrb	r3, [r3, #0]
 8012e5e:	f003 0301 	and.w	r3, r3, #1
 8012e62:	b2db      	uxtb	r3, r3
 8012e64:	4413      	add	r3, r2
 8012e66:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 8012e68:	4b2c      	ldr	r3, [pc, #176]	; (8012f1c <PdmConfig_Set+0x974>)
 8012e6a:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = nVirtInNum;
 8012e6c:	4b29      	ldr	r3, [pc, #164]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012e6e:	781a      	ldrb	r2, [r3, #0]
 8012e70:	4b2a      	ldr	r3, [pc, #168]	; (8012f1c <PdmConfig_Set+0x974>)
 8012e72:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stVirtualInput[nVirtInNum].nVar0;
 8012e74:	4b27      	ldr	r3, [pc, #156]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012e76:	781b      	ldrb	r3, [r3, #0]
 8012e78:	4619      	mov	r1, r3
 8012e7a:	68fa      	ldr	r2, [r7, #12]
 8012e7c:	460b      	mov	r3, r1
 8012e7e:	009b      	lsls	r3, r3, #2
 8012e80:	440b      	add	r3, r1
 8012e82:	00db      	lsls	r3, r3, #3
 8012e84:	4413      	add	r3, r2
 8012e86:	33ea      	adds	r3, #234	; 0xea
 8012e88:	781a      	ldrb	r2, [r3, #0]
 8012e8a:	4b24      	ldr	r3, [pc, #144]	; (8012f1c <PdmConfig_Set+0x974>)
 8012e8c:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = pConfig->stVirtualInput[nVirtInNum].nVar1;
 8012e8e:	4b21      	ldr	r3, [pc, #132]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	4619      	mov	r1, r3
 8012e94:	68fa      	ldr	r2, [r7, #12]
 8012e96:	460b      	mov	r3, r1
 8012e98:	009b      	lsls	r3, r3, #2
 8012e9a:	440b      	add	r3, r1
 8012e9c:	00db      	lsls	r3, r3, #3
 8012e9e:	4413      	add	r3, r2
 8012ea0:	33f2      	adds	r3, #242	; 0xf2
 8012ea2:	781a      	ldrb	r2, [r3, #0]
 8012ea4:	4b1d      	ldr	r3, [pc, #116]	; (8012f1c <PdmConfig_Set+0x974>)
 8012ea6:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = pConfig->stVirtualInput[nVirtInNum].nVar2;
 8012ea8:	4b1a      	ldr	r3, [pc, #104]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	4619      	mov	r1, r3
 8012eae:	68fa      	ldr	r2, [r7, #12]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	009b      	lsls	r3, r3, #2
 8012eb4:	440b      	add	r3, r1
 8012eb6:	00db      	lsls	r3, r3, #3
 8012eb8:	4413      	add	r3, r2
 8012eba:	33fa      	adds	r3, #250	; 0xfa
 8012ebc:	781a      	ldrb	r2, [r3, #0]
 8012ebe:	4b17      	ldr	r3, [pc, #92]	; (8012f1c <PdmConfig_Set+0x974>)
 8012ec0:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = ((pConfig->stVirtualInput[nVirtInNum].eMode & 0x0F) << 4) + ((pConfig->stVirtualInput[nVirtInNum].eCond0 & 0x03) << 2) +
 8012ec2:	4b14      	ldr	r3, [pc, #80]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	68fa      	ldr	r2, [r7, #12]
 8012eca:	460b      	mov	r3, r1
 8012ecc:	009b      	lsls	r3, r3, #2
 8012ece:	440b      	add	r3, r1
 8012ed0:	00db      	lsls	r3, r3, #3
 8012ed2:	4413      	add	r3, r2
 8012ed4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	011b      	lsls	r3, r3, #4
 8012edc:	b2da      	uxtb	r2, r3
 8012ede:	4b0d      	ldr	r3, [pc, #52]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012ee0:	781b      	ldrb	r3, [r3, #0]
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	68f9      	ldr	r1, [r7, #12]
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	009b      	lsls	r3, r3, #2
 8012eea:	4403      	add	r3, r0
 8012eec:	00db      	lsls	r3, r3, #3
 8012eee:	440b      	add	r3, r1
 8012ef0:	33f0      	adds	r3, #240	; 0xf0
 8012ef2:	781b      	ldrb	r3, [r3, #0]
 8012ef4:	009b      	lsls	r3, r3, #2
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	f003 030c 	and.w	r3, r3, #12
 8012efc:	b2db      	uxtb	r3, r3
 8012efe:	4413      	add	r3, r2
 8012f00:	b2da      	uxtb	r2, r3
                                (pConfig->stVirtualInput[nVirtInNum].eCond1 & 0x03);
 8012f02:	4b04      	ldr	r3, [pc, #16]	; (8012f14 <PdmConfig_Set+0x96c>)
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	4618      	mov	r0, r3
 8012f08:	68f9      	ldr	r1, [r7, #12]
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	009b      	lsls	r3, r3, #2
 8012f0e:	4403      	add	r3, r0
 8012f10:	00db      	lsls	r3, r3, #3
 8012f12:	e007      	b.n	8012f24 <PdmConfig_Set+0x97c>
 8012f14:	20004beb 	.word	0x20004beb
 8012f18:	20004be8 	.word	0x20004be8
 8012f1c:	20004bbc 	.word	0x20004bbc
 8012f20:	20004bc8 	.word	0x20004bc8
 8012f24:	440b      	add	r3, r1
 8012f26:	33f8      	adds	r3, #248	; 0xf8
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	f003 0303 	and.w	r3, r3, #3
 8012f2e:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[6] = ((pConfig->stVirtualInput[nVirtInNum].eMode & 0x0F) << 4) + ((pConfig->stVirtualInput[nVirtInNum].eCond0 & 0x03) << 2) +
 8012f30:	4413      	add	r3, r2
 8012f32:	b2da      	uxtb	r2, r3
 8012f34:	4b5b      	ldr	r3, [pc, #364]	; (80130a4 <PdmConfig_Set+0xafc>)
 8012f36:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8012f38:	4b5a      	ldr	r3, [pc, #360]	; (80130a4 <PdmConfig_Set+0xafc>)
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	71da      	strb	r2, [r3, #7]
      }
    break;
 8012f3e:	f000 be49 	b.w	8013bd4 <PdmConfig_Set+0x162c>

    //Set Wiper Settings
    // 'W'
    case MSG_RX_SET_WIPER:
      if(stMsgRx->nRxLen == 8){
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012f48:	2b08      	cmp	r3, #8
 8012f4a:	d152      	bne.n	8012ff2 <PdmConfig_Set+0xa4a>
        pConfig->stWiper.nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012f52:	f003 0301 	and.w	r3, r3, #1
 8012f56:	b2da      	uxtb	r2, r3
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
        pConfig->stWiper.nMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012f64:	105b      	asrs	r3, r3, #1
 8012f66:	b2db      	uxtb	r3, r3
 8012f68:	f003 0303 	and.w	r3, r3, #3
 8012f6c:	b2da      	uxtb	r2, r3
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
        pConfig->stWiper.nParkStopLevel = (stMsgRx->nRxData[1] & 0x08) >> 3;
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012f7a:	10db      	asrs	r3, r3, #3
 8012f7c:	b2db      	uxtb	r3, r3
 8012f7e:	f003 0301 	and.w	r3, r3, #1
 8012f82:	b2da      	uxtb	r2, r3
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
        pConfig->stWiper.nWashWipeCycles = (stMsgRx->nRxData[1] * 0xF0) >> 4;
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012f90:	461a      	mov	r2, r3
 8012f92:	4613      	mov	r3, r2
 8012f94:	011b      	lsls	r3, r3, #4
 8012f96:	1a9b      	subs	r3, r3, r2
 8012f98:	011b      	lsls	r3, r3, #4
 8012f9a:	111b      	asrs	r3, r3, #4
 8012f9c:	b2da      	uxtb	r2, r3
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503

        pConfig->stWiper.nSlowInput = stMsgRx->nRxData[2];
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa

        pConfig->stWiper.nFastInput = stMsgRx->nRxData[3];
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb

        pConfig->stWiper.nInterInput = stMsgRx->nRxData[4];
 8012fbc:	68bb      	ldr	r3, [r7, #8]
 8012fbe:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc

        pConfig->stWiper.nOnInput = stMsgRx->nRxData[5];
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	f883 24fd 	strb.w	r2, [r3, #1277]	; 0x4fd

        pConfig->stWiper.nParkInput = stMsgRx->nRxData[6];
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff

        pConfig->stWiper.nWashInput = stMsgRx->nRxData[7];
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
        nSend = 1;
 8012fec:	4b2e      	ldr	r3, [pc, #184]	; (80130a8 <PdmConfig_Set+0xb00>)
 8012fee:	2201      	movs	r2, #1
 8012ff0:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ff8:	2b01      	cmp	r3, #1
 8012ffa:	d004      	beq.n	8013006 <PdmConfig_Set+0xa5e>
 8012ffc:	4b2a      	ldr	r3, [pc, #168]	; (80130a8 <PdmConfig_Set+0xb00>)
 8012ffe:	781b      	ldrb	r3, [r3, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	f000 85e9 	beq.w	8013bd8 <PdmConfig_Set+0x1630>
        stMsgUsbTx.nTxLen = 8;
 8013006:	4b27      	ldr	r3, [pc, #156]	; (80130a4 <PdmConfig_Set+0xafc>)
 8013008:	2208      	movs	r2, #8
 801300a:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 8;
 801300c:	4b27      	ldr	r3, [pc, #156]	; (80130ac <PdmConfig_Set+0xb04>)
 801300e:	2208      	movs	r2, #8
 8013010:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER;
 8013012:	4b24      	ldr	r3, [pc, #144]	; (80130a4 <PdmConfig_Set+0xafc>)
 8013014:	2277      	movs	r2, #119	; 0x77
 8013016:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	f893 3503 	ldrb.w	r3, [r3, #1283]	; 0x503
 801301e:	011b      	lsls	r3, r3, #4
 8013020:	b2da      	uxtb	r2, r3
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8013028:	00db      	lsls	r3, r3, #3
 801302a:	b2db      	uxtb	r3, r3
 801302c:	f003 0308 	and.w	r3, r3, #8
 8013030:	b2db      	uxtb	r3, r3
 8013032:	4413      	add	r3, r2
 8013034:	b2da      	uxtb	r2, r3
                                ((pConfig->stWiper.nMode & 0x03) << 2) + (pConfig->stWiper.nEnabled & 0x01);
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	f893 34f9 	ldrb.w	r3, [r3, #1273]	; 0x4f9
 801303c:	009b      	lsls	r3, r3, #2
 801303e:	b2db      	uxtb	r3, r3
 8013040:	f003 030c 	and.w	r3, r3, #12
 8013044:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 8013046:	4413      	add	r3, r2
 8013048:	b2da      	uxtb	r2, r3
                                ((pConfig->stWiper.nMode & 0x03) << 2) + (pConfig->stWiper.nEnabled & 0x01);
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	f893 34f8 	ldrb.w	r3, [r3, #1272]	; 0x4f8
 8013050:	f003 0301 	and.w	r3, r3, #1
 8013054:	b2db      	uxtb	r3, r3
 8013056:	4413      	add	r3, r2
 8013058:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 801305a:	4b12      	ldr	r3, [pc, #72]	; (80130a4 <PdmConfig_Set+0xafc>)
 801305c:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stWiper.nSlowInput;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	f893 24fa 	ldrb.w	r2, [r3, #1274]	; 0x4fa
 8013064:	4b0f      	ldr	r3, [pc, #60]	; (80130a4 <PdmConfig_Set+0xafc>)
 8013066:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stWiper.nFastInput;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	f893 24fb 	ldrb.w	r2, [r3, #1275]	; 0x4fb
 801306e:	4b0d      	ldr	r3, [pc, #52]	; (80130a4 <PdmConfig_Set+0xafc>)
 8013070:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = pConfig->stWiper.nInterInput;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	f893 24fc 	ldrb.w	r2, [r3, #1276]	; 0x4fc
 8013078:	4b0a      	ldr	r3, [pc, #40]	; (80130a4 <PdmConfig_Set+0xafc>)
 801307a:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = pConfig->stWiper.nOnInput;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	f893 24fd 	ldrb.w	r2, [r3, #1277]	; 0x4fd
 8013082:	4b08      	ldr	r3, [pc, #32]	; (80130a4 <PdmConfig_Set+0xafc>)
 8013084:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = pConfig->stWiper.nParkInput;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	f893 24ff 	ldrb.w	r2, [r3, #1279]	; 0x4ff
 801308c:	4b05      	ldr	r3, [pc, #20]	; (80130a4 <PdmConfig_Set+0xafc>)
 801308e:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = pConfig->stWiper.nWashInput;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	f893 2502 	ldrb.w	r2, [r3, #1282]	; 0x502
 8013096:	4b03      	ldr	r3, [pc, #12]	; (80130a4 <PdmConfig_Set+0xafc>)
 8013098:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 801309a:	4b03      	ldr	r3, [pc, #12]	; (80130a8 <PdmConfig_Set+0xb00>)
 801309c:	2201      	movs	r2, #1
 801309e:	701a      	strb	r2, [r3, #0]
      }
    break;
 80130a0:	f000 bd9a 	b.w	8013bd8 <PdmConfig_Set+0x1630>
 80130a4:	20004bbc 	.word	0x20004bbc
 80130a8:	20004be8 	.word	0x20004be8
 80130ac:	20004bc8 	.word	0x20004bc8

    //Set Wiper Speed Settings
    // 'P'
    case MSG_RX_SET_WIPER_SPEED:
      if(stMsgRx->nRxLen == 7){
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130b6:	2b07      	cmp	r3, #7
 80130b8:	d16a      	bne.n	8013190 <PdmConfig_Set+0xbe8>
        pConfig->stWiper.nSwipeInput = stMsgRx->nRxData[1];
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501

        pConfig->stWiper.nSpeedInput = stMsgRx->nRxData[2];
 80130c6:	68bb      	ldr	r3, [r7, #8]
 80130c8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe

        pConfig->stWiper.nSpeedMap[0] = (stMsgRx->nRxData[3] * 0x0F);
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80130d8:	461a      	mov	r2, r3
 80130da:	0112      	lsls	r2, r2, #4
 80130dc:	1ad3      	subs	r3, r2, r3
 80130de:	b2da      	uxtb	r2, r3
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
        pConfig->stWiper.nSpeedMap[1] = (stMsgRx->nRxData[3] * 0xF0) >> 4;
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80130ec:	461a      	mov	r2, r3
 80130ee:	4613      	mov	r3, r2
 80130f0:	011b      	lsls	r3, r3, #4
 80130f2:	1a9b      	subs	r3, r3, r2
 80130f4:	011b      	lsls	r3, r3, #4
 80130f6:	111b      	asrs	r3, r3, #4
 80130f8:	b2da      	uxtb	r2, r3
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505

        pConfig->stWiper.nSpeedMap[2] = (stMsgRx->nRxData[4] * 0x0F);
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013106:	461a      	mov	r2, r3
 8013108:	0112      	lsls	r2, r2, #4
 801310a:	1ad3      	subs	r3, r2, r3
 801310c:	b2da      	uxtb	r2, r3
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
        pConfig->stWiper.nSpeedMap[3] = (stMsgRx->nRxData[4] * 0xF0) >> 4;
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801311a:	461a      	mov	r2, r3
 801311c:	4613      	mov	r3, r2
 801311e:	011b      	lsls	r3, r3, #4
 8013120:	1a9b      	subs	r3, r3, r2
 8013122:	011b      	lsls	r3, r3, #4
 8013124:	111b      	asrs	r3, r3, #4
 8013126:	b2da      	uxtb	r2, r3
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507

        pConfig->stWiper.nSpeedMap[4] = (stMsgRx->nRxData[5] * 0x0F);
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8013134:	461a      	mov	r2, r3
 8013136:	0112      	lsls	r2, r2, #4
 8013138:	1ad3      	subs	r3, r2, r3
 801313a:	b2da      	uxtb	r2, r3
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
        pConfig->stWiper.nSpeedMap[5] = (stMsgRx->nRxData[5] * 0xF0) >> 4;
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8013148:	461a      	mov	r2, r3
 801314a:	4613      	mov	r3, r2
 801314c:	011b      	lsls	r3, r3, #4
 801314e:	1a9b      	subs	r3, r3, r2
 8013150:	011b      	lsls	r3, r3, #4
 8013152:	111b      	asrs	r3, r3, #4
 8013154:	b2da      	uxtb	r2, r3
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509

        pConfig->stWiper.nSpeedMap[6] = (stMsgRx->nRxData[6] * 0x0F);
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8013162:	461a      	mov	r2, r3
 8013164:	0112      	lsls	r2, r2, #4
 8013166:	1ad3      	subs	r3, r2, r3
 8013168:	b2da      	uxtb	r2, r3
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
        pConfig->stWiper.nSpeedMap[7] = (stMsgRx->nRxData[6] * 0xF0) >> 4;
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8013176:	461a      	mov	r2, r3
 8013178:	4613      	mov	r3, r2
 801317a:	011b      	lsls	r3, r3, #4
 801317c:	1a9b      	subs	r3, r3, r2
 801317e:	011b      	lsls	r3, r3, #4
 8013180:	111b      	asrs	r3, r3, #4
 8013182:	b2da      	uxtb	r2, r3
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
        nSend = 1;
 801318a:	4b97      	ldr	r3, [pc, #604]	; (80133e8 <PdmConfig_Set+0xe40>)
 801318c:	2201      	movs	r2, #1
 801318e:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013196:	2b01      	cmp	r3, #1
 8013198:	d004      	beq.n	80131a4 <PdmConfig_Set+0xbfc>
 801319a:	4b93      	ldr	r3, [pc, #588]	; (80133e8 <PdmConfig_Set+0xe40>)
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	f000 851c 	beq.w	8013bdc <PdmConfig_Set+0x1634>
        stMsgUsbTx.nTxLen = 7;
 80131a4:	4b91      	ldr	r3, [pc, #580]	; (80133ec <PdmConfig_Set+0xe44>)
 80131a6:	2207      	movs	r2, #7
 80131a8:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 80131aa:	4b91      	ldr	r3, [pc, #580]	; (80133f0 <PdmConfig_Set+0xe48>)
 80131ac:	2207      	movs	r2, #7
 80131ae:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER_SPEED;
 80131b0:	4b8e      	ldr	r3, [pc, #568]	; (80133ec <PdmConfig_Set+0xe44>)
 80131b2:	2270      	movs	r2, #112	; 0x70
 80131b4:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = pConfig->stWiper.nSwipeInput;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	f893 2501 	ldrb.w	r2, [r3, #1281]	; 0x501
 80131bc:	4b8b      	ldr	r3, [pc, #556]	; (80133ec <PdmConfig_Set+0xe44>)
 80131be:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stWiper.nSpeedInput;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	f893 24fe 	ldrb.w	r2, [r3, #1278]	; 0x4fe
 80131c6:	4b89      	ldr	r3, [pc, #548]	; (80133ec <PdmConfig_Set+0xe44>)
 80131c8:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = ((pConfig->stWiper.nSpeedMap[1] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[0] & 0x0F);
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 80131d0:	011b      	lsls	r3, r3, #4
 80131d2:	b2da      	uxtb	r2, r3
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 80131da:	f003 030f 	and.w	r3, r3, #15
 80131de:	b2db      	uxtb	r3, r3
 80131e0:	4413      	add	r3, r2
 80131e2:	b2da      	uxtb	r2, r3
 80131e4:	4b81      	ldr	r3, [pc, #516]	; (80133ec <PdmConfig_Set+0xe44>)
 80131e6:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stWiper.nSpeedMap[3] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[2] & 0x0F);
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	f893 3507 	ldrb.w	r3, [r3, #1287]	; 0x507
 80131ee:	011b      	lsls	r3, r3, #4
 80131f0:	b2da      	uxtb	r2, r3
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 80131f8:	f003 030f 	and.w	r3, r3, #15
 80131fc:	b2db      	uxtb	r3, r3
 80131fe:	4413      	add	r3, r2
 8013200:	b2da      	uxtb	r2, r3
 8013202:	4b7a      	ldr	r3, [pc, #488]	; (80133ec <PdmConfig_Set+0xe44>)
 8013204:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = ((pConfig->stWiper.nSpeedMap[5] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[4] & 0x0F);
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	f893 3509 	ldrb.w	r3, [r3, #1289]	; 0x509
 801320c:	011b      	lsls	r3, r3, #4
 801320e:	b2da      	uxtb	r2, r3
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	f893 3508 	ldrb.w	r3, [r3, #1288]	; 0x508
 8013216:	f003 030f 	and.w	r3, r3, #15
 801321a:	b2db      	uxtb	r3, r3
 801321c:	4413      	add	r3, r2
 801321e:	b2da      	uxtb	r2, r3
 8013220:	4b72      	ldr	r3, [pc, #456]	; (80133ec <PdmConfig_Set+0xe44>)
 8013222:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = ((pConfig->stWiper.nSpeedMap[7] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[6] & 0x0F);
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	f893 350b 	ldrb.w	r3, [r3, #1291]	; 0x50b
 801322a:	011b      	lsls	r3, r3, #4
 801322c:	b2da      	uxtb	r2, r3
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	f893 350a 	ldrb.w	r3, [r3, #1290]	; 0x50a
 8013234:	f003 030f 	and.w	r3, r3, #15
 8013238:	b2db      	uxtb	r3, r3
 801323a:	4413      	add	r3, r2
 801323c:	b2da      	uxtb	r2, r3
 801323e:	4b6b      	ldr	r3, [pc, #428]	; (80133ec <PdmConfig_Set+0xe44>)
 8013240:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8013242:	4b6a      	ldr	r3, [pc, #424]	; (80133ec <PdmConfig_Set+0xe44>)
 8013244:	2200      	movs	r2, #0
 8013246:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8013248:	4b67      	ldr	r3, [pc, #412]	; (80133e8 <PdmConfig_Set+0xe40>)
 801324a:	2201      	movs	r2, #1
 801324c:	701a      	strb	r2, [r3, #0]
      }
    break;
 801324e:	f000 bcc5 	b.w	8013bdc <PdmConfig_Set+0x1634>

    //Set Wiper Intermit Delays Settings
    // 'Y'
    case MSG_RX_SET_WIPER_DELAYS:
      if(stMsgRx->nRxLen == 7){
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013258:	2b07      	cmp	r3, #7
 801325a:	d168      	bne.n	801332e <PdmConfig_Set+0xd86>
        pConfig->stWiper.nIntermitTime[0] = stMsgRx->nRxData[1] * 100;
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013262:	b29b      	uxth	r3, r3
 8013264:	461a      	mov	r2, r3
 8013266:	0092      	lsls	r2, r2, #2
 8013268:	4413      	add	r3, r2
 801326a:	461a      	mov	r2, r3
 801326c:	0091      	lsls	r1, r2, #2
 801326e:	461a      	mov	r2, r3
 8013270:	460b      	mov	r3, r1
 8013272:	4413      	add	r3, r2
 8013274:	009b      	lsls	r3, r3, #2
 8013276:	b29a      	uxth	r2, r3
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
        pConfig->stWiper.nIntermitTime[1] = stMsgRx->nRxData[2] * 100;
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013284:	b29b      	uxth	r3, r3
 8013286:	461a      	mov	r2, r3
 8013288:	0092      	lsls	r2, r2, #2
 801328a:	4413      	add	r3, r2
 801328c:	461a      	mov	r2, r3
 801328e:	0091      	lsls	r1, r2, #2
 8013290:	461a      	mov	r2, r3
 8013292:	460b      	mov	r3, r1
 8013294:	4413      	add	r3, r2
 8013296:	009b      	lsls	r3, r3, #2
 8013298:	b29a      	uxth	r2, r3
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	f8a3 250e 	strh.w	r2, [r3, #1294]	; 0x50e
        pConfig->stWiper.nIntermitTime[2] = stMsgRx->nRxData[3] * 100;
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	461a      	mov	r2, r3
 80132aa:	0092      	lsls	r2, r2, #2
 80132ac:	4413      	add	r3, r2
 80132ae:	461a      	mov	r2, r3
 80132b0:	0091      	lsls	r1, r2, #2
 80132b2:	461a      	mov	r2, r3
 80132b4:	460b      	mov	r3, r1
 80132b6:	4413      	add	r3, r2
 80132b8:	009b      	lsls	r3, r3, #2
 80132ba:	b29a      	uxth	r2, r3
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	f8a3 2510 	strh.w	r2, [r3, #1296]	; 0x510
        pConfig->stWiper.nIntermitTime[3] = stMsgRx->nRxData[4] * 100;
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80132c8:	b29b      	uxth	r3, r3
 80132ca:	461a      	mov	r2, r3
 80132cc:	0092      	lsls	r2, r2, #2
 80132ce:	4413      	add	r3, r2
 80132d0:	461a      	mov	r2, r3
 80132d2:	0091      	lsls	r1, r2, #2
 80132d4:	461a      	mov	r2, r3
 80132d6:	460b      	mov	r3, r1
 80132d8:	4413      	add	r3, r2
 80132da:	009b      	lsls	r3, r3, #2
 80132dc:	b29a      	uxth	r2, r3
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	f8a3 2512 	strh.w	r2, [r3, #1298]	; 0x512
        pConfig->stWiper.nIntermitTime[4] = stMsgRx->nRxData[5] * 100;
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80132ea:	b29b      	uxth	r3, r3
 80132ec:	461a      	mov	r2, r3
 80132ee:	0092      	lsls	r2, r2, #2
 80132f0:	4413      	add	r3, r2
 80132f2:	461a      	mov	r2, r3
 80132f4:	0091      	lsls	r1, r2, #2
 80132f6:	461a      	mov	r2, r3
 80132f8:	460b      	mov	r3, r1
 80132fa:	4413      	add	r3, r2
 80132fc:	009b      	lsls	r3, r3, #2
 80132fe:	b29a      	uxth	r2, r3
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
        pConfig->stWiper.nIntermitTime[5] = stMsgRx->nRxData[6] * 100;
 8013306:	68bb      	ldr	r3, [r7, #8]
 8013308:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801330c:	b29b      	uxth	r3, r3
 801330e:	461a      	mov	r2, r3
 8013310:	0092      	lsls	r2, r2, #2
 8013312:	4413      	add	r3, r2
 8013314:	461a      	mov	r2, r3
 8013316:	0091      	lsls	r1, r2, #2
 8013318:	461a      	mov	r2, r3
 801331a:	460b      	mov	r3, r1
 801331c:	4413      	add	r3, r2
 801331e:	009b      	lsls	r3, r3, #2
 8013320:	b29a      	uxth	r2, r3
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	f8a3 2516 	strh.w	r2, [r3, #1302]	; 0x516
        nSend = 1;
 8013328:	4b2f      	ldr	r3, [pc, #188]	; (80133e8 <PdmConfig_Set+0xe40>)
 801332a:	2201      	movs	r2, #1
 801332c:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013334:	2b01      	cmp	r3, #1
 8013336:	d004      	beq.n	8013342 <PdmConfig_Set+0xd9a>
 8013338:	4b2b      	ldr	r3, [pc, #172]	; (80133e8 <PdmConfig_Set+0xe40>)
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	2b00      	cmp	r3, #0
 801333e:	f000 844f 	beq.w	8013be0 <PdmConfig_Set+0x1638>
        stMsgUsbTx.nTxLen = 7;
 8013342:	4b2a      	ldr	r3, [pc, #168]	; (80133ec <PdmConfig_Set+0xe44>)
 8013344:	2207      	movs	r2, #7
 8013346:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 8013348:	4b29      	ldr	r3, [pc, #164]	; (80133f0 <PdmConfig_Set+0xe48>)
 801334a:	2207      	movs	r2, #7
 801334c:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER_DELAYS;
 801334e:	4b27      	ldr	r3, [pc, #156]	; (80133ec <PdmConfig_Set+0xe44>)
 8013350:	2279      	movs	r2, #121	; 0x79
 8013352:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (uint8_t)(pConfig->stWiper.nIntermitTime[0] / 100);
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	f8b3 350c 	ldrh.w	r3, [r3, #1292]	; 0x50c
 801335a:	4a26      	ldr	r2, [pc, #152]	; (80133f4 <PdmConfig_Set+0xe4c>)
 801335c:	fba2 2303 	umull	r2, r3, r2, r3
 8013360:	095b      	lsrs	r3, r3, #5
 8013362:	b29b      	uxth	r3, r3
 8013364:	b2da      	uxtb	r2, r3
 8013366:	4b21      	ldr	r3, [pc, #132]	; (80133ec <PdmConfig_Set+0xe44>)
 8013368:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)(pConfig->stWiper.nIntermitTime[1] / 100);
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	f8b3 350e 	ldrh.w	r3, [r3, #1294]	; 0x50e
 8013370:	4a20      	ldr	r2, [pc, #128]	; (80133f4 <PdmConfig_Set+0xe4c>)
 8013372:	fba2 2303 	umull	r2, r3, r2, r3
 8013376:	095b      	lsrs	r3, r3, #5
 8013378:	b29b      	uxth	r3, r3
 801337a:	b2da      	uxtb	r2, r3
 801337c:	4b1b      	ldr	r3, [pc, #108]	; (80133ec <PdmConfig_Set+0xe44>)
 801337e:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stWiper.nIntermitTime[2] / 100);
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 8013386:	4a1b      	ldr	r2, [pc, #108]	; (80133f4 <PdmConfig_Set+0xe4c>)
 8013388:	fba2 2303 	umull	r2, r3, r2, r3
 801338c:	095b      	lsrs	r3, r3, #5
 801338e:	b29b      	uxth	r3, r3
 8013390:	b2da      	uxtb	r2, r3
 8013392:	4b16      	ldr	r3, [pc, #88]	; (80133ec <PdmConfig_Set+0xe44>)
 8013394:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stWiper.nIntermitTime[3] / 100);
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	f8b3 3512 	ldrh.w	r3, [r3, #1298]	; 0x512
 801339c:	4a15      	ldr	r2, [pc, #84]	; (80133f4 <PdmConfig_Set+0xe4c>)
 801339e:	fba2 2303 	umull	r2, r3, r2, r3
 80133a2:	095b      	lsrs	r3, r3, #5
 80133a4:	b29b      	uxth	r3, r3
 80133a6:	b2da      	uxtb	r2, r3
 80133a8:	4b10      	ldr	r3, [pc, #64]	; (80133ec <PdmConfig_Set+0xe44>)
 80133aa:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stWiper.nIntermitTime[4] / 100);
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 80133b2:	4a10      	ldr	r2, [pc, #64]	; (80133f4 <PdmConfig_Set+0xe4c>)
 80133b4:	fba2 2303 	umull	r2, r3, r2, r3
 80133b8:	095b      	lsrs	r3, r3, #5
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	b2da      	uxtb	r2, r3
 80133be:	4b0b      	ldr	r3, [pc, #44]	; (80133ec <PdmConfig_Set+0xe44>)
 80133c0:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stWiper.nIntermitTime[5] / 100);
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	f8b3 3516 	ldrh.w	r3, [r3, #1302]	; 0x516
 80133c8:	4a0a      	ldr	r2, [pc, #40]	; (80133f4 <PdmConfig_Set+0xe4c>)
 80133ca:	fba2 2303 	umull	r2, r3, r2, r3
 80133ce:	095b      	lsrs	r3, r3, #5
 80133d0:	b29b      	uxth	r3, r3
 80133d2:	b2da      	uxtb	r2, r3
 80133d4:	4b05      	ldr	r3, [pc, #20]	; (80133ec <PdmConfig_Set+0xe44>)
 80133d6:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 80133d8:	4b04      	ldr	r3, [pc, #16]	; (80133ec <PdmConfig_Set+0xe44>)
 80133da:	2200      	movs	r2, #0
 80133dc:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 80133de:	4b02      	ldr	r3, [pc, #8]	; (80133e8 <PdmConfig_Set+0xe40>)
 80133e0:	2201      	movs	r2, #1
 80133e2:	701a      	strb	r2, [r3, #0]
      }
    break;
 80133e4:	e3fc      	b.n	8013be0 <PdmConfig_Set+0x1638>
 80133e6:	bf00      	nop
 80133e8:	20004be8 	.word	0x20004be8
 80133ec:	20004bbc 	.word	0x20004bbc
 80133f0:	20004bc8 	.word	0x20004bc8
 80133f4:	51eb851f 	.word	0x51eb851f

    //Set Flasher Settings
    // 'H'
    case MSG_RX_SET_FLASHER:
      if(stMsgRx->nRxLen == 6){
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80133fe:	2b06      	cmp	r3, #6
 8013400:	f040 808f 	bne.w	8013522 <PdmConfig_Set+0xf7a>
        nFlasherNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801340a:	091b      	lsrs	r3, r3, #4
 801340c:	b2da      	uxtb	r2, r3
 801340e:	4b90      	ldr	r3, [pc, #576]	; (8013650 <PdmConfig_Set+0x10a8>)
 8013410:	701a      	strb	r2, [r3, #0]
        if(nFlasherNum < PDM_NUM_FLASHERS){
 8013412:	4b8f      	ldr	r3, [pc, #572]	; (8013650 <PdmConfig_Set+0x10a8>)
 8013414:	781b      	ldrb	r3, [r3, #0]
 8013416:	2b03      	cmp	r3, #3
 8013418:	f200 8083 	bhi.w	8013522 <PdmConfig_Set+0xf7a>
          pConfig->stFlasher[nFlasherNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013422:	4a8b      	ldr	r2, [pc, #556]	; (8013650 <PdmConfig_Set+0x10a8>)
 8013424:	7812      	ldrb	r2, [r2, #0]
 8013426:	4611      	mov	r1, r2
 8013428:	f003 0301 	and.w	r3, r3, #1
 801342c:	b2d8      	uxtb	r0, r3
 801342e:	68fa      	ldr	r2, [r7, #12]
 8013430:	460b      	mov	r3, r1
 8013432:	005b      	lsls	r3, r3, #1
 8013434:	440b      	add	r3, r1
 8013436:	00db      	lsls	r3, r3, #3
 8013438:	4413      	add	r3, r2
 801343a:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 801343e:	4602      	mov	r2, r0
 8013440:	701a      	strb	r2, [r3, #0]
          pConfig->stFlasher[nFlasherNum].nSingleCycle = (stMsgRx->nRxData[1] & 0x02) >> 1;
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013448:	105b      	asrs	r3, r3, #1
 801344a:	b2db      	uxtb	r3, r3
 801344c:	4a80      	ldr	r2, [pc, #512]	; (8013650 <PdmConfig_Set+0x10a8>)
 801344e:	7812      	ldrb	r2, [r2, #0]
 8013450:	4611      	mov	r1, r2
 8013452:	f003 0301 	and.w	r3, r3, #1
 8013456:	b2d8      	uxtb	r0, r3
 8013458:	68fa      	ldr	r2, [r7, #12]
 801345a:	460b      	mov	r3, r1
 801345c:	005b      	lsls	r3, r3, #1
 801345e:	440b      	add	r3, r1
 8013460:	00db      	lsls	r3, r3, #3
 8013462:	4413      	add	r3, r2
 8013464:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8013468:	4602      	mov	r2, r0
 801346a:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nInput = stMsgRx->nRxData[2];
 801346c:	4b78      	ldr	r3, [pc, #480]	; (8013650 <PdmConfig_Set+0x10a8>)
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	4619      	mov	r1, r3
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8013478:	68fa      	ldr	r2, [r7, #12]
 801347a:	460b      	mov	r3, r1
 801347c:	005b      	lsls	r3, r3, #1
 801347e:	440b      	add	r3, r1
 8013480:	00db      	lsls	r3, r3, #3
 8013482:	4413      	add	r3, r2
 8013484:	f203 5319 	addw	r3, r3, #1305	; 0x519
 8013488:	4602      	mov	r2, r0
 801348a:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nOutput = stMsgRx->nRxData[3];
 801348c:	4b70      	ldr	r3, [pc, #448]	; (8013650 <PdmConfig_Set+0x10a8>)
 801348e:	781b      	ldrb	r3, [r3, #0]
 8013490:	4619      	mov	r1, r3
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8013498:	68fa      	ldr	r2, [r7, #12]
 801349a:	460b      	mov	r3, r1
 801349c:	005b      	lsls	r3, r3, #1
 801349e:	440b      	add	r3, r1
 80134a0:	00db      	lsls	r3, r3, #3
 80134a2:	4413      	add	r3, r2
 80134a4:	f203 5325 	addw	r3, r3, #1317	; 0x525
 80134a8:	4602      	mov	r2, r0
 80134aa:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nFlashOnTime = stMsgRx->nRxData[4] * 100;
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80134b2:	b29a      	uxth	r2, r3
 80134b4:	4b66      	ldr	r3, [pc, #408]	; (8013650 <PdmConfig_Set+0x10a8>)
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	4619      	mov	r1, r3
 80134ba:	4613      	mov	r3, r2
 80134bc:	461a      	mov	r2, r3
 80134be:	0092      	lsls	r2, r2, #2
 80134c0:	4413      	add	r3, r2
 80134c2:	461a      	mov	r2, r3
 80134c4:	0090      	lsls	r0, r2, #2
 80134c6:	461a      	mov	r2, r3
 80134c8:	4603      	mov	r3, r0
 80134ca:	4413      	add	r3, r2
 80134cc:	009b      	lsls	r3, r3, #2
 80134ce:	b298      	uxth	r0, r3
 80134d0:	68fa      	ldr	r2, [r7, #12]
 80134d2:	460b      	mov	r3, r1
 80134d4:	005b      	lsls	r3, r3, #1
 80134d6:	440b      	add	r3, r1
 80134d8:	00db      	lsls	r3, r3, #3
 80134da:	4413      	add	r3, r2
 80134dc:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80134e0:	4602      	mov	r2, r0
 80134e2:	801a      	strh	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nFlashOffTime = stMsgRx->nRxData[5] * 100;
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80134ea:	b29a      	uxth	r2, r3
 80134ec:	4b58      	ldr	r3, [pc, #352]	; (8013650 <PdmConfig_Set+0x10a8>)
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	4619      	mov	r1, r3
 80134f2:	4613      	mov	r3, r2
 80134f4:	461a      	mov	r2, r3
 80134f6:	0092      	lsls	r2, r2, #2
 80134f8:	4413      	add	r3, r2
 80134fa:	461a      	mov	r2, r3
 80134fc:	0090      	lsls	r0, r2, #2
 80134fe:	461a      	mov	r2, r3
 8013500:	4603      	mov	r3, r0
 8013502:	4413      	add	r3, r2
 8013504:	009b      	lsls	r3, r3, #2
 8013506:	b298      	uxth	r0, r3
 8013508:	68fa      	ldr	r2, [r7, #12]
 801350a:	460b      	mov	r3, r1
 801350c:	005b      	lsls	r3, r3, #1
 801350e:	440b      	add	r3, r1
 8013510:	00db      	lsls	r3, r3, #3
 8013512:	4413      	add	r3, r2
 8013514:	f203 5322 	addw	r3, r3, #1314	; 0x522
 8013518:	4602      	mov	r2, r0
 801351a:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 801351c:	4b4d      	ldr	r3, [pc, #308]	; (8013654 <PdmConfig_Set+0x10ac>)
 801351e:	2201      	movs	r2, #1
 8013520:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013528:	2b02      	cmp	r3, #2
 801352a:	d10d      	bne.n	8013548 <PdmConfig_Set+0xfa0>
        nFlasherNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013532:	091b      	lsrs	r3, r3, #4
 8013534:	b2da      	uxtb	r2, r3
 8013536:	4b46      	ldr	r3, [pc, #280]	; (8013650 <PdmConfig_Set+0x10a8>)
 8013538:	701a      	strb	r2, [r3, #0]
        if(nFlasherNum < PDM_NUM_FLASHERS){
 801353a:	4b45      	ldr	r3, [pc, #276]	; (8013650 <PdmConfig_Set+0x10a8>)
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	2b03      	cmp	r3, #3
 8013540:	d802      	bhi.n	8013548 <PdmConfig_Set+0xfa0>
          nSend = 1;
 8013542:	4b44      	ldr	r3, [pc, #272]	; (8013654 <PdmConfig_Set+0x10ac>)
 8013544:	2201      	movs	r2, #1
 8013546:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8013548:	4b42      	ldr	r3, [pc, #264]	; (8013654 <PdmConfig_Set+0x10ac>)
 801354a:	781b      	ldrb	r3, [r3, #0]
 801354c:	2b00      	cmp	r3, #0
 801354e:	f000 8349 	beq.w	8013be4 <PdmConfig_Set+0x163c>
        stMsgUsbTx.nTxLen = 6;
 8013552:	4b41      	ldr	r3, [pc, #260]	; (8013658 <PdmConfig_Set+0x10b0>)
 8013554:	2206      	movs	r2, #6
 8013556:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 6;
 8013558:	4b40      	ldr	r3, [pc, #256]	; (801365c <PdmConfig_Set+0x10b4>)
 801355a:	2206      	movs	r2, #6
 801355c:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_FLASHER;
 801355e:	4b3e      	ldr	r3, [pc, #248]	; (8013658 <PdmConfig_Set+0x10b0>)
 8013560:	2268      	movs	r2, #104	; 0x68
 8013562:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((nFlasherNum & 0x0F) << 4) + ((pConfig->stFlasher[nFlasherNum].nSingleCycle & 0x01) << 1) +
 8013564:	4b3a      	ldr	r3, [pc, #232]	; (8013650 <PdmConfig_Set+0x10a8>)
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	011b      	lsls	r3, r3, #4
 801356a:	b2da      	uxtb	r2, r3
 801356c:	4b38      	ldr	r3, [pc, #224]	; (8013650 <PdmConfig_Set+0x10a8>)
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	4618      	mov	r0, r3
 8013572:	68f9      	ldr	r1, [r7, #12]
 8013574:	4603      	mov	r3, r0
 8013576:	005b      	lsls	r3, r3, #1
 8013578:	4403      	add	r3, r0
 801357a:	00db      	lsls	r3, r3, #3
 801357c:	440b      	add	r3, r1
 801357e:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	005b      	lsls	r3, r3, #1
 8013586:	b2db      	uxtb	r3, r3
 8013588:	f003 0302 	and.w	r3, r3, #2
 801358c:	b2db      	uxtb	r3, r3
 801358e:	4413      	add	r3, r2
 8013590:	b2da      	uxtb	r2, r3
                                (pConfig->stFlasher[nFlasherNum].nEnabled & 0x01);
 8013592:	4b2f      	ldr	r3, [pc, #188]	; (8013650 <PdmConfig_Set+0x10a8>)
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	4618      	mov	r0, r3
 8013598:	68f9      	ldr	r1, [r7, #12]
 801359a:	4603      	mov	r3, r0
 801359c:	005b      	lsls	r3, r3, #1
 801359e:	4403      	add	r3, r0
 80135a0:	00db      	lsls	r3, r3, #3
 80135a2:	440b      	add	r3, r1
 80135a4:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	f003 0301 	and.w	r3, r3, #1
 80135ae:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((nFlasherNum & 0x0F) << 4) + ((pConfig->stFlasher[nFlasherNum].nSingleCycle & 0x01) << 1) +
 80135b0:	4413      	add	r3, r2
 80135b2:	b2da      	uxtb	r2, r3
 80135b4:	4b28      	ldr	r3, [pc, #160]	; (8013658 <PdmConfig_Set+0x10b0>)
 80135b6:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stFlasher[nFlasherNum].nInput;
 80135b8:	4b25      	ldr	r3, [pc, #148]	; (8013650 <PdmConfig_Set+0x10a8>)
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	4619      	mov	r1, r3
 80135be:	68fa      	ldr	r2, [r7, #12]
 80135c0:	460b      	mov	r3, r1
 80135c2:	005b      	lsls	r3, r3, #1
 80135c4:	440b      	add	r3, r1
 80135c6:	00db      	lsls	r3, r3, #3
 80135c8:	4413      	add	r3, r2
 80135ca:	f203 5319 	addw	r3, r3, #1305	; 0x519
 80135ce:	781a      	ldrb	r2, [r3, #0]
 80135d0:	4b21      	ldr	r3, [pc, #132]	; (8013658 <PdmConfig_Set+0x10b0>)
 80135d2:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stFlasher[nFlasherNum].nOutput;
 80135d4:	4b1e      	ldr	r3, [pc, #120]	; (8013650 <PdmConfig_Set+0x10a8>)
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	4619      	mov	r1, r3
 80135da:	68fa      	ldr	r2, [r7, #12]
 80135dc:	460b      	mov	r3, r1
 80135de:	005b      	lsls	r3, r3, #1
 80135e0:	440b      	add	r3, r1
 80135e2:	00db      	lsls	r3, r3, #3
 80135e4:	4413      	add	r3, r2
 80135e6:	f203 5325 	addw	r3, r3, #1317	; 0x525
 80135ea:	781a      	ldrb	r2, [r3, #0]
 80135ec:	4b1a      	ldr	r3, [pc, #104]	; (8013658 <PdmConfig_Set+0x10b0>)
 80135ee:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stFlasher[nFlasherNum].nFlashOnTime / 100);
 80135f0:	4b17      	ldr	r3, [pc, #92]	; (8013650 <PdmConfig_Set+0x10a8>)
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	4619      	mov	r1, r3
 80135f6:	68fa      	ldr	r2, [r7, #12]
 80135f8:	460b      	mov	r3, r1
 80135fa:	005b      	lsls	r3, r3, #1
 80135fc:	440b      	add	r3, r1
 80135fe:	00db      	lsls	r3, r3, #3
 8013600:	4413      	add	r3, r2
 8013602:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8013606:	881b      	ldrh	r3, [r3, #0]
 8013608:	4a15      	ldr	r2, [pc, #84]	; (8013660 <PdmConfig_Set+0x10b8>)
 801360a:	fba2 2303 	umull	r2, r3, r2, r3
 801360e:	095b      	lsrs	r3, r3, #5
 8013610:	b29b      	uxth	r3, r3
 8013612:	b2da      	uxtb	r2, r3
 8013614:	4b10      	ldr	r3, [pc, #64]	; (8013658 <PdmConfig_Set+0x10b0>)
 8013616:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stFlasher[nFlasherNum].nFlashOffTime / 100);
 8013618:	4b0d      	ldr	r3, [pc, #52]	; (8013650 <PdmConfig_Set+0x10a8>)
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	4619      	mov	r1, r3
 801361e:	68fa      	ldr	r2, [r7, #12]
 8013620:	460b      	mov	r3, r1
 8013622:	005b      	lsls	r3, r3, #1
 8013624:	440b      	add	r3, r1
 8013626:	00db      	lsls	r3, r3, #3
 8013628:	4413      	add	r3, r2
 801362a:	f203 5322 	addw	r3, r3, #1314	; 0x522
 801362e:	881b      	ldrh	r3, [r3, #0]
 8013630:	4a0b      	ldr	r2, [pc, #44]	; (8013660 <PdmConfig_Set+0x10b8>)
 8013632:	fba2 2303 	umull	r2, r3, r2, r3
 8013636:	095b      	lsrs	r3, r3, #5
 8013638:	b29b      	uxth	r3, r3
 801363a:	b2da      	uxtb	r2, r3
 801363c:	4b06      	ldr	r3, [pc, #24]	; (8013658 <PdmConfig_Set+0x10b0>)
 801363e:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8013640:	4b05      	ldr	r3, [pc, #20]	; (8013658 <PdmConfig_Set+0x10b0>)
 8013642:	2200      	movs	r2, #0
 8013644:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8013646:	4b04      	ldr	r3, [pc, #16]	; (8013658 <PdmConfig_Set+0x10b0>)
 8013648:	2200      	movs	r2, #0
 801364a:	71da      	strb	r2, [r3, #7]
      }
    break;
 801364c:	e2ca      	b.n	8013be4 <PdmConfig_Set+0x163c>
 801364e:	bf00      	nop
 8013650:	20004bec 	.word	0x20004bec
 8013654:	20004be8 	.word	0x20004be8
 8013658:	20004bbc 	.word	0x20004bbc
 801365c:	20004bc8 	.word	0x20004bc8
 8013660:	51eb851f 	.word	0x51eb851f

    //Set Starter Disable Settings
    // 'D'
    case MSG_RX_SET_STARTER:
      if(stMsgRx->nRxLen == 5){
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801366a:	2b05      	cmp	r3, #5
 801366c:	f040 808f 	bne.w	801378e <PdmConfig_Set+0x11e6>
        pConfig->stStarter.nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013676:	f003 0301 	and.w	r3, r3, #1
 801367a:	b2da      	uxtb	r2, r3
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578

        pConfig->stStarter.nInput = stMsgRx->nRxData[2];
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579

        pConfig->stStarter.nDisableOut[0] = (stMsgRx->nRxData[3] & 0x01);
 801368e:	68bb      	ldr	r3, [r7, #8]
 8013690:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8013694:	f003 0301 	and.w	r3, r3, #1
 8013698:	b2da      	uxtb	r2, r3
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
        pConfig->stStarter.nDisableOut[1] = (stMsgRx->nRxData[3] & 0x02) >> 1;
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80136a6:	105b      	asrs	r3, r3, #1
 80136a8:	b2db      	uxtb	r3, r3
 80136aa:	f003 0301 	and.w	r3, r3, #1
 80136ae:	b2da      	uxtb	r2, r3
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
        pConfig->stStarter.nDisableOut[2] = (stMsgRx->nRxData[3] & 0x04) >> 2;
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80136bc:	109b      	asrs	r3, r3, #2
 80136be:	b2db      	uxtb	r3, r3
 80136c0:	f003 0301 	and.w	r3, r3, #1
 80136c4:	b2da      	uxtb	r2, r3
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
        pConfig->stStarter.nDisableOut[3] = (stMsgRx->nRxData[3] & 0x08) >> 3;
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80136d2:	10db      	asrs	r3, r3, #3
 80136d4:	b2db      	uxtb	r3, r3
 80136d6:	f003 0301 	and.w	r3, r3, #1
 80136da:	b2da      	uxtb	r2, r3
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
        pConfig->stStarter.nDisableOut[4] = (stMsgRx->nRxData[3] & 0x10) >> 4;
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80136e8:	111b      	asrs	r3, r3, #4
 80136ea:	b2db      	uxtb	r3, r3
 80136ec:	f003 0301 	and.w	r3, r3, #1
 80136f0:	b2da      	uxtb	r2, r3
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
        pConfig->stStarter.nDisableOut[5] = (stMsgRx->nRxData[3] & 0x20) >> 5;
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80136fe:	115b      	asrs	r3, r3, #5
 8013700:	b2db      	uxtb	r3, r3
 8013702:	f003 0301 	and.w	r3, r3, #1
 8013706:	b2da      	uxtb	r2, r3
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
        pConfig->stStarter.nDisableOut[6] = (stMsgRx->nRxData[3] & 0x40) >> 6;
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8013714:	119b      	asrs	r3, r3, #6
 8013716:	b2db      	uxtb	r3, r3
 8013718:	f003 0301 	and.w	r3, r3, #1
 801371c:	b2da      	uxtb	r2, r3
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	f883 2586 	strb.w	r2, [r3, #1414]	; 0x586
        pConfig->stStarter.nDisableOut[7] = (stMsgRx->nRxData[3] & 0x80) >> 7;
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801372a:	09db      	lsrs	r3, r3, #7
 801372c:	b2da      	uxtb	r2, r3
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	f883 2587 	strb.w	r2, [r3, #1415]	; 0x587

        pConfig->stStarter.nDisableOut[8] = (stMsgRx->nRxData[4] & 0x01);
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801373a:	f003 0301 	and.w	r3, r3, #1
 801373e:	b2da      	uxtb	r2, r3
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	f883 2588 	strb.w	r2, [r3, #1416]	; 0x588
        pConfig->stStarter.nDisableOut[9] = (stMsgRx->nRxData[4] & 0x02) >> 1;
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801374c:	105b      	asrs	r3, r3, #1
 801374e:	b2db      	uxtb	r3, r3
 8013750:	f003 0301 	and.w	r3, r3, #1
 8013754:	b2da      	uxtb	r2, r3
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
        pConfig->stStarter.nDisableOut[10] = (stMsgRx->nRxData[4] & 0x04) >> 2;
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013762:	109b      	asrs	r3, r3, #2
 8013764:	b2db      	uxtb	r3, r3
 8013766:	f003 0301 	and.w	r3, r3, #1
 801376a:	b2da      	uxtb	r2, r3
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
        pConfig->stStarter.nDisableOut[11] = (stMsgRx->nRxData[4] & 0x08) >> 3;
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013778:	10db      	asrs	r3, r3, #3
 801377a:	b2db      	uxtb	r3, r3
 801377c:	f003 0301 	and.w	r3, r3, #1
 8013780:	b2da      	uxtb	r2, r3
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	f883 258b 	strb.w	r2, [r3, #1419]	; 0x58b
        nSend = 1;
 8013788:	4b50      	ldr	r3, [pc, #320]	; (80138cc <PdmConfig_Set+0x1324>)
 801378a:	2201      	movs	r2, #1
 801378c:	701a      	strb	r2, [r3, #0]
      }

      if((stMsgRx->nRxLen == 1) || nSend){
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013794:	2b01      	cmp	r3, #1
 8013796:	d004      	beq.n	80137a2 <PdmConfig_Set+0x11fa>
 8013798:	4b4c      	ldr	r3, [pc, #304]	; (80138cc <PdmConfig_Set+0x1324>)
 801379a:	781b      	ldrb	r3, [r3, #0]
 801379c:	2b00      	cmp	r3, #0
 801379e:	f000 8223 	beq.w	8013be8 <PdmConfig_Set+0x1640>
        stMsgUsbTx.nTxLen = 5;
 80137a2:	4b4b      	ldr	r3, [pc, #300]	; (80138d0 <PdmConfig_Set+0x1328>)
 80137a4:	2205      	movs	r2, #5
 80137a6:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 80137a8:	4b4a      	ldr	r3, [pc, #296]	; (80138d4 <PdmConfig_Set+0x132c>)
 80137aa:	2205      	movs	r2, #5
 80137ac:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_STARTER;
 80137ae:	4b48      	ldr	r3, [pc, #288]	; (80138d0 <PdmConfig_Set+0x1328>)
 80137b0:	2264      	movs	r2, #100	; 0x64
 80137b2:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (pConfig->stStarter.nEnabled & 0x01);
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	f893 3578 	ldrb.w	r3, [r3, #1400]	; 0x578
 80137ba:	f003 0301 	and.w	r3, r3, #1
 80137be:	b2da      	uxtb	r2, r3
 80137c0:	4b43      	ldr	r3, [pc, #268]	; (80138d0 <PdmConfig_Set+0x1328>)
 80137c2:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stStarter.nInput;
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	f893 2579 	ldrb.w	r2, [r3, #1401]	; 0x579
 80137ca:	4b41      	ldr	r3, [pc, #260]	; (80138d0 <PdmConfig_Set+0x1328>)
 80137cc:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	f893 3587 	ldrb.w	r3, [r3, #1415]	; 0x587
 80137d4:	01db      	lsls	r3, r3, #7
 80137d6:	b2da      	uxtb	r2, r3
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	f893 3586 	ldrb.w	r3, [r3, #1414]	; 0x586
 80137de:	019b      	lsls	r3, r3, #6
 80137e0:	b2db      	uxtb	r3, r3
 80137e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137e6:	b2db      	uxtb	r3, r3
 80137e8:	4413      	add	r3, r2
 80137ea:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	f893 3585 	ldrb.w	r3, [r3, #1413]	; 0x585
 80137f2:	015b      	lsls	r3, r3, #5
 80137f4:	b2db      	uxtb	r3, r3
 80137f6:	f003 0320 	and.w	r3, r3, #32
 80137fa:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 80137fc:	4413      	add	r3, r2
 80137fe:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	f893 3584 	ldrb.w	r3, [r3, #1412]	; 0x584
 8013806:	011b      	lsls	r3, r3, #4
 8013808:	b2db      	uxtb	r3, r3
 801380a:	f003 0310 	and.w	r3, r3, #16
 801380e:	b2db      	uxtb	r3, r3
 8013810:	4413      	add	r3, r2
 8013812:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	f893 3583 	ldrb.w	r3, [r3, #1411]	; 0x583
 801381a:	00db      	lsls	r3, r3, #3
 801381c:	b2db      	uxtb	r3, r3
 801381e:	f003 0308 	and.w	r3, r3, #8
 8013822:	b2db      	uxtb	r3, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 8013824:	4413      	add	r3, r2
 8013826:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	f893 3582 	ldrb.w	r3, [r3, #1410]	; 0x582
 801382e:	009b      	lsls	r3, r3, #2
 8013830:	b2db      	uxtb	r3, r3
 8013832:	f003 0304 	and.w	r3, r3, #4
 8013836:	b2db      	uxtb	r3, r3
 8013838:	4413      	add	r3, r2
 801383a:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[1] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[0] & 0x01);
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	f893 3581 	ldrb.w	r3, [r3, #1409]	; 0x581
 8013842:	005b      	lsls	r3, r3, #1
 8013844:	b2db      	uxtb	r3, r3
 8013846:	f003 0302 	and.w	r3, r3, #2
 801384a:	b2db      	uxtb	r3, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 801384c:	4413      	add	r3, r2
 801384e:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[1] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[0] & 0x01);
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	f893 3580 	ldrb.w	r3, [r3, #1408]	; 0x580
 8013856:	f003 0301 	and.w	r3, r3, #1
 801385a:	b2db      	uxtb	r3, r3
 801385c:	4413      	add	r3, r2
 801385e:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 8013860:	4b1b      	ldr	r3, [pc, #108]	; (80138d0 <PdmConfig_Set+0x1328>)
 8013862:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	f893 358b 	ldrb.w	r3, [r3, #1419]	; 0x58b
 801386a:	00db      	lsls	r3, r3, #3
 801386c:	b25b      	sxtb	r3, r3
 801386e:	f003 0308 	and.w	r3, r3, #8
 8013872:	b25a      	sxtb	r2, r3
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f893 358a 	ldrb.w	r3, [r3, #1418]	; 0x58a
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	b25b      	sxtb	r3, r3
 801387e:	f003 0304 	and.w	r3, r3, #4
 8013882:	b25b      	sxtb	r3, r3
 8013884:	4313      	orrs	r3, r2
 8013886:	b25b      	sxtb	r3, r3
 8013888:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[9] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[8] & 0x01);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	f893 3589 	ldrb.w	r3, [r3, #1417]	; 0x589
 8013890:	005b      	lsls	r3, r3, #1
 8013892:	b2db      	uxtb	r3, r3
 8013894:	f003 0302 	and.w	r3, r3, #2
 8013898:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 801389a:	4413      	add	r3, r2
 801389c:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[9] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[8] & 0x01);
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	f893 3588 	ldrb.w	r3, [r3, #1416]	; 0x588
 80138a4:	f003 0301 	and.w	r3, r3, #1
 80138a8:	b2db      	uxtb	r3, r3
 80138aa:	4413      	add	r3, r2
 80138ac:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 80138ae:	4b08      	ldr	r3, [pc, #32]	; (80138d0 <PdmConfig_Set+0x1328>)
 80138b0:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 80138b2:	4b07      	ldr	r3, [pc, #28]	; (80138d0 <PdmConfig_Set+0x1328>)
 80138b4:	2200      	movs	r2, #0
 80138b6:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 80138b8:	4b05      	ldr	r3, [pc, #20]	; (80138d0 <PdmConfig_Set+0x1328>)
 80138ba:	2200      	movs	r2, #0
 80138bc:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 80138be:	4b04      	ldr	r3, [pc, #16]	; (80138d0 <PdmConfig_Set+0x1328>)
 80138c0:	2200      	movs	r2, #0
 80138c2:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 80138c4:	4b01      	ldr	r3, [pc, #4]	; (80138cc <PdmConfig_Set+0x1324>)
 80138c6:	2201      	movs	r2, #1
 80138c8:	701a      	strb	r2, [r3, #0]
      }
    break;
 80138ca:	e18d      	b.n	8013be8 <PdmConfig_Set+0x1640>
 80138cc:	20004be8 	.word	0x20004be8
 80138d0:	20004bbc 	.word	0x20004bbc
 80138d4:	20004bc8 	.word	0x20004bc8

    //Set CAN Input Settings
    // 'N'
    case MSG_RX_SET_CAN_INPUTS:
       if(stMsgRx->nRxLen == 7){
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80138de:	2b07      	cmp	r3, #7
 80138e0:	f040 8097 	bne.w	8013a12 <PdmConfig_Set+0x146a>
         nCanInputNum = (stMsgRx->nRxData[2]);
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80138ea:	4bb6      	ldr	r3, [pc, #728]	; (8013bc4 <PdmConfig_Set+0x161c>)
 80138ec:	701a      	strb	r2, [r3, #0]
         if(nCanInputNum < PDM_NUM_CAN_INPUTS){
 80138ee:	4bb5      	ldr	r3, [pc, #724]	; (8013bc4 <PdmConfig_Set+0x161c>)
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	2b1d      	cmp	r3, #29
 80138f4:	f200 808d 	bhi.w	8013a12 <PdmConfig_Set+0x146a>
           pConfig->stCanInput[nCanInputNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80138fe:	4ab1      	ldr	r2, [pc, #708]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013900:	7812      	ldrb	r2, [r2, #0]
 8013902:	4611      	mov	r1, r2
 8013904:	f003 0301 	and.w	r3, r3, #1
 8013908:	b2d8      	uxtb	r0, r3
 801390a:	68fa      	ldr	r2, [r7, #12]
 801390c:	460b      	mov	r3, r1
 801390e:	00db      	lsls	r3, r3, #3
 8013910:	1a5b      	subs	r3, r3, r1
 8013912:	009b      	lsls	r3, r3, #2
 8013914:	4413      	add	r3, r2
 8013916:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 801391a:	4602      	mov	r2, r0
 801391c:	701a      	strb	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].eMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013924:	105b      	asrs	r3, r3, #1
 8013926:	b2db      	uxtb	r3, r3
 8013928:	4aa6      	ldr	r2, [pc, #664]	; (8013bc4 <PdmConfig_Set+0x161c>)
 801392a:	7812      	ldrb	r2, [r2, #0]
 801392c:	4611      	mov	r1, r2
 801392e:	f003 0303 	and.w	r3, r3, #3
 8013932:	b2d8      	uxtb	r0, r3
 8013934:	68fa      	ldr	r2, [r7, #12]
 8013936:	460b      	mov	r3, r1
 8013938:	00db      	lsls	r3, r3, #3
 801393a:	1a5b      	subs	r3, r3, r1
 801393c:	009b      	lsls	r3, r3, #2
 801393e:	4413      	add	r3, r2
 8013940:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8013944:	4602      	mov	r2, r0
 8013946:	701a      	strb	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].eOperator = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801394e:	4a9d      	ldr	r2, [pc, #628]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013950:	7812      	ldrb	r2, [r2, #0]
 8013952:	4611      	mov	r1, r2
 8013954:	091b      	lsrs	r3, r3, #4
 8013956:	b2d8      	uxtb	r0, r3
 8013958:	68fa      	ldr	r2, [r7, #12]
 801395a:	460b      	mov	r3, r1
 801395c:	00db      	lsls	r3, r3, #3
 801395e:	1a5b      	subs	r3, r3, r1
 8013960:	009b      	lsls	r3, r3, #2
 8013962:	4413      	add	r3, r2
 8013964:	f203 5394 	addw	r3, r3, #1428	; 0x594
 8013968:	4602      	mov	r2, r0
 801396a:	701a      	strb	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nId = (stMsgRx->nRxData[3] << 8) + stMsgRx->nRxData[4];
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8013972:	b29b      	uxth	r3, r3
 8013974:	021b      	lsls	r3, r3, #8
 8013976:	b29a      	uxth	r2, r3
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801397e:	b29b      	uxth	r3, r3
 8013980:	4990      	ldr	r1, [pc, #576]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013982:	7809      	ldrb	r1, [r1, #0]
 8013984:	4413      	add	r3, r2
 8013986:	b298      	uxth	r0, r3
 8013988:	68fa      	ldr	r2, [r7, #12]
 801398a:	460b      	mov	r3, r1
 801398c:	00db      	lsls	r3, r3, #3
 801398e:	1a5b      	subs	r3, r3, r1
 8013990:	009b      	lsls	r3, r3, #2
 8013992:	4413      	add	r3, r2
 8013994:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8013998:	4602      	mov	r2, r0
 801399a:	801a      	strh	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nLowByte = (stMsgRx->nRxData[5] & 0x0F);
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	4a87      	ldr	r2, [pc, #540]	; (8013bc4 <PdmConfig_Set+0x161c>)
 80139a6:	7812      	ldrb	r2, [r2, #0]
 80139a8:	4611      	mov	r1, r2
 80139aa:	f003 030f 	and.w	r3, r3, #15
 80139ae:	b298      	uxth	r0, r3
 80139b0:	68fa      	ldr	r2, [r7, #12]
 80139b2:	460b      	mov	r3, r1
 80139b4:	00db      	lsls	r3, r3, #3
 80139b6:	1a5b      	subs	r3, r3, r1
 80139b8:	009b      	lsls	r3, r3, #2
 80139ba:	4413      	add	r3, r2
 80139bc:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 80139c0:	4602      	mov	r2, r0
 80139c2:	801a      	strh	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].nHighByte = (stMsgRx->nRxData[5] & 0xF0) >> 4;
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80139ca:	091b      	lsrs	r3, r3, #4
 80139cc:	b2da      	uxtb	r2, r3
 80139ce:	4b7d      	ldr	r3, [pc, #500]	; (8013bc4 <PdmConfig_Set+0x161c>)
 80139d0:	781b      	ldrb	r3, [r3, #0]
 80139d2:	4619      	mov	r1, r3
 80139d4:	b290      	uxth	r0, r2
 80139d6:	68fa      	ldr	r2, [r7, #12]
 80139d8:	460b      	mov	r3, r1
 80139da:	00db      	lsls	r3, r3, #3
 80139dc:	1a5b      	subs	r3, r3, r1
 80139de:	009b      	lsls	r3, r3, #2
 80139e0:	4413      	add	r3, r2
 80139e2:	f203 5392 	addw	r3, r3, #1426	; 0x592
 80139e6:	4602      	mov	r2, r0
 80139e8:	801a      	strh	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nOnVal = stMsgRx->nRxData[6];
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80139f0:	4b74      	ldr	r3, [pc, #464]	; (8013bc4 <PdmConfig_Set+0x161c>)
 80139f2:	781b      	ldrb	r3, [r3, #0]
 80139f4:	4619      	mov	r1, r3
 80139f6:	b290      	uxth	r0, r2
 80139f8:	68fa      	ldr	r2, [r7, #12]
 80139fa:	460b      	mov	r3, r1
 80139fc:	00db      	lsls	r3, r3, #3
 80139fe:	1a5b      	subs	r3, r3, r1
 8013a00:	009b      	lsls	r3, r3, #2
 8013a02:	4413      	add	r3, r2
 8013a04:	f203 5396 	addw	r3, r3, #1430	; 0x596
 8013a08:	4602      	mov	r2, r0
 8013a0a:	801a      	strh	r2, [r3, #0]

           nSend = 1;
 8013a0c:	4b6e      	ldr	r3, [pc, #440]	; (8013bc8 <PdmConfig_Set+0x1620>)
 8013a0e:	2201      	movs	r2, #1
 8013a10:	701a      	strb	r2, [r3, #0]
         }
       }

       if(stMsgRx->nRxLen == 2){
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a18:	2b02      	cmp	r3, #2
 8013a1a:	d10b      	bne.n	8013a34 <PdmConfig_Set+0x148c>
          nCanInputNum = (stMsgRx->nRxData[1]);
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8013a22:	4b68      	ldr	r3, [pc, #416]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013a24:	701a      	strb	r2, [r3, #0]
          if(nCanInputNum < PDM_NUM_CAN_INPUTS){
 8013a26:	4b67      	ldr	r3, [pc, #412]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013a28:	781b      	ldrb	r3, [r3, #0]
 8013a2a:	2b1d      	cmp	r3, #29
 8013a2c:	d802      	bhi.n	8013a34 <PdmConfig_Set+0x148c>
            nSend = 1;
 8013a2e:	4b66      	ldr	r3, [pc, #408]	; (8013bc8 <PdmConfig_Set+0x1620>)
 8013a30:	2201      	movs	r2, #1
 8013a32:	701a      	strb	r2, [r3, #0]
          }
       }

       if(nSend){
 8013a34:	4b64      	ldr	r3, [pc, #400]	; (8013bc8 <PdmConfig_Set+0x1620>)
 8013a36:	781b      	ldrb	r3, [r3, #0]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	f000 80d7 	beq.w	8013bec <PdmConfig_Set+0x1644>
         stMsgUsbTx.nTxLen = 7;
 8013a3e:	4b63      	ldr	r3, [pc, #396]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013a40:	2207      	movs	r2, #7
 8013a42:	721a      	strb	r2, [r3, #8]
         stMsgCanTx.stTxHeader.DLC = 7;
 8013a44:	4b62      	ldr	r3, [pc, #392]	; (8013bd0 <PdmConfig_Set+0x1628>)
 8013a46:	2207      	movs	r2, #7
 8013a48:	611a      	str	r2, [r3, #16]

         stMsgUsbTx.nTxData[0] = MSG_TX_SET_CAN_INPUTS;
 8013a4a:	4b60      	ldr	r3, [pc, #384]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013a4c:	226e      	movs	r2, #110	; 0x6e
 8013a4e:	701a      	strb	r2, [r3, #0]
         stMsgUsbTx.nTxData[1] = ((pConfig->stCanInput[nCanInputNum].eOperator & 0x0F) << 4) + ((pConfig->stCanInput[nCanInputNum].eMode & 0x03) << 1) +
 8013a50:	4b5c      	ldr	r3, [pc, #368]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013a52:	781b      	ldrb	r3, [r3, #0]
 8013a54:	4619      	mov	r1, r3
 8013a56:	68fa      	ldr	r2, [r7, #12]
 8013a58:	460b      	mov	r3, r1
 8013a5a:	00db      	lsls	r3, r3, #3
 8013a5c:	1a5b      	subs	r3, r3, r1
 8013a5e:	009b      	lsls	r3, r3, #2
 8013a60:	4413      	add	r3, r2
 8013a62:	f203 5394 	addw	r3, r3, #1428	; 0x594
 8013a66:	781b      	ldrb	r3, [r3, #0]
 8013a68:	011b      	lsls	r3, r3, #4
 8013a6a:	b2da      	uxtb	r2, r3
 8013a6c:	4b55      	ldr	r3, [pc, #340]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	4618      	mov	r0, r3
 8013a72:	68f9      	ldr	r1, [r7, #12]
 8013a74:	4603      	mov	r3, r0
 8013a76:	00db      	lsls	r3, r3, #3
 8013a78:	1a1b      	subs	r3, r3, r0
 8013a7a:	009b      	lsls	r3, r3, #2
 8013a7c:	440b      	add	r3, r1
 8013a7e:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8013a82:	781b      	ldrb	r3, [r3, #0]
 8013a84:	005b      	lsls	r3, r3, #1
 8013a86:	b2db      	uxtb	r3, r3
 8013a88:	f003 0306 	and.w	r3, r3, #6
 8013a8c:	b2db      	uxtb	r3, r3
 8013a8e:	4413      	add	r3, r2
 8013a90:	b2da      	uxtb	r2, r3
                                 (pConfig->stCanInput[nCanInputNum].nEnabled & 0x01);
 8013a92:	4b4c      	ldr	r3, [pc, #304]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	4618      	mov	r0, r3
 8013a98:	68f9      	ldr	r1, [r7, #12]
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	00db      	lsls	r3, r3, #3
 8013a9e:	1a1b      	subs	r3, r3, r0
 8013aa0:	009b      	lsls	r3, r3, #2
 8013aa2:	440b      	add	r3, r1
 8013aa4:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	f003 0301 	and.w	r3, r3, #1
 8013aae:	b2db      	uxtb	r3, r3
         stMsgUsbTx.nTxData[1] = ((pConfig->stCanInput[nCanInputNum].eOperator & 0x0F) << 4) + ((pConfig->stCanInput[nCanInputNum].eMode & 0x03) << 1) +
 8013ab0:	4413      	add	r3, r2
 8013ab2:	b2da      	uxtb	r2, r3
 8013ab4:	4b45      	ldr	r3, [pc, #276]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013ab6:	705a      	strb	r2, [r3, #1]
         stMsgUsbTx.nTxData[2] = nCanInputNum;
 8013ab8:	4b42      	ldr	r3, [pc, #264]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013aba:	781a      	ldrb	r2, [r3, #0]
 8013abc:	4b43      	ldr	r3, [pc, #268]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013abe:	709a      	strb	r2, [r3, #2]
         stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nId >> 8);
 8013ac0:	4b40      	ldr	r3, [pc, #256]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013ac2:	781b      	ldrb	r3, [r3, #0]
 8013ac4:	4619      	mov	r1, r3
 8013ac6:	68fa      	ldr	r2, [r7, #12]
 8013ac8:	460b      	mov	r3, r1
 8013aca:	00db      	lsls	r3, r3, #3
 8013acc:	1a5b      	subs	r3, r3, r1
 8013ace:	009b      	lsls	r3, r3, #2
 8013ad0:	4413      	add	r3, r2
 8013ad2:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8013ad6:	881b      	ldrh	r3, [r3, #0]
 8013ad8:	0a1b      	lsrs	r3, r3, #8
 8013ada:	b29b      	uxth	r3, r3
 8013adc:	b2da      	uxtb	r2, r3
 8013ade:	4b3b      	ldr	r3, [pc, #236]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013ae0:	70da      	strb	r2, [r3, #3]
         stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nId & 0xFF);
 8013ae2:	4b38      	ldr	r3, [pc, #224]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013ae4:	781b      	ldrb	r3, [r3, #0]
 8013ae6:	4619      	mov	r1, r3
 8013ae8:	68fa      	ldr	r2, [r7, #12]
 8013aea:	460b      	mov	r3, r1
 8013aec:	00db      	lsls	r3, r3, #3
 8013aee:	1a5b      	subs	r3, r3, r1
 8013af0:	009b      	lsls	r3, r3, #2
 8013af2:	4413      	add	r3, r2
 8013af4:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8013af8:	881b      	ldrh	r3, [r3, #0]
 8013afa:	b2da      	uxtb	r2, r3
 8013afc:	4b33      	ldr	r3, [pc, #204]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013afe:	711a      	strb	r2, [r3, #4]
         stMsgUsbTx.nTxData[5] = ((pConfig->stCanInput[nCanInputNum].nHighByte & 0xF) << 4) + (pConfig->stCanInput[nCanInputNum].nLowByte & 0xF);
 8013b00:	4b30      	ldr	r3, [pc, #192]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013b02:	781b      	ldrb	r3, [r3, #0]
 8013b04:	4619      	mov	r1, r3
 8013b06:	68fa      	ldr	r2, [r7, #12]
 8013b08:	460b      	mov	r3, r1
 8013b0a:	00db      	lsls	r3, r3, #3
 8013b0c:	1a5b      	subs	r3, r3, r1
 8013b0e:	009b      	lsls	r3, r3, #2
 8013b10:	4413      	add	r3, r2
 8013b12:	f203 5392 	addw	r3, r3, #1426	; 0x592
 8013b16:	881b      	ldrh	r3, [r3, #0]
 8013b18:	011b      	lsls	r3, r3, #4
 8013b1a:	b2da      	uxtb	r2, r3
 8013b1c:	4b29      	ldr	r3, [pc, #164]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013b1e:	781b      	ldrb	r3, [r3, #0]
 8013b20:	4618      	mov	r0, r3
 8013b22:	68f9      	ldr	r1, [r7, #12]
 8013b24:	4603      	mov	r3, r0
 8013b26:	00db      	lsls	r3, r3, #3
 8013b28:	1a1b      	subs	r3, r3, r0
 8013b2a:	009b      	lsls	r3, r3, #2
 8013b2c:	440b      	add	r3, r1
 8013b2e:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8013b32:	881b      	ldrh	r3, [r3, #0]
 8013b34:	b2db      	uxtb	r3, r3
 8013b36:	f003 030f 	and.w	r3, r3, #15
 8013b3a:	b2db      	uxtb	r3, r3
 8013b3c:	4413      	add	r3, r2
 8013b3e:	b2da      	uxtb	r2, r3
 8013b40:	4b22      	ldr	r3, [pc, #136]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013b42:	715a      	strb	r2, [r3, #5]
         stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nOnVal);
 8013b44:	4b1f      	ldr	r3, [pc, #124]	; (8013bc4 <PdmConfig_Set+0x161c>)
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	4619      	mov	r1, r3
 8013b4a:	68fa      	ldr	r2, [r7, #12]
 8013b4c:	460b      	mov	r3, r1
 8013b4e:	00db      	lsls	r3, r3, #3
 8013b50:	1a5b      	subs	r3, r3, r1
 8013b52:	009b      	lsls	r3, r3, #2
 8013b54:	4413      	add	r3, r2
 8013b56:	f203 5396 	addw	r3, r3, #1430	; 0x596
 8013b5a:	881b      	ldrh	r3, [r3, #0]
 8013b5c:	b2da      	uxtb	r2, r3
 8013b5e:	4b1b      	ldr	r3, [pc, #108]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013b60:	719a      	strb	r2, [r3, #6]
       }
    break;
 8013b62:	e043      	b.n	8013bec <PdmConfig_Set+0x1644>

    //Get Version
    // 'V'
    case MSG_RX_GET_VERSION:
      if(stMsgRx->nRxLen == 1){
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b6a:	2b01      	cmp	r3, #1
 8013b6c:	d140      	bne.n	8013bf0 <PdmConfig_Set+0x1648>
        nSend = 1;
 8013b6e:	4b16      	ldr	r3, [pc, #88]	; (8013bc8 <PdmConfig_Set+0x1620>)
 8013b70:	2201      	movs	r2, #1
 8013b72:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxLen = 5;
 8013b74:	4b15      	ldr	r3, [pc, #84]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013b76:	2205      	movs	r2, #5
 8013b78:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 8013b7a:	4b15      	ldr	r3, [pc, #84]	; (8013bd0 <PdmConfig_Set+0x1628>)
 8013b7c:	2205      	movs	r2, #5
 8013b7e:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_GET_VERSION;
 8013b80:	4b12      	ldr	r3, [pc, #72]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013b82:	2276      	movs	r2, #118	; 0x76
 8013b84:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (uint8_t)PDM_MAJOR_VERSION;
 8013b86:	4b11      	ldr	r3, [pc, #68]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013b88:	2203      	movs	r2, #3
 8013b8a:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)PDM_MINOR_VERSION;
 8013b8c:	4b0f      	ldr	r3, [pc, #60]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013b8e:	2200      	movs	r2, #0
 8013b90:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(PDM_BUILD >> 8);
 8013b92:	4b0e      	ldr	r3, [pc, #56]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013b94:	2200      	movs	r2, #0
 8013b96:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(PDM_BUILD & 0xFF);
 8013b98:	4b0c      	ldr	r3, [pc, #48]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8013b9e:	4b0b      	ldr	r3, [pc, #44]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8013ba4:	4b09      	ldr	r3, [pc, #36]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8013baa:	4b08      	ldr	r3, [pc, #32]	; (8013bcc <PdmConfig_Set+0x1624>)
 8013bac:	2200      	movs	r2, #0
 8013bae:	71da      	strb	r2, [r3, #7]
      }
    break;
 8013bb0:	e01e      	b.n	8013bf0 <PdmConfig_Set+0x1648>

    default:
      return 0;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	e03e      	b.n	8013c34 <PdmConfig_Set+0x168c>
    break;
 8013bb6:	bf00      	nop
 8013bb8:	e01b      	b.n	8013bf2 <PdmConfig_Set+0x164a>
    break;
 8013bba:	bf00      	nop
 8013bbc:	e019      	b.n	8013bf2 <PdmConfig_Set+0x164a>
    break;
 8013bbe:	bf00      	nop
 8013bc0:	e017      	b.n	8013bf2 <PdmConfig_Set+0x164a>
 8013bc2:	bf00      	nop
 8013bc4:	20004bed 	.word	0x20004bed
 8013bc8:	20004be8 	.word	0x20004be8
 8013bcc:	20004bbc 	.word	0x20004bbc
 8013bd0:	20004bc8 	.word	0x20004bc8
    break;
 8013bd4:	bf00      	nop
 8013bd6:	e00c      	b.n	8013bf2 <PdmConfig_Set+0x164a>
    break;
 8013bd8:	bf00      	nop
 8013bda:	e00a      	b.n	8013bf2 <PdmConfig_Set+0x164a>
    break;
 8013bdc:	bf00      	nop
 8013bde:	e008      	b.n	8013bf2 <PdmConfig_Set+0x164a>
    break;
 8013be0:	bf00      	nop
 8013be2:	e006      	b.n	8013bf2 <PdmConfig_Set+0x164a>
    break;
 8013be4:	bf00      	nop
 8013be6:	e004      	b.n	8013bf2 <PdmConfig_Set+0x164a>
    break;
 8013be8:	bf00      	nop
 8013bea:	e002      	b.n	8013bf2 <PdmConfig_Set+0x164a>
    break;
 8013bec:	bf00      	nop
 8013bee:	e000      	b.n	8013bf2 <PdmConfig_Set+0x164a>
    break;
 8013bf0:	bf00      	nop
    }

  if(nSend){
 8013bf2:	4b12      	ldr	r3, [pc, #72]	; (8013c3c <PdmConfig_Set+0x1694>)
 8013bf4:	781b      	ldrb	r3, [r3, #0]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d01b      	beq.n	8013c32 <PdmConfig_Set+0x168a>
    stMsgCanTx.stTxHeader.StdId = pConfig->stCanOutput.nBaseId + 20;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8013c00:	3314      	adds	r3, #20
 8013c02:	461a      	mov	r2, r3
 8013c04:	4b0e      	ldr	r3, [pc, #56]	; (8013c40 <PdmConfig_Set+0x1698>)
 8013c06:	601a      	str	r2, [r3, #0]

    memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8013c08:	4b0d      	ldr	r3, [pc, #52]	; (8013c40 <PdmConfig_Set+0x1698>)
 8013c0a:	4a0e      	ldr	r2, [pc, #56]	; (8013c44 <PdmConfig_Set+0x169c>)
 8013c0c:	3318      	adds	r3, #24
 8013c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013c12:	e883 0003 	stmia.w	r3, {r0, r1}

    osMessageQueuePut(*qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	6818      	ldr	r0, [r3, #0]
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	4909      	ldr	r1, [pc, #36]	; (8013c44 <PdmConfig_Set+0x169c>)
 8013c20:	f7f9 fd12 	bl	800d648 <osMessageQueuePut>
    osMessageQueuePut(*qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	6818      	ldr	r0, [r3, #0]
 8013c28:	2300      	movs	r3, #0
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	4904      	ldr	r1, [pc, #16]	; (8013c40 <PdmConfig_Set+0x1698>)
 8013c2e:	f7f9 fd0b 	bl	800d648 <osMessageQueuePut>
  }

  return 1;
 8013c32:	2301      	movs	r3, #1

}
 8013c34:	4618      	mov	r0, r3
 8013c36:	3710      	adds	r7, #16
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}
 8013c3c:	20004be8 	.word	0x20004be8
 8013c40:	20004bc8 	.word	0x20004bc8
 8013c44:	20004bbc 	.word	0x20004bbc

08013c48 <PdmConfig_SetDefault>:

void PdmConfig_SetDefault(PdmConfig_t* pConfig){
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
  //Device Configuration
  pConfig->stDevConfig.nVersion = 3;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2203      	movs	r2, #3
 8013c54:	701a      	strb	r2, [r3, #0]
  pConfig->stDevConfig.nCanEnabled = 1;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	2201      	movs	r2, #1
 8013c5a:	705a      	strb	r2, [r3, #1]
  pConfig->stDevConfig.nCanSpeed = 6;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2206      	movs	r2, #6
 8013c60:	709a      	strb	r2, [r3, #2]

  //Logging
  pConfig->stLogging.nUpdateTime = 1000;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013c68:	809a      	strh	r2, [r3, #4]

  //Inputs
  pConfig->stInput[0].nEnabled = 1;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	2201      	movs	r2, #1
 8013c6e:	721a      	strb	r2, [r3, #8]
  pConfig->stInput[0].eMode = MODE_MOMENTARY;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2201      	movs	r2, #1
 8013c74:	741a      	strb	r2, [r3, #16]
  pConfig->stInput[0].nOnLevel = 0;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	841a      	strh	r2, [r3, #32]
  pConfig->stInput[0].nDebounceTime = 20;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	2214      	movs	r2, #20
 8013c80:	845a      	strh	r2, [r3, #34]	; 0x22

  pConfig->stInput[1].nEnabled = 1;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	2201      	movs	r2, #1
 8013c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pConfig->stInput[1].eMode = MODE_MOMENTARY;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	2201      	movs	r2, #1
 8013c8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pConfig->stInput[1].nOnLevel = 0;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	2200      	movs	r2, #0
 8013c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  pConfig->stInput[1].nDebounceTime = 20;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2214      	movs	r2, #20
 8013c9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  pConfig->stInput[2].nEnabled = 1;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2201      	movs	r2, #1
 8013ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pConfig->stInput[2].eMode = MODE_MOMENTARY;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2201      	movs	r2, #1
 8013caa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  pConfig->stInput[2].nOnLevel = 0;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  pConfig->stInput[2].nDebounceTime = 20;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	2214      	movs	r2, #20
 8013cba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  pConfig->stInput[3].nEnabled = 1;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2201      	movs	r2, #1
 8013cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  pConfig->stInput[3].eMode = MODE_MOMENTARY;
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	2201      	movs	r2, #1
 8013cca:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  pConfig->stInput[3].nOnLevel = 0;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  pConfig->stInput[3].nDebounceTime = 20;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2214      	movs	r2, #20
 8013cda:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

  pConfig->stInput[4].nEnabled = 1;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2201      	movs	r2, #1
 8013ce2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  pConfig->stInput[4].eMode = MODE_MOMENTARY;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	2201      	movs	r2, #1
 8013cea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  pConfig->stInput[4].nOnLevel = 0;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  pConfig->stInput[4].nDebounceTime = 20;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2214      	movs	r2, #20
 8013cfa:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92

  pConfig->stInput[5].nEnabled = 1;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2201      	movs	r2, #1
 8013d02:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  pConfig->stInput[5].eMode = MODE_MOMENTARY;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2201      	movs	r2, #1
 8013d0a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  pConfig->stInput[5].nOnLevel = 0;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2200      	movs	r2, #0
 8013d12:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  pConfig->stInput[5].nDebounceTime = 20;
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	2214      	movs	r2, #20
 8013d1a:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

  pConfig->stInput[6].nEnabled = 1;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2201      	movs	r2, #1
 8013d22:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  pConfig->stInput[6].eMode = MODE_MOMENTARY;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	2201      	movs	r2, #1
 8013d2a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
  pConfig->stInput[6].nOnLevel = 0;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	2200      	movs	r2, #0
 8013d32:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
  pConfig->stInput[6].nDebounceTime = 20;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2214      	movs	r2, #20
 8013d3a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

  pConfig->stInput[7].nEnabled = 1;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2201      	movs	r2, #1
 8013d42:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  pConfig->stInput[7].eMode = MODE_MOMENTARY;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	2201      	movs	r2, #1
 8013d4a:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
  pConfig->stInput[7].nOnLevel = 0;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2200      	movs	r2, #0
 8013d52:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
  pConfig->stInput[7].nDebounceTime = 20;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	2214      	movs	r2, #20
 8013d5a:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6

  //Outputs
  pConfig->stOutput[0].nEnabled = 1;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2201      	movs	r2, #1
 8013d62:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
  pConfig->stOutput[0].nInput = 1;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2201      	movs	r2, #1
 8013d6a:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
  pConfig->stOutput[0].nCurrentLimit = 250;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	22fa      	movs	r2, #250	; 0xfa
 8013d72:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
  pConfig->stOutput[0].nInrushLimit = 300;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013d7c:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
  pConfig->stOutput[0].nInrushTime = 2000;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013d86:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
  pConfig->stOutput[0].eResetMode = RESET_ENDLESS;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2202      	movs	r2, #2
 8013d8e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
  pConfig->stOutput[0].nResetTime = 1000;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013d98:	f8a3 2418 	strh.w	r2, [r3, #1048]	; 0x418
  pConfig->stOutput[0].nResetLimit = 1;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2201      	movs	r2, #1
 8013da0:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a

  pConfig->stOutput[1].nEnabled = 1;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2201      	movs	r2, #1
 8013da8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
  pConfig->stOutput[1].nInput = 2;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2202      	movs	r2, #2
 8013db0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
  pConfig->stOutput[1].nCurrentLimit = 150;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2296      	movs	r2, #150	; 0x96
 8013db8:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
  pConfig->stOutput[1].nInrushLimit = 300;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013dc2:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
  pConfig->stOutput[1].nInrushTime = 2000;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013dcc:	f8a3 2428 	strh.w	r2, [r3, #1064]	; 0x428
  pConfig->stOutput[1].eResetMode = RESET_ENDLESS;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2202      	movs	r2, #2
 8013dd4:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
  pConfig->stOutput[1].nResetTime = 1000;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013dde:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
  pConfig->stOutput[1].nResetLimit = 2;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2202      	movs	r2, #2
 8013de6:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

  pConfig->stOutput[2].nEnabled = 1;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2201      	movs	r2, #1
 8013dee:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
  pConfig->stOutput[2].nInput = 3;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2203      	movs	r2, #3
 8013df6:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
  pConfig->stOutput[2].nCurrentLimit = 80;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	2250      	movs	r2, #80	; 0x50
 8013dfe:	f8a3 2438 	strh.w	r2, [r3, #1080]	; 0x438
  pConfig->stOutput[2].nInrushLimit = 160;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	22a0      	movs	r2, #160	; 0xa0
 8013e06:	f8a3 243a 	strh.w	r2, [r3, #1082]	; 0x43a
  pConfig->stOutput[2].nInrushTime = 2000;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013e10:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
  pConfig->stOutput[2].eResetMode = RESET_ENDLESS;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2202      	movs	r2, #2
 8013e18:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
  pConfig->stOutput[2].nResetTime = 1000;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013e22:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440
  pConfig->stOutput[2].nResetLimit = 3;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	2203      	movs	r2, #3
 8013e2a:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442

  pConfig->stOutput[3].nEnabled = 1;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	2201      	movs	r2, #1
 8013e32:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
  pConfig->stOutput[3].nInput = 4;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	2204      	movs	r2, #4
 8013e3a:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
  pConfig->stOutput[3].nCurrentLimit = 80;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2250      	movs	r2, #80	; 0x50
 8013e42:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
  pConfig->stOutput[3].nInrushLimit = 160;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	22a0      	movs	r2, #160	; 0xa0
 8013e4a:	f8a3 244e 	strh.w	r2, [r3, #1102]	; 0x44e
  pConfig->stOutput[3].nInrushTime = 2000;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013e54:	f8a3 2450 	strh.w	r2, [r3, #1104]	; 0x450
  pConfig->stOutput[3].eResetMode = RESET_ENDLESS;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2202      	movs	r2, #2
 8013e5c:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
  pConfig->stOutput[3].nResetTime = 1000;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013e66:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
  pConfig->stOutput[3].nResetLimit = 2;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2202      	movs	r2, #2
 8013e6e:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456

  pConfig->stOutput[4].nEnabled = 1;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2201      	movs	r2, #1
 8013e76:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
  pConfig->stOutput[4].nInput = 5;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2205      	movs	r2, #5
 8013e7e:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
  pConfig->stOutput[4].nCurrentLimit = 80;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	2250      	movs	r2, #80	; 0x50
 8013e86:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
  pConfig->stOutput[4].nInrushLimit = 160;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	22a0      	movs	r2, #160	; 0xa0
 8013e8e:	f8a3 2462 	strh.w	r2, [r3, #1122]	; 0x462
  pConfig->stOutput[4].nInrushTime = 2000;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013e98:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
  pConfig->stOutput[4].eResetMode = RESET_ENDLESS;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2202      	movs	r2, #2
 8013ea0:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
  pConfig->stOutput[4].nResetTime = 1000;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013eaa:	f8a3 2468 	strh.w	r2, [r3, #1128]	; 0x468
  pConfig->stOutput[4].nResetLimit = 2;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	2202      	movs	r2, #2
 8013eb2:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a

  pConfig->stOutput[5].nEnabled = 1;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2201      	movs	r2, #1
 8013eba:	f883 246c 	strb.w	r2, [r3, #1132]	; 0x46c
  pConfig->stOutput[5].nInput = 6;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2206      	movs	r2, #6
 8013ec2:	f883 246d 	strb.w	r2, [r3, #1133]	; 0x46d
  pConfig->stOutput[5].nCurrentLimit = 80;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2250      	movs	r2, #80	; 0x50
 8013eca:	f8a3 2474 	strh.w	r2, [r3, #1140]	; 0x474
  pConfig->stOutput[5].nInrushLimit = 160;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	22a0      	movs	r2, #160	; 0xa0
 8013ed2:	f8a3 2476 	strh.w	r2, [r3, #1142]	; 0x476
  pConfig->stOutput[5].nInrushTime = 2000;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013edc:	f8a3 2478 	strh.w	r2, [r3, #1144]	; 0x478
  pConfig->stOutput[5].eResetMode = RESET_ENDLESS;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2202      	movs	r2, #2
 8013ee4:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
  pConfig->stOutput[5].nResetTime = 1000;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013eee:	f8a3 247c 	strh.w	r2, [r3, #1148]	; 0x47c
  pConfig->stOutput[5].nResetLimit = 2;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	2202      	movs	r2, #2
 8013ef6:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e

  pConfig->stOutput[6].nEnabled = 1;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2201      	movs	r2, #1
 8013efe:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
  pConfig->stOutput[6].nInput = 7;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	2207      	movs	r2, #7
 8013f06:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
  pConfig->stOutput[6].nCurrentLimit = 150;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2296      	movs	r2, #150	; 0x96
 8013f0e:	f8a3 2488 	strh.w	r2, [r3, #1160]	; 0x488
  pConfig->stOutput[6].nInrushLimit = 300;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013f18:	f8a3 248a 	strh.w	r2, [r3, #1162]	; 0x48a
  pConfig->stOutput[6].nInrushTime = 2000;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013f22:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
  pConfig->stOutput[6].eResetMode = RESET_ENDLESS;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	2202      	movs	r2, #2
 8013f2a:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
  pConfig->stOutput[6].nResetTime = 1000;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013f34:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
  pConfig->stOutput[6].nResetLimit = 2;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2202      	movs	r2, #2
 8013f3c:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492

  pConfig->stOutput[7].nEnabled = 1;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2201      	movs	r2, #1
 8013f44:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  pConfig->stOutput[7].nInput = 8;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	2208      	movs	r2, #8
 8013f4c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
  pConfig->stOutput[7].nCurrentLimit = 150;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2296      	movs	r2, #150	; 0x96
 8013f54:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
  pConfig->stOutput[7].nInrushLimit = 300;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013f5e:	f8a3 249e 	strh.w	r2, [r3, #1182]	; 0x49e
  pConfig->stOutput[7].nInrushTime = 2000;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013f68:	f8a3 24a0 	strh.w	r2, [r3, #1184]	; 0x4a0
  pConfig->stOutput[7].eResetMode = RESET_ENDLESS;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2202      	movs	r2, #2
 8013f70:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
  pConfig->stOutput[7].nResetTime = 1000;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013f7a:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
  pConfig->stOutput[7].nResetLimit = 2;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	2202      	movs	r2, #2
 8013f82:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6

  pConfig->stOutput[8].nEnabled = 1;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2201      	movs	r2, #1
 8013f8a:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
  pConfig->stOutput[8].nInput = 1;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2201      	movs	r2, #1
 8013f92:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
  pConfig->stOutput[8].nCurrentLimit = 80;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2250      	movs	r2, #80	; 0x50
 8013f9a:	f8a3 24b0 	strh.w	r2, [r3, #1200]	; 0x4b0
  pConfig->stOutput[8].nInrushLimit = 160;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	22a0      	movs	r2, #160	; 0xa0
 8013fa2:	f8a3 24b2 	strh.w	r2, [r3, #1202]	; 0x4b2
  pConfig->stOutput[8].nInrushTime = 2000;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013fac:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
  pConfig->stOutput[8].eResetMode = RESET_ENDLESS;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2202      	movs	r2, #2
 8013fb4:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
  pConfig->stOutput[8].nResetTime = 1000;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013fbe:	f8a3 24b8 	strh.w	r2, [r3, #1208]	; 0x4b8
  pConfig->stOutput[8].nResetLimit = 2;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2202      	movs	r2, #2
 8013fc6:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba

  pConfig->stOutput[9].nEnabled = 1;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	2201      	movs	r2, #1
 8013fce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  pConfig->stOutput[9].nInput = 2;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2202      	movs	r2, #2
 8013fd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  pConfig->stOutput[9].nCurrentLimit = 80;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2250      	movs	r2, #80	; 0x50
 8013fde:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
  pConfig->stOutput[9].nInrushLimit = 160;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	22a0      	movs	r2, #160	; 0xa0
 8013fe6:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6
  pConfig->stOutput[9].nInrushTime = 2000;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013ff0:	f8a3 24c8 	strh.w	r2, [r3, #1224]	; 0x4c8
  pConfig->stOutput[9].eResetMode = RESET_ENDLESS;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2202      	movs	r2, #2
 8013ff8:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
  pConfig->stOutput[9].nResetTime = 1000;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014002:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
  pConfig->stOutput[9].nResetLimit = 2;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	2202      	movs	r2, #2
 801400a:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce

  pConfig->stOutput[10].nEnabled = 1;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2201      	movs	r2, #1
 8014012:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
  pConfig->stOutput[10].nInput = 7;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2207      	movs	r2, #7
 801401a:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
  pConfig->stOutput[10].nCurrentLimit = 80;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	2250      	movs	r2, #80	; 0x50
 8014022:	f8a3 24d8 	strh.w	r2, [r3, #1240]	; 0x4d8
  pConfig->stOutput[10].nInrushLimit = 160;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	22a0      	movs	r2, #160	; 0xa0
 801402a:	f8a3 24da 	strh.w	r2, [r3, #1242]	; 0x4da
  pConfig->stOutput[10].nInrushTime = 2000;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8014034:	f8a3 24dc 	strh.w	r2, [r3, #1244]	; 0x4dc
  pConfig->stOutput[10].eResetMode = RESET_ENDLESS;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2202      	movs	r2, #2
 801403c:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
  pConfig->stOutput[10].nResetTime = 1000;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014046:	f8a3 24e0 	strh.w	r2, [r3, #1248]	; 0x4e0
  pConfig->stOutput[10].nResetLimit = 2;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	2202      	movs	r2, #2
 801404e:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2

  pConfig->stOutput[11].nEnabled = 1;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2201      	movs	r2, #1
 8014056:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
  pConfig->stOutput[11].nInput = 8;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2208      	movs	r2, #8
 801405e:	f883 24e5 	strb.w	r2, [r3, #1253]	; 0x4e5
  pConfig->stOutput[11].nCurrentLimit = 80;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	2250      	movs	r2, #80	; 0x50
 8014066:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
  pConfig->stOutput[11].nInrushLimit = 160;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	22a0      	movs	r2, #160	; 0xa0
 801406e:	f8a3 24ee 	strh.w	r2, [r3, #1262]	; 0x4ee
  pConfig->stOutput[11].nInrushTime = 2000;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8014078:	f8a3 24f0 	strh.w	r2, [r3, #1264]	; 0x4f0
  pConfig->stOutput[11].eResetMode = RESET_ENDLESS;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	2202      	movs	r2, #2
 8014080:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
  pConfig->stOutput[11].nResetTime = 1000;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801408a:	f8a3 24f4 	strh.w	r2, [r3, #1268]	; 0x4f4
  pConfig->stOutput[11].nResetLimit = 2;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	2202      	movs	r2, #2
 8014092:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6

  //Virtual Inputs
  pConfig->stVirtualInput[0].nEnabled = 0;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2200      	movs	r2, #0
 801409a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
  pConfig->stVirtualInput[0].nNot0 = 0;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2200      	movs	r2, #0
 80140a2:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
  pConfig->stVirtualInput[0].nVar0 = 10;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	220a      	movs	r2, #10
 80140aa:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
  pConfig->stVirtualInput[0].eCond0 = COND_AND;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	2200      	movs	r2, #0
 80140b2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  pConfig->stVirtualInput[0].nNot1 = 1;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2201      	movs	r2, #1
 80140ba:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
  pConfig->stVirtualInput[0].nVar1 = 63;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	223f      	movs	r2, #63	; 0x3f
 80140c2:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
  pConfig->stVirtualInput[0].eCond1 = COND_OR;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2201      	movs	r2, #1
 80140ca:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
  pConfig->stVirtualInput[0].nNot2 = 0;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2200      	movs	r2, #0
 80140d2:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  pConfig->stVirtualInput[0].nVar2 = 0;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	2200      	movs	r2, #0
 80140da:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
  pConfig->stVirtualInput[0].eMode = MODE_LATCHING;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	2202      	movs	r2, #2
 80140e2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

  pConfig->stVirtualInput[1].nEnabled = 0;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2200      	movs	r2, #0
 80140ea:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
  pConfig->stVirtualInput[1].nNot0 = 0;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2200      	movs	r2, #0
 80140f2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  pConfig->stVirtualInput[1].nVar0 = 11;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	220b      	movs	r2, #11
 80140fa:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pConfig->stVirtualInput[1].eCond0 = COND_AND;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	2200      	movs	r2, #0
 8014102:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
  pConfig->stVirtualInput[1].nNot1 = 1;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2201      	movs	r2, #1
 801410a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  pConfig->stVirtualInput[1].nVar1 = 62;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	223e      	movs	r2, #62	; 0x3e
 8014112:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  pConfig->stVirtualInput[1].eCond1 = COND_OR;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	2201      	movs	r2, #1
 801411a:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
  pConfig->stVirtualInput[1].nNot2 = 0;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2200      	movs	r2, #0
 8014122:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
  pConfig->stVirtualInput[1].nVar2 = 0;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2200      	movs	r2, #0
 801412a:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
  pConfig->stVirtualInput[1].eMode = MODE_LATCHING;
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	2202      	movs	r2, #2
 8014132:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

  pConfig->stVirtualInput[2].nEnabled = 0;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2200      	movs	r2, #0
 801413a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
  pConfig->stVirtualInput[2].nNot0 = 0;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	2200      	movs	r2, #0
 8014142:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
  pConfig->stVirtualInput[2].nVar0 = 0;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2200      	movs	r2, #0
 801414a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
  pConfig->stVirtualInput[2].eCond0 = COND_AND;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	2200      	movs	r2, #0
 8014152:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  pConfig->stVirtualInput[2].nNot1 = 0;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2200      	movs	r2, #0
 801415a:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
  pConfig->stVirtualInput[2].nVar1 = 0;
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	2200      	movs	r2, #0
 8014162:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  pConfig->stVirtualInput[2].eCond1 = COND_OR;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	2201      	movs	r2, #1
 801416a:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
  pConfig->stVirtualInput[2].nNot2 = 0;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	2200      	movs	r2, #0
 8014172:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
  pConfig->stVirtualInput[2].nVar2 = 0;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	2200      	movs	r2, #0
 801417a:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
  pConfig->stVirtualInput[2].eMode = MODE_MOMENTARY;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	2201      	movs	r2, #1
 8014182:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

  pConfig->stVirtualInput[3].nEnabled = 0;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	2200      	movs	r2, #0
 801418a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  pConfig->stVirtualInput[3].nNot0 = 0;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2200      	movs	r2, #0
 8014192:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
  pConfig->stVirtualInput[3].nVar0 = 0;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2200      	movs	r2, #0
 801419a:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
  pConfig->stVirtualInput[3].eCond0 = COND_AND;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	2200      	movs	r2, #0
 80141a2:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  pConfig->stVirtualInput[3].nNot1 = 0;
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	2200      	movs	r2, #0
 80141aa:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  pConfig->stVirtualInput[3].nVar1 = 0;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2200      	movs	r2, #0
 80141b2:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
  pConfig->stVirtualInput[3].eCond1 = COND_OR;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	2201      	movs	r2, #1
 80141ba:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
  pConfig->stVirtualInput[3].nNot2 = 0;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2200      	movs	r2, #0
 80141c2:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
  pConfig->stVirtualInput[3].nVar2 = 0;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2200      	movs	r2, #0
 80141ca:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
  pConfig->stVirtualInput[3].eMode = MODE_MOMENTARY;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	2201      	movs	r2, #1
 80141d2:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

  pConfig->stVirtualInput[4].nEnabled = 0;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	2200      	movs	r2, #0
 80141da:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
  pConfig->stVirtualInput[4].nNot0 = 0;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	2200      	movs	r2, #0
 80141e2:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  pConfig->stVirtualInput[4].nVar0 = 0;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	2200      	movs	r2, #0
 80141ea:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  pConfig->stVirtualInput[4].eCond0 = COND_AND;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	2200      	movs	r2, #0
 80141f2:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
  pConfig->stVirtualInput[4].nNot1 = 0;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	2200      	movs	r2, #0
 80141fa:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
  pConfig->stVirtualInput[4].nVar1 = 0;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2200      	movs	r2, #0
 8014202:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
  pConfig->stVirtualInput[4].eCond1 = COND_OR;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	2201      	movs	r2, #1
 801420a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
  pConfig->stVirtualInput[4].nNot2 = 0;
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	2200      	movs	r2, #0
 8014212:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
  pConfig->stVirtualInput[4].nVar2 = 0;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	2200      	movs	r2, #0
 801421a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
  pConfig->stVirtualInput[4].eMode = MODE_MOMENTARY;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	2201      	movs	r2, #1
 8014222:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0

  pConfig->stVirtualInput[5].nEnabled = 0;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2200      	movs	r2, #0
 801422a:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
  pConfig->stVirtualInput[5].nNot0 = 0;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	2200      	movs	r2, #0
 8014232:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
  pConfig->stVirtualInput[5].nVar0 = 0;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	2200      	movs	r2, #0
 801423a:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
  pConfig->stVirtualInput[5].eCond0 = COND_AND;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	2200      	movs	r2, #0
 8014242:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
  pConfig->stVirtualInput[5].nNot1 = 0;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	2200      	movs	r2, #0
 801424a:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
  pConfig->stVirtualInput[5].nVar1 = 0;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2200      	movs	r2, #0
 8014252:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  pConfig->stVirtualInput[5].eCond1 = COND_OR;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	2201      	movs	r2, #1
 801425a:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
  pConfig->stVirtualInput[5].nNot2 = 0;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2200      	movs	r2, #0
 8014262:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  pConfig->stVirtualInput[5].nVar2 = 0;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	2200      	movs	r2, #0
 801426a:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
  pConfig->stVirtualInput[5].eMode = MODE_MOMENTARY;
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2201      	movs	r2, #1
 8014272:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

  pConfig->stVirtualInput[6].nEnabled = 0;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2200      	movs	r2, #0
 801427a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
  pConfig->stVirtualInput[6].nNot0 = 0;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	2200      	movs	r2, #0
 8014282:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
  pConfig->stVirtualInput[6].nVar0 = 0;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	2200      	movs	r2, #0
 801428a:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
  pConfig->stVirtualInput[6].eCond0 = COND_AND;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	2200      	movs	r2, #0
 8014292:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
  pConfig->stVirtualInput[6].nNot1 = 0;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2200      	movs	r2, #0
 801429a:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
  pConfig->stVirtualInput[6].nVar1 = 0;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	2200      	movs	r2, #0
 80142a2:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
  pConfig->stVirtualInput[6].eCond1 = COND_OR;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	2201      	movs	r2, #1
 80142aa:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
  pConfig->stVirtualInput[6].nNot2 = 0;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2200      	movs	r2, #0
 80142b2:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
  pConfig->stVirtualInput[6].nVar2 = 0;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2200      	movs	r2, #0
 80142ba:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
  pConfig->stVirtualInput[6].eMode = MODE_MOMENTARY;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2201      	movs	r2, #1
 80142c2:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0

  pConfig->stVirtualInput[7].nEnabled = 0;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	2200      	movs	r2, #0
 80142ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  pConfig->stVirtualInput[7].nNot0 = 0;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	2200      	movs	r2, #0
 80142d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  pConfig->stVirtualInput[7].nVar0 = 0;
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	2200      	movs	r2, #0
 80142da:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
  pConfig->stVirtualInput[7].eCond0 = COND_AND;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2200      	movs	r2, #0
 80142e2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
  pConfig->stVirtualInput[7].nNot1 = 0;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2200      	movs	r2, #0
 80142ea:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
  pConfig->stVirtualInput[7].nVar1 = 0;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2200      	movs	r2, #0
 80142f2:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
  pConfig->stVirtualInput[7].eCond1 = COND_OR;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2201      	movs	r2, #1
 80142fa:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
  pConfig->stVirtualInput[7].nNot2 = 0;
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	2200      	movs	r2, #0
 8014302:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  pConfig->stVirtualInput[7].nVar2 = 0;
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2200      	movs	r2, #0
 801430a:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
  pConfig->stVirtualInput[7].eMode = MODE_MOMENTARY;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2201      	movs	r2, #1
 8014312:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

  pConfig->stVirtualInput[8].nEnabled = 0;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2200      	movs	r2, #0
 801431a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  pConfig->stVirtualInput[8].nNot0 = 0;
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	2200      	movs	r2, #0
 8014322:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  pConfig->stVirtualInput[8].nVar0 = 0;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	2200      	movs	r2, #0
 801432a:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
  pConfig->stVirtualInput[8].eCond0 = COND_AND;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	2200      	movs	r2, #0
 8014332:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
  pConfig->stVirtualInput[8].nNot1 = 0;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2200      	movs	r2, #0
 801433a:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
  pConfig->stVirtualInput[8].nVar1 = 0;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	2200      	movs	r2, #0
 8014342:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
  pConfig->stVirtualInput[8].eCond1 = COND_OR;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2201      	movs	r2, #1
 801434a:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  pConfig->stVirtualInput[8].nNot2 = 0;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	2200      	movs	r2, #0
 8014352:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
  pConfig->stVirtualInput[8].nVar2 = 0;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	2200      	movs	r2, #0
 801435a:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
  pConfig->stVirtualInput[8].eMode = MODE_MOMENTARY;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	2201      	movs	r2, #1
 8014362:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

  pConfig->stVirtualInput[9].nEnabled = 0;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	2200      	movs	r2, #0
 801436a:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
  pConfig->stVirtualInput[9].nNot0 = 0;
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	2200      	movs	r2, #0
 8014372:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
  pConfig->stVirtualInput[9].nVar0 = 0;
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	2200      	movs	r2, #0
 801437a:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
  pConfig->stVirtualInput[9].eCond0 = COND_AND;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2200      	movs	r2, #0
 8014382:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
  pConfig->stVirtualInput[9].nNot1 = 0;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2200      	movs	r2, #0
 801438a:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
  pConfig->stVirtualInput[9].nVar1 = 0;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2200      	movs	r2, #0
 8014392:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
  pConfig->stVirtualInput[9].eCond1 = COND_OR;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	2201      	movs	r2, #1
 801439a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  pConfig->stVirtualInput[9].nNot2 = 0;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2200      	movs	r2, #0
 80143a2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  pConfig->stVirtualInput[9].nVar2 = 0;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2200      	movs	r2, #0
 80143aa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  pConfig->stVirtualInput[9].eMode = MODE_MOMENTARY;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2201      	movs	r2, #1
 80143b2:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268

  pConfig->stVirtualInput[10].nEnabled = 0;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2200      	movs	r2, #0
 80143ba:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
  pConfig->stVirtualInput[10].nNot0 = 0;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2200      	movs	r2, #0
 80143c2:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
  pConfig->stVirtualInput[10].nVar0 = 0;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	2200      	movs	r2, #0
 80143ca:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
  pConfig->stVirtualInput[10].eCond0 = COND_AND;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2200      	movs	r2, #0
 80143d2:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
  pConfig->stVirtualInput[10].nNot1 = 0;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2200      	movs	r2, #0
 80143da:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
  pConfig->stVirtualInput[10].nVar1 = 0;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2200      	movs	r2, #0
 80143e2:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
  pConfig->stVirtualInput[10].eCond1 = COND_OR;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2201      	movs	r2, #1
 80143ea:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
  pConfig->stVirtualInput[10].nNot2 = 0;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	2200      	movs	r2, #0
 80143f2:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
  pConfig->stVirtualInput[10].nVar2 = 0;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	2200      	movs	r2, #0
 80143fa:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
  pConfig->stVirtualInput[10].eMode = MODE_MOMENTARY;
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2201      	movs	r2, #1
 8014402:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  pConfig->stVirtualInput[11].nEnabled = 0;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2200      	movs	r2, #0
 801440a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
  pConfig->stVirtualInput[11].nNot0 = 0;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2200      	movs	r2, #0
 8014412:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
  pConfig->stVirtualInput[11].nVar0 = 0;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	2200      	movs	r2, #0
 801441a:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
  pConfig->stVirtualInput[11].eCond0 = COND_AND;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2200      	movs	r2, #0
 8014422:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  pConfig->stVirtualInput[11].nNot1 = 0;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2200      	movs	r2, #0
 801442a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  pConfig->stVirtualInput[11].nVar1 = 0;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	2200      	movs	r2, #0
 8014432:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
  pConfig->stVirtualInput[11].eCond1 = COND_OR;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	2201      	movs	r2, #1
 801443a:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
  pConfig->stVirtualInput[11].nNot2 = 0;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	2200      	movs	r2, #0
 8014442:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
  pConfig->stVirtualInput[11].nVar2 = 0;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2200      	movs	r2, #0
 801444a:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
  pConfig->stVirtualInput[11].eMode = MODE_MOMENTARY;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	2201      	movs	r2, #1
 8014452:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  pConfig->stVirtualInput[12].nEnabled = 0;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2200      	movs	r2, #0
 801445a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
  pConfig->stVirtualInput[12].nNot0 = 0;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	2200      	movs	r2, #0
 8014462:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
  pConfig->stVirtualInput[12].nVar0 = 0;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2200      	movs	r2, #0
 801446a:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
  pConfig->stVirtualInput[12].eCond0 = COND_AND;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	2200      	movs	r2, #0
 8014472:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
  pConfig->stVirtualInput[12].nNot1 = 0;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2200      	movs	r2, #0
 801447a:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
  pConfig->stVirtualInput[12].nVar1 = 0;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	2200      	movs	r2, #0
 8014482:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
  pConfig->stVirtualInput[12].eCond1 = COND_OR;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	2201      	movs	r2, #1
 801448a:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
  pConfig->stVirtualInput[12].nNot2 = 0;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2200      	movs	r2, #0
 8014492:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
  pConfig->stVirtualInput[12].nVar2 = 0;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2200      	movs	r2, #0
 801449a:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
  pConfig->stVirtualInput[12].eMode = MODE_MOMENTARY;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2201      	movs	r2, #1
 80144a2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  pConfig->stVirtualInput[13].nEnabled = 0;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2200      	movs	r2, #0
 80144aa:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
  pConfig->stVirtualInput[13].nNot0 = 0;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2200      	movs	r2, #0
 80144b2:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
  pConfig->stVirtualInput[13].nVar0 = 0;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	2200      	movs	r2, #0
 80144ba:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
  pConfig->stVirtualInput[13].eCond0 = COND_AND;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	2200      	movs	r2, #0
 80144c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  pConfig->stVirtualInput[13].nNot1 = 0;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	2200      	movs	r2, #0
 80144ca:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
  pConfig->stVirtualInput[13].nVar1 = 0;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	2200      	movs	r2, #0
 80144d2:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
  pConfig->stVirtualInput[13].eCond1 = COND_OR;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2201      	movs	r2, #1
 80144da:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  pConfig->stVirtualInput[13].nNot2 = 0;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2200      	movs	r2, #0
 80144e2:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
  pConfig->stVirtualInput[13].nVar2 = 0;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2200      	movs	r2, #0
 80144ea:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
  pConfig->stVirtualInput[13].eMode = MODE_MOMENTARY;
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	2201      	movs	r2, #1
 80144f2:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308

  pConfig->stVirtualInput[14].nEnabled = 0;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	2200      	movs	r2, #0
 80144fa:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  pConfig->stVirtualInput[14].nNot0 = 0;
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	2200      	movs	r2, #0
 8014502:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  pConfig->stVirtualInput[14].nVar0 = 0;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	2200      	movs	r2, #0
 801450a:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
  pConfig->stVirtualInput[14].eCond0 = COND_AND;
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2200      	movs	r2, #0
 8014512:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  pConfig->stVirtualInput[14].nNot1 = 0;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2200      	movs	r2, #0
 801451a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  pConfig->stVirtualInput[14].nVar1 = 0;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2200      	movs	r2, #0
 8014522:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  pConfig->stVirtualInput[14].eCond1 = COND_OR;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	2201      	movs	r2, #1
 801452a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  pConfig->stVirtualInput[14].nNot2 = 0;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2200      	movs	r2, #0
 8014532:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
  pConfig->stVirtualInput[14].nVar2 = 0;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	2200      	movs	r2, #0
 801453a:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
  pConfig->stVirtualInput[14].eMode = MODE_MOMENTARY;
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2201      	movs	r2, #1
 8014542:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330

  pConfig->stVirtualInput[15].nEnabled = 0;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	2200      	movs	r2, #0
 801454a:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
  pConfig->stVirtualInput[15].nNot0 = 0;
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	2200      	movs	r2, #0
 8014552:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
  pConfig->stVirtualInput[15].nVar0 = 0;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2200      	movs	r2, #0
 801455a:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
  pConfig->stVirtualInput[15].eCond0 = COND_AND;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	2200      	movs	r2, #0
 8014562:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
  pConfig->stVirtualInput[15].nNot1 = 0;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	2200      	movs	r2, #0
 801456a:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
  pConfig->stVirtualInput[15].nVar1 = 0;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	2200      	movs	r2, #0
 8014572:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
  pConfig->stVirtualInput[15].eCond1 = COND_OR;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2201      	movs	r2, #1
 801457a:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
  pConfig->stVirtualInput[15].nNot2 = 0;
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2200      	movs	r2, #0
 8014582:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
  pConfig->stVirtualInput[15].nVar2 = 0;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	2200      	movs	r2, #0
 801458a:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
  pConfig->stVirtualInput[15].eMode = MODE_MOMENTARY;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	2201      	movs	r2, #1
 8014592:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

  pConfig->stVirtualInput[16].nEnabled = 0;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	2200      	movs	r2, #0
 801459a:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
  pConfig->stVirtualInput[16].nNot0 = 0;
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	2200      	movs	r2, #0
 80145a2:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
  pConfig->stVirtualInput[16].nVar0 = 0;
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	2200      	movs	r2, #0
 80145aa:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
  pConfig->stVirtualInput[16].eCond0 = COND_AND;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	2200      	movs	r2, #0
 80145b2:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  pConfig->stVirtualInput[16].nNot1 = 0;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	2200      	movs	r2, #0
 80145ba:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
  pConfig->stVirtualInput[16].nVar1 = 0;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	2200      	movs	r2, #0
 80145c2:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
  pConfig->stVirtualInput[16].eCond1 = COND_OR;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2201      	movs	r2, #1
 80145ca:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
  pConfig->stVirtualInput[16].nNot2 = 0;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2200      	movs	r2, #0
 80145d2:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
  pConfig->stVirtualInput[16].nVar2 = 0;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	2200      	movs	r2, #0
 80145da:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
  pConfig->stVirtualInput[16].eMode = MODE_MOMENTARY;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	2201      	movs	r2, #1
 80145e2:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380

  pConfig->stVirtualInput[17].nEnabled = 0;
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	2200      	movs	r2, #0
 80145ea:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
  pConfig->stVirtualInput[17].nNot0 = 0;
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	2200      	movs	r2, #0
 80145f2:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
  pConfig->stVirtualInput[17].nVar0 = 0;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2200      	movs	r2, #0
 80145fa:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
  pConfig->stVirtualInput[17].eCond0 = COND_AND;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2200      	movs	r2, #0
 8014602:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
  pConfig->stVirtualInput[17].nNot1 = 0;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2200      	movs	r2, #0
 801460a:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
  pConfig->stVirtualInput[17].nVar1 = 0;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	2200      	movs	r2, #0
 8014612:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
  pConfig->stVirtualInput[17].eCond1 = COND_OR;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	2201      	movs	r2, #1
 801461a:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
  pConfig->stVirtualInput[17].nNot2 = 0;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	2200      	movs	r2, #0
 8014622:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
  pConfig->stVirtualInput[17].nVar2 = 0;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	2200      	movs	r2, #0
 801462a:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
  pConfig->stVirtualInput[17].eMode = MODE_MOMENTARY;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	2201      	movs	r2, #1
 8014632:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8

  pConfig->stVirtualInput[18].nEnabled = 0;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	2200      	movs	r2, #0
 801463a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  pConfig->stVirtualInput[18].nNot0 = 0;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	2200      	movs	r2, #0
 8014642:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  pConfig->stVirtualInput[18].nVar0 = 0;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	2200      	movs	r2, #0
 801464a:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
  pConfig->stVirtualInput[18].eCond0 = COND_AND;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	2200      	movs	r2, #0
 8014652:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
  pConfig->stVirtualInput[18].nNot1 = 0;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	2200      	movs	r2, #0
 801465a:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
  pConfig->stVirtualInput[18].nVar1 = 0;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	2200      	movs	r2, #0
 8014662:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
  pConfig->stVirtualInput[18].eCond1 = COND_OR;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2201      	movs	r2, #1
 801466a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
  pConfig->stVirtualInput[18].nNot2 = 0;
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	2200      	movs	r2, #0
 8014672:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
  pConfig->stVirtualInput[18].nVar2 = 0;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	2200      	movs	r2, #0
 801467a:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
  pConfig->stVirtualInput[18].eMode = MODE_MOMENTARY;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	2201      	movs	r2, #1
 8014682:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0

  pConfig->stVirtualInput[19].nEnabled = 0;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	2200      	movs	r2, #0
 801468a:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
  pConfig->stVirtualInput[19].nNot0 = 0;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2200      	movs	r2, #0
 8014692:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
  pConfig->stVirtualInput[19].nVar0 = 0;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2200      	movs	r2, #0
 801469a:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
  pConfig->stVirtualInput[19].eCond0 = COND_AND;
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	2200      	movs	r2, #0
 80146a2:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  pConfig->stVirtualInput[19].nNot1 = 0;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2200      	movs	r2, #0
 80146aa:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
  pConfig->stVirtualInput[19].nVar1 = 0;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	2200      	movs	r2, #0
 80146b2:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
  pConfig->stVirtualInput[19].eCond1 = COND_OR;
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2201      	movs	r2, #1
 80146ba:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
  pConfig->stVirtualInput[19].nNot2 = 0;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	2200      	movs	r2, #0
 80146c2:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
  pConfig->stVirtualInput[19].nVar2 = 0;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2200      	movs	r2, #0
 80146ca:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
  pConfig->stVirtualInput[19].eMode = MODE_MOMENTARY;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	2201      	movs	r2, #1
 80146d2:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8

  //Wiper
  pConfig->stWiper.nEnabled = 0;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	2200      	movs	r2, #0
 80146da:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
  pConfig->stWiper.nMode = 2;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	2202      	movs	r2, #2
 80146e2:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
  pConfig->stWiper.nSlowInput = 0;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2200      	movs	r2, #0
 80146ea:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
  pConfig->stWiper.nFastInput = 0;
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	2200      	movs	r2, #0
 80146f2:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
  pConfig->stWiper.nInterInput = 0;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	2200      	movs	r2, #0
 80146fa:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
  pConfig->stWiper.nOnInput = 15;
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	220f      	movs	r2, #15
 8014702:	f883 24fd 	strb.w	r2, [r3, #1277]	; 0x4fd
  pConfig->stWiper.nSpeedInput = 7;
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	2207      	movs	r2, #7
 801470a:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
  pConfig->stWiper.nParkInput = 1;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	2201      	movs	r2, #1
 8014712:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
  pConfig->stWiper.nParkStopLevel = 0;
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2200      	movs	r2, #0
 801471a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  pConfig->stWiper.nSwipeInput = 4;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	2204      	movs	r2, #4
 8014722:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
  pConfig->stWiper.nWashInput = 14;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	220e      	movs	r2, #14
 801472a:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
  pConfig->stWiper.nWashWipeCycles = 2;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	2202      	movs	r2, #2
 8014732:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
  pConfig->stWiper.nSpeedMap[0] = 3;
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2203      	movs	r2, #3
 801473a:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
  pConfig->stWiper.nSpeedMap[1] = 4;
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2204      	movs	r2, #4
 8014742:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
  pConfig->stWiper.nSpeedMap[2] = 5;
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	2205      	movs	r2, #5
 801474a:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
  pConfig->stWiper.nSpeedMap[3] = 6;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	2206      	movs	r2, #6
 8014752:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
  pConfig->stWiper.nSpeedMap[4] = 7;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	2207      	movs	r2, #7
 801475a:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
  pConfig->stWiper.nSpeedMap[5] = 8;
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	2208      	movs	r2, #8
 8014762:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
  pConfig->stWiper.nSpeedMap[6] = 1;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2201      	movs	r2, #1
 801476a:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
  pConfig->stWiper.nSpeedMap[7] = 2;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2202      	movs	r2, #2
 8014772:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
  pConfig->stWiper.nIntermitTime[0] = 1000;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801477c:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
  pConfig->stWiper.nIntermitTime[1] = 2000;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8014786:	f8a3 250e 	strh.w	r2, [r3, #1294]	; 0x50e
  pConfig->stWiper.nIntermitTime[2] = 3000;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8014790:	f8a3 2510 	strh.w	r2, [r3, #1296]	; 0x510
  pConfig->stWiper.nIntermitTime[3] = 4000;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801479a:	f8a3 2512 	strh.w	r2, [r3, #1298]	; 0x512
  pConfig->stWiper.nIntermitTime[4] = 5000;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80147a4:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
  pConfig->stWiper.nIntermitTime[5] = 6000;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f241 7270 	movw	r2, #6000	; 0x1770
 80147ae:	f8a3 2516 	strh.w	r2, [r3, #1302]	; 0x516

  //Flasher
  pConfig->stFlasher[0].nEnabled = 1;
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	2201      	movs	r2, #1
 80147b6:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
  pConfig->stFlasher[0].nInput = 7;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2207      	movs	r2, #7
 80147be:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
  pConfig->stFlasher[0].nFlashOnTime = 500;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80147c8:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
  pConfig->stFlasher[0].nFlashOffTime = 500;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80147d2:	f8a3 2522 	strh.w	r2, [r3, #1314]	; 0x522
  pConfig->stFlasher[0].nSingleCycle = 0;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2200      	movs	r2, #0
 80147da:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
  pConfig->stFlasher[0].nOutput = 10;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	220a      	movs	r2, #10
 80147e2:	f883 2525 	strb.w	r2, [r3, #1317]	; 0x525

  pConfig->stFlasher[1].nEnabled = 1;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	2201      	movs	r2, #1
 80147ea:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
  pConfig->stFlasher[1].nInput = 8;
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	2208      	movs	r2, #8
 80147f2:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
  pConfig->stFlasher[1].nFlashOnTime = 250;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	22fa      	movs	r2, #250	; 0xfa
 80147fa:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
  pConfig->stFlasher[1].nFlashOffTime = 250;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	22fa      	movs	r2, #250	; 0xfa
 8014802:	f8a3 253a 	strh.w	r2, [r3, #1338]	; 0x53a
  pConfig->stFlasher[1].nSingleCycle = 0;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2200      	movs	r2, #0
 801480a:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
  pConfig->stFlasher[1].nOutput = 11;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	220b      	movs	r2, #11
 8014812:	f883 253d 	strb.w	r2, [r3, #1341]	; 0x53d

  pConfig->stFlasher[2].nEnabled = 0;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	2200      	movs	r2, #0
 801481a:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
  pConfig->stFlasher[2].nInput = 0;
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2200      	movs	r2, #0
 8014822:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
  pConfig->stFlasher[2].nFlashOnTime = 0;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	2200      	movs	r2, #0
 801482a:	f8a3 2550 	strh.w	r2, [r3, #1360]	; 0x550
  pConfig->stFlasher[2].nFlashOffTime = 0;
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	2200      	movs	r2, #0
 8014832:	f8a3 2552 	strh.w	r2, [r3, #1362]	; 0x552
  pConfig->stFlasher[2].nSingleCycle = 0;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2200      	movs	r2, #0
 801483a:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
  pConfig->stFlasher[2].nOutput = 0;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	2200      	movs	r2, #0
 8014842:	f883 2555 	strb.w	r2, [r3, #1365]	; 0x555

  pConfig->stFlasher[3].nEnabled = 0;
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	2200      	movs	r2, #0
 801484a:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
  pConfig->stFlasher[3].nInput = 0;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2200      	movs	r2, #0
 8014852:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
  pConfig->stFlasher[3].nFlashOnTime = 0;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	2200      	movs	r2, #0
 801485a:	f8a3 2568 	strh.w	r2, [r3, #1384]	; 0x568
  pConfig->stFlasher[3].nFlashOffTime = 0;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2200      	movs	r2, #0
 8014862:	f8a3 256a 	strh.w	r2, [r3, #1386]	; 0x56a
  pConfig->stFlasher[3].nSingleCycle = 0;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	2200      	movs	r2, #0
 801486a:	f883 256c 	strb.w	r2, [r3, #1388]	; 0x56c
  pConfig->stFlasher[3].nOutput = 0;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	2200      	movs	r2, #0
 8014872:	f883 256d 	strb.w	r2, [r3, #1389]	; 0x56d

  //Starter
  pConfig->stStarter.nEnabled = 0;
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	2200      	movs	r2, #0
 801487a:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
  pConfig->stStarter.nInput = 8;
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2208      	movs	r2, #8
 8014882:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
  pConfig->stStarter.nDisableOut[0] = 0;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	2200      	movs	r2, #0
 801488a:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
  pConfig->stStarter.nDisableOut[1] = 1;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2201      	movs	r2, #1
 8014892:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
  pConfig->stStarter.nDisableOut[2] = 0;
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	2200      	movs	r2, #0
 801489a:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
  pConfig->stStarter.nDisableOut[3] = 0;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	2200      	movs	r2, #0
 80148a2:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
  pConfig->stStarter.nDisableOut[4] = 0;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	2200      	movs	r2, #0
 80148aa:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
  pConfig->stStarter.nDisableOut[5] = 0;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	2200      	movs	r2, #0
 80148b2:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
  pConfig->stStarter.nDisableOut[6] = 0;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2200      	movs	r2, #0
 80148ba:	f883 2586 	strb.w	r2, [r3, #1414]	; 0x586
  pConfig->stStarter.nDisableOut[7] = 0;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	2200      	movs	r2, #0
 80148c2:	f883 2587 	strb.w	r2, [r3, #1415]	; 0x587
  pConfig->stStarter.nDisableOut[8] = 0;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2200      	movs	r2, #0
 80148ca:	f883 2588 	strb.w	r2, [r3, #1416]	; 0x588
  pConfig->stStarter.nDisableOut[9] = 0;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2200      	movs	r2, #0
 80148d2:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
  pConfig->stStarter.nDisableOut[10] = 0;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	2200      	movs	r2, #0
 80148da:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
  pConfig->stStarter.nDisableOut[11] = 0;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2200      	movs	r2, #0
 80148e2:	f883 258b 	strb.w	r2, [r3, #1419]	; 0x58b

  //CAN Input
  pConfig->stCanInput[0].nEnabled = 1;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	2201      	movs	r2, #1
 80148ea:	f883 258c 	strb.w	r2, [r3, #1420]	; 0x58c
  pConfig->stCanInput[0].nId = 1602;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f240 6242 	movw	r2, #1602	; 0x642
 80148f4:	f8a3 258e 	strh.w	r2, [r3, #1422]	; 0x58e
  pConfig->stCanInput[0].nLowByte = 0;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2200      	movs	r2, #0
 80148fc:	f8a3 2590 	strh.w	r2, [r3, #1424]	; 0x590
  pConfig->stCanInput[0].nHighByte = 0;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2200      	movs	r2, #0
 8014904:	f8a3 2592 	strh.w	r2, [r3, #1426]	; 0x592
  pConfig->stCanInput[0].eOperator = OPER_BITWISE_AND;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2203      	movs	r2, #3
 801490c:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
  pConfig->stCanInput[0].nOnVal = 0xF;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	220f      	movs	r2, #15
 8014914:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
  pConfig->stCanInput[0].eMode = MODE_NUM;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2200      	movs	r2, #0
 801491c:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598

  pConfig->stCanInput[1].nEnabled = 1;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2201      	movs	r2, #1
 8014924:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
  pConfig->stCanInput[1].nId = 1602;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f240 6242 	movw	r2, #1602	; 0x642
 801492e:	f8a3 25aa 	strh.w	r2, [r3, #1450]	; 0x5aa
  pConfig->stCanInput[1].nLowByte = 4;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	2204      	movs	r2, #4
 8014936:	f8a3 25ac 	strh.w	r2, [r3, #1452]	; 0x5ac
  pConfig->stCanInput[1].nHighByte = 0;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	2200      	movs	r2, #0
 801493e:	f8a3 25ae 	strh.w	r2, [r3, #1454]	; 0x5ae
  pConfig->stCanInput[1].eOperator = OPER_BITWISE_AND;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	2203      	movs	r2, #3
 8014946:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
  pConfig->stCanInput[1].nOnVal = 0x1;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	2201      	movs	r2, #1
 801494e:	f8a3 25b2 	strh.w	r2, [r3, #1458]	; 0x5b2
  pConfig->stCanInput[1].eMode = MODE_MOMENTARY;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2201      	movs	r2, #1
 8014956:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4

  pConfig->stCanInput[2].nEnabled = 1;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2201      	movs	r2, #1
 801495e:	f883 25c4 	strb.w	r2, [r3, #1476]	; 0x5c4
  pConfig->stCanInput[2].nId = 1602;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f240 6242 	movw	r2, #1602	; 0x642
 8014968:	f8a3 25c6 	strh.w	r2, [r3, #1478]	; 0x5c6
  pConfig->stCanInput[2].nLowByte = 4;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2204      	movs	r2, #4
 8014970:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
  pConfig->stCanInput[2].nHighByte = 0;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2200      	movs	r2, #0
 8014978:	f8a3 25ca 	strh.w	r2, [r3, #1482]	; 0x5ca
  pConfig->stCanInput[2].eOperator = OPER_BITWISE_AND;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2203      	movs	r2, #3
 8014980:	f883 25cc 	strb.w	r2, [r3, #1484]	; 0x5cc
  pConfig->stCanInput[2].nOnVal = 0x2;
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	2202      	movs	r2, #2
 8014988:	f8a3 25ce 	strh.w	r2, [r3, #1486]	; 0x5ce
  pConfig->stCanInput[2].eMode = MODE_MOMENTARY;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2201      	movs	r2, #1
 8014990:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0

  pConfig->stCanInput[3].nEnabled = 1;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2201      	movs	r2, #1
 8014998:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
  pConfig->stCanInput[3].nId = 1602;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	f240 6242 	movw	r2, #1602	; 0x642
 80149a2:	f8a3 25e2 	strh.w	r2, [r3, #1506]	; 0x5e2
  pConfig->stCanInput[3].nLowByte = 4;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	2204      	movs	r2, #4
 80149aa:	f8a3 25e4 	strh.w	r2, [r3, #1508]	; 0x5e4
  pConfig->stCanInput[3].nHighByte = 0;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	2200      	movs	r2, #0
 80149b2:	f8a3 25e6 	strh.w	r2, [r3, #1510]	; 0x5e6
  pConfig->stCanInput[3].eOperator = OPER_BITWISE_AND;
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	2203      	movs	r2, #3
 80149ba:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
  pConfig->stCanInput[3].nOnVal = 0x4;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2204      	movs	r2, #4
 80149c2:	f8a3 25ea 	strh.w	r2, [r3, #1514]	; 0x5ea
  pConfig->stCanInput[3].eMode = MODE_MOMENTARY;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2201      	movs	r2, #1
 80149ca:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec

  pConfig->stCanInput[4].nEnabled = 1;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2201      	movs	r2, #1
 80149d2:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
  pConfig->stCanInput[4].nId = 1602;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f240 6242 	movw	r2, #1602	; 0x642
 80149dc:	f8a3 25fe 	strh.w	r2, [r3, #1534]	; 0x5fe
  pConfig->stCanInput[4].nLowByte = 4;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2204      	movs	r2, #4
 80149e4:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
  pConfig->stCanInput[4].nHighByte = 0;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2200      	movs	r2, #0
 80149ec:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
  pConfig->stCanInput[4].eOperator = OPER_BITWISE_AND;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2203      	movs	r2, #3
 80149f4:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
  pConfig->stCanInput[4].nOnVal = 0x8;
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2208      	movs	r2, #8
 80149fc:	f8a3 2606 	strh.w	r2, [r3, #1542]	; 0x606
  pConfig->stCanInput[4].eMode = MODE_MOMENTARY;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2201      	movs	r2, #1
 8014a04:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608

  pConfig->stCanInput[5].nEnabled = 1;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	2201      	movs	r2, #1
 8014a0c:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
  pConfig->stCanInput[5].nId = 1602;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f240 6242 	movw	r2, #1602	; 0x642
 8014a16:	f8a3 261a 	strh.w	r2, [r3, #1562]	; 0x61a
  pConfig->stCanInput[5].nLowByte = 4;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2204      	movs	r2, #4
 8014a1e:	f8a3 261c 	strh.w	r2, [r3, #1564]	; 0x61c
  pConfig->stCanInput[5].nHighByte = 0;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2200      	movs	r2, #0
 8014a26:	f8a3 261e 	strh.w	r2, [r3, #1566]	; 0x61e
  pConfig->stCanInput[5].eOperator = OPER_BITWISE_AND;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	2203      	movs	r2, #3
 8014a2e:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
  pConfig->stCanInput[5].nOnVal = 0x10;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	2210      	movs	r2, #16
 8014a36:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
  pConfig->stCanInput[5].eMode = MODE_LATCHING;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	2202      	movs	r2, #2
 8014a3e:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

  pConfig->stCanInput[6].nEnabled = 1;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	2201      	movs	r2, #1
 8014a46:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
  pConfig->stCanInput[6].nId = 1602;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	f240 6242 	movw	r2, #1602	; 0x642
 8014a50:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
  pConfig->stCanInput[6].nLowByte = 4;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2204      	movs	r2, #4
 8014a58:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
  pConfig->stCanInput[6].nHighByte = 0;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2200      	movs	r2, #0
 8014a60:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
  pConfig->stCanInput[6].eOperator = OPER_BITWISE_AND;
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	2203      	movs	r2, #3
 8014a68:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
  pConfig->stCanInput[6].nOnVal = 0x20;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2220      	movs	r2, #32
 8014a70:	f8a3 263e 	strh.w	r2, [r3, #1598]	; 0x63e
  pConfig->stCanInput[6].eMode = MODE_LATCHING;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	2202      	movs	r2, #2
 8014a78:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

  pConfig->stCanInput[7].nEnabled = 1;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2201      	movs	r2, #1
 8014a80:	f883 2650 	strb.w	r2, [r3, #1616]	; 0x650
  pConfig->stCanInput[7].nId = 1602;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	f240 6242 	movw	r2, #1602	; 0x642
 8014a8a:	f8a3 2652 	strh.w	r2, [r3, #1618]	; 0x652
  pConfig->stCanInput[7].nLowByte = 4;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	2204      	movs	r2, #4
 8014a92:	f8a3 2654 	strh.w	r2, [r3, #1620]	; 0x654
  pConfig->stCanInput[7].nHighByte = 0;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	f8a3 2656 	strh.w	r2, [r3, #1622]	; 0x656
  pConfig->stCanInput[7].eOperator = OPER_BITWISE_AND;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	2203      	movs	r2, #3
 8014aa2:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
  pConfig->stCanInput[7].nOnVal = 0x40;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	2240      	movs	r2, #64	; 0x40
 8014aaa:	f8a3 265a 	strh.w	r2, [r3, #1626]	; 0x65a
  pConfig->stCanInput[7].eMode = MODE_MOMENTARY;
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	2201      	movs	r2, #1
 8014ab2:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c

  pConfig->stCanInput[8].nEnabled = 1;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	2201      	movs	r2, #1
 8014aba:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
  pConfig->stCanInput[8].nId = 1602;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	f240 6242 	movw	r2, #1602	; 0x642
 8014ac4:	f8a3 266e 	strh.w	r2, [r3, #1646]	; 0x66e
  pConfig->stCanInput[8].nLowByte = 4;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	2204      	movs	r2, #4
 8014acc:	f8a3 2670 	strh.w	r2, [r3, #1648]	; 0x670
  pConfig->stCanInput[8].nHighByte = 0;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	f8a3 2672 	strh.w	r2, [r3, #1650]	; 0x672
  pConfig->stCanInput[8].eOperator = OPER_BITWISE_AND;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2203      	movs	r2, #3
 8014adc:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
  pConfig->stCanInput[8].nOnVal = 0x80;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2280      	movs	r2, #128	; 0x80
 8014ae4:	f8a3 2676 	strh.w	r2, [r3, #1654]	; 0x676
  pConfig->stCanInput[8].eMode = MODE_LATCHING;
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2202      	movs	r2, #2
 8014aec:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678

  pConfig->stCanInput[9].nEnabled = 1;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	2201      	movs	r2, #1
 8014af4:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
  pConfig->stCanInput[9].nId = 1620;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f240 6254 	movw	r2, #1620	; 0x654
 8014afe:	f8a3 268a 	strh.w	r2, [r3, #1674]	; 0x68a
  pConfig->stCanInput[9].nLowByte = 4;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2204      	movs	r2, #4
 8014b06:	f8a3 268c 	strh.w	r2, [r3, #1676]	; 0x68c
  pConfig->stCanInput[9].nHighByte = 5;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	2205      	movs	r2, #5
 8014b0e:	f8a3 268e 	strh.w	r2, [r3, #1678]	; 0x68e
  pConfig->stCanInput[9].eOperator = OPER_EQUAL;
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	2200      	movs	r2, #0
 8014b16:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
  pConfig->stCanInput[9].nOnVal = 1;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	f8a3 2692 	strh.w	r2, [r3, #1682]	; 0x692
  pConfig->stCanInput[9].eMode = MODE_NUM;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2200      	movs	r2, #0
 8014b26:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694

  pConfig->stCanInput[10].nEnabled = 1;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	2201      	movs	r2, #1
 8014b2e:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
  pConfig->stCanInput[10].nId = 1620;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	f240 6254 	movw	r2, #1620	; 0x654
 8014b38:	f8a3 26a6 	strh.w	r2, [r3, #1702]	; 0x6a6
  pConfig->stCanInput[10].nLowByte = 2;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2202      	movs	r2, #2
 8014b40:	f8a3 26a8 	strh.w	r2, [r3, #1704]	; 0x6a8
  pConfig->stCanInput[10].nHighByte = 3;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2203      	movs	r2, #3
 8014b48:	f8a3 26aa 	strh.w	r2, [r3, #1706]	; 0x6aa
  pConfig->stCanInput[10].eOperator = OPER_EQUAL;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
  pConfig->stCanInput[10].nOnVal = 1;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	2201      	movs	r2, #1
 8014b58:	f8a3 26ae 	strh.w	r2, [r3, #1710]	; 0x6ae
  pConfig->stCanInput[10].eMode = MODE_NUM;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	2200      	movs	r2, #0
 8014b60:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0

  pConfig->stCanInput[11].nEnabled = 1;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	2201      	movs	r2, #1
 8014b68:	f883 26c0 	strb.w	r2, [r3, #1728]	; 0x6c0
  pConfig->stCanInput[11].nId = 1620;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f240 6254 	movw	r2, #1620	; 0x654
 8014b72:	f8a3 26c2 	strh.w	r2, [r3, #1730]	; 0x6c2
  pConfig->stCanInput[11].nLowByte = 0;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	2200      	movs	r2, #0
 8014b7a:	f8a3 26c4 	strh.w	r2, [r3, #1732]	; 0x6c4
  pConfig->stCanInput[11].nHighByte = 1;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2201      	movs	r2, #1
 8014b82:	f8a3 26c6 	strh.w	r2, [r3, #1734]	; 0x6c6
  pConfig->stCanInput[11].eOperator = OPER_EQUAL;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	f883 26c8 	strb.w	r2, [r3, #1736]	; 0x6c8
  pConfig->stCanInput[11].nOnVal = 1;
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2201      	movs	r2, #1
 8014b92:	f8a3 26ca 	strh.w	r2, [r3, #1738]	; 0x6ca
  pConfig->stCanInput[11].eMode = MODE_NUM;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2200      	movs	r2, #0
 8014b9a:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc

  pConfig->stCanInput[12].nEnabled = 1;
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	2201      	movs	r2, #1
 8014ba2:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
  pConfig->stCanInput[12].nId = 1620;
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f240 6254 	movw	r2, #1620	; 0x654
 8014bac:	f8a3 26de 	strh.w	r2, [r3, #1758]	; 0x6de
  pConfig->stCanInput[12].nLowByte = 6;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	2206      	movs	r2, #6
 8014bb4:	f8a3 26e0 	strh.w	r2, [r3, #1760]	; 0x6e0
  pConfig->stCanInput[12].nHighByte = 7;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	2207      	movs	r2, #7
 8014bbc:	f8a3 26e2 	strh.w	r2, [r3, #1762]	; 0x6e2
  pConfig->stCanInput[12].eOperator = OPER_EQUAL;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
  pConfig->stCanInput[12].nOnVal = 1;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2201      	movs	r2, #1
 8014bcc:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
  pConfig->stCanInput[12].eMode = MODE_NUM;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8

  pConfig->stCanInput[13].nEnabled = 1;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	2201      	movs	r2, #1
 8014bdc:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
  pConfig->stCanInput[13].nId = 1621;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f240 6255 	movw	r2, #1621	; 0x655
 8014be6:	f8a3 26fa 	strh.w	r2, [r3, #1786]	; 0x6fa
  pConfig->stCanInput[13].nLowByte = 0;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	2200      	movs	r2, #0
 8014bee:	f8a3 26fc 	strh.w	r2, [r3, #1788]	; 0x6fc
  pConfig->stCanInput[13].nHighByte = 1;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	2201      	movs	r2, #1
 8014bf6:	f8a3 26fe 	strh.w	r2, [r3, #1790]	; 0x6fe
  pConfig->stCanInput[13].eOperator = OPER_EQUAL;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
  pConfig->stCanInput[13].nOnVal = 1;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	2201      	movs	r2, #1
 8014c06:	f8a3 2702 	strh.w	r2, [r3, #1794]	; 0x702
  pConfig->stCanInput[13].eMode = MODE_NUM;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704

  pConfig->stCanInput[14].nEnabled = 1;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2201      	movs	r2, #1
 8014c16:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
  pConfig->stCanInput[14].nId = 1621;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	f240 6255 	movw	r2, #1621	; 0x655
 8014c20:	f8a3 2716 	strh.w	r2, [r3, #1814]	; 0x716
  pConfig->stCanInput[14].nLowByte = 2;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2202      	movs	r2, #2
 8014c28:	f8a3 2718 	strh.w	r2, [r3, #1816]	; 0x718
  pConfig->stCanInput[14].nHighByte = 3;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2203      	movs	r2, #3
 8014c30:	f8a3 271a 	strh.w	r2, [r3, #1818]	; 0x71a
  pConfig->stCanInput[14].eOperator = OPER_EQUAL;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2200      	movs	r2, #0
 8014c38:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
  pConfig->stCanInput[14].nOnVal = 1;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2201      	movs	r2, #1
 8014c40:	f8a3 271e 	strh.w	r2, [r3, #1822]	; 0x71e
  pConfig->stCanInput[14].eMode = MODE_NUM;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2200      	movs	r2, #0
 8014c48:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720

  pConfig->stCanInput[15].nEnabled = 1;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2201      	movs	r2, #1
 8014c50:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
  pConfig->stCanInput[15].nId = 1622;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	f240 6256 	movw	r2, #1622	; 0x656
 8014c5a:	f8a3 2732 	strh.w	r2, [r3, #1842]	; 0x732
  pConfig->stCanInput[15].nLowByte = 0;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2200      	movs	r2, #0
 8014c62:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
  pConfig->stCanInput[15].nHighByte = 0;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	f8a3 2736 	strh.w	r2, [r3, #1846]	; 0x736
  pConfig->stCanInput[15].eOperator = OPER_BITWISE_AND;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	2203      	movs	r2, #3
 8014c72:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
  pConfig->stCanInput[15].nOnVal = 0x01;
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	2201      	movs	r2, #1
 8014c7a:	f8a3 273a 	strh.w	r2, [r3, #1850]	; 0x73a
  pConfig->stCanInput[15].eMode = MODE_MOMENTARY;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	2201      	movs	r2, #1
 8014c82:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c

  pConfig->stCanInput[16].nEnabled = 1;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2201      	movs	r2, #1
 8014c8a:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
  pConfig->stCanInput[16].nId = 1622;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	f240 6256 	movw	r2, #1622	; 0x656
 8014c94:	f8a3 274e 	strh.w	r2, [r3, #1870]	; 0x74e
  pConfig->stCanInput[16].nLowByte = 0;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	f8a3 2750 	strh.w	r2, [r3, #1872]	; 0x750
  pConfig->stCanInput[16].nHighByte = 0;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	f8a3 2752 	strh.w	r2, [r3, #1874]	; 0x752
  pConfig->stCanInput[16].eOperator = OPER_BITWISE_AND;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2203      	movs	r2, #3
 8014cac:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
  pConfig->stCanInput[16].nOnVal = 0x02;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2202      	movs	r2, #2
 8014cb4:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
  pConfig->stCanInput[16].eMode = MODE_MOMENTARY;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	2201      	movs	r2, #1
 8014cbc:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758

  pConfig->stCanInput[17].nEnabled = 1;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	2201      	movs	r2, #1
 8014cc4:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
  pConfig->stCanInput[17].nId = 1622;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f240 6256 	movw	r2, #1622	; 0x656
 8014cce:	f8a3 276a 	strh.w	r2, [r3, #1898]	; 0x76a
  pConfig->stCanInput[17].nLowByte = 0;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	f8a3 276c 	strh.w	r2, [r3, #1900]	; 0x76c
  pConfig->stCanInput[17].nHighByte = 0;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2200      	movs	r2, #0
 8014cde:	f8a3 276e 	strh.w	r2, [r3, #1902]	; 0x76e
  pConfig->stCanInput[17].eOperator = OPER_BITWISE_AND;
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	2203      	movs	r2, #3
 8014ce6:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
  pConfig->stCanInput[17].nOnVal = 0x04;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2204      	movs	r2, #4
 8014cee:	f8a3 2772 	strh.w	r2, [r3, #1906]	; 0x772
  pConfig->stCanInput[17].eMode = MODE_MOMENTARY;
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	2201      	movs	r2, #1
 8014cf6:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774

  pConfig->stCanInput[18].nEnabled = 1;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2201      	movs	r2, #1
 8014cfe:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
  pConfig->stCanInput[18].nId = 1622;
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f240 6256 	movw	r2, #1622	; 0x656
 8014d08:	f8a3 2786 	strh.w	r2, [r3, #1926]	; 0x786
  pConfig->stCanInput[18].nLowByte = 0;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	f8a3 2788 	strh.w	r2, [r3, #1928]	; 0x788
  pConfig->stCanInput[18].nHighByte = 0;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2200      	movs	r2, #0
 8014d18:	f8a3 278a 	strh.w	r2, [r3, #1930]	; 0x78a
  pConfig->stCanInput[18].eOperator = OPER_BITWISE_AND;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	2203      	movs	r2, #3
 8014d20:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
  pConfig->stCanInput[18].nOnVal = 0x08;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	2208      	movs	r2, #8
 8014d28:	f8a3 278e 	strh.w	r2, [r3, #1934]	; 0x78e
  pConfig->stCanInput[18].eMode = MODE_MOMENTARY;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	2201      	movs	r2, #1
 8014d30:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790

  pConfig->stCanInput[19].nEnabled = 1;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	2201      	movs	r2, #1
 8014d38:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
  pConfig->stCanInput[19].nId = 1622;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	f240 6256 	movw	r2, #1622	; 0x656
 8014d42:	f8a3 27a2 	strh.w	r2, [r3, #1954]	; 0x7a2
  pConfig->stCanInput[19].nLowByte = 0;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2200      	movs	r2, #0
 8014d4a:	f8a3 27a4 	strh.w	r2, [r3, #1956]	; 0x7a4
  pConfig->stCanInput[19].nHighByte = 0;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	2200      	movs	r2, #0
 8014d52:	f8a3 27a6 	strh.w	r2, [r3, #1958]	; 0x7a6
  pConfig->stCanInput[19].eOperator = OPER_BITWISE_AND;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	2203      	movs	r2, #3
 8014d5a:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
  pConfig->stCanInput[19].nOnVal = 0x10;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	2210      	movs	r2, #16
 8014d62:	f8a3 27aa 	strh.w	r2, [r3, #1962]	; 0x7aa
  pConfig->stCanInput[19].eMode = MODE_MOMENTARY;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2201      	movs	r2, #1
 8014d6a:	f883 27ac 	strb.w	r2, [r3, #1964]	; 0x7ac

  pConfig->stCanInput[20].nEnabled = 1;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2201      	movs	r2, #1
 8014d72:	f883 27bc 	strb.w	r2, [r3, #1980]	; 0x7bc
  pConfig->stCanInput[20].nId = 1622;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	f240 6256 	movw	r2, #1622	; 0x656
 8014d7c:	f8a3 27be 	strh.w	r2, [r3, #1982]	; 0x7be
  pConfig->stCanInput[20].nLowByte = 0;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2200      	movs	r2, #0
 8014d84:	f8a3 27c0 	strh.w	r2, [r3, #1984]	; 0x7c0
  pConfig->stCanInput[20].nHighByte = 0;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	f8a3 27c2 	strh.w	r2, [r3, #1986]	; 0x7c2
  pConfig->stCanInput[20].eOperator = OPER_BITWISE_AND;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	2203      	movs	r2, #3
 8014d94:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
  pConfig->stCanInput[20].nOnVal = 0x20;
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	2220      	movs	r2, #32
 8014d9c:	f8a3 27c6 	strh.w	r2, [r3, #1990]	; 0x7c6
  pConfig->stCanInput[20].eMode = MODE_MOMENTARY;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2201      	movs	r2, #1
 8014da4:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8

  pConfig->stCanInput[21].nEnabled = 1;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2201      	movs	r2, #1
 8014dac:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
  pConfig->stCanInput[21].nId = 1622;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f240 6256 	movw	r2, #1622	; 0x656
 8014db6:	f8a3 27da 	strh.w	r2, [r3, #2010]	; 0x7da
  pConfig->stCanInput[21].nLowByte = 0;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	f8a3 27dc 	strh.w	r2, [r3, #2012]	; 0x7dc
  pConfig->stCanInput[21].nHighByte = 0;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	f8a3 27de 	strh.w	r2, [r3, #2014]	; 0x7de
  pConfig->stCanInput[21].eOperator = OPER_BITWISE_AND;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	2203      	movs	r2, #3
 8014dce:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
  pConfig->stCanInput[21].nOnVal = 0x40;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	2240      	movs	r2, #64	; 0x40
 8014dd6:	f8a3 27e2 	strh.w	r2, [r3, #2018]	; 0x7e2
  pConfig->stCanInput[21].eMode = MODE_MOMENTARY;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	2201      	movs	r2, #1
 8014dde:	f883 27e4 	strb.w	r2, [r3, #2020]	; 0x7e4

  pConfig->stCanInput[22].nEnabled = 1;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	2201      	movs	r2, #1
 8014de6:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
  pConfig->stCanInput[22].nId = 1622;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	f240 6256 	movw	r2, #1622	; 0x656
 8014df0:	f8a3 27f6 	strh.w	r2, [r3, #2038]	; 0x7f6
  pConfig->stCanInput[22].nLowByte = 0;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2200      	movs	r2, #0
 8014df8:	f8a3 27f8 	strh.w	r2, [r3, #2040]	; 0x7f8
  pConfig->stCanInput[22].nHighByte = 0;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	f8a3 27fa 	strh.w	r2, [r3, #2042]	; 0x7fa
  pConfig->stCanInput[22].eOperator = OPER_BITWISE_AND;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2203      	movs	r2, #3
 8014e08:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
  pConfig->stCanInput[22].nOnVal = 0x80;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	2280      	movs	r2, #128	; 0x80
 8014e10:	f8a3 27fe 	strh.w	r2, [r3, #2046]	; 0x7fe
  pConfig->stCanInput[22].eMode = MODE_MOMENTARY;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	2201      	movs	r2, #1
 8014e18:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800

  pConfig->stCanInput[23].nEnabled = 1;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	2201      	movs	r2, #1
 8014e20:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
  pConfig->stCanInput[23].nId = 1622;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f240 6256 	movw	r2, #1622	; 0x656
 8014e2a:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
  pConfig->stCanInput[23].nLowByte = 1;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2201      	movs	r2, #1
 8014e32:	f8a3 2814 	strh.w	r2, [r3, #2068]	; 0x814
  pConfig->stCanInput[23].nHighByte = 0;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	2200      	movs	r2, #0
 8014e3a:	f8a3 2816 	strh.w	r2, [r3, #2070]	; 0x816
  pConfig->stCanInput[23].eOperator = OPER_BITWISE_AND;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2203      	movs	r2, #3
 8014e42:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
  pConfig->stCanInput[23].nOnVal = 0x01;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	2201      	movs	r2, #1
 8014e4a:	f8a3 281a 	strh.w	r2, [r3, #2074]	; 0x81a
  pConfig->stCanInput[23].eMode = MODE_MOMENTARY;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	2201      	movs	r2, #1
 8014e52:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c

  pConfig->stCanInput[24].nEnabled = 1;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	2201      	movs	r2, #1
 8014e5a:	f883 282c 	strb.w	r2, [r3, #2092]	; 0x82c
  pConfig->stCanInput[24].nId = 1622;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	f240 6256 	movw	r2, #1622	; 0x656
 8014e64:	f8a3 282e 	strh.w	r2, [r3, #2094]	; 0x82e
  pConfig->stCanInput[24].nLowByte = 1;
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2201      	movs	r2, #1
 8014e6c:	f8a3 2830 	strh.w	r2, [r3, #2096]	; 0x830
  pConfig->stCanInput[24].nHighByte = 0;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	2200      	movs	r2, #0
 8014e74:	f8a3 2832 	strh.w	r2, [r3, #2098]	; 0x832
  pConfig->stCanInput[24].eOperator = OPER_BITWISE_AND;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	2203      	movs	r2, #3
 8014e7c:	f883 2834 	strb.w	r2, [r3, #2100]	; 0x834
  pConfig->stCanInput[24].nOnVal = 0x02;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	2202      	movs	r2, #2
 8014e84:	f8a3 2836 	strh.w	r2, [r3, #2102]	; 0x836
  pConfig->stCanInput[24].eMode = MODE_MOMENTARY;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838

  pConfig->stCanInput[25].nEnabled = 0;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2200      	movs	r2, #0
 8014e94:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
  pConfig->stCanInput[25].nId = 0;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	f8a3 284a 	strh.w	r2, [r3, #2122]	; 0x84a
  pConfig->stCanInput[25].nLowByte = 0;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	f8a3 284c 	strh.w	r2, [r3, #2124]	; 0x84c
  pConfig->stCanInput[25].nHighByte = 0;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2200      	movs	r2, #0
 8014eac:	f8a3 284e 	strh.w	r2, [r3, #2126]	; 0x84e
  pConfig->stCanInput[25].eOperator = OPER_EQUAL;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
  pConfig->stCanInput[25].nOnVal = 0;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2200      	movs	r2, #0
 8014ebc:	f8a3 2852 	strh.w	r2, [r3, #2130]	; 0x852
  pConfig->stCanInput[25].eMode = MODE_MOMENTARY;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	2201      	movs	r2, #1
 8014ec4:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854

  pConfig->stCanInput[26].nEnabled = 0;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	2200      	movs	r2, #0
 8014ecc:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
  pConfig->stCanInput[26].nId = 0;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	f8a3 2866 	strh.w	r2, [r3, #2150]	; 0x866
  pConfig->stCanInput[26].nLowByte = 0;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	2200      	movs	r2, #0
 8014edc:	f8a3 2868 	strh.w	r2, [r3, #2152]	; 0x868
  pConfig->stCanInput[26].nHighByte = 0;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	f8a3 286a 	strh.w	r2, [r3, #2154]	; 0x86a
  pConfig->stCanInput[26].eOperator = OPER_EQUAL;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2200      	movs	r2, #0
 8014eec:	f883 286c 	strb.w	r2, [r3, #2156]	; 0x86c
  pConfig->stCanInput[26].nOnVal = 0;
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	f8a3 286e 	strh.w	r2, [r3, #2158]	; 0x86e
  pConfig->stCanInput[26].eMode = MODE_MOMENTARY;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	2201      	movs	r2, #1
 8014efc:	f883 2870 	strb.w	r2, [r3, #2160]	; 0x870

  pConfig->stCanInput[27].nEnabled = 0;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2200      	movs	r2, #0
 8014f04:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
  pConfig->stCanInput[27].nId = 0;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	f8a3 2882 	strh.w	r2, [r3, #2178]	; 0x882
  pConfig->stCanInput[27].nLowByte = 0;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	2200      	movs	r2, #0
 8014f14:	f8a3 2884 	strh.w	r2, [r3, #2180]	; 0x884
  pConfig->stCanInput[27].nHighByte = 0;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	f8a3 2886 	strh.w	r2, [r3, #2182]	; 0x886
  pConfig->stCanInput[27].eOperator = OPER_EQUAL;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2200      	movs	r2, #0
 8014f24:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
  pConfig->stCanInput[27].nOnVal = 0;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	f8a3 288a 	strh.w	r2, [r3, #2186]	; 0x88a
  pConfig->stCanInput[27].eMode = MODE_MOMENTARY;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	2201      	movs	r2, #1
 8014f34:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c

  pConfig->stCanInput[28].nEnabled = 0;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
  pConfig->stCanInput[28].nId = 0;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2200      	movs	r2, #0
 8014f44:	f8a3 289e 	strh.w	r2, [r3, #2206]	; 0x89e
  pConfig->stCanInput[28].nLowByte = 0;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	f8a3 28a0 	strh.w	r2, [r3, #2208]	; 0x8a0
  pConfig->stCanInput[28].nHighByte = 0;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2200      	movs	r2, #0
 8014f54:	f8a3 28a2 	strh.w	r2, [r3, #2210]	; 0x8a2
  pConfig->stCanInput[28].eOperator = OPER_EQUAL;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
  pConfig->stCanInput[28].nOnVal = 0;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	2200      	movs	r2, #0
 8014f64:	f8a3 28a6 	strh.w	r2, [r3, #2214]	; 0x8a6
  pConfig->stCanInput[28].eMode = MODE_MOMENTARY;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	2201      	movs	r2, #1
 8014f6c:	f883 28a8 	strb.w	r2, [r3, #2216]	; 0x8a8

  pConfig->stCanInput[29].nEnabled = 0;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2200      	movs	r2, #0
 8014f74:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
  pConfig->stCanInput[29].nId = 0;
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	f8a3 28ba 	strh.w	r2, [r3, #2234]	; 0x8ba
  pConfig->stCanInput[29].nLowByte = 0;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	2200      	movs	r2, #0
 8014f84:	f8a3 28bc 	strh.w	r2, [r3, #2236]	; 0x8bc
  pConfig->stCanInput[29].nHighByte = 0;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	f8a3 28be 	strh.w	r2, [r3, #2238]	; 0x8be
  pConfig->stCanInput[29].eOperator = OPER_EQUAL;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	2200      	movs	r2, #0
 8014f94:	f883 28c0 	strb.w	r2, [r3, #2240]	; 0x8c0
  pConfig->stCanInput[29].nOnVal = 0;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	f8a3 28c2 	strh.w	r2, [r3, #2242]	; 0x8c2
  pConfig->stCanInput[29].eMode = MODE_MOMENTARY;
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	2201      	movs	r2, #1
 8014fa4:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4

  //CAN Output
  pConfig->stCanOutput.nEnabled = 0;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	2200      	movs	r2, #0
 8014fac:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
  pConfig->stCanOutput.nBaseId = 2000;
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8014fb6:	f8a3 28d6 	strh.w	r2, [r3, #2262]	; 0x8d6
  pConfig->stCanOutput.nUpdateTime = 50;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2232      	movs	r2, #50	; 0x32
 8014fbe:	f8a3 28d8 	strh.w	r2, [r3, #2264]	; 0x8d8
}
 8014fc2:	bf00      	nop
 8014fc4:	370c      	adds	r7, #12
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fcc:	4770      	bx	lr

08014fce <EvaluateInput>:
 */

#include "pdm_input.h"

void EvaluateInput(PdmConfig_Input_t *pIn, uint16_t* pResult)
{
 8014fce:	b580      	push	{r7, lr}
 8014fd0:	b086      	sub	sp, #24
 8014fd2:	af02      	add	r7, sp, #8
 8014fd4:	6078      	str	r0, [r7, #4]
 8014fd6:	6039      	str	r1, [r7, #0]
  if(!pIn->nEnabled)
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	781b      	ldrb	r3, [r3, #0]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d018      	beq.n	8015012 <EvaluateInput+0x44>
    return;

  uint16_t nLogicResult;

  nLogicResult = *pIn->pInput > pIn->nOnLevel;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	685b      	ldr	r3, [r3, #4]
 8014fe4:	781b      	ldrb	r3, [r3, #0]
 8014fe6:	b29a      	uxth	r2, r3
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	8b1b      	ldrh	r3, [r3, #24]
 8014fec:	429a      	cmp	r2, r3
 8014fee:	bf8c      	ite	hi
 8014ff0:	2301      	movhi	r3, #1
 8014ff2:	2300      	movls	r3, #0
 8014ff4:	b2db      	uxtb	r3, r3
 8014ff6:	81fb      	strh	r3, [r7, #14]

  CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nLogicResult, pResult, pIn->nDebounceTime);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f103 000c 	add.w	r0, r3, #12
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	7a19      	ldrb	r1, [r3, #8]
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	8b5b      	ldrh	r3, [r3, #26]
 8015006:	89fa      	ldrh	r2, [r7, #14]
 8015008:	9300      	str	r3, [sp, #0]
 801500a:	683b      	ldr	r3, [r7, #0]
 801500c:	f000 f805 	bl	801501a <CheckPushbutton>
 8015010:	e000      	b.n	8015014 <EvaluateInput+0x46>
    return;
 8015012:	bf00      	nop
}
 8015014:	3710      	adds	r7, #16
 8015016:	46bd      	mov	sp, r7
 8015018:	bd80      	pop	{r7, pc}

0801501a <CheckPushbutton>:
 */

#include "pushbutton.h"

void CheckPushbutton(PushbuttonConfig_t* pb, PushbuttonMode_t mode, uint16_t nInput, uint16_t* nOutput, uint16_t nDebounceTime)
{
 801501a:	b580      	push	{r7, lr}
 801501c:	b084      	sub	sp, #16
 801501e:	af00      	add	r7, sp, #0
 8015020:	60f8      	str	r0, [r7, #12]
 8015022:	607b      	str	r3, [r7, #4]
 8015024:	460b      	mov	r3, r1
 8015026:	72fb      	strb	r3, [r7, #11]
 8015028:	4613      	mov	r3, r2
 801502a:	813b      	strh	r3, [r7, #8]
  //=======================================================
  //Debounce and latch logic
  //=======================================================

  if(mode == MODE_MOMENTARY)
 801502c:	7afb      	ldrb	r3, [r7, #11]
 801502e:	2b01      	cmp	r3, #1
 8015030:	d132      	bne.n	8015098 <CheckPushbutton+0x7e>
  {
    //Check for button change
    //Store trigger time
    if(nInput != pb->nLastState)
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	781b      	ldrb	r3, [r3, #0]
 8015036:	b29b      	uxth	r3, r3
 8015038:	893a      	ldrh	r2, [r7, #8]
 801503a:	429a      	cmp	r2, r3
 801503c:	d015      	beq.n	801506a <CheckPushbutton+0x50>
    {
      if(    ((nInput == 1) && (*nOutput == 0)) //Rising
 801503e:	893b      	ldrh	r3, [r7, #8]
 8015040:	2b01      	cmp	r3, #1
 8015042:	d103      	bne.n	801504c <CheckPushbutton+0x32>
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	881b      	ldrh	r3, [r3, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d006      	beq.n	801505a <CheckPushbutton+0x40>
          || ((nInput == 0) && (*nOutput == 1))) //Falling
 801504c:	893b      	ldrh	r3, [r7, #8]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d10b      	bne.n	801506a <CheckPushbutton+0x50>
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	881b      	ldrh	r3, [r3, #0]
 8015056:	2b01      	cmp	r3, #1
 8015058:	d107      	bne.n	801506a <CheckPushbutton+0x50>
      {
        pb->nLastTrigTime = HAL_GetTick();
 801505a:	f7ed fc47 	bl	80028ec <HAL_GetTick>
 801505e:	4602      	mov	r2, r0
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	605a      	str	r2, [r3, #4]
        pb->nCheckTime = 1;
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	2201      	movs	r2, #1
 8015068:	721a      	strb	r2, [r3, #8]
      }
    }

    pb->nLastState = nInput;
 801506a:	893b      	ldrh	r3, [r7, #8]
 801506c:	b2da      	uxtb	r2, r3
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	701a      	strb	r2, [r3, #0]

    if((pb->nCheckTime > 0) && ((HAL_GetTick() - pb->nLastTrigTime) > nDebounceTime))
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	7a1b      	ldrb	r3, [r3, #8]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d00e      	beq.n	8015098 <CheckPushbutton+0x7e>
 801507a:	f7ed fc37 	bl	80028ec <HAL_GetTick>
 801507e:	4602      	mov	r2, r0
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	685b      	ldr	r3, [r3, #4]
 8015084:	1ad2      	subs	r2, r2, r3
 8015086:	8b3b      	ldrh	r3, [r7, #24]
 8015088:	429a      	cmp	r2, r3
 801508a:	d905      	bls.n	8015098 <CheckPushbutton+0x7e>
    {
      pb->nCheckTime = 0;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	2200      	movs	r2, #0
 8015090:	721a      	strb	r2, [r3, #8]
      *nOutput = nInput;
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	893a      	ldrh	r2, [r7, #8]
 8015096:	801a      	strh	r2, [r3, #0]
    }

    //Don't change output
  }

  if(mode == MODE_LATCHING)
 8015098:	7afb      	ldrb	r3, [r7, #11]
 801509a:	2b02      	cmp	r3, #2
 801509c:	d12e      	bne.n	80150fc <CheckPushbutton+0xe2>
  {
    //Check for rising trigger
    //Store trigger time
    if((nInput != pb->nLastState) && (nInput == 1))
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	b29b      	uxth	r3, r3
 80150a4:	893a      	ldrh	r2, [r7, #8]
 80150a6:	429a      	cmp	r2, r3
 80150a8:	d00a      	beq.n	80150c0 <CheckPushbutton+0xa6>
 80150aa:	893b      	ldrh	r3, [r7, #8]
 80150ac:	2b01      	cmp	r3, #1
 80150ae:	d107      	bne.n	80150c0 <CheckPushbutton+0xa6>
    {
      pb->nLastTrigTime = HAL_GetTick();
 80150b0:	f7ed fc1c 	bl	80028ec <HAL_GetTick>
 80150b4:	4602      	mov	r2, r0
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	605a      	str	r2, [r3, #4]
      pb->nCheckTime = 1;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	2201      	movs	r2, #1
 80150be:	721a      	strb	r2, [r3, #8]
    }

    pb->nLastState = nInput;
 80150c0:	893b      	ldrh	r3, [r7, #8]
 80150c2:	b2da      	uxtb	r2, r3
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	701a      	strb	r2, [r3, #0]

    if((pb->nCheckTime > 0) && ((HAL_GetTick() - pb->nLastTrigTime) > nDebounceTime))
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	7a1b      	ldrb	r3, [r3, #8]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d015      	beq.n	80150fc <CheckPushbutton+0xe2>
 80150d0:	f7ed fc0c 	bl	80028ec <HAL_GetTick>
 80150d4:	4602      	mov	r2, r0
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	685b      	ldr	r3, [r3, #4]
 80150da:	1ad2      	subs	r2, r2, r3
 80150dc:	8b3b      	ldrh	r3, [r7, #24]
 80150de:	429a      	cmp	r2, r3
 80150e0:	d90c      	bls.n	80150fc <CheckPushbutton+0xe2>
    {
      pb->nCheckTime = 0;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	2200      	movs	r2, #0
 80150e6:	721a      	strb	r2, [r3, #8]
      *nOutput = !*nOutput;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	881b      	ldrh	r3, [r3, #0]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	bf0c      	ite	eq
 80150f0:	2301      	moveq	r3, #1
 80150f2:	2300      	movne	r3, #0
 80150f4:	b2db      	uxtb	r3, r3
 80150f6:	b29a      	uxth	r2, r3
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80150fc:	bf00      	nop
 80150fe:	3710      	adds	r7, #16
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <EvaluateStarter>:
 */

#include "starter.h"

void EvaluateStarter(PdmConfig_Starter_t *pStarter, uint8_t nIndex, uint16_t* pResult)
{
 8015104:	b480      	push	{r7}
 8015106:	b085      	sub	sp, #20
 8015108:	af00      	add	r7, sp, #0
 801510a:	60f8      	str	r0, [r7, #12]
 801510c:	460b      	mov	r3, r1
 801510e:	607a      	str	r2, [r7, #4]
 8015110:	72fb      	strb	r3, [r7, #11]
    if(!pStarter->nEnabled)
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	781b      	ldrb	r3, [r3, #0]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d103      	bne.n	8015122 <EvaluateStarter+0x1e>
      *pResult = 1;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	2201      	movs	r2, #1
 801511e:	801a      	strh	r2, [r3, #0]
    else
      *pResult = !(pStarter->nDisableOut[nIndex] && *pStarter->pInput);
}
 8015120:	e010      	b.n	8015144 <EvaluateStarter+0x40>
      *pResult = !(pStarter->nDisableOut[nIndex] && *pStarter->pInput);
 8015122:	7afb      	ldrb	r3, [r7, #11]
 8015124:	68fa      	ldr	r2, [r7, #12]
 8015126:	4413      	add	r3, r2
 8015128:	7a1b      	ldrb	r3, [r3, #8]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d004      	beq.n	8015138 <EvaluateStarter+0x34>
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	685b      	ldr	r3, [r3, #4]
 8015132:	881b      	ldrh	r3, [r3, #0]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d101      	bne.n	801513c <EvaluateStarter+0x38>
 8015138:	2301      	movs	r3, #1
 801513a:	e000      	b.n	801513e <EvaluateStarter+0x3a>
 801513c:	2300      	movs	r3, #0
 801513e:	b29a      	uxth	r2, r3
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	801a      	strh	r2, [r3, #0]
}
 8015144:	bf00      	nop
 8015146:	3714      	adds	r7, #20
 8015148:	46bd      	mov	sp, r7
 801514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514e:	4770      	bx	lr

08015150 <EvaluateVirtInput>:
 */

#include "virtual_input.h"

void EvaluateVirtInput(PdmConfig_VirtualInput_t *pIn, uint16_t* pResult)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b086      	sub	sp, #24
 8015154:	af02      	add	r7, sp, #8
 8015156:	6078      	str	r0, [r7, #4]
 8015158:	6039      	str	r1, [r7, #0]
  if(!pIn->nEnabled)
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	781b      	ldrb	r3, [r3, #0]
 801515e:	2b00      	cmp	r3, #0
 8015160:	f000 80be 	beq.w	80152e0 <EvaluateVirtInput+0x190>
    return;
  if((pIn->pVar0 == 0) || (pIn->pVar1 == 0))
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	685b      	ldr	r3, [r3, #4]
 8015168:	2b00      	cmp	r3, #0
 801516a:	f000 80bb 	beq.w	80152e4 <EvaluateVirtInput+0x194>
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	68db      	ldr	r3, [r3, #12]
 8015172:	2b00      	cmp	r3, #0
 8015174:	f000 80b6 	beq.w	80152e4 <EvaluateVirtInput+0x194>
    return;

  uint8_t nResult0, nResult1, nResult2, nResultSec0;

  nResult0 = *pIn->pVar0;
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	685b      	ldr	r3, [r3, #4]
 801517c:	881b      	ldrh	r3, [r3, #0]
 801517e:	73fb      	strb	r3, [r7, #15]
  if(pIn->nNot0)
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	785b      	ldrb	r3, [r3, #1]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d006      	beq.n	8015196 <EvaluateVirtInput+0x46>
    nResult0 = !nResult0;
 8015188:	7bfb      	ldrb	r3, [r7, #15]
 801518a:	2b00      	cmp	r3, #0
 801518c:	bf0c      	ite	eq
 801518e:	2301      	moveq	r3, #1
 8015190:	2300      	movne	r3, #0
 8015192:	b2db      	uxtb	r3, r3
 8015194:	73fb      	strb	r3, [r7, #15]

  nResult1 = *pIn->pVar1;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	68db      	ldr	r3, [r3, #12]
 801519a:	881b      	ldrh	r3, [r3, #0]
 801519c:	73bb      	strb	r3, [r7, #14]
  if(pIn->nNot1)
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	7a5b      	ldrb	r3, [r3, #9]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d006      	beq.n	80151b4 <EvaluateVirtInput+0x64>
    nResult1 = !nResult1;
 80151a6:	7bbb      	ldrb	r3, [r7, #14]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	bf0c      	ite	eq
 80151ac:	2301      	moveq	r3, #1
 80151ae:	2300      	movne	r3, #0
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	73bb      	strb	r3, [r7, #14]

  switch(pIn->eCond0)
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	7a1b      	ldrb	r3, [r3, #8]
 80151b8:	2b02      	cmp	r3, #2
 80151ba:	d01c      	beq.n	80151f6 <EvaluateVirtInput+0xa6>
 80151bc:	2b02      	cmp	r3, #2
 80151be:	dc25      	bgt.n	801520c <EvaluateVirtInput+0xbc>
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d002      	beq.n	80151ca <EvaluateVirtInput+0x7a>
 80151c4:	2b01      	cmp	r3, #1
 80151c6:	d00b      	beq.n	80151e0 <EvaluateVirtInput+0x90>
 80151c8:	e020      	b.n	801520c <EvaluateVirtInput+0xbc>
  {
  case COND_AND:
    nResultSec0 = nResult0 && nResult1;
 80151ca:	7bfb      	ldrb	r3, [r7, #15]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d004      	beq.n	80151da <EvaluateVirtInput+0x8a>
 80151d0:	7bbb      	ldrb	r3, [r7, #14]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d001      	beq.n	80151da <EvaluateVirtInput+0x8a>
 80151d6:	2301      	movs	r3, #1
 80151d8:	e000      	b.n	80151dc <EvaluateVirtInput+0x8c>
 80151da:	2300      	movs	r3, #0
 80151dc:	733b      	strb	r3, [r7, #12]
    break;
 80151de:	e015      	b.n	801520c <EvaluateVirtInput+0xbc>
  case COND_OR:
    nResultSec0 = nResult0 || nResult1;
 80151e0:	7bfb      	ldrb	r3, [r7, #15]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d102      	bne.n	80151ec <EvaluateVirtInput+0x9c>
 80151e6:	7bbb      	ldrb	r3, [r7, #14]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d001      	beq.n	80151f0 <EvaluateVirtInput+0xa0>
 80151ec:	2301      	movs	r3, #1
 80151ee:	e000      	b.n	80151f2 <EvaluateVirtInput+0xa2>
 80151f0:	2300      	movs	r3, #0
 80151f2:	733b      	strb	r3, [r7, #12]
    break;
 80151f4:	e00a      	b.n	801520c <EvaluateVirtInput+0xbc>
  case COND_NOR:
    nResultSec0 = !nResult0 || !nResult1;
 80151f6:	7bfb      	ldrb	r3, [r7, #15]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d002      	beq.n	8015202 <EvaluateVirtInput+0xb2>
 80151fc:	7bbb      	ldrb	r3, [r7, #14]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d101      	bne.n	8015206 <EvaluateVirtInput+0xb6>
 8015202:	2301      	movs	r3, #1
 8015204:	e000      	b.n	8015208 <EvaluateVirtInput+0xb8>
 8015206:	2300      	movs	r3, #0
 8015208:	733b      	strb	r3, [r7, #12]
    break;
 801520a:	bf00      	nop
  }

  //Only 2 conditions
  if(pIn->nVar2 == 0)
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	7c9b      	ldrb	r3, [r3, #18]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d10c      	bne.n	801522e <EvaluateVirtInput+0xde>
  {
    CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0, pResult, NO_DEBOUNCE);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	f103 001c 	add.w	r0, r3, #28
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	7e19      	ldrb	r1, [r3, #24]
 801521e:	7b3b      	ldrb	r3, [r7, #12]
 8015220:	b29a      	uxth	r2, r3
 8015222:	2300      	movs	r3, #0
 8015224:	9300      	str	r3, [sp, #0]
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	f7ff fef7 	bl	801501a <CheckPushbutton>
    return;
 801522c:	e05b      	b.n	80152e6 <EvaluateVirtInput+0x196>
  }
  else
  {
    nResult2 = *pIn->pVar2;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	695b      	ldr	r3, [r3, #20]
 8015232:	881b      	ldrh	r3, [r3, #0]
 8015234:	737b      	strb	r3, [r7, #13]
    if(pIn->nNot2)
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	7c5b      	ldrb	r3, [r3, #17]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d006      	beq.n	801524c <EvaluateVirtInput+0xfc>
      nResult2 = !nResult2;
 801523e:	7b7b      	ldrb	r3, [r7, #13]
 8015240:	2b00      	cmp	r3, #0
 8015242:	bf0c      	ite	eq
 8015244:	2301      	moveq	r3, #1
 8015246:	2300      	movne	r3, #0
 8015248:	b2db      	uxtb	r3, r3
 801524a:	737b      	strb	r3, [r7, #13]

    switch(pIn->eCond0)
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	7a1b      	ldrb	r3, [r3, #8]
 8015250:	2b02      	cmp	r3, #2
 8015252:	d030      	beq.n	80152b6 <EvaluateVirtInput+0x166>
 8015254:	2b02      	cmp	r3, #2
 8015256:	dc46      	bgt.n	80152e6 <EvaluateVirtInput+0x196>
 8015258:	2b00      	cmp	r3, #0
 801525a:	d002      	beq.n	8015262 <EvaluateVirtInput+0x112>
 801525c:	2b01      	cmp	r3, #1
 801525e:	d015      	beq.n	801528c <EvaluateVirtInput+0x13c>
 8015260:	e041      	b.n	80152e6 <EvaluateVirtInput+0x196>
    {
    case COND_AND:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0 && nResult2, pResult, NO_DEBOUNCE);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	f103 001c 	add.w	r0, r3, #28
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	7e19      	ldrb	r1, [r3, #24]
 801526c:	7b3b      	ldrb	r3, [r7, #12]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d004      	beq.n	801527c <EvaluateVirtInput+0x12c>
 8015272:	7b7b      	ldrb	r3, [r7, #13]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d001      	beq.n	801527c <EvaluateVirtInput+0x12c>
 8015278:	2301      	movs	r3, #1
 801527a:	e000      	b.n	801527e <EvaluateVirtInput+0x12e>
 801527c:	2300      	movs	r3, #0
 801527e:	b29a      	uxth	r2, r3
 8015280:	2300      	movs	r3, #0
 8015282:	9300      	str	r3, [sp, #0]
 8015284:	683b      	ldr	r3, [r7, #0]
 8015286:	f7ff fec8 	bl	801501a <CheckPushbutton>
      return;
 801528a:	e02c      	b.n	80152e6 <EvaluateVirtInput+0x196>
    case COND_OR:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0 || nResult2, pResult, NO_DEBOUNCE);
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f103 001c 	add.w	r0, r3, #28
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	7e19      	ldrb	r1, [r3, #24]
 8015296:	7b3b      	ldrb	r3, [r7, #12]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d102      	bne.n	80152a2 <EvaluateVirtInput+0x152>
 801529c:	7b7b      	ldrb	r3, [r7, #13]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d001      	beq.n	80152a6 <EvaluateVirtInput+0x156>
 80152a2:	2301      	movs	r3, #1
 80152a4:	e000      	b.n	80152a8 <EvaluateVirtInput+0x158>
 80152a6:	2300      	movs	r3, #0
 80152a8:	b29a      	uxth	r2, r3
 80152aa:	2300      	movs	r3, #0
 80152ac:	9300      	str	r3, [sp, #0]
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	f7ff feb3 	bl	801501a <CheckPushbutton>
      return;
 80152b4:	e017      	b.n	80152e6 <EvaluateVirtInput+0x196>
    case COND_NOR:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, !nResultSec0 || !nResult2, pResult, NO_DEBOUNCE);
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	f103 001c 	add.w	r0, r3, #28
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	7e19      	ldrb	r1, [r3, #24]
 80152c0:	7b3b      	ldrb	r3, [r7, #12]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d002      	beq.n	80152cc <EvaluateVirtInput+0x17c>
 80152c6:	7b7b      	ldrb	r3, [r7, #13]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d101      	bne.n	80152d0 <EvaluateVirtInput+0x180>
 80152cc:	2301      	movs	r3, #1
 80152ce:	e000      	b.n	80152d2 <EvaluateVirtInput+0x182>
 80152d0:	2300      	movs	r3, #0
 80152d2:	b29a      	uxth	r2, r3
 80152d4:	2300      	movs	r3, #0
 80152d6:	9300      	str	r3, [sp, #0]
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	f7ff fe9e 	bl	801501a <CheckPushbutton>
      return;
 80152de:	e002      	b.n	80152e6 <EvaluateVirtInput+0x196>
    return;
 80152e0:	bf00      	nop
 80152e2:	e000      	b.n	80152e6 <EvaluateVirtInput+0x196>
    return;
 80152e4:	bf00      	nop
    }
  }

}
 80152e6:	3710      	adds	r7, #16
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}

080152ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152ec:	b480      	push	{r7}
 80152ee:	b083      	sub	sp, #12
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	4603      	mov	r3, r0
 80152f4:	6039      	str	r1, [r7, #0]
 80152f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80152f8:	683b      	ldr	r3, [r7, #0]
 80152fa:	2212      	movs	r2, #18
 80152fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80152fe:	4b03      	ldr	r3, [pc, #12]	; (801530c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015300:	4618      	mov	r0, r3
 8015302:	370c      	adds	r7, #12
 8015304:	46bd      	mov	sp, r7
 8015306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530a:	4770      	bx	lr
 801530c:	2000014c 	.word	0x2000014c

08015310 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015310:	b480      	push	{r7}
 8015312:	b083      	sub	sp, #12
 8015314:	af00      	add	r7, sp, #0
 8015316:	4603      	mov	r3, r0
 8015318:	6039      	str	r1, [r7, #0]
 801531a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	2204      	movs	r2, #4
 8015320:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015322:	4b03      	ldr	r3, [pc, #12]	; (8015330 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015324:	4618      	mov	r0, r3
 8015326:	370c      	adds	r7, #12
 8015328:	46bd      	mov	sp, r7
 801532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532e:	4770      	bx	lr
 8015330:	20000160 	.word	0x20000160

08015334 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b082      	sub	sp, #8
 8015338:	af00      	add	r7, sp, #0
 801533a:	4603      	mov	r3, r0
 801533c:	6039      	str	r1, [r7, #0]
 801533e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015340:	79fb      	ldrb	r3, [r7, #7]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d105      	bne.n	8015352 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015346:	683a      	ldr	r2, [r7, #0]
 8015348:	4907      	ldr	r1, [pc, #28]	; (8015368 <USBD_FS_ProductStrDescriptor+0x34>)
 801534a:	4808      	ldr	r0, [pc, #32]	; (801536c <USBD_FS_ProductStrDescriptor+0x38>)
 801534c:	f7f7 fed7 	bl	800d0fe <USBD_GetString>
 8015350:	e004      	b.n	801535c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015352:	683a      	ldr	r2, [r7, #0]
 8015354:	4904      	ldr	r1, [pc, #16]	; (8015368 <USBD_FS_ProductStrDescriptor+0x34>)
 8015356:	4805      	ldr	r0, [pc, #20]	; (801536c <USBD_FS_ProductStrDescriptor+0x38>)
 8015358:	f7f7 fed1 	bl	800d0fe <USBD_GetString>
  }
  return USBD_StrDesc;
 801535c:	4b02      	ldr	r3, [pc, #8]	; (8015368 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801535e:	4618      	mov	r0, r3
 8015360:	3708      	adds	r7, #8
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}
 8015366:	bf00      	nop
 8015368:	20004bf0 	.word	0x20004bf0
 801536c:	08016684 	.word	0x08016684

08015370 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b082      	sub	sp, #8
 8015374:	af00      	add	r7, sp, #0
 8015376:	4603      	mov	r3, r0
 8015378:	6039      	str	r1, [r7, #0]
 801537a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801537c:	683a      	ldr	r2, [r7, #0]
 801537e:	4904      	ldr	r1, [pc, #16]	; (8015390 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015380:	4804      	ldr	r0, [pc, #16]	; (8015394 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015382:	f7f7 febc 	bl	800d0fe <USBD_GetString>
  return USBD_StrDesc;
 8015386:	4b02      	ldr	r3, [pc, #8]	; (8015390 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015388:	4618      	mov	r0, r3
 801538a:	3708      	adds	r7, #8
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}
 8015390:	20004bf0 	.word	0x20004bf0
 8015394:	0801669c 	.word	0x0801669c

08015398 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	af00      	add	r7, sp, #0
 801539e:	4603      	mov	r3, r0
 80153a0:	6039      	str	r1, [r7, #0]
 80153a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	221a      	movs	r2, #26
 80153a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80153aa:	f000 f843 	bl	8015434 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80153ae:	4b02      	ldr	r3, [pc, #8]	; (80153b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80153b0:	4618      	mov	r0, r3
 80153b2:	3708      	adds	r7, #8
 80153b4:	46bd      	mov	sp, r7
 80153b6:	bd80      	pop	{r7, pc}
 80153b8:	20000164 	.word	0x20000164

080153bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	4603      	mov	r3, r0
 80153c4:	6039      	str	r1, [r7, #0]
 80153c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80153c8:	79fb      	ldrb	r3, [r7, #7]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d105      	bne.n	80153da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80153ce:	683a      	ldr	r2, [r7, #0]
 80153d0:	4907      	ldr	r1, [pc, #28]	; (80153f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80153d2:	4808      	ldr	r0, [pc, #32]	; (80153f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80153d4:	f7f7 fe93 	bl	800d0fe <USBD_GetString>
 80153d8:	e004      	b.n	80153e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80153da:	683a      	ldr	r2, [r7, #0]
 80153dc:	4904      	ldr	r1, [pc, #16]	; (80153f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80153de:	4805      	ldr	r0, [pc, #20]	; (80153f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80153e0:	f7f7 fe8d 	bl	800d0fe <USBD_GetString>
  }
  return USBD_StrDesc;
 80153e4:	4b02      	ldr	r3, [pc, #8]	; (80153f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	3708      	adds	r7, #8
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}
 80153ee:	bf00      	nop
 80153f0:	20004bf0 	.word	0x20004bf0
 80153f4:	080166b0 	.word	0x080166b0

080153f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b082      	sub	sp, #8
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	4603      	mov	r3, r0
 8015400:	6039      	str	r1, [r7, #0]
 8015402:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015404:	79fb      	ldrb	r3, [r7, #7]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d105      	bne.n	8015416 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801540a:	683a      	ldr	r2, [r7, #0]
 801540c:	4907      	ldr	r1, [pc, #28]	; (801542c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801540e:	4808      	ldr	r0, [pc, #32]	; (8015430 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015410:	f7f7 fe75 	bl	800d0fe <USBD_GetString>
 8015414:	e004      	b.n	8015420 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015416:	683a      	ldr	r2, [r7, #0]
 8015418:	4904      	ldr	r1, [pc, #16]	; (801542c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801541a:	4805      	ldr	r0, [pc, #20]	; (8015430 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801541c:	f7f7 fe6f 	bl	800d0fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8015420:	4b02      	ldr	r3, [pc, #8]	; (801542c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015422:	4618      	mov	r0, r3
 8015424:	3708      	adds	r7, #8
 8015426:	46bd      	mov	sp, r7
 8015428:	bd80      	pop	{r7, pc}
 801542a:	bf00      	nop
 801542c:	20004bf0 	.word	0x20004bf0
 8015430:	080166bc 	.word	0x080166bc

08015434 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b084      	sub	sp, #16
 8015438:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801543a:	4b0f      	ldr	r3, [pc, #60]	; (8015478 <Get_SerialNum+0x44>)
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015440:	4b0e      	ldr	r3, [pc, #56]	; (801547c <Get_SerialNum+0x48>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015446:	4b0e      	ldr	r3, [pc, #56]	; (8015480 <Get_SerialNum+0x4c>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801544c:	68fa      	ldr	r2, [r7, #12]
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	4413      	add	r3, r2
 8015452:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d009      	beq.n	801546e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801545a:	2208      	movs	r2, #8
 801545c:	4909      	ldr	r1, [pc, #36]	; (8015484 <Get_SerialNum+0x50>)
 801545e:	68f8      	ldr	r0, [r7, #12]
 8015460:	f000 f814 	bl	801548c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015464:	2204      	movs	r2, #4
 8015466:	4908      	ldr	r1, [pc, #32]	; (8015488 <Get_SerialNum+0x54>)
 8015468:	68b8      	ldr	r0, [r7, #8]
 801546a:	f000 f80f 	bl	801548c <IntToUnicode>
  }
}
 801546e:	bf00      	nop
 8015470:	3710      	adds	r7, #16
 8015472:	46bd      	mov	sp, r7
 8015474:	bd80      	pop	{r7, pc}
 8015476:	bf00      	nop
 8015478:	1ffff7ac 	.word	0x1ffff7ac
 801547c:	1ffff7b0 	.word	0x1ffff7b0
 8015480:	1ffff7b4 	.word	0x1ffff7b4
 8015484:	20000166 	.word	0x20000166
 8015488:	20000176 	.word	0x20000176

0801548c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801548c:	b480      	push	{r7}
 801548e:	b087      	sub	sp, #28
 8015490:	af00      	add	r7, sp, #0
 8015492:	60f8      	str	r0, [r7, #12]
 8015494:	60b9      	str	r1, [r7, #8]
 8015496:	4613      	mov	r3, r2
 8015498:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801549a:	2300      	movs	r3, #0
 801549c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801549e:	2300      	movs	r3, #0
 80154a0:	75fb      	strb	r3, [r7, #23]
 80154a2:	e027      	b.n	80154f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	0f1b      	lsrs	r3, r3, #28
 80154a8:	2b09      	cmp	r3, #9
 80154aa:	d80b      	bhi.n	80154c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	0f1b      	lsrs	r3, r3, #28
 80154b0:	b2da      	uxtb	r2, r3
 80154b2:	7dfb      	ldrb	r3, [r7, #23]
 80154b4:	005b      	lsls	r3, r3, #1
 80154b6:	4619      	mov	r1, r3
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	440b      	add	r3, r1
 80154bc:	3230      	adds	r2, #48	; 0x30
 80154be:	b2d2      	uxtb	r2, r2
 80154c0:	701a      	strb	r2, [r3, #0]
 80154c2:	e00a      	b.n	80154da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	0f1b      	lsrs	r3, r3, #28
 80154c8:	b2da      	uxtb	r2, r3
 80154ca:	7dfb      	ldrb	r3, [r7, #23]
 80154cc:	005b      	lsls	r3, r3, #1
 80154ce:	4619      	mov	r1, r3
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	440b      	add	r3, r1
 80154d4:	3237      	adds	r2, #55	; 0x37
 80154d6:	b2d2      	uxtb	r2, r2
 80154d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	011b      	lsls	r3, r3, #4
 80154de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80154e0:	7dfb      	ldrb	r3, [r7, #23]
 80154e2:	005b      	lsls	r3, r3, #1
 80154e4:	3301      	adds	r3, #1
 80154e6:	68ba      	ldr	r2, [r7, #8]
 80154e8:	4413      	add	r3, r2
 80154ea:	2200      	movs	r2, #0
 80154ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80154ee:	7dfb      	ldrb	r3, [r7, #23]
 80154f0:	3301      	adds	r3, #1
 80154f2:	75fb      	strb	r3, [r7, #23]
 80154f4:	7dfa      	ldrb	r2, [r7, #23]
 80154f6:	79fb      	ldrb	r3, [r7, #7]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d3d3      	bcc.n	80154a4 <IntToUnicode+0x18>
  }
}
 80154fc:	bf00      	nop
 80154fe:	bf00      	nop
 8015500:	371c      	adds	r7, #28
 8015502:	46bd      	mov	sp, r7
 8015504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015508:	4770      	bx	lr
	...

0801550c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b08a      	sub	sp, #40	; 0x28
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015514:	f107 0314 	add.w	r3, r7, #20
 8015518:	2200      	movs	r2, #0
 801551a:	601a      	str	r2, [r3, #0]
 801551c:	605a      	str	r2, [r3, #4]
 801551e:	609a      	str	r2, [r3, #8]
 8015520:	60da      	str	r2, [r3, #12]
 8015522:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	4a1f      	ldr	r2, [pc, #124]	; (80155a8 <HAL_PCD_MspInit+0x9c>)
 801552a:	4293      	cmp	r3, r2
 801552c:	d137      	bne.n	801559e <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801552e:	4b1f      	ldr	r3, [pc, #124]	; (80155ac <HAL_PCD_MspInit+0xa0>)
 8015530:	695b      	ldr	r3, [r3, #20]
 8015532:	4a1e      	ldr	r2, [pc, #120]	; (80155ac <HAL_PCD_MspInit+0xa0>)
 8015534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015538:	6153      	str	r3, [r2, #20]
 801553a:	4b1c      	ldr	r3, [pc, #112]	; (80155ac <HAL_PCD_MspInit+0xa0>)
 801553c:	695b      	ldr	r3, [r3, #20]
 801553e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015542:	613b      	str	r3, [r7, #16]
 8015544:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015546:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801554a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801554c:	2302      	movs	r3, #2
 801554e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015550:	2300      	movs	r3, #0
 8015552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8015554:	2303      	movs	r3, #3
 8015556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8015558:	230e      	movs	r3, #14
 801555a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801555c:	f107 0314 	add.w	r3, r7, #20
 8015560:	4619      	mov	r1, r3
 8015562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8015566:	f7ef fbc1 	bl	8004cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801556a:	4b10      	ldr	r3, [pc, #64]	; (80155ac <HAL_PCD_MspInit+0xa0>)
 801556c:	69db      	ldr	r3, [r3, #28]
 801556e:	4a0f      	ldr	r2, [pc, #60]	; (80155ac <HAL_PCD_MspInit+0xa0>)
 8015570:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015574:	61d3      	str	r3, [r2, #28]
 8015576:	4b0d      	ldr	r3, [pc, #52]	; (80155ac <HAL_PCD_MspInit+0xa0>)
 8015578:	69db      	ldr	r3, [r3, #28]
 801557a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801557e:	60fb      	str	r3, [r7, #12]
 8015580:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 8015582:	4b0b      	ldr	r3, [pc, #44]	; (80155b0 <HAL_PCD_MspInit+0xa4>)
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	4a0a      	ldr	r2, [pc, #40]	; (80155b0 <HAL_PCD_MspInit+0xa4>)
 8015588:	f043 0320 	orr.w	r3, r3, #32
 801558c:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801558e:	2200      	movs	r2, #0
 8015590:	2105      	movs	r1, #5
 8015592:	204b      	movs	r0, #75	; 0x4b
 8015594:	f7ef f8e2 	bl	800475c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015598:	204b      	movs	r0, #75	; 0x4b
 801559a:	f7ef f8fb 	bl	8004794 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801559e:	bf00      	nop
 80155a0:	3728      	adds	r7, #40	; 0x28
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}
 80155a6:	bf00      	nop
 80155a8:	40005c00 	.word	0x40005c00
 80155ac:	40021000 	.word	0x40021000
 80155b0:	40010000 	.word	0x40010000

080155b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80155c8:	4619      	mov	r1, r3
 80155ca:	4610      	mov	r0, r2
 80155cc:	f7f6 fe62 	bl	800c294 <USBD_LL_SetupStage>
}
 80155d0:	bf00      	nop
 80155d2:	3708      	adds	r7, #8
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bd80      	pop	{r7, pc}

080155d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b082      	sub	sp, #8
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	460b      	mov	r3, r1
 80155e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80155ea:	78fa      	ldrb	r2, [r7, #3]
 80155ec:	6879      	ldr	r1, [r7, #4]
 80155ee:	4613      	mov	r3, r2
 80155f0:	009b      	lsls	r3, r3, #2
 80155f2:	4413      	add	r3, r2
 80155f4:	00db      	lsls	r3, r3, #3
 80155f6:	440b      	add	r3, r1
 80155f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80155fc:	681a      	ldr	r2, [r3, #0]
 80155fe:	78fb      	ldrb	r3, [r7, #3]
 8015600:	4619      	mov	r1, r3
 8015602:	f7f6 fe94 	bl	800c32e <USBD_LL_DataOutStage>
}
 8015606:	bf00      	nop
 8015608:	3708      	adds	r7, #8
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}

0801560e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801560e:	b580      	push	{r7, lr}
 8015610:	b082      	sub	sp, #8
 8015612:	af00      	add	r7, sp, #0
 8015614:	6078      	str	r0, [r7, #4]
 8015616:	460b      	mov	r3, r1
 8015618:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8015620:	78fa      	ldrb	r2, [r7, #3]
 8015622:	6879      	ldr	r1, [r7, #4]
 8015624:	4613      	mov	r3, r2
 8015626:	009b      	lsls	r3, r3, #2
 8015628:	4413      	add	r3, r2
 801562a:	00db      	lsls	r3, r3, #3
 801562c:	440b      	add	r3, r1
 801562e:	333c      	adds	r3, #60	; 0x3c
 8015630:	681a      	ldr	r2, [r3, #0]
 8015632:	78fb      	ldrb	r3, [r7, #3]
 8015634:	4619      	mov	r1, r3
 8015636:	f7f6 feeb 	bl	800c410 <USBD_LL_DataInStage>
}
 801563a:	bf00      	nop
 801563c:	3708      	adds	r7, #8
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}

08015642 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015642:	b580      	push	{r7, lr}
 8015644:	b082      	sub	sp, #8
 8015646:	af00      	add	r7, sp, #0
 8015648:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8015650:	4618      	mov	r0, r3
 8015652:	f7f6 fffe 	bl	800c652 <USBD_LL_SOF>
}
 8015656:	bf00      	nop
 8015658:	3708      	adds	r7, #8
 801565a:	46bd      	mov	sp, r7
 801565c:	bd80      	pop	{r7, pc}

0801565e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801565e:	b580      	push	{r7, lr}
 8015660:	b084      	sub	sp, #16
 8015662:	af00      	add	r7, sp, #0
 8015664:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015666:	2301      	movs	r3, #1
 8015668:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	689b      	ldr	r3, [r3, #8]
 801566e:	2b02      	cmp	r3, #2
 8015670:	d001      	beq.n	8015676 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015672:	f7ec fea7 	bl	80023c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801567c:	7bfa      	ldrb	r2, [r7, #15]
 801567e:	4611      	mov	r1, r2
 8015680:	4618      	mov	r0, r3
 8015682:	f7f6 ffab 	bl	800c5dc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801568c:	4618      	mov	r0, r3
 801568e:	f7f6 ff64 	bl	800c55a <USBD_LL_Reset>
}
 8015692:	bf00      	nop
 8015694:	3710      	adds	r7, #16
 8015696:	46bd      	mov	sp, r7
 8015698:	bd80      	pop	{r7, pc}
	...

0801569c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b082      	sub	sp, #8
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7f6 ffa6 	bl	800c5fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	699b      	ldr	r3, [r3, #24]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d005      	beq.n	80156c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80156b8:	4b04      	ldr	r3, [pc, #16]	; (80156cc <HAL_PCD_SuspendCallback+0x30>)
 80156ba:	691b      	ldr	r3, [r3, #16]
 80156bc:	4a03      	ldr	r2, [pc, #12]	; (80156cc <HAL_PCD_SuspendCallback+0x30>)
 80156be:	f043 0306 	orr.w	r3, r3, #6
 80156c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80156c4:	bf00      	nop
 80156c6:	3708      	adds	r7, #8
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}
 80156cc:	e000ed00 	.word	0xe000ed00

080156d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80156de:	4618      	mov	r0, r3
 80156e0:	f7f6 ffa1 	bl	800c626 <USBD_LL_Resume>
}
 80156e4:	bf00      	nop
 80156e6:	3708      	adds	r7, #8
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}

080156ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b082      	sub	sp, #8
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80156f4:	4a28      	ldr	r2, [pc, #160]	; (8015798 <USBD_LL_Init+0xac>)
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	4a26      	ldr	r2, [pc, #152]	; (8015798 <USBD_LL_Init+0xac>)
 8015700:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8015704:	4b24      	ldr	r3, [pc, #144]	; (8015798 <USBD_LL_Init+0xac>)
 8015706:	4a25      	ldr	r2, [pc, #148]	; (801579c <USBD_LL_Init+0xb0>)
 8015708:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801570a:	4b23      	ldr	r3, [pc, #140]	; (8015798 <USBD_LL_Init+0xac>)
 801570c:	2208      	movs	r2, #8
 801570e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015710:	4b21      	ldr	r3, [pc, #132]	; (8015798 <USBD_LL_Init+0xac>)
 8015712:	2202      	movs	r2, #2
 8015714:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015716:	4b20      	ldr	r3, [pc, #128]	; (8015798 <USBD_LL_Init+0xac>)
 8015718:	2202      	movs	r2, #2
 801571a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801571c:	4b1e      	ldr	r3, [pc, #120]	; (8015798 <USBD_LL_Init+0xac>)
 801571e:	2200      	movs	r2, #0
 8015720:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015722:	4b1d      	ldr	r3, [pc, #116]	; (8015798 <USBD_LL_Init+0xac>)
 8015724:	2200      	movs	r2, #0
 8015726:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015728:	481b      	ldr	r0, [pc, #108]	; (8015798 <USBD_LL_Init+0xac>)
 801572a:	f7f0 f98c 	bl	8005a46 <HAL_PCD_Init>
 801572e:	4603      	mov	r3, r0
 8015730:	2b00      	cmp	r3, #0
 8015732:	d001      	beq.n	8015738 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8015734:	f7ec fe46 	bl	80023c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801573e:	2318      	movs	r3, #24
 8015740:	2200      	movs	r2, #0
 8015742:	2100      	movs	r1, #0
 8015744:	f7f1 fe27 	bl	8007396 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801574e:	2358      	movs	r3, #88	; 0x58
 8015750:	2200      	movs	r2, #0
 8015752:	2180      	movs	r1, #128	; 0x80
 8015754:	f7f1 fe1f 	bl	8007396 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801575e:	23c0      	movs	r3, #192	; 0xc0
 8015760:	2200      	movs	r2, #0
 8015762:	2181      	movs	r1, #129	; 0x81
 8015764:	f7f1 fe17 	bl	8007396 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801576e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015772:	2200      	movs	r2, #0
 8015774:	2101      	movs	r1, #1
 8015776:	f7f1 fe0e 	bl	8007396 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015784:	2200      	movs	r2, #0
 8015786:	2182      	movs	r1, #130	; 0x82
 8015788:	f7f1 fe05 	bl	8007396 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801578c:	2300      	movs	r3, #0
}
 801578e:	4618      	mov	r0, r3
 8015790:	3708      	adds	r7, #8
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}
 8015796:	bf00      	nop
 8015798:	20004df0 	.word	0x20004df0
 801579c:	40005c00 	.word	0x40005c00

080157a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b084      	sub	sp, #16
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157a8:	2300      	movs	r3, #0
 80157aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157ac:	2300      	movs	r3, #0
 80157ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80157b6:	4618      	mov	r0, r3
 80157b8:	f7f0 fa23 	bl	8005c02 <HAL_PCD_Start>
 80157bc:	4603      	mov	r3, r0
 80157be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157c0:	7bfb      	ldrb	r3, [r7, #15]
 80157c2:	4618      	mov	r0, r3
 80157c4:	f000 f954 	bl	8015a70 <USBD_Get_USB_Status>
 80157c8:	4603      	mov	r3, r0
 80157ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80157cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3710      	adds	r7, #16
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}

080157d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80157d6:	b580      	push	{r7, lr}
 80157d8:	b084      	sub	sp, #16
 80157da:	af00      	add	r7, sp, #0
 80157dc:	6078      	str	r0, [r7, #4]
 80157de:	4608      	mov	r0, r1
 80157e0:	4611      	mov	r1, r2
 80157e2:	461a      	mov	r2, r3
 80157e4:	4603      	mov	r3, r0
 80157e6:	70fb      	strb	r3, [r7, #3]
 80157e8:	460b      	mov	r3, r1
 80157ea:	70bb      	strb	r3, [r7, #2]
 80157ec:	4613      	mov	r3, r2
 80157ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157f0:	2300      	movs	r3, #0
 80157f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157f4:	2300      	movs	r3, #0
 80157f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80157fe:	78bb      	ldrb	r3, [r7, #2]
 8015800:	883a      	ldrh	r2, [r7, #0]
 8015802:	78f9      	ldrb	r1, [r7, #3]
 8015804:	f7f0 fb3f 	bl	8005e86 <HAL_PCD_EP_Open>
 8015808:	4603      	mov	r3, r0
 801580a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801580c:	7bfb      	ldrb	r3, [r7, #15]
 801580e:	4618      	mov	r0, r3
 8015810:	f000 f92e 	bl	8015a70 <USBD_Get_USB_Status>
 8015814:	4603      	mov	r3, r0
 8015816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015818:	7bbb      	ldrb	r3, [r7, #14]
}
 801581a:	4618      	mov	r0, r3
 801581c:	3710      	adds	r7, #16
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}

08015822 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015822:	b580      	push	{r7, lr}
 8015824:	b084      	sub	sp, #16
 8015826:	af00      	add	r7, sp, #0
 8015828:	6078      	str	r0, [r7, #4]
 801582a:	460b      	mov	r3, r1
 801582c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801582e:	2300      	movs	r3, #0
 8015830:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015832:	2300      	movs	r3, #0
 8015834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801583c:	78fa      	ldrb	r2, [r7, #3]
 801583e:	4611      	mov	r1, r2
 8015840:	4618      	mov	r0, r3
 8015842:	f7f0 fb86 	bl	8005f52 <HAL_PCD_EP_Close>
 8015846:	4603      	mov	r3, r0
 8015848:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801584a:	7bfb      	ldrb	r3, [r7, #15]
 801584c:	4618      	mov	r0, r3
 801584e:	f000 f90f 	bl	8015a70 <USBD_Get_USB_Status>
 8015852:	4603      	mov	r3, r0
 8015854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015856:	7bbb      	ldrb	r3, [r7, #14]
}
 8015858:	4618      	mov	r0, r3
 801585a:	3710      	adds	r7, #16
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}

08015860 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b084      	sub	sp, #16
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	460b      	mov	r3, r1
 801586a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801586c:	2300      	movs	r3, #0
 801586e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015870:	2300      	movs	r3, #0
 8015872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801587a:	78fa      	ldrb	r2, [r7, #3]
 801587c:	4611      	mov	r1, r2
 801587e:	4618      	mov	r0, r3
 8015880:	f7f0 fc47 	bl	8006112 <HAL_PCD_EP_SetStall>
 8015884:	4603      	mov	r3, r0
 8015886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015888:	7bfb      	ldrb	r3, [r7, #15]
 801588a:	4618      	mov	r0, r3
 801588c:	f000 f8f0 	bl	8015a70 <USBD_Get_USB_Status>
 8015890:	4603      	mov	r3, r0
 8015892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015894:	7bbb      	ldrb	r3, [r7, #14]
}
 8015896:	4618      	mov	r0, r3
 8015898:	3710      	adds	r7, #16
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}

0801589e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801589e:	b580      	push	{r7, lr}
 80158a0:	b084      	sub	sp, #16
 80158a2:	af00      	add	r7, sp, #0
 80158a4:	6078      	str	r0, [r7, #4]
 80158a6:	460b      	mov	r3, r1
 80158a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158aa:	2300      	movs	r3, #0
 80158ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158ae:	2300      	movs	r3, #0
 80158b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80158b8:	78fa      	ldrb	r2, [r7, #3]
 80158ba:	4611      	mov	r1, r2
 80158bc:	4618      	mov	r0, r3
 80158be:	f7f0 fc7a 	bl	80061b6 <HAL_PCD_EP_ClrStall>
 80158c2:	4603      	mov	r3, r0
 80158c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158c6:	7bfb      	ldrb	r3, [r7, #15]
 80158c8:	4618      	mov	r0, r3
 80158ca:	f000 f8d1 	bl	8015a70 <USBD_Get_USB_Status>
 80158ce:	4603      	mov	r3, r0
 80158d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80158d4:	4618      	mov	r0, r3
 80158d6:	3710      	adds	r7, #16
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}

080158dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158dc:	b480      	push	{r7}
 80158de:	b085      	sub	sp, #20
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
 80158e4:	460b      	mov	r3, r1
 80158e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80158ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80158f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	da0c      	bge.n	8015912 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80158f8:	78fb      	ldrb	r3, [r7, #3]
 80158fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80158fe:	68f9      	ldr	r1, [r7, #12]
 8015900:	1c5a      	adds	r2, r3, #1
 8015902:	4613      	mov	r3, r2
 8015904:	009b      	lsls	r3, r3, #2
 8015906:	4413      	add	r3, r2
 8015908:	00db      	lsls	r3, r3, #3
 801590a:	440b      	add	r3, r1
 801590c:	3302      	adds	r3, #2
 801590e:	781b      	ldrb	r3, [r3, #0]
 8015910:	e00b      	b.n	801592a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015912:	78fb      	ldrb	r3, [r7, #3]
 8015914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015918:	68f9      	ldr	r1, [r7, #12]
 801591a:	4613      	mov	r3, r2
 801591c:	009b      	lsls	r3, r3, #2
 801591e:	4413      	add	r3, r2
 8015920:	00db      	lsls	r3, r3, #3
 8015922:	440b      	add	r3, r1
 8015924:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8015928:	781b      	ldrb	r3, [r3, #0]
  }
}
 801592a:	4618      	mov	r0, r3
 801592c:	3714      	adds	r7, #20
 801592e:	46bd      	mov	sp, r7
 8015930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015934:	4770      	bx	lr

08015936 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015936:	b580      	push	{r7, lr}
 8015938:	b084      	sub	sp, #16
 801593a:	af00      	add	r7, sp, #0
 801593c:	6078      	str	r0, [r7, #4]
 801593e:	460b      	mov	r3, r1
 8015940:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015942:	2300      	movs	r3, #0
 8015944:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015946:	2300      	movs	r3, #0
 8015948:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015950:	78fa      	ldrb	r2, [r7, #3]
 8015952:	4611      	mov	r1, r2
 8015954:	4618      	mov	r0, r3
 8015956:	f7f0 fa71 	bl	8005e3c <HAL_PCD_SetAddress>
 801595a:	4603      	mov	r3, r0
 801595c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801595e:	7bfb      	ldrb	r3, [r7, #15]
 8015960:	4618      	mov	r0, r3
 8015962:	f000 f885 	bl	8015a70 <USBD_Get_USB_Status>
 8015966:	4603      	mov	r3, r0
 8015968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801596a:	7bbb      	ldrb	r3, [r7, #14]
}
 801596c:	4618      	mov	r0, r3
 801596e:	3710      	adds	r7, #16
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}

08015974 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015974:	b580      	push	{r7, lr}
 8015976:	b086      	sub	sp, #24
 8015978:	af00      	add	r7, sp, #0
 801597a:	60f8      	str	r0, [r7, #12]
 801597c:	607a      	str	r2, [r7, #4]
 801597e:	461a      	mov	r2, r3
 8015980:	460b      	mov	r3, r1
 8015982:	72fb      	strb	r3, [r7, #11]
 8015984:	4613      	mov	r3, r2
 8015986:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015988:	2300      	movs	r3, #0
 801598a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801598c:	2300      	movs	r3, #0
 801598e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015996:	893b      	ldrh	r3, [r7, #8]
 8015998:	7af9      	ldrb	r1, [r7, #11]
 801599a:	687a      	ldr	r2, [r7, #4]
 801599c:	f7f0 fb76 	bl	800608c <HAL_PCD_EP_Transmit>
 80159a0:	4603      	mov	r3, r0
 80159a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159a4:	7dfb      	ldrb	r3, [r7, #23]
 80159a6:	4618      	mov	r0, r3
 80159a8:	f000 f862 	bl	8015a70 <USBD_Get_USB_Status>
 80159ac:	4603      	mov	r3, r0
 80159ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80159b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80159b2:	4618      	mov	r0, r3
 80159b4:	3718      	adds	r7, #24
 80159b6:	46bd      	mov	sp, r7
 80159b8:	bd80      	pop	{r7, pc}

080159ba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80159ba:	b580      	push	{r7, lr}
 80159bc:	b086      	sub	sp, #24
 80159be:	af00      	add	r7, sp, #0
 80159c0:	60f8      	str	r0, [r7, #12]
 80159c2:	607a      	str	r2, [r7, #4]
 80159c4:	461a      	mov	r2, r3
 80159c6:	460b      	mov	r3, r1
 80159c8:	72fb      	strb	r3, [r7, #11]
 80159ca:	4613      	mov	r3, r2
 80159cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159ce:	2300      	movs	r3, #0
 80159d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159d2:	2300      	movs	r3, #0
 80159d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80159dc:	893b      	ldrh	r3, [r7, #8]
 80159de:	7af9      	ldrb	r1, [r7, #11]
 80159e0:	687a      	ldr	r2, [r7, #4]
 80159e2:	f7f0 fafe 	bl	8005fe2 <HAL_PCD_EP_Receive>
 80159e6:	4603      	mov	r3, r0
 80159e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159ea:	7dfb      	ldrb	r3, [r7, #23]
 80159ec:	4618      	mov	r0, r3
 80159ee:	f000 f83f 	bl	8015a70 <USBD_Get_USB_Status>
 80159f2:	4603      	mov	r3, r0
 80159f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80159f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80159f8:	4618      	mov	r0, r3
 80159fa:	3718      	adds	r7, #24
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}

08015a00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b082      	sub	sp, #8
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
 8015a08:	460b      	mov	r3, r1
 8015a0a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015a12:	78fa      	ldrb	r2, [r7, #3]
 8015a14:	4611      	mov	r1, r2
 8015a16:	4618      	mov	r0, r3
 8015a18:	f7f0 fb20 	bl	800605c <HAL_PCD_EP_GetRxCount>
 8015a1c:	4603      	mov	r3, r0
}
 8015a1e:	4618      	mov	r0, r3
 8015a20:	3708      	adds	r7, #8
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bd80      	pop	{r7, pc}
	...

08015a28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015a28:	b480      	push	{r7}
 8015a2a:	b083      	sub	sp, #12
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015a30:	4b03      	ldr	r3, [pc, #12]	; (8015a40 <USBD_static_malloc+0x18>)
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	370c      	adds	r7, #12
 8015a36:	46bd      	mov	sp, r7
 8015a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3c:	4770      	bx	lr
 8015a3e:	bf00      	nop
 8015a40:	200050dc 	.word	0x200050dc

08015a44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015a44:	b480      	push	{r7}
 8015a46:	b083      	sub	sp, #12
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]

}
 8015a4c:	bf00      	nop
 8015a4e:	370c      	adds	r7, #12
 8015a50:	46bd      	mov	sp, r7
 8015a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a56:	4770      	bx	lr

08015a58 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a58:	b480      	push	{r7}
 8015a5a:	b083      	sub	sp, #12
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	460b      	mov	r3, r1
 8015a62:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8015a64:	bf00      	nop
 8015a66:	370c      	adds	r7, #12
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6e:	4770      	bx	lr

08015a70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015a70:	b480      	push	{r7}
 8015a72:	b085      	sub	sp, #20
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	4603      	mov	r3, r0
 8015a78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015a7e:	79fb      	ldrb	r3, [r7, #7]
 8015a80:	2b03      	cmp	r3, #3
 8015a82:	d817      	bhi.n	8015ab4 <USBD_Get_USB_Status+0x44>
 8015a84:	a201      	add	r2, pc, #4	; (adr r2, 8015a8c <USBD_Get_USB_Status+0x1c>)
 8015a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a8a:	bf00      	nop
 8015a8c:	08015a9d 	.word	0x08015a9d
 8015a90:	08015aa3 	.word	0x08015aa3
 8015a94:	08015aa9 	.word	0x08015aa9
 8015a98:	08015aaf 	.word	0x08015aaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8015aa0:	e00b      	b.n	8015aba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015aa2:	2302      	movs	r3, #2
 8015aa4:	73fb      	strb	r3, [r7, #15]
    break;
 8015aa6:	e008      	b.n	8015aba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015aa8:	2301      	movs	r3, #1
 8015aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8015aac:	e005      	b.n	8015aba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015aae:	2302      	movs	r3, #2
 8015ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8015ab2:	e002      	b.n	8015aba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015ab4:	2302      	movs	r3, #2
 8015ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8015ab8:	bf00      	nop
  }
  return usb_status;
 8015aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8015abc:	4618      	mov	r0, r3
 8015abe:	3714      	adds	r7, #20
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac6:	4770      	bx	lr

08015ac8 <__errno>:
 8015ac8:	4b01      	ldr	r3, [pc, #4]	; (8015ad0 <__errno+0x8>)
 8015aca:	6818      	ldr	r0, [r3, #0]
 8015acc:	4770      	bx	lr
 8015ace:	bf00      	nop
 8015ad0:	20000180 	.word	0x20000180

08015ad4 <__libc_init_array>:
 8015ad4:	b570      	push	{r4, r5, r6, lr}
 8015ad6:	4d0d      	ldr	r5, [pc, #52]	; (8015b0c <__libc_init_array+0x38>)
 8015ad8:	4c0d      	ldr	r4, [pc, #52]	; (8015b10 <__libc_init_array+0x3c>)
 8015ada:	1b64      	subs	r4, r4, r5
 8015adc:	10a4      	asrs	r4, r4, #2
 8015ade:	2600      	movs	r6, #0
 8015ae0:	42a6      	cmp	r6, r4
 8015ae2:	d109      	bne.n	8015af8 <__libc_init_array+0x24>
 8015ae4:	4d0b      	ldr	r5, [pc, #44]	; (8015b14 <__libc_init_array+0x40>)
 8015ae6:	4c0c      	ldr	r4, [pc, #48]	; (8015b18 <__libc_init_array+0x44>)
 8015ae8:	f000 fd2c 	bl	8016544 <_init>
 8015aec:	1b64      	subs	r4, r4, r5
 8015aee:	10a4      	asrs	r4, r4, #2
 8015af0:	2600      	movs	r6, #0
 8015af2:	42a6      	cmp	r6, r4
 8015af4:	d105      	bne.n	8015b02 <__libc_init_array+0x2e>
 8015af6:	bd70      	pop	{r4, r5, r6, pc}
 8015af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8015afc:	4798      	blx	r3
 8015afe:	3601      	adds	r6, #1
 8015b00:	e7ee      	b.n	8015ae0 <__libc_init_array+0xc>
 8015b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8015b06:	4798      	blx	r3
 8015b08:	3601      	adds	r6, #1
 8015b0a:	e7f2      	b.n	8015af2 <__libc_init_array+0x1e>
 8015b0c:	08016d10 	.word	0x08016d10
 8015b10:	08016d10 	.word	0x08016d10
 8015b14:	08016d10 	.word	0x08016d10
 8015b18:	08016d14 	.word	0x08016d14

08015b1c <memcpy>:
 8015b1c:	440a      	add	r2, r1
 8015b1e:	4291      	cmp	r1, r2
 8015b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8015b24:	d100      	bne.n	8015b28 <memcpy+0xc>
 8015b26:	4770      	bx	lr
 8015b28:	b510      	push	{r4, lr}
 8015b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015b32:	4291      	cmp	r1, r2
 8015b34:	d1f9      	bne.n	8015b2a <memcpy+0xe>
 8015b36:	bd10      	pop	{r4, pc}

08015b38 <memset>:
 8015b38:	4402      	add	r2, r0
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	4293      	cmp	r3, r2
 8015b3e:	d100      	bne.n	8015b42 <memset+0xa>
 8015b40:	4770      	bx	lr
 8015b42:	f803 1b01 	strb.w	r1, [r3], #1
 8015b46:	e7f9      	b.n	8015b3c <memset+0x4>

08015b48 <_puts_r>:
 8015b48:	b570      	push	{r4, r5, r6, lr}
 8015b4a:	460e      	mov	r6, r1
 8015b4c:	4605      	mov	r5, r0
 8015b4e:	b118      	cbz	r0, 8015b58 <_puts_r+0x10>
 8015b50:	6983      	ldr	r3, [r0, #24]
 8015b52:	b90b      	cbnz	r3, 8015b58 <_puts_r+0x10>
 8015b54:	f000 fa48 	bl	8015fe8 <__sinit>
 8015b58:	69ab      	ldr	r3, [r5, #24]
 8015b5a:	68ac      	ldr	r4, [r5, #8]
 8015b5c:	b913      	cbnz	r3, 8015b64 <_puts_r+0x1c>
 8015b5e:	4628      	mov	r0, r5
 8015b60:	f000 fa42 	bl	8015fe8 <__sinit>
 8015b64:	4b2c      	ldr	r3, [pc, #176]	; (8015c18 <_puts_r+0xd0>)
 8015b66:	429c      	cmp	r4, r3
 8015b68:	d120      	bne.n	8015bac <_puts_r+0x64>
 8015b6a:	686c      	ldr	r4, [r5, #4]
 8015b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015b6e:	07db      	lsls	r3, r3, #31
 8015b70:	d405      	bmi.n	8015b7e <_puts_r+0x36>
 8015b72:	89a3      	ldrh	r3, [r4, #12]
 8015b74:	0598      	lsls	r0, r3, #22
 8015b76:	d402      	bmi.n	8015b7e <_puts_r+0x36>
 8015b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b7a:	f000 fad3 	bl	8016124 <__retarget_lock_acquire_recursive>
 8015b7e:	89a3      	ldrh	r3, [r4, #12]
 8015b80:	0719      	lsls	r1, r3, #28
 8015b82:	d51d      	bpl.n	8015bc0 <_puts_r+0x78>
 8015b84:	6923      	ldr	r3, [r4, #16]
 8015b86:	b1db      	cbz	r3, 8015bc0 <_puts_r+0x78>
 8015b88:	3e01      	subs	r6, #1
 8015b8a:	68a3      	ldr	r3, [r4, #8]
 8015b8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015b90:	3b01      	subs	r3, #1
 8015b92:	60a3      	str	r3, [r4, #8]
 8015b94:	bb39      	cbnz	r1, 8015be6 <_puts_r+0x9e>
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	da38      	bge.n	8015c0c <_puts_r+0xc4>
 8015b9a:	4622      	mov	r2, r4
 8015b9c:	210a      	movs	r1, #10
 8015b9e:	4628      	mov	r0, r5
 8015ba0:	f000 f848 	bl	8015c34 <__swbuf_r>
 8015ba4:	3001      	adds	r0, #1
 8015ba6:	d011      	beq.n	8015bcc <_puts_r+0x84>
 8015ba8:	250a      	movs	r5, #10
 8015baa:	e011      	b.n	8015bd0 <_puts_r+0x88>
 8015bac:	4b1b      	ldr	r3, [pc, #108]	; (8015c1c <_puts_r+0xd4>)
 8015bae:	429c      	cmp	r4, r3
 8015bb0:	d101      	bne.n	8015bb6 <_puts_r+0x6e>
 8015bb2:	68ac      	ldr	r4, [r5, #8]
 8015bb4:	e7da      	b.n	8015b6c <_puts_r+0x24>
 8015bb6:	4b1a      	ldr	r3, [pc, #104]	; (8015c20 <_puts_r+0xd8>)
 8015bb8:	429c      	cmp	r4, r3
 8015bba:	bf08      	it	eq
 8015bbc:	68ec      	ldreq	r4, [r5, #12]
 8015bbe:	e7d5      	b.n	8015b6c <_puts_r+0x24>
 8015bc0:	4621      	mov	r1, r4
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	f000 f888 	bl	8015cd8 <__swsetup_r>
 8015bc8:	2800      	cmp	r0, #0
 8015bca:	d0dd      	beq.n	8015b88 <_puts_r+0x40>
 8015bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8015bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015bd2:	07da      	lsls	r2, r3, #31
 8015bd4:	d405      	bmi.n	8015be2 <_puts_r+0x9a>
 8015bd6:	89a3      	ldrh	r3, [r4, #12]
 8015bd8:	059b      	lsls	r3, r3, #22
 8015bda:	d402      	bmi.n	8015be2 <_puts_r+0x9a>
 8015bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015bde:	f000 faa2 	bl	8016126 <__retarget_lock_release_recursive>
 8015be2:	4628      	mov	r0, r5
 8015be4:	bd70      	pop	{r4, r5, r6, pc}
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	da04      	bge.n	8015bf4 <_puts_r+0xac>
 8015bea:	69a2      	ldr	r2, [r4, #24]
 8015bec:	429a      	cmp	r2, r3
 8015bee:	dc06      	bgt.n	8015bfe <_puts_r+0xb6>
 8015bf0:	290a      	cmp	r1, #10
 8015bf2:	d004      	beq.n	8015bfe <_puts_r+0xb6>
 8015bf4:	6823      	ldr	r3, [r4, #0]
 8015bf6:	1c5a      	adds	r2, r3, #1
 8015bf8:	6022      	str	r2, [r4, #0]
 8015bfa:	7019      	strb	r1, [r3, #0]
 8015bfc:	e7c5      	b.n	8015b8a <_puts_r+0x42>
 8015bfe:	4622      	mov	r2, r4
 8015c00:	4628      	mov	r0, r5
 8015c02:	f000 f817 	bl	8015c34 <__swbuf_r>
 8015c06:	3001      	adds	r0, #1
 8015c08:	d1bf      	bne.n	8015b8a <_puts_r+0x42>
 8015c0a:	e7df      	b.n	8015bcc <_puts_r+0x84>
 8015c0c:	6823      	ldr	r3, [r4, #0]
 8015c0e:	250a      	movs	r5, #10
 8015c10:	1c5a      	adds	r2, r3, #1
 8015c12:	6022      	str	r2, [r4, #0]
 8015c14:	701d      	strb	r5, [r3, #0]
 8015c16:	e7db      	b.n	8015bd0 <_puts_r+0x88>
 8015c18:	08016cd0 	.word	0x08016cd0
 8015c1c:	08016cf0 	.word	0x08016cf0
 8015c20:	08016cb0 	.word	0x08016cb0

08015c24 <puts>:
 8015c24:	4b02      	ldr	r3, [pc, #8]	; (8015c30 <puts+0xc>)
 8015c26:	4601      	mov	r1, r0
 8015c28:	6818      	ldr	r0, [r3, #0]
 8015c2a:	f7ff bf8d 	b.w	8015b48 <_puts_r>
 8015c2e:	bf00      	nop
 8015c30:	20000180 	.word	0x20000180

08015c34 <__swbuf_r>:
 8015c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c36:	460e      	mov	r6, r1
 8015c38:	4614      	mov	r4, r2
 8015c3a:	4605      	mov	r5, r0
 8015c3c:	b118      	cbz	r0, 8015c46 <__swbuf_r+0x12>
 8015c3e:	6983      	ldr	r3, [r0, #24]
 8015c40:	b90b      	cbnz	r3, 8015c46 <__swbuf_r+0x12>
 8015c42:	f000 f9d1 	bl	8015fe8 <__sinit>
 8015c46:	4b21      	ldr	r3, [pc, #132]	; (8015ccc <__swbuf_r+0x98>)
 8015c48:	429c      	cmp	r4, r3
 8015c4a:	d12b      	bne.n	8015ca4 <__swbuf_r+0x70>
 8015c4c:	686c      	ldr	r4, [r5, #4]
 8015c4e:	69a3      	ldr	r3, [r4, #24]
 8015c50:	60a3      	str	r3, [r4, #8]
 8015c52:	89a3      	ldrh	r3, [r4, #12]
 8015c54:	071a      	lsls	r2, r3, #28
 8015c56:	d52f      	bpl.n	8015cb8 <__swbuf_r+0x84>
 8015c58:	6923      	ldr	r3, [r4, #16]
 8015c5a:	b36b      	cbz	r3, 8015cb8 <__swbuf_r+0x84>
 8015c5c:	6923      	ldr	r3, [r4, #16]
 8015c5e:	6820      	ldr	r0, [r4, #0]
 8015c60:	1ac0      	subs	r0, r0, r3
 8015c62:	6963      	ldr	r3, [r4, #20]
 8015c64:	b2f6      	uxtb	r6, r6
 8015c66:	4283      	cmp	r3, r0
 8015c68:	4637      	mov	r7, r6
 8015c6a:	dc04      	bgt.n	8015c76 <__swbuf_r+0x42>
 8015c6c:	4621      	mov	r1, r4
 8015c6e:	4628      	mov	r0, r5
 8015c70:	f000 f926 	bl	8015ec0 <_fflush_r>
 8015c74:	bb30      	cbnz	r0, 8015cc4 <__swbuf_r+0x90>
 8015c76:	68a3      	ldr	r3, [r4, #8]
 8015c78:	3b01      	subs	r3, #1
 8015c7a:	60a3      	str	r3, [r4, #8]
 8015c7c:	6823      	ldr	r3, [r4, #0]
 8015c7e:	1c5a      	adds	r2, r3, #1
 8015c80:	6022      	str	r2, [r4, #0]
 8015c82:	701e      	strb	r6, [r3, #0]
 8015c84:	6963      	ldr	r3, [r4, #20]
 8015c86:	3001      	adds	r0, #1
 8015c88:	4283      	cmp	r3, r0
 8015c8a:	d004      	beq.n	8015c96 <__swbuf_r+0x62>
 8015c8c:	89a3      	ldrh	r3, [r4, #12]
 8015c8e:	07db      	lsls	r3, r3, #31
 8015c90:	d506      	bpl.n	8015ca0 <__swbuf_r+0x6c>
 8015c92:	2e0a      	cmp	r6, #10
 8015c94:	d104      	bne.n	8015ca0 <__swbuf_r+0x6c>
 8015c96:	4621      	mov	r1, r4
 8015c98:	4628      	mov	r0, r5
 8015c9a:	f000 f911 	bl	8015ec0 <_fflush_r>
 8015c9e:	b988      	cbnz	r0, 8015cc4 <__swbuf_r+0x90>
 8015ca0:	4638      	mov	r0, r7
 8015ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ca4:	4b0a      	ldr	r3, [pc, #40]	; (8015cd0 <__swbuf_r+0x9c>)
 8015ca6:	429c      	cmp	r4, r3
 8015ca8:	d101      	bne.n	8015cae <__swbuf_r+0x7a>
 8015caa:	68ac      	ldr	r4, [r5, #8]
 8015cac:	e7cf      	b.n	8015c4e <__swbuf_r+0x1a>
 8015cae:	4b09      	ldr	r3, [pc, #36]	; (8015cd4 <__swbuf_r+0xa0>)
 8015cb0:	429c      	cmp	r4, r3
 8015cb2:	bf08      	it	eq
 8015cb4:	68ec      	ldreq	r4, [r5, #12]
 8015cb6:	e7ca      	b.n	8015c4e <__swbuf_r+0x1a>
 8015cb8:	4621      	mov	r1, r4
 8015cba:	4628      	mov	r0, r5
 8015cbc:	f000 f80c 	bl	8015cd8 <__swsetup_r>
 8015cc0:	2800      	cmp	r0, #0
 8015cc2:	d0cb      	beq.n	8015c5c <__swbuf_r+0x28>
 8015cc4:	f04f 37ff 	mov.w	r7, #4294967295
 8015cc8:	e7ea      	b.n	8015ca0 <__swbuf_r+0x6c>
 8015cca:	bf00      	nop
 8015ccc:	08016cd0 	.word	0x08016cd0
 8015cd0:	08016cf0 	.word	0x08016cf0
 8015cd4:	08016cb0 	.word	0x08016cb0

08015cd8 <__swsetup_r>:
 8015cd8:	4b32      	ldr	r3, [pc, #200]	; (8015da4 <__swsetup_r+0xcc>)
 8015cda:	b570      	push	{r4, r5, r6, lr}
 8015cdc:	681d      	ldr	r5, [r3, #0]
 8015cde:	4606      	mov	r6, r0
 8015ce0:	460c      	mov	r4, r1
 8015ce2:	b125      	cbz	r5, 8015cee <__swsetup_r+0x16>
 8015ce4:	69ab      	ldr	r3, [r5, #24]
 8015ce6:	b913      	cbnz	r3, 8015cee <__swsetup_r+0x16>
 8015ce8:	4628      	mov	r0, r5
 8015cea:	f000 f97d 	bl	8015fe8 <__sinit>
 8015cee:	4b2e      	ldr	r3, [pc, #184]	; (8015da8 <__swsetup_r+0xd0>)
 8015cf0:	429c      	cmp	r4, r3
 8015cf2:	d10f      	bne.n	8015d14 <__swsetup_r+0x3c>
 8015cf4:	686c      	ldr	r4, [r5, #4]
 8015cf6:	89a3      	ldrh	r3, [r4, #12]
 8015cf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015cfc:	0719      	lsls	r1, r3, #28
 8015cfe:	d42c      	bmi.n	8015d5a <__swsetup_r+0x82>
 8015d00:	06dd      	lsls	r5, r3, #27
 8015d02:	d411      	bmi.n	8015d28 <__swsetup_r+0x50>
 8015d04:	2309      	movs	r3, #9
 8015d06:	6033      	str	r3, [r6, #0]
 8015d08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015d0c:	81a3      	strh	r3, [r4, #12]
 8015d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8015d12:	e03e      	b.n	8015d92 <__swsetup_r+0xba>
 8015d14:	4b25      	ldr	r3, [pc, #148]	; (8015dac <__swsetup_r+0xd4>)
 8015d16:	429c      	cmp	r4, r3
 8015d18:	d101      	bne.n	8015d1e <__swsetup_r+0x46>
 8015d1a:	68ac      	ldr	r4, [r5, #8]
 8015d1c:	e7eb      	b.n	8015cf6 <__swsetup_r+0x1e>
 8015d1e:	4b24      	ldr	r3, [pc, #144]	; (8015db0 <__swsetup_r+0xd8>)
 8015d20:	429c      	cmp	r4, r3
 8015d22:	bf08      	it	eq
 8015d24:	68ec      	ldreq	r4, [r5, #12]
 8015d26:	e7e6      	b.n	8015cf6 <__swsetup_r+0x1e>
 8015d28:	0758      	lsls	r0, r3, #29
 8015d2a:	d512      	bpl.n	8015d52 <__swsetup_r+0x7a>
 8015d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d2e:	b141      	cbz	r1, 8015d42 <__swsetup_r+0x6a>
 8015d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d34:	4299      	cmp	r1, r3
 8015d36:	d002      	beq.n	8015d3e <__swsetup_r+0x66>
 8015d38:	4630      	mov	r0, r6
 8015d3a:	f000 fa5b 	bl	80161f4 <_free_r>
 8015d3e:	2300      	movs	r3, #0
 8015d40:	6363      	str	r3, [r4, #52]	; 0x34
 8015d42:	89a3      	ldrh	r3, [r4, #12]
 8015d44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015d48:	81a3      	strh	r3, [r4, #12]
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	6063      	str	r3, [r4, #4]
 8015d4e:	6923      	ldr	r3, [r4, #16]
 8015d50:	6023      	str	r3, [r4, #0]
 8015d52:	89a3      	ldrh	r3, [r4, #12]
 8015d54:	f043 0308 	orr.w	r3, r3, #8
 8015d58:	81a3      	strh	r3, [r4, #12]
 8015d5a:	6923      	ldr	r3, [r4, #16]
 8015d5c:	b94b      	cbnz	r3, 8015d72 <__swsetup_r+0x9a>
 8015d5e:	89a3      	ldrh	r3, [r4, #12]
 8015d60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d68:	d003      	beq.n	8015d72 <__swsetup_r+0x9a>
 8015d6a:	4621      	mov	r1, r4
 8015d6c:	4630      	mov	r0, r6
 8015d6e:	f000 fa01 	bl	8016174 <__smakebuf_r>
 8015d72:	89a0      	ldrh	r0, [r4, #12]
 8015d74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d78:	f010 0301 	ands.w	r3, r0, #1
 8015d7c:	d00a      	beq.n	8015d94 <__swsetup_r+0xbc>
 8015d7e:	2300      	movs	r3, #0
 8015d80:	60a3      	str	r3, [r4, #8]
 8015d82:	6963      	ldr	r3, [r4, #20]
 8015d84:	425b      	negs	r3, r3
 8015d86:	61a3      	str	r3, [r4, #24]
 8015d88:	6923      	ldr	r3, [r4, #16]
 8015d8a:	b943      	cbnz	r3, 8015d9e <__swsetup_r+0xc6>
 8015d8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015d90:	d1ba      	bne.n	8015d08 <__swsetup_r+0x30>
 8015d92:	bd70      	pop	{r4, r5, r6, pc}
 8015d94:	0781      	lsls	r1, r0, #30
 8015d96:	bf58      	it	pl
 8015d98:	6963      	ldrpl	r3, [r4, #20]
 8015d9a:	60a3      	str	r3, [r4, #8]
 8015d9c:	e7f4      	b.n	8015d88 <__swsetup_r+0xb0>
 8015d9e:	2000      	movs	r0, #0
 8015da0:	e7f7      	b.n	8015d92 <__swsetup_r+0xba>
 8015da2:	bf00      	nop
 8015da4:	20000180 	.word	0x20000180
 8015da8:	08016cd0 	.word	0x08016cd0
 8015dac:	08016cf0 	.word	0x08016cf0
 8015db0:	08016cb0 	.word	0x08016cb0

08015db4 <__sflush_r>:
 8015db4:	898a      	ldrh	r2, [r1, #12]
 8015db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dba:	4605      	mov	r5, r0
 8015dbc:	0710      	lsls	r0, r2, #28
 8015dbe:	460c      	mov	r4, r1
 8015dc0:	d458      	bmi.n	8015e74 <__sflush_r+0xc0>
 8015dc2:	684b      	ldr	r3, [r1, #4]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	dc05      	bgt.n	8015dd4 <__sflush_r+0x20>
 8015dc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	dc02      	bgt.n	8015dd4 <__sflush_r+0x20>
 8015dce:	2000      	movs	r0, #0
 8015dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dd6:	2e00      	cmp	r6, #0
 8015dd8:	d0f9      	beq.n	8015dce <__sflush_r+0x1a>
 8015dda:	2300      	movs	r3, #0
 8015ddc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015de0:	682f      	ldr	r7, [r5, #0]
 8015de2:	602b      	str	r3, [r5, #0]
 8015de4:	d032      	beq.n	8015e4c <__sflush_r+0x98>
 8015de6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015de8:	89a3      	ldrh	r3, [r4, #12]
 8015dea:	075a      	lsls	r2, r3, #29
 8015dec:	d505      	bpl.n	8015dfa <__sflush_r+0x46>
 8015dee:	6863      	ldr	r3, [r4, #4]
 8015df0:	1ac0      	subs	r0, r0, r3
 8015df2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015df4:	b10b      	cbz	r3, 8015dfa <__sflush_r+0x46>
 8015df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015df8:	1ac0      	subs	r0, r0, r3
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	4602      	mov	r2, r0
 8015dfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e00:	6a21      	ldr	r1, [r4, #32]
 8015e02:	4628      	mov	r0, r5
 8015e04:	47b0      	blx	r6
 8015e06:	1c43      	adds	r3, r0, #1
 8015e08:	89a3      	ldrh	r3, [r4, #12]
 8015e0a:	d106      	bne.n	8015e1a <__sflush_r+0x66>
 8015e0c:	6829      	ldr	r1, [r5, #0]
 8015e0e:	291d      	cmp	r1, #29
 8015e10:	d82c      	bhi.n	8015e6c <__sflush_r+0xb8>
 8015e12:	4a2a      	ldr	r2, [pc, #168]	; (8015ebc <__sflush_r+0x108>)
 8015e14:	40ca      	lsrs	r2, r1
 8015e16:	07d6      	lsls	r6, r2, #31
 8015e18:	d528      	bpl.n	8015e6c <__sflush_r+0xb8>
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	6062      	str	r2, [r4, #4]
 8015e1e:	04d9      	lsls	r1, r3, #19
 8015e20:	6922      	ldr	r2, [r4, #16]
 8015e22:	6022      	str	r2, [r4, #0]
 8015e24:	d504      	bpl.n	8015e30 <__sflush_r+0x7c>
 8015e26:	1c42      	adds	r2, r0, #1
 8015e28:	d101      	bne.n	8015e2e <__sflush_r+0x7a>
 8015e2a:	682b      	ldr	r3, [r5, #0]
 8015e2c:	b903      	cbnz	r3, 8015e30 <__sflush_r+0x7c>
 8015e2e:	6560      	str	r0, [r4, #84]	; 0x54
 8015e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e32:	602f      	str	r7, [r5, #0]
 8015e34:	2900      	cmp	r1, #0
 8015e36:	d0ca      	beq.n	8015dce <__sflush_r+0x1a>
 8015e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e3c:	4299      	cmp	r1, r3
 8015e3e:	d002      	beq.n	8015e46 <__sflush_r+0x92>
 8015e40:	4628      	mov	r0, r5
 8015e42:	f000 f9d7 	bl	80161f4 <_free_r>
 8015e46:	2000      	movs	r0, #0
 8015e48:	6360      	str	r0, [r4, #52]	; 0x34
 8015e4a:	e7c1      	b.n	8015dd0 <__sflush_r+0x1c>
 8015e4c:	6a21      	ldr	r1, [r4, #32]
 8015e4e:	2301      	movs	r3, #1
 8015e50:	4628      	mov	r0, r5
 8015e52:	47b0      	blx	r6
 8015e54:	1c41      	adds	r1, r0, #1
 8015e56:	d1c7      	bne.n	8015de8 <__sflush_r+0x34>
 8015e58:	682b      	ldr	r3, [r5, #0]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d0c4      	beq.n	8015de8 <__sflush_r+0x34>
 8015e5e:	2b1d      	cmp	r3, #29
 8015e60:	d001      	beq.n	8015e66 <__sflush_r+0xb2>
 8015e62:	2b16      	cmp	r3, #22
 8015e64:	d101      	bne.n	8015e6a <__sflush_r+0xb6>
 8015e66:	602f      	str	r7, [r5, #0]
 8015e68:	e7b1      	b.n	8015dce <__sflush_r+0x1a>
 8015e6a:	89a3      	ldrh	r3, [r4, #12]
 8015e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e70:	81a3      	strh	r3, [r4, #12]
 8015e72:	e7ad      	b.n	8015dd0 <__sflush_r+0x1c>
 8015e74:	690f      	ldr	r7, [r1, #16]
 8015e76:	2f00      	cmp	r7, #0
 8015e78:	d0a9      	beq.n	8015dce <__sflush_r+0x1a>
 8015e7a:	0793      	lsls	r3, r2, #30
 8015e7c:	680e      	ldr	r6, [r1, #0]
 8015e7e:	bf08      	it	eq
 8015e80:	694b      	ldreq	r3, [r1, #20]
 8015e82:	600f      	str	r7, [r1, #0]
 8015e84:	bf18      	it	ne
 8015e86:	2300      	movne	r3, #0
 8015e88:	eba6 0807 	sub.w	r8, r6, r7
 8015e8c:	608b      	str	r3, [r1, #8]
 8015e8e:	f1b8 0f00 	cmp.w	r8, #0
 8015e92:	dd9c      	ble.n	8015dce <__sflush_r+0x1a>
 8015e94:	6a21      	ldr	r1, [r4, #32]
 8015e96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e98:	4643      	mov	r3, r8
 8015e9a:	463a      	mov	r2, r7
 8015e9c:	4628      	mov	r0, r5
 8015e9e:	47b0      	blx	r6
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	dc06      	bgt.n	8015eb2 <__sflush_r+0xfe>
 8015ea4:	89a3      	ldrh	r3, [r4, #12]
 8015ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015eaa:	81a3      	strh	r3, [r4, #12]
 8015eac:	f04f 30ff 	mov.w	r0, #4294967295
 8015eb0:	e78e      	b.n	8015dd0 <__sflush_r+0x1c>
 8015eb2:	4407      	add	r7, r0
 8015eb4:	eba8 0800 	sub.w	r8, r8, r0
 8015eb8:	e7e9      	b.n	8015e8e <__sflush_r+0xda>
 8015eba:	bf00      	nop
 8015ebc:	20400001 	.word	0x20400001

08015ec0 <_fflush_r>:
 8015ec0:	b538      	push	{r3, r4, r5, lr}
 8015ec2:	690b      	ldr	r3, [r1, #16]
 8015ec4:	4605      	mov	r5, r0
 8015ec6:	460c      	mov	r4, r1
 8015ec8:	b913      	cbnz	r3, 8015ed0 <_fflush_r+0x10>
 8015eca:	2500      	movs	r5, #0
 8015ecc:	4628      	mov	r0, r5
 8015ece:	bd38      	pop	{r3, r4, r5, pc}
 8015ed0:	b118      	cbz	r0, 8015eda <_fflush_r+0x1a>
 8015ed2:	6983      	ldr	r3, [r0, #24]
 8015ed4:	b90b      	cbnz	r3, 8015eda <_fflush_r+0x1a>
 8015ed6:	f000 f887 	bl	8015fe8 <__sinit>
 8015eda:	4b14      	ldr	r3, [pc, #80]	; (8015f2c <_fflush_r+0x6c>)
 8015edc:	429c      	cmp	r4, r3
 8015ede:	d11b      	bne.n	8015f18 <_fflush_r+0x58>
 8015ee0:	686c      	ldr	r4, [r5, #4]
 8015ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d0ef      	beq.n	8015eca <_fflush_r+0xa>
 8015eea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015eec:	07d0      	lsls	r0, r2, #31
 8015eee:	d404      	bmi.n	8015efa <_fflush_r+0x3a>
 8015ef0:	0599      	lsls	r1, r3, #22
 8015ef2:	d402      	bmi.n	8015efa <_fflush_r+0x3a>
 8015ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ef6:	f000 f915 	bl	8016124 <__retarget_lock_acquire_recursive>
 8015efa:	4628      	mov	r0, r5
 8015efc:	4621      	mov	r1, r4
 8015efe:	f7ff ff59 	bl	8015db4 <__sflush_r>
 8015f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015f04:	07da      	lsls	r2, r3, #31
 8015f06:	4605      	mov	r5, r0
 8015f08:	d4e0      	bmi.n	8015ecc <_fflush_r+0xc>
 8015f0a:	89a3      	ldrh	r3, [r4, #12]
 8015f0c:	059b      	lsls	r3, r3, #22
 8015f0e:	d4dd      	bmi.n	8015ecc <_fflush_r+0xc>
 8015f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f12:	f000 f908 	bl	8016126 <__retarget_lock_release_recursive>
 8015f16:	e7d9      	b.n	8015ecc <_fflush_r+0xc>
 8015f18:	4b05      	ldr	r3, [pc, #20]	; (8015f30 <_fflush_r+0x70>)
 8015f1a:	429c      	cmp	r4, r3
 8015f1c:	d101      	bne.n	8015f22 <_fflush_r+0x62>
 8015f1e:	68ac      	ldr	r4, [r5, #8]
 8015f20:	e7df      	b.n	8015ee2 <_fflush_r+0x22>
 8015f22:	4b04      	ldr	r3, [pc, #16]	; (8015f34 <_fflush_r+0x74>)
 8015f24:	429c      	cmp	r4, r3
 8015f26:	bf08      	it	eq
 8015f28:	68ec      	ldreq	r4, [r5, #12]
 8015f2a:	e7da      	b.n	8015ee2 <_fflush_r+0x22>
 8015f2c:	08016cd0 	.word	0x08016cd0
 8015f30:	08016cf0 	.word	0x08016cf0
 8015f34:	08016cb0 	.word	0x08016cb0

08015f38 <std>:
 8015f38:	2300      	movs	r3, #0
 8015f3a:	b510      	push	{r4, lr}
 8015f3c:	4604      	mov	r4, r0
 8015f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8015f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f46:	6083      	str	r3, [r0, #8]
 8015f48:	8181      	strh	r1, [r0, #12]
 8015f4a:	6643      	str	r3, [r0, #100]	; 0x64
 8015f4c:	81c2      	strh	r2, [r0, #14]
 8015f4e:	6183      	str	r3, [r0, #24]
 8015f50:	4619      	mov	r1, r3
 8015f52:	2208      	movs	r2, #8
 8015f54:	305c      	adds	r0, #92	; 0x5c
 8015f56:	f7ff fdef 	bl	8015b38 <memset>
 8015f5a:	4b05      	ldr	r3, [pc, #20]	; (8015f70 <std+0x38>)
 8015f5c:	6263      	str	r3, [r4, #36]	; 0x24
 8015f5e:	4b05      	ldr	r3, [pc, #20]	; (8015f74 <std+0x3c>)
 8015f60:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f62:	4b05      	ldr	r3, [pc, #20]	; (8015f78 <std+0x40>)
 8015f64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f66:	4b05      	ldr	r3, [pc, #20]	; (8015f7c <std+0x44>)
 8015f68:	6224      	str	r4, [r4, #32]
 8015f6a:	6323      	str	r3, [r4, #48]	; 0x30
 8015f6c:	bd10      	pop	{r4, pc}
 8015f6e:	bf00      	nop
 8015f70:	080163d5 	.word	0x080163d5
 8015f74:	080163f7 	.word	0x080163f7
 8015f78:	0801642f 	.word	0x0801642f
 8015f7c:	08016453 	.word	0x08016453

08015f80 <_cleanup_r>:
 8015f80:	4901      	ldr	r1, [pc, #4]	; (8015f88 <_cleanup_r+0x8>)
 8015f82:	f000 b8af 	b.w	80160e4 <_fwalk_reent>
 8015f86:	bf00      	nop
 8015f88:	08015ec1 	.word	0x08015ec1

08015f8c <__sfmoreglue>:
 8015f8c:	b570      	push	{r4, r5, r6, lr}
 8015f8e:	2268      	movs	r2, #104	; 0x68
 8015f90:	1e4d      	subs	r5, r1, #1
 8015f92:	4355      	muls	r5, r2
 8015f94:	460e      	mov	r6, r1
 8015f96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f9a:	f000 f997 	bl	80162cc <_malloc_r>
 8015f9e:	4604      	mov	r4, r0
 8015fa0:	b140      	cbz	r0, 8015fb4 <__sfmoreglue+0x28>
 8015fa2:	2100      	movs	r1, #0
 8015fa4:	e9c0 1600 	strd	r1, r6, [r0]
 8015fa8:	300c      	adds	r0, #12
 8015faa:	60a0      	str	r0, [r4, #8]
 8015fac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015fb0:	f7ff fdc2 	bl	8015b38 <memset>
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	bd70      	pop	{r4, r5, r6, pc}

08015fb8 <__sfp_lock_acquire>:
 8015fb8:	4801      	ldr	r0, [pc, #4]	; (8015fc0 <__sfp_lock_acquire+0x8>)
 8015fba:	f000 b8b3 	b.w	8016124 <__retarget_lock_acquire_recursive>
 8015fbe:	bf00      	nop
 8015fc0:	200052fd 	.word	0x200052fd

08015fc4 <__sfp_lock_release>:
 8015fc4:	4801      	ldr	r0, [pc, #4]	; (8015fcc <__sfp_lock_release+0x8>)
 8015fc6:	f000 b8ae 	b.w	8016126 <__retarget_lock_release_recursive>
 8015fca:	bf00      	nop
 8015fcc:	200052fd 	.word	0x200052fd

08015fd0 <__sinit_lock_acquire>:
 8015fd0:	4801      	ldr	r0, [pc, #4]	; (8015fd8 <__sinit_lock_acquire+0x8>)
 8015fd2:	f000 b8a7 	b.w	8016124 <__retarget_lock_acquire_recursive>
 8015fd6:	bf00      	nop
 8015fd8:	200052fe 	.word	0x200052fe

08015fdc <__sinit_lock_release>:
 8015fdc:	4801      	ldr	r0, [pc, #4]	; (8015fe4 <__sinit_lock_release+0x8>)
 8015fde:	f000 b8a2 	b.w	8016126 <__retarget_lock_release_recursive>
 8015fe2:	bf00      	nop
 8015fe4:	200052fe 	.word	0x200052fe

08015fe8 <__sinit>:
 8015fe8:	b510      	push	{r4, lr}
 8015fea:	4604      	mov	r4, r0
 8015fec:	f7ff fff0 	bl	8015fd0 <__sinit_lock_acquire>
 8015ff0:	69a3      	ldr	r3, [r4, #24]
 8015ff2:	b11b      	cbz	r3, 8015ffc <__sinit+0x14>
 8015ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ff8:	f7ff bff0 	b.w	8015fdc <__sinit_lock_release>
 8015ffc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016000:	6523      	str	r3, [r4, #80]	; 0x50
 8016002:	4b13      	ldr	r3, [pc, #76]	; (8016050 <__sinit+0x68>)
 8016004:	4a13      	ldr	r2, [pc, #76]	; (8016054 <__sinit+0x6c>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	62a2      	str	r2, [r4, #40]	; 0x28
 801600a:	42a3      	cmp	r3, r4
 801600c:	bf04      	itt	eq
 801600e:	2301      	moveq	r3, #1
 8016010:	61a3      	streq	r3, [r4, #24]
 8016012:	4620      	mov	r0, r4
 8016014:	f000 f820 	bl	8016058 <__sfp>
 8016018:	6060      	str	r0, [r4, #4]
 801601a:	4620      	mov	r0, r4
 801601c:	f000 f81c 	bl	8016058 <__sfp>
 8016020:	60a0      	str	r0, [r4, #8]
 8016022:	4620      	mov	r0, r4
 8016024:	f000 f818 	bl	8016058 <__sfp>
 8016028:	2200      	movs	r2, #0
 801602a:	60e0      	str	r0, [r4, #12]
 801602c:	2104      	movs	r1, #4
 801602e:	6860      	ldr	r0, [r4, #4]
 8016030:	f7ff ff82 	bl	8015f38 <std>
 8016034:	68a0      	ldr	r0, [r4, #8]
 8016036:	2201      	movs	r2, #1
 8016038:	2109      	movs	r1, #9
 801603a:	f7ff ff7d 	bl	8015f38 <std>
 801603e:	68e0      	ldr	r0, [r4, #12]
 8016040:	2202      	movs	r2, #2
 8016042:	2112      	movs	r1, #18
 8016044:	f7ff ff78 	bl	8015f38 <std>
 8016048:	2301      	movs	r3, #1
 801604a:	61a3      	str	r3, [r4, #24]
 801604c:	e7d2      	b.n	8015ff4 <__sinit+0xc>
 801604e:	bf00      	nop
 8016050:	08016cac 	.word	0x08016cac
 8016054:	08015f81 	.word	0x08015f81

08016058 <__sfp>:
 8016058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801605a:	4607      	mov	r7, r0
 801605c:	f7ff ffac 	bl	8015fb8 <__sfp_lock_acquire>
 8016060:	4b1e      	ldr	r3, [pc, #120]	; (80160dc <__sfp+0x84>)
 8016062:	681e      	ldr	r6, [r3, #0]
 8016064:	69b3      	ldr	r3, [r6, #24]
 8016066:	b913      	cbnz	r3, 801606e <__sfp+0x16>
 8016068:	4630      	mov	r0, r6
 801606a:	f7ff ffbd 	bl	8015fe8 <__sinit>
 801606e:	3648      	adds	r6, #72	; 0x48
 8016070:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016074:	3b01      	subs	r3, #1
 8016076:	d503      	bpl.n	8016080 <__sfp+0x28>
 8016078:	6833      	ldr	r3, [r6, #0]
 801607a:	b30b      	cbz	r3, 80160c0 <__sfp+0x68>
 801607c:	6836      	ldr	r6, [r6, #0]
 801607e:	e7f7      	b.n	8016070 <__sfp+0x18>
 8016080:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016084:	b9d5      	cbnz	r5, 80160bc <__sfp+0x64>
 8016086:	4b16      	ldr	r3, [pc, #88]	; (80160e0 <__sfp+0x88>)
 8016088:	60e3      	str	r3, [r4, #12]
 801608a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801608e:	6665      	str	r5, [r4, #100]	; 0x64
 8016090:	f000 f847 	bl	8016122 <__retarget_lock_init_recursive>
 8016094:	f7ff ff96 	bl	8015fc4 <__sfp_lock_release>
 8016098:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801609c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80160a0:	6025      	str	r5, [r4, #0]
 80160a2:	61a5      	str	r5, [r4, #24]
 80160a4:	2208      	movs	r2, #8
 80160a6:	4629      	mov	r1, r5
 80160a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80160ac:	f7ff fd44 	bl	8015b38 <memset>
 80160b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80160b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80160b8:	4620      	mov	r0, r4
 80160ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160bc:	3468      	adds	r4, #104	; 0x68
 80160be:	e7d9      	b.n	8016074 <__sfp+0x1c>
 80160c0:	2104      	movs	r1, #4
 80160c2:	4638      	mov	r0, r7
 80160c4:	f7ff ff62 	bl	8015f8c <__sfmoreglue>
 80160c8:	4604      	mov	r4, r0
 80160ca:	6030      	str	r0, [r6, #0]
 80160cc:	2800      	cmp	r0, #0
 80160ce:	d1d5      	bne.n	801607c <__sfp+0x24>
 80160d0:	f7ff ff78 	bl	8015fc4 <__sfp_lock_release>
 80160d4:	230c      	movs	r3, #12
 80160d6:	603b      	str	r3, [r7, #0]
 80160d8:	e7ee      	b.n	80160b8 <__sfp+0x60>
 80160da:	bf00      	nop
 80160dc:	08016cac 	.word	0x08016cac
 80160e0:	ffff0001 	.word	0xffff0001

080160e4 <_fwalk_reent>:
 80160e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160e8:	4606      	mov	r6, r0
 80160ea:	4688      	mov	r8, r1
 80160ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80160f0:	2700      	movs	r7, #0
 80160f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160f6:	f1b9 0901 	subs.w	r9, r9, #1
 80160fa:	d505      	bpl.n	8016108 <_fwalk_reent+0x24>
 80160fc:	6824      	ldr	r4, [r4, #0]
 80160fe:	2c00      	cmp	r4, #0
 8016100:	d1f7      	bne.n	80160f2 <_fwalk_reent+0xe>
 8016102:	4638      	mov	r0, r7
 8016104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016108:	89ab      	ldrh	r3, [r5, #12]
 801610a:	2b01      	cmp	r3, #1
 801610c:	d907      	bls.n	801611e <_fwalk_reent+0x3a>
 801610e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016112:	3301      	adds	r3, #1
 8016114:	d003      	beq.n	801611e <_fwalk_reent+0x3a>
 8016116:	4629      	mov	r1, r5
 8016118:	4630      	mov	r0, r6
 801611a:	47c0      	blx	r8
 801611c:	4307      	orrs	r7, r0
 801611e:	3568      	adds	r5, #104	; 0x68
 8016120:	e7e9      	b.n	80160f6 <_fwalk_reent+0x12>

08016122 <__retarget_lock_init_recursive>:
 8016122:	4770      	bx	lr

08016124 <__retarget_lock_acquire_recursive>:
 8016124:	4770      	bx	lr

08016126 <__retarget_lock_release_recursive>:
 8016126:	4770      	bx	lr

08016128 <__swhatbuf_r>:
 8016128:	b570      	push	{r4, r5, r6, lr}
 801612a:	460e      	mov	r6, r1
 801612c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016130:	2900      	cmp	r1, #0
 8016132:	b096      	sub	sp, #88	; 0x58
 8016134:	4614      	mov	r4, r2
 8016136:	461d      	mov	r5, r3
 8016138:	da08      	bge.n	801614c <__swhatbuf_r+0x24>
 801613a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801613e:	2200      	movs	r2, #0
 8016140:	602a      	str	r2, [r5, #0]
 8016142:	061a      	lsls	r2, r3, #24
 8016144:	d410      	bmi.n	8016168 <__swhatbuf_r+0x40>
 8016146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801614a:	e00e      	b.n	801616a <__swhatbuf_r+0x42>
 801614c:	466a      	mov	r2, sp
 801614e:	f000 f9a7 	bl	80164a0 <_fstat_r>
 8016152:	2800      	cmp	r0, #0
 8016154:	dbf1      	blt.n	801613a <__swhatbuf_r+0x12>
 8016156:	9a01      	ldr	r2, [sp, #4]
 8016158:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801615c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016160:	425a      	negs	r2, r3
 8016162:	415a      	adcs	r2, r3
 8016164:	602a      	str	r2, [r5, #0]
 8016166:	e7ee      	b.n	8016146 <__swhatbuf_r+0x1e>
 8016168:	2340      	movs	r3, #64	; 0x40
 801616a:	2000      	movs	r0, #0
 801616c:	6023      	str	r3, [r4, #0]
 801616e:	b016      	add	sp, #88	; 0x58
 8016170:	bd70      	pop	{r4, r5, r6, pc}
	...

08016174 <__smakebuf_r>:
 8016174:	898b      	ldrh	r3, [r1, #12]
 8016176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016178:	079d      	lsls	r5, r3, #30
 801617a:	4606      	mov	r6, r0
 801617c:	460c      	mov	r4, r1
 801617e:	d507      	bpl.n	8016190 <__smakebuf_r+0x1c>
 8016180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016184:	6023      	str	r3, [r4, #0]
 8016186:	6123      	str	r3, [r4, #16]
 8016188:	2301      	movs	r3, #1
 801618a:	6163      	str	r3, [r4, #20]
 801618c:	b002      	add	sp, #8
 801618e:	bd70      	pop	{r4, r5, r6, pc}
 8016190:	ab01      	add	r3, sp, #4
 8016192:	466a      	mov	r2, sp
 8016194:	f7ff ffc8 	bl	8016128 <__swhatbuf_r>
 8016198:	9900      	ldr	r1, [sp, #0]
 801619a:	4605      	mov	r5, r0
 801619c:	4630      	mov	r0, r6
 801619e:	f000 f895 	bl	80162cc <_malloc_r>
 80161a2:	b948      	cbnz	r0, 80161b8 <__smakebuf_r+0x44>
 80161a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161a8:	059a      	lsls	r2, r3, #22
 80161aa:	d4ef      	bmi.n	801618c <__smakebuf_r+0x18>
 80161ac:	f023 0303 	bic.w	r3, r3, #3
 80161b0:	f043 0302 	orr.w	r3, r3, #2
 80161b4:	81a3      	strh	r3, [r4, #12]
 80161b6:	e7e3      	b.n	8016180 <__smakebuf_r+0xc>
 80161b8:	4b0d      	ldr	r3, [pc, #52]	; (80161f0 <__smakebuf_r+0x7c>)
 80161ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80161bc:	89a3      	ldrh	r3, [r4, #12]
 80161be:	6020      	str	r0, [r4, #0]
 80161c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80161c4:	81a3      	strh	r3, [r4, #12]
 80161c6:	9b00      	ldr	r3, [sp, #0]
 80161c8:	6163      	str	r3, [r4, #20]
 80161ca:	9b01      	ldr	r3, [sp, #4]
 80161cc:	6120      	str	r0, [r4, #16]
 80161ce:	b15b      	cbz	r3, 80161e8 <__smakebuf_r+0x74>
 80161d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161d4:	4630      	mov	r0, r6
 80161d6:	f000 f975 	bl	80164c4 <_isatty_r>
 80161da:	b128      	cbz	r0, 80161e8 <__smakebuf_r+0x74>
 80161dc:	89a3      	ldrh	r3, [r4, #12]
 80161de:	f023 0303 	bic.w	r3, r3, #3
 80161e2:	f043 0301 	orr.w	r3, r3, #1
 80161e6:	81a3      	strh	r3, [r4, #12]
 80161e8:	89a0      	ldrh	r0, [r4, #12]
 80161ea:	4305      	orrs	r5, r0
 80161ec:	81a5      	strh	r5, [r4, #12]
 80161ee:	e7cd      	b.n	801618c <__smakebuf_r+0x18>
 80161f0:	08015f81 	.word	0x08015f81

080161f4 <_free_r>:
 80161f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161f6:	2900      	cmp	r1, #0
 80161f8:	d044      	beq.n	8016284 <_free_r+0x90>
 80161fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161fe:	9001      	str	r0, [sp, #4]
 8016200:	2b00      	cmp	r3, #0
 8016202:	f1a1 0404 	sub.w	r4, r1, #4
 8016206:	bfb8      	it	lt
 8016208:	18e4      	addlt	r4, r4, r3
 801620a:	f000 f97d 	bl	8016508 <__malloc_lock>
 801620e:	4a1e      	ldr	r2, [pc, #120]	; (8016288 <_free_r+0x94>)
 8016210:	9801      	ldr	r0, [sp, #4]
 8016212:	6813      	ldr	r3, [r2, #0]
 8016214:	b933      	cbnz	r3, 8016224 <_free_r+0x30>
 8016216:	6063      	str	r3, [r4, #4]
 8016218:	6014      	str	r4, [r2, #0]
 801621a:	b003      	add	sp, #12
 801621c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016220:	f000 b978 	b.w	8016514 <__malloc_unlock>
 8016224:	42a3      	cmp	r3, r4
 8016226:	d908      	bls.n	801623a <_free_r+0x46>
 8016228:	6825      	ldr	r5, [r4, #0]
 801622a:	1961      	adds	r1, r4, r5
 801622c:	428b      	cmp	r3, r1
 801622e:	bf01      	itttt	eq
 8016230:	6819      	ldreq	r1, [r3, #0]
 8016232:	685b      	ldreq	r3, [r3, #4]
 8016234:	1949      	addeq	r1, r1, r5
 8016236:	6021      	streq	r1, [r4, #0]
 8016238:	e7ed      	b.n	8016216 <_free_r+0x22>
 801623a:	461a      	mov	r2, r3
 801623c:	685b      	ldr	r3, [r3, #4]
 801623e:	b10b      	cbz	r3, 8016244 <_free_r+0x50>
 8016240:	42a3      	cmp	r3, r4
 8016242:	d9fa      	bls.n	801623a <_free_r+0x46>
 8016244:	6811      	ldr	r1, [r2, #0]
 8016246:	1855      	adds	r5, r2, r1
 8016248:	42a5      	cmp	r5, r4
 801624a:	d10b      	bne.n	8016264 <_free_r+0x70>
 801624c:	6824      	ldr	r4, [r4, #0]
 801624e:	4421      	add	r1, r4
 8016250:	1854      	adds	r4, r2, r1
 8016252:	42a3      	cmp	r3, r4
 8016254:	6011      	str	r1, [r2, #0]
 8016256:	d1e0      	bne.n	801621a <_free_r+0x26>
 8016258:	681c      	ldr	r4, [r3, #0]
 801625a:	685b      	ldr	r3, [r3, #4]
 801625c:	6053      	str	r3, [r2, #4]
 801625e:	4421      	add	r1, r4
 8016260:	6011      	str	r1, [r2, #0]
 8016262:	e7da      	b.n	801621a <_free_r+0x26>
 8016264:	d902      	bls.n	801626c <_free_r+0x78>
 8016266:	230c      	movs	r3, #12
 8016268:	6003      	str	r3, [r0, #0]
 801626a:	e7d6      	b.n	801621a <_free_r+0x26>
 801626c:	6825      	ldr	r5, [r4, #0]
 801626e:	1961      	adds	r1, r4, r5
 8016270:	428b      	cmp	r3, r1
 8016272:	bf04      	itt	eq
 8016274:	6819      	ldreq	r1, [r3, #0]
 8016276:	685b      	ldreq	r3, [r3, #4]
 8016278:	6063      	str	r3, [r4, #4]
 801627a:	bf04      	itt	eq
 801627c:	1949      	addeq	r1, r1, r5
 801627e:	6021      	streq	r1, [r4, #0]
 8016280:	6054      	str	r4, [r2, #4]
 8016282:	e7ca      	b.n	801621a <_free_r+0x26>
 8016284:	b003      	add	sp, #12
 8016286:	bd30      	pop	{r4, r5, pc}
 8016288:	20005300 	.word	0x20005300

0801628c <sbrk_aligned>:
 801628c:	b570      	push	{r4, r5, r6, lr}
 801628e:	4e0e      	ldr	r6, [pc, #56]	; (80162c8 <sbrk_aligned+0x3c>)
 8016290:	460c      	mov	r4, r1
 8016292:	6831      	ldr	r1, [r6, #0]
 8016294:	4605      	mov	r5, r0
 8016296:	b911      	cbnz	r1, 801629e <sbrk_aligned+0x12>
 8016298:	f000 f88c 	bl	80163b4 <_sbrk_r>
 801629c:	6030      	str	r0, [r6, #0]
 801629e:	4621      	mov	r1, r4
 80162a0:	4628      	mov	r0, r5
 80162a2:	f000 f887 	bl	80163b4 <_sbrk_r>
 80162a6:	1c43      	adds	r3, r0, #1
 80162a8:	d00a      	beq.n	80162c0 <sbrk_aligned+0x34>
 80162aa:	1cc4      	adds	r4, r0, #3
 80162ac:	f024 0403 	bic.w	r4, r4, #3
 80162b0:	42a0      	cmp	r0, r4
 80162b2:	d007      	beq.n	80162c4 <sbrk_aligned+0x38>
 80162b4:	1a21      	subs	r1, r4, r0
 80162b6:	4628      	mov	r0, r5
 80162b8:	f000 f87c 	bl	80163b4 <_sbrk_r>
 80162bc:	3001      	adds	r0, #1
 80162be:	d101      	bne.n	80162c4 <sbrk_aligned+0x38>
 80162c0:	f04f 34ff 	mov.w	r4, #4294967295
 80162c4:	4620      	mov	r0, r4
 80162c6:	bd70      	pop	{r4, r5, r6, pc}
 80162c8:	20005304 	.word	0x20005304

080162cc <_malloc_r>:
 80162cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162d0:	1ccd      	adds	r5, r1, #3
 80162d2:	f025 0503 	bic.w	r5, r5, #3
 80162d6:	3508      	adds	r5, #8
 80162d8:	2d0c      	cmp	r5, #12
 80162da:	bf38      	it	cc
 80162dc:	250c      	movcc	r5, #12
 80162de:	2d00      	cmp	r5, #0
 80162e0:	4607      	mov	r7, r0
 80162e2:	db01      	blt.n	80162e8 <_malloc_r+0x1c>
 80162e4:	42a9      	cmp	r1, r5
 80162e6:	d905      	bls.n	80162f4 <_malloc_r+0x28>
 80162e8:	230c      	movs	r3, #12
 80162ea:	603b      	str	r3, [r7, #0]
 80162ec:	2600      	movs	r6, #0
 80162ee:	4630      	mov	r0, r6
 80162f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162f4:	4e2e      	ldr	r6, [pc, #184]	; (80163b0 <_malloc_r+0xe4>)
 80162f6:	f000 f907 	bl	8016508 <__malloc_lock>
 80162fa:	6833      	ldr	r3, [r6, #0]
 80162fc:	461c      	mov	r4, r3
 80162fe:	bb34      	cbnz	r4, 801634e <_malloc_r+0x82>
 8016300:	4629      	mov	r1, r5
 8016302:	4638      	mov	r0, r7
 8016304:	f7ff ffc2 	bl	801628c <sbrk_aligned>
 8016308:	1c43      	adds	r3, r0, #1
 801630a:	4604      	mov	r4, r0
 801630c:	d14d      	bne.n	80163aa <_malloc_r+0xde>
 801630e:	6834      	ldr	r4, [r6, #0]
 8016310:	4626      	mov	r6, r4
 8016312:	2e00      	cmp	r6, #0
 8016314:	d140      	bne.n	8016398 <_malloc_r+0xcc>
 8016316:	6823      	ldr	r3, [r4, #0]
 8016318:	4631      	mov	r1, r6
 801631a:	4638      	mov	r0, r7
 801631c:	eb04 0803 	add.w	r8, r4, r3
 8016320:	f000 f848 	bl	80163b4 <_sbrk_r>
 8016324:	4580      	cmp	r8, r0
 8016326:	d13a      	bne.n	801639e <_malloc_r+0xd2>
 8016328:	6821      	ldr	r1, [r4, #0]
 801632a:	3503      	adds	r5, #3
 801632c:	1a6d      	subs	r5, r5, r1
 801632e:	f025 0503 	bic.w	r5, r5, #3
 8016332:	3508      	adds	r5, #8
 8016334:	2d0c      	cmp	r5, #12
 8016336:	bf38      	it	cc
 8016338:	250c      	movcc	r5, #12
 801633a:	4629      	mov	r1, r5
 801633c:	4638      	mov	r0, r7
 801633e:	f7ff ffa5 	bl	801628c <sbrk_aligned>
 8016342:	3001      	adds	r0, #1
 8016344:	d02b      	beq.n	801639e <_malloc_r+0xd2>
 8016346:	6823      	ldr	r3, [r4, #0]
 8016348:	442b      	add	r3, r5
 801634a:	6023      	str	r3, [r4, #0]
 801634c:	e00e      	b.n	801636c <_malloc_r+0xa0>
 801634e:	6822      	ldr	r2, [r4, #0]
 8016350:	1b52      	subs	r2, r2, r5
 8016352:	d41e      	bmi.n	8016392 <_malloc_r+0xc6>
 8016354:	2a0b      	cmp	r2, #11
 8016356:	d916      	bls.n	8016386 <_malloc_r+0xba>
 8016358:	1961      	adds	r1, r4, r5
 801635a:	42a3      	cmp	r3, r4
 801635c:	6025      	str	r5, [r4, #0]
 801635e:	bf18      	it	ne
 8016360:	6059      	strne	r1, [r3, #4]
 8016362:	6863      	ldr	r3, [r4, #4]
 8016364:	bf08      	it	eq
 8016366:	6031      	streq	r1, [r6, #0]
 8016368:	5162      	str	r2, [r4, r5]
 801636a:	604b      	str	r3, [r1, #4]
 801636c:	4638      	mov	r0, r7
 801636e:	f104 060b 	add.w	r6, r4, #11
 8016372:	f000 f8cf 	bl	8016514 <__malloc_unlock>
 8016376:	f026 0607 	bic.w	r6, r6, #7
 801637a:	1d23      	adds	r3, r4, #4
 801637c:	1af2      	subs	r2, r6, r3
 801637e:	d0b6      	beq.n	80162ee <_malloc_r+0x22>
 8016380:	1b9b      	subs	r3, r3, r6
 8016382:	50a3      	str	r3, [r4, r2]
 8016384:	e7b3      	b.n	80162ee <_malloc_r+0x22>
 8016386:	6862      	ldr	r2, [r4, #4]
 8016388:	42a3      	cmp	r3, r4
 801638a:	bf0c      	ite	eq
 801638c:	6032      	streq	r2, [r6, #0]
 801638e:	605a      	strne	r2, [r3, #4]
 8016390:	e7ec      	b.n	801636c <_malloc_r+0xa0>
 8016392:	4623      	mov	r3, r4
 8016394:	6864      	ldr	r4, [r4, #4]
 8016396:	e7b2      	b.n	80162fe <_malloc_r+0x32>
 8016398:	4634      	mov	r4, r6
 801639a:	6876      	ldr	r6, [r6, #4]
 801639c:	e7b9      	b.n	8016312 <_malloc_r+0x46>
 801639e:	230c      	movs	r3, #12
 80163a0:	603b      	str	r3, [r7, #0]
 80163a2:	4638      	mov	r0, r7
 80163a4:	f000 f8b6 	bl	8016514 <__malloc_unlock>
 80163a8:	e7a1      	b.n	80162ee <_malloc_r+0x22>
 80163aa:	6025      	str	r5, [r4, #0]
 80163ac:	e7de      	b.n	801636c <_malloc_r+0xa0>
 80163ae:	bf00      	nop
 80163b0:	20005300 	.word	0x20005300

080163b4 <_sbrk_r>:
 80163b4:	b538      	push	{r3, r4, r5, lr}
 80163b6:	4d06      	ldr	r5, [pc, #24]	; (80163d0 <_sbrk_r+0x1c>)
 80163b8:	2300      	movs	r3, #0
 80163ba:	4604      	mov	r4, r0
 80163bc:	4608      	mov	r0, r1
 80163be:	602b      	str	r3, [r5, #0]
 80163c0:	f7ec f9f4 	bl	80027ac <_sbrk>
 80163c4:	1c43      	adds	r3, r0, #1
 80163c6:	d102      	bne.n	80163ce <_sbrk_r+0x1a>
 80163c8:	682b      	ldr	r3, [r5, #0]
 80163ca:	b103      	cbz	r3, 80163ce <_sbrk_r+0x1a>
 80163cc:	6023      	str	r3, [r4, #0]
 80163ce:	bd38      	pop	{r3, r4, r5, pc}
 80163d0:	20005308 	.word	0x20005308

080163d4 <__sread>:
 80163d4:	b510      	push	{r4, lr}
 80163d6:	460c      	mov	r4, r1
 80163d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163dc:	f000 f8a0 	bl	8016520 <_read_r>
 80163e0:	2800      	cmp	r0, #0
 80163e2:	bfab      	itete	ge
 80163e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80163e6:	89a3      	ldrhlt	r3, [r4, #12]
 80163e8:	181b      	addge	r3, r3, r0
 80163ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80163ee:	bfac      	ite	ge
 80163f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80163f2:	81a3      	strhlt	r3, [r4, #12]
 80163f4:	bd10      	pop	{r4, pc}

080163f6 <__swrite>:
 80163f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163fa:	461f      	mov	r7, r3
 80163fc:	898b      	ldrh	r3, [r1, #12]
 80163fe:	05db      	lsls	r3, r3, #23
 8016400:	4605      	mov	r5, r0
 8016402:	460c      	mov	r4, r1
 8016404:	4616      	mov	r6, r2
 8016406:	d505      	bpl.n	8016414 <__swrite+0x1e>
 8016408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801640c:	2302      	movs	r3, #2
 801640e:	2200      	movs	r2, #0
 8016410:	f000 f868 	bl	80164e4 <_lseek_r>
 8016414:	89a3      	ldrh	r3, [r4, #12]
 8016416:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801641a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801641e:	81a3      	strh	r3, [r4, #12]
 8016420:	4632      	mov	r2, r6
 8016422:	463b      	mov	r3, r7
 8016424:	4628      	mov	r0, r5
 8016426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801642a:	f000 b817 	b.w	801645c <_write_r>

0801642e <__sseek>:
 801642e:	b510      	push	{r4, lr}
 8016430:	460c      	mov	r4, r1
 8016432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016436:	f000 f855 	bl	80164e4 <_lseek_r>
 801643a:	1c43      	adds	r3, r0, #1
 801643c:	89a3      	ldrh	r3, [r4, #12]
 801643e:	bf15      	itete	ne
 8016440:	6560      	strne	r0, [r4, #84]	; 0x54
 8016442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801644a:	81a3      	strheq	r3, [r4, #12]
 801644c:	bf18      	it	ne
 801644e:	81a3      	strhne	r3, [r4, #12]
 8016450:	bd10      	pop	{r4, pc}

08016452 <__sclose>:
 8016452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016456:	f000 b813 	b.w	8016480 <_close_r>
	...

0801645c <_write_r>:
 801645c:	b538      	push	{r3, r4, r5, lr}
 801645e:	4d07      	ldr	r5, [pc, #28]	; (801647c <_write_r+0x20>)
 8016460:	4604      	mov	r4, r0
 8016462:	4608      	mov	r0, r1
 8016464:	4611      	mov	r1, r2
 8016466:	2200      	movs	r2, #0
 8016468:	602a      	str	r2, [r5, #0]
 801646a:	461a      	mov	r2, r3
 801646c:	f7fb fe26 	bl	80120bc <_write>
 8016470:	1c43      	adds	r3, r0, #1
 8016472:	d102      	bne.n	801647a <_write_r+0x1e>
 8016474:	682b      	ldr	r3, [r5, #0]
 8016476:	b103      	cbz	r3, 801647a <_write_r+0x1e>
 8016478:	6023      	str	r3, [r4, #0]
 801647a:	bd38      	pop	{r3, r4, r5, pc}
 801647c:	20005308 	.word	0x20005308

08016480 <_close_r>:
 8016480:	b538      	push	{r3, r4, r5, lr}
 8016482:	4d06      	ldr	r5, [pc, #24]	; (801649c <_close_r+0x1c>)
 8016484:	2300      	movs	r3, #0
 8016486:	4604      	mov	r4, r0
 8016488:	4608      	mov	r0, r1
 801648a:	602b      	str	r3, [r5, #0]
 801648c:	f7ec f959 	bl	8002742 <_close>
 8016490:	1c43      	adds	r3, r0, #1
 8016492:	d102      	bne.n	801649a <_close_r+0x1a>
 8016494:	682b      	ldr	r3, [r5, #0]
 8016496:	b103      	cbz	r3, 801649a <_close_r+0x1a>
 8016498:	6023      	str	r3, [r4, #0]
 801649a:	bd38      	pop	{r3, r4, r5, pc}
 801649c:	20005308 	.word	0x20005308

080164a0 <_fstat_r>:
 80164a0:	b538      	push	{r3, r4, r5, lr}
 80164a2:	4d07      	ldr	r5, [pc, #28]	; (80164c0 <_fstat_r+0x20>)
 80164a4:	2300      	movs	r3, #0
 80164a6:	4604      	mov	r4, r0
 80164a8:	4608      	mov	r0, r1
 80164aa:	4611      	mov	r1, r2
 80164ac:	602b      	str	r3, [r5, #0]
 80164ae:	f7ec f954 	bl	800275a <_fstat>
 80164b2:	1c43      	adds	r3, r0, #1
 80164b4:	d102      	bne.n	80164bc <_fstat_r+0x1c>
 80164b6:	682b      	ldr	r3, [r5, #0]
 80164b8:	b103      	cbz	r3, 80164bc <_fstat_r+0x1c>
 80164ba:	6023      	str	r3, [r4, #0]
 80164bc:	bd38      	pop	{r3, r4, r5, pc}
 80164be:	bf00      	nop
 80164c0:	20005308 	.word	0x20005308

080164c4 <_isatty_r>:
 80164c4:	b538      	push	{r3, r4, r5, lr}
 80164c6:	4d06      	ldr	r5, [pc, #24]	; (80164e0 <_isatty_r+0x1c>)
 80164c8:	2300      	movs	r3, #0
 80164ca:	4604      	mov	r4, r0
 80164cc:	4608      	mov	r0, r1
 80164ce:	602b      	str	r3, [r5, #0]
 80164d0:	f7ec f953 	bl	800277a <_isatty>
 80164d4:	1c43      	adds	r3, r0, #1
 80164d6:	d102      	bne.n	80164de <_isatty_r+0x1a>
 80164d8:	682b      	ldr	r3, [r5, #0]
 80164da:	b103      	cbz	r3, 80164de <_isatty_r+0x1a>
 80164dc:	6023      	str	r3, [r4, #0]
 80164de:	bd38      	pop	{r3, r4, r5, pc}
 80164e0:	20005308 	.word	0x20005308

080164e4 <_lseek_r>:
 80164e4:	b538      	push	{r3, r4, r5, lr}
 80164e6:	4d07      	ldr	r5, [pc, #28]	; (8016504 <_lseek_r+0x20>)
 80164e8:	4604      	mov	r4, r0
 80164ea:	4608      	mov	r0, r1
 80164ec:	4611      	mov	r1, r2
 80164ee:	2200      	movs	r2, #0
 80164f0:	602a      	str	r2, [r5, #0]
 80164f2:	461a      	mov	r2, r3
 80164f4:	f7ec f94c 	bl	8002790 <_lseek>
 80164f8:	1c43      	adds	r3, r0, #1
 80164fa:	d102      	bne.n	8016502 <_lseek_r+0x1e>
 80164fc:	682b      	ldr	r3, [r5, #0]
 80164fe:	b103      	cbz	r3, 8016502 <_lseek_r+0x1e>
 8016500:	6023      	str	r3, [r4, #0]
 8016502:	bd38      	pop	{r3, r4, r5, pc}
 8016504:	20005308 	.word	0x20005308

08016508 <__malloc_lock>:
 8016508:	4801      	ldr	r0, [pc, #4]	; (8016510 <__malloc_lock+0x8>)
 801650a:	f7ff be0b 	b.w	8016124 <__retarget_lock_acquire_recursive>
 801650e:	bf00      	nop
 8016510:	200052fc 	.word	0x200052fc

08016514 <__malloc_unlock>:
 8016514:	4801      	ldr	r0, [pc, #4]	; (801651c <__malloc_unlock+0x8>)
 8016516:	f7ff be06 	b.w	8016126 <__retarget_lock_release_recursive>
 801651a:	bf00      	nop
 801651c:	200052fc 	.word	0x200052fc

08016520 <_read_r>:
 8016520:	b538      	push	{r3, r4, r5, lr}
 8016522:	4d07      	ldr	r5, [pc, #28]	; (8016540 <_read_r+0x20>)
 8016524:	4604      	mov	r4, r0
 8016526:	4608      	mov	r0, r1
 8016528:	4611      	mov	r1, r2
 801652a:	2200      	movs	r2, #0
 801652c:	602a      	str	r2, [r5, #0]
 801652e:	461a      	mov	r2, r3
 8016530:	f7ec f8ea 	bl	8002708 <_read>
 8016534:	1c43      	adds	r3, r0, #1
 8016536:	d102      	bne.n	801653e <_read_r+0x1e>
 8016538:	682b      	ldr	r3, [r5, #0]
 801653a:	b103      	cbz	r3, 801653e <_read_r+0x1e>
 801653c:	6023      	str	r3, [r4, #0]
 801653e:	bd38      	pop	{r3, r4, r5, pc}
 8016540:	20005308 	.word	0x20005308

08016544 <_init>:
 8016544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016546:	bf00      	nop
 8016548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801654a:	bc08      	pop	{r3}
 801654c:	469e      	mov	lr, r3
 801654e:	4770      	bx	lr

08016550 <_fini>:
 8016550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016552:	bf00      	nop
 8016554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016556:	bc08      	pop	{r3}
 8016558:	469e      	mov	lr, r3
 801655a:	4770      	bx	lr
