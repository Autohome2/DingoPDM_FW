
DingoPDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000164d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  08016660  08016660  00026660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016de0  08016de0  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08016de0  08016de0  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016de0  08016de0  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016de0  08016de0  00026de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016de4  08016de4  00026de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08016de8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005124  200001e4  08016fcc  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005308  08016fcc  00035308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034919  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d9e  00000000  00000000  00064b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027c0  00000000  00000000  0006c8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023a8  00000000  00000000  0006f090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b849  00000000  00000000  00071438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003bf8a  00000000  00000000  0009cc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db149  00000000  00000000  000d8c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b3d54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a870  00000000  00000000  001b3da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016648 	.word	0x08016648

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08016648 	.word	0x08016648

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <ADS1x15_SendRegs>:
#include "ads1x15.h"

#define I2C_TIMEOUT 100

HAL_StatusTypeDef ADS1x15_SendRegs(I2C_HandleTypeDef* hi2c, uint16_t addr, ads1x15Settings_t *settings, uint8_t channel)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	461a      	mov	r2, r3
 80009b8:	460b      	mov	r3, r1
 80009ba:	817b      	strh	r3, [r7, #10]
 80009bc:	4613      	mov	r3, r2
 80009be:	727b      	strb	r3, [r7, #9]
  HAL_StatusTypeDef eStatus;

	if(channel > 3) return HAL_ERROR;
 80009c0:	7a7b      	ldrb	r3, [r7, #9]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d901      	bls.n	80009ca <ADS1x15_SendRegs+0x1e>
 80009c6:	2301      	movs	r3, #1
 80009c8:	e067      	b.n	8000a9a <ADS1x15_SendRegs+0xee>

	uint16_t config =
 80009ca:	f240 1303 	movw	r3, #259	; 0x103
 80009ce:	82fb      	strh	r3, [r7, #22]
				ADS1015_REG_CONFIG_CLAT_NONLAT |  // Non-latching (default val)
				ADS1015_REG_CONFIG_CPOL_ACTVLOW | // Alert/Rdy active low   (default val)
				ADS1015_REG_CONFIG_CMODE_TRAD |   // Traditional comparator (default val)
				ADS1015_REG_CONFIG_MODE_SINGLE;

	config |= settings->dataRate;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	791b      	ldrb	r3, [r3, #4]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	4313      	orrs	r3, r2
 80009da:	82fb      	strh	r3, [r7, #22]
	config |= settings->gain;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	885a      	ldrh	r2, [r3, #2]
 80009e0:	8afb      	ldrh	r3, [r7, #22]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	82fb      	strh	r3, [r7, #22]

	switch(channel){
 80009e6:	7a7b      	ldrb	r3, [r7, #9]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d81f      	bhi.n	8000a2c <ADS1x15_SendRegs+0x80>
 80009ec:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <ADS1x15_SendRegs+0x48>)
 80009ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f2:	bf00      	nop
 80009f4:	08000a05 	.word	0x08000a05
 80009f8:	08000a0f 	.word	0x08000a0f
 80009fc:	08000a19 	.word	0x08000a19
 8000a00:	08000a23 	.word	0x08000a23
	case (0):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8000a04:	8afb      	ldrh	r3, [r7, #22]
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0a:	82fb      	strh	r3, [r7, #22]
		break;
 8000a0c:	e00e      	b.n	8000a2c <ADS1x15_SendRegs+0x80>
	case (1):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8000a0e:	8afb      	ldrh	r3, [r7, #22]
 8000a10:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000a14:	82fb      	strh	r3, [r7, #22]
		break;
 8000a16:	e009      	b.n	8000a2c <ADS1x15_SendRegs+0x80>
	case (2):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8000a18:	8afb      	ldrh	r3, [r7, #22]
 8000a1a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000a1e:	82fb      	strh	r3, [r7, #22]
		break;
 8000a20:	e004      	b.n	8000a2c <ADS1x15_SendRegs+0x80>
	case (3):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8000a22:	8afb      	ldrh	r3, [r7, #22]
 8000a24:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a28:	82fb      	strh	r3, [r7, #22]
		break;
 8000a2a:	bf00      	nop
	}

	config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8000a2c:	8afb      	ldrh	r3, [r7, #22]
 8000a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a36:	82fb      	strh	r3, [r7, #22]

	uint8_t writeVals[3];

	writeVals[0] = ADS1015_REG_POINTER_CONFIG;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	743b      	strb	r3, [r7, #16]
	writeVals[1] = config >> 8;
 8000a3c:	8afb      	ldrh	r3, [r7, #22]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	747b      	strb	r3, [r7, #17]
	writeVals[2] = config & 0xFF;
 8000a46:	8afb      	ldrh	r3, [r7, #22]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	74bb      	strb	r3, [r7, #18]

	eStatus = HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, I2C_TIMEOUT);
 8000a4c:	897b      	ldrh	r3, [r7, #10]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	b299      	uxth	r1, r3
 8000a52:	f107 0210 	add.w	r2, r7, #16
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f004 fb55 	bl	800510c <HAL_I2C_Master_Transmit>
 8000a62:	4603      	mov	r3, r0
 8000a64:	757b      	strb	r3, [r7, #21]
  if( eStatus != HAL_OK)
 8000a66:	7d7b      	ldrb	r3, [r7, #21]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <ADS1x15_SendRegs+0xc4>
  {
    return eStatus;
 8000a6c:	7d7b      	ldrb	r3, [r7, #21]
 8000a6e:	e014      	b.n	8000a9a <ADS1x15_SendRegs+0xee>
  }

	//Send convert register
	writeVals[0] = ADS1015_REG_POINTER_CONVERT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	743b      	strb	r3, [r7, #16]

  eStatus = HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, I2C_TIMEOUT);
 8000a74:	897b      	ldrh	r3, [r7, #10]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	b299      	uxth	r1, r3
 8000a7a:	f107 0210 	add.w	r2, r7, #16
 8000a7e:	2364      	movs	r3, #100	; 0x64
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2301      	movs	r3, #1
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f004 fb41 	bl	800510c <HAL_I2C_Master_Transmit>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	757b      	strb	r3, [r7, #21]
  if( eStatus != HAL_OK)
 8000a8e:	7d7b      	ldrb	r3, [r7, #21]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <ADS1x15_SendRegs+0xec>
  {
    return eStatus;
 8000a94:	7d7b      	ldrb	r3, [r7, #21]
 8000a96:	e000      	b.n	8000a9a <ADS1x15_SendRegs+0xee>
  }

  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop

08000aa4 <ADS1x15_ReadADC>:

HAL_StatusTypeDef ADS1x15_ReadADC(I2C_HandleTypeDef* hi2c, uint16_t addr, ads1x15Settings_t *settings, uint16_t* val)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	817b      	strh	r3, [r7, #10]

  //Read received values
	uint8_t readVals[2];

	//Msg received - comms OK
	settings->commsOk = 1;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	719a      	strb	r2, [r3, #6]

	eStatus = HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 2, I2C_TIMEOUT);
 8000aba:	897b      	ldrh	r3, [r7, #10]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	b299      	uxth	r1, r3
 8000ac0:	f107 0210 	add.w	r2, r7, #16
 8000ac4:	2364      	movs	r3, #100	; 0x64
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2302      	movs	r3, #2
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f004 fc12 	bl	80052f4 <HAL_I2C_Master_Receive>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	757b      	strb	r3, [r7, #21]
	if( eStatus != HAL_OK)
 8000ad4:	7d7b      	ldrb	r3, [r7, #21]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <ADS1x15_ReadADC+0x3a>
  {
    return eStatus;
 8000ada:	7d7b      	ldrb	r3, [r7, #21]
 8000adc:	e01e      	b.n	8000b1c <ADS1x15_ReadADC+0x78>
  }

	uint16_t valRead = (readVals[0] << 8 | readVals[1]) >> settings->bitShift;
 8000ade:	7c3b      	ldrb	r3, [r7, #16]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	7c7a      	ldrb	r2, [r7, #17]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	7952      	ldrb	r2, [r2, #5]
 8000aea:	4113      	asrs	r3, r2
 8000aec:	82fb      	strh	r3, [r7, #22]

	if (settings->deviceType == ADS1115) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d104      	bne.n	8000b00 <ADS1x15_ReadADC+0x5c>
	  *val = valRead;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	8afa      	ldrh	r2, [r7, #22]
 8000afa:	801a      	strh	r2, [r3, #0]
	  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	e00d      	b.n	8000b1c <ADS1x15_ReadADC+0x78>
  }
	else {
    // Shift 12-bit results right 4 bits for the ADS1015,
    // making sure we keep the sign bit intact
    if (valRead > 0x07FF) {
 8000b00:	8afb      	ldrh	r3, [r7, #22]
 8000b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b06:	d305      	bcc.n	8000b14 <ADS1x15_ReadADC+0x70>
      // negative number - extend the sign to 16th bit
      valRead |= 0xF000;
 8000b08:	8afb      	ldrh	r3, [r7, #22]
 8000b0a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000b0e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000b12:	82fb      	strh	r3, [r7, #22]
    }
    *val = valRead;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	8afa      	ldrh	r2, [r7, #22]
 8000b18:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
  }
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <MCP9808_Init>:
#include "mcp9808.h"

uint8_t MCP9808_Overtemp, MCP9808_Undertemp, MCP9808_CriticalTemp;

uint8_t MCP9808_Init(I2C_HandleTypeDef* hi2c, uint16_t addr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
  if(MCP9808_Read16(hi2c, addr, MCP9808_REG_MANUF_ID) != 0x0054)
 8000b30:	887b      	ldrh	r3, [r7, #2]
 8000b32:	2206      	movs	r2, #6
 8000b34:	4619      	mov	r1, r3
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 f94e 	bl	8000dd8 <MCP9808_Read16>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b54      	cmp	r3, #84	; 0x54
 8000b40:	d001      	beq.n	8000b46 <MCP9808_Init+0x22>
    return 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e015      	b.n	8000b72 <MCP9808_Init+0x4e>
  if(MCP9808_Read16(hi2c, addr, MCP9808_REG_DEVICE_ID) != 0x0400)
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	2207      	movs	r2, #7
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f000 f943 	bl	8000dd8 <MCP9808_Read16>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b58:	d001      	beq.n	8000b5e <MCP9808_Init+0x3a>
    return 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e009      	b.n	8000b72 <MCP9808_Init+0x4e>
  //B6 = 0 (Tupper Tlower window unlocked)
  //B7 = 0 (Tcrit unlocked)
  //B8 = 0 (continous conversion)
  //B9-10 = 01 (Tupper Tlower hysterisis +1.5 deg C)
  //B11-15 = 00000 (not used)
  uint16_t config = (MCP9808_REG_CONFIG_ALERTCTRL | MCP9808_REG_CONFIG_HYST_1_5);
 8000b5e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000b62:	81fb      	strh	r3, [r7, #14]
  MCP9808_Write16(hi2c, addr, MCP9808_REG_CONFIG, config);
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	8879      	ldrh	r1, [r7, #2]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 f90e 	bl	8000d8c <MCP9808_Write16>
  return 1;
 8000b70:	2301      	movs	r3, #1
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <MCP9808_ReadTempC_Int>:

  return temp;
}

int16_t MCP9808_ReadTempC_Int(I2C_HandleTypeDef* hi2c, uint16_t addr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
  uint16_t t = MCP9808_Read16(hi2c, addr, MCP9808_REG_AMBIENT_TEMP);
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	2205      	movs	r2, #5
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 f922 	bl	8000dd8 <MCP9808_Read16>
 8000b94:	4603      	mov	r3, r0
 8000b96:	81fb      	strh	r3, [r7, #14]

  MCP9808_MapLimitBits(t);
 8000b98:	89fb      	ldrh	r3, [r7, #14]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f8ce 	bl	8000d3c <MCP9808_MapLimitBits>

  if (t != 0xFFFF) {
 8000ba0:	89fb      	ldrh	r3, [r7, #14]
 8000ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d01c      	beq.n	8000be4 <MCP9808_ReadTempC_Int+0x68>
    t = t & 0x0FFF;
 8000baa:	89fb      	ldrh	r3, [r7, #14]
 8000bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bb0:	81fb      	strh	r3, [r7, #14]
    t /= 16.0;
 8000bb2:	89fb      	ldrh	r3, [r7, #14]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fc5d 	bl	8000474 <__aeabi_i2d>
 8000bba:	f04f 0200 	mov.w	r2, #0
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MCP9808_ReadTempC_Int+0x74>)
 8000bc0:	f7ff fdec 	bl	800079c <__aeabi_ddiv>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	4610      	mov	r0, r2
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f7ff fece 	bl	800096c <__aeabi_d2uiz>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	81fb      	strh	r3, [r7, #14]
    if (t & 0x1000)
 8000bd4:	89fb      	ldrh	r3, [r7, #14]
 8000bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <MCP9808_ReadTempC_Int+0x68>
      t = -t;
 8000bde:	89fb      	ldrh	r3, [r7, #14]
 8000be0:	425b      	negs	r3, r3
 8000be2:	81fb      	strh	r3, [r7, #14]
  }
  return t;
 8000be4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40300000 	.word	0x40300000

08000bf4 <MCP9808_SetResolution>:
{
  return MCP9808_Read8(hi2c, addr, MCP9808_REG_RESOLUTION);
}

void MCP9808_SetResolution(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t val)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]
 8000c00:	4613      	mov	r3, r2
 8000c02:	707b      	strb	r3, [r7, #1]
  MCP9808_Write8(hi2c, addr, MCP9808_REG_RESOLUTION, val);
 8000c04:	787b      	ldrb	r3, [r7, #1]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	8879      	ldrh	r1, [r7, #2]
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f000 f913 	bl	8000e38 <MCP9808_Write8>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <MCP9808_SetLimit>:
  conf_shutdown = conf_register & ~MCP9808_REG_CONFIG_SHUTDOWN;
  MCP9808_Write16(hi2c, addr, MCP9808_REG_CONFIG, conf_shutdown);
}

uint8_t MCP9808_SetLimit(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, float val)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	460b      	mov	r3, r1
 8000c26:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c2a:	817b      	strh	r3, [r7, #10]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	727b      	strb	r3, [r7, #9]
  uint16_t newVal = val * 16.0;
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff fc31 	bl	8000498 <__aeabi_f2d>
 8000c36:	f04f 0200 	mov.w	r2, #0
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MCP9808_SetLimit+0xac>)
 8000c3c:	f7ff fc84 	bl	8000548 <__aeabi_dmul>
 8000c40:	4602      	mov	r2, r0
 8000c42:	460b      	mov	r3, r1
 8000c44:	4610      	mov	r0, r2
 8000c46:	4619      	mov	r1, r3
 8000c48:	f7ff fe90 	bl	800096c <__aeabi_d2uiz>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	82fb      	strh	r3, [r7, #22]
  if(val < 0)
 8000c50:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5c:	d503      	bpl.n	8000c66 <MCP9808_SetLimit+0x4a>
    newVal += 256;
 8000c5e:	8afb      	ldrh	r3, [r7, #22]
 8000c60:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c64:	82fb      	strh	r3, [r7, #22]
  MCP9808_Write16(hi2c, addr, reg, val * 16.0);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fc16 	bl	8000498 <__aeabi_f2d>
 8000c6c:	f04f 0200 	mov.w	r2, #0
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MCP9808_SetLimit+0xac>)
 8000c72:	f7ff fc69 	bl	8000548 <__aeabi_dmul>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f7ff fe75 	bl	800096c <__aeabi_d2uiz>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	7a7a      	ldrb	r2, [r7, #9]
 8000c88:	8979      	ldrh	r1, [r7, #10]
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f000 f87e 	bl	8000d8c <MCP9808_Write16>

  float temp = MCP9808_RawToTemp(MCP9808_Read16(hi2c, addr, reg));
 8000c90:	7a7a      	ldrb	r2, [r7, #9]
 8000c92:	897b      	ldrh	r3, [r7, #10]
 8000c94:	4619      	mov	r1, r3
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f000 f89e 	bl	8000dd8 <MCP9808_Read16>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f814 	bl	8000ccc <MCP9808_RawToTemp>
 8000ca4:	ed87 0a04 	vstr	s0, [r7, #16]

  if(val == temp)
 8000ca8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cac:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cb0:	eeb4 7a67 	vcmp.f32	s14, s15
 8000cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb8:	d101      	bne.n	8000cbe <MCP9808_SetLimit+0xa2>
    return 1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e000      	b.n	8000cc0 <MCP9808_SetLimit+0xa4>
  return 0;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40300000 	.word	0x40300000

08000ccc <MCP9808_RawToTemp>:

float MCP9808_RawToTemp(uint16_t raw)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
  float temp = 0.0;
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  if (raw != 0xFFFF) {
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d01d      	beq.n	8000d22 <MCP9808_RawToTemp+0x56>
    temp = raw & 0x0FFF;
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf4:	edc7 7a03 	vstr	s15, [r7, #12]
    temp /= 16.0;
 8000cf8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cfc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d04:	edc7 7a03 	vstr	s15, [r7, #12]
    if (raw & 0x1000)
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d007      	beq.n	8000d22 <MCP9808_RawToTemp+0x56>
      temp -= 256;
 8000d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d16:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000d38 <MCP9808_RawToTemp+0x6c>
 8000d1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d1e:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  return temp;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	ee07 3a90 	vmov	s15, r3
}
 8000d28:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	43800000 	.word	0x43800000

08000d3c <MCP9808_MapLimitBits>:

void MCP9808_MapLimitBits(uint16_t raw)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
  MCP9808_Overtemp     = (raw & MCP9808_REG_OVERTEMP) >> MCP9808_POS_OVERTEMP;
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	139b      	asrs	r3, r3, #14
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MCP9808_MapLimitBits+0x44>)
 8000d54:	701a      	strb	r2, [r3, #0]
  MCP9808_Undertemp    = (raw & MCP9808_REG_UNDERTEMP) >> MCP9808_POS_UNDERTEMP;
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	135b      	asrs	r3, r3, #13
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MCP9808_MapLimitBits+0x48>)
 8000d64:	701a      	strb	r2, [r3, #0]
  MCP9808_CriticalTemp = (raw & MCP9808_REG_CRITICALTEMP) >> MCP9808_POS_CRITICALTEMP;
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	0bdb      	lsrs	r3, r3, #15
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MCP9808_MapLimitBits+0x4c>)
 8000d70:	701a      	strb	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000200 	.word	0x20000200
 8000d84:	20000201 	.word	0x20000201
 8000d88:	20000202 	.word	0x20000202

08000d8c <MCP9808_Write16>:

void MCP9808_Write16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af02      	add	r7, sp, #8
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	4608      	mov	r0, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	817b      	strh	r3, [r7, #10]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	727b      	strb	r3, [r7, #9]
 8000da2:	4613      	mov	r3, r2
 8000da4:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[3];

  writeVals[0] = reg;
 8000da6:	7a7b      	ldrb	r3, [r7, #9]
 8000da8:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val >> 8;
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	757b      	strb	r3, [r7, #21]
  writeVals[2] = val & 0xFF;
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	75bb      	strb	r3, [r7, #22]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, 100);
 8000dba:	897b      	ldrh	r3, [r7, #10]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	b299      	uxth	r1, r3
 8000dc0:	f107 0214 	add.w	r2, r7, #20
 8000dc4:	2364      	movs	r3, #100	; 0x64
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2303      	movs	r3, #3
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f004 f99e 	bl	800510c <HAL_I2C_Master_Transmit>
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <MCP9808_Read16>:
uint16_t MCP9808_Read16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]
 8000de4:	4613      	mov	r3, r2
 8000de6:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[1];
  uint8_t readVals[2];
  uint16_t val = 0xFFFF;
 8000de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dec:	81fb      	strh	r3, [r7, #14]

  writeVals[0] = reg;
 8000dee:	787b      	ldrb	r3, [r7, #1]
 8000df0:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, 100);
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	b299      	uxth	r1, r3
 8000df8:	f107 020c 	add.w	r2, r7, #12
 8000dfc:	2364      	movs	r3, #100	; 0x64
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2301      	movs	r3, #1
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f004 f982 	bl	800510c <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 2, 100);
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	b299      	uxth	r1, r3
 8000e0e:	f107 0208 	add.w	r2, r7, #8
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2302      	movs	r3, #2
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f004 fa6b 	bl	80052f4 <HAL_I2C_Master_Receive>

  val = (readVals[0] << 8 | readVals[1]);
 8000e1e:	7a3b      	ldrb	r3, [r7, #8]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	7a7b      	ldrb	r3, [r7, #9]
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	81fb      	strh	r3, [r7, #14]

  return val;
 8000e2e:	89fb      	ldrh	r3, [r7, #14]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <MCP9808_Write8>:

void MCP9808_Write8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	4608      	mov	r0, r1
 8000e42:	4611      	mov	r1, r2
 8000e44:	461a      	mov	r2, r3
 8000e46:	4603      	mov	r3, r0
 8000e48:	817b      	strh	r3, [r7, #10]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	727b      	strb	r3, [r7, #9]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 8000e52:	7a7b      	ldrb	r3, [r7, #9]
 8000e54:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val;
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	757b      	strb	r3, [r7, #21]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8000e5c:	897b      	ldrh	r3, [r7, #10]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	b299      	uxth	r1, r3
 8000e62:	f107 0214 	add.w	r2, r7, #20
 8000e66:	2364      	movs	r3, #100	; 0x64
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f004 f94d 	bl	800510c <HAL_I2C_Master_Transmit>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <MCP9808_GetCriticalTemp>:

  return val;
}

uint8_t MCP9808_GetCriticalTemp()
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return MCP9808_CriticalTemp;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <MCP9808_GetCriticalTemp+0x14>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000202 	.word	0x20000202

08000e94 <MCP9808_GetOvertemp>:

uint8_t MCP9808_GetOvertemp()
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return MCP9808_Overtemp;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <MCP9808_GetOvertemp+0x14>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000200 	.word	0x20000200

08000eac <PCA9539_WriteReg8>:
 */

#include "pca9539.h"

void PCA9539_WriteReg8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint8_t val)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4603      	mov	r3, r0
 8000ebc:	807b      	strh	r3, [r7, #2]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	707b      	strb	r3, [r7, #1]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 8000ec6:	787b      	ldrb	r3, [r7, #1]
 8000ec8:	733b      	strb	r3, [r7, #12]
  writeVals[1] = val;
 8000eca:	783b      	ldrb	r3, [r7, #0]
 8000ecc:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	b299      	uxth	r1, r3
 8000ed4:	f107 020c 	add.w	r2, r7, #12
 8000ed8:	2364      	movs	r3, #100	; 0x64
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2302      	movs	r3, #2
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f004 f914 	bl	800510c <HAL_I2C_Master_Transmit>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <PCA9539_WriteReg16>:

  return val;
}

void PCA9539_WriteReg16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4603      	mov	r3, r0
 8000efc:	817b      	strh	r3, [r7, #10]
 8000efe:	460b      	mov	r3, r1
 8000f00:	727b      	strb	r3, [r7, #9]
 8000f02:	4613      	mov	r3, r2
 8000f04:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[3];

  writeVals[0] = reg;
 8000f06:	7a7b      	ldrb	r3, [r7, #9]
 8000f08:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val & 0xFF;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	757b      	strb	r3, [r7, #21]
  writeVals[2] = val >> 8;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	0a1b      	lsrs	r3, r3, #8
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	75bb      	strb	r3, [r7, #22]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, 100);
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	b299      	uxth	r1, r3
 8000f20:	f107 0214 	add.w	r2, r7, #20
 8000f24:	2364      	movs	r3, #100	; 0x64
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2303      	movs	r3, #3
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f004 f8ee 	bl	800510c <HAL_I2C_Master_Transmit>
}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <PCA9635_Init>:


#include "pca9635.h"

void PCA9635_Init(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t blinking)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
 8000f44:	4613      	mov	r3, r2
 8000f46:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];

  writeVals[0] = PCA9635_REG_MODE1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	733b      	strb	r3, [r7, #12]
  writeVals[1] = (PCA9635_MODE1_ALLCALL | PCA9635_MODE1_AI2); //Auto increment all registers
 8000f4c:	2381      	movs	r3, #129	; 0x81
 8000f4e:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	b299      	uxth	r1, r3
 8000f56:	f107 020c 	add.w	r2, r7, #12
 8000f5a:	2364      	movs	r3, #100	; 0x64
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2302      	movs	r3, #2
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f004 f8d3 	bl	800510c <HAL_I2C_Master_Transmit>

  if(blinking > 0){
 8000f66:	787b      	ldrb	r3, [r7, #1]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00e      	beq.n	8000f8a <PCA9635_Init+0x52>
    writeVals[0] = PCA9635_REG_MODE2;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	733b      	strb	r3, [r7, #12]
    writeVals[1] = (PCA9635_MODE2_OUTNE | PCA9635_MODE2_OUTDRV | PCA9635_MODE2_DMBLNK);
 8000f70:	2325      	movs	r3, #37	; 0x25
 8000f72:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	b299      	uxth	r1, r3
 8000f7a:	f107 020c 	add.w	r2, r7, #12
 8000f7e:	2364      	movs	r3, #100	; 0x64
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2302      	movs	r3, #2
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f004 f8c1 	bl	800510c <HAL_I2C_Master_Transmit>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <PCA9635_SetPWM>:

void PCA9635_SetPWM(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t channel, uint8_t value)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af02      	add	r7, sp, #8
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	807b      	strh	r3, [r7, #2]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	707b      	strb	r3, [r7, #1]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  if((channel >= 0) && (channel < 16)){
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	d810      	bhi.n	8000fd4 <PCA9635_SetPWM+0x42>
    writeVals[0] = PCA9635_REG_PWM(channel);
 8000fb2:	787b      	ldrb	r3, [r7, #1]
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	733b      	strb	r3, [r7, #12]
    writeVals[1] = value;
 8000fba:	783b      	ldrb	r3, [r7, #0]
 8000fbc:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	b299      	uxth	r1, r3
 8000fc4:	f107 020c 	add.w	r2, r7, #12
 8000fc8:	2364      	movs	r3, #100	; 0x64
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2302      	movs	r3, #2
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f004 f89c 	bl	800510c <HAL_I2C_Master_Transmit>
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <PCA9635_SetGroupPWM>:

void PCA9635_SetGroupPWM(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t value)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];
  writeVals[0] = PCA9635_REG_GRPPWM;
 8000fec:	2312      	movs	r3, #18
 8000fee:	733b      	strb	r3, [r7, #12]
  writeVals[1] = value;
 8000ff0:	787b      	ldrb	r3, [r7, #1]
 8000ff2:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	b299      	uxth	r1, r3
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f004 f881 	bl	800510c <HAL_I2C_Master_Transmit>
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <PCA9635_SetGroupFreq>:

void PCA9635_SetGroupFreq(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t value)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af02      	add	r7, sp, #8
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	460b      	mov	r3, r1
 800101c:	807b      	strh	r3, [r7, #2]
 800101e:	4613      	mov	r3, r2
 8001020:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];
  writeVals[0] = PCA9635_REG_GRPFREQ;
 8001022:	2313      	movs	r3, #19
 8001024:	733b      	strb	r3, [r7, #12]
  writeVals[1] = value;
 8001026:	787b      	ldrb	r3, [r7, #1]
 8001028:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	b299      	uxth	r1, r3
 8001030:	f107 020c 	add.w	r2, r7, #12
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2302      	movs	r3, #2
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f004 f866 	bl	800510c <HAL_I2C_Master_Transmit>
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <PCA9635_SetAllNum>:

void PCA9635_SetAllNum(I2C_HandleTypeDef* hi2c, uint16_t addr, uint32_t values)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af02      	add	r7, sp, #8
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	460b      	mov	r3, r1
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	817b      	strh	r3, [r7, #10]
  uint8_t writeVals[5];
  writeVals[0] = (PCA9635_REG_LEDOUT_BASE | PCA9635_REG_AI_ALL);
 8001056:	2394      	movs	r3, #148	; 0x94
 8001058:	743b      	strb	r3, [r7, #16]
  writeVals[1] = values & 0xFF;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	747b      	strb	r3, [r7, #17]
  writeVals[2] = (values >> 8) ;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	b2db      	uxtb	r3, r3
 8001066:	74bb      	strb	r3, [r7, #18]
  writeVals[3] = (values >> 16);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0c1b      	lsrs	r3, r3, #16
 800106c:	b2db      	uxtb	r3, r3
 800106e:	74fb      	strb	r3, [r7, #19]
  writeVals[4] = (values >> 24);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	0e1b      	lsrs	r3, r3, #24
 8001074:	b2db      	uxtb	r3, r3
 8001076:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 5, 100);
 8001078:	897b      	ldrh	r3, [r7, #10]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	b299      	uxth	r1, r3
 800107e:	f107 0210 	add.w	r2, r7, #16
 8001082:	2364      	movs	r3, #100	; 0x64
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2305      	movs	r3, #5
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f004 f83f 	bl	800510c <HAL_I2C_Master_Transmit>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <PCA9635_SetAll>:

void PCA9635_SetAll(I2C_HandleTypeDef* hi2c, uint16_t addr, PCA9635_LEDOnState_t state[16])
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b088      	sub	sp, #32
 800109a:	af02      	add	r7, sp, #8
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	460b      	mov	r3, r1
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	817b      	strh	r3, [r7, #10]
  uint8_t writeVals[5];
  writeVals[0] = (PCA9635_REG_LEDOUT_BASE | PCA9635_REG_AI_ALL);
 80010a4:	2394      	movs	r3, #148	; 0x94
 80010a6:	743b      	strb	r3, [r7, #16]
  writeVals[1] = state[0] + (state[1] << 2) + (state[2] << 4) + (state[3] << 6);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3301      	adds	r3, #1
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3302      	adds	r3, #2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	4413      	add	r3, r2
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3303      	adds	r3, #3
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	019b      	lsls	r3, r3, #6
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4413      	add	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	747b      	strb	r3, [r7, #17]
  writeVals[2] = state[4] + (state[5] << 2) + (state[6] << 4) + (state[7] << 6);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3304      	adds	r3, #4
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3305      	adds	r3, #5
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4413      	add	r3, r2
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3306      	adds	r3, #6
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3307      	adds	r3, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	019b      	lsls	r3, r3, #6
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4413      	add	r3, r2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	74bb      	strb	r3, [r7, #18]
  writeVals[3] = state[8] + (state[9] << 2) + (state[10] << 4) + (state[11] << 6);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3308      	adds	r3, #8
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3309      	adds	r3, #9
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4413      	add	r3, r2
 800111c:	b2da      	uxtb	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	330a      	adds	r3, #10
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4413      	add	r3, r2
 800112a:	b2da      	uxtb	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	330b      	adds	r3, #11
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	019b      	lsls	r3, r3, #6
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	74fb      	strb	r3, [r7, #19]
  writeVals[4] = state[12] + (state[13] << 2) + (state[14] << 4) + (state[15] << 6);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	330c      	adds	r3, #12
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	330d      	adds	r3, #13
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	4413      	add	r3, r2
 800114e:	b2da      	uxtb	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	330e      	adds	r3, #14
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4413      	add	r3, r2
 800115c:	b2da      	uxtb	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	330f      	adds	r3, #15
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	019b      	lsls	r3, r3, #6
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4413      	add	r3, r2
 800116a:	b2db      	uxtb	r3, r3
 800116c:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 5, 100);
 800116e:	897b      	ldrh	r3, [r7, #10]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	b299      	uxth	r1, r3
 8001174:	f107 0210 	add.w	r2, r7, #16
 8001178:	2364      	movs	r3, #100	; 0x64
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2305      	movs	r3, #5
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f003 ffc4 	bl	800510c <HAL_I2C_Master_Transmit>
}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <PCAL9554B_WriteReg8>:
 */

#include "pcal9554b.h"

void PCAL9554B_WriteReg8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint8_t val)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af02      	add	r7, sp, #8
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4603      	mov	r3, r0
 800119c:	807b      	strh	r3, [r7, #2]
 800119e:	460b      	mov	r3, r1
 80011a0:	707b      	strb	r3, [r7, #1]
 80011a2:	4613      	mov	r3, r2
 80011a4:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 80011a6:	787b      	ldrb	r3, [r7, #1]
 80011a8:	733b      	strb	r3, [r7, #12]
  writeVals[1] = val;
 80011aa:	783b      	ldrb	r3, [r7, #0]
 80011ac:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, 100);
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b299      	uxth	r1, r3
 80011b4:	f107 020c 	add.w	r2, r7, #12
 80011b8:	2364      	movs	r3, #100	; 0x64
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2302      	movs	r3, #2
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f003 ffa4 	bl	800510c <HAL_I2C_Master_Transmit>
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <PCAL9554B_ReadReg8>:

uint8_t PCAL9554B_ReadReg8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[1];
  uint8_t readVals[1];

  uint8_t val = 0xFF;
 80011dc:	23ff      	movs	r3, #255	; 0xff
 80011de:	73fb      	strb	r3, [r7, #15]

  writeVals[0] = reg;
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, 100);
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	b299      	uxth	r1, r3
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	2364      	movs	r3, #100	; 0x64
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f003 ff89 	bl	800510c <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 1, 100);
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	b299      	uxth	r1, r3
 8001200:	f107 0208 	add.w	r2, r7, #8
 8001204:	2364      	movs	r3, #100	; 0x64
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f004 f872 	bl	80052f4 <HAL_I2C_Master_Receive>

  val = readVals[0];
 8001210:	7a3b      	ldrb	r3, [r7, #8]
 8001212:	73fb      	strb	r3, [r7, #15]

  return val;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <TurningOff>:

#include "profet.h"

//Transient state
static void TurningOff(volatile ProfetTypeDef *profet)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	899b      	ldrh	r3, [r3, #12]
 800122a:	b29b      	uxth	r3, r3
 800122c:	43da      	mvns	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	8819      	ldrh	r1, [r3, #0]
 8001234:	b209      	sxth	r1, r1
 8001236:	b212      	sxth	r2, r2
 8001238:	400a      	ands	r2, r1
 800123a:	b212      	sxth	r2, r2
 800123c:	b292      	uxth	r2, r2
 800123e:	801a      	strh	r2, [r3, #0]
  profet->eState = OFF;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	705a      	strb	r2, [r3, #1]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <Off>:

static void Off(volatile ProfetTypeDef *profet)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  profet->cState = 'O';
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	224f      	movs	r2, #79	; 0x4f
 800125e:	70da      	strb	r2, [r3, #3]

  //Short circuit to battery check
  //TODO: Collapsing field will trigger this
  if (profet->nIL > 0.1) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	8c1b      	ldrh	r3, [r3, #32]
    //profet->eState = SHORT_CIRCUITING;
  }

  //Check for turn on
  if (profet->eReqState == ON) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	789b      	ldrb	r3, [r3, #2]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d102      	bne.n	8001274 <Off+0x22>
    profet->eState = TURNING_ON;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2208      	movs	r2, #8
 8001272:	705a      	strb	r2, [r3, #1]
  }
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <InRushing>:

//Transient state
static void InRushing(volatile ProfetTypeDef *profet)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port |= profet->nIN_Pin;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	899b      	ldrh	r3, [r3, #12]
 800128c:	b299      	uxth	r1, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	881a      	ldrh	r2, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	b292      	uxth	r2, r2
 8001298:	801a      	strh	r2, [r3, #0]
  profet->nIL_On_Time = HAL_GetTick();
 800129a:	f001 fafb 	bl	8002894 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	61da      	str	r2, [r3, #28]
  profet->eState  = IN_RUSH;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2202      	movs	r2, #2
 80012a8:	705a      	strb	r2, [r3, #1]
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <InRush>:

static void InRush(volatile ProfetTypeDef *profet)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  if (profet->nIL > profet->nIL_InRush_Limit) {
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	8c1b      	ldrh	r3, [r3, #32]
 80012be:	b29a      	uxth	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	8adb      	ldrh	r3, [r3, #22]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d902      	bls.n	80012d0 <InRush+0x1e>
    profet->eState = OVERCURRENTING;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	220b      	movs	r2, #11
 80012ce:	705a      	strb	r2, [r3, #1]
  }
  if((HAL_GetTick() - profet->nIL_On_Time) > profet->nIL_InRush_Time){
 80012d0:	f001 fae0 	bl	8002894 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	8b12      	ldrh	r2, [r2, #24]
 80012e0:	b292      	uxth	r2, r2
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d902      	bls.n	80012ec <InRush+0x3a>
    profet->eState = TURNING_ON;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2208      	movs	r2, #8
 80012ea:	705a      	strb	r2, [r3, #1]
  }
  //Check for turn off
  if (profet->eReqState == OFF) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <InRush+0x4a>
    profet->eState = TURNING_OFF;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2207      	movs	r2, #7
 80012fa:	705a      	strb	r2, [r3, #1]
  }
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <TurningOn>:

//Transient state
static void TurningOn(volatile ProfetTypeDef *profet)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port |= profet->nIN_Pin;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	899b      	ldrh	r3, [r3, #12]
 8001310:	b299      	uxth	r1, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	881a      	ldrh	r2, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	b292      	uxth	r2, r2
 800131c:	801a      	strh	r2, [r3, #0]
  profet->eState = ON;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	705a      	strb	r2, [r3, #1]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <On>:

static void On(volatile ProfetTypeDef *profet)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  profet->cState = '|';
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	227c      	movs	r2, #124	; 0x7c
 800133c:	70da      	strb	r2, [r3, #3]

  //TODO: Dead short vs open load
  //Dead short will register no current
  //How to differentiate between open load?
  if (profet->nIL == 0) {
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	8c1b      	ldrh	r3, [r3, #32]
  }

  //Check for fault (device overcurrent/overtemp/short)
  //IL will be very high
  //TODO: Calculate value from datasheet
  if (profet->nIS_Avg > 30000) {
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	89db      	ldrh	r3, [r3, #14]
 8001346:	b29b      	uxth	r3, r3
 8001348:	f247 5230 	movw	r2, #30000	; 0x7530
 800134c:	4293      	cmp	r3, r2
 800134e:	d902      	bls.n	8001356 <On+0x26>
    profet->eState = FAULTING;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	220c      	movs	r2, #12
 8001354:	705a      	strb	r2, [r3, #1]
  }

  //Check for turn off
  if (profet->eReqState == OFF) {
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	789b      	ldrb	r3, [r3, #2]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <On+0x36>
    profet->eState = TURNING_OFF;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2207      	movs	r2, #7
 8001364:	705a      	strb	r2, [r3, #1]
  }

  if ((profet->nIL > profet->nIL_Limit) && (profet->nOC_Detected == 0)){
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	8c1b      	ldrh	r3, [r3, #32]
 800136a:	b29a      	uxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	8a9b      	ldrh	r3, [r3, #20]
 8001370:	b29b      	uxth	r3, r3
 8001372:	429a      	cmp	r2, r3
 8001374:	d90e      	bls.n	8001394 <On+0x64>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d108      	bne.n	8001394 <On+0x64>
    profet->nIL_On_Time = HAL_GetTick();
 8001382:	f001 fa87 	bl	8002894 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	61da      	str	r2, [r3, #28]
    profet->nOC_Detected = 1;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  }

  if ((profet->nIL < profet->nIL_Limit) && (profet->nOC_Detected > 0)){
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	8c1b      	ldrh	r3, [r3, #32]
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	8a9b      	ldrh	r3, [r3, #20]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d209      	bcs.n	80013b8 <On+0x88>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <On+0x88>
    profet->nOC_Detected = 0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  }

  if(profet->nOC_Detected > 0){
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d017      	beq.n	80013f4 <On+0xc4>
    if((HAL_GetTick() - profet->nIL_On_Time) > GetTripTime(profet->eModel, profet->nIL, profet->nIL_Limit)){
 80013c4:	f001 fa66 	bl	8002894 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	1ad4      	subs	r4, r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2d8      	uxtb	r0, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	8c1b      	ldrh	r3, [r3, #32]
 80013da:	b299      	uxth	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	8a9b      	ldrh	r3, [r3, #20]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	f000 f9b0 	bl	8001748 <GetTripTime>
 80013e8:	4603      	mov	r3, r0
 80013ea:	429c      	cmp	r4, r3
 80013ec:	d902      	bls.n	80013f4 <On+0xc4>
      profet->eState = OVERCURRENTING;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	220b      	movs	r2, #11
 80013f2:	705a      	strb	r2, [r3, #1]
    }
  }
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd90      	pop	{r4, r7, pc}

080013fc <Overcurrenting>:

//Transient state
static void Overcurrenting(volatile ProfetTypeDef *profet)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  profet->nValStore = profet->nIL;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	8c1b      	ldrh	r3, [r3, #32]
 8001408:	b29a      	uxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	849a      	strh	r2, [r3, #36]	; 0x24
  *profet->nIN_Port &= ~profet->nIN_Pin;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	899b      	ldrh	r3, [r3, #12]
 8001412:	b29b      	uxth	r3, r3
 8001414:	43da      	mvns	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	8819      	ldrh	r1, [r3, #0]
 800141c:	b209      	sxth	r1, r1
 800141e:	b212      	sxth	r2, r2
 8001420:	400a      	ands	r2, r1
 8001422:	b212      	sxth	r2, r2
 8001424:	b292      	uxth	r2, r2
 8001426:	801a      	strh	r2, [r3, #0]
  profet->nOC_TriggerTime = HAL_GetTick();
 8001428:	f001 fa34 	bl	8002894 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
  profet->nOC_ResetCount++;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001438:	b2db      	uxtb	r3, r3
 800143a:	3301      	adds	r3, #1
 800143c:	b2da      	uxtb	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  profet->eState = OVERCURRENT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2204      	movs	r2, #4
 8001448:	705a      	strb	r2, [r3, #1]
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <Overcurrent>:

static void Overcurrent(volatile ProfetTypeDef *profet)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  profet->cState = 'C';
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2243      	movs	r2, #67	; 0x43
 800145e:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	899b      	ldrh	r3, [r3, #12]
 8001464:	b29b      	uxth	r3, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	8819      	ldrh	r1, [r3, #0]
 800146e:	b209      	sxth	r1, r1
 8001470:	b212      	sxth	r2, r2
 8001472:	400a      	ands	r2, r1
 8001474:	b212      	sxth	r2, r2
 8001476:	b292      	uxth	r2, r2
 8001478:	801a      	strh	r2, [r3, #0]
  if(profet->nOC_ResetCount <= profet->nOC_ResetLimit){
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001480:	b2da      	uxtb	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001488:	b2db      	uxtb	r3, r3
 800148a:	429a      	cmp	r2, r3
 800148c:	d80e      	bhi.n	80014ac <Overcurrent+0x5a>
    if((HAL_GetTick() - profet->nOC_TriggerTime) > profet->nOC_ResetTime){
 800148e:	f001 fa01 	bl	8002894 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800149e:	b292      	uxth	r2, r2
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d906      	bls.n	80014b2 <Overcurrent+0x60>
      profet->eState = IN_RUSHING;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2209      	movs	r2, #9
 80014a8:	705a      	strb	r2, [r3, #1]
 80014aa:	e002      	b.n	80014b2 <Overcurrent+0x60>
    }
  }
  else{
    profet->eState = SUSPENDING;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	220d      	movs	r2, #13
 80014b0:	705a      	strb	r2, [r3, #1]
  }

  //Check for turn off
  if (profet->eReqState == OFF) {
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	789b      	ldrb	r3, [r3, #2]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d106      	bne.n	80014ca <Overcurrent+0x78>
    profet->nOC_ResetCount = 0;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    profet->eState = TURNING_OFF;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2207      	movs	r2, #7
 80014c8:	705a      	strb	r2, [r3, #1]
  }
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <ShortCircuiting>:

//Transient state
static void ShortCircuiting(volatile ProfetTypeDef *profet)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  profet->nValStore = profet->nIL;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	8c1b      	ldrh	r3, [r3, #32]
 80014de:	b29a      	uxth	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	849a      	strh	r2, [r3, #36]	; 0x24
  profet->eState = SHORT_CIRCUIT;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2203      	movs	r2, #3
 80014e8:	705a      	strb	r2, [r3, #1]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <ShortCircuit>:

static void ShortCircuit(volatile ProfetTypeDef *profet)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  profet->cState = 'S';
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2253      	movs	r2, #83	; 0x53
 8001502:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	899b      	ldrh	r3, [r3, #12]
 8001508:	b29b      	uxth	r3, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	8819      	ldrh	r1, [r3, #0]
 8001512:	b209      	sxth	r1, r1
 8001514:	b212      	sxth	r2, r2
 8001516:	400a      	ands	r2, r1
 8001518:	b212      	sxth	r2, r2
 800151a:	b292      	uxth	r2, r2
 800151c:	801a      	strh	r2, [r3, #0]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <Suspending>:

//Transient state
static void Suspending(volatile ProfetTypeDef *profet)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	899b      	ldrh	r3, [r3, #12]
 8001536:	b29b      	uxth	r3, r3
 8001538:	43da      	mvns	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	8819      	ldrh	r1, [r3, #0]
 8001540:	b209      	sxth	r1, r1
 8001542:	b212      	sxth	r2, r2
 8001544:	400a      	ands	r2, r1
 8001546:	b212      	sxth	r2, r2
 8001548:	b292      	uxth	r2, r2
 800154a:	801a      	strh	r2, [r3, #0]
  profet->eState = SUSPENDED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2206      	movs	r2, #6
 8001550:	705a      	strb	r2, [r3, #1]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <Suspended>:

static void Suspended(volatile ProfetTypeDef *profet)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  profet->cState = 'X';
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2258      	movs	r2, #88	; 0x58
 800156a:	70da      	strb	r2, [r3, #3]
  //TODO: replace with a reset
  if (profet->eReqState == OFF){
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <Suspended+0x26>
    profet->nOC_ResetCount = 0;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    profet->eState = TURNING_OFF;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2207      	movs	r2, #7
 8001582:	705a      	strb	r2, [r3, #1]
  }
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <Faulting>:

//Transient state
static void Faulting(volatile ProfetTypeDef *profet)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	899b      	ldrh	r3, [r3, #12]
 800159c:	b29b      	uxth	r3, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	8819      	ldrh	r1, [r3, #0]
 80015a6:	b209      	sxth	r1, r1
 80015a8:	b212      	sxth	r2, r2
 80015aa:	400a      	ands	r2, r1
 80015ac:	b212      	sxth	r2, r2
 80015ae:	b292      	uxth	r2, r2
 80015b0:	801a      	strh	r2, [r3, #0]
  profet->eState = FAULT;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2205      	movs	r2, #5
 80015b6:	705a      	strb	r2, [r3, #1]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <Fault>:

static void Fault(volatile ProfetTypeDef *profet)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  profet->cState = 'F';
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2246      	movs	r2, #70	; 0x46
 80015d0:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	899b      	ldrh	r3, [r3, #12]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	43da      	mvns	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	8819      	ldrh	r1, [r3, #0]
 80015e0:	b209      	sxth	r1, r1
 80015e2:	b212      	sxth	r2, r2
 80015e4:	400a      	ands	r2, r1
 80015e6:	b212      	sxth	r2, r2
 80015e8:	b292      	uxth	r2, r2
 80015ea:	801a      	strh	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <Profet_SM>:

void Profet_SM(volatile ProfetTypeDef *profet) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  switch (profet->eState) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	785b      	ldrb	r3, [r3, #1]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b0d      	cmp	r3, #13
 8001608:	d856      	bhi.n	80016b8 <Profet_SM+0xc0>
 800160a:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <Profet_SM+0x18>)
 800160c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001610:	08001651 	.word	0x08001651
 8001614:	08001671 	.word	0x08001671
 8001618:	08001661 	.word	0x08001661
 800161c:	08001681 	.word	0x08001681
 8001620:	08001691 	.word	0x08001691
 8001624:	080016a1 	.word	0x080016a1
 8001628:	080016b1 	.word	0x080016b1
 800162c:	08001649 	.word	0x08001649
 8001630:	08001669 	.word	0x08001669
 8001634:	08001659 	.word	0x08001659
 8001638:	08001679 	.word	0x08001679
 800163c:	08001689 	.word	0x08001689
 8001640:	08001699 	.word	0x08001699
 8001644:	080016a9 	.word	0x080016a9
  case TURNING_OFF:
    TurningOff(profet);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fde8 	bl	800121e <TurningOff>
    break;
 800164e:	e033      	b.n	80016b8 <Profet_SM+0xc0>

  case OFF:
    Off(profet);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fdfe 	bl	8001252 <Off>
    break;
 8001656:	e02f      	b.n	80016b8 <Profet_SM+0xc0>

  case IN_RUSHING:
    InRushing(profet);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fe11 	bl	8001280 <InRushing>
    break;
 800165e:	e02b      	b.n	80016b8 <Profet_SM+0xc0>

  case IN_RUSH:
    InRush(profet);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fe26 	bl	80012b2 <InRush>
    break;
 8001666:	e027      	b.n	80016b8 <Profet_SM+0xc0>

  case TURNING_ON:
    TurningOn(profet);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fe4b 	bl	8001304 <TurningOn>
    break;
 800166e:	e023      	b.n	80016b8 <Profet_SM+0xc0>

  case ON:
    On(profet);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fe5d 	bl	8001330 <On>
    break;
 8001676:	e01f      	b.n	80016b8 <Profet_SM+0xc0>

  case SHORT_CIRCUITING:
    ShortCircuiting(profet);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff2a 	bl	80014d2 <ShortCircuiting>
    break;
 800167e:	e01b      	b.n	80016b8 <Profet_SM+0xc0>

  case SHORT_CIRCUIT:
    ShortCircuit(profet);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff38 	bl	80014f6 <ShortCircuit>
    break;
 8001686:	e017      	b.n	80016b8 <Profet_SM+0xc0>

  case OVERCURRENTING:
    Overcurrenting(profet);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff feb7 	bl	80013fc <Overcurrenting>
    break;
 800168e:	e013      	b.n	80016b8 <Profet_SM+0xc0>

  case OVERCURRENT:
    Overcurrent(profet);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fede 	bl	8001452 <Overcurrent>
    break;
 8001696:	e00f      	b.n	80016b8 <Profet_SM+0xc0>

  case FAULTING:
    Faulting(profet);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff79 	bl	8001590 <Faulting>
    break;
 800169e:	e00b      	b.n	80016b8 <Profet_SM+0xc0>

  case FAULT:
    Fault(profet);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff8f 	bl	80015c4 <Fault>
    break;
 80016a6:	e007      	b.n	80016b8 <Profet_SM+0xc0>

  case SUSPENDING:
    Suspending(profet);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff3e 	bl	800152a <Suspending>
    break;
 80016ae:	e003      	b.n	80016b8 <Profet_SM+0xc0>

  case SUSPENDED:
    Suspended(profet);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff54 	bl	800155e <Suspended>
    break;
 80016b6:	bf00      	nop

  }
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <Profet_UpdateIS>:

void Profet_UpdateIS(volatile ProfetTypeDef *profet, uint16_t newVal)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
  //Moving average without array or dividing
  //Store the new val, incase we need a non-filtered val elsewhere
  profet->nIS = newVal;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	845a      	strh	r2, [r3, #34]	; 0x22
  //Add new value to old sum
  profet->nIS_Sum += profet->nIS;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	441a      	add	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	611a      	str	r2, [r3, #16]
  //Shift sum by 1 which is equal to dividing by 2
  profet->nIS_Avg = profet->nIS_Sum >> 1;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	81da      	strh	r2, [r3, #14]
  //Remove the average from the sum, otherwise sum always goes up never down
  profet->nIS_Sum -= profet->nIS_Avg;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	89db      	ldrh	r3, [r3, #14]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	1a9a      	subs	r2, r3, r2
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	611a      	str	r2, [r3, #16]

  //Convert IS to IL (actual current)
  profet->nIL = (uint16_t)(((float)profet->nIS_Avg * profet->fKilis) / 100.0);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	89db      	ldrh	r3, [r3, #14]
 8001702:	b29b      	uxth	r3, r3
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001716:	ee17 0a90 	vmov	r0, s15
 800171a:	f7fe febd 	bl	8000498 <__aeabi_f2d>
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <Profet_UpdateIS+0x84>)
 8001724:	f7ff f83a 	bl	800079c <__aeabi_ddiv>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff f91c 	bl	800096c <__aeabi_d2uiz>
 8001734:	4603      	mov	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	841a      	strh	r2, [r3, #32]
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40590000 	.word	0x40590000

08001748 <GetTripTime>:

uint32_t GetTripTime(ProfetModelTypeDef eModel, uint16_t nIL, uint16_t nMaxIL)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	460b      	mov	r3, r1
 8001754:	80bb      	strh	r3, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	807b      	strh	r3, [r7, #2]
  //Multiply by 10 to include first decimal point
  // 25A / 5A = 5
  // 5 * 10 = 50 nOCMult
  //Subtract 10 to start at index 0
  // nOCMult = 40
  uint8_t nOCMult = (uint8_t)(((float)nIL / (float)nMaxIL) * 10.0);
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	ee07 3a90 	vmov	s15, r3
 800176a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800176e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001772:	ee16 0a90 	vmov	r0, s13
 8001776:	f7fe fe8f 	bl	8000498 <__aeabi_f2d>
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <GetTripTime+0xe4>)
 8001780:	f7fe fee2 	bl	8000548 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff f8ee 	bl	800096c <__aeabi_d2uiz>
 8001790:	4603      	mov	r3, r0
 8001792:	75fb      	strb	r3, [r7, #23]
  nOCMult -= 10; //Subtract 10 to start at index 0
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	3b0a      	subs	r3, #10
 8001798:	75fb      	strb	r3, [r7, #23]

  if(nOCMult < 0)
    nOCMult = 0;
  if(nOCMult > 91)
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	2b5b      	cmp	r3, #91	; 0x5b
 800179e:	d901      	bls.n	80017a4 <GetTripTime+0x5c>
    nOCMult = 91;
 80017a0:	235b      	movs	r3, #91	; 0x5b
 80017a2:	75fb      	strb	r3, [r7, #23]
      0x0273U,0x0260U,0x024EU,0x023DU,0x022DU,0x021DU,0x020EU,0x0200U,0x01F2U,0x01E5U,0x01D8U,
      0x01CBU,0x01C0U,0x01B4U,0x01A9U,0x019EU,0x0194U,0x018AU,0x0181U,0x0177U,0x016EU,0x0166U,
      0x015DU,0x0155U,0x014EU
  };

  uint16_t nTripTimeRaw = fTripTimeLookupTable[nOCMult];
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	4a22      	ldr	r2, [pc, #136]	; (8001830 <GetTripTime+0xe8>)
 80017a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017ac:	81fb      	strh	r3, [r7, #14]
       0.93,0.94,0.95,0.96,0.97,0.98,0.99,1,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,
       1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.2,1.21,1.22,1.23,1.24,
       1.25,1.26,1.27,1.28,1.29,1.3,1.31,1.32,1.33,1.34,1.35,1.36,1.37,1.38,1.39,1.40
   };

  uint32_t nTripTime = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  float fTripTimeMult = 0.0;
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]

  switch(eModel){
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <GetTripTime+0x82>
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db21      	blt.n	8001806 <GetTripTime+0xbe>
 80017c2:	3b01      	subs	r3, #1
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d81e      	bhi.n	8001806 <GetTripTime+0xbe>
 80017c8:	e00e      	b.n	80017e8 <GetTripTime+0xa0>
  case BTS7002_1EPP:
    if(nMaxIL < 200)
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	2bc7      	cmp	r3, #199	; 0xc7
 80017ce:	d806      	bhi.n	80017de <GetTripTime+0x96>
      fTripTimeMult = fTripTimeMult_7002[nMaxIL];
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	4a18      	ldr	r2, [pc, #96]	; (8001834 <GetTripTime+0xec>)
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	613b      	str	r3, [r7, #16]
    else
      fTripTimeMult = fTripTimeMult_7002[199];
    break;
 80017dc:	e013      	b.n	8001806 <GetTripTime+0xbe>
      fTripTimeMult = fTripTimeMult_7002[199];
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <GetTripTime+0xec>)
 80017e0:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 80017e4:	613b      	str	r3, [r7, #16]
    break;
 80017e6:	e00e      	b.n	8001806 <GetTripTime+0xbe>

  case BTS7008_2EPA_CH1:
  case BTS7008_2EPA_CH2:
    if(nMaxIL < 80)
 80017e8:	887b      	ldrh	r3, [r7, #2]
 80017ea:	2b4f      	cmp	r3, #79	; 0x4f
 80017ec:	d806      	bhi.n	80017fc <GetTripTime+0xb4>
      fTripTimeMult = fTripTimeMult_7008[nMaxIL];
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	4a11      	ldr	r2, [pc, #68]	; (8001838 <GetTripTime+0xf0>)
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	613b      	str	r3, [r7, #16]
    else
      fTripTimeMult = fTripTimeMult_7008[79];
    break;
 80017fa:	e003      	b.n	8001804 <GetTripTime+0xbc>
      fTripTimeMult = fTripTimeMult_7008[79];
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <GetTripTime+0xf0>)
 80017fe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001802:	613b      	str	r3, [r7, #16]
    break;
 8001804:	bf00      	nop
  }

  nTripTime = (uint32_t)(nTripTimeRaw * fTripTimeMult);
 8001806:	89fb      	ldrh	r3, [r7, #14]
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001810:	edd7 7a04 	vldr	s15, [r7, #16]
 8001814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800181c:	ee17 3a90 	vmov	r3, s15
 8001820:	60bb      	str	r3, [r7, #8]

  return nTripTime;
 8001822:	68bb      	ldr	r3, [r7, #8]

}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40240000 	.word	0x40240000
 8001830:	080167c0 	.word	0x080167c0
 8001834:	08016878 	.word	0x08016878
 8001838:	08016b98 	.word	0x08016b98

0800183c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001860:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001864:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001866:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001868:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800186c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <MX_ADC1_Init+0xdc>)
 800187c:	2201      	movs	r2, #1
 800187e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001888:	4b23      	ldr	r3, [pc, #140]	; (8001918 <MX_ADC1_Init+0xdc>)
 800188a:	2200      	movs	r2, #0
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001890:	2201      	movs	r2, #1
 8001892:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_ADC1_Init+0xdc>)
 800189c:	2201      	movs	r2, #1
 800189e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_ADC1_Init+0xdc>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <MX_ADC1_Init+0xdc>)
 80018aa:	2204      	movs	r2, #4
 80018ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_ADC1_Init+0xdc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018b4:	4b18      	ldr	r3, [pc, #96]	; (8001918 <MX_ADC1_Init+0xdc>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018ba:	4817      	ldr	r0, [pc, #92]	; (8001918 <MX_ADC1_Init+0xdc>)
 80018bc:	f001 f814 	bl	80028e8 <HAL_ADC_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80018c6:	f000 fd4d 	bl	8002364 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	4810      	ldr	r0, [pc, #64]	; (8001918 <MX_ADC1_Init+0xdc>)
 80018d6:	f001 fdef 	bl	80034b8 <HAL_ADCEx_MultiModeConfigChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80018e0:	f000 fd40 	bl	8002364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80018e4:	2310      	movs	r3, #16
 80018e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80018f0:	2307      	movs	r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_ADC1_Init+0xdc>)
 8001902:	f001 faed 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800190c:	f000 fd2a 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	2000028c 	.word	0x2000028c

0800191c <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001922:	463b      	mov	r3, r7
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
 8001930:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001934:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <MX_ADC4_Init+0xb8>)
 8001936:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <MX_ADC4_Init+0xb4>)
 800193a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800193e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001946:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 800194c:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <MX_ADC4_Init+0xb4>)
 800194e:	2201      	movs	r2, #1
 8001950:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <MX_ADC4_Init+0xb4>)
 800195c:	2200      	movs	r2, #0
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001962:	2201      	movs	r2, #1
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <MX_ADC4_Init+0xb4>)
 800196e:	2201      	movs	r2, #1
 8001970:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_ADC4_Init+0xb4>)
 800197c:	2204      	movs	r2, #4
 800197e:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001982:	2200      	movs	r2, #0
 8001984:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_ADC4_Init+0xb4>)
 8001988:	2200      	movs	r2, #0
 800198a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800198c:	4810      	ldr	r0, [pc, #64]	; (80019d0 <MX_ADC4_Init+0xb4>)
 800198e:	f000 ffab 	bl	80028e8 <HAL_ADC_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 8001998:	f000 fce4 	bl	8002364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800199c:	2303      	movs	r3, #3
 800199e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80019a8:	2307      	movs	r3, #7
 80019aa:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80019b4:	463b      	mov	r3, r7
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_ADC4_Init+0xb4>)
 80019ba:	f001 fa91 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 80019c4:	f000 fcce 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200002dc 	.word	0x200002dc
 80019d4:	50000500 	.word	0x50000500

080019d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019f8:	d134      	bne.n	8001a64 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019fa:	4b45      	ldr	r3, [pc, #276]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	4a44      	ldr	r2, [pc, #272]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6153      	str	r3, [r2, #20]
 8001a06:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a12:	4b40      	ldr	r3, [pc, #256]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a14:	4a40      	ldr	r2, [pc, #256]	; (8001b18 <HAL_ADC_MspInit+0x140>)
 8001a16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a18:	4b3e      	ldr	r3, [pc, #248]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a2a:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a32:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a3a:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a40:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a46:	4833      	ldr	r0, [pc, #204]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a48:	f002 ff70 	bl	800492c <HAL_DMA_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8001a52:	f000 fc87 	bl	8002364 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a2e      	ldr	r2, [pc, #184]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a5a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a5c:	4a2d      	ldr	r2, [pc, #180]	; (8001b14 <HAL_ADC_MspInit+0x13c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8001a62:	e051      	b.n	8001b08 <HAL_ADC_MspInit+0x130>
  else if(adcHandle->Instance==ADC4)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a2c      	ldr	r2, [pc, #176]	; (8001b1c <HAL_ADC_MspInit+0x144>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d14c      	bne.n	8001b08 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a78:	6153      	str	r3, [r2, #20]
 8001a7a:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6153      	str	r3, [r2, #20]
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_ADC_MspInit+0x138>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BATT_SENSE_Pin;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	481b      	ldr	r0, [pc, #108]	; (8001b20 <HAL_ADC_MspInit+0x148>)
 8001ab4:	f003 f8ee 	bl	8004c94 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001aba:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <HAL_ADC_MspInit+0x150>)
 8001abc:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad6:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ade:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001aee:	f002 ff1d 	bl	800492c <HAL_DMA_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_ADC_MspInit+0x124>
      Error_Handler();
 8001af8:	f000 fc34 	bl	8002364 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_ADC_MspInit+0x14c>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001b08:	bf00      	nop
 8001b0a:	3728      	adds	r7, #40	; 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	20000204 	.word	0x20000204
 8001b18:	40020008 	.word	0x40020008
 8001b1c:	50000500 	.word	0x50000500
 8001b20:	48000400 	.word	0x48000400
 8001b24:	20000248 	.word	0x20000248
 8001b28:	4002041c 	.word	0x4002041c

08001b2c <MX_CAN_Init>:



/* CAN init function */
void MX_CAN_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b32:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <MX_CAN_Init+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b38:	2204      	movs	r2, #4
 8001b3a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b4a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b4e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b56:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_CAN_Init+0x64>)
 8001b7e:	f001 febd 	bl	80038fc <HAL_CAN_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001b88:	f000 fbec 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000032c 	.word	0x2000032c
 8001b94:	40006400 	.word	0x40006400

08001b98 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_CAN_MspInit+0x8c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d130      	bne.n	8001c1c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_CAN_MspInit+0x90>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a1a      	ldr	r2, [pc, #104]	; (8001c28 <HAL_CAN_MspInit+0x90>)
 8001bc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_CAN_MspInit+0x90>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_CAN_MspInit+0x90>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <HAL_CAN_MspInit+0x90>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6153      	str	r3, [r2, #20]
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_CAN_MspInit+0x90>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001bfc:	2309      	movs	r3, #9
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4809      	ldr	r0, [pc, #36]	; (8001c2c <HAL_CAN_MspInit+0x94>)
 8001c08:	f003 f844 	bl	8004c94 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2105      	movs	r1, #5
 8001c10:	2014      	movs	r0, #20
 8001c12:	f002 fd77 	bl	8004704 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001c16:	2014      	movs	r0, #20
 8001c18:	f002 fd90 	bl	800473c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	; 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40006400 	.word	0x40006400
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	48000400 	.word	0x48000400

08001c30 <MX_CRC_Init>:



/* CRC init function */
void MX_CRC_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c36:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <MX_CRC_Init+0x40>)
 8001c38:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c48:	2220      	movs	r2, #32
 8001c4a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c4e:	2280      	movs	r2, #128	; 0x80
 8001c50:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001c58:	4804      	ldr	r0, [pc, #16]	; (8001c6c <MX_CRC_Init+0x3c>)
 8001c5a:	f002 fd7d 	bl	8004758 <HAL_CRC_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001c64:	f000 fb7e 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000354 	.word	0x20000354
 8001c70:	40023000 	.word	0x40023000

08001c74 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_CRC_MspInit+0x38>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10b      	bne.n	8001c9e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_CRC_MspInit+0x3c>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_CRC_MspInit+0x3c>)
 8001c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c90:	6153      	str	r3, [r2, #20]
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <HAL_CRC_MspInit+0x3c>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023000 	.word	0x40023000
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <MX_DMA_Init+0x60>)
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <MX_DMA_Init+0x60>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6153      	str	r3, [r2, #20]
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <MX_DMA_Init+0x60>)
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <MX_DMA_Init+0x60>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <MX_DMA_Init+0x60>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	6153      	str	r3, [r2, #20]
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <MX_DMA_Init+0x60>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2105      	movs	r1, #5
 8001cee:	200b      	movs	r0, #11
 8001cf0:	f002 fd08 	bl	8004704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cf4:	200b      	movs	r0, #11
 8001cf6:	f002 fd21 	bl	800473c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	2039      	movs	r0, #57	; 0x39
 8001d00:	f002 fd00 	bl	8004704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001d04:	2039      	movs	r0, #57	; 0x39
 8001d06:	f002 fd19 	bl	800473c <HAL_NVIC_EnableIRQ>

}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000

08001d18 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  //  Error_Handler();

  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  qMsgQueueRx = osMessageQueueNew(MSGQUEUE_RX_SIZE, sizeof(MsgQueueRx_t), NULL);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2130      	movs	r1, #48	; 0x30
 8001d20:	2010      	movs	r0, #16
 8001d22:	f00b fbdf 	bl	800d4e4 <osMessageQueueNew>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a2e      	ldr	r2, [pc, #184]	; (8001de4 <MX_FREERTOS_Init+0xcc>)
 8001d2a:	6013      	str	r3, [r2, #0]
  if(qMsgQueueRx == NULL){
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <MX_FREERTOS_Init+0xcc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <MX_FREERTOS_Init+0x20>
    //TODO: Message queue not created
    Error_Handler();
 8001d34:	f000 fb16 	bl	8002364 <Error_Handler>
  }

  qMsgQueueUsbTx = osMessageQueueNew(MSGQUEUE_TX_SIZE, sizeof(MsgQueueUsbTx_t), NULL);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2109      	movs	r1, #9
 8001d3c:	2010      	movs	r0, #16
 8001d3e:	f00b fbd1 	bl	800d4e4 <osMessageQueueNew>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <MX_FREERTOS_Init+0xd0>)
 8001d46:	6013      	str	r3, [r2, #0]
  if(qMsgQueueUsbTx == NULL){
 8001d48:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <MX_FREERTOS_Init+0xd0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <MX_FREERTOS_Init+0x3c>
    //TODO: Message queue not created
    Error_Handler();
 8001d50:	f000 fb08 	bl	8002364 <Error_Handler>
  }

  qMsgQueueCanTx = osMessageQueueNew(MSGQUEUE_TX_SIZE, sizeof(MsgQueueCanTx_t), NULL);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2120      	movs	r1, #32
 8001d58:	2010      	movs	r0, #16
 8001d5a:	f00b fbc3 	bl	800d4e4 <osMessageQueueNew>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a22      	ldr	r2, [pc, #136]	; (8001dec <MX_FREERTOS_Init+0xd4>)
 8001d62:	6013      	str	r3, [r2, #0]
  if(qMsgQueueCanTx == NULL){
 8001d64:	4b21      	ldr	r3, [pc, #132]	; (8001dec <MX_FREERTOS_Init+0xd4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <MX_FREERTOS_Init+0x58>
    //TODO: Message queue not created
    Error_Handler();
 8001d6c:	f000 fafa 	bl	8002364 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d70:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <MX_FREERTOS_Init+0xd8>)
 8001d72:	2100      	movs	r1, #0
 8001d74:	481f      	ldr	r0, [pc, #124]	; (8001df4 <MX_FREERTOS_Init+0xdc>)
 8001d76:	f00b fadd 	bl	800d334 <osThreadNew>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <MX_FREERTOS_Init+0xe0>)
 8001d7e:	6013      	str	r3, [r2, #0]

  /* creation of i2cTask */
  i2cTaskHandle = osThreadNew(StartI2CTask, NULL, &i2cTask_attributes);
 8001d80:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <MX_FREERTOS_Init+0xe4>)
 8001d82:	2100      	movs	r1, #0
 8001d84:	481e      	ldr	r0, [pc, #120]	; (8001e00 <MX_FREERTOS_Init+0xe8>)
 8001d86:	f00b fad5 	bl	800d334 <osThreadNew>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4a1d      	ldr	r2, [pc, #116]	; (8001e04 <MX_FREERTOS_Init+0xec>)
 8001d8e:	6013      	str	r3, [r2, #0]

  /* creation of canTxTask */
  canTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &canTxTask_attributes);
 8001d90:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <MX_FREERTOS_Init+0xf0>)
 8001d92:	2100      	movs	r1, #0
 8001d94:	481d      	ldr	r0, [pc, #116]	; (8001e0c <MX_FREERTOS_Init+0xf4>)
 8001d96:	f00b facd 	bl	800d334 <osThreadNew>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <MX_FREERTOS_Init+0xf8>)
 8001d9e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if(defaultTaskHandle == 0x0)
 8001da0:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <MX_FREERTOS_Init+0xe0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <MX_FREERTOS_Init+0x94>
    Error_Handler();
 8001da8:	f000 fadc 	bl	8002364 <Error_Handler>

  if(i2cTaskHandle == 0x0)
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <MX_FREERTOS_Init+0xec>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <MX_FREERTOS_Init+0xa0>
    Error_Handler();
 8001db4:	f000 fad6 	bl	8002364 <Error_Handler>

  if(canTxTaskHandle == 0x0)
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <MX_FREERTOS_Init+0xf8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <MX_FREERTOS_Init+0xac>
    Error_Handler();
 8001dc0:	f000 fad0 	bl	8002364 <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  if(ReadPdmConfig() != PDM_OK)
 8001dc4:	f010 fa04 	bl	80121d0 <ReadPdmConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d001      	beq.n	8001dd2 <MX_FREERTOS_Init+0xba>
    Error_Handler();
 8001dce:	f000 fac9 	bl	8002364 <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  if(ReadPdmConfig() != PDM_OK)
 8001dd2:	f010 f9fd 	bl	80121d0 <ReadPdmConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <MX_FREERTOS_Init+0xc8>
    Error_Handler();
 8001ddc:	f000 fac2 	bl	8002364 <Error_Handler>
  /* USER CODE END RTOS_EVENTS */

}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20003320 	.word	0x20003320
 8001de8:	20003324 	.word	0x20003324
 8001dec:	20003328 	.word	0x20003328
 8001df0:	08016cd8 	.word	0x08016cd8
 8001df4:	08001e15 	.word	0x08001e15
 8001df8:	20000498 	.word	0x20000498
 8001dfc:	08016cfc 	.word	0x08016cfc
 8001e00:	08001e49 	.word	0x08001e49
 8001e04:	2000049c 	.word	0x2000049c
 8001e08:	08016d20 	.word	0x08016d20
 8001e0c:	08001e71 	.word	0x08001e71
 8001e10:	200004a0 	.word	0x200004a0

08001e14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  PdmMainTask(&defaultTaskHandle, &hadc1, &hadc4, &hrtc, &hcrc);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <StartDefaultTask+0x20>)
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <StartDefaultTask+0x24>)
 8001e22:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <StartDefaultTask+0x28>)
 8001e24:	4906      	ldr	r1, [pc, #24]	; (8001e40 <StartDefaultTask+0x2c>)
 8001e26:	4807      	ldr	r0, [pc, #28]	; (8001e44 <StartDefaultTask+0x30>)
 8001e28:	f00e fb26 	bl	8010478 <PdmMainTask>
  /* USER CODE END StartDefaultTask */
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000354 	.word	0x20000354
 8001e38:	20000410 	.word	0x20000410
 8001e3c:	200002dc 	.word	0x200002dc
 8001e40:	2000028c 	.word	0x2000028c
 8001e44:	20000498 	.word	0x20000498

08001e48 <StartI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CTask */
void StartI2CTask(void *argument)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CTask */
  I2CTask(&i2cTaskHandle, &hi2c1, &hi2c2);
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <StartI2CTask+0x1c>)
 8001e52:	4905      	ldr	r1, [pc, #20]	; (8001e68 <StartI2CTask+0x20>)
 8001e54:	4805      	ldr	r0, [pc, #20]	; (8001e6c <StartI2CTask+0x24>)
 8001e56:	f00f f9c5 	bl	80111e4 <I2CTask>
  /* USER CODE END StartI2CTask */
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200003c4 	.word	0x200003c4
 8001e68:	20000378 	.word	0x20000378
 8001e6c:	2000049c 	.word	0x2000049c

08001e70 <StartCanTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanTxTask */
void StartCanTxTask(void *argument)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanTxTask */
  CanTxTask(&canTxTaskHandle, &hcan);
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <StartCanTxTask+0x18>)
 8001e7a:	4804      	ldr	r0, [pc, #16]	; (8001e8c <StartCanTxTask+0x1c>)
 8001e7c:	f00f fd60 	bl	8011940 <CanTxTask>
  /* USER CODE END StartCanTxTask */
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000032c 	.word	0x2000032c
 8001e8c:	200004a0 	.word	0x200004a0

08001e90 <ConfigureRunTimeCounter>:
#if( configGENERATE_RUN_TIME_STATS == 1)
void ConfigureRunTimeCounter(void);
uint32_t GetRunTimeCounter(void);

void ConfigureRunTimeCounter(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  nRunTimeCount = 0;
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <ConfigureRunTimeCounter+0x14>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	20000494 	.word	0x20000494

08001ea8 <GetRunTimeCounter>:

uint32_t GetRunTimeCounter(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return nRunTimeCount;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <GetRunTimeCounter+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000494 	.word	0x20000494

08001ec0 <IncrementRuntimeStats>:

void IncrementRuntimeStats(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  nRunTimeCount = nRunTimeCount + 1;
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <IncrementRuntimeStats+0x18>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	4a03      	ldr	r2, [pc, #12]	; (8001ed8 <IncrementRuntimeStats+0x18>)
 8001ecc:	6013      	str	r3, [r2, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	20000494 	.word	0x20000494

08001edc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	4b46      	ldr	r3, [pc, #280]	; (800200c <MX_GPIO_Init+0x130>)
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	4a45      	ldr	r2, [pc, #276]	; (800200c <MX_GPIO_Init+0x130>)
 8001ef8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001efc:	6153      	str	r3, [r2, #20]
 8001efe:	4b43      	ldr	r3, [pc, #268]	; (800200c <MX_GPIO_Init+0x130>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f0a:	4b40      	ldr	r3, [pc, #256]	; (800200c <MX_GPIO_Init+0x130>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4a3f      	ldr	r2, [pc, #252]	; (800200c <MX_GPIO_Init+0x130>)
 8001f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f14:	6153      	str	r3, [r2, #20]
 8001f16:	4b3d      	ldr	r3, [pc, #244]	; (800200c <MX_GPIO_Init+0x130>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <MX_GPIO_Init+0x130>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	4a39      	ldr	r2, [pc, #228]	; (800200c <MX_GPIO_Init+0x130>)
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	6153      	str	r3, [r2, #20]
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <MX_GPIO_Init+0x130>)
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <MX_GPIO_Init+0x130>)
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	4a33      	ldr	r2, [pc, #204]	; (800200c <MX_GPIO_Init+0x130>)
 8001f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f44:	6153      	str	r3, [r2, #20]
 8001f46:	4b31      	ldr	r3, [pc, #196]	; (800200c <MX_GPIO_Init+0x130>)
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXTRA1_Pin|EXTRA3_Pin, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	f248 0104 	movw	r1, #32772	; 0x8004
 8001f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5c:	f003 f814 	bl	8004f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EXTRA2_Pin|USB_PULLUP_Pin|PF_RESET_Pin, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	f640 0114 	movw	r1, #2068	; 0x814
 8001f66:	482a      	ldr	r0, [pc, #168]	; (8002010 <MX_GPIO_Init+0x134>)
 8001f68:	f003 f80e 	bl	8004f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EXTRA1_Pin|EXTRA3_Pin;
 8001f6c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f88:	f002 fe84 	bl	8004c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EXTRA2_Pin|PF_RESET_Pin;
 8001f8c:	2314      	movs	r3, #20
 8001f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f94:	2302      	movs	r3, #2
 8001f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	481b      	ldr	r0, [pc, #108]	; (8002010 <MX_GPIO_Init+0x134>)
 8001fa4:	f002 fe76 	bl	8004c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4814      	ldr	r0, [pc, #80]	; (8002010 <MX_GPIO_Init+0x134>)
 8001fbe:	f002 fe69 	bl	8004c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PULLUP_Pin;
 8001fc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001fc8:	2311      	movs	r3, #17
 8001fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PULLUP_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4619      	mov	r1, r3
 8001fda:	480d      	ldr	r0, [pc, #52]	; (8002010 <MX_GPIO_Init+0x134>)
 8001fdc:	f002 fe5a 	bl	8004c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002000:	f002 fe48 	bl	8004c94 <HAL_GPIO_Init>

}
 8002004:	bf00      	nop
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	48000400 	.word	0x48000400

08002014 <MX_I2C1_Init>:
/* USER CODE END 0 */


/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <MX_I2C1_Init+0x74>)
 800201a:	4a1c      	ldr	r2, [pc, #112]	; (800208c <MX_I2C1_Init+0x78>)
 800201c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10E8122C;
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <MX_I2C1_Init+0x74>)
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <MX_I2C1_Init+0x7c>)
 8002022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <MX_I2C1_Init+0x74>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <MX_I2C1_Init+0x74>)
 800202c:	2201      	movs	r2, #1
 800202e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002030:	4b15      	ldr	r3, [pc, #84]	; (8002088 <MX_I2C1_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <MX_I2C1_Init+0x74>)
 8002038:	2200      	movs	r2, #0
 800203a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <MX_I2C1_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <MX_I2C1_Init+0x74>)
 8002044:	2200      	movs	r2, #0
 8002046:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <MX_I2C1_Init+0x74>)
 800204a:	2200      	movs	r2, #0
 800204c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800204e:	480e      	ldr	r0, [pc, #56]	; (8002088 <MX_I2C1_Init+0x74>)
 8002050:	f002 ffcc 	bl	8004fec <HAL_I2C_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800205a:	f000 f983 	bl	8002364 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800205e:	2100      	movs	r1, #0
 8002060:	4809      	ldr	r0, [pc, #36]	; (8002088 <MX_I2C1_Init+0x74>)
 8002062:	f003 fc2d 	bl	80058c0 <HAL_I2CEx_ConfigAnalogFilter>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800206c:	f000 f97a 	bl	8002364 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002070:	2100      	movs	r1, #0
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_I2C1_Init+0x74>)
 8002074:	f003 fc6f 	bl	8005956 <HAL_I2CEx_ConfigDigitalFilter>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800207e:	f000 f971 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000378 	.word	0x20000378
 800208c:	40005400 	.word	0x40005400
 8002090:	10e8122c 	.word	0x10e8122c

08002094 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_I2C2_Init+0x74>)
 800209a:	4a1c      	ldr	r2, [pc, #112]	; (800210c <MX_I2C2_Init+0x78>)
 800209c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10E8122C;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_I2C2_Init+0x74>)
 80020a0:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <MX_I2C2_Init+0x7c>)
 80020a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_I2C2_Init+0x74>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_I2C2_Init+0x74>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <MX_I2C2_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_I2C2_Init+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <MX_I2C2_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_I2C2_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_I2C2_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020ce:	480e      	ldr	r0, [pc, #56]	; (8002108 <MX_I2C2_Init+0x74>)
 80020d0:	f002 ff8c 	bl	8004fec <HAL_I2C_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80020da:	f000 f943 	bl	8002364 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020de:	2100      	movs	r1, #0
 80020e0:	4809      	ldr	r0, [pc, #36]	; (8002108 <MX_I2C2_Init+0x74>)
 80020e2:	f003 fbed 	bl	80058c0 <HAL_I2CEx_ConfigAnalogFilter>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80020ec:	f000 f93a 	bl	8002364 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80020f0:	2100      	movs	r1, #0
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_I2C2_Init+0x74>)
 80020f4:	f003 fc2f 	bl	8005956 <HAL_I2CEx_ConfigDigitalFilter>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80020fe:	f000 f931 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200003c4 	.word	0x200003c4
 800210c:	40005800 	.word	0x40005800
 8002110:	10e8122c 	.word	0x10e8122c

08002114 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08c      	sub	sp, #48	; 0x30
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 031c 	add.w	r3, r7, #28
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a2f      	ldr	r2, [pc, #188]	; (80021f0 <HAL_I2C_MspInit+0xdc>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d128      	bne.n	8002188 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_I2C_MspInit+0xe0>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	4a2e      	ldr	r2, [pc, #184]	; (80021f4 <HAL_I2C_MspInit+0xe0>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6153      	str	r3, [r2, #20]
 8002142:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <HAL_I2C_MspInit+0xe0>)
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800214e:	23c0      	movs	r3, #192	; 0xc0
 8002150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002152:	2312      	movs	r3, #18
 8002154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002156:	2301      	movs	r3, #1
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800215e:	2304      	movs	r3, #4
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002162:	f107 031c 	add.w	r3, r7, #28
 8002166:	4619      	mov	r1, r3
 8002168:	4823      	ldr	r0, [pc, #140]	; (80021f8 <HAL_I2C_MspInit+0xe4>)
 800216a:	f002 fd93 	bl	8004c94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800216e:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <HAL_I2C_MspInit+0xe0>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4a20      	ldr	r2, [pc, #128]	; (80021f4 <HAL_I2C_MspInit+0xe0>)
 8002174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002178:	61d3      	str	r3, [r2, #28]
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <HAL_I2C_MspInit+0xe0>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002186:	e02e      	b.n	80021e6 <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_I2C_MspInit+0xe8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d129      	bne.n	80021e6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_I2C_MspInit+0xe0>)
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_I2C_MspInit+0xe0>)
 8002198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219c:	6153      	str	r3, [r2, #20]
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_I2C_MspInit+0xe0>)
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b0:	2312      	movs	r3, #18
 80021b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b4:	2301      	movs	r3, #1
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021bc:	2304      	movs	r3, #4
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	4619      	mov	r1, r3
 80021c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ca:	f002 fd63 	bl	8004c94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_I2C_MspInit+0xe0>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <HAL_I2C_MspInit+0xe0>)
 80021d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021d8:	61d3      	str	r3, [r2, #28]
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_I2C_MspInit+0xe0>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
}
 80021e6:	bf00      	nop
 80021e8:	3730      	adds	r7, #48	; 0x30
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40005400 	.word	0x40005400
 80021f4:	40021000 	.word	0x40021000
 80021f8:	48000400 	.word	0x48000400
 80021fc:	40005800 	.word	0x40005800

08002200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002204:	f000 fb1c 	bl	8002840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002208:	f000 f81c 	bl	8002244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800220c:	f7ff fe66 	bl	8001edc <MX_GPIO_Init>
  MX_DMA_Init();
 8002210:	f7ff fd50 	bl	8001cb4 <MX_DMA_Init>
  MX_ADC4_Init();
 8002214:	f7ff fb82 	bl	800191c <MX_ADC4_Init>
  MX_CAN_Init();
 8002218:	f7ff fc88 	bl	8001b2c <MX_CAN_Init>
  MX_I2C2_Init();
 800221c:	f7ff ff3a 	bl	8002094 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002220:	f000 f8f8 	bl	8002414 <MX_SPI1_Init>
  MX_RTC_Init();
 8002224:	f000 f8aa 	bl	800237c <MX_RTC_Init>
  MX_I2C1_Init();
 8002228:	f7ff fef4 	bl	8002014 <MX_I2C1_Init>
  MX_CRC_Init();
 800222c:	f7ff fd00 	bl	8001c30 <MX_CRC_Init>
  MX_ADC1_Init();
 8002230:	f7ff fb04 	bl	800183c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002234:	f00b f816 	bl	800d264 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002238:	f7ff fd6e 	bl	8001d18 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800223c:	f00b f846 	bl	800d2cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002240:	e7fe      	b.n	8002240 <main+0x40>
	...

08002244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b09e      	sub	sp, #120	; 0x78
 8002248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800224e:	2228      	movs	r2, #40	; 0x28
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f013 fcf2 	bl	8015c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002258:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002268:	463b      	mov	r3, r7
 800226a:	223c      	movs	r2, #60	; 0x3c
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f013 fce4 	bl	8015c3c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002274:	f005 f8a6 	bl	80073c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002278:	4b2c      	ldr	r3, [pc, #176]	; (800232c <SystemClock_Config+0xe8>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a2b      	ldr	r2, [pc, #172]	; (800232c <SystemClock_Config+0xe8>)
 800227e:	f023 0318 	bic.w	r3, r3, #24
 8002282:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8002284:	230d      	movs	r3, #13
 8002286:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800228c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800228e:	2300      	movs	r3, #0
 8002290:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002292:	2301      	movs	r3, #1
 8002294:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002296:	2301      	movs	r3, #1
 8002298:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800229a:	2301      	movs	r3, #1
 800229c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800229e:	2302      	movs	r3, #2
 80022a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022ac:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022b2:	4618      	mov	r0, r3
 80022b4:	f005 f8d4 	bl	8007460 <HAL_RCC_OscConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80022be:	f000 f851 	bl	8002364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c2:	230f      	movs	r3, #15
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c6:	2302      	movs	r3, #2
 80022c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ca:	2300      	movs	r3, #0
 80022cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022dc:	2102      	movs	r1, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f006 f8fc 	bl	80084dc <HAL_RCC_ClockConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80022ea:	f000 f83b 	bl	8002364 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <SystemClock_Config+0xec>)
 80022f0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_RTC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80022f2:	2310      	movs	r3, #16
 80022f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80022f6:	2320      	movs	r3, #32
 80022f8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002300:	2300      	movs	r3, #0
 8002302:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	4618      	mov	r0, r3
 8002308:	f006 fb60 	bl	80089cc <HAL_RCCEx_PeriphCLKConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002312:	f000 f827 	bl	8002364 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8002316:	2200      	movs	r2, #0
 8002318:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800231c:	2000      	movs	r0, #0
 800231e:	f006 fa59 	bl	80087d4 <HAL_RCC_MCOConfig>
}
 8002322:	bf00      	nop
 8002324:	3778      	adds	r7, #120	; 0x78
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	00030060 	.word	0x00030060

08002334 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002346:	f000 fa91 	bl	800286c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
#if( configGENERATE_RUN_TIME_STATS == 1)
    if (htim->Instance == TIM6) {
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d101      	bne.n	8002358 <HAL_TIM_PeriodElapsedCallback+0x24>
      IncrementRuntimeStats();
 8002354:	f7ff fdb4 	bl	8001ec0 <IncrementRuntimeStats>
    }
#endif
  /* USER CODE END Callback 1 */
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40001000 	.word	0x40001000

08002364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  HAL_GPIO_WritePin(PF_RESET_GPIO_Port, PF_RESET_Pin, GPIO_PIN_RESET);
 8002368:	2200      	movs	r2, #0
 800236a:	2110      	movs	r1, #16
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <Error_Handler+0x14>)
 800236e:	f002 fe0b 	bl	8004f88 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	48000400 	.word	0x48000400

0800237c <MX_RTC_Init>:



/* RTC init function */
void MX_RTC_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <MX_RTC_Init+0x44>)
 8002382:	4a10      	ldr	r2, [pc, #64]	; (80023c4 <MX_RTC_Init+0x48>)
 8002384:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <MX_RTC_Init+0x44>)
 8002388:	2200      	movs	r2, #0
 800238a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <MX_RTC_Init+0x44>)
 800238e:	227f      	movs	r2, #127	; 0x7f
 8002390:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <MX_RTC_Init+0x44>)
 8002394:	22ff      	movs	r2, #255	; 0xff
 8002396:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <MX_RTC_Init+0x44>)
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <MX_RTC_Init+0x44>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <MX_RTC_Init+0x44>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023aa:	4805      	ldr	r0, [pc, #20]	; (80023c0 <MX_RTC_Init+0x44>)
 80023ac:	f006 fcbe 	bl	8008d2c <HAL_RTC_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80023b6:	f7ff ffd5 	bl	8002364 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000410 	.word	0x20000410
 80023c4:	40002800 	.word	0x40002800

080023c8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <HAL_RTC_MspInit+0x44>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d111      	bne.n	80023fe <HAL_RTC_MspInit+0x36>
 80023da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023de:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023e8:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <HAL_RTC_MspInit+0x48>)
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	461a      	mov	r2, r3
 80023fa:	2301      	movs	r3, #1
 80023fc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40002800 	.word	0x40002800
 8002410:	10908100 	.word	0x10908100

08002414 <MX_SPI1_Init>:



/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <MX_SPI1_Init+0x74>)
 800241a:	4a1c      	ldr	r2, [pc, #112]	; (800248c <MX_SPI1_Init+0x78>)
 800241c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800241e:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <MX_SPI1_Init+0x74>)
 8002420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <MX_SPI1_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800242c:	4b16      	ldr	r3, [pc, #88]	; (8002488 <MX_SPI1_Init+0x74>)
 800242e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002432:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <MX_SPI1_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <MX_SPI1_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <MX_SPI1_Init+0x74>)
 8002442:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002446:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <MX_SPI1_Init+0x74>)
 800244a:	2208      	movs	r2, #8
 800244c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <MX_SPI1_Init+0x74>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <MX_SPI1_Init+0x74>)
 8002456:	2200      	movs	r2, #0
 8002458:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <MX_SPI1_Init+0x74>)
 800245c:	2200      	movs	r2, #0
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <MX_SPI1_Init+0x74>)
 8002462:	2207      	movs	r2, #7
 8002464:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <MX_SPI1_Init+0x74>)
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <MX_SPI1_Init+0x74>)
 800246e:	2208      	movs	r2, #8
 8002470:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <MX_SPI1_Init+0x74>)
 8002474:	f006 fd3f 	bl	8008ef6 <HAL_SPI_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800247e:	f7ff ff71 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000430 	.word	0x20000430
 800248c:	40013000 	.word	0x40013000

08002490 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a17      	ldr	r2, [pc, #92]	; (800250c <HAL_SPI_MspInit+0x7c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d128      	bne.n	8002504 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_SPI_MspInit+0x80>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	4a16      	ldr	r2, [pc, #88]	; (8002510 <HAL_SPI_MspInit+0x80>)
 80024b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024bc:	6193      	str	r3, [r2, #24]
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_SPI_MspInit+0x80>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_SPI_MspInit+0x80>)
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	4a10      	ldr	r2, [pc, #64]	; (8002510 <HAL_SPI_MspInit+0x80>)
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d4:	6153      	str	r3, [r2, #20]
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_SPI_MspInit+0x80>)
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024e2:	23f0      	movs	r3, #240	; 0xf0
 80024e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ee:	2303      	movs	r3, #3
 80024f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024f2:	2305      	movs	r3, #5
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002500:	f002 fbc8 	bl	8004c94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002504:	bf00      	nop
 8002506:	3728      	adds	r7, #40	; 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40013000 	.word	0x40013000
 8002510:	40021000 	.word	0x40021000

08002514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_MspInit+0x4c>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <HAL_MspInit+0x4c>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6193      	str	r3, [r2, #24]
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_MspInit+0x4c>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_MspInit+0x4c>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <HAL_MspInit+0x4c>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	61d3      	str	r3, [r2, #28]
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_MspInit+0x4c>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	210f      	movs	r1, #15
 800254e:	f06f 0001 	mvn.w	r0, #1
 8002552:	f002 f8d7 	bl	8004704 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000

08002564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	; 0x30
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002574:	2200      	movs	r2, #0
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	2036      	movs	r0, #54	; 0x36
 800257a:	f002 f8c3 	bl	8004704 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800257e:	2036      	movs	r0, #54	; 0x36
 8002580:	f002 f8dc 	bl	800473c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002584:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <HAL_InitTick+0xa0>)
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <HAL_InitTick+0xa0>)
 800258a:	f043 0310 	orr.w	r3, r3, #16
 800258e:	61d3      	str	r3, [r2, #28]
 8002590:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <HAL_InitTick+0xa0>)
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800259c:	f107 0210 	add.w	r2, r7, #16
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f006 f9de 	bl	8008968 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80025ac:	f006 f9ba 	bl	8008924 <HAL_RCC_GetPCLK1Freq>
 80025b0:	4603      	mov	r3, r0
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	4a13      	ldr	r2, [pc, #76]	; (8002608 <HAL_InitTick+0xa4>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0c9b      	lsrs	r3, r3, #18
 80025c0:	3b01      	subs	r3, #1
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_InitTick+0xa8>)
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <HAL_InitTick+0xac>)
 80025c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_InitTick+0xa8>)
 80025cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_InitTick+0xa8>)
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_InitTick+0xa8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_InitTick+0xa8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80025e4:	4809      	ldr	r0, [pc, #36]	; (800260c <HAL_InitTick+0xa8>)
 80025e6:	f006 fd31 	bl	800904c <HAL_TIM_Base_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80025f0:	4806      	ldr	r0, [pc, #24]	; (800260c <HAL_InitTick+0xa8>)
 80025f2:	f006 fd8d 	bl	8009110 <HAL_TIM_Base_Start_IT>
 80025f6:	4603      	mov	r3, r0
 80025f8:	e000      	b.n	80025fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3730      	adds	r7, #48	; 0x30
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000
 8002608:	431bde83 	.word	0x431bde83
 800260c:	200004a4 	.word	0x200004a4
 8002610:	40001000 	.word	0x40001000

08002614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  __NOP();
 8002618:	bf00      	nop
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <HardFault_Handler+0x4>

0800262a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <MemManage_Handler+0x4>

08002630 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <BusFault_Handler+0x4>

08002636 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <UsageFault_Handler+0x4>

0800263c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <DMA1_Channel1_IRQHandler+0x10>)
 8002652:	f002 fa11 	bl	8004a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000204 	.word	0x20000204

08002660 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002666:	f001 fd65 	bl	8004134 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000032c 	.word	0x2000032c

08002674 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <TIM6_DAC_IRQHandler+0x10>)
 800267a:	f006 fdb3 	bl	80091e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200004a4 	.word	0x200004a4

08002688 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <DMA2_Channel2_IRQHandler+0x10>)
 800268e:	f002 f9f3 	bl	8004a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000248 	.word	0x20000248

0800269c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <USB_LP_IRQHandler+0x10>)
 80026a2:	f003 faa8 	bl	8005bf6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20004dec 	.word	0x20004dec

080026b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	e00a      	b.n	80026d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026c2:	f3af 8000 	nop.w
 80026c6:	4601      	mov	r1, r0
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	60ba      	str	r2, [r7, #8]
 80026ce:	b2ca      	uxtb	r2, r1
 80026d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3301      	adds	r3, #1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	dbf0      	blt.n	80026c2 <_read+0x12>
	}

return len;
 80026e0:	687b      	ldr	r3, [r7, #4]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <_close>:
	}
	return len;
}

int _close(int file)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
	return -1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002712:	605a      	str	r2, [r3, #4]
	return 0;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <_isatty>:

int _isatty(int file)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
	return 1;
 800272a:	2301      	movs	r3, #1
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
	return 0;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800275c:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <_sbrk+0x5c>)
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <_sbrk+0x60>)
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <_sbrk+0x64>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <_sbrk+0x64>)
 8002772:	4a12      	ldr	r2, [pc, #72]	; (80027bc <_sbrk+0x68>)
 8002774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <_sbrk+0x64>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	429a      	cmp	r2, r3
 8002782:	d207      	bcs.n	8002794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002784:	f013 fa22 	bl	8015bcc <__errno>
 8002788:	4603      	mov	r3, r0
 800278a:	220c      	movs	r2, #12
 800278c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
 8002792:	e009      	b.n	80027a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <_sbrk+0x64>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <_sbrk+0x64>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <_sbrk+0x64>)
 80027a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027a6:	68fb      	ldr	r3, [r7, #12]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	2000a000 	.word	0x2000a000
 80027b4:	00000400 	.word	0x00000400
 80027b8:	200004f0 	.word	0x200004f0
 80027bc:	20005308 	.word	0x20005308

080027c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <SystemInit+0x28>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <SystemInit+0x28>)
 80027cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <SystemInit+0x28>)
 80027d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027da:	609a      	str	r2, [r3, #8]
#endif
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002824 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027f2:	e003      	b.n	80027fc <LoopCopyDataInit>

080027f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027fa:	3104      	adds	r1, #4

080027fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027fc:	480b      	ldr	r0, [pc, #44]	; (800282c <LoopForever+0xa>)
	ldr	r3, =_edata
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002800:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002802:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002804:	d3f6      	bcc.n	80027f4 <CopyDataInit>
	ldr	r2, =_sbss
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002808:	e002      	b.n	8002810 <LoopFillZerobss>

0800280a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800280a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800280c:	f842 3b04 	str.w	r3, [r2], #4

08002810 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <LoopForever+0x16>)
	cmp	r2, r3
 8002812:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002814:	d3f9      	bcc.n	800280a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002816:	f7ff ffd3 	bl	80027c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800281a:	f013 f9dd 	bl	8015bd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800281e:	f7ff fcef 	bl	8002200 <main>

08002822 <LoopForever>:

LoopForever:
    b LoopForever
 8002822:	e7fe      	b.n	8002822 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002824:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002828:	08016de8 	.word	0x08016de8
	ldr	r0, =_sdata
 800282c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002830:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8002834:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8002838:	20005308 	.word	0x20005308

0800283c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC1_2_IRQHandler>
	...

08002840 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_Init+0x28>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a07      	ldr	r2, [pc, #28]	; (8002868 <HAL_Init+0x28>)
 800284a:	f043 0310 	orr.w	r3, r3, #16
 800284e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002850:	2003      	movs	r0, #3
 8002852:	f001 ff4c 	bl	80046ee <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002856:	2000      	movs	r0, #0
 8002858:	f7ff fe84 	bl	8002564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800285c:	f7ff fe5a 	bl	8002514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40022000 	.word	0x40022000

0800286c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_IncTick+0x20>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_IncTick+0x24>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <HAL_IncTick+0x24>)
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000008 	.word	0x20000008
 8002890:	200004f4 	.word	0x200004f4

08002894 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return uwTick;  
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_GetTick+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	200004f4 	.word	0x200004f4

080028ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b09a      	sub	sp, #104	; 0x68
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e1c9      	b.n	8002c9c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	2b00      	cmp	r3, #0
 8002918:	d176      	bne.n	8002a08 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d152      	bne.n	80029c8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff f84b 	bl	80019d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d13b      	bne.n	80029c8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 ff6d 	bl	8003830 <ADC_Disable>
 8002956:	4603      	mov	r3, r0
 8002958:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	d12f      	bne.n	80029c8 <HAL_ADC_Init+0xe0>
 8002968:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800296c:	2b00      	cmp	r3, #0
 800296e:	d12b      	bne.n	80029c8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002978:	f023 0302 	bic.w	r3, r3, #2
 800297c:	f043 0202 	orr.w	r2, r3, #2
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002992:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029a2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029a4:	4b86      	ldr	r3, [pc, #536]	; (8002bc0 <HAL_ADC_Init+0x2d8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a86      	ldr	r2, [pc, #536]	; (8002bc4 <HAL_ADC_Init+0x2dc>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	0c9a      	lsrs	r2, r3, #18
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029ba:	e002      	b.n	80029c2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	3b01      	subs	r3, #1
 80029c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f9      	bne.n	80029bc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d007      	beq.n	80029e6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80029e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e4:	d110      	bne.n	8002a08 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f023 0312 	bic.w	r3, r3, #18
 80029ee:	f043 0210 	orr.w	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 8136 	bne.w	8002c82 <HAL_ADC_Init+0x39a>
 8002a16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 8131 	bne.w	8002c82 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 8129 	bne.w	8002c82 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a38:	f043 0202 	orr.w	r2, r3, #2
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a48:	d004      	beq.n	8002a54 <HAL_ADC_Init+0x16c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a5e      	ldr	r2, [pc, #376]	; (8002bc8 <HAL_ADC_Init+0x2e0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d101      	bne.n	8002a58 <HAL_ADC_Init+0x170>
 8002a54:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <HAL_ADC_Init+0x2e4>)
 8002a56:	e000      	b.n	8002a5a <HAL_ADC_Init+0x172>
 8002a58:	4b5d      	ldr	r3, [pc, #372]	; (8002bd0 <HAL_ADC_Init+0x2e8>)
 8002a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a64:	d102      	bne.n	8002a6c <HAL_ADC_Init+0x184>
 8002a66:	4b58      	ldr	r3, [pc, #352]	; (8002bc8 <HAL_ADC_Init+0x2e0>)
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	e01a      	b.n	8002aa2 <HAL_ADC_Init+0x1ba>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a55      	ldr	r2, [pc, #340]	; (8002bc8 <HAL_ADC_Init+0x2e0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d103      	bne.n	8002a7e <HAL_ADC_Init+0x196>
 8002a76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e011      	b.n	8002aa2 <HAL_ADC_Init+0x1ba>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a54      	ldr	r2, [pc, #336]	; (8002bd4 <HAL_ADC_Init+0x2ec>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d102      	bne.n	8002a8e <HAL_ADC_Init+0x1a6>
 8002a88:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <HAL_ADC_Init+0x2f0>)
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e009      	b.n	8002aa2 <HAL_ADC_Init+0x1ba>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a51      	ldr	r2, [pc, #324]	; (8002bd8 <HAL_ADC_Init+0x2f0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d102      	bne.n	8002a9e <HAL_ADC_Init+0x1b6>
 8002a98:	4b4e      	ldr	r3, [pc, #312]	; (8002bd4 <HAL_ADC_Init+0x2ec>)
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	e001      	b.n	8002aa2 <HAL_ADC_Init+0x1ba>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d108      	bne.n	8002ac2 <HAL_ADC_Init+0x1da>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_Init+0x1da>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_ADC_Init+0x1dc>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11c      	bne.n	8002b02 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ac8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d010      	beq.n	8002af0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d107      	bne.n	8002aea <HAL_ADC_Init+0x202>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_Init+0x202>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_ADC_Init+0x204>
 8002aea:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d108      	bne.n	8002b02 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b00:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	7e5b      	ldrb	r3, [r3, #25]
 8002b06:	035b      	lsls	r3, r3, #13
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b0c:	2a01      	cmp	r2, #1
 8002b0e:	d002      	beq.n	8002b16 <HAL_ADC_Init+0x22e>
 8002b10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b14:	e000      	b.n	8002b18 <HAL_ADC_Init+0x230>
 8002b16:	2200      	movs	r2, #0
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d11b      	bne.n	8002b6e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	7e5b      	ldrb	r3, [r3, #25]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	3b01      	subs	r3, #1
 8002b44:	045a      	lsls	r2, r3, #17
 8002b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4e:	663b      	str	r3, [r7, #96]	; 0x60
 8002b50:	e00d      	b.n	8002b6e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002b5a:	f043 0220 	orr.w	r2, r3, #32
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d03a      	beq.n	8002bec <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a16      	ldr	r2, [pc, #88]	; (8002bd4 <HAL_ADC_Init+0x2ec>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d004      	beq.n	8002b8a <HAL_ADC_Init+0x2a2>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <HAL_ADC_Init+0x2f0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d128      	bne.n	8002bdc <HAL_ADC_Init+0x2f4>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002b92:	d012      	beq.n	8002bba <HAL_ADC_Init+0x2d2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_ADC_Init+0x2cc>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002ba6:	d002      	beq.n	8002bae <HAL_ADC_Init+0x2c6>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	e018      	b.n	8002be0 <HAL_ADC_Init+0x2f8>
 8002bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bb2:	e015      	b.n	8002be0 <HAL_ADC_Init+0x2f8>
 8002bb4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002bb8:	e012      	b.n	8002be0 <HAL_ADC_Init+0x2f8>
 8002bba:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002bbe:	e00f      	b.n	8002be0 <HAL_ADC_Init+0x2f8>
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	431bde83 	.word	0x431bde83
 8002bc8:	50000100 	.word	0x50000100
 8002bcc:	50000300 	.word	0x50000300
 8002bd0:	50000700 	.word	0x50000700
 8002bd4:	50000400 	.word	0x50000400
 8002bd8:	50000500 	.word	0x50000500
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002be4:	4313      	orrs	r3, r2
 8002be6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002be8:	4313      	orrs	r3, r2
 8002bea:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d114      	bne.n	8002c24 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c08:	f023 0302 	bic.w	r3, r3, #2
 8002c0c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	7e1b      	ldrb	r3, [r3, #24]
 8002c12:	039a      	lsls	r2, r3, #14
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c20:	4313      	orrs	r3, r2
 8002c22:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_ADC_Init+0x3bc>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002c34:	430b      	orrs	r3, r1
 8002c36:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d10c      	bne.n	8002c5a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f023 010f 	bic.w	r1, r3, #15
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	1e5a      	subs	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
 8002c58:	e007      	b.n	8002c6a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 020f 	bic.w	r2, r2, #15
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f023 0303 	bic.w	r3, r3, #3
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c80:	e00a      	b.n	8002c98 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f023 0312 	bic.w	r3, r3, #18
 8002c8a:	f043 0210 	orr.w	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002c92:	2301      	movs	r3, #1
 8002c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002c98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3768      	adds	r7, #104	; 0x68
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	fff0c007 	.word	0xfff0c007

08002ca8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 80f7 	bne.w	8002eb6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_ADC_Start_DMA+0x2e>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e0f2      	b.n	8002ebc <HAL_ADC_Start_DMA+0x214>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ce6:	d004      	beq.n	8002cf2 <HAL_ADC_Start_DMA+0x4a>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a75      	ldr	r2, [pc, #468]	; (8002ec4 <HAL_ADC_Start_DMA+0x21c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d109      	bne.n	8002d06 <HAL_ADC_Start_DMA+0x5e>
 8002cf2:	4b75      	ldr	r3, [pc, #468]	; (8002ec8 <HAL_ADC_Start_DMA+0x220>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2301      	moveq	r3, #1
 8002d00:	2300      	movne	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	e008      	b.n	8002d18 <HAL_ADC_Start_DMA+0x70>
 8002d06:	4b71      	ldr	r3, [pc, #452]	; (8002ecc <HAL_ADC_Start_DMA+0x224>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bf0c      	ite	eq
 8002d12:	2301      	moveq	r3, #1
 8002d14:	2300      	movne	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80c5 	beq.w	8002ea8 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fd22 	bl	8003768 <ADC_Enable>
 8002d24:	4603      	mov	r3, r0
 8002d26:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 80b7 	bne.w	8002e9e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d4c:	d004      	beq.n	8002d58 <HAL_ADC_Start_DMA+0xb0>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a5c      	ldr	r2, [pc, #368]	; (8002ec4 <HAL_ADC_Start_DMA+0x21c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d106      	bne.n	8002d66 <HAL_ADC_Start_DMA+0xbe>
 8002d58:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <HAL_ADC_Start_DMA+0x220>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d010      	beq.n	8002d86 <HAL_ADC_Start_DMA+0xde>
 8002d64:	e005      	b.n	8002d72 <HAL_ADC_Start_DMA+0xca>
 8002d66:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <HAL_ADC_Start_DMA+0x224>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <HAL_ADC_Start_DMA+0xde>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d7a:	d004      	beq.n	8002d86 <HAL_ADC_Start_DMA+0xde>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a53      	ldr	r2, [pc, #332]	; (8002ed0 <HAL_ADC_Start_DMA+0x228>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d115      	bne.n	8002db2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d036      	beq.n	8002e0e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002da8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002db0:	e02d      	b.n	8002e0e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc6:	d004      	beq.n	8002dd2 <HAL_ADC_Start_DMA+0x12a>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a3d      	ldr	r2, [pc, #244]	; (8002ec4 <HAL_ADC_Start_DMA+0x21c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d10a      	bne.n	8002de8 <HAL_ADC_Start_DMA+0x140>
 8002dd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e008      	b.n	8002dfa <HAL_ADC_Start_DMA+0x152>
 8002de8:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <HAL_ADC_Start_DMA+0x228>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf14      	ite	ne
 8002df4:	2301      	movne	r3, #1
 8002df6:	2300      	moveq	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1a:	d106      	bne.n	8002e2a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e20:	f023 0206 	bic.w	r2, r3, #6
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	645a      	str	r2, [r3, #68]	; 0x44
 8002e28:	e002      	b.n	8002e30 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	4a25      	ldr	r2, [pc, #148]	; (8002ed4 <HAL_ADC_Start_DMA+0x22c>)
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	4a24      	ldr	r2, [pc, #144]	; (8002ed8 <HAL_ADC_Start_DMA+0x230>)
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	4a23      	ldr	r2, [pc, #140]	; (8002edc <HAL_ADC_Start_DMA+0x234>)
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	221c      	movs	r2, #28
 8002e56:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0210 	orr.w	r2, r2, #16
 8002e66:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3340      	adds	r3, #64	; 0x40
 8002e82:	4619      	mov	r1, r3
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f001 fd97 	bl	80049ba <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0204 	orr.w	r2, r2, #4
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	e00d      	b.n	8002eba <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ea6:	e008      	b.n	8002eba <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002eb4:	e001      	b.n	8002eba <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	50000100 	.word	0x50000100
 8002ec8:	50000300 	.word	0x50000300
 8002ecc:	50000700 	.word	0x50000700
 8002ed0:	50000400 	.word	0x50000400
 8002ed4:	0800369d 	.word	0x0800369d
 8002ed8:	08003717 	.word	0x08003717
 8002edc:	08003733 	.word	0x08003733

08002ee0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b09b      	sub	sp, #108	; 0x6c
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x22>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e2ca      	b.n	8003498 <HAL_ADC_ConfigChannel+0x5b8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 82ae 	bne.w	8003476 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d81c      	bhi.n	8002f5c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	461a      	mov	r2, r3
 8002f36:	231f      	movs	r3, #31
 8002f38:	4093      	lsls	r3, r2
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	4019      	ands	r1, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30
 8002f5a:	e063      	b.n	8003024 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b09      	cmp	r3, #9
 8002f62:	d81e      	bhi.n	8002fa2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	3b1e      	subs	r3, #30
 8002f78:	221f      	movs	r2, #31
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	4019      	ands	r1, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	3b1e      	subs	r3, #30
 8002f94:	fa00 f203 	lsl.w	r2, r0, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa0:	e040      	b.n	8003024 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b0e      	cmp	r3, #14
 8002fa8:	d81e      	bhi.n	8002fe8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	3b3c      	subs	r3, #60	; 0x3c
 8002fbe:	221f      	movs	r2, #31
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	4019      	ands	r1, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	3b3c      	subs	r3, #60	; 0x3c
 8002fda:	fa00 f203 	lsl.w	r2, r0, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
 8002fe6:	e01d      	b.n	8003024 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	3b5a      	subs	r3, #90	; 0x5a
 8002ffc:	221f      	movs	r2, #31
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	4019      	ands	r1, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4413      	add	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	3b5a      	subs	r3, #90	; 0x5a
 8003018:	fa00 f203 	lsl.w	r2, r0, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 80e5 	bne.w	80031fe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b09      	cmp	r3, #9
 800303a:	d91c      	bls.n	8003076 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6999      	ldr	r1, [r3, #24]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	3b1e      	subs	r3, #30
 800304e:	2207      	movs	r2, #7
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	4019      	ands	r1, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6898      	ldr	r0, [r3, #8]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4613      	mov	r3, r2
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4413      	add	r3, r2
 8003066:	3b1e      	subs	r3, #30
 8003068:	fa00 f203 	lsl.w	r2, r0, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	619a      	str	r2, [r3, #24]
 8003074:	e019      	b.n	80030aa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6959      	ldr	r1, [r3, #20]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4413      	add	r3, r2
 8003086:	2207      	movs	r2, #7
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	4019      	ands	r1, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6898      	ldr	r0, [r3, #8]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	fa00 f203 	lsl.w	r2, r0, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	08db      	lsrs	r3, r3, #3
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d84f      	bhi.n	800316c <HAL_ADC_ConfigChannel+0x28c>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <HAL_ADC_ConfigChannel+0x1f4>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	08003107 	.word	0x08003107
 80030dc:	08003129 	.word	0x08003129
 80030e0:	0800314b 	.word	0x0800314b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ea:	4b9a      	ldr	r3, [pc, #616]	; (8003354 <HAL_ADC_ConfigChannel+0x474>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	0691      	lsls	r1, r2, #26
 80030f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030f6:	430a      	orrs	r2, r1
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003102:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003104:	e07e      	b.n	8003204 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800310c:	4b91      	ldr	r3, [pc, #580]	; (8003354 <HAL_ADC_ConfigChannel+0x474>)
 800310e:	4013      	ands	r3, r2
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	0691      	lsls	r1, r2, #26
 8003116:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003118:	430a      	orrs	r2, r1
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003124:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003126:	e06d      	b.n	8003204 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800312e:	4b89      	ldr	r3, [pc, #548]	; (8003354 <HAL_ADC_ConfigChannel+0x474>)
 8003130:	4013      	ands	r3, r2
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	0691      	lsls	r1, r2, #26
 8003138:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800313a:	430a      	orrs	r2, r1
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003146:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003148:	e05c      	b.n	8003204 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003150:	4b80      	ldr	r3, [pc, #512]	; (8003354 <HAL_ADC_ConfigChannel+0x474>)
 8003152:	4013      	ands	r3, r2
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	0691      	lsls	r1, r2, #26
 800315a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800315c:	430a      	orrs	r2, r1
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003168:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800316a:	e04b      	b.n	8003204 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003172:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	069b      	lsls	r3, r3, #26
 800317c:	429a      	cmp	r2, r3
 800317e:	d107      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800318e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003196:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	069b      	lsls	r3, r3, #26
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d107      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031b2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	069b      	lsls	r3, r3, #26
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d107      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031d6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	069b      	lsls	r3, r3, #26
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d10a      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80031fc:	e001      	b.n	8003202 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80031fe:	bf00      	nop
 8003200:	e000      	b.n	8003204 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003202:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d108      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x344>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x344>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_ADC_ConfigChannel+0x346>
 8003224:	2300      	movs	r3, #0
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 8130 	bne.w	800348c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d00f      	beq.n	8003254 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2201      	movs	r2, #1
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	400a      	ands	r2, r1
 800324e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003252:	e049      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2201      	movs	r2, #1
 8003262:	409a      	lsls	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b09      	cmp	r3, #9
 8003274:	d91c      	bls.n	80032b0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6999      	ldr	r1, [r3, #24]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	3b1b      	subs	r3, #27
 8003288:	2207      	movs	r2, #7
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	4019      	ands	r1, r3
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6898      	ldr	r0, [r3, #8]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	3b1b      	subs	r3, #27
 80032a2:	fa00 f203 	lsl.w	r2, r0, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	619a      	str	r2, [r3, #24]
 80032ae:	e01b      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6959      	ldr	r1, [r3, #20]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	2207      	movs	r2, #7
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	4019      	ands	r1, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6898      	ldr	r0, [r3, #8]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	fa00 f203 	lsl.w	r2, r0, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032f0:	d004      	beq.n	80032fc <HAL_ADC_ConfigChannel+0x41c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a18      	ldr	r2, [pc, #96]	; (8003358 <HAL_ADC_ConfigChannel+0x478>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d101      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x420>
 80032fc:	4b17      	ldr	r3, [pc, #92]	; (800335c <HAL_ADC_ConfigChannel+0x47c>)
 80032fe:	e000      	b.n	8003302 <HAL_ADC_ConfigChannel+0x422>
 8003300:	4b17      	ldr	r3, [pc, #92]	; (8003360 <HAL_ADC_ConfigChannel+0x480>)
 8003302:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b10      	cmp	r3, #16
 800330a:	d105      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800330c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003314:	2b00      	cmp	r3, #0
 8003316:	d015      	beq.n	8003344 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800331c:	2b11      	cmp	r3, #17
 800331e:	d105      	bne.n	800332c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00b      	beq.n	8003344 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003330:	2b12      	cmp	r3, #18
 8003332:	f040 80ab 	bne.w	800348c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 80a4 	bne.w	800348c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800334c:	d10a      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x484>
 800334e:	4b02      	ldr	r3, [pc, #8]	; (8003358 <HAL_ADC_ConfigChannel+0x478>)
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e022      	b.n	800339a <HAL_ADC_ConfigChannel+0x4ba>
 8003354:	83fff000 	.word	0x83fff000
 8003358:	50000100 	.word	0x50000100
 800335c:	50000300 	.word	0x50000300
 8003360:	50000700 	.word	0x50000700
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a4e      	ldr	r2, [pc, #312]	; (80034a4 <HAL_ADC_ConfigChannel+0x5c4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d103      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x496>
 800336e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	e011      	b.n	800339a <HAL_ADC_ConfigChannel+0x4ba>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a4b      	ldr	r2, [pc, #300]	; (80034a8 <HAL_ADC_ConfigChannel+0x5c8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d102      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x4a6>
 8003380:	4b4a      	ldr	r3, [pc, #296]	; (80034ac <HAL_ADC_ConfigChannel+0x5cc>)
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e009      	b.n	800339a <HAL_ADC_ConfigChannel+0x4ba>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a48      	ldr	r2, [pc, #288]	; (80034ac <HAL_ADC_ConfigChannel+0x5cc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d102      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x4b6>
 8003390:	4b45      	ldr	r3, [pc, #276]	; (80034a8 <HAL_ADC_ConfigChannel+0x5c8>)
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	e001      	b.n	800339a <HAL_ADC_ConfigChannel+0x4ba>
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d108      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x4da>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x4da>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_ADC_ConfigChannel+0x4dc>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d150      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80033c0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d010      	beq.n	80033e8 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d107      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x502>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x502>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x504>
 80033e2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d13c      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d11d      	bne.n	800342c <HAL_ADC_ConfigChannel+0x54c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f8:	d118      	bne.n	800342c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80033fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003404:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003406:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <HAL_ADC_ConfigChannel+0x5d0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2a      	ldr	r2, [pc, #168]	; (80034b4 <HAL_ADC_ConfigChannel+0x5d4>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	0c9a      	lsrs	r2, r3, #18
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800341c:	e002      	b.n	8003424 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3b01      	subs	r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f9      	bne.n	800341e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800342a:	e02e      	b.n	800348a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b11      	cmp	r3, #17
 8003432:	d10b      	bne.n	800344c <HAL_ADC_ConfigChannel+0x56c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800343c:	d106      	bne.n	800344c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800343e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003448:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800344a:	e01e      	b.n	800348a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b12      	cmp	r3, #18
 8003452:	d11a      	bne.n	800348a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800345c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800345e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003460:	e013      	b.n	800348a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003474:	e00a      	b.n	800348c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f043 0220 	orr.w	r2, r3, #32
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003488:	e000      	b.n	800348c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800348a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003494:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003498:	4618      	mov	r0, r3
 800349a:	376c      	adds	r7, #108	; 0x6c
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	50000100 	.word	0x50000100
 80034a8:	50000400 	.word	0x50000400
 80034ac:	50000500 	.word	0x50000500
 80034b0:	20000000 	.word	0x20000000
 80034b4:	431bde83 	.word	0x431bde83

080034b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b099      	sub	sp, #100	; 0x64
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d0:	d102      	bne.n	80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80034d2:	4b6d      	ldr	r3, [pc, #436]	; (8003688 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	e01a      	b.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a6a      	ldr	r2, [pc, #424]	; (8003688 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d103      	bne.n	80034ea <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80034e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	e011      	b.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a67      	ldr	r2, [pc, #412]	; (800368c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d102      	bne.n	80034fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034f4:	4b66      	ldr	r3, [pc, #408]	; (8003690 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	e009      	b.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a64      	ldr	r2, [pc, #400]	; (8003690 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d102      	bne.n	800350a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003504:	4b61      	ldr	r3, [pc, #388]	; (800368c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	e001      	b.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0b0      	b.n	800367a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003522:	2302      	movs	r3, #2
 8003524:	e0a9      	b.n	800367a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	f040 808d 	bne.w	8003658 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	f040 8086 	bne.w	8003658 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003554:	d004      	beq.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a4b      	ldr	r2, [pc, #300]	; (8003688 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d101      	bne.n	8003564 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003560:	4b4c      	ldr	r3, [pc, #304]	; (8003694 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003562:	e000      	b.n	8003566 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003564:	4b4c      	ldr	r3, [pc, #304]	; (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003566:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d040      	beq.n	80035f2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003582:	035b      	lsls	r3, r3, #13
 8003584:	430b      	orrs	r3, r1
 8003586:	431a      	orrs	r2, r3
 8003588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800358a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d108      	bne.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80035ac:	2300      	movs	r3, #0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d15c      	bne.n	800366c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80035ce:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d14b      	bne.n	800366c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80035d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035dc:	f023 030f 	bic.w	r3, r3, #15
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	6811      	ldr	r1, [r2, #0]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	6892      	ldr	r2, [r2, #8]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	431a      	orrs	r2, r3
 80035ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ee:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80035f0:	e03c      	b.n	800366c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035fc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d108      	bne.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d123      	bne.n	800366c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003640:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003642:	2b00      	cmp	r3, #0
 8003644:	d112      	bne.n	800366c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800364e:	f023 030f 	bic.w	r3, r3, #15
 8003652:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003654:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003656:	e009      	b.n	800366c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	f043 0220 	orr.w	r2, r3, #32
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800366a:	e000      	b.n	800366e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800366c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800367a:	4618      	mov	r0, r3
 800367c:	3764      	adds	r7, #100	; 0x64
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	50000100 	.word	0x50000100
 800368c:	50000400 	.word	0x50000400
 8003690:	50000500 	.word	0x50000500
 8003694:	50000300 	.word	0x50000300
 8003698:	50000700 	.word	0x50000700

0800369c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d126      	bne.n	8003704 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d115      	bne.n	80036fc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d111      	bne.n	80036fc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0201 	orr.w	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff f8d5 	bl	80028ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003702:	e004      	b.n	800370e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
}
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff f8cb 	bl	80028c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800372a:	bf00      	nop
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	f043 0204 	orr.w	r2, r3, #4
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7ff f8bb 	bl	80028d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d108      	bne.n	8003794 <ADC_Enable+0x2c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <ADC_Enable+0x2c>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <ADC_Enable+0x2e>
 8003794:	2300      	movs	r3, #0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d143      	bne.n	8003822 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	4b22      	ldr	r3, [pc, #136]	; (800382c <ADC_Enable+0xc4>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00d      	beq.n	80037c4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f043 0210 	orr.w	r2, r3, #16
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b8:	f043 0201 	orr.w	r2, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e02f      	b.n	8003824 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80037d4:	f7ff f85e 	bl	8002894 <HAL_GetTick>
 80037d8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037da:	e01b      	b.n	8003814 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037dc:	f7ff f85a 	bl	8002894 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d914      	bls.n	8003814 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d00d      	beq.n	8003814 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f043 0210 	orr.w	r2, r3, #16
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	f043 0201 	orr.w	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e007      	b.n	8003824 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d1dc      	bne.n	80037dc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	8000003f 	.word	0x8000003f

08003830 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d108      	bne.n	800385c <ADC_Disable+0x2c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <ADC_Disable+0x2c>
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <ADC_Disable+0x2e>
 800385c:	2300      	movs	r3, #0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d047      	beq.n	80038f2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 030d 	and.w	r3, r3, #13
 800386c:	2b01      	cmp	r3, #1
 800386e:	d10f      	bne.n	8003890 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0202 	orr.w	r2, r2, #2
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2203      	movs	r2, #3
 8003886:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003888:	f7ff f804 	bl	8002894 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800388e:	e029      	b.n	80038e4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	f043 0210 	orr.w	r2, r3, #16
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	f043 0201 	orr.w	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e023      	b.n	80038f4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038ac:	f7fe fff2 	bl	8002894 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d914      	bls.n	80038e4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d10d      	bne.n	80038e4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f043 0210 	orr.w	r2, r3, #16
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d8:	f043 0201 	orr.w	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e007      	b.n	80038f4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d0dc      	beq.n	80038ac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e0ed      	b.n	8003aea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fe f93c 	bl	8001b98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003930:	f7fe ffb0 	bl	8002894 <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003936:	e012      	b.n	800395e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003938:	f7fe ffac 	bl	8002894 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b0a      	cmp	r3, #10
 8003944:	d90b      	bls.n	800395e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2205      	movs	r2, #5
 8003956:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0c5      	b.n	8003aea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0e5      	beq.n	8003938 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0202 	bic.w	r2, r2, #2
 800397a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800397c:	f7fe ff8a 	bl	8002894 <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003982:	e012      	b.n	80039aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003984:	f7fe ff86 	bl	8002894 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b0a      	cmp	r3, #10
 8003990:	d90b      	bls.n	80039aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2205      	movs	r2, #5
 80039a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e09f      	b.n	8003aea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e5      	bne.n	8003984 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7e1b      	ldrb	r3, [r3, #24]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d108      	bne.n	80039d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e007      	b.n	80039e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7e5b      	ldrb	r3, [r3, #25]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d108      	bne.n	80039fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e007      	b.n	8003a0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	7e9b      	ldrb	r3, [r3, #26]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d108      	bne.n	8003a26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0220 	orr.w	r2, r2, #32
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	e007      	b.n	8003a36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0220 	bic.w	r2, r2, #32
 8003a34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	7edb      	ldrb	r3, [r3, #27]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d108      	bne.n	8003a50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0210 	bic.w	r2, r2, #16
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e007      	b.n	8003a60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0210 	orr.w	r2, r2, #16
 8003a5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	7f1b      	ldrb	r3, [r3, #28]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d108      	bne.n	8003a7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0208 	orr.w	r2, r2, #8
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	e007      	b.n	8003a8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0208 	bic.w	r2, r2, #8
 8003a88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	7f5b      	ldrb	r3, [r3, #29]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d108      	bne.n	8003aa4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0204 	orr.w	r2, r2, #4
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e007      	b.n	8003ab4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0204 	bic.w	r2, r2, #4
 8003ab2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	ea42 0103 	orr.w	r1, r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	1e5a      	subs	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b08:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d003      	beq.n	8003b18 <HAL_CAN_ConfigFilter+0x26>
 8003b10:	7cfb      	ldrb	r3, [r7, #19]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	f040 80aa 	bne.w	8003c6c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2201      	movs	r2, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	401a      	ands	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d123      	bne.n	8003b9a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	3248      	adds	r2, #72	; 0x48
 8003b7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b90:	6979      	ldr	r1, [r7, #20]
 8003b92:	3348      	adds	r3, #72	; 0x48
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	440b      	add	r3, r1
 8003b98:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d122      	bne.n	8003be8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003bc2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	3248      	adds	r2, #72	; 0x48
 8003bc8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bdc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bde:	6979      	ldr	r1, [r7, #20]
 8003be0:	3348      	adds	r3, #72	; 0x48
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	440b      	add	r3, r1
 8003be6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003c02:	e007      	b.n	8003c14 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d109      	bne.n	8003c30 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	401a      	ands	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003c2e:	e007      	b.n	8003c40 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	431a      	orrs	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c5e:	f023 0201 	bic.w	r2, r3, #1
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e006      	b.n	8003c7a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d12e      	bne.n	8003cf8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cb2:	f7fe fdef 	bl	8002894 <HAL_GetTick>
 8003cb6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003cb8:	e012      	b.n	8003ce0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003cba:	f7fe fdeb 	bl	8002894 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b0a      	cmp	r3, #10
 8003cc6:	d90b      	bls.n	8003ce0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2205      	movs	r2, #5
 8003cd8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e012      	b.n	8003d06 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e5      	bne.n	8003cba <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e006      	b.n	8003d06 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b089      	sub	sp, #36	; 0x24
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d22:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d2c:	7ffb      	ldrb	r3, [r7, #31]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d003      	beq.n	8003d3a <HAL_CAN_AddTxMessage+0x2c>
 8003d32:	7ffb      	ldrb	r3, [r7, #31]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	f040 80b8 	bne.w	8003eaa <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d105      	bne.n	8003d5a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80a0 	beq.w	8003e9a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	0e1b      	lsrs	r3, r3, #24
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d907      	bls.n	8003d7a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e09e      	b.n	8003eb8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10d      	bne.n	8003da8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	6809      	ldr	r1, [r1, #0]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	3318      	adds	r3, #24
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	440b      	add	r3, r1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e00f      	b.n	8003dc8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003db2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003db8:	68f9      	ldr	r1, [r7, #12]
 8003dba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003dbc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	3318      	adds	r3, #24
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	440b      	add	r3, r1
 8003dc6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6819      	ldr	r1, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	3318      	adds	r3, #24
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3304      	adds	r3, #4
 8003dda:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	7d1b      	ldrb	r3, [r3, #20]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d111      	bne.n	8003e08 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	3318      	adds	r3, #24
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	4413      	add	r3, r2
 8003df0:	3304      	adds	r3, #4
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	6811      	ldr	r1, [r2, #0]
 8003df8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	3318      	adds	r3, #24
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	440b      	add	r3, r1
 8003e04:	3304      	adds	r3, #4
 8003e06:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3307      	adds	r3, #7
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	061a      	lsls	r2, r3, #24
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3306      	adds	r3, #6
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	041b      	lsls	r3, r3, #16
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3305      	adds	r3, #5
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	4313      	orrs	r3, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	3204      	adds	r2, #4
 8003e28:	7812      	ldrb	r2, [r2, #0]
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	6811      	ldr	r1, [r2, #0]
 8003e30:	ea43 0200 	orr.w	r2, r3, r0
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	440b      	add	r3, r1
 8003e3a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003e3e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3303      	adds	r3, #3
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	061a      	lsls	r2, r3, #24
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3301      	adds	r3, #1
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	7812      	ldrb	r2, [r2, #0]
 8003e60:	4610      	mov	r0, r2
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	6811      	ldr	r1, [r2, #0]
 8003e66:	ea43 0200 	orr.w	r2, r3, r0
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	440b      	add	r3, r1
 8003e70:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003e74:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	3318      	adds	r3, #24
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	4413      	add	r3, r2
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	6811      	ldr	r1, [r2, #0]
 8003e88:	f043 0201 	orr.w	r2, r3, #1
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	3318      	adds	r3, #24
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	440b      	add	r3, r1
 8003e94:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e00e      	b.n	8003eb8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e006      	b.n	8003eb8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3724      	adds	r7, #36	; 0x24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ed8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d003      	beq.n	8003ee8 <HAL_CAN_GetRxMessage+0x24>
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	f040 80f3 	bne.w	80040ce <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10e      	bne.n	8003f0c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d116      	bne.n	8003f2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0e7      	b.n	80040dc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d107      	bne.n	8003f2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e0d8      	b.n	80040dc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	331b      	adds	r3, #27
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	4413      	add	r3, r2
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0204 	and.w	r2, r3, #4
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10c      	bne.n	8003f62 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	331b      	adds	r3, #27
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	4413      	add	r3, r2
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	0d5b      	lsrs	r3, r3, #21
 8003f58:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e00b      	b.n	8003f7a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	331b      	adds	r3, #27
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	4413      	add	r3, r2
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	08db      	lsrs	r3, r3, #3
 8003f72:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	331b      	adds	r3, #27
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	4413      	add	r3, r2
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0202 	and.w	r2, r3, #2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	331b      	adds	r3, #27
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 020f 	and.w	r2, r3, #15
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	331b      	adds	r3, #27
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	331b      	adds	r3, #27
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	4413      	add	r3, r2
 8003fcc:	3304      	adds	r3, #4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	0c1b      	lsrs	r3, r3, #16
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	0a1a      	lsrs	r2, r3, #8
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	3301      	adds	r3, #1
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	4413      	add	r3, r2
 8004012:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	0c1a      	lsrs	r2, r3, #16
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	3302      	adds	r3, #2
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	4413      	add	r3, r2
 800402c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	0e1a      	lsrs	r2, r3, #24
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	3303      	adds	r3, #3
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	4413      	add	r3, r2
 8004046:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	3304      	adds	r3, #4
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	4413      	add	r3, r2
 800405e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	0a1a      	lsrs	r2, r3, #8
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	3305      	adds	r3, #5
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	4413      	add	r3, r2
 8004078:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	0c1a      	lsrs	r2, r3, #16
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	3306      	adds	r3, #6
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	4413      	add	r3, r2
 8004092:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	0e1a      	lsrs	r2, r3, #24
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	3307      	adds	r3, #7
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d108      	bne.n	80040ba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0220 	orr.w	r2, r2, #32
 80040b6:	60da      	str	r2, [r3, #12]
 80040b8:	e007      	b.n	80040ca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0220 	orr.w	r2, r2, #32
 80040c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e006      	b.n	80040dc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
  }
}
 80040dc:	4618      	mov	r0, r3
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d002      	beq.n	8004106 <HAL_CAN_ActivateNotification+0x1e>
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d109      	bne.n	800411a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6959      	ldr	r1, [r3, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e006      	b.n	8004128 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
  }
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	; 0x28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800413c:	2300      	movs	r3, #0
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d07c      	beq.n	8004274 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d023      	beq.n	80041cc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2201      	movs	r2, #1
 800418a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f983 	bl	80044a2 <HAL_CAN_TxMailbox0CompleteCallback>
 800419c:	e016      	b.n	80041cc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d004      	beq.n	80041b2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
 80041b0:	e00c      	b.n	80041cc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
 80041c4:	e002      	b.n	80041cc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f989 	bl	80044de <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d024      	beq.n	8004220 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f963 	bl	80044b6 <HAL_CAN_TxMailbox1CompleteCallback>
 80041f0:	e016      	b.n	8004220 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d004      	beq.n	8004206 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
 8004204:	e00c      	b.n	8004220 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420c:	2b00      	cmp	r3, #0
 800420e:	d004      	beq.n	800421a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
 8004218:	e002      	b.n	8004220 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f969 	bl	80044f2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d024      	beq.n	8004274 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004232:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f943 	bl	80044ca <HAL_CAN_TxMailbox2CompleteCallback>
 8004244:	e016      	b.n	8004274 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d004      	beq.n	800425a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
 8004258:	e00c      	b.n	8004274 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d004      	beq.n	800426e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
 800426c:	e002      	b.n	8004274 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f949 	bl	8004506 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00c      	beq.n	8004298 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800428e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2210      	movs	r2, #16
 8004296:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00b      	beq.n	80042ba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d006      	beq.n	80042ba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2208      	movs	r2, #8
 80042b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f930 	bl	800451a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f00c f88e 	bl	80103f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00c      	beq.n	80042fc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2210      	movs	r2, #16
 80042fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d006      	beq.n	800431e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2208      	movs	r2, #8
 8004316:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f912 	bl	8004542 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f8f9 	bl	800452e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d006      	beq.n	800435e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2210      	movs	r2, #16
 8004356:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f8fc 	bl	8004556 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00b      	beq.n	8004380 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d006      	beq.n	8004380 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2208      	movs	r2, #8
 8004378:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f8f5 	bl	800456a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d07b      	beq.n	8004482 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d072      	beq.n	800447a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	f043 0302 	orr.w	r3, r3, #2
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	f043 0304 	orr.w	r3, r3, #4
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d043      	beq.n	800447a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d03e      	beq.n	800447a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004402:	2b60      	cmp	r3, #96	; 0x60
 8004404:	d02b      	beq.n	800445e <HAL_CAN_IRQHandler+0x32a>
 8004406:	2b60      	cmp	r3, #96	; 0x60
 8004408:	d82e      	bhi.n	8004468 <HAL_CAN_IRQHandler+0x334>
 800440a:	2b50      	cmp	r3, #80	; 0x50
 800440c:	d022      	beq.n	8004454 <HAL_CAN_IRQHandler+0x320>
 800440e:	2b50      	cmp	r3, #80	; 0x50
 8004410:	d82a      	bhi.n	8004468 <HAL_CAN_IRQHandler+0x334>
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	d019      	beq.n	800444a <HAL_CAN_IRQHandler+0x316>
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	d826      	bhi.n	8004468 <HAL_CAN_IRQHandler+0x334>
 800441a:	2b30      	cmp	r3, #48	; 0x30
 800441c:	d010      	beq.n	8004440 <HAL_CAN_IRQHandler+0x30c>
 800441e:	2b30      	cmp	r3, #48	; 0x30
 8004420:	d822      	bhi.n	8004468 <HAL_CAN_IRQHandler+0x334>
 8004422:	2b10      	cmp	r3, #16
 8004424:	d002      	beq.n	800442c <HAL_CAN_IRQHandler+0x2f8>
 8004426:	2b20      	cmp	r3, #32
 8004428:	d005      	beq.n	8004436 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800442a:	e01d      	b.n	8004468 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	f043 0308 	orr.w	r3, r3, #8
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004434:	e019      	b.n	800446a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	f043 0310 	orr.w	r3, r3, #16
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800443e:	e014      	b.n	800446a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	f043 0320 	orr.w	r3, r3, #32
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004448:	e00f      	b.n	800446a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004452:	e00a      	b.n	800446a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800445c:	e005      	b.n	800446a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004466:	e000      	b.n	800446a <HAL_CAN_IRQHandler+0x336>
            break;
 8004468:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699a      	ldr	r2, [r3, #24]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004478:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2204      	movs	r2, #4
 8004480:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f872 	bl	800457e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800449a:	bf00      	nop
 800449c:	3728      	adds	r7, #40	; 0x28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <__NVIC_SetPriorityGrouping+0x44>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045b0:	4013      	ands	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045c6:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <__NVIC_SetPriorityGrouping+0x44>)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	60d3      	str	r3, [r2, #12]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000ed00 	.word	0xe000ed00

080045dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <__NVIC_GetPriorityGrouping+0x18>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	f003 0307 	and.w	r3, r3, #7
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	e000ed00 	.word	0xe000ed00

080045f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004606:	2b00      	cmp	r3, #0
 8004608:	db0b      	blt.n	8004622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	f003 021f 	and.w	r2, r3, #31
 8004610:	4907      	ldr	r1, [pc, #28]	; (8004630 <__NVIC_EnableIRQ+0x38>)
 8004612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	2001      	movs	r0, #1
 800461a:	fa00 f202 	lsl.w	r2, r0, r2
 800461e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	e000e100 	.word	0xe000e100

08004634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	6039      	str	r1, [r7, #0]
 800463e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004644:	2b00      	cmp	r3, #0
 8004646:	db0a      	blt.n	800465e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	b2da      	uxtb	r2, r3
 800464c:	490c      	ldr	r1, [pc, #48]	; (8004680 <__NVIC_SetPriority+0x4c>)
 800464e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004652:	0112      	lsls	r2, r2, #4
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	440b      	add	r3, r1
 8004658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800465c:	e00a      	b.n	8004674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	4908      	ldr	r1, [pc, #32]	; (8004684 <__NVIC_SetPriority+0x50>)
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	3b04      	subs	r3, #4
 800466c:	0112      	lsls	r2, r2, #4
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	440b      	add	r3, r1
 8004672:	761a      	strb	r2, [r3, #24]
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	e000e100 	.word	0xe000e100
 8004684:	e000ed00 	.word	0xe000ed00

08004688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004688:	b480      	push	{r7}
 800468a:	b089      	sub	sp, #36	; 0x24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f1c3 0307 	rsb	r3, r3, #7
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	bf28      	it	cs
 80046a6:	2304      	movcs	r3, #4
 80046a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3304      	adds	r3, #4
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d902      	bls.n	80046b8 <NVIC_EncodePriority+0x30>
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	3b03      	subs	r3, #3
 80046b6:	e000      	b.n	80046ba <NVIC_EncodePriority+0x32>
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046bc:	f04f 32ff 	mov.w	r2, #4294967295
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43da      	mvns	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	401a      	ands	r2, r3
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046d0:	f04f 31ff 	mov.w	r1, #4294967295
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	fa01 f303 	lsl.w	r3, r1, r3
 80046da:	43d9      	mvns	r1, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e0:	4313      	orrs	r3, r2
         );
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3724      	adds	r7, #36	; 0x24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff ff4c 	bl	8004594 <__NVIC_SetPriorityGrouping>
}
 80046fc:	bf00      	nop
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004716:	f7ff ff61 	bl	80045dc <__NVIC_GetPriorityGrouping>
 800471a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	6978      	ldr	r0, [r7, #20]
 8004722:	f7ff ffb1 	bl	8004688 <NVIC_EncodePriority>
 8004726:	4602      	mov	r2, r0
 8004728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff ff80 	bl	8004634 <__NVIC_SetPriority>
}
 8004734:	bf00      	nop
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff ff54 	bl	80045f8 <__NVIC_EnableIRQ>
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e054      	b.n	8004814 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	7f5b      	ldrb	r3, [r3, #29]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fd fa7a 	bl	8001c74 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	791b      	ldrb	r3, [r3, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10c      	bne.n	80047a8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a22      	ldr	r2, [pc, #136]	; (800481c <HAL_CRC_Init+0xc4>)
 8004794:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0218 	bic.w	r2, r2, #24
 80047a4:	609a      	str	r2, [r3, #8]
 80047a6:	e00c      	b.n	80047c2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6899      	ldr	r1, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	461a      	mov	r2, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f834 	bl	8004820 <HAL_CRCEx_Polynomial_Set>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e028      	b.n	8004814 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	795b      	ldrb	r3, [r3, #5]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d105      	bne.n	80047d6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f04f 32ff 	mov.w	r2, #4294967295
 80047d2:	611a      	str	r2, [r3, #16]
 80047d4:	e004      	b.n	80047e0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6912      	ldr	r2, [r2, #16]
 80047de:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699a      	ldr	r2, [r3, #24]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	04c11db7 	.word	0x04c11db7

08004820 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004830:	231f      	movs	r3, #31
 8004832:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004834:	bf00      	nop
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1e5a      	subs	r2, r3, #1
 800483a:	613a      	str	r2, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d009      	beq.n	8004854 <HAL_CRCEx_Polynomial_Set+0x34>
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b18      	cmp	r3, #24
 8004858:	d846      	bhi.n	80048e8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <HAL_CRCEx_Polynomial_Set+0x40>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	080048ef 	.word	0x080048ef
 8004864:	080048e9 	.word	0x080048e9
 8004868:	080048e9 	.word	0x080048e9
 800486c:	080048e9 	.word	0x080048e9
 8004870:	080048e9 	.word	0x080048e9
 8004874:	080048e9 	.word	0x080048e9
 8004878:	080048e9 	.word	0x080048e9
 800487c:	080048e9 	.word	0x080048e9
 8004880:	080048dd 	.word	0x080048dd
 8004884:	080048e9 	.word	0x080048e9
 8004888:	080048e9 	.word	0x080048e9
 800488c:	080048e9 	.word	0x080048e9
 8004890:	080048e9 	.word	0x080048e9
 8004894:	080048e9 	.word	0x080048e9
 8004898:	080048e9 	.word	0x080048e9
 800489c:	080048e9 	.word	0x080048e9
 80048a0:	080048d1 	.word	0x080048d1
 80048a4:	080048e9 	.word	0x080048e9
 80048a8:	080048e9 	.word	0x080048e9
 80048ac:	080048e9 	.word	0x080048e9
 80048b0:	080048e9 	.word	0x080048e9
 80048b4:	080048e9 	.word	0x080048e9
 80048b8:	080048e9 	.word	0x080048e9
 80048bc:	080048e9 	.word	0x080048e9
 80048c0:	080048c5 	.word	0x080048c5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b06      	cmp	r3, #6
 80048c8:	d913      	bls.n	80048f2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048ce:	e010      	b.n	80048f2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b07      	cmp	r3, #7
 80048d4:	d90f      	bls.n	80048f6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048da:	e00c      	b.n	80048f6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	d90b      	bls.n	80048fa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048e6:	e008      	b.n	80048fa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	75fb      	strb	r3, [r7, #23]
      break;
 80048ec:	e006      	b.n	80048fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048ee:	bf00      	nop
 80048f0:	e004      	b.n	80048fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048f2:	bf00      	nop
 80048f4:	e002      	b.n	80048fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048f6:	bf00      	nop
 80048f8:	e000      	b.n	80048fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048fa:	bf00      	nop
  }
  if (status == HAL_OK)
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10d      	bne.n	800491e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f023 0118 	bic.w	r1, r3, #24
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	430a      	orrs	r2, r1
 800491c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800491e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004920:	4618      	mov	r0, r3
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e037      	b.n	80049b2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004958:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800495c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004966:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004972:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800497e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f941 	bl	8004c1c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}  
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b086      	sub	sp, #24
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	607a      	str	r2, [r7, #4]
 80049c6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_DMA_Start_IT+0x20>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e04a      	b.n	8004a70 <HAL_DMA_Start_IT+0xb6>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d13a      	bne.n	8004a62 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f8d4 	bl	8004bbe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 020e 	orr.w	r2, r2, #14
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	e00f      	b.n	8004a50 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 020a 	orr.w	r2, r2, #10
 8004a3e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0204 	bic.w	r2, r2, #4
 8004a4e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e005      	b.n	8004a6e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	2204      	movs	r2, #4
 8004a96:	409a      	lsls	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d024      	beq.n	8004aea <HAL_DMA_IRQHandler+0x72>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d01f      	beq.n	8004aea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d107      	bne.n	8004ac8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0204 	bic.w	r2, r2, #4
 8004ac6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	2104      	movs	r1, #4
 8004ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d06a      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004ae8:	e065      	b.n	8004bb6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	2202      	movs	r2, #2
 8004af0:	409a      	lsls	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d02c      	beq.n	8004b54 <HAL_DMA_IRQHandler+0xdc>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d027      	beq.n	8004b54 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10b      	bne.n	8004b2a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 020a 	bic.w	r2, r2, #10
 8004b20:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b32:	2102      	movs	r1, #2
 8004b34:	fa01 f202 	lsl.w	r2, r1, r2
 8004b38:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d035      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004b52:	e030      	b.n	8004bb6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	2208      	movs	r2, #8
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d028      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0x13e>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d023      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 020e 	bic.w	r2, r2, #14
 8004b7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	2101      	movs	r1, #1
 8004b88:	fa01 f202 	lsl.w	r2, r1, r2
 8004b8c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d004      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	4798      	blx	r3
    }
  }
}  
 8004bb4:	e7ff      	b.n	8004bb6 <HAL_DMA_IRQHandler+0x13e>
 8004bb6:	bf00      	nop
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
 8004bca:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bda:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b10      	cmp	r3, #16
 8004bea:	d108      	bne.n	8004bfe <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bfc:	e007      	b.n	8004c0e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	60da      	str	r2, [r3, #12]
}
 8004c0e:	bf00      	nop
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <DMA_CalcBaseAndBitshift+0x60>)
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d80f      	bhi.n	8004c50 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <DMA_CalcBaseAndBitshift+0x64>)
 8004c38:	4413      	add	r3, r2
 8004c3a:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <DMA_CalcBaseAndBitshift+0x68>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	009a      	lsls	r2, r3, #2
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a0f      	ldr	r2, [pc, #60]	; (8004c88 <DMA_CalcBaseAndBitshift+0x6c>)
 8004c4c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004c4e:	e00e      	b.n	8004c6e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <DMA_CalcBaseAndBitshift+0x70>)
 8004c58:	4413      	add	r3, r2
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <DMA_CalcBaseAndBitshift+0x68>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	009a      	lsls	r2, r3, #2
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <DMA_CalcBaseAndBitshift+0x74>)
 8004c6c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40020407 	.word	0x40020407
 8004c80:	bffdfff8 	.word	0xbffdfff8
 8004c84:	cccccccd 	.word	0xcccccccd
 8004c88:	40020000 	.word	0x40020000
 8004c8c:	bffdfbf8 	.word	0xbffdfbf8
 8004c90:	40020400 	.word	0x40020400

08004c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ca2:	e154      	b.n	8004f4e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	2101      	movs	r1, #1
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 8146 	beq.w	8004f48 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d005      	beq.n	8004cd4 <HAL_GPIO_Init+0x40>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d130      	bne.n	8004d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	2203      	movs	r2, #3
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4013      	ands	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	091b      	lsrs	r3, r3, #4
 8004d20:	f003 0201 	and.w	r2, r3, #1
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d017      	beq.n	8004d72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43db      	mvns	r3, r3
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4013      	ands	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d123      	bne.n	8004dc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	08da      	lsrs	r2, r3, #3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3208      	adds	r2, #8
 8004d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	220f      	movs	r2, #15
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43db      	mvns	r3, r3
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	08da      	lsrs	r2, r3, #3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3208      	adds	r2, #8
 8004dc0:	6939      	ldr	r1, [r7, #16]
 8004dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 0203 	and.w	r2, r3, #3
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80a0 	beq.w	8004f48 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e08:	4b58      	ldr	r3, [pc, #352]	; (8004f6c <HAL_GPIO_Init+0x2d8>)
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	4a57      	ldr	r2, [pc, #348]	; (8004f6c <HAL_GPIO_Init+0x2d8>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	6193      	str	r3, [r2, #24]
 8004e14:	4b55      	ldr	r3, [pc, #340]	; (8004f6c <HAL_GPIO_Init+0x2d8>)
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e20:	4a53      	ldr	r2, [pc, #332]	; (8004f70 <HAL_GPIO_Init+0x2dc>)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	089b      	lsrs	r3, r3, #2
 8004e26:	3302      	adds	r3, #2
 8004e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	220f      	movs	r2, #15
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4013      	ands	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e4a:	d019      	beq.n	8004e80 <HAL_GPIO_Init+0x1ec>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a49      	ldr	r2, [pc, #292]	; (8004f74 <HAL_GPIO_Init+0x2e0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <HAL_GPIO_Init+0x1e8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a48      	ldr	r2, [pc, #288]	; (8004f78 <HAL_GPIO_Init+0x2e4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00d      	beq.n	8004e78 <HAL_GPIO_Init+0x1e4>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a47      	ldr	r2, [pc, #284]	; (8004f7c <HAL_GPIO_Init+0x2e8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d007      	beq.n	8004e74 <HAL_GPIO_Init+0x1e0>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a46      	ldr	r2, [pc, #280]	; (8004f80 <HAL_GPIO_Init+0x2ec>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d101      	bne.n	8004e70 <HAL_GPIO_Init+0x1dc>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	e008      	b.n	8004e82 <HAL_GPIO_Init+0x1ee>
 8004e70:	2305      	movs	r3, #5
 8004e72:	e006      	b.n	8004e82 <HAL_GPIO_Init+0x1ee>
 8004e74:	2303      	movs	r3, #3
 8004e76:	e004      	b.n	8004e82 <HAL_GPIO_Init+0x1ee>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e002      	b.n	8004e82 <HAL_GPIO_Init+0x1ee>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <HAL_GPIO_Init+0x1ee>
 8004e80:	2300      	movs	r3, #0
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	f002 0203 	and.w	r2, r2, #3
 8004e88:	0092      	lsls	r2, r2, #2
 8004e8a:	4093      	lsls	r3, r2
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e92:	4937      	ldr	r1, [pc, #220]	; (8004f70 <HAL_GPIO_Init+0x2dc>)
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	089b      	lsrs	r3, r3, #2
 8004e98:	3302      	adds	r3, #2
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ea0:	4b38      	ldr	r3, [pc, #224]	; (8004f84 <HAL_GPIO_Init+0x2f0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4013      	ands	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004ec4:	4a2f      	ldr	r2, [pc, #188]	; (8004f84 <HAL_GPIO_Init+0x2f0>)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004eca:	4b2e      	ldr	r3, [pc, #184]	; (8004f84 <HAL_GPIO_Init+0x2f0>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004eee:	4a25      	ldr	r2, [pc, #148]	; (8004f84 <HAL_GPIO_Init+0x2f0>)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ef4:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <HAL_GPIO_Init+0x2f0>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4013      	ands	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f18:	4a1a      	ldr	r2, [pc, #104]	; (8004f84 <HAL_GPIO_Init+0x2f0>)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f1e:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <HAL_GPIO_Init+0x2f0>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	43db      	mvns	r3, r3
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f42:	4a10      	ldr	r2, [pc, #64]	; (8004f84 <HAL_GPIO_Init+0x2f0>)
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f47f aea3 	bne.w	8004ca4 <HAL_GPIO_Init+0x10>
  }
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40010000 	.word	0x40010000
 8004f74:	48000400 	.word	0x48000400
 8004f78:	48000800 	.word	0x48000800
 8004f7c:	48000c00 	.word	0x48000c00
 8004f80:	48001000 	.word	0x48001000
 8004f84:	40010400 	.word	0x40010400

08004f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	807b      	strh	r3, [r7, #2]
 8004f94:	4613      	mov	r3, r2
 8004f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f98:	787b      	ldrb	r3, [r7, #1]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f9e:	887a      	ldrh	r2, [r7, #2]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fa4:	e002      	b.n	8004fac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fa6:	887a      	ldrh	r2, [r7, #2]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	041a      	lsls	r2, r3, #16
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	43d9      	mvns	r1, r3
 8004fd6:	887b      	ldrh	r3, [r7, #2]
 8004fd8:	400b      	ands	r3, r1
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	619a      	str	r2, [r3, #24]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e081      	b.n	8005102 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fd f87e 	bl	8002114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2224      	movs	r2, #36	; 0x24
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0201 	bic.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800503c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800504c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d107      	bne.n	8005066 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	e006      	b.n	8005074 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005072:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d104      	bne.n	8005086 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005084:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005098:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69d9      	ldr	r1, [r3, #28]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a1a      	ldr	r2, [r3, #32]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	461a      	mov	r2, r3
 8005118:	460b      	mov	r3, r1
 800511a:	817b      	strh	r3, [r7, #10]
 800511c:	4613      	mov	r3, r2
 800511e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b20      	cmp	r3, #32
 800512a:	f040 80da 	bne.w	80052e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_I2C_Master_Transmit+0x30>
 8005138:	2302      	movs	r3, #2
 800513a:	e0d3      	b.n	80052e4 <HAL_I2C_Master_Transmit+0x1d8>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005144:	f7fd fba6 	bl	8002894 <HAL_GetTick>
 8005148:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	2319      	movs	r3, #25
 8005150:	2201      	movs	r2, #1
 8005152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f9e6 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e0be      	b.n	80052e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2221      	movs	r2, #33	; 0x21
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2210      	movs	r2, #16
 8005172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	893a      	ldrh	r2, [r7, #8]
 8005186:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005192:	b29b      	uxth	r3, r3
 8005194:	2bff      	cmp	r3, #255	; 0xff
 8005196:	d90e      	bls.n	80051b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	22ff      	movs	r2, #255	; 0xff
 800519c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	8979      	ldrh	r1, [r7, #10]
 80051a6:	4b51      	ldr	r3, [pc, #324]	; (80052ec <HAL_I2C_Master_Transmit+0x1e0>)
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 fb58 	bl	8005864 <I2C_TransferConfig>
 80051b4:	e06c      	b.n	8005290 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	8979      	ldrh	r1, [r7, #10]
 80051c8:	4b48      	ldr	r3, [pc, #288]	; (80052ec <HAL_I2C_Master_Transmit+0x1e0>)
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fb47 	bl	8005864 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80051d6:	e05b      	b.n	8005290 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	6a39      	ldr	r1, [r7, #32]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f9e3 	bl	80055a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e07b      	b.n	80052e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	781a      	ldrb	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d034      	beq.n	8005290 <HAL_I2C_Master_Transmit+0x184>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522a:	2b00      	cmp	r3, #0
 800522c:	d130      	bne.n	8005290 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	2200      	movs	r2, #0
 8005236:	2180      	movs	r1, #128	; 0x80
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f975 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e04d      	b.n	80052e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	2bff      	cmp	r3, #255	; 0xff
 8005250:	d90e      	bls.n	8005270 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	22ff      	movs	r2, #255	; 0xff
 8005256:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525c:	b2da      	uxtb	r2, r3
 800525e:	8979      	ldrh	r1, [r7, #10]
 8005260:	2300      	movs	r3, #0
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fafb 	bl	8005864 <I2C_TransferConfig>
 800526e:	e00f      	b.n	8005290 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527e:	b2da      	uxtb	r2, r3
 8005280:	8979      	ldrh	r1, [r7, #10]
 8005282:	2300      	movs	r3, #0
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 faea 	bl	8005864 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d19e      	bne.n	80051d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	6a39      	ldr	r1, [r7, #32]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 f9c2 	bl	8005628 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e01a      	b.n	80052e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2220      	movs	r2, #32
 80052b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6859      	ldr	r1, [r3, #4]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80052c2:	400b      	ands	r3, r1
 80052c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	e000      	b.n	80052e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80052e2:	2302      	movs	r3, #2
  }
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	80002000 	.word	0x80002000
 80052f0:	fe00e800 	.word	0xfe00e800

080052f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	461a      	mov	r2, r3
 8005300:	460b      	mov	r3, r1
 8005302:	817b      	strh	r3, [r7, #10]
 8005304:	4613      	mov	r3, r2
 8005306:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b20      	cmp	r3, #32
 8005312:	f040 80db 	bne.w	80054cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_I2C_Master_Receive+0x30>
 8005320:	2302      	movs	r3, #2
 8005322:	e0d4      	b.n	80054ce <HAL_I2C_Master_Receive+0x1da>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800532c:	f7fd fab2 	bl	8002894 <HAL_GetTick>
 8005330:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	2319      	movs	r3, #25
 8005338:	2201      	movs	r2, #1
 800533a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f8f2 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e0bf      	b.n	80054ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2222      	movs	r2, #34	; 0x22
 8005352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2210      	movs	r2, #16
 800535a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	893a      	ldrh	r2, [r7, #8]
 800536e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537a:	b29b      	uxth	r3, r3
 800537c:	2bff      	cmp	r3, #255	; 0xff
 800537e:	d90e      	bls.n	800539e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	22ff      	movs	r2, #255	; 0xff
 8005384:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538a:	b2da      	uxtb	r2, r3
 800538c:	8979      	ldrh	r1, [r7, #10]
 800538e:	4b52      	ldr	r3, [pc, #328]	; (80054d8 <HAL_I2C_Master_Receive+0x1e4>)
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fa64 	bl	8005864 <I2C_TransferConfig>
 800539c:	e06d      	b.n	800547a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	8979      	ldrh	r1, [r7, #10]
 80053b0:	4b49      	ldr	r3, [pc, #292]	; (80054d8 <HAL_I2C_Master_Receive+0x1e4>)
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 fa53 	bl	8005864 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80053be:	e05c      	b.n	800547a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	6a39      	ldr	r1, [r7, #32]
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f96b 	bl	80056a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e07c      	b.n	80054ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d034      	beq.n	800547a <HAL_I2C_Master_Receive+0x186>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005414:	2b00      	cmp	r3, #0
 8005416:	d130      	bne.n	800547a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	2200      	movs	r2, #0
 8005420:	2180      	movs	r1, #128	; 0x80
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 f880 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e04d      	b.n	80054ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	2bff      	cmp	r3, #255	; 0xff
 800543a:	d90e      	bls.n	800545a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	22ff      	movs	r2, #255	; 0xff
 8005440:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005446:	b2da      	uxtb	r2, r3
 8005448:	8979      	ldrh	r1, [r7, #10]
 800544a:	2300      	movs	r3, #0
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 fa06 	bl	8005864 <I2C_TransferConfig>
 8005458:	e00f      	b.n	800547a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005468:	b2da      	uxtb	r2, r3
 800546a:	8979      	ldrh	r1, [r7, #10]
 800546c:	2300      	movs	r3, #0
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f9f5 	bl	8005864 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d19d      	bne.n	80053c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	6a39      	ldr	r1, [r7, #32]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f8cd 	bl	8005628 <I2C_WaitOnSTOPFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e01a      	b.n	80054ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2220      	movs	r2, #32
 800549e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6859      	ldr	r1, [r3, #4]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b0c      	ldr	r3, [pc, #48]	; (80054dc <HAL_I2C_Master_Receive+0x1e8>)
 80054ac:	400b      	ands	r3, r1
 80054ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e000      	b.n	80054ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80054cc:	2302      	movs	r3, #2
  }
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	80002400 	.word	0x80002400
 80054dc:	fe00e800 	.word	0xfe00e800

080054e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d103      	bne.n	80054fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2200      	movs	r2, #0
 80054fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	d007      	beq.n	800551c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	619a      	str	r2, [r3, #24]
  }
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	4613      	mov	r3, r2
 8005536:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005538:	e022      	b.n	8005580 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005540:	d01e      	beq.n	8005580 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005542:	f7fd f9a7 	bl	8002894 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d302      	bcc.n	8005558 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d113      	bne.n	8005580 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555c:	f043 0220 	orr.w	r2, r3, #32
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e00f      	b.n	80055a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4013      	ands	r3, r2
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	429a      	cmp	r2, r3
 800558e:	bf0c      	ite	eq
 8005590:	2301      	moveq	r3, #1
 8005592:	2300      	movne	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	461a      	mov	r2, r3
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	429a      	cmp	r2, r3
 800559c:	d0cd      	beq.n	800553a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055b4:	e02c      	b.n	8005610 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f8dc 	bl	8005778 <I2C_IsAcknowledgeFailed>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e02a      	b.n	8005620 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d01e      	beq.n	8005610 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d2:	f7fd f95f 	bl	8002894 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d113      	bne.n	8005610 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ec:	f043 0220 	orr.w	r2, r3, #32
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e007      	b.n	8005620 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b02      	cmp	r3, #2
 800561c:	d1cb      	bne.n	80055b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005634:	e028      	b.n	8005688 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f89c 	bl	8005778 <I2C_IsAcknowledgeFailed>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e026      	b.n	8005698 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564a:	f7fd f923 	bl	8002894 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	429a      	cmp	r2, r3
 8005658:	d302      	bcc.n	8005660 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d113      	bne.n	8005688 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005664:	f043 0220 	orr.w	r2, r3, #32
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e007      	b.n	8005698 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b20      	cmp	r3, #32
 8005694:	d1cf      	bne.n	8005636 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056ac:	e055      	b.n	800575a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f860 	bl	8005778 <I2C_IsAcknowledgeFailed>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e053      	b.n	800576a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d129      	bne.n	8005724 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d105      	bne.n	80056ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e03f      	b.n	800576a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2220      	movs	r2, #32
 80056f0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6859      	ldr	r1, [r3, #4]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	4b1d      	ldr	r3, [pc, #116]	; (8005774 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80056fe:	400b      	ands	r3, r1
 8005700:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e022      	b.n	800576a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005724:	f7fd f8b6 	bl	8002894 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	429a      	cmp	r2, r3
 8005732:	d302      	bcc.n	800573a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10f      	bne.n	800575a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573e:	f043 0220 	orr.w	r2, r3, #32
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e007      	b.n	800576a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b04      	cmp	r3, #4
 8005766:	d1a2      	bne.n	80056ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	fe00e800 	.word	0xfe00e800

08005778 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	2b10      	cmp	r3, #16
 8005790:	d161      	bne.n	8005856 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057a0:	d02b      	beq.n	80057fa <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057b0:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057b2:	e022      	b.n	80057fa <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ba:	d01e      	beq.n	80057fa <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057bc:	f7fd f86a 	bl	8002894 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d302      	bcc.n	80057d2 <I2C_IsAcknowledgeFailed+0x5a>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d113      	bne.n	80057fa <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	f043 0220 	orr.w	r2, r3, #32
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e02e      	b.n	8005858 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b20      	cmp	r3, #32
 8005806:	d1d5      	bne.n	80057b4 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2210      	movs	r2, #16
 800580e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2220      	movs	r2, #32
 8005816:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f7ff fe61 	bl	80054e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6859      	ldr	r1, [r3, #4]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <I2C_IsAcknowledgeFailed+0xe8>)
 800582a:	400b      	ands	r3, r1
 800582c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	f043 0204 	orr.w	r2, r3, #4
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	fe00e800 	.word	0xfe00e800

08005864 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	607b      	str	r3, [r7, #4]
 800586e:	460b      	mov	r3, r1
 8005870:	817b      	strh	r3, [r7, #10]
 8005872:	4613      	mov	r3, r2
 8005874:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	0d5b      	lsrs	r3, r3, #21
 8005880:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005884:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <I2C_TransferConfig+0x58>)
 8005886:	430b      	orrs	r3, r1
 8005888:	43db      	mvns	r3, r3
 800588a:	ea02 0103 	and.w	r1, r2, r3
 800588e:	897b      	ldrh	r3, [r7, #10]
 8005890:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005894:	7a7b      	ldrb	r3, [r7, #9]
 8005896:	041b      	lsls	r3, r3, #16
 8005898:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	431a      	orrs	r2, r3
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80058ae:	bf00      	nop
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	03ff63ff 	.word	0x03ff63ff

080058c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	d138      	bne.n	8005948 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e032      	b.n	800594a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2224      	movs	r2, #36	; 0x24
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0201 	bic.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005912:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6819      	ldr	r1, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	e000      	b.n	800594a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005948:	2302      	movs	r3, #2
  }
}
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005956:	b480      	push	{r7}
 8005958:	b085      	sub	sp, #20
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b20      	cmp	r3, #32
 800596a:	d139      	bne.n	80059e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005976:	2302      	movs	r3, #2
 8005978:	e033      	b.n	80059e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2224      	movs	r2, #36	; 0x24
 8005986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0201 	bic.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	021b      	lsls	r3, r3, #8
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059dc:	2300      	movs	r3, #0
 80059de:	e000      	b.n	80059e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80059e0:	2302      	movs	r3, #2
  }
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059f0:	b08b      	sub	sp, #44	; 0x2c
 80059f2:	af06      	add	r7, sp, #24
 80059f4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0d0      	b.n	8005ba2 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d106      	bne.n	8005a1a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f00f fdfb 	bl	8015610 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f003 fde9 	bl	80095fe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	e04c      	b.n	8005acc <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	440b      	add	r3, r1
 8005a42:	3301      	adds	r3, #1
 8005a44:	2201      	movs	r2, #1
 8005a46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	440b      	add	r3, r1
 8005a58:	7bfa      	ldrb	r2, [r7, #15]
 8005a5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a5c:	7bfa      	ldrb	r2, [r7, #15]
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	b298      	uxth	r0, r3
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	440b      	add	r3, r1
 8005a6e:	3336      	adds	r3, #54	; 0x36
 8005a70:	4602      	mov	r2, r0
 8005a72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	440b      	add	r3, r1
 8005a84:	3303      	adds	r3, #3
 8005a86:	2200      	movs	r2, #0
 8005a88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a8a:	7bfa      	ldrb	r2, [r7, #15]
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	440b      	add	r3, r1
 8005a98:	3338      	adds	r3, #56	; 0x38
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a9e:	7bfa      	ldrb	r2, [r7, #15]
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	440b      	add	r3, r1
 8005aac:	333c      	adds	r3, #60	; 0x3c
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ab2:	7bfa      	ldrb	r2, [r7, #15]
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	440b      	add	r3, r1
 8005ac0:	3340      	adds	r3, #64	; 0x40
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	73fb      	strb	r3, [r7, #15]
 8005acc:	7bfa      	ldrb	r2, [r7, #15]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d3ad      	bcc.n	8005a32 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	73fb      	strb	r3, [r7, #15]
 8005ada:	e044      	b.n	8005b66 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005adc:	7bfa      	ldrb	r2, [r7, #15]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	440b      	add	r3, r1
 8005aea:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005af2:	7bfa      	ldrb	r2, [r7, #15]
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	440b      	add	r3, r1
 8005b00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b04:	7bfa      	ldrb	r2, [r7, #15]
 8005b06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b08:	7bfa      	ldrb	r2, [r7, #15]
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	440b      	add	r3, r1
 8005b16:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b1e:	7bfa      	ldrb	r2, [r7, #15]
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	440b      	add	r3, r1
 8005b2c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b34:	7bfa      	ldrb	r2, [r7, #15]
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	440b      	add	r3, r1
 8005b42:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b4a:	7bfa      	ldrb	r2, [r7, #15]
 8005b4c:	6879      	ldr	r1, [r7, #4]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	440b      	add	r3, r1
 8005b58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	3301      	adds	r3, #1
 8005b64:	73fb      	strb	r3, [r7, #15]
 8005b66:	7bfa      	ldrb	r2, [r7, #15]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d3b5      	bcc.n	8005adc <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	603b      	str	r3, [r7, #0]
 8005b76:	687e      	ldr	r6, [r7, #4]
 8005b78:	466d      	mov	r5, sp
 8005b7a:	f106 0410 	add.w	r4, r6, #16
 8005b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	602b      	str	r3, [r5, #0]
 8005b86:	1d33      	adds	r3, r6, #4
 8005b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b8a:	6838      	ldr	r0, [r7, #0]
 8005b8c:	f003 fd52 	bl	8009634 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005baa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_PCD_Start+0x16>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e016      	b.n	8005bee <HAL_PCD_Start+0x44>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f003 fcff 	bl	80095d0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f00f ffc1 	bl	8015b5c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f005 ff14 	bl	800ba0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f005 ff0d 	bl	800ba22 <USB_ReadInterrupts>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c12:	d102      	bne.n	8005c1a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 faf6 	bl	8006206 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f005 feff 	bl	800ba22 <USB_ReadInterrupts>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2e:	d112      	bne.n	8005c56 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c42:	b292      	uxth	r2, r2
 8005c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f00f fd8a 	bl	8015762 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005c4e:	2100      	movs	r1, #0
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f8c7 	bl	8005de4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f005 fee1 	bl	800ba22 <USB_ReadInterrupts>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c6a:	d10b      	bne.n	8005c84 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c7e:	b292      	uxth	r2, r2
 8005c80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f005 feca 	bl	800ba22 <USB_ReadInterrupts>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c98:	d10b      	bne.n	8005cb2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cac:	b292      	uxth	r2, r2
 8005cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f005 feb3 	bl	800ba22 <USB_ReadInterrupts>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc6:	d126      	bne.n	8005d16 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0204 	bic.w	r2, r2, #4
 8005cda:	b292      	uxth	r2, r2
 8005cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0208 	bic.w	r2, r2, #8
 8005cf2:	b292      	uxth	r2, r2
 8005cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f00f fd6b 	bl	80157d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d10:	b292      	uxth	r2, r2
 8005d12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f005 fe81 	bl	800ba22 <USB_ReadInterrupts>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d2a:	d126      	bne.n	8005d7a <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0208 	orr.w	r2, r2, #8
 8005d3e:	b292      	uxth	r2, r2
 8005d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d56:	b292      	uxth	r2, r2
 8005d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0204 	orr.w	r2, r2, #4
 8005d6e:	b292      	uxth	r2, r2
 8005d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f00f fd13 	bl	80157a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f005 fe4f 	bl	800ba22 <USB_ReadInterrupts>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d8e:	d10e      	bne.n	8005dae <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005da2:	b292      	uxth	r2, r2
 8005da4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f00f fccc 	bl	8015746 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f005 fe35 	bl	800ba22 <USB_ReadInterrupts>
 8005db8:	4603      	mov	r3, r0
 8005dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc2:	d10b      	bne.n	8005ddc <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dd6:	b292      	uxth	r2, r2
 8005dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005ddc:	bf00      	nop
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_PCD_SetAddress+0x1a>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e013      	b.n	8005e26 <HAL_PCD_SetAddress+0x42>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	78fa      	ldrb	r2, [r7, #3]
 8005e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	78fa      	ldrb	r2, [r7, #3]
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f005 fde4 	bl	800b9e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	4608      	mov	r0, r1
 8005e38:	4611      	mov	r1, r2
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	70fb      	strb	r3, [r7, #3]
 8005e40:	460b      	mov	r3, r1
 8005e42:	803b      	strh	r3, [r7, #0]
 8005e44:	4613      	mov	r3, r2
 8005e46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	da0e      	bge.n	8005e72 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	4413      	add	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	705a      	strb	r2, [r3, #1]
 8005e70:	e00e      	b.n	8005e90 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	f003 0207 	and.w	r2, r3, #7
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e9c:	883a      	ldrh	r2, [r7, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	78ba      	ldrb	r2, [r7, #2]
 8005ea6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005eba:	78bb      	ldrb	r3, [r7, #2]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d102      	bne.n	8005ec6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_PCD_EP_Open+0xa6>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e00e      	b.n	8005ef2 <HAL_PCD_EP_Open+0xc4>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68f9      	ldr	r1, [r7, #12]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f003 fbc8 	bl	8009678 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005ef0:	7afb      	ldrb	r3, [r7, #11]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	460b      	mov	r3, r1
 8005f04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da0e      	bge.n	8005f2c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4413      	add	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	705a      	strb	r2, [r3, #1]
 8005f2a:	e00e      	b.n	8005f4a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	f003 0207 	and.w	r2, r3, #7
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	4413      	add	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_PCD_EP_Close+0x6a>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e00e      	b.n	8005f82 <HAL_PCD_EP_Close+0x88>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68f9      	ldr	r1, [r7, #12]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f003 ff14 	bl	8009da0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b086      	sub	sp, #24
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
 8005f96:	460b      	mov	r3, r1
 8005f98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f9a:	7afb      	ldrb	r3, [r7, #11]
 8005f9c:	f003 0207 	and.w	r2, r3, #7
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fca:	7afb      	ldrb	r3, [r7, #11]
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005fd6:	7afb      	ldrb	r3, [r7, #11]
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d106      	bne.n	8005fee <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6979      	ldr	r1, [r7, #20]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f004 f8c7 	bl	800a17a <USB_EPStartXfer>
 8005fec:	e005      	b.n	8005ffa <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6979      	ldr	r1, [r7, #20]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f004 f8c0 	bl	800a17a <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	f003 0207 	and.w	r2, r3, #7
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	440b      	add	r3, r1
 8006022:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006026:	681b      	ldr	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	460b      	mov	r3, r1
 8006042:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006044:	7afb      	ldrb	r3, [r7, #11]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2200      	movs	r2, #0
 8006078:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2201      	movs	r2, #1
 800607e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006080:	7afb      	ldrb	r3, [r7, #11]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	b2da      	uxtb	r2, r3
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800608c:	7afb      	ldrb	r3, [r7, #11]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6979      	ldr	r1, [r7, #20]
 800609c:	4618      	mov	r0, r3
 800609e:	f004 f86c 	bl	800a17a <USB_EPStartXfer>
 80060a2:	e005      	b.n	80060b0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6979      	ldr	r1, [r7, #20]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f004 f865 	bl	800a17a <USB_EPStartXfer>
  }

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	460b      	mov	r3, r1
 80060c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	f003 0207 	and.w	r2, r3, #7
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d901      	bls.n	80060d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e03e      	b.n	8006156 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	da0e      	bge.n	80060fe <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	4413      	add	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	705a      	strb	r2, [r3, #1]
 80060fc:	e00c      	b.n	8006118 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060fe:	78fa      	ldrb	r2, [r7, #3]
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	4413      	add	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	b2da      	uxtb	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_PCD_EP_SetStall+0x7e>
 8006134:	2302      	movs	r3, #2
 8006136:	e00e      	b.n	8006156 <HAL_PCD_EP_SetStall+0x9c>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68f9      	ldr	r1, [r7, #12]
 8006146:	4618      	mov	r0, r3
 8006148:	f005 fb4d 	bl	800b7e6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	f003 020f 	and.w	r2, r3, #15
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d901      	bls.n	800617c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e040      	b.n	80061fe <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800617c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006180:	2b00      	cmp	r3, #0
 8006182:	da0e      	bge.n	80061a2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	4413      	add	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	705a      	strb	r2, [r3, #1]
 80061a0:	e00e      	b.n	80061c0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	f003 0207 	and.w	r2, r3, #7
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	4413      	add	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_PCD_EP_ClrStall+0x82>
 80061dc:	2302      	movs	r3, #2
 80061de:	e00e      	b.n	80061fe <HAL_PCD_EP_ClrStall+0xa0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68f9      	ldr	r1, [r7, #12]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f005 fb4a 	bl	800b888 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b096      	sub	sp, #88	; 0x58
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800620e:	e3a9      	b.n	8006964 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006218:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800621c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006220:	b2db      	uxtb	r3, r3
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800622a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800622e:	2b00      	cmp	r3, #0
 8006230:	f040 8164 	bne.w	80064fc <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006234:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b00      	cmp	r3, #0
 800623e:	d152      	bne.n	80062e6 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800624c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006250:	81fb      	strh	r3, [r7, #14]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	89fb      	ldrh	r3, [r7, #14]
 8006258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800625c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006260:	b29b      	uxth	r3, r3
 8006262:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3328      	adds	r3, #40	; 0x28
 8006268:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006272:	b29b      	uxth	r3, r3
 8006274:	461a      	mov	r2, r3
 8006276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	4413      	add	r3, r2
 800627e:	3302      	adds	r3, #2
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006294:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006298:	695a      	ldr	r2, [r3, #20]
 800629a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	441a      	add	r2, r3
 80062a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80062a4:	2100      	movs	r1, #0
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f00f fa33 	bl	8015712 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 8355 	beq.w	8006964 <PCD_EP_ISR_Handler+0x75e>
 80062ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f040 8350 	bne.w	8006964 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	b292      	uxth	r2, r2
 80062d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80062e4:	e33e      	b.n	8006964 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80062ec:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80062f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80062fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006300:	2b00      	cmp	r3, #0
 8006302:	d034      	beq.n	800636e <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800630c:	b29b      	uxth	r3, r3
 800630e:	461a      	mov	r2, r3
 8006310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	4413      	add	r3, r2
 8006318:	3306      	adds	r3, #6
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800632c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800633a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800633e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006340:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006342:	b29b      	uxth	r3, r3
 8006344:	f005 fbc3 	bl	800bace <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29a      	uxth	r2, r3
 8006350:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006354:	4013      	ands	r3, r2
 8006356:	823b      	strh	r3, [r7, #16]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	8a3a      	ldrh	r2, [r7, #16]
 800635e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006362:	b292      	uxth	r2, r2
 8006364:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f00f f9a6 	bl	80156b8 <HAL_PCD_SetupStageCallback>
 800636c:	e2fa      	b.n	8006964 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800636e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006372:	2b00      	cmp	r3, #0
 8006374:	f280 82f6 	bge.w	8006964 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29a      	uxth	r2, r3
 8006380:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006384:	4013      	ands	r3, r2
 8006386:	83fb      	strh	r3, [r7, #30]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	8bfa      	ldrh	r2, [r7, #30]
 800638e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006392:	b292      	uxth	r2, r2
 8006394:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800639e:	b29b      	uxth	r3, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4413      	add	r3, r2
 80063aa:	3306      	adds	r3, #6
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80063be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80063c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d019      	beq.n	80063fe <PCD_EP_ISR_Handler+0x1f8>
 80063ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d015      	beq.n	80063fe <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d8:	6959      	ldr	r1, [r3, #20]
 80063da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063dc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80063de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f005 fb73 	bl	800bace <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80063e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ea:	695a      	ldr	r2, [r3, #20]
 80063ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	441a      	add	r2, r3
 80063f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80063f6:	2100      	movs	r1, #0
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f00f f96f 	bl	80156dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 82aa 	bne.w	8006964 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800641e:	b29b      	uxth	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	4413      	add	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d112      	bne.n	800645e <PCD_EP_ISR_Handler+0x258>
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	b29b      	uxth	r3, r3
 800643e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006442:	b29a      	uxth	r2, r3
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	801a      	strh	r2, [r3, #0]
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006456:	b29a      	uxth	r2, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	e02f      	b.n	80064be <PCD_EP_ISR_Handler+0x2b8>
 800645e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b3e      	cmp	r3, #62	; 0x3e
 8006464:	d813      	bhi.n	800648e <PCD_EP_ISR_Handler+0x288>
 8006466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	085b      	lsrs	r3, r3, #1
 800646c:	647b      	str	r3, [r7, #68]	; 0x44
 800646e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <PCD_EP_ISR_Handler+0x27a>
 800647a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800647c:	3301      	adds	r3, #1
 800647e:	647b      	str	r3, [r7, #68]	; 0x44
 8006480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006482:	b29b      	uxth	r3, r3
 8006484:	029b      	lsls	r3, r3, #10
 8006486:	b29a      	uxth	r2, r3
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	e017      	b.n	80064be <PCD_EP_ISR_Handler+0x2b8>
 800648e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	647b      	str	r3, [r7, #68]	; 0x44
 8006496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 031f 	and.w	r3, r3, #31
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <PCD_EP_ISR_Handler+0x2a2>
 80064a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a4:	3b01      	subs	r3, #1
 80064a6:	647b      	str	r3, [r7, #68]	; 0x44
 80064a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	029b      	lsls	r3, r3, #10
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ce:	827b      	strh	r3, [r7, #18]
 80064d0:	8a7b      	ldrh	r3, [r7, #18]
 80064d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064d6:	827b      	strh	r3, [r7, #18]
 80064d8:	8a7b      	ldrh	r3, [r7, #18]
 80064da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064de:	827b      	strh	r3, [r7, #18]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	8a7b      	ldrh	r3, [r7, #18]
 80064e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	8013      	strh	r3, [r2, #0]
 80064fa:	e233      	b.n	8006964 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006510:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006514:	2b00      	cmp	r3, #0
 8006516:	f280 80fc 	bge.w	8006712 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29a      	uxth	r2, r3
 800652c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006530:	4013      	ands	r3, r2
 8006532:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006548:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800654c:	b292      	uxth	r2, r2
 800654e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006550:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	4413      	add	r3, r2
 8006564:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006568:	7b1b      	ldrb	r3, [r3, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d125      	bne.n	80065ba <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006576:	b29b      	uxth	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	4413      	add	r3, r2
 8006582:	3306      	adds	r3, #6
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006596:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800659a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 8092 	beq.w	80066c8 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065aa:	6959      	ldr	r1, [r3, #20]
 80065ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ae:	88da      	ldrh	r2, [r3, #6]
 80065b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80065b4:	f005 fa8b 	bl	800bace <USB_ReadPMA>
 80065b8:	e086      	b.n	80066c8 <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80065ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065bc:	78db      	ldrb	r3, [r3, #3]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d10a      	bne.n	80065d8 <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80065c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80065c6:	461a      	mov	r2, r3
 80065c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f9d8 	bl	8006980 <HAL_PCD_EP_DB_Receive>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80065d6:	e077      	b.n	80066c8 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	461a      	mov	r2, r3
 80065de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	441a      	add	r2, r3
 8006604:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006614:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006618:	b29b      	uxth	r3, r3
 800661a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d024      	beq.n	8006680 <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663e:	b29b      	uxth	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	4413      	add	r3, r2
 800664a:	3302      	adds	r3, #2
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6812      	ldr	r2, [r2, #0]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800665e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006662:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006666:	2b00      	cmp	r3, #0
 8006668:	d02e      	beq.n	80066c8 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006670:	6959      	ldr	r1, [r3, #20]
 8006672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006674:	891a      	ldrh	r2, [r3, #8]
 8006676:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800667a:	f005 fa28 	bl	800bace <USB_ReadPMA>
 800667e:	e023      	b.n	80066c8 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006688:	b29b      	uxth	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	4413      	add	r3, r2
 8006694:	3306      	adds	r3, #6
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066a8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80066ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d009      	beq.n	80066c8 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ba:	6959      	ldr	r1, [r3, #20]
 80066bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066be:	895a      	ldrh	r2, [r3, #10]
 80066c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066c4:	f005 fa03 	bl	800bace <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80066c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066d0:	441a      	add	r2, r3
 80066d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80066d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066de:	441a      	add	r2, r3
 80066e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80066e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <PCD_EP_ISR_Handler+0x4f2>
 80066ec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80066f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d206      	bcs.n	8006706 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80066f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f00e ffec 	bl	80156dc <HAL_PCD_DataOutStageCallback>
 8006704:	e005      	b.n	8006712 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800670c:	4618      	mov	r0, r3
 800670e:	f003 fd34 	bl	800a17a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006712:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8122 	beq.w	8006964 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8006720:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	4613      	mov	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	4413      	add	r3, r2
 8006732:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	441a      	add	r2, r3
 8006760:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676c:	b29b      	uxth	r3, r3
 800676e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8006770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006772:	78db      	ldrb	r3, [r3, #3]
 8006774:	2b02      	cmp	r3, #2
 8006776:	f000 809d 	beq.w	80068b4 <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 800677a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677c:	2200      	movs	r2, #0
 800677e:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006780:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006788:	2b00      	cmp	r3, #0
 800678a:	d046      	beq.n	800681a <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800678c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678e:	785b      	ldrb	r3, [r3, #1]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d126      	bne.n	80067e2 <PCD_EP_ISR_Handler+0x5dc>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	4413      	add	r3, r2
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
 80067ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	011a      	lsls	r2, r3, #4
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067ba:	623b      	str	r3, [r7, #32]
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	801a      	strh	r2, [r3, #0]
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067da:	b29a      	uxth	r2, r3
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	801a      	strh	r2, [r3, #0]
 80067e0:	e061      	b.n	80068a6 <PCD_EP_ISR_Handler+0x6a0>
 80067e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d15d      	bne.n	80068a6 <PCD_EP_ISR_Handler+0x6a0>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	4413      	add	r3, r2
 8006800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	011a      	lsls	r2, r3, #4
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	4413      	add	r3, r2
 800680c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	2200      	movs	r2, #0
 8006816:	801a      	strh	r2, [r3, #0]
 8006818:	e045      	b.n	80068a6 <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d126      	bne.n	8006876 <PCD_EP_ISR_Handler+0x670>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	637b      	str	r3, [r7, #52]	; 0x34
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006836:	b29b      	uxth	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683c:	4413      	add	r3, r2
 800683e:	637b      	str	r3, [r7, #52]	; 0x34
 8006840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	011a      	lsls	r2, r3, #4
 8006846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006848:	4413      	add	r3, r2
 800684a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800684e:	633b      	str	r3, [r7, #48]	; 0x30
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800685a:	b29a      	uxth	r2, r3
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800686e:	b29a      	uxth	r2, r3
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	801a      	strh	r2, [r3, #0]
 8006874:	e017      	b.n	80068a6 <PCD_EP_ISR_Handler+0x6a0>
 8006876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d113      	bne.n	80068a6 <PCD_EP_ISR_Handler+0x6a0>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006886:	b29b      	uxth	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688c:	4413      	add	r3, r2
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	011a      	lsls	r2, r3, #4
 8006896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006898:	4413      	add	r3, r2
 800689a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800689e:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	2200      	movs	r2, #0
 80068a4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f00e ff30 	bl	8015712 <HAL_PCD_DataInStageCallback>
 80068b2:	e057      	b.n	8006964 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80068b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b6:	78db      	ldrb	r3, [r3, #3]
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d14c      	bne.n	8006956 <PCD_EP_ISR_Handler+0x750>
 80068bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80068c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d146      	bne.n	8006956 <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	4413      	add	r3, r2
 80068dc:	3302      	adds	r3, #2
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 80068f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f6:	699a      	ldr	r2, [r3, #24]
 80068f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d907      	bls.n	8006910 <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 8006900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006902:	699a      	ldr	r2, [r3, #24]
 8006904:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006908:	1ad2      	subs	r2, r2, r3
 800690a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690c:	619a      	str	r2, [r3, #24]
 800690e:	e002      	b.n	8006916 <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 8006910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006912:	2200      	movs	r2, #0
 8006914:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800691e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f00e fef4 	bl	8015712 <HAL_PCD_DataInStageCallback>
 800692a:	e01b      	b.n	8006964 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800692c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800692e:	695a      	ldr	r2, [r3, #20]
 8006930:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006934:	441a      	add	r2, r3
 8006936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006938:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800693a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693c:	69da      	ldr	r2, [r3, #28]
 800693e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006942:	441a      	add	r2, r3
 8006944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006946:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800694e:	4618      	mov	r0, r3
 8006950:	f003 fc13 	bl	800a17a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006954:	e006      	b.n	8006964 <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006956:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800695a:	461a      	mov	r2, r3
 800695c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f91b 	bl	8006b9a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800696c:	b29b      	uxth	r3, r3
 800696e:	b21b      	sxth	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	f6ff ac4d 	blt.w	8006210 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3758      	adds	r7, #88	; 0x58
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	4613      	mov	r3, r2
 800698c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d07e      	beq.n	8006a96 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	4413      	add	r3, r2
 80069ac:	3302      	adds	r3, #2
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	699a      	ldr	r2, [r3, #24]
 80069c6:	8b7b      	ldrh	r3, [r7, #26]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d306      	bcc.n	80069da <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	699a      	ldr	r2, [r3, #24]
 80069d0:	8b7b      	ldrh	r3, [r7, #26]
 80069d2:	1ad2      	subs	r2, r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	619a      	str	r2, [r3, #24]
 80069d8:	e002      	b.n	80069e0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2200      	movs	r2, #0
 80069de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d123      	bne.n	8006a30 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	833b      	strh	r3, [r7, #24]
 8006a04:	8b3b      	ldrh	r3, [r7, #24]
 8006a06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a0a:	833b      	strh	r3, [r7, #24]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	8b3b      	ldrh	r3, [r7, #24]
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006a30:	88fb      	ldrh	r3, [r7, #6]
 8006a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d01f      	beq.n	8006a7a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a54:	82fb      	strh	r3, [r7, #22]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	441a      	add	r2, r3
 8006a64:	8afb      	ldrh	r3, [r7, #22]
 8006a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006a7a:	8b7b      	ldrh	r3, [r7, #26]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 8087 	beq.w	8006b90 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6818      	ldr	r0, [r3, #0]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	6959      	ldr	r1, [r3, #20]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	891a      	ldrh	r2, [r3, #8]
 8006a8e:	8b7b      	ldrh	r3, [r7, #26]
 8006a90:	f005 f81d 	bl	800bace <USB_ReadPMA>
 8006a94:	e07c      	b.n	8006b90 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3306      	adds	r3, #6
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	6812      	ldr	r2, [r2, #0]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006abe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	699a      	ldr	r2, [r3, #24]
 8006ac4:	8b7b      	ldrh	r3, [r7, #26]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d306      	bcc.n	8006ad8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	8b7b      	ldrh	r3, [r7, #26]
 8006ad0:	1ad2      	subs	r2, r2, r3
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	619a      	str	r2, [r3, #24]
 8006ad6:	e002      	b.n	8006ade <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2200      	movs	r2, #0
 8006adc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d123      	bne.n	8006b2e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b00:	83fb      	strh	r3, [r7, #30]
 8006b02:	8bfb      	ldrh	r3, [r7, #30]
 8006b04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b08:	83fb      	strh	r3, [r7, #30]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	441a      	add	r2, r3
 8006b18:	8bfb      	ldrh	r3, [r7, #30]
 8006b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006b2e:	88fb      	ldrh	r3, [r7, #6]
 8006b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d11f      	bne.n	8006b78 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b52:	83bb      	strh	r3, [r7, #28]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	8bbb      	ldrh	r3, [r7, #28]
 8006b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006b78:	8b7b      	ldrh	r3, [r7, #26]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d008      	beq.n	8006b90 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6959      	ldr	r1, [r3, #20]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	895a      	ldrh	r2, [r3, #10]
 8006b8a:	8b7b      	ldrh	r3, [r7, #26]
 8006b8c:	f004 ff9f 	bl	800bace <USB_ReadPMA>
    }
  }

  return count;
 8006b90:	8b7b      	ldrh	r3, [r7, #26]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3720      	adds	r7, #32
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b0a2      	sub	sp, #136	; 0x88
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006ba8:	88fb      	ldrh	r3, [r7, #6]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 81c7 	beq.w	8006f42 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3302      	adds	r3, #2
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	699a      	ldr	r2, [r3, #24]
 8006be4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d907      	bls.n	8006bfc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	699a      	ldr	r2, [r3, #24]
 8006bf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006bf4:	1ad2      	subs	r2, r2, r3
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	619a      	str	r2, [r3, #24]
 8006bfa:	e002      	b.n	8006c02 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f040 80b9 	bne.w	8006d7e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	785b      	ldrb	r3, [r3, #1]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d126      	bne.n	8006c62 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	461a      	mov	r2, r3
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	4413      	add	r3, r2
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	011a      	lsls	r2, r3, #4
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	4413      	add	r3, r2
 8006c36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	801a      	strh	r2, [r3, #0]
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	e01a      	b.n	8006c98 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	785b      	ldrb	r3, [r3, #1]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d116      	bne.n	8006c98 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	4413      	add	r3, r2
 8006c80:	633b      	str	r3, [r7, #48]	; 0x30
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	011a      	lsls	r2, r3, #4
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	2200      	movs	r2, #0
 8006c96:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	623b      	str	r3, [r7, #32]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d126      	bne.n	8006cf4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	61bb      	str	r3, [r7, #24]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	4413      	add	r3, r2
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	011a      	lsls	r2, r3, #4
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	801a      	strh	r2, [r3, #0]
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	801a      	strh	r2, [r3, #0]
 8006cf2:	e017      	b.n	8006d24 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d113      	bne.n	8006d24 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	461a      	mov	r2, r3
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	623b      	str	r3, [r7, #32]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	011a      	lsls	r2, r3, #4
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	4413      	add	r3, r2
 8006d18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	2200      	movs	r2, #0
 8006d22:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f00e fcf1 	bl	8015712 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006d30:	88fb      	ldrh	r3, [r7, #6]
 8006d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 82d4 	beq.w	80072e4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d56:	827b      	strh	r3, [r7, #18]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	441a      	add	r2, r3
 8006d66:	8a7b      	ldrh	r3, [r7, #18]
 8006d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	8013      	strh	r3, [r2, #0]
 8006d7c:	e2b2      	b.n	80072e4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006d7e:	88fb      	ldrh	r3, [r7, #6]
 8006d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d021      	beq.n	8006dcc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	441a      	add	r2, r3
 8006db4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	f040 8286 	bne.w	80072e4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	695a      	ldr	r2, [r3, #20]
 8006ddc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006de0:	441a      	add	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	69da      	ldr	r2, [r3, #28]
 8006dea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006dee:	441a      	add	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	6a1a      	ldr	r2, [r3, #32]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d309      	bcc.n	8006e14 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	6a1a      	ldr	r2, [r3, #32]
 8006e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e0c:	1ad2      	subs	r2, r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	621a      	str	r2, [r3, #32]
 8006e12:	e015      	b.n	8006e40 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d107      	bne.n	8006e2c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8006e1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e20:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006e2a:	e009      	b.n	8006e40 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d155      	bne.n	8006ef4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	4413      	add	r3, r2
 8006e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	011a      	lsls	r2, r3, #4
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	4413      	add	r3, r2
 8006e6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d112      	bne.n	8006e9c <HAL_PCD_EP_DB_Transmit+0x302>
 8006e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	801a      	strh	r2, [r3, #0]
 8006e9a:	e047      	b.n	8006f2c <HAL_PCD_EP_DB_Transmit+0x392>
 8006e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e9e:	2b3e      	cmp	r3, #62	; 0x3e
 8006ea0:	d811      	bhi.n	8006ec6 <HAL_PCD_EP_DB_Transmit+0x32c>
 8006ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea4:	085b      	lsrs	r3, r3, #1
 8006ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <HAL_PCD_EP_DB_Transmit+0x31e>
 8006eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	029b      	lsls	r3, r3, #10
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec2:	801a      	strh	r2, [r3, #0]
 8006ec4:	e032      	b.n	8006f2c <HAL_PCD_EP_DB_Transmit+0x392>
 8006ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d102      	bne.n	8006edc <HAL_PCD_EP_DB_Transmit+0x342>
 8006ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8006edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	029b      	lsls	r3, r3, #10
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef0:	801a      	strh	r2, [r3, #0]
 8006ef2:	e01b      	b.n	8006f2c <HAL_PCD_EP_DB_Transmit+0x392>
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	785b      	ldrb	r3, [r3, #1]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d117      	bne.n	8006f2c <HAL_PCD_EP_DB_Transmit+0x392>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	643b      	str	r3, [r7, #64]	; 0x40
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f10:	4413      	add	r3, r2
 8006f12:	643b      	str	r3, [r7, #64]	; 0x40
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	011a      	lsls	r2, r3, #4
 8006f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	6959      	ldr	r1, [r3, #20]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	891a      	ldrh	r2, [r3, #8]
 8006f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f004 fd81 	bl	800ba42 <USB_WritePMA>
 8006f40:	e1d0      	b.n	80072e4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	4413      	add	r3, r2
 8006f56:	3306      	adds	r3, #6
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	6812      	ldr	r2, [r2, #0]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	699a      	ldr	r2, [r3, #24]
 8006f72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d307      	bcc.n	8006f8a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f82:	1ad2      	subs	r2, r2, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	619a      	str	r2, [r3, #24]
 8006f88:	e002      	b.n	8006f90 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f040 80c4 	bne.w	8007122 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	785b      	ldrb	r3, [r3, #1]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d126      	bne.n	8006ff0 <HAL_PCD_EP_DB_Transmit+0x456>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb6:	4413      	add	r3, r2
 8006fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	011a      	lsls	r2, r3, #4
 8006fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fd8:	801a      	strh	r2, [r3, #0]
 8006fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fec:	801a      	strh	r2, [r3, #0]
 8006fee:	e01a      	b.n	8007026 <HAL_PCD_EP_DB_Transmit+0x48c>
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	785b      	ldrb	r3, [r3, #1]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d116      	bne.n	8007026 <HAL_PCD_EP_DB_Transmit+0x48c>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	677b      	str	r3, [r7, #116]	; 0x74
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007006:	b29b      	uxth	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800700c:	4413      	add	r3, r2
 800700e:	677b      	str	r3, [r7, #116]	; 0x74
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	011a      	lsls	r2, r3, #4
 8007016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007018:	4413      	add	r3, r2
 800701a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800701e:	673b      	str	r3, [r7, #112]	; 0x70
 8007020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007022:	2200      	movs	r2, #0
 8007024:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	67bb      	str	r3, [r7, #120]	; 0x78
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d12f      	bne.n	8007094 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007044:	b29b      	uxth	r3, r3
 8007046:	461a      	mov	r2, r3
 8007048:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800704c:	4413      	add	r3, r2
 800704e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	011a      	lsls	r2, r3, #4
 8007058:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800705c:	4413      	add	r3, r2
 800705e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007072:	b29a      	uxth	r2, r3
 8007074:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007078:	801a      	strh	r2, [r3, #0]
 800707a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708a:	b29a      	uxth	r2, r3
 800708c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007090:	801a      	strh	r2, [r3, #0]
 8007092:	e017      	b.n	80070c4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	785b      	ldrb	r3, [r3, #1]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d113      	bne.n	80070c4 <HAL_PCD_EP_DB_Transmit+0x52a>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070aa:	4413      	add	r3, r2
 80070ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	011a      	lsls	r2, r3, #4
 80070b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b6:	4413      	add	r3, r2
 80070b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070c0:	2200      	movs	r2, #0
 80070c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	4619      	mov	r1, r3
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f00e fb21 	bl	8015712 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80070d0:	88fb      	ldrh	r3, [r7, #6]
 80070d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f040 8104 	bne.w	80072e4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	441a      	add	r2, r3
 8007108:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800710c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800711c:	b29b      	uxth	r3, r3
 800711e:	8013      	strh	r3, [r2, #0]
 8007120:	e0e0      	b.n	80072e4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007122:	88fb      	ldrh	r3, [r7, #6]
 8007124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d121      	bne.n	8007170 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	b29b      	uxth	r3, r3
 800713e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007146:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	441a      	add	r2, r3
 8007158:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800715c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716c:	b29b      	uxth	r3, r3
 800716e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007176:	2b01      	cmp	r3, #1
 8007178:	f040 80b4 	bne.w	80072e4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	695a      	ldr	r2, [r3, #20]
 8007180:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007184:	441a      	add	r2, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	69da      	ldr	r2, [r3, #28]
 800718e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007192:	441a      	add	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	6a1a      	ldr	r2, [r3, #32]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d309      	bcc.n	80071b8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	6a1a      	ldr	r2, [r3, #32]
 80071ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b0:	1ad2      	subs	r2, r2, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	621a      	str	r2, [r3, #32]
 80071b6:	e015      	b.n	80071e4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d107      	bne.n	80071d0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80071c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80071ce:	e009      	b.n	80071e4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2200      	movs	r2, #0
 80071da:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	667b      	str	r3, [r7, #100]	; 0x64
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d155      	bne.n	800729e <HAL_PCD_EP_DB_Transmit+0x704>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007200:	b29b      	uxth	r3, r3
 8007202:	461a      	mov	r2, r3
 8007204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007206:	4413      	add	r3, r2
 8007208:	65fb      	str	r3, [r7, #92]	; 0x5c
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	011a      	lsls	r2, r3, #4
 8007210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007212:	4413      	add	r3, r2
 8007214:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007218:	65bb      	str	r3, [r7, #88]	; 0x58
 800721a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800721c:	2b00      	cmp	r3, #0
 800721e:	d112      	bne.n	8007246 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	b29b      	uxth	r3, r3
 8007226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800722a:	b29a      	uxth	r2, r3
 800722c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800722e:	801a      	strh	r2, [r3, #0]
 8007230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800723e:	b29a      	uxth	r2, r3
 8007240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007242:	801a      	strh	r2, [r3, #0]
 8007244:	e044      	b.n	80072d0 <HAL_PCD_EP_DB_Transmit+0x736>
 8007246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007248:	2b3e      	cmp	r3, #62	; 0x3e
 800724a:	d811      	bhi.n	8007270 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800724c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800724e:	085b      	lsrs	r3, r3, #1
 8007250:	657b      	str	r3, [r7, #84]	; 0x54
 8007252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800725c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800725e:	3301      	adds	r3, #1
 8007260:	657b      	str	r3, [r7, #84]	; 0x54
 8007262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007264:	b29b      	uxth	r3, r3
 8007266:	029b      	lsls	r3, r3, #10
 8007268:	b29a      	uxth	r2, r3
 800726a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	e02f      	b.n	80072d0 <HAL_PCD_EP_DB_Transmit+0x736>
 8007270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007272:	095b      	lsrs	r3, r3, #5
 8007274:	657b      	str	r3, [r7, #84]	; 0x54
 8007276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007278:	f003 031f 	and.w	r3, r3, #31
 800727c:	2b00      	cmp	r3, #0
 800727e:	d102      	bne.n	8007286 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8007280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007282:	3b01      	subs	r3, #1
 8007284:	657b      	str	r3, [r7, #84]	; 0x54
 8007286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007288:	b29b      	uxth	r3, r3
 800728a:	029b      	lsls	r3, r3, #10
 800728c:	b29b      	uxth	r3, r3
 800728e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007296:	b29a      	uxth	r2, r3
 8007298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800729a:	801a      	strh	r2, [r3, #0]
 800729c:	e018      	b.n	80072d0 <HAL_PCD_EP_DB_Transmit+0x736>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	785b      	ldrb	r3, [r3, #1]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d114      	bne.n	80072d0 <HAL_PCD_EP_DB_Transmit+0x736>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072b4:	4413      	add	r3, r2
 80072b6:	667b      	str	r3, [r7, #100]	; 0x64
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	011a      	lsls	r2, r3, #4
 80072be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072c0:	4413      	add	r3, r2
 80072c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072c6:	663b      	str	r3, [r7, #96]	; 0x60
 80072c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ce:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6818      	ldr	r0, [r3, #0]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	6959      	ldr	r1, [r3, #20]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	895a      	ldrh	r2, [r3, #10]
 80072dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f004 fbaf 	bl	800ba42 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072fe:	823b      	strh	r3, [r7, #16]
 8007300:	8a3b      	ldrh	r3, [r7, #16]
 8007302:	f083 0310 	eor.w	r3, r3, #16
 8007306:	823b      	strh	r3, [r7, #16]
 8007308:	8a3b      	ldrh	r3, [r7, #16]
 800730a:	f083 0320 	eor.w	r3, r3, #32
 800730e:	823b      	strh	r3, [r7, #16]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	441a      	add	r2, r3
 800731e:	8a3b      	ldrh	r3, [r7, #16]
 8007320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800732c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007330:	b29b      	uxth	r3, r3
 8007332:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3788      	adds	r7, #136	; 0x88
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800733e:	b480      	push	{r7}
 8007340:	b087      	sub	sp, #28
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	607b      	str	r3, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	817b      	strh	r3, [r7, #10]
 800734c:	4613      	mov	r3, r2
 800734e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007350:	897b      	ldrh	r3, [r7, #10]
 8007352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007356:	b29b      	uxth	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800735c:	897b      	ldrh	r3, [r7, #10]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	e009      	b.n	8007388 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007374:	897a      	ldrh	r2, [r7, #10]
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	00db      	lsls	r3, r3, #3
 800737e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	4413      	add	r3, r2
 8007386:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007388:	893b      	ldrh	r3, [r7, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d107      	bne.n	800739e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2200      	movs	r2, #0
 8007392:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	b29a      	uxth	r2, r3
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	80da      	strh	r2, [r3, #6]
 800739c:	e00b      	b.n	80073b6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2201      	movs	r2, #1
 80073a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	0c1b      	lsrs	r3, r3, #16
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80073c8:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a04      	ldr	r2, [pc, #16]	; (80073e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80073ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d2:	6013      	str	r3, [r2, #0]
}
 80073d4:	bf00      	nop
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	40007000 	.word	0x40007000

080073e4 <HAL_PWR_EnableWakeUpPin>:
  *         This parameter can be value of :
  *           @ref PWR_WakeUp_Pins
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80073ec:	4b05      	ldr	r3, [pc, #20]	; (8007404 <HAL_PWR_EnableWakeUpPin+0x20>)
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	4904      	ldr	r1, [pc, #16]	; (8007404 <HAL_PWR_EnableWakeUpPin+0x20>)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	604b      	str	r3, [r1, #4]
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	40007000 	.word	0x40007000

08007408 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be values of :
  *           @ref PWR_WakeUp_Pins
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8007410:	4b06      	ldr	r3, [pc, #24]	; (800742c <HAL_PWR_DisableWakeUpPin+0x24>)
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	43db      	mvns	r3, r3
 8007418:	4904      	ldr	r1, [pc, #16]	; (800742c <HAL_PWR_DisableWakeUpPin+0x24>)
 800741a:	4013      	ands	r3, r2
 800741c:	604b      	str	r3, [r1, #4]
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40007000 	.word	0x40007000

08007430 <HAL_PWR_EnterSTANDBYMode>:
  *            Alarm out, or RTC clock calibration out, 
  *          - WKUP pins if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8007434:	4b08      	ldr	r3, [pc, #32]	; (8007458 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a07      	ldr	r2, [pc, #28]	; (8007458 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800743a:	f043 0302 	orr.w	r3, r3, #2
 800743e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	4a05      	ldr	r2, [pc, #20]	; (800745c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007446:	f043 0304 	orr.w	r3, r3, #4
 800744a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800744c:	bf30      	wfi
}
 800744e:	bf00      	nop
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	40007000 	.word	0x40007000
 800745c:	e000ed00 	.word	0xe000ed00

08007460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8007466:	af00      	add	r7, sp, #0
 8007468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800746c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007470:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007476:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d102      	bne.n	8007486 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	f001 b823 	b.w	80084cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800748a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 817d 	beq.w	8007796 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800749c:	4bbc      	ldr	r3, [pc, #752]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f003 030c 	and.w	r3, r3, #12
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d00c      	beq.n	80074c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80074a8:	4bb9      	ldr	r3, [pc, #740]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f003 030c 	and.w	r3, r3, #12
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	d15c      	bne.n	800756e <HAL_RCC_OscConfig+0x10e>
 80074b4:	4bb6      	ldr	r3, [pc, #728]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c0:	d155      	bne.n	800756e <HAL_RCC_OscConfig+0x10e>
 80074c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80074ce:	fa93 f3a3 	rbit	r3, r3
 80074d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80074d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074da:	fab3 f383 	clz	r3, r3
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f043 0301 	orr.w	r3, r3, #1
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d102      	bne.n	80074f4 <HAL_RCC_OscConfig+0x94>
 80074ee:	4ba8      	ldr	r3, [pc, #672]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	e015      	b.n	8007520 <HAL_RCC_OscConfig+0xc0>
 80074f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007500:	fa93 f3a3 	rbit	r3, r3
 8007504:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800750c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007510:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007514:	fa93 f3a3 	rbit	r3, r3
 8007518:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800751c:	4b9c      	ldr	r3, [pc, #624]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007524:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007528:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800752c:	fa92 f2a2 	rbit	r2, r2
 8007530:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8007534:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007538:	fab2 f282 	clz	r2, r2
 800753c:	b2d2      	uxtb	r2, r2
 800753e:	f042 0220 	orr.w	r2, r2, #32
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	f002 021f 	and.w	r2, r2, #31
 8007548:	2101      	movs	r1, #1
 800754a:	fa01 f202 	lsl.w	r2, r1, r2
 800754e:	4013      	ands	r3, r2
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 811f 	beq.w	8007794 <HAL_RCC_OscConfig+0x334>
 8007556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800755a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	f040 8116 	bne.w	8007794 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	f000 bfaf 	b.w	80084cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800756e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007572:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757e:	d106      	bne.n	800758e <HAL_RCC_OscConfig+0x12e>
 8007580:	4b83      	ldr	r3, [pc, #524]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a82      	ldr	r2, [pc, #520]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 8007586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	e036      	b.n	80075fc <HAL_RCC_OscConfig+0x19c>
 800758e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007592:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10c      	bne.n	80075b8 <HAL_RCC_OscConfig+0x158>
 800759e:	4b7c      	ldr	r3, [pc, #496]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a7b      	ldr	r2, [pc, #492]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80075a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	4b79      	ldr	r3, [pc, #484]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a78      	ldr	r2, [pc, #480]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80075b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	e021      	b.n	80075fc <HAL_RCC_OscConfig+0x19c>
 80075b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075c8:	d10c      	bne.n	80075e4 <HAL_RCC_OscConfig+0x184>
 80075ca:	4b71      	ldr	r3, [pc, #452]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a70      	ldr	r2, [pc, #448]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80075d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	4b6e      	ldr	r3, [pc, #440]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a6d      	ldr	r2, [pc, #436]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80075dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	e00b      	b.n	80075fc <HAL_RCC_OscConfig+0x19c>
 80075e4:	4b6a      	ldr	r3, [pc, #424]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a69      	ldr	r2, [pc, #420]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80075ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	4b67      	ldr	r3, [pc, #412]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a66      	ldr	r2, [pc, #408]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80075f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80075fc:	4b64      	ldr	r3, [pc, #400]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	f023 020f 	bic.w	r2, r3, #15
 8007604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007608:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	495f      	ldr	r1, [pc, #380]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 8007612:	4313      	orrs	r3, r2
 8007614:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800761a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d059      	beq.n	80076da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007626:	f7fb f935 	bl	8002894 <HAL_GetTick>
 800762a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800762e:	e00a      	b.n	8007646 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007630:	f7fb f930 	bl	8002894 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	2b64      	cmp	r3, #100	; 0x64
 800763e:	d902      	bls.n	8007646 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	f000 bf43 	b.w	80084cc <HAL_RCC_OscConfig+0x106c>
 8007646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800764a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800764e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007652:	fa93 f3a3 	rbit	r3, r3
 8007656:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800765a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800765e:	fab3 f383 	clz	r3, r3
 8007662:	b2db      	uxtb	r3, r3
 8007664:	095b      	lsrs	r3, r3, #5
 8007666:	b2db      	uxtb	r3, r3
 8007668:	f043 0301 	orr.w	r3, r3, #1
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b01      	cmp	r3, #1
 8007670:	d102      	bne.n	8007678 <HAL_RCC_OscConfig+0x218>
 8007672:	4b47      	ldr	r3, [pc, #284]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	e015      	b.n	80076a4 <HAL_RCC_OscConfig+0x244>
 8007678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800767c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007680:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007684:	fa93 f3a3 	rbit	r3, r3
 8007688:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800768c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007690:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007694:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007698:	fa93 f3a3 	rbit	r3, r3
 800769c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80076a0:	4b3b      	ldr	r3, [pc, #236]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80076a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80076ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80076b0:	fa92 f2a2 	rbit	r2, r2
 80076b4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80076b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80076bc:	fab2 f282 	clz	r2, r2
 80076c0:	b2d2      	uxtb	r2, r2
 80076c2:	f042 0220 	orr.w	r2, r2, #32
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	f002 021f 	and.w	r2, r2, #31
 80076cc:	2101      	movs	r1, #1
 80076ce:	fa01 f202 	lsl.w	r2, r1, r2
 80076d2:	4013      	ands	r3, r2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d0ab      	beq.n	8007630 <HAL_RCC_OscConfig+0x1d0>
 80076d8:	e05d      	b.n	8007796 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076da:	f7fb f8db 	bl	8002894 <HAL_GetTick>
 80076de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076e2:	e00a      	b.n	80076fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076e4:	f7fb f8d6 	bl	8002894 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	2b64      	cmp	r3, #100	; 0x64
 80076f2:	d902      	bls.n	80076fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	f000 bee9 	b.w	80084cc <HAL_RCC_OscConfig+0x106c>
 80076fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076fe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007702:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007706:	fa93 f3a3 	rbit	r3, r3
 800770a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800770e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007712:	fab3 f383 	clz	r3, r3
 8007716:	b2db      	uxtb	r3, r3
 8007718:	095b      	lsrs	r3, r3, #5
 800771a:	b2db      	uxtb	r3, r3
 800771c:	f043 0301 	orr.w	r3, r3, #1
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b01      	cmp	r3, #1
 8007724:	d102      	bne.n	800772c <HAL_RCC_OscConfig+0x2cc>
 8007726:	4b1a      	ldr	r3, [pc, #104]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	e015      	b.n	8007758 <HAL_RCC_OscConfig+0x2f8>
 800772c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007730:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007734:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007738:	fa93 f3a3 	rbit	r3, r3
 800773c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007740:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007744:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007748:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800774c:	fa93 f3a3 	rbit	r3, r3
 8007750:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007754:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <HAL_RCC_OscConfig+0x330>)
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800775c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007760:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007764:	fa92 f2a2 	rbit	r2, r2
 8007768:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800776c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007770:	fab2 f282 	clz	r2, r2
 8007774:	b2d2      	uxtb	r2, r2
 8007776:	f042 0220 	orr.w	r2, r2, #32
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	f002 021f 	and.w	r2, r2, #31
 8007780:	2101      	movs	r1, #1
 8007782:	fa01 f202 	lsl.w	r2, r1, r2
 8007786:	4013      	ands	r3, r2
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1ab      	bne.n	80076e4 <HAL_RCC_OscConfig+0x284>
 800778c:	e003      	b.n	8007796 <HAL_RCC_OscConfig+0x336>
 800778e:	bf00      	nop
 8007790:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800779a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 817d 	beq.w	8007aa6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80077ac:	4ba6      	ldr	r3, [pc, #664]	; (8007a48 <HAL_RCC_OscConfig+0x5e8>)
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f003 030c 	and.w	r3, r3, #12
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80077b8:	4ba3      	ldr	r3, [pc, #652]	; (8007a48 <HAL_RCC_OscConfig+0x5e8>)
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f003 030c 	and.w	r3, r3, #12
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d172      	bne.n	80078aa <HAL_RCC_OscConfig+0x44a>
 80077c4:	4ba0      	ldr	r3, [pc, #640]	; (8007a48 <HAL_RCC_OscConfig+0x5e8>)
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d16c      	bne.n	80078aa <HAL_RCC_OscConfig+0x44a>
 80077d0:	2302      	movs	r3, #2
 80077d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80077da:	fa93 f3a3 	rbit	r3, r3
 80077de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80077e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077e6:	fab3 f383 	clz	r3, r3
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f043 0301 	orr.w	r3, r3, #1
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d102      	bne.n	8007800 <HAL_RCC_OscConfig+0x3a0>
 80077fa:	4b93      	ldr	r3, [pc, #588]	; (8007a48 <HAL_RCC_OscConfig+0x5e8>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	e013      	b.n	8007828 <HAL_RCC_OscConfig+0x3c8>
 8007800:	2302      	movs	r3, #2
 8007802:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007806:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800780a:	fa93 f3a3 	rbit	r3, r3
 800780e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007812:	2302      	movs	r3, #2
 8007814:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007818:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800781c:	fa93 f3a3 	rbit	r3, r3
 8007820:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007824:	4b88      	ldr	r3, [pc, #544]	; (8007a48 <HAL_RCC_OscConfig+0x5e8>)
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	2202      	movs	r2, #2
 800782a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800782e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007832:	fa92 f2a2 	rbit	r2, r2
 8007836:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800783a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800783e:	fab2 f282 	clz	r2, r2
 8007842:	b2d2      	uxtb	r2, r2
 8007844:	f042 0220 	orr.w	r2, r2, #32
 8007848:	b2d2      	uxtb	r2, r2
 800784a:	f002 021f 	and.w	r2, r2, #31
 800784e:	2101      	movs	r1, #1
 8007850:	fa01 f202 	lsl.w	r2, r1, r2
 8007854:	4013      	ands	r3, r2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <HAL_RCC_OscConfig+0x410>
 800785a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800785e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d002      	beq.n	8007870 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	f000 be2e 	b.w	80084cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007870:	4b75      	ldr	r3, [pc, #468]	; (8007a48 <HAL_RCC_OscConfig+0x5e8>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800787c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	21f8      	movs	r1, #248	; 0xf8
 8007886:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800788e:	fa91 f1a1 	rbit	r1, r1
 8007892:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007896:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800789a:	fab1 f181 	clz	r1, r1
 800789e:	b2c9      	uxtb	r1, r1
 80078a0:	408b      	lsls	r3, r1
 80078a2:	4969      	ldr	r1, [pc, #420]	; (8007a48 <HAL_RCC_OscConfig+0x5e8>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078a8:	e0fd      	b.n	8007aa6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 8088 	beq.w	80079cc <HAL_RCC_OscConfig+0x56c>
 80078bc:	2301      	movs	r3, #1
 80078be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80078c6:	fa93 f3a3 	rbit	r3, r3
 80078ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80078ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078d2:	fab3 f383 	clz	r3, r3
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80078dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	461a      	mov	r2, r3
 80078e4:	2301      	movs	r3, #1
 80078e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e8:	f7fa ffd4 	bl	8002894 <HAL_GetTick>
 80078ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078f0:	e00a      	b.n	8007908 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078f2:	f7fa ffcf 	bl	8002894 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d902      	bls.n	8007908 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	f000 bde2 	b.w	80084cc <HAL_RCC_OscConfig+0x106c>
 8007908:	2302      	movs	r3, #2
 800790a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800790e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007912:	fa93 f3a3 	rbit	r3, r3
 8007916:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800791a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800791e:	fab3 f383 	clz	r3, r3
 8007922:	b2db      	uxtb	r3, r3
 8007924:	095b      	lsrs	r3, r3, #5
 8007926:	b2db      	uxtb	r3, r3
 8007928:	f043 0301 	orr.w	r3, r3, #1
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b01      	cmp	r3, #1
 8007930:	d102      	bne.n	8007938 <HAL_RCC_OscConfig+0x4d8>
 8007932:	4b45      	ldr	r3, [pc, #276]	; (8007a48 <HAL_RCC_OscConfig+0x5e8>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	e013      	b.n	8007960 <HAL_RCC_OscConfig+0x500>
 8007938:	2302      	movs	r3, #2
 800793a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800793e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007942:	fa93 f3a3 	rbit	r3, r3
 8007946:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800794a:	2302      	movs	r3, #2
 800794c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007950:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007954:	fa93 f3a3 	rbit	r3, r3
 8007958:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800795c:	4b3a      	ldr	r3, [pc, #232]	; (8007a48 <HAL_RCC_OscConfig+0x5e8>)
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	2202      	movs	r2, #2
 8007962:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007966:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800796a:	fa92 f2a2 	rbit	r2, r2
 800796e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007972:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007976:	fab2 f282 	clz	r2, r2
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	f042 0220 	orr.w	r2, r2, #32
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	f002 021f 	and.w	r2, r2, #31
 8007986:	2101      	movs	r1, #1
 8007988:	fa01 f202 	lsl.w	r2, r1, r2
 800798c:	4013      	ands	r3, r2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0af      	beq.n	80078f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007992:	4b2d      	ldr	r3, [pc, #180]	; (8007a48 <HAL_RCC_OscConfig+0x5e8>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800799a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800799e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	21f8      	movs	r1, #248	; 0xf8
 80079a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80079b0:	fa91 f1a1 	rbit	r1, r1
 80079b4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80079b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80079bc:	fab1 f181 	clz	r1, r1
 80079c0:	b2c9      	uxtb	r1, r1
 80079c2:	408b      	lsls	r3, r1
 80079c4:	4920      	ldr	r1, [pc, #128]	; (8007a48 <HAL_RCC_OscConfig+0x5e8>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	600b      	str	r3, [r1, #0]
 80079ca:	e06c      	b.n	8007aa6 <HAL_RCC_OscConfig+0x646>
 80079cc:	2301      	movs	r3, #1
 80079ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80079d6:	fa93 f3a3 	rbit	r3, r3
 80079da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80079de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079e2:	fab3 f383 	clz	r3, r3
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80079ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	461a      	mov	r2, r3
 80079f4:	2300      	movs	r3, #0
 80079f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f8:	f7fa ff4c 	bl	8002894 <HAL_GetTick>
 80079fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a00:	e00a      	b.n	8007a18 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a02:	f7fa ff47 	bl	8002894 <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d902      	bls.n	8007a18 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	f000 bd5a 	b.w	80084cc <HAL_RCC_OscConfig+0x106c>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a22:	fa93 f3a3 	rbit	r3, r3
 8007a26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a2e:	fab3 f383 	clz	r3, r3
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	095b      	lsrs	r3, r3, #5
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f043 0301 	orr.w	r3, r3, #1
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d104      	bne.n	8007a4c <HAL_RCC_OscConfig+0x5ec>
 8007a42:	4b01      	ldr	r3, [pc, #4]	; (8007a48 <HAL_RCC_OscConfig+0x5e8>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	e015      	b.n	8007a74 <HAL_RCC_OscConfig+0x614>
 8007a48:	40021000 	.word	0x40021000
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a56:	fa93 f3a3 	rbit	r3, r3
 8007a5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007a5e:	2302      	movs	r3, #2
 8007a60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a68:	fa93 f3a3 	rbit	r3, r3
 8007a6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007a70:	4bc8      	ldr	r3, [pc, #800]	; (8007d94 <HAL_RCC_OscConfig+0x934>)
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	2202      	movs	r2, #2
 8007a76:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007a7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007a7e:	fa92 f2a2 	rbit	r2, r2
 8007a82:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007a86:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007a8a:	fab2 f282 	clz	r2, r2
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	f042 0220 	orr.w	r2, r2, #32
 8007a94:	b2d2      	uxtb	r2, r2
 8007a96:	f002 021f 	and.w	r2, r2, #31
 8007a9a:	2101      	movs	r1, #1
 8007a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1ad      	bne.n	8007a02 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0308 	and.w	r3, r3, #8
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 8110 	beq.w	8007cdc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ac0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d079      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x760>
 8007acc:	2301      	movs	r3, #1
 8007ace:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ad6:	fa93 f3a3 	rbit	r3, r3
 8007ada:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ae2:	fab3 f383 	clz	r3, r3
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	461a      	mov	r2, r3
 8007aea:	4bab      	ldr	r3, [pc, #684]	; (8007d98 <HAL_RCC_OscConfig+0x938>)
 8007aec:	4413      	add	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	461a      	mov	r2, r3
 8007af2:	2301      	movs	r3, #1
 8007af4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007af6:	f7fa fecd 	bl	8002894 <HAL_GetTick>
 8007afa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007afe:	e00a      	b.n	8007b16 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b00:	f7fa fec8 	bl	8002894 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d902      	bls.n	8007b16 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	f000 bcdb 	b.w	80084cc <HAL_RCC_OscConfig+0x106c>
 8007b16:	2302      	movs	r3, #2
 8007b18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b20:	fa93 f3a3 	rbit	r3, r3
 8007b24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007b30:	2202      	movs	r2, #2
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	fa93 f2a3 	rbit	r2, r3
 8007b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b54:	2202      	movs	r2, #2
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	fa93 f2a3 	rbit	r2, r3
 8007b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b6e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b70:	4b88      	ldr	r3, [pc, #544]	; (8007d94 <HAL_RCC_OscConfig+0x934>)
 8007b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007b7c:	2102      	movs	r1, #2
 8007b7e:	6019      	str	r1, [r3, #0]
 8007b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	fa93 f1a3 	rbit	r1, r3
 8007b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007b96:	6019      	str	r1, [r3, #0]
  return result;
 8007b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b9c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	fab3 f383 	clz	r3, r3
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	f003 031f 	and.w	r3, r3, #31
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb8:	4013      	ands	r3, r2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0a0      	beq.n	8007b00 <HAL_RCC_OscConfig+0x6a0>
 8007bbe:	e08d      	b.n	8007cdc <HAL_RCC_OscConfig+0x87c>
 8007bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bc4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007bc8:	2201      	movs	r2, #1
 8007bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bd0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	fa93 f2a3 	rbit	r2, r3
 8007bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bde:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007be2:	601a      	str	r2, [r3, #0]
  return result;
 8007be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007be8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007bec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bee:	fab3 f383 	clz	r3, r3
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	4b68      	ldr	r3, [pc, #416]	; (8007d98 <HAL_RCC_OscConfig+0x938>)
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	2300      	movs	r3, #0
 8007c00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c02:	f7fa fe47 	bl	8002894 <HAL_GetTick>
 8007c06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c0a:	e00a      	b.n	8007c22 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c0c:	f7fa fe42 	bl	8002894 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d902      	bls.n	8007c22 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	f000 bc55 	b.w	80084cc <HAL_RCC_OscConfig+0x106c>
 8007c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	fa93 f2a3 	rbit	r2, r3
 8007c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007c4e:	2202      	movs	r2, #2
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	fa93 f2a3 	rbit	r2, r3
 8007c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c72:	2202      	movs	r2, #2
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	fa93 f2a3 	rbit	r2, r3
 8007c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c88:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007c8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c8e:	4b41      	ldr	r3, [pc, #260]	; (8007d94 <HAL_RCC_OscConfig+0x934>)
 8007c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007c9a:	2102      	movs	r1, #2
 8007c9c:	6019      	str	r1, [r3, #0]
 8007c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ca2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	fa93 f1a3 	rbit	r1, r3
 8007cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cb0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007cb4:	6019      	str	r1, [r3, #0]
  return result;
 8007cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	fab3 f383 	clz	r3, r3
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	f003 031f 	and.w	r3, r3, #31
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d197      	bne.n	8007c0c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ce0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 81a1 	beq.w	8008034 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cf8:	4b26      	ldr	r3, [pc, #152]	; (8007d94 <HAL_RCC_OscConfig+0x934>)
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d116      	bne.n	8007d32 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d04:	4b23      	ldr	r3, [pc, #140]	; (8007d94 <HAL_RCC_OscConfig+0x934>)
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	4a22      	ldr	r2, [pc, #136]	; (8007d94 <HAL_RCC_OscConfig+0x934>)
 8007d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d0e:	61d3      	str	r3, [r2, #28]
 8007d10:	4b20      	ldr	r3, [pc, #128]	; (8007d94 <HAL_RCC_OscConfig+0x934>)
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d1c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d26:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007d2a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d32:	4b1a      	ldr	r3, [pc, #104]	; (8007d9c <HAL_RCC_OscConfig+0x93c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d11a      	bne.n	8007d74 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d3e:	4b17      	ldr	r3, [pc, #92]	; (8007d9c <HAL_RCC_OscConfig+0x93c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a16      	ldr	r2, [pc, #88]	; (8007d9c <HAL_RCC_OscConfig+0x93c>)
 8007d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d4a:	f7fa fda3 	bl	8002894 <HAL_GetTick>
 8007d4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d52:	e009      	b.n	8007d68 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d54:	f7fa fd9e 	bl	8002894 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	2b64      	cmp	r3, #100	; 0x64
 8007d62:	d901      	bls.n	8007d68 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e3b1      	b.n	80084cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d68:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <HAL_RCC_OscConfig+0x93c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0ef      	beq.n	8007d54 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d10d      	bne.n	8007da0 <HAL_RCC_OscConfig+0x940>
 8007d84:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <HAL_RCC_OscConfig+0x934>)
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	4a02      	ldr	r2, [pc, #8]	; (8007d94 <HAL_RCC_OscConfig+0x934>)
 8007d8a:	f043 0301 	orr.w	r3, r3, #1
 8007d8e:	6213      	str	r3, [r2, #32]
 8007d90:	e03c      	b.n	8007e0c <HAL_RCC_OscConfig+0x9ac>
 8007d92:	bf00      	nop
 8007d94:	40021000 	.word	0x40021000
 8007d98:	10908120 	.word	0x10908120
 8007d9c:	40007000 	.word	0x40007000
 8007da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007da4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10c      	bne.n	8007dca <HAL_RCC_OscConfig+0x96a>
 8007db0:	4bc1      	ldr	r3, [pc, #772]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	4ac0      	ldr	r2, [pc, #768]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007db6:	f023 0301 	bic.w	r3, r3, #1
 8007dba:	6213      	str	r3, [r2, #32]
 8007dbc:	4bbe      	ldr	r3, [pc, #760]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	4abd      	ldr	r2, [pc, #756]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007dc2:	f023 0304 	bic.w	r3, r3, #4
 8007dc6:	6213      	str	r3, [r2, #32]
 8007dc8:	e020      	b.n	8007e0c <HAL_RCC_OscConfig+0x9ac>
 8007dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	2b05      	cmp	r3, #5
 8007dd8:	d10c      	bne.n	8007df4 <HAL_RCC_OscConfig+0x994>
 8007dda:	4bb7      	ldr	r3, [pc, #732]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	4ab6      	ldr	r2, [pc, #728]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007de0:	f043 0304 	orr.w	r3, r3, #4
 8007de4:	6213      	str	r3, [r2, #32]
 8007de6:	4bb4      	ldr	r3, [pc, #720]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	4ab3      	ldr	r2, [pc, #716]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007dec:	f043 0301 	orr.w	r3, r3, #1
 8007df0:	6213      	str	r3, [r2, #32]
 8007df2:	e00b      	b.n	8007e0c <HAL_RCC_OscConfig+0x9ac>
 8007df4:	4bb0      	ldr	r3, [pc, #704]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007df6:	6a1b      	ldr	r3, [r3, #32]
 8007df8:	4aaf      	ldr	r2, [pc, #700]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007dfa:	f023 0301 	bic.w	r3, r3, #1
 8007dfe:	6213      	str	r3, [r2, #32]
 8007e00:	4bad      	ldr	r3, [pc, #692]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	4aac      	ldr	r2, [pc, #688]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007e06:	f023 0304 	bic.w	r3, r3, #4
 8007e0a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 8081 	beq.w	8007f20 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e1e:	f7fa fd39 	bl	8002894 <HAL_GetTick>
 8007e22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e26:	e00b      	b.n	8007e40 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e28:	f7fa fd34 	bl	8002894 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e345      	b.n	80084cc <HAL_RCC_OscConfig+0x106c>
 8007e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007e48:	2202      	movs	r2, #2
 8007e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e50:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	fa93 f2a3 	rbit	r2, r3
 8007e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e5e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e6c:	2202      	movs	r2, #2
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	fa93 f2a3 	rbit	r2, r3
 8007e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e82:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007e86:	601a      	str	r2, [r3, #0]
  return result;
 8007e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e8c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007e90:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e92:	fab3 f383 	clz	r3, r3
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	095b      	lsrs	r3, r3, #5
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	f043 0302 	orr.w	r3, r3, #2
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d102      	bne.n	8007eac <HAL_RCC_OscConfig+0xa4c>
 8007ea6:	4b84      	ldr	r3, [pc, #528]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	e013      	b.n	8007ed4 <HAL_RCC_OscConfig+0xa74>
 8007eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eb0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ebc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	fa93 f2a3 	rbit	r2, r3
 8007ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	4b79      	ldr	r3, [pc, #484]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ed8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007edc:	2102      	movs	r1, #2
 8007ede:	6011      	str	r1, [r2, #0]
 8007ee0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ee4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007ee8:	6812      	ldr	r2, [r2, #0]
 8007eea:	fa92 f1a2 	rbit	r1, r2
 8007eee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ef2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007ef6:	6011      	str	r1, [r2, #0]
  return result;
 8007ef8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007efc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007f00:	6812      	ldr	r2, [r2, #0]
 8007f02:	fab2 f282 	clz	r2, r2
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f0c:	b2d2      	uxtb	r2, r2
 8007f0e:	f002 021f 	and.w	r2, r2, #31
 8007f12:	2101      	movs	r1, #1
 8007f14:	fa01 f202 	lsl.w	r2, r1, r2
 8007f18:	4013      	ands	r3, r2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d084      	beq.n	8007e28 <HAL_RCC_OscConfig+0x9c8>
 8007f1e:	e07f      	b.n	8008020 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f20:	f7fa fcb8 	bl	8002894 <HAL_GetTick>
 8007f24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f28:	e00b      	b.n	8007f42 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f2a:	f7fa fcb3 	bl	8002894 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d901      	bls.n	8007f42 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e2c4      	b.n	80084cc <HAL_RCC_OscConfig+0x106c>
 8007f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f46:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	fa93 f2a3 	rbit	r2, r3
 8007f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f60:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f6a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007f6e:	2202      	movs	r2, #2
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f76:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	fa93 f2a3 	rbit	r2, r3
 8007f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f84:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007f88:	601a      	str	r2, [r3, #0]
  return result;
 8007f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f8e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007f92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f94:	fab3 f383 	clz	r3, r3
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	095b      	lsrs	r3, r3, #5
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	f043 0302 	orr.w	r3, r3, #2
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d102      	bne.n	8007fae <HAL_RCC_OscConfig+0xb4e>
 8007fa8:	4b43      	ldr	r3, [pc, #268]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	e013      	b.n	8007fd6 <HAL_RCC_OscConfig+0xb76>
 8007fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fb2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fbe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	fa93 f2a3 	rbit	r2, r3
 8007fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fcc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	4b39      	ldr	r3, [pc, #228]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fda:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007fde:	2102      	movs	r1, #2
 8007fe0:	6011      	str	r1, [r2, #0]
 8007fe2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fe6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007fea:	6812      	ldr	r2, [r2, #0]
 8007fec:	fa92 f1a2 	rbit	r1, r2
 8007ff0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ff4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007ff8:	6011      	str	r1, [r2, #0]
  return result;
 8007ffa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ffe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008002:	6812      	ldr	r2, [r2, #0]
 8008004:	fab2 f282 	clz	r2, r2
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800800e:	b2d2      	uxtb	r2, r2
 8008010:	f002 021f 	and.w	r2, r2, #31
 8008014:	2101      	movs	r1, #1
 8008016:	fa01 f202 	lsl.w	r2, r1, r2
 800801a:	4013      	ands	r3, r2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d184      	bne.n	8007f2a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008020:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8008024:	2b01      	cmp	r3, #1
 8008026:	d105      	bne.n	8008034 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008028:	4b23      	ldr	r3, [pc, #140]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 800802a:	69db      	ldr	r3, [r3, #28]
 800802c:	4a22      	ldr	r2, [pc, #136]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 800802e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008032:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008038:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69db      	ldr	r3, [r3, #28]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8242 	beq.w	80084ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008046:	4b1c      	ldr	r3, [pc, #112]	; (80080b8 <HAL_RCC_OscConfig+0xc58>)
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f003 030c 	and.w	r3, r3, #12
 800804e:	2b08      	cmp	r3, #8
 8008050:	f000 8213 	beq.w	800847a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	2b02      	cmp	r3, #2
 8008062:	f040 8162 	bne.w	800832a <HAL_RCC_OscConfig+0xeca>
 8008066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800806a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800806e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008078:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	fa93 f2a3 	rbit	r2, r3
 8008082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008086:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800808a:	601a      	str	r2, [r3, #0]
  return result;
 800808c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008090:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008094:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008096:	fab3 f383 	clz	r3, r3
 800809a:	b2db      	uxtb	r3, r3
 800809c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80080a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	461a      	mov	r2, r3
 80080a8:	2300      	movs	r3, #0
 80080aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ac:	f7fa fbf2 	bl	8002894 <HAL_GetTick>
 80080b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80080b4:	e00c      	b.n	80080d0 <HAL_RCC_OscConfig+0xc70>
 80080b6:	bf00      	nop
 80080b8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080bc:	f7fa fbea 	bl	8002894 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d901      	bls.n	80080d0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e1fd      	b.n	80084cc <HAL_RCC_OscConfig+0x106c>
 80080d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80080d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	fa93 f2a3 	rbit	r2, r3
 80080ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80080f4:	601a      	str	r2, [r3, #0]
  return result;
 80080f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80080fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008100:	fab3 f383 	clz	r3, r3
 8008104:	b2db      	uxtb	r3, r3
 8008106:	095b      	lsrs	r3, r3, #5
 8008108:	b2db      	uxtb	r3, r3
 800810a:	f043 0301 	orr.w	r3, r3, #1
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b01      	cmp	r3, #1
 8008112:	d102      	bne.n	800811a <HAL_RCC_OscConfig+0xcba>
 8008114:	4bb0      	ldr	r3, [pc, #704]	; (80083d8 <HAL_RCC_OscConfig+0xf78>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	e027      	b.n	800816a <HAL_RCC_OscConfig+0xd0a>
 800811a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800811e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008122:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008126:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800812c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	fa93 f2a3 	rbit	r2, r3
 8008136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800813a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008144:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008148:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008152:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	fa93 f2a3 	rbit	r2, r3
 800815c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008160:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	4b9c      	ldr	r3, [pc, #624]	; (80083d8 <HAL_RCC_OscConfig+0xf78>)
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800816e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008172:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008176:	6011      	str	r1, [r2, #0]
 8008178:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800817c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008180:	6812      	ldr	r2, [r2, #0]
 8008182:	fa92 f1a2 	rbit	r1, r2
 8008186:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800818a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800818e:	6011      	str	r1, [r2, #0]
  return result;
 8008190:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008194:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	fab2 f282 	clz	r2, r2
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	f042 0220 	orr.w	r2, r2, #32
 80081a4:	b2d2      	uxtb	r2, r2
 80081a6:	f002 021f 	and.w	r2, r2, #31
 80081aa:	2101      	movs	r1, #1
 80081ac:	fa01 f202 	lsl.w	r2, r1, r2
 80081b0:	4013      	ands	r3, r2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d182      	bne.n	80080bc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081b6:	4b88      	ldr	r3, [pc, #544]	; (80083d8 <HAL_RCC_OscConfig+0xf78>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80081be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80081ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	430b      	orrs	r3, r1
 80081d8:	497f      	ldr	r1, [pc, #508]	; (80083d8 <HAL_RCC_OscConfig+0xf78>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	604b      	str	r3, [r1, #4]
 80081de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081e2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80081e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081f0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	fa93 f2a3 	rbit	r2, r3
 80081fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008202:	601a      	str	r2, [r3, #0]
  return result;
 8008204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008208:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800820c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800820e:	fab3 f383 	clz	r3, r3
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008218:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	461a      	mov	r2, r3
 8008220:	2301      	movs	r3, #1
 8008222:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008224:	f7fa fb36 	bl	8002894 <HAL_GetTick>
 8008228:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800822c:	e009      	b.n	8008242 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800822e:	f7fa fb31 	bl	8002894 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d901      	bls.n	8008242 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e144      	b.n	80084cc <HAL_RCC_OscConfig+0x106c>
 8008242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008246:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800824a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800824e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008254:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	fa93 f2a3 	rbit	r2, r3
 800825e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008262:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008266:	601a      	str	r2, [r3, #0]
  return result;
 8008268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800826c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008270:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008272:	fab3 f383 	clz	r3, r3
 8008276:	b2db      	uxtb	r3, r3
 8008278:	095b      	lsrs	r3, r3, #5
 800827a:	b2db      	uxtb	r3, r3
 800827c:	f043 0301 	orr.w	r3, r3, #1
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b01      	cmp	r3, #1
 8008284:	d102      	bne.n	800828c <HAL_RCC_OscConfig+0xe2c>
 8008286:	4b54      	ldr	r3, [pc, #336]	; (80083d8 <HAL_RCC_OscConfig+0xf78>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	e027      	b.n	80082dc <HAL_RCC_OscConfig+0xe7c>
 800828c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008290:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800829a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800829e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	fa93 f2a3 	rbit	r2, r3
 80082a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082b6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80082ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	fa93 f2a3 	rbit	r2, r3
 80082ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082d2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	4b3f      	ldr	r3, [pc, #252]	; (80083d8 <HAL_RCC_OscConfig+0xf78>)
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082e0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80082e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80082e8:	6011      	str	r1, [r2, #0]
 80082ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082ee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80082f2:	6812      	ldr	r2, [r2, #0]
 80082f4:	fa92 f1a2 	rbit	r1, r2
 80082f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082fc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008300:	6011      	str	r1, [r2, #0]
  return result;
 8008302:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008306:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800830a:	6812      	ldr	r2, [r2, #0]
 800830c:	fab2 f282 	clz	r2, r2
 8008310:	b2d2      	uxtb	r2, r2
 8008312:	f042 0220 	orr.w	r2, r2, #32
 8008316:	b2d2      	uxtb	r2, r2
 8008318:	f002 021f 	and.w	r2, r2, #31
 800831c:	2101      	movs	r1, #1
 800831e:	fa01 f202 	lsl.w	r2, r1, r2
 8008322:	4013      	ands	r3, r2
 8008324:	2b00      	cmp	r3, #0
 8008326:	d082      	beq.n	800822e <HAL_RCC_OscConfig+0xdce>
 8008328:	e0cf      	b.n	80084ca <HAL_RCC_OscConfig+0x106a>
 800832a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800832e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008332:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008336:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800833c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	fa93 f2a3 	rbit	r2, r3
 8008346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800834a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800834e:	601a      	str	r2, [r3, #0]
  return result;
 8008350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008354:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008358:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800835a:	fab3 f383 	clz	r3, r3
 800835e:	b2db      	uxtb	r3, r3
 8008360:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008364:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	461a      	mov	r2, r3
 800836c:	2300      	movs	r3, #0
 800836e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008370:	f7fa fa90 	bl	8002894 <HAL_GetTick>
 8008374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008378:	e009      	b.n	800838e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800837a:	f7fa fa8b 	bl	8002894 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	2b02      	cmp	r3, #2
 8008388:	d901      	bls.n	800838e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e09e      	b.n	80084cc <HAL_RCC_OscConfig+0x106c>
 800838e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008392:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008396:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800839a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800839c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	fa93 f2a3 	rbit	r2, r3
 80083aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80083b2:	601a      	str	r2, [r3, #0]
  return result;
 80083b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083b8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80083bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083be:	fab3 f383 	clz	r3, r3
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	095b      	lsrs	r3, r3, #5
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	f043 0301 	orr.w	r3, r3, #1
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d104      	bne.n	80083dc <HAL_RCC_OscConfig+0xf7c>
 80083d2:	4b01      	ldr	r3, [pc, #4]	; (80083d8 <HAL_RCC_OscConfig+0xf78>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	e029      	b.n	800842c <HAL_RCC_OscConfig+0xfcc>
 80083d8:	40021000 	.word	0x40021000
 80083dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80083e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	fa93 f2a3 	rbit	r2, r3
 80083f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008406:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800840a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008414:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	fa93 f2a3 	rbit	r2, r3
 800841e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008422:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	4b2b      	ldr	r3, [pc, #172]	; (80084d8 <HAL_RCC_OscConfig+0x1078>)
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008430:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008434:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008438:	6011      	str	r1, [r2, #0]
 800843a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800843e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008442:	6812      	ldr	r2, [r2, #0]
 8008444:	fa92 f1a2 	rbit	r1, r2
 8008448:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800844c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008450:	6011      	str	r1, [r2, #0]
  return result;
 8008452:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008456:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800845a:	6812      	ldr	r2, [r2, #0]
 800845c:	fab2 f282 	clz	r2, r2
 8008460:	b2d2      	uxtb	r2, r2
 8008462:	f042 0220 	orr.w	r2, r2, #32
 8008466:	b2d2      	uxtb	r2, r2
 8008468:	f002 021f 	and.w	r2, r2, #31
 800846c:	2101      	movs	r1, #1
 800846e:	fa01 f202 	lsl.w	r2, r1, r2
 8008472:	4013      	ands	r3, r2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d180      	bne.n	800837a <HAL_RCC_OscConfig+0xf1a>
 8008478:	e027      	b.n	80084ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800847a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800847e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d101      	bne.n	800848e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e01e      	b.n	80084cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800848e:	4b12      	ldr	r3, [pc, #72]	; (80084d8 <HAL_RCC_OscConfig+0x1078>)
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008496:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800849a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800849e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d10b      	bne.n	80084c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80084ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80084b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80084b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d001      	beq.n	80084ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e000      	b.n	80084cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	40021000 	.word	0x40021000

080084dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b09e      	sub	sp, #120	; 0x78
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e162      	b.n	80087ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084f4:	4b90      	ldr	r3, [pc, #576]	; (8008738 <HAL_RCC_ClockConfig+0x25c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0307 	and.w	r3, r3, #7
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d910      	bls.n	8008524 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008502:	4b8d      	ldr	r3, [pc, #564]	; (8008738 <HAL_RCC_ClockConfig+0x25c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f023 0207 	bic.w	r2, r3, #7
 800850a:	498b      	ldr	r1, [pc, #556]	; (8008738 <HAL_RCC_ClockConfig+0x25c>)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	4313      	orrs	r3, r2
 8008510:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008512:	4b89      	ldr	r3, [pc, #548]	; (8008738 <HAL_RCC_ClockConfig+0x25c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	429a      	cmp	r2, r3
 800851e:	d001      	beq.n	8008524 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e14a      	b.n	80087ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0302 	and.w	r3, r3, #2
 800852c:	2b00      	cmp	r3, #0
 800852e:	d008      	beq.n	8008542 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008530:	4b82      	ldr	r3, [pc, #520]	; (800873c <HAL_RCC_ClockConfig+0x260>)
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	497f      	ldr	r1, [pc, #508]	; (800873c <HAL_RCC_ClockConfig+0x260>)
 800853e:	4313      	orrs	r3, r2
 8008540:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 80dc 	beq.w	8008708 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d13c      	bne.n	80085d2 <HAL_RCC_ClockConfig+0xf6>
 8008558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800855c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800855e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008560:	fa93 f3a3 	rbit	r3, r3
 8008564:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008568:	fab3 f383 	clz	r3, r3
 800856c:	b2db      	uxtb	r3, r3
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	b2db      	uxtb	r3, r3
 8008572:	f043 0301 	orr.w	r3, r3, #1
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b01      	cmp	r3, #1
 800857a:	d102      	bne.n	8008582 <HAL_RCC_ClockConfig+0xa6>
 800857c:	4b6f      	ldr	r3, [pc, #444]	; (800873c <HAL_RCC_ClockConfig+0x260>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	e00f      	b.n	80085a2 <HAL_RCC_ClockConfig+0xc6>
 8008582:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008586:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800858a:	fa93 f3a3 	rbit	r3, r3
 800858e:	667b      	str	r3, [r7, #100]	; 0x64
 8008590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008594:	663b      	str	r3, [r7, #96]	; 0x60
 8008596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008598:	fa93 f3a3 	rbit	r3, r3
 800859c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800859e:	4b67      	ldr	r3, [pc, #412]	; (800873c <HAL_RCC_ClockConfig+0x260>)
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80085a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80085a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085aa:	fa92 f2a2 	rbit	r2, r2
 80085ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80085b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085b2:	fab2 f282 	clz	r2, r2
 80085b6:	b2d2      	uxtb	r2, r2
 80085b8:	f042 0220 	orr.w	r2, r2, #32
 80085bc:	b2d2      	uxtb	r2, r2
 80085be:	f002 021f 	and.w	r2, r2, #31
 80085c2:	2101      	movs	r1, #1
 80085c4:	fa01 f202 	lsl.w	r2, r1, r2
 80085c8:	4013      	ands	r3, r2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d17b      	bne.n	80086c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e0f3      	b.n	80087ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d13c      	bne.n	8008654 <HAL_RCC_ClockConfig+0x178>
 80085da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e2:	fa93 f3a3 	rbit	r3, r3
 80085e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80085e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085ea:	fab3 f383 	clz	r3, r3
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	095b      	lsrs	r3, r3, #5
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	f043 0301 	orr.w	r3, r3, #1
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d102      	bne.n	8008604 <HAL_RCC_ClockConfig+0x128>
 80085fe:	4b4f      	ldr	r3, [pc, #316]	; (800873c <HAL_RCC_ClockConfig+0x260>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	e00f      	b.n	8008624 <HAL_RCC_ClockConfig+0x148>
 8008604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008608:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800860a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800860c:	fa93 f3a3 	rbit	r3, r3
 8008610:	647b      	str	r3, [r7, #68]	; 0x44
 8008612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008616:	643b      	str	r3, [r7, #64]	; 0x40
 8008618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800861a:	fa93 f3a3 	rbit	r3, r3
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008620:	4b46      	ldr	r3, [pc, #280]	; (800873c <HAL_RCC_ClockConfig+0x260>)
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008628:	63ba      	str	r2, [r7, #56]	; 0x38
 800862a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800862c:	fa92 f2a2 	rbit	r2, r2
 8008630:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008634:	fab2 f282 	clz	r2, r2
 8008638:	b2d2      	uxtb	r2, r2
 800863a:	f042 0220 	orr.w	r2, r2, #32
 800863e:	b2d2      	uxtb	r2, r2
 8008640:	f002 021f 	and.w	r2, r2, #31
 8008644:	2101      	movs	r1, #1
 8008646:	fa01 f202 	lsl.w	r2, r1, r2
 800864a:	4013      	ands	r3, r2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d13a      	bne.n	80086c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e0b2      	b.n	80087ba <HAL_RCC_ClockConfig+0x2de>
 8008654:	2302      	movs	r3, #2
 8008656:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865a:	fa93 f3a3 	rbit	r3, r3
 800865e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008662:	fab3 f383 	clz	r3, r3
 8008666:	b2db      	uxtb	r3, r3
 8008668:	095b      	lsrs	r3, r3, #5
 800866a:	b2db      	uxtb	r3, r3
 800866c:	f043 0301 	orr.w	r3, r3, #1
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b01      	cmp	r3, #1
 8008674:	d102      	bne.n	800867c <HAL_RCC_ClockConfig+0x1a0>
 8008676:	4b31      	ldr	r3, [pc, #196]	; (800873c <HAL_RCC_ClockConfig+0x260>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	e00d      	b.n	8008698 <HAL_RCC_ClockConfig+0x1bc>
 800867c:	2302      	movs	r3, #2
 800867e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008682:	fa93 f3a3 	rbit	r3, r3
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
 8008688:	2302      	movs	r3, #2
 800868a:	623b      	str	r3, [r7, #32]
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	fa93 f3a3 	rbit	r3, r3
 8008692:	61fb      	str	r3, [r7, #28]
 8008694:	4b29      	ldr	r3, [pc, #164]	; (800873c <HAL_RCC_ClockConfig+0x260>)
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	2202      	movs	r2, #2
 800869a:	61ba      	str	r2, [r7, #24]
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	fa92 f2a2 	rbit	r2, r2
 80086a2:	617a      	str	r2, [r7, #20]
  return result;
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	fab2 f282 	clz	r2, r2
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	f042 0220 	orr.w	r2, r2, #32
 80086b0:	b2d2      	uxtb	r2, r2
 80086b2:	f002 021f 	and.w	r2, r2, #31
 80086b6:	2101      	movs	r1, #1
 80086b8:	fa01 f202 	lsl.w	r2, r1, r2
 80086bc:	4013      	ands	r3, r2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e079      	b.n	80087ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086c6:	4b1d      	ldr	r3, [pc, #116]	; (800873c <HAL_RCC_ClockConfig+0x260>)
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	f023 0203 	bic.w	r2, r3, #3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	491a      	ldr	r1, [pc, #104]	; (800873c <HAL_RCC_ClockConfig+0x260>)
 80086d4:	4313      	orrs	r3, r2
 80086d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80086d8:	f7fa f8dc 	bl	8002894 <HAL_GetTick>
 80086dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086de:	e00a      	b.n	80086f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086e0:	f7fa f8d8 	bl	8002894 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e061      	b.n	80087ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086f6:	4b11      	ldr	r3, [pc, #68]	; (800873c <HAL_RCC_ClockConfig+0x260>)
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f003 020c 	and.w	r2, r3, #12
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	429a      	cmp	r2, r3
 8008706:	d1eb      	bne.n	80086e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008708:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <HAL_RCC_ClockConfig+0x25c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0307 	and.w	r3, r3, #7
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	429a      	cmp	r2, r3
 8008714:	d214      	bcs.n	8008740 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008716:	4b08      	ldr	r3, [pc, #32]	; (8008738 <HAL_RCC_ClockConfig+0x25c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f023 0207 	bic.w	r2, r3, #7
 800871e:	4906      	ldr	r1, [pc, #24]	; (8008738 <HAL_RCC_ClockConfig+0x25c>)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	4313      	orrs	r3, r2
 8008724:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008726:	4b04      	ldr	r3, [pc, #16]	; (8008738 <HAL_RCC_ClockConfig+0x25c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	429a      	cmp	r2, r3
 8008732:	d005      	beq.n	8008740 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e040      	b.n	80087ba <HAL_RCC_ClockConfig+0x2de>
 8008738:	40022000 	.word	0x40022000
 800873c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b00      	cmp	r3, #0
 800874a:	d008      	beq.n	800875e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800874c:	4b1d      	ldr	r3, [pc, #116]	; (80087c4 <HAL_RCC_ClockConfig+0x2e8>)
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	491a      	ldr	r1, [pc, #104]	; (80087c4 <HAL_RCC_ClockConfig+0x2e8>)
 800875a:	4313      	orrs	r3, r2
 800875c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0308 	and.w	r3, r3, #8
 8008766:	2b00      	cmp	r3, #0
 8008768:	d009      	beq.n	800877e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800876a:	4b16      	ldr	r3, [pc, #88]	; (80087c4 <HAL_RCC_ClockConfig+0x2e8>)
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	4912      	ldr	r1, [pc, #72]	; (80087c4 <HAL_RCC_ClockConfig+0x2e8>)
 800877a:	4313      	orrs	r3, r2
 800877c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800877e:	f000 f85b 	bl	8008838 <HAL_RCC_GetSysClockFreq>
 8008782:	4601      	mov	r1, r0
 8008784:	4b0f      	ldr	r3, [pc, #60]	; (80087c4 <HAL_RCC_ClockConfig+0x2e8>)
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800878c:	22f0      	movs	r2, #240	; 0xf0
 800878e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	fa92 f2a2 	rbit	r2, r2
 8008796:	60fa      	str	r2, [r7, #12]
  return result;
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	fab2 f282 	clz	r2, r2
 800879e:	b2d2      	uxtb	r2, r2
 80087a0:	40d3      	lsrs	r3, r2
 80087a2:	4a09      	ldr	r2, [pc, #36]	; (80087c8 <HAL_RCC_ClockConfig+0x2ec>)
 80087a4:	5cd3      	ldrb	r3, [r2, r3]
 80087a6:	fa21 f303 	lsr.w	r3, r1, r3
 80087aa:	4a08      	ldr	r2, [pc, #32]	; (80087cc <HAL_RCC_ClockConfig+0x2f0>)
 80087ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80087ae:	4b08      	ldr	r3, [pc, #32]	; (80087d0 <HAL_RCC_ClockConfig+0x2f4>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7f9 fed6 	bl	8002564 <HAL_InitTick>
  
  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3778      	adds	r7, #120	; 0x78
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	40021000 	.word	0x40021000
 80087c8:	08016d44 	.word	0x08016d44
 80087cc:	20000000 	.word	0x20000000
 80087d0:	20000004 	.word	0x20000004

080087d4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08a      	sub	sp, #40	; 0x28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80087e0:	2302      	movs	r3, #2
 80087e2:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80087e4:	2303      	movs	r3, #3
 80087e6:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 80087ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087f0:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 80087f2:	2300      	movs	r3, #0
 80087f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80087f6:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <HAL_RCC_MCOConfig+0x60>)
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	4a0e      	ldr	r2, [pc, #56]	; (8008834 <HAL_RCC_MCOConfig+0x60>)
 80087fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008800:	6153      	str	r3, [r2, #20]
 8008802:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <HAL_RCC_MCOConfig+0x60>)
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800880a:	613b      	str	r3, [r7, #16]
 800880c:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800880e:	f107 0314 	add.w	r3, r7, #20
 8008812:	4619      	mov	r1, r3
 8008814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008818:	f7fc fa3c 	bl	8004c94 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800881c:	4b05      	ldr	r3, [pc, #20]	; (8008834 <HAL_RCC_MCOConfig+0x60>)
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008824:	4903      	ldr	r1, [pc, #12]	; (8008834 <HAL_RCC_MCOConfig+0x60>)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	4313      	orrs	r3, r2
 800882a:	604b      	str	r3, [r1, #4]
}
 800882c:	bf00      	nop
 800882e:	3728      	adds	r7, #40	; 0x28
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	40021000 	.word	0x40021000

08008838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008838:	b480      	push	{r7}
 800883a:	b08b      	sub	sp, #44	; 0x2c
 800883c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	61fb      	str	r3, [r7, #28]
 8008842:	2300      	movs	r3, #0
 8008844:	61bb      	str	r3, [r7, #24]
 8008846:	2300      	movs	r3, #0
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
 800884a:	2300      	movs	r3, #0
 800884c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800884e:	2300      	movs	r3, #0
 8008850:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008852:	4b29      	ldr	r3, [pc, #164]	; (80088f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	f003 030c 	and.w	r3, r3, #12
 800885e:	2b04      	cmp	r3, #4
 8008860:	d002      	beq.n	8008868 <HAL_RCC_GetSysClockFreq+0x30>
 8008862:	2b08      	cmp	r3, #8
 8008864:	d003      	beq.n	800886e <HAL_RCC_GetSysClockFreq+0x36>
 8008866:	e03c      	b.n	80088e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008868:	4b24      	ldr	r3, [pc, #144]	; (80088fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800886a:	623b      	str	r3, [r7, #32]
      break;
 800886c:	e03c      	b.n	80088e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008874:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008878:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	fa92 f2a2 	rbit	r2, r2
 8008880:	607a      	str	r2, [r7, #4]
  return result;
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	fab2 f282 	clz	r2, r2
 8008888:	b2d2      	uxtb	r2, r2
 800888a:	40d3      	lsrs	r3, r2
 800888c:	4a1c      	ldr	r2, [pc, #112]	; (8008900 <HAL_RCC_GetSysClockFreq+0xc8>)
 800888e:	5cd3      	ldrb	r3, [r2, r3]
 8008890:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008892:	4b19      	ldr	r3, [pc, #100]	; (80088f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008896:	f003 030f 	and.w	r3, r3, #15
 800889a:	220f      	movs	r2, #15
 800889c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	fa92 f2a2 	rbit	r2, r2
 80088a4:	60fa      	str	r2, [r7, #12]
  return result;
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	fab2 f282 	clz	r2, r2
 80088ac:	b2d2      	uxtb	r2, r2
 80088ae:	40d3      	lsrs	r3, r2
 80088b0:	4a14      	ldr	r2, [pc, #80]	; (8008904 <HAL_RCC_GetSysClockFreq+0xcc>)
 80088b2:	5cd3      	ldrb	r3, [r2, r3]
 80088b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d008      	beq.n	80088d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80088c0:	4a0e      	ldr	r2, [pc, #56]	; (80088fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	fb02 f303 	mul.w	r3, r2, r3
 80088ce:	627b      	str	r3, [r7, #36]	; 0x24
 80088d0:	e004      	b.n	80088dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	4a0c      	ldr	r2, [pc, #48]	; (8008908 <HAL_RCC_GetSysClockFreq+0xd0>)
 80088d6:	fb02 f303 	mul.w	r3, r2, r3
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	623b      	str	r3, [r7, #32]
      break;
 80088e0:	e002      	b.n	80088e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80088e2:	4b06      	ldr	r3, [pc, #24]	; (80088fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80088e4:	623b      	str	r3, [r7, #32]
      break;
 80088e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088e8:	6a3b      	ldr	r3, [r7, #32]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	372c      	adds	r7, #44	; 0x2c
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	40021000 	.word	0x40021000
 80088fc:	007a1200 	.word	0x007a1200
 8008900:	08016d5c 	.word	0x08016d5c
 8008904:	08016d6c 	.word	0x08016d6c
 8008908:	003d0900 	.word	0x003d0900

0800890c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008910:	4b03      	ldr	r3, [pc, #12]	; (8008920 <HAL_RCC_GetHCLKFreq+0x14>)
 8008912:	681b      	ldr	r3, [r3, #0]
}
 8008914:	4618      	mov	r0, r3
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	20000000 	.word	0x20000000

08008924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800892a:	f7ff ffef 	bl	800890c <HAL_RCC_GetHCLKFreq>
 800892e:	4601      	mov	r1, r0
 8008930:	4b0b      	ldr	r3, [pc, #44]	; (8008960 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008938:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800893c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	fa92 f2a2 	rbit	r2, r2
 8008944:	603a      	str	r2, [r7, #0]
  return result;
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	fab2 f282 	clz	r2, r2
 800894c:	b2d2      	uxtb	r2, r2
 800894e:	40d3      	lsrs	r3, r2
 8008950:	4a04      	ldr	r2, [pc, #16]	; (8008964 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008952:	5cd3      	ldrb	r3, [r2, r3]
 8008954:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008958:	4618      	mov	r0, r3
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	40021000 	.word	0x40021000
 8008964:	08016d54 	.word	0x08016d54

08008968 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	220f      	movs	r2, #15
 8008976:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008978:	4b12      	ldr	r3, [pc, #72]	; (80089c4 <HAL_RCC_GetClockConfig+0x5c>)
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f003 0203 	and.w	r2, r3, #3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8008984:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <HAL_RCC_GetClockConfig+0x5c>)
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8008990:	4b0c      	ldr	r3, [pc, #48]	; (80089c4 <HAL_RCC_GetClockConfig+0x5c>)
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800899c:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <HAL_RCC_GetClockConfig+0x5c>)
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	08db      	lsrs	r3, r3, #3
 80089a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80089aa:	4b07      	ldr	r3, [pc, #28]	; (80089c8 <HAL_RCC_GetClockConfig+0x60>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0207 	and.w	r2, r3, #7
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	601a      	str	r2, [r3, #0]
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	40021000 	.word	0x40021000
 80089c8:	40022000 	.word	0x40022000

080089cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b092      	sub	sp, #72	; 0x48
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80089dc:	2300      	movs	r3, #0
 80089de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 80d4 	beq.w	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089f0:	4b4e      	ldr	r3, [pc, #312]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10e      	bne.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089fc:	4b4b      	ldr	r3, [pc, #300]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	4a4a      	ldr	r2, [pc, #296]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a06:	61d3      	str	r3, [r2, #28]
 8008a08:	4b48      	ldr	r3, [pc, #288]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a10:	60bb      	str	r3, [r7, #8]
 8008a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a1a:	4b45      	ldr	r3, [pc, #276]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d118      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a26:	4b42      	ldr	r3, [pc, #264]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a41      	ldr	r2, [pc, #260]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a32:	f7f9 ff2f 	bl	8002894 <HAL_GetTick>
 8008a36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a38:	e008      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a3a:	f7f9 ff2b 	bl	8002894 <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	2b64      	cmp	r3, #100	; 0x64
 8008a46:	d901      	bls.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e169      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a4c:	4b38      	ldr	r3, [pc, #224]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0f0      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008a58:	4b34      	ldr	r3, [pc, #208]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 8084 	beq.w	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d07c      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a78:	4b2c      	ldr	r3, [pc, #176]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	fa93 f3a3 	rbit	r3, r3
 8008a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a92:	fab3 f383 	clz	r3, r3
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	461a      	mov	r2, r3
 8008a9a:	4b26      	ldr	r3, [pc, #152]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aae:	fa93 f3a3 	rbit	r3, r3
 8008ab2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ab6:	fab3 f383 	clz	r3, r3
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	461a      	mov	r2, r3
 8008abe:	4b1d      	ldr	r3, [pc, #116]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008ac0:	4413      	add	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008aca:	4a18      	ldr	r2, [pc, #96]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ace:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d04b      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ada:	f7f9 fedb 	bl	8002894 <HAL_GetTick>
 8008ade:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ae0:	e00a      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ae2:	f7f9 fed7 	bl	8002894 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d901      	bls.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e113      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008af8:	2302      	movs	r3, #2
 8008afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afe:	fa93 f3a3 	rbit	r3, r3
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
 8008b04:	2302      	movs	r3, #2
 8008b06:	623b      	str	r3, [r7, #32]
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	fa93 f3a3 	rbit	r3, r3
 8008b0e:	61fb      	str	r3, [r7, #28]
  return result;
 8008b10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b12:	fab3 f383 	clz	r3, r3
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	095b      	lsrs	r3, r3, #5
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	f043 0302 	orr.w	r3, r3, #2
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d108      	bne.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008b26:	4b01      	ldr	r3, [pc, #4]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	e00d      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008b2c:	40021000 	.word	0x40021000
 8008b30:	40007000 	.word	0x40007000
 8008b34:	10908100 	.word	0x10908100
 8008b38:	2302      	movs	r3, #2
 8008b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	fa93 f3a3 	rbit	r3, r3
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	4b78      	ldr	r3, [pc, #480]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	2202      	movs	r2, #2
 8008b4a:	613a      	str	r2, [r7, #16]
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	fa92 f2a2 	rbit	r2, r2
 8008b52:	60fa      	str	r2, [r7, #12]
  return result;
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	fab2 f282 	clz	r2, r2
 8008b5a:	b2d2      	uxtb	r2, r2
 8008b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b60:	b2d2      	uxtb	r2, r2
 8008b62:	f002 021f 	and.w	r2, r2, #31
 8008b66:	2101      	movs	r1, #1
 8008b68:	fa01 f202 	lsl.w	r2, r1, r2
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0b7      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008b72:	4b6d      	ldr	r3, [pc, #436]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	496a      	ldr	r1, [pc, #424]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008b84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d105      	bne.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b8c:	4b66      	ldr	r3, [pc, #408]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	4a65      	ldr	r2, [pc, #404]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d008      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ba4:	4b60      	ldr	r3, [pc, #384]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba8:	f023 0203 	bic.w	r2, r3, #3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	495d      	ldr	r1, [pc, #372]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d008      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008bc2:	4b59      	ldr	r3, [pc, #356]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	4956      	ldr	r1, [pc, #344]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0304 	and.w	r3, r3, #4
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d008      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008be0:	4b51      	ldr	r3, [pc, #324]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	494e      	ldr	r1, [pc, #312]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0320 	and.w	r3, r3, #32
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d008      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008bfe:	4b4a      	ldr	r3, [pc, #296]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c02:	f023 0210 	bic.w	r2, r3, #16
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	4947      	ldr	r1, [pc, #284]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d008      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008c1c:	4b42      	ldr	r3, [pc, #264]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c28:	493f      	ldr	r1, [pc, #252]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d008      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008c3a:	4b3b      	ldr	r3, [pc, #236]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3e:	f023 0220 	bic.w	r2, r3, #32
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	4938      	ldr	r1, [pc, #224]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0308 	and.w	r3, r3, #8
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d008      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008c58:	4b33      	ldr	r3, [pc, #204]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	4930      	ldr	r1, [pc, #192]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0310 	and.w	r3, r3, #16
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d008      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008c76:	4b2c      	ldr	r3, [pc, #176]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	4929      	ldr	r1, [pc, #164]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d008      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c94:	4b24      	ldr	r3, [pc, #144]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	4921      	ldr	r1, [pc, #132]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d008      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008cb2:	4b1d      	ldr	r3, [pc, #116]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	491a      	ldr	r1, [pc, #104]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d008      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008cd0:	4b15      	ldr	r3, [pc, #84]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cdc:	4912      	ldr	r1, [pc, #72]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d008      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008cee:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfa:	490b      	ldr	r1, [pc, #44]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d008      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d18:	4903      	ldr	r1, [pc, #12]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3748      	adds	r7, #72	; 0x48
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	40021000 	.word	0x40021000

08008d2c <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e083      	b.n	8008e46 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	7f5b      	ldrb	r3, [r3, #29]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d105      	bne.n	8008d54 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7f9 fb3a 	bl	80023c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	22ca      	movs	r2, #202	; 0xca
 8008d60:	625a      	str	r2, [r3, #36]	; 0x24
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2253      	movs	r2, #83	; 0x53
 8008d68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f897 	bl	8008e9e <RTC_EnterInitMode>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d008      	beq.n	8008d88 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	22ff      	movs	r2, #255	; 0xff
 8008d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2204      	movs	r2, #4
 8008d82:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e05e      	b.n	8008e46 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6812      	ldr	r2, [r2, #0]
 8008d92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d9a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6899      	ldr	r1, [r3, #8]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	431a      	orrs	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	68d2      	ldr	r2, [r2, #12]
 8008dc2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6919      	ldr	r1, [r3, #16]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	041a      	lsls	r2, r3, #16
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008de6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10e      	bne.n	8008e14 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f829 	bl	8008e4e <HAL_RTC_WaitForSynchro>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d008      	beq.n	8008e14 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	22ff      	movs	r2, #255	; 0xff
 8008e08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2204      	movs	r2, #4
 8008e0e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e018      	b.n	8008e46 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e22:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	699a      	ldr	r2, [r3, #24]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	22ff      	movs	r2, #255	; 0xff
 8008e3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008e44:	2300      	movs	r3, #0
  }
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008e68:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008e6a:	f7f9 fd13 	bl	8002894 <HAL_GetTick>
 8008e6e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008e70:	e009      	b.n	8008e86 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e72:	f7f9 fd0f 	bl	8002894 <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e80:	d901      	bls.n	8008e86 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e007      	b.n	8008e96 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f003 0320 	and.w	r3, r3, #32
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0ee      	beq.n	8008e72 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d119      	bne.n	8008eec <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008ec2:	f7f9 fce7 	bl	8002894 <HAL_GetTick>
 8008ec6:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ec8:	e009      	b.n	8008ede <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008eca:	f7f9 fce3 	bl	8002894 <HAL_GetTick>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ed8:	d901      	bls.n	8008ede <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e007      	b.n	8008eee <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0ee      	beq.n	8008eca <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e09d      	b.n	8009044 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d108      	bne.n	8008f22 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f18:	d009      	beq.n	8008f2e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	61da      	str	r2, [r3, #28]
 8008f20:	e005      	b.n	8008f2e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d106      	bne.n	8008f4e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7f9 faa1 	bl	8002490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2202      	movs	r2, #2
 8008f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f64:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f6e:	d902      	bls.n	8008f76 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f70:	2300      	movs	r3, #0
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	e002      	b.n	8008f7c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f7a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f84:	d007      	beq.n	8008f96 <HAL_SPI_Init+0xa0>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f8e:	d002      	beq.n	8008f96 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	f003 0302 	and.w	r3, r3, #2
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd8:	ea42 0103 	orr.w	r1, r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	0c1b      	lsrs	r3, r3, #16
 8008ff2:	f003 0204 	and.w	r2, r3, #4
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffa:	f003 0310 	and.w	r3, r3, #16
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009004:	f003 0308 	and.w	r3, r3, #8
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009012:	ea42 0103 	orr.w	r1, r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	69da      	ldr	r2, [r3, #28]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009032:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e049      	b.n	80090f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d106      	bne.n	8009078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f841 	bl	80090fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3304      	adds	r3, #4
 8009088:	4619      	mov	r1, r3
 800908a:	4610      	mov	r0, r2
 800908c:	f000 f9f2 	bl	8009474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009102:	bf00      	nop
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
	...

08009110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b01      	cmp	r3, #1
 8009122:	d001      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e04a      	b.n	80091be <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2202      	movs	r2, #2
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68da      	ldr	r2, [r3, #12]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f042 0201 	orr.w	r2, r2, #1
 800913e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a21      	ldr	r2, [pc, #132]	; (80091cc <HAL_TIM_Base_Start_IT+0xbc>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d018      	beq.n	800917c <HAL_TIM_Base_Start_IT+0x6c>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009152:	d013      	beq.n	800917c <HAL_TIM_Base_Start_IT+0x6c>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a1d      	ldr	r2, [pc, #116]	; (80091d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d00e      	beq.n	800917c <HAL_TIM_Base_Start_IT+0x6c>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a1c      	ldr	r2, [pc, #112]	; (80091d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d009      	beq.n	800917c <HAL_TIM_Base_Start_IT+0x6c>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a1a      	ldr	r2, [pc, #104]	; (80091d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d004      	beq.n	800917c <HAL_TIM_Base_Start_IT+0x6c>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a19      	ldr	r2, [pc, #100]	; (80091dc <HAL_TIM_Base_Start_IT+0xcc>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d115      	bne.n	80091a8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	689a      	ldr	r2, [r3, #8]
 8009182:	4b17      	ldr	r3, [pc, #92]	; (80091e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009184:	4013      	ands	r3, r2
 8009186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2b06      	cmp	r3, #6
 800918c:	d015      	beq.n	80091ba <HAL_TIM_Base_Start_IT+0xaa>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009194:	d011      	beq.n	80091ba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f042 0201 	orr.w	r2, r2, #1
 80091a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091a6:	e008      	b.n	80091ba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f042 0201 	orr.w	r2, r2, #1
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	e000      	b.n	80091bc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	40012c00 	.word	0x40012c00
 80091d0:	40000400 	.word	0x40000400
 80091d4:	40000800 	.word	0x40000800
 80091d8:	40013400 	.word	0x40013400
 80091dc:	40014000 	.word	0x40014000
 80091e0:	00010007 	.word	0x00010007

080091e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	f003 0302 	and.w	r3, r3, #2
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d122      	bne.n	8009240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f003 0302 	and.w	r3, r3, #2
 8009204:	2b02      	cmp	r3, #2
 8009206:	d11b      	bne.n	8009240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f06f 0202 	mvn.w	r2, #2
 8009210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	f003 0303 	and.w	r3, r3, #3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d003      	beq.n	800922e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f905 	bl	8009436 <HAL_TIM_IC_CaptureCallback>
 800922c:	e005      	b.n	800923a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f8f7 	bl	8009422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f908 	bl	800944a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	2b04      	cmp	r3, #4
 800924c:	d122      	bne.n	8009294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b04      	cmp	r3, #4
 800925a:	d11b      	bne.n	8009294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f06f 0204 	mvn.w	r2, #4
 8009264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2202      	movs	r2, #2
 800926a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f8db 	bl	8009436 <HAL_TIM_IC_CaptureCallback>
 8009280:	e005      	b.n	800928e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f8cd 	bl	8009422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f8de 	bl	800944a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	f003 0308 	and.w	r3, r3, #8
 800929e:	2b08      	cmp	r3, #8
 80092a0:	d122      	bne.n	80092e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	f003 0308 	and.w	r3, r3, #8
 80092ac:	2b08      	cmp	r3, #8
 80092ae:	d11b      	bne.n	80092e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f06f 0208 	mvn.w	r2, #8
 80092b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2204      	movs	r2, #4
 80092be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	f003 0303 	and.w	r3, r3, #3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f8b1 	bl	8009436 <HAL_TIM_IC_CaptureCallback>
 80092d4:	e005      	b.n	80092e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f8a3 	bl	8009422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f8b4 	bl	800944a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	f003 0310 	and.w	r3, r3, #16
 80092f2:	2b10      	cmp	r3, #16
 80092f4:	d122      	bne.n	800933c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f003 0310 	and.w	r3, r3, #16
 8009300:	2b10      	cmp	r3, #16
 8009302:	d11b      	bne.n	800933c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f06f 0210 	mvn.w	r2, #16
 800930c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2208      	movs	r2, #8
 8009312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	69db      	ldr	r3, [r3, #28]
 800931a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f887 	bl	8009436 <HAL_TIM_IC_CaptureCallback>
 8009328:	e005      	b.n	8009336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f879 	bl	8009422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f88a 	bl	800944a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	2b01      	cmp	r3, #1
 8009348:	d10e      	bne.n	8009368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b01      	cmp	r3, #1
 8009356:	d107      	bne.n	8009368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f06f 0201 	mvn.w	r2, #1
 8009360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7f8 ffe6 	bl	8002334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009372:	2b80      	cmp	r3, #128	; 0x80
 8009374:	d10e      	bne.n	8009394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009380:	2b80      	cmp	r3, #128	; 0x80
 8009382:	d107      	bne.n	8009394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800938c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f90a 	bl	80095a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800939e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093a2:	d10e      	bne.n	80093c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ae:	2b80      	cmp	r3, #128	; 0x80
 80093b0:	d107      	bne.n	80093c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80093ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f8fd 	bl	80095bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093cc:	2b40      	cmp	r3, #64	; 0x40
 80093ce:	d10e      	bne.n	80093ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093da:	2b40      	cmp	r3, #64	; 0x40
 80093dc:	d107      	bne.n	80093ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f838 	bl	800945e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	f003 0320 	and.w	r3, r3, #32
 80093f8:	2b20      	cmp	r3, #32
 80093fa:	d10e      	bne.n	800941a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	f003 0320 	and.w	r3, r3, #32
 8009406:	2b20      	cmp	r3, #32
 8009408:	d107      	bne.n	800941a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f06f 0220 	mvn.w	r2, #32
 8009412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f8bd 	bl	8009594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800941a:	bf00      	nop
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009422:	b480      	push	{r7}
 8009424:	b083      	sub	sp, #12
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800942a:	bf00      	nop
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800943e:	bf00      	nop
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800944a:	b480      	push	{r7}
 800944c:	b083      	sub	sp, #12
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009452:	bf00      	nop
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800945e:	b480      	push	{r7}
 8009460:	b083      	sub	sp, #12
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009466:	bf00      	nop
 8009468:	370c      	adds	r7, #12
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
	...

08009474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a3c      	ldr	r2, [pc, #240]	; (8009578 <TIM_Base_SetConfig+0x104>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d00f      	beq.n	80094ac <TIM_Base_SetConfig+0x38>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009492:	d00b      	beq.n	80094ac <TIM_Base_SetConfig+0x38>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a39      	ldr	r2, [pc, #228]	; (800957c <TIM_Base_SetConfig+0x108>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d007      	beq.n	80094ac <TIM_Base_SetConfig+0x38>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a38      	ldr	r2, [pc, #224]	; (8009580 <TIM_Base_SetConfig+0x10c>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d003      	beq.n	80094ac <TIM_Base_SetConfig+0x38>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a37      	ldr	r2, [pc, #220]	; (8009584 <TIM_Base_SetConfig+0x110>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d108      	bne.n	80094be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a2d      	ldr	r2, [pc, #180]	; (8009578 <TIM_Base_SetConfig+0x104>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d01b      	beq.n	80094fe <TIM_Base_SetConfig+0x8a>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094cc:	d017      	beq.n	80094fe <TIM_Base_SetConfig+0x8a>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a2a      	ldr	r2, [pc, #168]	; (800957c <TIM_Base_SetConfig+0x108>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d013      	beq.n	80094fe <TIM_Base_SetConfig+0x8a>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a29      	ldr	r2, [pc, #164]	; (8009580 <TIM_Base_SetConfig+0x10c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d00f      	beq.n	80094fe <TIM_Base_SetConfig+0x8a>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a28      	ldr	r2, [pc, #160]	; (8009584 <TIM_Base_SetConfig+0x110>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d00b      	beq.n	80094fe <TIM_Base_SetConfig+0x8a>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a27      	ldr	r2, [pc, #156]	; (8009588 <TIM_Base_SetConfig+0x114>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d007      	beq.n	80094fe <TIM_Base_SetConfig+0x8a>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a26      	ldr	r2, [pc, #152]	; (800958c <TIM_Base_SetConfig+0x118>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d003      	beq.n	80094fe <TIM_Base_SetConfig+0x8a>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a25      	ldr	r2, [pc, #148]	; (8009590 <TIM_Base_SetConfig+0x11c>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d108      	bne.n	8009510 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	4313      	orrs	r3, r2
 800950e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	4313      	orrs	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a10      	ldr	r2, [pc, #64]	; (8009578 <TIM_Base_SetConfig+0x104>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d00f      	beq.n	800955c <TIM_Base_SetConfig+0xe8>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a11      	ldr	r2, [pc, #68]	; (8009584 <TIM_Base_SetConfig+0x110>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d00b      	beq.n	800955c <TIM_Base_SetConfig+0xe8>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a10      	ldr	r2, [pc, #64]	; (8009588 <TIM_Base_SetConfig+0x114>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d007      	beq.n	800955c <TIM_Base_SetConfig+0xe8>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a0f      	ldr	r2, [pc, #60]	; (800958c <TIM_Base_SetConfig+0x118>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d003      	beq.n	800955c <TIM_Base_SetConfig+0xe8>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a0e      	ldr	r2, [pc, #56]	; (8009590 <TIM_Base_SetConfig+0x11c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d103      	bne.n	8009564 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	691a      	ldr	r2, [r3, #16]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	615a      	str	r2, [r3, #20]
}
 800956a:	bf00      	nop
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	40012c00 	.word	0x40012c00
 800957c:	40000400 	.word	0x40000400
 8009580:	40000800 	.word	0x40000800
 8009584:	40013400 	.word	0x40013400
 8009588:	40014000 	.word	0x40014000
 800958c:	40014400 	.word	0x40014400
 8009590:	40014800 	.word	0x40014800

08009594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80095e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80095fe:	b480      	push	{r7}
 8009600:	b085      	sub	sp, #20
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009606:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800960a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009612:	b29a      	uxth	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	b29b      	uxth	r3, r3
 8009618:	43db      	mvns	r3, r3
 800961a:	b29b      	uxth	r3, r3
 800961c:	4013      	ands	r3, r2
 800961e:	b29a      	uxth	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009634:	b084      	sub	sp, #16
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	f107 0014 	add.w	r0, r7, #20
 8009642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	b004      	add	sp, #16
 8009674:	4770      	bx	lr
	...

08009678 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009678:	b480      	push	{r7}
 800967a:	b09d      	sub	sp, #116	; 0x74
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800969a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800969e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	78db      	ldrb	r3, [r3, #3]
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d81f      	bhi.n	80096ea <USB_ActivateEndpoint+0x72>
 80096aa:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <USB_ActivateEndpoint+0x38>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	080096c1 	.word	0x080096c1
 80096b4:	080096dd 	.word	0x080096dd
 80096b8:	080096f3 	.word	0x080096f3
 80096bc:	080096cf 	.word	0x080096cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80096c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096cc:	e012      	b.n	80096f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80096ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096d2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80096d6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096da:	e00b      	b.n	80096f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80096dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096e8:	e004      	b.n	80096f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80096f0:	e000      	b.n	80096f4 <USB_ActivateEndpoint+0x7c>
      break;
 80096f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	441a      	add	r2, r3
 80096fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800970a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800970e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009712:	b29b      	uxth	r3, r3
 8009714:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	881b      	ldrh	r3, [r3, #0]
 8009722:	b29b      	uxth	r3, r3
 8009724:	b21b      	sxth	r3, r3
 8009726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800972a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972e:	b21a      	sxth	r2, r3
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	b21b      	sxth	r3, r3
 8009736:	4313      	orrs	r3, r2
 8009738:	b21b      	sxth	r3, r3
 800973a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	441a      	add	r2, r3
 8009748:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800974c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800975c:	b29b      	uxth	r3, r3
 800975e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	7b1b      	ldrb	r3, [r3, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	f040 8149 	bne.w	80099fc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	785b      	ldrb	r3, [r3, #1]
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 8084 	beq.w	800987c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	61bb      	str	r3, [r7, #24]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800977e:	b29b      	uxth	r3, r3
 8009780:	461a      	mov	r2, r3
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	4413      	add	r3, r2
 8009786:	61bb      	str	r3, [r7, #24]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	011a      	lsls	r2, r3, #4
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	4413      	add	r3, r2
 8009792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	88db      	ldrh	r3, [r3, #6]
 800979c:	085b      	lsrs	r3, r3, #1
 800979e:	b29b      	uxth	r3, r3
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	827b      	strh	r3, [r7, #18]
 80097b6:	8a7b      	ldrh	r3, [r7, #18]
 80097b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d01b      	beq.n	80097f8 <USB_ActivateEndpoint+0x180>
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	881b      	ldrh	r3, [r3, #0]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097d6:	823b      	strh	r3, [r7, #16]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	441a      	add	r2, r3
 80097e2:	8a3b      	ldrh	r3, [r7, #16]
 80097e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	78db      	ldrb	r3, [r3, #3]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d020      	beq.n	8009842 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	b29b      	uxth	r3, r3
 800980e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009816:	81bb      	strh	r3, [r7, #12]
 8009818:	89bb      	ldrh	r3, [r7, #12]
 800981a:	f083 0320 	eor.w	r3, r3, #32
 800981e:	81bb      	strh	r3, [r7, #12]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	441a      	add	r2, r3
 800982a:	89bb      	ldrh	r3, [r7, #12]
 800982c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983c:	b29b      	uxth	r3, r3
 800983e:	8013      	strh	r3, [r2, #0]
 8009840:	e2a6      	b.n	8009d90 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	b29b      	uxth	r3, r3
 8009850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009858:	81fb      	strh	r3, [r7, #14]
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	441a      	add	r2, r3
 8009864:	89fb      	ldrh	r3, [r7, #14]
 8009866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800986a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800986e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009876:	b29b      	uxth	r3, r3
 8009878:	8013      	strh	r3, [r2, #0]
 800987a:	e289      	b.n	8009d90 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	633b      	str	r3, [r7, #48]	; 0x30
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009886:	b29b      	uxth	r3, r3
 8009888:	461a      	mov	r2, r3
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	4413      	add	r3, r2
 800988e:	633b      	str	r3, [r7, #48]	; 0x30
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	011a      	lsls	r2, r3, #4
 8009896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009898:	4413      	add	r3, r2
 800989a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800989e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	88db      	ldrh	r3, [r3, #6]
 80098a4:	085b      	lsrs	r3, r3, #1
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	005b      	lsls	r3, r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ae:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	461a      	mov	r2, r3
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	4413      	add	r3, r2
 80098c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	011a      	lsls	r2, r3, #4
 80098ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098cc:	4413      	add	r3, r2
 80098ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098d2:	627b      	str	r3, [r7, #36]	; 0x24
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d112      	bne.n	8009902 <USB_ActivateEndpoint+0x28a>
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ea:	801a      	strh	r2, [r3, #0]
 80098ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fe:	801a      	strh	r2, [r3, #0]
 8009900:	e02f      	b.n	8009962 <USB_ActivateEndpoint+0x2ea>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	2b3e      	cmp	r3, #62	; 0x3e
 8009908:	d813      	bhi.n	8009932 <USB_ActivateEndpoint+0x2ba>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	085b      	lsrs	r3, r3, #1
 8009910:	66bb      	str	r3, [r7, #104]	; 0x68
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <USB_ActivateEndpoint+0x2ac>
 800991e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009920:	3301      	adds	r3, #1
 8009922:	66bb      	str	r3, [r7, #104]	; 0x68
 8009924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009926:	b29b      	uxth	r3, r3
 8009928:	029b      	lsls	r3, r3, #10
 800992a:	b29a      	uxth	r2, r3
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	801a      	strh	r2, [r3, #0]
 8009930:	e017      	b.n	8009962 <USB_ActivateEndpoint+0x2ea>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	095b      	lsrs	r3, r3, #5
 8009938:	66bb      	str	r3, [r7, #104]	; 0x68
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	f003 031f 	and.w	r3, r3, #31
 8009942:	2b00      	cmp	r3, #0
 8009944:	d102      	bne.n	800994c <USB_ActivateEndpoint+0x2d4>
 8009946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009948:	3b01      	subs	r3, #1
 800994a:	66bb      	str	r3, [r7, #104]	; 0x68
 800994c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800994e:	b29b      	uxth	r3, r3
 8009950:	029b      	lsls	r3, r3, #10
 8009952:	b29b      	uxth	r3, r3
 8009954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800995c:	b29a      	uxth	r2, r3
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009970:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d01b      	beq.n	80099b2 <USB_ActivateEndpoint+0x33a>
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800998c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009990:	843b      	strh	r3, [r7, #32]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	441a      	add	r2, r3
 800999c:	8c3b      	ldrh	r3, [r7, #32]
 800999e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c8:	83fb      	strh	r3, [r7, #30]
 80099ca:	8bfb      	ldrh	r3, [r7, #30]
 80099cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099d0:	83fb      	strh	r3, [r7, #30]
 80099d2:	8bfb      	ldrh	r3, [r7, #30]
 80099d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099d8:	83fb      	strh	r3, [r7, #30]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	441a      	add	r2, r3
 80099e4:	8bfb      	ldrh	r3, [r7, #30]
 80099e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	8013      	strh	r3, [r2, #0]
 80099fa:	e1c9      	b.n	8009d90 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	78db      	ldrb	r3, [r3, #3]
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d11e      	bne.n	8009a42 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a1a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	441a      	add	r2, r3
 8009a28:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a34:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	8013      	strh	r3, [r2, #0]
 8009a40:	e01d      	b.n	8009a7e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	881b      	ldrh	r3, [r3, #0]
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a58:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	441a      	add	r2, r3
 8009a66:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a8e:	4413      	add	r3, r2
 8009a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	011a      	lsls	r2, r3, #4
 8009a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	891b      	ldrh	r3, [r3, #8]
 8009aa6:	085b      	lsrs	r3, r3, #1
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ab0:	801a      	strh	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	657b      	str	r3, [r7, #84]	; 0x54
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	461a      	mov	r2, r3
 8009ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ac2:	4413      	add	r3, r2
 8009ac4:	657b      	str	r3, [r7, #84]	; 0x54
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	011a      	lsls	r2, r3, #4
 8009acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009ad4:	653b      	str	r3, [r7, #80]	; 0x50
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	895b      	ldrh	r3, [r3, #10]
 8009ada:	085b      	lsrs	r3, r3, #1
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	005b      	lsls	r3, r3, #1
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ae4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	785b      	ldrb	r3, [r3, #1]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f040 8093 	bne.w	8009c16 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d01b      	beq.n	8009b44 <USB_ActivateEndpoint+0x4cc>
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b22:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	441a      	add	r2, r3
 8009b2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4413      	add	r3, r2
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009b52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d01b      	beq.n	8009b94 <USB_ActivateEndpoint+0x51c>
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b72:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	441a      	add	r2, r3
 8009b7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009baa:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009bae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009bb2:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009bb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009bba:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	441a      	add	r2, r3
 8009bc6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4413      	add	r3, r2
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bf2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	441a      	add	r2, r3
 8009bfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	8013      	strh	r3, [r2, #0]
 8009c14:	e0bc      	b.n	8009d90 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	4413      	add	r3, r2
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009c26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d01d      	beq.n	8009c6e <USB_ActivateEndpoint+0x5f6>
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	881b      	ldrh	r3, [r3, #0]
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c48:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	441a      	add	r2, r3
 8009c56:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d01d      	beq.n	8009cc6 <USB_ActivateEndpoint+0x64e>
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	441a      	add	r2, r3
 8009cae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	78db      	ldrb	r3, [r3, #3]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d024      	beq.n	8009d18 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	881b      	ldrh	r3, [r3, #0]
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ce4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009ce8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009cec:	f083 0320 	eor.w	r3, r3, #32
 8009cf0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	441a      	add	r2, r3
 8009cfe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	8013      	strh	r3, [r2, #0]
 8009d16:	e01d      	b.n	8009d54 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	441a      	add	r2, r3
 8009d3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	881b      	ldrh	r3, [r3, #0]
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	441a      	add	r2, r3
 8009d78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009d90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3774      	adds	r7, #116	; 0x74
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b08d      	sub	sp, #52	; 0x34
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	7b1b      	ldrb	r3, [r3, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f040 808e 	bne.w	8009ed0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	785b      	ldrb	r3, [r3, #1]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d044      	beq.n	8009e46 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	81bb      	strh	r3, [r7, #12]
 8009dca:	89bb      	ldrh	r3, [r7, #12]
 8009dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d01b      	beq.n	8009e0c <USB_DeactivateEndpoint+0x6c>
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dea:	817b      	strh	r3, [r7, #10]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	441a      	add	r2, r3
 8009df6:	897b      	ldrh	r3, [r7, #10]
 8009df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	881b      	ldrh	r3, [r3, #0]
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e22:	813b      	strh	r3, [r7, #8]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	441a      	add	r2, r3
 8009e2e:	893b      	ldrh	r3, [r7, #8]
 8009e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	8013      	strh	r3, [r2, #0]
 8009e44:	e192      	b.n	800a16c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	827b      	strh	r3, [r7, #18]
 8009e54:	8a7b      	ldrh	r3, [r7, #18]
 8009e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d01b      	beq.n	8009e96 <USB_DeactivateEndpoint+0xf6>
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e74:	823b      	strh	r3, [r7, #16]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	441a      	add	r2, r3
 8009e80:	8a3b      	ldrh	r3, [r7, #16]
 8009e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eac:	81fb      	strh	r3, [r7, #14]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	441a      	add	r2, r3
 8009eb8:	89fb      	ldrh	r3, [r7, #14]
 8009eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	8013      	strh	r3, [r2, #0]
 8009ece:	e14d      	b.n	800a16c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	785b      	ldrb	r3, [r3, #1]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f040 80a5 	bne.w	800a024 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	843b      	strh	r3, [r7, #32]
 8009ee8:	8c3b      	ldrh	r3, [r7, #32]
 8009eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d01b      	beq.n	8009f2a <USB_DeactivateEndpoint+0x18a>
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	881b      	ldrh	r3, [r3, #0]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f08:	83fb      	strh	r3, [r7, #30]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	441a      	add	r2, r3
 8009f14:	8bfb      	ldrh	r3, [r7, #30]
 8009f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	881b      	ldrh	r3, [r3, #0]
 8009f36:	83bb      	strh	r3, [r7, #28]
 8009f38:	8bbb      	ldrh	r3, [r7, #28]
 8009f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d01b      	beq.n	8009f7a <USB_DeactivateEndpoint+0x1da>
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f58:	837b      	strh	r3, [r7, #26]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	441a      	add	r2, r3
 8009f64:	8b7b      	ldrh	r3, [r7, #26]
 8009f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f90:	833b      	strh	r3, [r7, #24]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	441a      	add	r2, r3
 8009f9c:	8b3b      	ldrh	r3, [r7, #24]
 8009f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009faa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fc8:	82fb      	strh	r3, [r7, #22]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	441a      	add	r2, r3
 8009fd4:	8afb      	ldrh	r3, [r7, #22]
 8009fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	881b      	ldrh	r3, [r3, #0]
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a000:	82bb      	strh	r3, [r7, #20]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	441a      	add	r2, r3
 800a00c:	8abb      	ldrh	r3, [r7, #20]
 800a00e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a01a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a01e:	b29b      	uxth	r3, r3
 800a020:	8013      	strh	r3, [r2, #0]
 800a022:	e0a3      	b.n	800a16c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a032:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d01b      	beq.n	800a074 <USB_DeactivateEndpoint+0x2d4>
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	b29b      	uxth	r3, r3
 800a04a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a04e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a052:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	441a      	add	r2, r3
 800a05e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a068:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a06c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a070:	b29b      	uxth	r3, r3
 800a072:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4413      	add	r3, r2
 800a07e:	881b      	ldrh	r3, [r3, #0]
 800a080:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a082:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d01b      	beq.n	800a0c4 <USB_DeactivateEndpoint+0x324>
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0a2:	853b      	strh	r3, [r7, #40]	; 0x28
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	441a      	add	r2, r3
 800a0ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0da:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	441a      	add	r2, r3
 800a0e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a10e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a112:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	441a      	add	r2, r3
 800a11e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a130:	b29b      	uxth	r3, r3
 800a132:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4413      	add	r3, r2
 800a13e:	881b      	ldrh	r3, [r3, #0]
 800a140:	b29b      	uxth	r3, r3
 800a142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a14a:	847b      	strh	r3, [r7, #34]	; 0x22
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	441a      	add	r2, r3
 800a156:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a15c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a168:	b29b      	uxth	r3, r3
 800a16a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3734      	adds	r7, #52	; 0x34
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b0c2      	sub	sp, #264	; 0x108
 800a17e:	af00      	add	r7, sp, #0
 800a180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a188:	6018      	str	r0, [r3, #0]
 800a18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a192:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	785b      	ldrb	r3, [r3, #1]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	f040 867b 	bne.w	800ae9c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a1a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	699a      	ldr	r2, [r3, #24]
 800a1b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d908      	bls.n	800a1d4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a1d2:	e007      	b.n	800a1e4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	7b1b      	ldrb	r3, [r3, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d13a      	bne.n	800a26a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	6959      	ldr	r1, [r3, #20]
 800a200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	88da      	ldrh	r2, [r3, #6]
 800a20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a210:	b29b      	uxth	r3, r3
 800a212:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a216:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a21a:	6800      	ldr	r0, [r0, #0]
 800a21c:	f001 fc11 	bl	800ba42 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	613b      	str	r3, [r7, #16]
 800a22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	461a      	mov	r2, r3
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	4413      	add	r3, r2
 800a242:	613b      	str	r3, [r7, #16]
 800a244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	011a      	lsls	r2, r3, #4
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	4413      	add	r3, r2
 800a256:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a260:	b29a      	uxth	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	801a      	strh	r2, [r3, #0]
 800a266:	f000 bde3 	b.w	800ae30 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a26a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a26e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	78db      	ldrb	r3, [r3, #3]
 800a276:	2b02      	cmp	r3, #2
 800a278:	f040 843a 	bne.w	800aaf0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a27c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6a1a      	ldr	r2, [r3, #32]
 800a288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	429a      	cmp	r2, r3
 800a296:	f240 83b7 	bls.w	800aa08 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	4413      	add	r3, r2
 800a2b4:	881b      	ldrh	r3, [r3, #0]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	441a      	add	r2, r3
 800a2de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a2ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a2f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6a1a      	ldr	r2, [r3, #32]
 800a302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a306:	1ad2      	subs	r2, r2, r3
 800a308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	b29b      	uxth	r3, r3
 800a332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 81b3 	beq.w	800a6a2 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a33c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a340:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	633b      	str	r3, [r7, #48]	; 0x30
 800a348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a34c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d16d      	bne.n	800a434 <USB_EPStartXfer+0x2ba>
 800a358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a35c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	62bb      	str	r3, [r7, #40]	; 0x28
 800a364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a372:	b29b      	uxth	r3, r3
 800a374:	461a      	mov	r2, r3
 800a376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a378:	4413      	add	r3, r2
 800a37a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	011a      	lsls	r2, r3, #4
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	4413      	add	r3, r2
 800a38e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
 800a394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d112      	bne.n	800a3c2 <USB_EPStartXfer+0x248>
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	801a      	strh	r2, [r3, #0]
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ae:	881b      	ldrh	r3, [r3, #0]
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	801a      	strh	r2, [r3, #0]
 800a3c0:	e05d      	b.n	800a47e <USB_EPStartXfer+0x304>
 800a3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3c6:	2b3e      	cmp	r3, #62	; 0x3e
 800a3c8:	d817      	bhi.n	800a3fa <USB_EPStartXfer+0x280>
 800a3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ce:	085b      	lsrs	r3, r3, #1
 800a3d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3d8:	f003 0301 	and.w	r3, r3, #1
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d004      	beq.n	800a3ea <USB_EPStartXfer+0x270>
 800a3e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	029b      	lsls	r3, r3, #10
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	801a      	strh	r2, [r3, #0]
 800a3f8:	e041      	b.n	800a47e <USB_EPStartXfer+0x304>
 800a3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3fe:	095b      	lsrs	r3, r3, #5
 800a400:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a408:	f003 031f 	and.w	r3, r3, #31
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d104      	bne.n	800a41a <USB_EPStartXfer+0x2a0>
 800a410:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a414:	3b01      	subs	r3, #1
 800a416:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a41a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a41e:	b29b      	uxth	r3, r3
 800a420:	029b      	lsls	r3, r3, #10
 800a422:	b29b      	uxth	r3, r3
 800a424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	801a      	strh	r2, [r3, #0]
 800a432:	e024      	b.n	800a47e <USB_EPStartXfer+0x304>
 800a434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	785b      	ldrb	r3, [r3, #1]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d11c      	bne.n	800a47e <USB_EPStartXfer+0x304>
 800a444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a452:	b29b      	uxth	r3, r3
 800a454:	461a      	mov	r2, r3
 800a456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a458:	4413      	add	r3, r2
 800a45a:	633b      	str	r3, [r7, #48]	; 0x30
 800a45c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	011a      	lsls	r2, r3, #4
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	4413      	add	r3, r2
 800a46e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a472:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a478:	b29a      	uxth	r2, r3
 800a47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	895b      	ldrh	r3, [r3, #10]
 800a48a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6959      	ldr	r1, [r3, #20]
 800a49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a4a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a4a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a4ac:	6800      	ldr	r0, [r0, #0]
 800a4ae:	f001 fac8 	bl	800ba42 <USB_WritePMA>
            ep->xfer_buff += len;
 800a4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	695a      	ldr	r2, [r3, #20]
 800a4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c2:	441a      	add	r2, r3
 800a4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6a1a      	ldr	r2, [r3, #32]
 800a4dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d90f      	bls.n	800a50c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800a4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6a1a      	ldr	r2, [r3, #32]
 800a4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fc:	1ad2      	subs	r2, r2, r3
 800a4fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	621a      	str	r2, [r3, #32]
 800a50a:	e00e      	b.n	800a52a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800a50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	6a1b      	ldr	r3, [r3, #32]
 800a518:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2200      	movs	r2, #0
 800a528:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	785b      	ldrb	r3, [r3, #1]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d16d      	bne.n	800a616 <USB_EPStartXfer+0x49c>
 800a53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a53e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	61bb      	str	r3, [r7, #24]
 800a546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a554:	b29b      	uxth	r3, r3
 800a556:	461a      	mov	r2, r3
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	4413      	add	r3, r2
 800a55c:	61bb      	str	r3, [r7, #24]
 800a55e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	011a      	lsls	r2, r3, #4
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	4413      	add	r3, r2
 800a570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a574:	617b      	str	r3, [r7, #20]
 800a576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d112      	bne.n	800a5a4 <USB_EPStartXfer+0x42a>
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	b29b      	uxth	r3, r3
 800a584:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a588:	b29a      	uxth	r2, r3
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	801a      	strh	r2, [r3, #0]
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	881b      	ldrh	r3, [r3, #0]
 800a592:	b29b      	uxth	r3, r3
 800a594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	801a      	strh	r2, [r3, #0]
 800a5a2:	e063      	b.n	800a66c <USB_EPStartXfer+0x4f2>
 800a5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a8:	2b3e      	cmp	r3, #62	; 0x3e
 800a5aa:	d817      	bhi.n	800a5dc <USB_EPStartXfer+0x462>
 800a5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b0:	085b      	lsrs	r3, r3, #1
 800a5b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d004      	beq.n	800a5cc <USB_EPStartXfer+0x452>
 800a5c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	029b      	lsls	r3, r3, #10
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	801a      	strh	r2, [r3, #0]
 800a5da:	e047      	b.n	800a66c <USB_EPStartXfer+0x4f2>
 800a5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5e0:	095b      	lsrs	r3, r3, #5
 800a5e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ea:	f003 031f 	and.w	r3, r3, #31
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d104      	bne.n	800a5fc <USB_EPStartXfer+0x482>
 800a5f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a600:	b29b      	uxth	r3, r3
 800a602:	029b      	lsls	r3, r3, #10
 800a604:	b29b      	uxth	r3, r3
 800a606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a60a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a60e:	b29a      	uxth	r2, r3
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	801a      	strh	r2, [r3, #0]
 800a614:	e02a      	b.n	800a66c <USB_EPStartXfer+0x4f2>
 800a616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a61a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	785b      	ldrb	r3, [r3, #1]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d122      	bne.n	800a66c <USB_EPStartXfer+0x4f2>
 800a626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a62a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	623b      	str	r3, [r7, #32]
 800a632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a640:	b29b      	uxth	r3, r3
 800a642:	461a      	mov	r2, r3
 800a644:	6a3b      	ldr	r3, [r7, #32]
 800a646:	4413      	add	r3, r2
 800a648:	623b      	str	r3, [r7, #32]
 800a64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	011a      	lsls	r2, r3, #4
 800a658:	6a3b      	ldr	r3, [r7, #32]
 800a65a:	4413      	add	r3, r2
 800a65c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a660:	61fb      	str	r3, [r7, #28]
 800a662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a666:	b29a      	uxth	r2, r3
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	891b      	ldrh	r3, [r3, #8]
 800a678:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6959      	ldr	r1, [r3, #20]
 800a688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a692:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a696:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a69a:	6800      	ldr	r0, [r0, #0]
 800a69c:	f001 f9d1 	bl	800ba42 <USB_WritePMA>
 800a6a0:	e3c6      	b.n	800ae30 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	785b      	ldrb	r3, [r3, #1]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d16d      	bne.n	800a78e <USB_EPStartXfer+0x614>
 800a6b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6d2:	4413      	add	r3, r2
 800a6d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	011a      	lsls	r2, r3, #4
 800a6e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a6ec:	647b      	str	r3, [r7, #68]	; 0x44
 800a6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d112      	bne.n	800a71c <USB_EPStartXfer+0x5a2>
 800a6f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a700:	b29a      	uxth	r2, r3
 800a702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a704:	801a      	strh	r2, [r3, #0]
 800a706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a708:	881b      	ldrh	r3, [r3, #0]
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a714:	b29a      	uxth	r2, r3
 800a716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a718:	801a      	strh	r2, [r3, #0]
 800a71a:	e063      	b.n	800a7e4 <USB_EPStartXfer+0x66a>
 800a71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a720:	2b3e      	cmp	r3, #62	; 0x3e
 800a722:	d817      	bhi.n	800a754 <USB_EPStartXfer+0x5da>
 800a724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a728:	085b      	lsrs	r3, r3, #1
 800a72a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a732:	f003 0301 	and.w	r3, r3, #1
 800a736:	2b00      	cmp	r3, #0
 800a738:	d004      	beq.n	800a744 <USB_EPStartXfer+0x5ca>
 800a73a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a73e:	3301      	adds	r3, #1
 800a740:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a744:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a748:	b29b      	uxth	r3, r3
 800a74a:	029b      	lsls	r3, r3, #10
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a750:	801a      	strh	r2, [r3, #0]
 800a752:	e047      	b.n	800a7e4 <USB_EPStartXfer+0x66a>
 800a754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a758:	095b      	lsrs	r3, r3, #5
 800a75a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a762:	f003 031f 	and.w	r3, r3, #31
 800a766:	2b00      	cmp	r3, #0
 800a768:	d104      	bne.n	800a774 <USB_EPStartXfer+0x5fa>
 800a76a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a76e:	3b01      	subs	r3, #1
 800a770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a774:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a778:	b29b      	uxth	r3, r3
 800a77a:	029b      	lsls	r3, r3, #10
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a786:	b29a      	uxth	r2, r3
 800a788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a78a:	801a      	strh	r2, [r3, #0]
 800a78c:	e02a      	b.n	800a7e4 <USB_EPStartXfer+0x66a>
 800a78e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	785b      	ldrb	r3, [r3, #1]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d122      	bne.n	800a7e4 <USB_EPStartXfer+0x66a>
 800a79e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	653b      	str	r3, [r7, #80]	; 0x50
 800a7aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7be:	4413      	add	r3, r2
 800a7c0:	653b      	str	r3, [r7, #80]	; 0x50
 800a7c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	011a      	lsls	r2, r3, #4
 800a7d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a7d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a7e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	891b      	ldrh	r3, [r3, #8]
 800a7f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	6959      	ldr	r1, [r3, #20]
 800a800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a804:	b29b      	uxth	r3, r3
 800a806:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a80a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a80e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a812:	6800      	ldr	r0, [r0, #0]
 800a814:	f001 f915 	bl	800ba42 <USB_WritePMA>
            ep->xfer_buff += len;
 800a818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a81c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	695a      	ldr	r2, [r3, #20]
 800a824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a828:	441a      	add	r2, r3
 800a82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a82e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	6a1a      	ldr	r2, [r3, #32]
 800a842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d90f      	bls.n	800a872 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800a852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6a1a      	ldr	r2, [r3, #32]
 800a85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a862:	1ad2      	subs	r2, r2, r3
 800a864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	621a      	str	r2, [r3, #32]
 800a870:	e00e      	b.n	800a890 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800a872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2200      	movs	r2, #0
 800a88e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	643b      	str	r3, [r7, #64]	; 0x40
 800a89c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	785b      	ldrb	r3, [r3, #1]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d16d      	bne.n	800a988 <USB_EPStartXfer+0x80e>
 800a8ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	4413      	add	r3, r2
 800a8ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	011a      	lsls	r2, r3, #4
 800a8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a8e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d112      	bne.n	800a916 <USB_EPStartXfer+0x79c>
 800a8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fe:	801a      	strh	r2, [r3, #0]
 800a900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a902:	881b      	ldrh	r3, [r3, #0]
 800a904:	b29b      	uxth	r3, r3
 800a906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a90a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a90e:	b29a      	uxth	r2, r3
 800a910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a912:	801a      	strh	r2, [r3, #0]
 800a914:	e05d      	b.n	800a9d2 <USB_EPStartXfer+0x858>
 800a916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91a:	2b3e      	cmp	r3, #62	; 0x3e
 800a91c:	d817      	bhi.n	800a94e <USB_EPStartXfer+0x7d4>
 800a91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a922:	085b      	lsrs	r3, r3, #1
 800a924:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	2b00      	cmp	r3, #0
 800a932:	d004      	beq.n	800a93e <USB_EPStartXfer+0x7c4>
 800a934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a938:	3301      	adds	r3, #1
 800a93a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a93e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a942:	b29b      	uxth	r3, r3
 800a944:	029b      	lsls	r3, r3, #10
 800a946:	b29a      	uxth	r2, r3
 800a948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94a:	801a      	strh	r2, [r3, #0]
 800a94c:	e041      	b.n	800a9d2 <USB_EPStartXfer+0x858>
 800a94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a952:	095b      	lsrs	r3, r3, #5
 800a954:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95c:	f003 031f 	and.w	r3, r3, #31
 800a960:	2b00      	cmp	r3, #0
 800a962:	d104      	bne.n	800a96e <USB_EPStartXfer+0x7f4>
 800a964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a968:	3b01      	subs	r3, #1
 800a96a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a96e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a972:	b29b      	uxth	r3, r3
 800a974:	029b      	lsls	r3, r3, #10
 800a976:	b29b      	uxth	r3, r3
 800a978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a97c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a980:	b29a      	uxth	r2, r3
 800a982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a984:	801a      	strh	r2, [r3, #0]
 800a986:	e024      	b.n	800a9d2 <USB_EPStartXfer+0x858>
 800a988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a98c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	785b      	ldrb	r3, [r3, #1]
 800a994:	2b01      	cmp	r3, #1
 800a996:	d11c      	bne.n	800a9d2 <USB_EPStartXfer+0x858>
 800a998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a99c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9ac:	4413      	add	r3, r2
 800a9ae:	643b      	str	r3, [r7, #64]	; 0x40
 800a9b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	011a      	lsls	r2, r3, #4
 800a9be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9c0:	4413      	add	r3, r2
 800a9c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a9d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	895b      	ldrh	r3, [r3, #10]
 800a9de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6959      	ldr	r1, [r3, #20]
 800a9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a9f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a9fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aa00:	6800      	ldr	r0, [r0, #0]
 800aa02:	f001 f81e 	bl	800ba42 <USB_WritePMA>
 800aa06:	e213      	b.n	800ae30 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aa08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aa18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aa3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa3e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aa42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	441a      	add	r2, r3
 800aa5c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aa60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	461a      	mov	r2, r3
 800aa92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa94:	4413      	add	r3, r2
 800aa96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	011a      	lsls	r2, r3, #4
 800aaa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaa8:	4413      	add	r3, r2
 800aaaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aaae:	65bb      	str	r3, [r7, #88]	; 0x58
 800aab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aab8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aaba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aabe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	891b      	ldrh	r3, [r3, #8]
 800aac6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aaca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6959      	ldr	r1, [r3, #20]
 800aad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aada:	b29b      	uxth	r3, r3
 800aadc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aae0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aae4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aae8:	6800      	ldr	r0, [r0, #0]
 800aaea:	f000 ffaa 	bl	800ba42 <USB_WritePMA>
 800aaee:	e19f      	b.n	800ae30 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aaf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	6a1a      	ldr	r2, [r3, #32]
 800aafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab00:	1ad2      	subs	r2, r2, r3
 800ab02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f000 80bc 	beq.w	800acae <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	673b      	str	r3, [r7, #112]	; 0x70
 800ab42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	785b      	ldrb	r3, [r3, #1]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d16d      	bne.n	800ac2e <USB_EPStartXfer+0xab4>
 800ab52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	461a      	mov	r2, r3
 800ab70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab72:	4413      	add	r3, r2
 800ab74:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	011a      	lsls	r2, r3, #4
 800ab84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab86:	4413      	add	r3, r2
 800ab88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab8c:	667b      	str	r3, [r7, #100]	; 0x64
 800ab8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d112      	bne.n	800abbc <USB_EPStartXfer+0xa42>
 800ab96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aba4:	801a      	strh	r2, [r3, #0]
 800aba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	b29b      	uxth	r3, r3
 800abac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abb8:	801a      	strh	r2, [r3, #0]
 800abba:	e05d      	b.n	800ac78 <USB_EPStartXfer+0xafe>
 800abbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc0:	2b3e      	cmp	r3, #62	; 0x3e
 800abc2:	d817      	bhi.n	800abf4 <USB_EPStartXfer+0xa7a>
 800abc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc8:	085b      	lsrs	r3, r3, #1
 800abca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd2:	f003 0301 	and.w	r3, r3, #1
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d004      	beq.n	800abe4 <USB_EPStartXfer+0xa6a>
 800abda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abde:	3301      	adds	r3, #1
 800abe0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abe4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abe8:	b29b      	uxth	r3, r3
 800abea:	029b      	lsls	r3, r3, #10
 800abec:	b29a      	uxth	r2, r3
 800abee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abf0:	801a      	strh	r2, [r3, #0]
 800abf2:	e041      	b.n	800ac78 <USB_EPStartXfer+0xafe>
 800abf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf8:	095b      	lsrs	r3, r3, #5
 800abfa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac02:	f003 031f 	and.w	r3, r3, #31
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d104      	bne.n	800ac14 <USB_EPStartXfer+0xa9a>
 800ac0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	029b      	lsls	r3, r3, #10
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac26:	b29a      	uxth	r2, r3
 800ac28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac2a:	801a      	strh	r2, [r3, #0]
 800ac2c:	e024      	b.n	800ac78 <USB_EPStartXfer+0xafe>
 800ac2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	785b      	ldrb	r3, [r3, #1]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d11c      	bne.n	800ac78 <USB_EPStartXfer+0xafe>
 800ac3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	461a      	mov	r2, r3
 800ac50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac52:	4413      	add	r3, r2
 800ac54:	673b      	str	r3, [r7, #112]	; 0x70
 800ac56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	011a      	lsls	r2, r3, #4
 800ac64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac66:	4413      	add	r3, r2
 800ac68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ac6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ac78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	895b      	ldrh	r3, [r3, #10]
 800ac84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	6959      	ldr	r1, [r3, #20]
 800ac94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aca2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aca6:	6800      	ldr	r0, [r0, #0]
 800aca8:	f000 fecb 	bl	800ba42 <USB_WritePMA>
 800acac:	e0c0      	b.n	800ae30 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800acae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	785b      	ldrb	r3, [r3, #1]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d16d      	bne.n	800ad9a <USB_EPStartXfer+0xc20>
 800acbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800acca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acd8:	b29b      	uxth	r3, r3
 800acda:	461a      	mov	r2, r3
 800acdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acde:	4413      	add	r3, r2
 800ace0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ace2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	011a      	lsls	r2, r3, #4
 800acf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acf2:	4413      	add	r3, r2
 800acf4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800acf8:	67bb      	str	r3, [r7, #120]	; 0x78
 800acfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d112      	bne.n	800ad28 <USB_EPStartXfer+0xbae>
 800ad02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad04:	881b      	ldrh	r3, [r3, #0]
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad10:	801a      	strh	r2, [r3, #0]
 800ad12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad14:	881b      	ldrh	r3, [r3, #0]
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad24:	801a      	strh	r2, [r3, #0]
 800ad26:	e069      	b.n	800adfc <USB_EPStartXfer+0xc82>
 800ad28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad2c:	2b3e      	cmp	r3, #62	; 0x3e
 800ad2e:	d817      	bhi.n	800ad60 <USB_EPStartXfer+0xbe6>
 800ad30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad34:	085b      	lsrs	r3, r3, #1
 800ad36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d004      	beq.n	800ad50 <USB_EPStartXfer+0xbd6>
 800ad46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	029b      	lsls	r3, r3, #10
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad5c:	801a      	strh	r2, [r3, #0]
 800ad5e:	e04d      	b.n	800adfc <USB_EPStartXfer+0xc82>
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad64:	095b      	lsrs	r3, r3, #5
 800ad66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad6e:	f003 031f 	and.w	r3, r3, #31
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d104      	bne.n	800ad80 <USB_EPStartXfer+0xc06>
 800ad76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	029b      	lsls	r3, r3, #10
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad96:	801a      	strh	r2, [r3, #0]
 800ad98:	e030      	b.n	800adfc <USB_EPStartXfer+0xc82>
 800ad9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	785b      	ldrb	r3, [r3, #1]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d128      	bne.n	800adfc <USB_EPStartXfer+0xc82>
 800adaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800adb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	461a      	mov	r2, r3
 800adca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adce:	4413      	add	r3, r2
 800add0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800add4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	011a      	lsls	r2, r3, #4
 800ade2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ade6:	4413      	add	r3, r2
 800ade8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800adec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800adf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf4:	b29a      	uxth	r2, r3
 800adf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800adfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	891b      	ldrh	r3, [r3, #8]
 800ae08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	6959      	ldr	r1, [r3, #20]
 800ae18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ae22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ae26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ae2a:	6800      	ldr	r0, [r0, #0]
 800ae2c:	f000 fe09 	bl	800ba42 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ae30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae56:	817b      	strh	r3, [r7, #10]
 800ae58:	897b      	ldrh	r3, [r7, #10]
 800ae5a:	f083 0310 	eor.w	r3, r3, #16
 800ae5e:	817b      	strh	r3, [r7, #10]
 800ae60:	897b      	ldrh	r3, [r7, #10]
 800ae62:	f083 0320 	eor.w	r3, r3, #32
 800ae66:	817b      	strh	r3, [r7, #10]
 800ae68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	441a      	add	r2, r3
 800ae82:	897b      	ldrh	r3, [r7, #10]
 800ae84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	8013      	strh	r3, [r2, #0]
 800ae98:	f000 bc9f 	b.w	800b7da <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ae9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	7b1b      	ldrb	r3, [r3, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f040 80ae 	bne.w	800b00a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800aeae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	699a      	ldr	r2, [r3, #24]
 800aeba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d917      	bls.n	800aefa <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800aeca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800aeda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	699a      	ldr	r2, [r3, #24]
 800aee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeea:	1ad2      	subs	r2, r2, r3
 800aeec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	619a      	str	r2, [r3, #24]
 800aef8:	e00e      	b.n	800af18 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800aefa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aefe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	699b      	ldr	r3, [r3, #24]
 800af06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800af0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2200      	movs	r2, #0
 800af16:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800af18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af34:	b29b      	uxth	r3, r3
 800af36:	461a      	mov	r2, r3
 800af38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af3c:	4413      	add	r3, r2
 800af3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	011a      	lsls	r2, r3, #4
 800af50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af54:	4413      	add	r3, r2
 800af56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800af5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af62:	2b00      	cmp	r3, #0
 800af64:	d116      	bne.n	800af94 <USB_EPStartXfer+0xe1a>
 800af66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af6a:	881b      	ldrh	r3, [r3, #0]
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af72:	b29a      	uxth	r2, r3
 800af74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af78:	801a      	strh	r2, [r3, #0]
 800af7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	b29b      	uxth	r3, r3
 800af82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af90:	801a      	strh	r2, [r3, #0]
 800af92:	e3e8      	b.n	800b766 <USB_EPStartXfer+0x15ec>
 800af94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af98:	2b3e      	cmp	r3, #62	; 0x3e
 800af9a:	d818      	bhi.n	800afce <USB_EPStartXfer+0xe54>
 800af9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa0:	085b      	lsrs	r3, r3, #1
 800afa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d004      	beq.n	800afbc <USB_EPStartXfer+0xe42>
 800afb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800afb6:	3301      	adds	r3, #1
 800afb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	029b      	lsls	r3, r3, #10
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afca:	801a      	strh	r2, [r3, #0]
 800afcc:	e3cb      	b.n	800b766 <USB_EPStartXfer+0x15ec>
 800afce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd2:	095b      	lsrs	r3, r3, #5
 800afd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afdc:	f003 031f 	and.w	r3, r3, #31
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d104      	bne.n	800afee <USB_EPStartXfer+0xe74>
 800afe4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800afe8:	3b01      	subs	r3, #1
 800afea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	029b      	lsls	r3, r3, #10
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800affc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b000:	b29a      	uxth	r2, r3
 800b002:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b006:	801a      	strh	r2, [r3, #0]
 800b008:	e3ad      	b.n	800b766 <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b00e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	78db      	ldrb	r3, [r3, #3]
 800b016:	2b02      	cmp	r3, #2
 800b018:	f040 8200 	bne.w	800b41c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	785b      	ldrb	r3, [r3, #1]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f040 8091 	bne.w	800b150 <USB_EPStartXfer+0xfd6>
 800b02e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	461a      	mov	r2, r3
 800b04e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b052:	4413      	add	r3, r2
 800b054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	011a      	lsls	r2, r3, #4
 800b066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b06a:	4413      	add	r3, r2
 800b06c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b070:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d116      	bne.n	800b0b2 <USB_EPStartXfer+0xf38>
 800b084:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b090:	b29a      	uxth	r2, r3
 800b092:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b096:	801a      	strh	r2, [r3, #0]
 800b098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0ae:	801a      	strh	r2, [r3, #0]
 800b0b0:	e083      	b.n	800b1ba <USB_EPStartXfer+0x1040>
 800b0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	2b3e      	cmp	r3, #62	; 0x3e
 800b0c0:	d820      	bhi.n	800b104 <USB_EPStartXfer+0xf8a>
 800b0c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	085b      	lsrs	r3, r3, #1
 800b0d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b0d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	f003 0301 	and.w	r3, r3, #1
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d004      	beq.n	800b0f2 <USB_EPStartXfer+0xf78>
 800b0e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b0f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	029b      	lsls	r3, r3, #10
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b100:	801a      	strh	r2, [r3, #0]
 800b102:	e05a      	b.n	800b1ba <USB_EPStartXfer+0x1040>
 800b104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	095b      	lsrs	r3, r3, #5
 800b112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b11a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	f003 031f 	and.w	r3, r3, #31
 800b126:	2b00      	cmp	r3, #0
 800b128:	d104      	bne.n	800b134 <USB_EPStartXfer+0xfba>
 800b12a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b12e:	3b01      	subs	r3, #1
 800b130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b138:	b29b      	uxth	r3, r3
 800b13a:	029b      	lsls	r3, r3, #10
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b146:	b29a      	uxth	r2, r3
 800b148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b14c:	801a      	strh	r2, [r3, #0]
 800b14e:	e034      	b.n	800b1ba <USB_EPStartXfer+0x1040>
 800b150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	785b      	ldrb	r3, [r3, #1]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d12c      	bne.n	800b1ba <USB_EPStartXfer+0x1040>
 800b160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	461a      	mov	r2, r3
 800b180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b184:	4413      	add	r3, r2
 800b186:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	011a      	lsls	r2, r3, #4
 800b198:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b19c:	4413      	add	r3, r2
 800b19e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b1a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b1b8:	801a      	strh	r2, [r3, #0]
 800b1ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	785b      	ldrb	r3, [r3, #1]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f040 8091 	bne.w	800b2fc <USB_EPStartXfer+0x1182>
 800b1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1fe:	4413      	add	r3, r2
 800b200:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	011a      	lsls	r2, r3, #4
 800b212:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b216:	4413      	add	r3, r2
 800b218:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b21c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d116      	bne.n	800b25e <USB_EPStartXfer+0x10e4>
 800b230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b234:	881b      	ldrh	r3, [r3, #0]
 800b236:	b29b      	uxth	r3, r3
 800b238:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b242:	801a      	strh	r2, [r3, #0]
 800b244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b248:	881b      	ldrh	r3, [r3, #0]
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b254:	b29a      	uxth	r2, r3
 800b256:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b25a:	801a      	strh	r2, [r3, #0]
 800b25c:	e07c      	b.n	800b358 <USB_EPStartXfer+0x11de>
 800b25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	2b3e      	cmp	r3, #62	; 0x3e
 800b26c:	d820      	bhi.n	800b2b0 <USB_EPStartXfer+0x1136>
 800b26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	085b      	lsrs	r3, r3, #1
 800b27c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	f003 0301 	and.w	r3, r3, #1
 800b290:	2b00      	cmp	r3, #0
 800b292:	d004      	beq.n	800b29e <USB_EPStartXfer+0x1124>
 800b294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b298:	3301      	adds	r3, #1
 800b29a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b29e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	029b      	lsls	r3, r3, #10
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2ac:	801a      	strh	r2, [r3, #0]
 800b2ae:	e053      	b.n	800b358 <USB_EPStartXfer+0x11de>
 800b2b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	095b      	lsrs	r3, r3, #5
 800b2be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	f003 031f 	and.w	r3, r3, #31
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d104      	bne.n	800b2e0 <USB_EPStartXfer+0x1166>
 800b2d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	029b      	lsls	r3, r3, #10
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2f8:	801a      	strh	r2, [r3, #0]
 800b2fa:	e02d      	b.n	800b358 <USB_EPStartXfer+0x11de>
 800b2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	785b      	ldrb	r3, [r3, #1]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d125      	bne.n	800b358 <USB_EPStartXfer+0x11de>
 800b30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	461a      	mov	r2, r3
 800b31e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b322:	4413      	add	r3, r2
 800b324:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b32c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	011a      	lsls	r2, r3, #4
 800b336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b33a:	4413      	add	r3, r2
 800b33c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b340:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	b29a      	uxth	r2, r3
 800b352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b356:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b35c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	69db      	ldr	r3, [r3, #28]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 81fe 	beq.w	800b766 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b36a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b36e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	881b      	ldrh	r3, [r3, #0]
 800b386:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b38a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b38e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d005      	beq.n	800b3a2 <USB_EPStartXfer+0x1228>
 800b396:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b39a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10d      	bne.n	800b3be <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b3a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b3a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f040 81db 	bne.w	800b766 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b3b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f040 81d4 	bne.w	800b766 <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800b3be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	881b      	ldrh	r3, [r3, #0]
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3e4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b3e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	441a      	add	r2, r3
 800b402:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b40a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b40e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b412:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b416:	b29b      	uxth	r3, r3
 800b418:	8013      	strh	r3, [r2, #0]
 800b41a:	e1a4      	b.n	800b766 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	78db      	ldrb	r3, [r3, #3]
 800b428:	2b01      	cmp	r3, #1
 800b42a:	f040 819a 	bne.w	800b762 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	699a      	ldr	r2, [r3, #24]
 800b43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b43e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	429a      	cmp	r2, r3
 800b448:	d917      	bls.n	800b47a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800b44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	699a      	ldr	r2, [r3, #24]
 800b466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b46a:	1ad2      	subs	r2, r2, r3
 800b46c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	619a      	str	r2, [r3, #24]
 800b478:	e00e      	b.n	800b498 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800b47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2200      	movs	r2, #0
 800b496:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b49c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	785b      	ldrb	r3, [r3, #1]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d178      	bne.n	800b59a <USB_EPStartXfer+0x1420>
 800b4a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b4b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	011a      	lsls	r2, r3, #4
 800b4e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b4e4:	4413      	add	r3, r2
 800b4e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b4ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d116      	bne.n	800b524 <USB_EPStartXfer+0x13aa>
 800b4f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4fa:	881b      	ldrh	r3, [r3, #0]
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b502:	b29a      	uxth	r2, r3
 800b504:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b508:	801a      	strh	r2, [r3, #0]
 800b50a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b50e:	881b      	ldrh	r3, [r3, #0]
 800b510:	b29b      	uxth	r3, r3
 800b512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b520:	801a      	strh	r2, [r3, #0]
 800b522:	e06b      	b.n	800b5fc <USB_EPStartXfer+0x1482>
 800b524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b528:	2b3e      	cmp	r3, #62	; 0x3e
 800b52a:	d818      	bhi.n	800b55e <USB_EPStartXfer+0x13e4>
 800b52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b530:	085b      	lsrs	r3, r3, #1
 800b532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53a:	f003 0301 	and.w	r3, r3, #1
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d004      	beq.n	800b54c <USB_EPStartXfer+0x13d2>
 800b542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b546:	3301      	adds	r3, #1
 800b548:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b54c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b550:	b29b      	uxth	r3, r3
 800b552:	029b      	lsls	r3, r3, #10
 800b554:	b29a      	uxth	r2, r3
 800b556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b55a:	801a      	strh	r2, [r3, #0]
 800b55c:	e04e      	b.n	800b5fc <USB_EPStartXfer+0x1482>
 800b55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b562:	095b      	lsrs	r3, r3, #5
 800b564:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56c:	f003 031f 	and.w	r3, r3, #31
 800b570:	2b00      	cmp	r3, #0
 800b572:	d104      	bne.n	800b57e <USB_EPStartXfer+0x1404>
 800b574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b578:	3b01      	subs	r3, #1
 800b57a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b57e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b582:	b29b      	uxth	r3, r3
 800b584:	029b      	lsls	r3, r3, #10
 800b586:	b29b      	uxth	r3, r3
 800b588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b58c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b590:	b29a      	uxth	r2, r3
 800b592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b596:	801a      	strh	r2, [r3, #0]
 800b598:	e030      	b.n	800b5fc <USB_EPStartXfer+0x1482>
 800b59a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	785b      	ldrb	r3, [r3, #1]
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	d128      	bne.n	800b5fc <USB_EPStartXfer+0x1482>
 800b5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	011a      	lsls	r2, r3, #4
 800b5e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5e6:	4413      	add	r3, r2
 800b5e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b5ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5fa:	801a      	strh	r2, [r3, #0]
 800b5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b600:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b60a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	785b      	ldrb	r3, [r3, #1]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d178      	bne.n	800b70c <USB_EPStartXfer+0x1592>
 800b61a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b61e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b62c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b636:	b29b      	uxth	r3, r3
 800b638:	461a      	mov	r2, r3
 800b63a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b63e:	4413      	add	r3, r2
 800b640:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	011a      	lsls	r2, r3, #4
 800b652:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b656:	4413      	add	r3, r2
 800b658:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b65c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b664:	2b00      	cmp	r3, #0
 800b666:	d116      	bne.n	800b696 <USB_EPStartXfer+0x151c>
 800b668:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b674:	b29a      	uxth	r2, r3
 800b676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b67a:	801a      	strh	r2, [r3, #0]
 800b67c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b680:	881b      	ldrh	r3, [r3, #0]
 800b682:	b29b      	uxth	r3, r3
 800b684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b692:	801a      	strh	r2, [r3, #0]
 800b694:	e067      	b.n	800b766 <USB_EPStartXfer+0x15ec>
 800b696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b69a:	2b3e      	cmp	r3, #62	; 0x3e
 800b69c:	d818      	bhi.n	800b6d0 <USB_EPStartXfer+0x1556>
 800b69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a2:	085b      	lsrs	r3, r3, #1
 800b6a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ac:	f003 0301 	and.w	r3, r3, #1
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d004      	beq.n	800b6be <USB_EPStartXfer+0x1544>
 800b6b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	029b      	lsls	r3, r3, #10
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6cc:	801a      	strh	r2, [r3, #0]
 800b6ce:	e04a      	b.n	800b766 <USB_EPStartXfer+0x15ec>
 800b6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d4:	095b      	lsrs	r3, r3, #5
 800b6d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6de:	f003 031f 	and.w	r3, r3, #31
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d104      	bne.n	800b6f0 <USB_EPStartXfer+0x1576>
 800b6e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	029b      	lsls	r3, r3, #10
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b702:	b29a      	uxth	r2, r3
 800b704:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b708:	801a      	strh	r2, [r3, #0]
 800b70a:	e02c      	b.n	800b766 <USB_EPStartXfer+0x15ec>
 800b70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	785b      	ldrb	r3, [r3, #1]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d124      	bne.n	800b766 <USB_EPStartXfer+0x15ec>
 800b71c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	461a      	mov	r2, r3
 800b72e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b732:	4413      	add	r3, r2
 800b734:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	011a      	lsls	r2, r3, #4
 800b746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b74a:	4413      	add	r3, r2
 800b74c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b750:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b758:	b29a      	uxth	r2, r3
 800b75a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b75e:	801a      	strh	r2, [r3, #0]
 800b760:	e001      	b.n	800b766 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	e03a      	b.n	800b7dc <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4413      	add	r3, r2
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	b29b      	uxth	r3, r3
 800b784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b78c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b790:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b794:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b798:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b79c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b7a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b7a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b7a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	441a      	add	r2, r3
 800b7c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b7c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b7e6:	b480      	push	{r7}
 800b7e8:	b085      	sub	sp, #20
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	785b      	ldrb	r3, [r3, #1]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d020      	beq.n	800b83a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	4413      	add	r3, r2
 800b802:	881b      	ldrh	r3, [r3, #0]
 800b804:	b29b      	uxth	r3, r3
 800b806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b80a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b80e:	81bb      	strh	r3, [r7, #12]
 800b810:	89bb      	ldrh	r3, [r7, #12]
 800b812:	f083 0310 	eor.w	r3, r3, #16
 800b816:	81bb      	strh	r3, [r7, #12]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	441a      	add	r2, r3
 800b822:	89bb      	ldrh	r3, [r7, #12]
 800b824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b82c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b834:	b29b      	uxth	r3, r3
 800b836:	8013      	strh	r3, [r2, #0]
 800b838:	e01f      	b.n	800b87a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	4413      	add	r3, r2
 800b844:	881b      	ldrh	r3, [r3, #0]
 800b846:	b29b      	uxth	r3, r3
 800b848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b84c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b850:	81fb      	strh	r3, [r7, #14]
 800b852:	89fb      	ldrh	r3, [r7, #14]
 800b854:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b858:	81fb      	strh	r3, [r7, #14]
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	441a      	add	r2, r3
 800b864:	89fb      	ldrh	r3, [r7, #14]
 800b866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b86a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b86e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b876:	b29b      	uxth	r3, r3
 800b878:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3714      	adds	r7, #20
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b888:	b480      	push	{r7}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	7b1b      	ldrb	r3, [r3, #12]
 800b896:	2b00      	cmp	r3, #0
 800b898:	f040 809d 	bne.w	800b9d6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	785b      	ldrb	r3, [r3, #1]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d04c      	beq.n	800b93e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4413      	add	r3, r2
 800b8ae:	881b      	ldrh	r3, [r3, #0]
 800b8b0:	823b      	strh	r3, [r7, #16]
 800b8b2:	8a3b      	ldrh	r3, [r7, #16]
 800b8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d01b      	beq.n	800b8f4 <USB_EPClearStall+0x6c>
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	4413      	add	r3, r2
 800b8c6:	881b      	ldrh	r3, [r3, #0]
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8d2:	81fb      	strh	r3, [r7, #14]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	441a      	add	r2, r3
 800b8de:	89fb      	ldrh	r3, [r7, #14]
 800b8e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	78db      	ldrb	r3, [r3, #3]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d06c      	beq.n	800b9d6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4413      	add	r3, r2
 800b906:	881b      	ldrh	r3, [r3, #0]
 800b908:	b29b      	uxth	r3, r3
 800b90a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b90e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b912:	81bb      	strh	r3, [r7, #12]
 800b914:	89bb      	ldrh	r3, [r7, #12]
 800b916:	f083 0320 	eor.w	r3, r3, #32
 800b91a:	81bb      	strh	r3, [r7, #12]
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	441a      	add	r2, r3
 800b926:	89bb      	ldrh	r3, [r7, #12]
 800b928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b92c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b938:	b29b      	uxth	r3, r3
 800b93a:	8013      	strh	r3, [r2, #0]
 800b93c:	e04b      	b.n	800b9d6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4413      	add	r3, r2
 800b948:	881b      	ldrh	r3, [r3, #0]
 800b94a:	82fb      	strh	r3, [r7, #22]
 800b94c:	8afb      	ldrh	r3, [r7, #22]
 800b94e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b952:	2b00      	cmp	r3, #0
 800b954:	d01b      	beq.n	800b98e <USB_EPClearStall+0x106>
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	4413      	add	r3, r2
 800b960:	881b      	ldrh	r3, [r3, #0]
 800b962:	b29b      	uxth	r3, r3
 800b964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b96c:	82bb      	strh	r3, [r7, #20]
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	441a      	add	r2, r3
 800b978:	8abb      	ldrh	r3, [r7, #20]
 800b97a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b97e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4413      	add	r3, r2
 800b998:	881b      	ldrh	r3, [r3, #0]
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9a4:	827b      	strh	r3, [r7, #18]
 800b9a6:	8a7b      	ldrh	r3, [r7, #18]
 800b9a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b9ac:	827b      	strh	r3, [r7, #18]
 800b9ae:	8a7b      	ldrh	r3, [r7, #18]
 800b9b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b9b4:	827b      	strh	r3, [r7, #18]
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	441a      	add	r2, r3
 800b9c0:	8a7b      	ldrh	r3, [r7, #18]
 800b9c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	371c      	adds	r7, #28
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b9f0:	78fb      	ldrb	r3, [r7, #3]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d103      	bne.n	800b9fe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2280      	movs	r2, #128	; 0x80
 800b9fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b085      	sub	sp, #20
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ba34:	68fb      	ldr	r3, [r7, #12]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b08d      	sub	sp, #52	; 0x34
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	60f8      	str	r0, [r7, #12]
 800ba4a:	60b9      	str	r1, [r7, #8]
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	461a      	mov	r2, r3
 800ba50:	460b      	mov	r3, r1
 800ba52:	80fb      	strh	r3, [r7, #6]
 800ba54:	4613      	mov	r3, r2
 800ba56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ba58:	88bb      	ldrh	r3, [r7, #4]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	085b      	lsrs	r3, r3, #1
 800ba5e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ba68:	88fb      	ldrh	r3, [r7, #6]
 800ba6a:	005a      	lsls	r2, r3, #1
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	4413      	add	r3, r2
 800ba70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba74:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba7a:	e01e      	b.n	800baba <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ba82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba84:	3301      	adds	r3, #1
 800ba86:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	021b      	lsls	r3, r3, #8
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	461a      	mov	r2, r3
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800baa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa4:	3302      	adds	r3, #2
 800baa6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800baa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baaa:	3302      	adds	r3, #2
 800baac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab0:	3301      	adds	r3, #1
 800bab2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800bab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab6:	3b01      	subs	r3, #1
 800bab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1dd      	bne.n	800ba7c <USB_WritePMA+0x3a>
  }
}
 800bac0:	bf00      	nop
 800bac2:	bf00      	nop
 800bac4:	3734      	adds	r7, #52	; 0x34
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr

0800bace <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bace:	b480      	push	{r7}
 800bad0:	b08b      	sub	sp, #44	; 0x2c
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	60f8      	str	r0, [r7, #12]
 800bad6:	60b9      	str	r1, [r7, #8]
 800bad8:	4611      	mov	r1, r2
 800bada:	461a      	mov	r2, r3
 800badc:	460b      	mov	r3, r1
 800bade:	80fb      	strh	r3, [r7, #6]
 800bae0:	4613      	mov	r3, r2
 800bae2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bae4:	88bb      	ldrh	r3, [r7, #4]
 800bae6:	085b      	lsrs	r3, r3, #1
 800bae8:	b29b      	uxth	r3, r3
 800baea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800baf4:	88fb      	ldrh	r3, [r7, #6]
 800baf6:	005a      	lsls	r2, r3, #1
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	4413      	add	r3, r2
 800bafc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb00:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	627b      	str	r3, [r7, #36]	; 0x24
 800bb06:	e01b      	b.n	800bb40 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bb08:	6a3b      	ldr	r3, [r7, #32]
 800bb0a:	881b      	ldrh	r3, [r3, #0]
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bb10:	6a3b      	ldr	r3, [r7, #32]
 800bb12:	3302      	adds	r3, #2
 800bb14:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	69fb      	ldr	r3, [r7, #28]
 800bb1c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	3301      	adds	r3, #1
 800bb22:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	0a1b      	lsrs	r3, r3, #8
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	3301      	adds	r3, #1
 800bb32:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800bb34:	6a3b      	ldr	r3, [r7, #32]
 800bb36:	3302      	adds	r3, #2
 800bb38:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	627b      	str	r3, [r7, #36]	; 0x24
 800bb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1e0      	bne.n	800bb08 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800bb46:	88bb      	ldrh	r3, [r7, #4]
 800bb48:	f003 0301 	and.w	r3, r3, #1
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d007      	beq.n	800bb62 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800bb52:	6a3b      	ldr	r3, [r7, #32]
 800bb54:	881b      	ldrh	r3, [r3, #0]
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	b2da      	uxtb	r2, r3
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	701a      	strb	r2, [r3, #0]
  }
}
 800bb62:	bf00      	nop
 800bb64:	372c      	adds	r7, #44	; 0x2c
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr

0800bb6e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b084      	sub	sp, #16
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
 800bb76:	460b      	mov	r3, r1
 800bb78:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	7c1b      	ldrb	r3, [r3, #16]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d115      	bne.n	800bbb2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bb86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb8a:	2202      	movs	r2, #2
 800bb8c:	2181      	movs	r1, #129	; 0x81
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f009 fea3 	bl	80158da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bb9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb9e:	2202      	movs	r2, #2
 800bba0:	2101      	movs	r1, #1
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f009 fe99 	bl	80158da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800bbb0:	e012      	b.n	800bbd8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbb2:	2340      	movs	r3, #64	; 0x40
 800bbb4:	2202      	movs	r2, #2
 800bbb6:	2181      	movs	r1, #129	; 0x81
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f009 fe8e 	bl	80158da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbc4:	2340      	movs	r3, #64	; 0x40
 800bbc6:	2202      	movs	r2, #2
 800bbc8:	2101      	movs	r1, #1
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f009 fe85 	bl	80158da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bbd8:	2308      	movs	r3, #8
 800bbda:	2203      	movs	r2, #3
 800bbdc:	2182      	movs	r1, #130	; 0x82
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f009 fe7b 	bl	80158da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bbea:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bbee:	f009 ff9d 	bl	8015b2c <USBD_static_malloc>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d102      	bne.n	800bc0a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800bc04:	2301      	movs	r3, #1
 800bc06:	73fb      	strb	r3, [r7, #15]
 800bc08:	e026      	b.n	800bc58 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc10:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	7c1b      	ldrb	r3, [r3, #16]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d109      	bne.n	800bc48 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc3e:	2101      	movs	r1, #1
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f009 ff3c 	bl	8015abe <USBD_LL_PrepareReceive>
 800bc46:	e007      	b.n	800bc58 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc4e:	2340      	movs	r3, #64	; 0x40
 800bc50:	2101      	movs	r1, #1
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f009 ff33 	bl	8015abe <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b084      	sub	sp, #16
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bc72:	2181      	movs	r1, #129	; 0x81
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f009 fe56 	bl	8015926 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bc80:	2101      	movs	r1, #1
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f009 fe4f 	bl	8015926 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bc90:	2182      	movs	r1, #130	; 0x82
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f009 fe47 	bl	8015926 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00e      	beq.n	800bcc6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f009 ff45 	bl	8015b48 <USBD_static_free>
    pdev->pClassData = NULL;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800bcc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bce0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bce2:	2300      	movs	r3, #0
 800bce4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bce6:	2300      	movs	r3, #0
 800bce8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d039      	beq.n	800bd6e <USBD_CDC_Setup+0x9e>
 800bcfa:	2b20      	cmp	r3, #32
 800bcfc:	d17f      	bne.n	800bdfe <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	88db      	ldrh	r3, [r3, #6]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d029      	beq.n	800bd5a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	b25b      	sxtb	r3, r3
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	da11      	bge.n	800bd34 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800bd1c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	88d2      	ldrh	r2, [r2, #6]
 800bd22:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bd24:	6939      	ldr	r1, [r7, #16]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	88db      	ldrh	r3, [r3, #6]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f001 fa14 	bl	800d15a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800bd32:	e06b      	b.n	800be0c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	785a      	ldrb	r2, [r3, #1]
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	88db      	ldrh	r3, [r3, #6]
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bd4a:	6939      	ldr	r1, [r7, #16]
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	88db      	ldrh	r3, [r3, #6]
 800bd50:	461a      	mov	r2, r3
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f001 fa2f 	bl	800d1b6 <USBD_CtlPrepareRx>
      break;
 800bd58:	e058      	b.n	800be0c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	7850      	ldrb	r0, [r2, #1]
 800bd66:	2200      	movs	r2, #0
 800bd68:	6839      	ldr	r1, [r7, #0]
 800bd6a:	4798      	blx	r3
      break;
 800bd6c:	e04e      	b.n	800be0c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	785b      	ldrb	r3, [r3, #1]
 800bd72:	2b0b      	cmp	r3, #11
 800bd74:	d02e      	beq.n	800bdd4 <USBD_CDC_Setup+0x104>
 800bd76:	2b0b      	cmp	r3, #11
 800bd78:	dc38      	bgt.n	800bdec <USBD_CDC_Setup+0x11c>
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d002      	beq.n	800bd84 <USBD_CDC_Setup+0xb4>
 800bd7e:	2b0a      	cmp	r3, #10
 800bd80:	d014      	beq.n	800bdac <USBD_CDC_Setup+0xdc>
 800bd82:	e033      	b.n	800bdec <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd8a:	2b03      	cmp	r3, #3
 800bd8c:	d107      	bne.n	800bd9e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800bd8e:	f107 030c 	add.w	r3, r7, #12
 800bd92:	2202      	movs	r2, #2
 800bd94:	4619      	mov	r1, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f001 f9df 	bl	800d15a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bd9c:	e02e      	b.n	800bdfc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f001 f96f 	bl	800d084 <USBD_CtlError>
            ret = USBD_FAIL;
 800bda6:	2302      	movs	r3, #2
 800bda8:	75fb      	strb	r3, [r7, #23]
          break;
 800bdaa:	e027      	b.n	800bdfc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdb2:	2b03      	cmp	r3, #3
 800bdb4:	d107      	bne.n	800bdc6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800bdb6:	f107 030f 	add.w	r3, r7, #15
 800bdba:	2201      	movs	r2, #1
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f001 f9cb 	bl	800d15a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bdc4:	e01a      	b.n	800bdfc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800bdc6:	6839      	ldr	r1, [r7, #0]
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f001 f95b 	bl	800d084 <USBD_CtlError>
            ret = USBD_FAIL;
 800bdce:	2302      	movs	r3, #2
 800bdd0:	75fb      	strb	r3, [r7, #23]
          break;
 800bdd2:	e013      	b.n	800bdfc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	d00d      	beq.n	800bdfa <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800bdde:	6839      	ldr	r1, [r7, #0]
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f001 f94f 	bl	800d084 <USBD_CtlError>
            ret = USBD_FAIL;
 800bde6:	2302      	movs	r3, #2
 800bde8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bdea:	e006      	b.n	800bdfa <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800bdec:	6839      	ldr	r1, [r7, #0]
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f001 f948 	bl	800d084 <USBD_CtlError>
          ret = USBD_FAIL;
 800bdf4:	2302      	movs	r3, #2
 800bdf6:	75fb      	strb	r3, [r7, #23]
          break;
 800bdf8:	e000      	b.n	800bdfc <USBD_CDC_Setup+0x12c>
          break;
 800bdfa:	bf00      	nop
      }
      break;
 800bdfc:	e006      	b.n	800be0c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bdfe:	6839      	ldr	r1, [r7, #0]
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f001 f93f 	bl	800d084 <USBD_CtlError>
      ret = USBD_FAIL;
 800be06:	2302      	movs	r3, #2
 800be08:	75fb      	strb	r3, [r7, #23]
      break;
 800be0a:	bf00      	nop
  }

  return ret;
 800be0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b084      	sub	sp, #16
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
 800be1e:	460b      	mov	r3, r1
 800be20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be28:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be30:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d03a      	beq.n	800beb2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800be3c:	78fa      	ldrb	r2, [r7, #3]
 800be3e:	6879      	ldr	r1, [r7, #4]
 800be40:	4613      	mov	r3, r2
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	4413      	add	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	440b      	add	r3, r1
 800be4a:	331c      	adds	r3, #28
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d029      	beq.n	800bea6 <USBD_CDC_DataIn+0x90>
 800be52:	78fa      	ldrb	r2, [r7, #3]
 800be54:	6879      	ldr	r1, [r7, #4]
 800be56:	4613      	mov	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	440b      	add	r3, r1
 800be60:	331c      	adds	r3, #28
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	78f9      	ldrb	r1, [r7, #3]
 800be66:	68b8      	ldr	r0, [r7, #8]
 800be68:	460b      	mov	r3, r1
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	440b      	add	r3, r1
 800be6e:	00db      	lsls	r3, r3, #3
 800be70:	4403      	add	r3, r0
 800be72:	3338      	adds	r3, #56	; 0x38
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	fbb2 f1f3 	udiv	r1, r2, r3
 800be7a:	fb01 f303 	mul.w	r3, r1, r3
 800be7e:	1ad3      	subs	r3, r2, r3
 800be80:	2b00      	cmp	r3, #0
 800be82:	d110      	bne.n	800bea6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800be84:	78fa      	ldrb	r2, [r7, #3]
 800be86:	6879      	ldr	r1, [r7, #4]
 800be88:	4613      	mov	r3, r2
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	440b      	add	r3, r1
 800be92:	331c      	adds	r3, #28
 800be94:	2200      	movs	r2, #0
 800be96:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800be98:	78f9      	ldrb	r1, [r7, #3]
 800be9a:	2300      	movs	r3, #0
 800be9c:	2200      	movs	r2, #0
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f009 fdea 	bl	8015a78 <USBD_LL_Transmit>
 800bea4:	e003      	b.n	800beae <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	e000      	b.n	800beb4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800beb2:	2302      	movs	r3, #2
  }
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3710      	adds	r7, #16
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	460b      	mov	r3, r1
 800bec6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bece:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bed0:	78fb      	ldrb	r3, [r7, #3]
 800bed2:	4619      	mov	r1, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f009 fe15 	bl	8015b04 <USBD_LL_GetRxDataSize>
 800beda:	4602      	mov	r2, r0
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00d      	beq.n	800bf08 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf00:	4611      	mov	r1, r2
 800bf02:	4798      	blx	r3

    return USBD_OK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	e000      	b.n	800bf0a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bf08:	2302      	movs	r3, #2
  }
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b084      	sub	sp, #16
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf20:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d015      	beq.n	800bf58 <USBD_CDC_EP0_RxReady+0x46>
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bf32:	2bff      	cmp	r3, #255	; 0xff
 800bf34:	d010      	beq.n	800bf58 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf3c:	689b      	ldr	r3, [r3, #8]
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800bf44:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf4c:	b292      	uxth	r2, r2
 800bf4e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	22ff      	movs	r2, #255	; 0xff
 800bf54:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
	...

0800bf64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2243      	movs	r2, #67	; 0x43
 800bf70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bf72:	4b03      	ldr	r3, [pc, #12]	; (800bf80 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr
 800bf80:	20000094 	.word	0x20000094

0800bf84 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2243      	movs	r2, #67	; 0x43
 800bf90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800bf92:	4b03      	ldr	r3, [pc, #12]	; (800bfa0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr
 800bfa0:	20000050 	.word	0x20000050

0800bfa4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2243      	movs	r2, #67	; 0x43
 800bfb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800bfb2:	4b03      	ldr	r3, [pc, #12]	; (800bfc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr
 800bfc0:	200000d8 	.word	0x200000d8

0800bfc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	220a      	movs	r2, #10
 800bfd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800bfd2:	4b03      	ldr	r3, [pc, #12]	; (800bfe0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	2000000c 	.word	0x2000000c

0800bfe4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b085      	sub	sp, #20
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800bfee:	2302      	movs	r3, #2
 800bff0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d005      	beq.n	800c004 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	683a      	ldr	r2, [r7, #0]
 800bffc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800c000:	2300      	movs	r3, #0
 800c002:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c004:	7bfb      	ldrb	r3, [r7, #15]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c012:	b480      	push	{r7}
 800c014:	b087      	sub	sp, #28
 800c016:	af00      	add	r7, sp, #0
 800c018:	60f8      	str	r0, [r7, #12]
 800c01a:	60b9      	str	r1, [r7, #8]
 800c01c:	4613      	mov	r3, r2
 800c01e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c026:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c030:	88fa      	ldrh	r2, [r7, #6]
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	371c      	adds	r7, #28
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c046:	b480      	push	{r7}
 800c048:	b085      	sub	sp, #20
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c056:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3714      	adds	r7, #20
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr

0800c06e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b084      	sub	sp, #16
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c07c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c084:	2b00      	cmp	r3, #0
 800c086:	d01c      	beq.n	800c0c2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d115      	bne.n	800c0be <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2201      	movs	r2, #1
 800c096:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	2181      	movs	r1, #129	; 0x81
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f009 fcdf 	bl	8015a78 <USBD_LL_Transmit>

      return USBD_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	e002      	b.n	800c0c4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e000      	b.n	800c0c4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c0c2:	2302      	movs	r3, #2
  }
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0da:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d017      	beq.n	800c116 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	7c1b      	ldrb	r3, [r3, #16]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d109      	bne.n	800c102 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c0f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0f8:	2101      	movs	r1, #1
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f009 fcdf 	bl	8015abe <USBD_LL_PrepareReceive>
 800c100:	e007      	b.n	800c112 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c108:	2340      	movs	r3, #64	; 0x40
 800c10a:	2101      	movs	r1, #1
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f009 fcd6 	bl	8015abe <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	e000      	b.n	800c118 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c116:	2302      	movs	r3, #2
  }
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	4613      	mov	r3, r2
 800c12c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d101      	bne.n	800c138 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c134:	2302      	movs	r3, #2
 800c136:	e01a      	b.n	800c16e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d003      	beq.n	800c14a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2200      	movs	r2, #0
 800c146:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d003      	beq.n	800c158 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	79fa      	ldrb	r2, [r7, #7]
 800c164:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	f009 fb42 	bl	80157f0 <USBD_LL_Init>

  return USBD_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c176:	b480      	push	{r7}
 800c178:	b085      	sub	sp, #20
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
 800c17e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c180:	2300      	movs	r3, #0
 800c182:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d006      	beq.n	800c198 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	683a      	ldr	r2, [r7, #0]
 800c18e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	73fb      	strb	r3, [r7, #15]
 800c196:	e001      	b.n	800c19c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c198:	2302      	movs	r3, #2
 800c19a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3714      	adds	r7, #20
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b082      	sub	sp, #8
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f009 fb76 	bl	80158a4 <USBD_LL_Start>

  return USBD_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	b083      	sub	sp, #12
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c1e4:	2302      	movs	r3, #2
 800c1e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00c      	beq.n	800c20c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	78fa      	ldrb	r2, [r7, #3]
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	4798      	blx	r3
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d101      	bne.n	800c20c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c208:	2300      	movs	r3, #0
 800c20a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b082      	sub	sp, #8
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	460b      	mov	r3, r1
 800c220:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	78fa      	ldrb	r2, [r7, #3]
 800c22c:	4611      	mov	r1, r2
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	4798      	blx	r3

  return USBD_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	4618      	mov	r0, r3
 800c250:	f000 fedb 	bl	800d00a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c262:	461a      	mov	r2, r3
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c270:	f003 031f 	and.w	r3, r3, #31
 800c274:	2b02      	cmp	r3, #2
 800c276:	d016      	beq.n	800c2a6 <USBD_LL_SetupStage+0x6a>
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d81c      	bhi.n	800c2b6 <USBD_LL_SetupStage+0x7a>
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d002      	beq.n	800c286 <USBD_LL_SetupStage+0x4a>
 800c280:	2b01      	cmp	r3, #1
 800c282:	d008      	beq.n	800c296 <USBD_LL_SetupStage+0x5a>
 800c284:	e017      	b.n	800c2b6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c28c:	4619      	mov	r1, r3
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f9ce 	bl	800c630 <USBD_StdDevReq>
      break;
 800c294:	e01a      	b.n	800c2cc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c29c:	4619      	mov	r1, r3
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fa30 	bl	800c704 <USBD_StdItfReq>
      break;
 800c2a4:	e012      	b.n	800c2cc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 fa70 	bl	800c794 <USBD_StdEPReq>
      break;
 800c2b4:	e00a      	b.n	800c2cc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c2bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f009 fb4d 	bl	8015964 <USBD_LL_StallEP>
      break;
 800c2ca:	bf00      	nop
  }

  return USBD_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3708      	adds	r7, #8
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b086      	sub	sp, #24
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	60f8      	str	r0, [r7, #12]
 800c2de:	460b      	mov	r3, r1
 800c2e0:	607a      	str	r2, [r7, #4]
 800c2e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c2e4:	7afb      	ldrb	r3, [r7, #11]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d14b      	bne.n	800c382 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c2f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2f8:	2b03      	cmp	r3, #3
 800c2fa:	d134      	bne.n	800c366 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	68da      	ldr	r2, [r3, #12]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	691b      	ldr	r3, [r3, #16]
 800c304:	429a      	cmp	r2, r3
 800c306:	d919      	bls.n	800c33c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	68da      	ldr	r2, [r3, #12]
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	1ad2      	subs	r2, r2, r3
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	68da      	ldr	r2, [r3, #12]
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c31e:	429a      	cmp	r2, r3
 800c320:	d203      	bcs.n	800c32a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c326:	b29b      	uxth	r3, r3
 800c328:	e002      	b.n	800c330 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c32e:	b29b      	uxth	r3, r3
 800c330:	461a      	mov	r2, r3
 800c332:	6879      	ldr	r1, [r7, #4]
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f000 ff5c 	bl	800d1f2 <USBD_CtlContinueRx>
 800c33a:	e038      	b.n	800c3ae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00a      	beq.n	800c35e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c34e:	2b03      	cmp	r3, #3
 800c350:	d105      	bne.n	800c35e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c35e:	68f8      	ldr	r0, [r7, #12]
 800c360:	f000 ff59 	bl	800d216 <USBD_CtlSendStatus>
 800c364:	e023      	b.n	800c3ae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c36c:	2b05      	cmp	r3, #5
 800c36e:	d11e      	bne.n	800c3ae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2200      	movs	r2, #0
 800c374:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800c378:	2100      	movs	r1, #0
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f009 faf2 	bl	8015964 <USBD_LL_StallEP>
 800c380:	e015      	b.n	800c3ae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c388:	699b      	ldr	r3, [r3, #24]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00d      	beq.n	800c3aa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c394:	2b03      	cmp	r3, #3
 800c396:	d108      	bne.n	800c3aa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c39e:	699b      	ldr	r3, [r3, #24]
 800c3a0:	7afa      	ldrb	r2, [r7, #11]
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	4798      	blx	r3
 800c3a8:	e001      	b.n	800c3ae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	e000      	b.n	800c3b0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	607a      	str	r2, [r7, #4]
 800c3c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c3c6:	7afb      	ldrb	r3, [r7, #11]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d17f      	bne.n	800c4cc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	3314      	adds	r3, #20
 800c3d0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d15c      	bne.n	800c496 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	68da      	ldr	r2, [r3, #12]
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d915      	bls.n	800c414 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	68da      	ldr	r2, [r3, #12]
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	1ad2      	subs	r2, r2, r3
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	6879      	ldr	r1, [r7, #4]
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f000 fec6 	bl	800d192 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c406:	2300      	movs	r3, #0
 800c408:	2200      	movs	r2, #0
 800c40a:	2100      	movs	r1, #0
 800c40c:	68f8      	ldr	r0, [r7, #12]
 800c40e:	f009 fb56 	bl	8015abe <USBD_LL_PrepareReceive>
 800c412:	e04e      	b.n	800c4b2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	697a      	ldr	r2, [r7, #20]
 800c41a:	6912      	ldr	r2, [r2, #16]
 800c41c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c420:	fb01 f202 	mul.w	r2, r1, r2
 800c424:	1a9b      	subs	r3, r3, r2
 800c426:	2b00      	cmp	r3, #0
 800c428:	d11c      	bne.n	800c464 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	689a      	ldr	r2, [r3, #8]
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c432:	429a      	cmp	r2, r3
 800c434:	d316      	bcc.n	800c464 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	689a      	ldr	r2, [r3, #8]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c440:	429a      	cmp	r2, r3
 800c442:	d20f      	bcs.n	800c464 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c444:	2200      	movs	r2, #0
 800c446:	2100      	movs	r1, #0
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f000 fea2 	bl	800d192 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c456:	2300      	movs	r3, #0
 800c458:	2200      	movs	r2, #0
 800c45a:	2100      	movs	r1, #0
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f009 fb2e 	bl	8015abe <USBD_LL_PrepareReceive>
 800c462:	e026      	b.n	800c4b2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d00a      	beq.n	800c486 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c476:	2b03      	cmp	r3, #3
 800c478:	d105      	bne.n	800c486 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c486:	2180      	movs	r1, #128	; 0x80
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f009 fa6b 	bl	8015964 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f000 fed4 	bl	800d23c <USBD_CtlReceiveStatus>
 800c494:	e00d      	b.n	800c4b2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c49c:	2b04      	cmp	r3, #4
 800c49e:	d004      	beq.n	800c4aa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d103      	bne.n	800c4b2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c4aa:	2180      	movs	r1, #128	; 0x80
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f009 fa59 	bl	8015964 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d11d      	bne.n	800c4f8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f7ff fe80 	bl	800c1c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c4ca:	e015      	b.n	800c4f8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4d2:	695b      	ldr	r3, [r3, #20]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00d      	beq.n	800c4f4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c4de:	2b03      	cmp	r3, #3
 800c4e0:	d108      	bne.n	800c4f4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4e8:	695b      	ldr	r3, [r3, #20]
 800c4ea:	7afa      	ldrb	r2, [r7, #11]
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	4798      	blx	r3
 800c4f2:	e001      	b.n	800c4f8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c4f4:	2302      	movs	r3, #2
 800c4f6:	e000      	b.n	800c4fa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3718      	adds	r7, #24
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c50a:	2340      	movs	r3, #64	; 0x40
 800c50c:	2200      	movs	r2, #0
 800c50e:	2100      	movs	r1, #0
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f009 f9e2 	bl	80158da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2201      	movs	r2, #1
 800c51a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2240      	movs	r2, #64	; 0x40
 800c522:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c526:	2340      	movs	r3, #64	; 0x40
 800c528:	2200      	movs	r2, #0
 800c52a:	2180      	movs	r1, #128	; 0x80
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f009 f9d4 	bl	80158da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2201      	movs	r2, #1
 800c536:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2240      	movs	r2, #64	; 0x40
 800c53c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c562:	2b00      	cmp	r3, #0
 800c564:	d009      	beq.n	800c57a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	6852      	ldr	r2, [r2, #4]
 800c572:	b2d2      	uxtb	r2, r2
 800c574:	4611      	mov	r1, r2
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	4798      	blx	r3
  }

  return USBD_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	78fa      	ldrb	r2, [r7, #3]
 800c594:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c596:	2300      	movs	r3, #0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	370c      	adds	r7, #12
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2204      	movs	r2, #4
 800c5bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr

0800c5ce <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c5ce:	b480      	push	{r7}
 800c5d0:	b083      	sub	sp, #12
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5dc:	2b04      	cmp	r3, #4
 800c5de:	d105      	bne.n	800c5ec <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	370c      	adds	r7, #12
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b082      	sub	sp, #8
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c608:	2b03      	cmp	r3, #3
 800c60a:	d10b      	bne.n	800c624 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c612:	69db      	ldr	r3, [r3, #28]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d005      	beq.n	800c624 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c61e:	69db      	ldr	r3, [r3, #28]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
	...

0800c630 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c63a:	2300      	movs	r3, #0
 800c63c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c646:	2b40      	cmp	r3, #64	; 0x40
 800c648:	d005      	beq.n	800c656 <USBD_StdDevReq+0x26>
 800c64a:	2b40      	cmp	r3, #64	; 0x40
 800c64c:	d84f      	bhi.n	800c6ee <USBD_StdDevReq+0xbe>
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d009      	beq.n	800c666 <USBD_StdDevReq+0x36>
 800c652:	2b20      	cmp	r3, #32
 800c654:	d14b      	bne.n	800c6ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	4798      	blx	r3
      break;
 800c664:	e048      	b.n	800c6f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	785b      	ldrb	r3, [r3, #1]
 800c66a:	2b09      	cmp	r3, #9
 800c66c:	d839      	bhi.n	800c6e2 <USBD_StdDevReq+0xb2>
 800c66e:	a201      	add	r2, pc, #4	; (adr r2, 800c674 <USBD_StdDevReq+0x44>)
 800c670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c674:	0800c6c5 	.word	0x0800c6c5
 800c678:	0800c6d9 	.word	0x0800c6d9
 800c67c:	0800c6e3 	.word	0x0800c6e3
 800c680:	0800c6cf 	.word	0x0800c6cf
 800c684:	0800c6e3 	.word	0x0800c6e3
 800c688:	0800c6a7 	.word	0x0800c6a7
 800c68c:	0800c69d 	.word	0x0800c69d
 800c690:	0800c6e3 	.word	0x0800c6e3
 800c694:	0800c6bb 	.word	0x0800c6bb
 800c698:	0800c6b1 	.word	0x0800c6b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c69c:	6839      	ldr	r1, [r7, #0]
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 f9dc 	bl	800ca5c <USBD_GetDescriptor>
          break;
 800c6a4:	e022      	b.n	800c6ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c6a6:	6839      	ldr	r1, [r7, #0]
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 fb3f 	bl	800cd2c <USBD_SetAddress>
          break;
 800c6ae:	e01d      	b.n	800c6ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 fb7e 	bl	800cdb4 <USBD_SetConfig>
          break;
 800c6b8:	e018      	b.n	800c6ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fc07 	bl	800ced0 <USBD_GetConfig>
          break;
 800c6c2:	e013      	b.n	800c6ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 fc37 	bl	800cf3a <USBD_GetStatus>
          break;
 800c6cc:	e00e      	b.n	800c6ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 fc65 	bl	800cfa0 <USBD_SetFeature>
          break;
 800c6d6:	e009      	b.n	800c6ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c6d8:	6839      	ldr	r1, [r7, #0]
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 fc74 	bl	800cfc8 <USBD_ClrFeature>
          break;
 800c6e0:	e004      	b.n	800c6ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c6e2:	6839      	ldr	r1, [r7, #0]
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fccd 	bl	800d084 <USBD_CtlError>
          break;
 800c6ea:	bf00      	nop
      }
      break;
 800c6ec:	e004      	b.n	800c6f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 fcc7 	bl	800d084 <USBD_CtlError>
      break;
 800c6f6:	bf00      	nop
  }

  return ret;
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop

0800c704 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c70e:	2300      	movs	r3, #0
 800c710:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c71a:	2b40      	cmp	r3, #64	; 0x40
 800c71c:	d005      	beq.n	800c72a <USBD_StdItfReq+0x26>
 800c71e:	2b40      	cmp	r3, #64	; 0x40
 800c720:	d82e      	bhi.n	800c780 <USBD_StdItfReq+0x7c>
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <USBD_StdItfReq+0x26>
 800c726:	2b20      	cmp	r3, #32
 800c728:	d12a      	bne.n	800c780 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c730:	3b01      	subs	r3, #1
 800c732:	2b02      	cmp	r3, #2
 800c734:	d81d      	bhi.n	800c772 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	889b      	ldrh	r3, [r3, #4]
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d813      	bhi.n	800c768 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	4798      	blx	r3
 800c74e:	4603      	mov	r3, r0
 800c750:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	88db      	ldrh	r3, [r3, #6]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d110      	bne.n	800c77c <USBD_StdItfReq+0x78>
 800c75a:	7bfb      	ldrb	r3, [r7, #15]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10d      	bne.n	800c77c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 fd58 	bl	800d216 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c766:	e009      	b.n	800c77c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c768:	6839      	ldr	r1, [r7, #0]
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 fc8a 	bl	800d084 <USBD_CtlError>
          break;
 800c770:	e004      	b.n	800c77c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 fc85 	bl	800d084 <USBD_CtlError>
          break;
 800c77a:	e000      	b.n	800c77e <USBD_StdItfReq+0x7a>
          break;
 800c77c:	bf00      	nop
      }
      break;
 800c77e:	e004      	b.n	800c78a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 fc7e 	bl	800d084 <USBD_CtlError>
      break;
 800c788:	bf00      	nop
  }

  return USBD_OK;
 800c78a:	2300      	movs	r3, #0
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	889b      	ldrh	r3, [r3, #4]
 800c7a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7b0:	2b40      	cmp	r3, #64	; 0x40
 800c7b2:	d007      	beq.n	800c7c4 <USBD_StdEPReq+0x30>
 800c7b4:	2b40      	cmp	r3, #64	; 0x40
 800c7b6:	f200 8146 	bhi.w	800ca46 <USBD_StdEPReq+0x2b2>
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00a      	beq.n	800c7d4 <USBD_StdEPReq+0x40>
 800c7be:	2b20      	cmp	r3, #32
 800c7c0:	f040 8141 	bne.w	800ca46 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	4798      	blx	r3
      break;
 800c7d2:	e13d      	b.n	800ca50 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7dc:	2b20      	cmp	r3, #32
 800c7de:	d10a      	bne.n	800c7f6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	4798      	blx	r3
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c7f2:	7bfb      	ldrb	r3, [r7, #15]
 800c7f4:	e12d      	b.n	800ca52 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	785b      	ldrb	r3, [r3, #1]
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d007      	beq.n	800c80e <USBD_StdEPReq+0x7a>
 800c7fe:	2b03      	cmp	r3, #3
 800c800:	f300 811b 	bgt.w	800ca3a <USBD_StdEPReq+0x2a6>
 800c804:	2b00      	cmp	r3, #0
 800c806:	d072      	beq.n	800c8ee <USBD_StdEPReq+0x15a>
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d03a      	beq.n	800c882 <USBD_StdEPReq+0xee>
 800c80c:	e115      	b.n	800ca3a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c814:	2b02      	cmp	r3, #2
 800c816:	d002      	beq.n	800c81e <USBD_StdEPReq+0x8a>
 800c818:	2b03      	cmp	r3, #3
 800c81a:	d015      	beq.n	800c848 <USBD_StdEPReq+0xb4>
 800c81c:	e02b      	b.n	800c876 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c81e:	7bbb      	ldrb	r3, [r7, #14]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00c      	beq.n	800c83e <USBD_StdEPReq+0xaa>
 800c824:	7bbb      	ldrb	r3, [r7, #14]
 800c826:	2b80      	cmp	r3, #128	; 0x80
 800c828:	d009      	beq.n	800c83e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c82a:	7bbb      	ldrb	r3, [r7, #14]
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f009 f898 	bl	8015964 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c834:	2180      	movs	r1, #128	; 0x80
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f009 f894 	bl	8015964 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c83c:	e020      	b.n	800c880 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 fc1f 	bl	800d084 <USBD_CtlError>
              break;
 800c846:	e01b      	b.n	800c880 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	885b      	ldrh	r3, [r3, #2]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10e      	bne.n	800c86e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c850:	7bbb      	ldrb	r3, [r7, #14]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00b      	beq.n	800c86e <USBD_StdEPReq+0xda>
 800c856:	7bbb      	ldrb	r3, [r7, #14]
 800c858:	2b80      	cmp	r3, #128	; 0x80
 800c85a:	d008      	beq.n	800c86e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	88db      	ldrh	r3, [r3, #6]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d104      	bne.n	800c86e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c864:	7bbb      	ldrb	r3, [r7, #14]
 800c866:	4619      	mov	r1, r3
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f009 f87b 	bl	8015964 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 fcd1 	bl	800d216 <USBD_CtlSendStatus>

              break;
 800c874:	e004      	b.n	800c880 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c876:	6839      	ldr	r1, [r7, #0]
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 fc03 	bl	800d084 <USBD_CtlError>
              break;
 800c87e:	bf00      	nop
          }
          break;
 800c880:	e0e0      	b.n	800ca44 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d002      	beq.n	800c892 <USBD_StdEPReq+0xfe>
 800c88c:	2b03      	cmp	r3, #3
 800c88e:	d015      	beq.n	800c8bc <USBD_StdEPReq+0x128>
 800c890:	e026      	b.n	800c8e0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c892:	7bbb      	ldrb	r3, [r7, #14]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d00c      	beq.n	800c8b2 <USBD_StdEPReq+0x11e>
 800c898:	7bbb      	ldrb	r3, [r7, #14]
 800c89a:	2b80      	cmp	r3, #128	; 0x80
 800c89c:	d009      	beq.n	800c8b2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c89e:	7bbb      	ldrb	r3, [r7, #14]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f009 f85e 	bl	8015964 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c8a8:	2180      	movs	r1, #128	; 0x80
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f009 f85a 	bl	8015964 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c8b0:	e01c      	b.n	800c8ec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c8b2:	6839      	ldr	r1, [r7, #0]
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 fbe5 	bl	800d084 <USBD_CtlError>
              break;
 800c8ba:	e017      	b.n	800c8ec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	885b      	ldrh	r3, [r3, #2]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d112      	bne.n	800c8ea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c8c4:	7bbb      	ldrb	r3, [r7, #14]
 800c8c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d004      	beq.n	800c8d8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c8ce:	7bbb      	ldrb	r3, [r7, #14]
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f009 f865 	bl	80159a2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fc9c 	bl	800d216 <USBD_CtlSendStatus>
              }
              break;
 800c8de:	e004      	b.n	800c8ea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c8e0:	6839      	ldr	r1, [r7, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fbce 	bl	800d084 <USBD_CtlError>
              break;
 800c8e8:	e000      	b.n	800c8ec <USBD_StdEPReq+0x158>
              break;
 800c8ea:	bf00      	nop
          }
          break;
 800c8ec:	e0aa      	b.n	800ca44 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d002      	beq.n	800c8fe <USBD_StdEPReq+0x16a>
 800c8f8:	2b03      	cmp	r3, #3
 800c8fa:	d032      	beq.n	800c962 <USBD_StdEPReq+0x1ce>
 800c8fc:	e097      	b.n	800ca2e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8fe:	7bbb      	ldrb	r3, [r7, #14]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d007      	beq.n	800c914 <USBD_StdEPReq+0x180>
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	2b80      	cmp	r3, #128	; 0x80
 800c908:	d004      	beq.n	800c914 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c90a:	6839      	ldr	r1, [r7, #0]
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fbb9 	bl	800d084 <USBD_CtlError>
                break;
 800c912:	e091      	b.n	800ca38 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	da0b      	bge.n	800c934 <USBD_StdEPReq+0x1a0>
 800c91c:	7bbb      	ldrb	r3, [r7, #14]
 800c91e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c922:	4613      	mov	r3, r2
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	4413      	add	r3, r2
 800c928:	009b      	lsls	r3, r3, #2
 800c92a:	3310      	adds	r3, #16
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	4413      	add	r3, r2
 800c930:	3304      	adds	r3, #4
 800c932:	e00b      	b.n	800c94c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c934:	7bbb      	ldrb	r3, [r7, #14]
 800c936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c93a:	4613      	mov	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	4413      	add	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	4413      	add	r3, r2
 800c94a:	3304      	adds	r3, #4
 800c94c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	2200      	movs	r2, #0
 800c952:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	2202      	movs	r2, #2
 800c958:	4619      	mov	r1, r3
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fbfd 	bl	800d15a <USBD_CtlSendData>
              break;
 800c960:	e06a      	b.n	800ca38 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c962:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c966:	2b00      	cmp	r3, #0
 800c968:	da11      	bge.n	800c98e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c96a:	7bbb      	ldrb	r3, [r7, #14]
 800c96c:	f003 020f 	and.w	r2, r3, #15
 800c970:	6879      	ldr	r1, [r7, #4]
 800c972:	4613      	mov	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4413      	add	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	440b      	add	r3, r1
 800c97c:	3318      	adds	r3, #24
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d117      	bne.n	800c9b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c984:	6839      	ldr	r1, [r7, #0]
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 fb7c 	bl	800d084 <USBD_CtlError>
                  break;
 800c98c:	e054      	b.n	800ca38 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c98e:	7bbb      	ldrb	r3, [r7, #14]
 800c990:	f003 020f 	and.w	r2, r3, #15
 800c994:	6879      	ldr	r1, [r7, #4]
 800c996:	4613      	mov	r3, r2
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	4413      	add	r3, r2
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	440b      	add	r3, r1
 800c9a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d104      	bne.n	800c9b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fb69 	bl	800d084 <USBD_CtlError>
                  break;
 800c9b2:	e041      	b.n	800ca38 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	da0b      	bge.n	800c9d4 <USBD_StdEPReq+0x240>
 800c9bc:	7bbb      	ldrb	r3, [r7, #14]
 800c9be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	4413      	add	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	3310      	adds	r3, #16
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	e00b      	b.n	800c9ec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c9d4:	7bbb      	ldrb	r3, [r7, #14]
 800c9d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9da:	4613      	mov	r3, r2
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	4413      	add	r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	3304      	adds	r3, #4
 800c9ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c9ee:	7bbb      	ldrb	r3, [r7, #14]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d002      	beq.n	800c9fa <USBD_StdEPReq+0x266>
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
 800c9f6:	2b80      	cmp	r3, #128	; 0x80
 800c9f8:	d103      	bne.n	800ca02 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	e00e      	b.n	800ca20 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ca02:	7bbb      	ldrb	r3, [r7, #14]
 800ca04:	4619      	mov	r1, r3
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f008 ffea 	bl	80159e0 <USBD_LL_IsStallEP>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d003      	beq.n	800ca1a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	2201      	movs	r2, #1
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	e002      	b.n	800ca20 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	2202      	movs	r2, #2
 800ca24:	4619      	mov	r1, r3
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 fb97 	bl	800d15a <USBD_CtlSendData>
              break;
 800ca2c:	e004      	b.n	800ca38 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ca2e:	6839      	ldr	r1, [r7, #0]
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 fb27 	bl	800d084 <USBD_CtlError>
              break;
 800ca36:	bf00      	nop
          }
          break;
 800ca38:	e004      	b.n	800ca44 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 fb21 	bl	800d084 <USBD_CtlError>
          break;
 800ca42:	bf00      	nop
      }
      break;
 800ca44:	e004      	b.n	800ca50 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fb1b 	bl	800d084 <USBD_CtlError>
      break;
 800ca4e:	bf00      	nop
  }

  return ret;
 800ca50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
	...

0800ca5c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ca66:	2300      	movs	r3, #0
 800ca68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	885b      	ldrh	r3, [r3, #2]
 800ca76:	0a1b      	lsrs	r3, r3, #8
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	2b06      	cmp	r3, #6
 800ca7e:	f200 8128 	bhi.w	800ccd2 <USBD_GetDescriptor+0x276>
 800ca82:	a201      	add	r2, pc, #4	; (adr r2, 800ca88 <USBD_GetDescriptor+0x2c>)
 800ca84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca88:	0800caa5 	.word	0x0800caa5
 800ca8c:	0800cabd 	.word	0x0800cabd
 800ca90:	0800cafd 	.word	0x0800cafd
 800ca94:	0800ccd3 	.word	0x0800ccd3
 800ca98:	0800ccd3 	.word	0x0800ccd3
 800ca9c:	0800cc73 	.word	0x0800cc73
 800caa0:	0800cc9f 	.word	0x0800cc9f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	7c12      	ldrb	r2, [r2, #16]
 800cab0:	f107 0108 	add.w	r1, r7, #8
 800cab4:	4610      	mov	r0, r2
 800cab6:	4798      	blx	r3
 800cab8:	60f8      	str	r0, [r7, #12]
      break;
 800caba:	e112      	b.n	800cce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	7c1b      	ldrb	r3, [r3, #16]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10d      	bne.n	800cae0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cacc:	f107 0208 	add.w	r2, r7, #8
 800cad0:	4610      	mov	r0, r2
 800cad2:	4798      	blx	r3
 800cad4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	3301      	adds	r3, #1
 800cada:	2202      	movs	r2, #2
 800cadc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cade:	e100      	b.n	800cce2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae8:	f107 0208 	add.w	r2, r7, #8
 800caec:	4610      	mov	r0, r2
 800caee:	4798      	blx	r3
 800caf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	3301      	adds	r3, #1
 800caf6:	2202      	movs	r2, #2
 800caf8:	701a      	strb	r2, [r3, #0]
      break;
 800cafa:	e0f2      	b.n	800cce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	885b      	ldrh	r3, [r3, #2]
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	2b05      	cmp	r3, #5
 800cb04:	f200 80ac 	bhi.w	800cc60 <USBD_GetDescriptor+0x204>
 800cb08:	a201      	add	r2, pc, #4	; (adr r2, 800cb10 <USBD_GetDescriptor+0xb4>)
 800cb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0e:	bf00      	nop
 800cb10:	0800cb29 	.word	0x0800cb29
 800cb14:	0800cb5d 	.word	0x0800cb5d
 800cb18:	0800cb91 	.word	0x0800cb91
 800cb1c:	0800cbc5 	.word	0x0800cbc5
 800cb20:	0800cbf9 	.word	0x0800cbf9
 800cb24:	0800cc2d 	.word	0x0800cc2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00b      	beq.n	800cb4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	7c12      	ldrb	r2, [r2, #16]
 800cb40:	f107 0108 	add.w	r1, r7, #8
 800cb44:	4610      	mov	r0, r2
 800cb46:	4798      	blx	r3
 800cb48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb4a:	e091      	b.n	800cc70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb4c:	6839      	ldr	r1, [r7, #0]
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fa98 	bl	800d084 <USBD_CtlError>
            err++;
 800cb54:	7afb      	ldrb	r3, [r7, #11]
 800cb56:	3301      	adds	r3, #1
 800cb58:	72fb      	strb	r3, [r7, #11]
          break;
 800cb5a:	e089      	b.n	800cc70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00b      	beq.n	800cb80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	7c12      	ldrb	r2, [r2, #16]
 800cb74:	f107 0108 	add.w	r1, r7, #8
 800cb78:	4610      	mov	r0, r2
 800cb7a:	4798      	blx	r3
 800cb7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb7e:	e077      	b.n	800cc70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fa7e 	bl	800d084 <USBD_CtlError>
            err++;
 800cb88:	7afb      	ldrb	r3, [r7, #11]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	72fb      	strb	r3, [r7, #11]
          break;
 800cb8e:	e06f      	b.n	800cc70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00b      	beq.n	800cbb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	7c12      	ldrb	r2, [r2, #16]
 800cba8:	f107 0108 	add.w	r1, r7, #8
 800cbac:	4610      	mov	r0, r2
 800cbae:	4798      	blx	r3
 800cbb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbb2:	e05d      	b.n	800cc70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbb4:	6839      	ldr	r1, [r7, #0]
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 fa64 	bl	800d084 <USBD_CtlError>
            err++;
 800cbbc:	7afb      	ldrb	r3, [r7, #11]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	72fb      	strb	r3, [r7, #11]
          break;
 800cbc2:	e055      	b.n	800cc70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00b      	beq.n	800cbe8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cbd6:	691b      	ldr	r3, [r3, #16]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	7c12      	ldrb	r2, [r2, #16]
 800cbdc:	f107 0108 	add.w	r1, r7, #8
 800cbe0:	4610      	mov	r0, r2
 800cbe2:	4798      	blx	r3
 800cbe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbe6:	e043      	b.n	800cc70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbe8:	6839      	ldr	r1, [r7, #0]
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fa4a 	bl	800d084 <USBD_CtlError>
            err++;
 800cbf0:	7afb      	ldrb	r3, [r7, #11]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	72fb      	strb	r3, [r7, #11]
          break;
 800cbf6:	e03b      	b.n	800cc70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cbfe:	695b      	ldr	r3, [r3, #20]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00b      	beq.n	800cc1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	7c12      	ldrb	r2, [r2, #16]
 800cc10:	f107 0108 	add.w	r1, r7, #8
 800cc14:	4610      	mov	r0, r2
 800cc16:	4798      	blx	r3
 800cc18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc1a:	e029      	b.n	800cc70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc1c:	6839      	ldr	r1, [r7, #0]
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fa30 	bl	800d084 <USBD_CtlError>
            err++;
 800cc24:	7afb      	ldrb	r3, [r7, #11]
 800cc26:	3301      	adds	r3, #1
 800cc28:	72fb      	strb	r3, [r7, #11]
          break;
 800cc2a:	e021      	b.n	800cc70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc32:	699b      	ldr	r3, [r3, #24]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00b      	beq.n	800cc50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc3e:	699b      	ldr	r3, [r3, #24]
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	7c12      	ldrb	r2, [r2, #16]
 800cc44:	f107 0108 	add.w	r1, r7, #8
 800cc48:	4610      	mov	r0, r2
 800cc4a:	4798      	blx	r3
 800cc4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc4e:	e00f      	b.n	800cc70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc50:	6839      	ldr	r1, [r7, #0]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 fa16 	bl	800d084 <USBD_CtlError>
            err++;
 800cc58:	7afb      	ldrb	r3, [r7, #11]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	72fb      	strb	r3, [r7, #11]
          break;
 800cc5e:	e007      	b.n	800cc70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800cc60:	6839      	ldr	r1, [r7, #0]
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fa0e 	bl	800d084 <USBD_CtlError>
          err++;
 800cc68:	7afb      	ldrb	r3, [r7, #11]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800cc6e:	e038      	b.n	800cce2 <USBD_GetDescriptor+0x286>
 800cc70:	e037      	b.n	800cce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	7c1b      	ldrb	r3, [r3, #16]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d109      	bne.n	800cc8e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc82:	f107 0208 	add.w	r2, r7, #8
 800cc86:	4610      	mov	r0, r2
 800cc88:	4798      	blx	r3
 800cc8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc8c:	e029      	b.n	800cce2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cc8e:	6839      	ldr	r1, [r7, #0]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 f9f7 	bl	800d084 <USBD_CtlError>
        err++;
 800cc96:	7afb      	ldrb	r3, [r7, #11]
 800cc98:	3301      	adds	r3, #1
 800cc9a:	72fb      	strb	r3, [r7, #11]
      break;
 800cc9c:	e021      	b.n	800cce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	7c1b      	ldrb	r3, [r3, #16]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d10d      	bne.n	800ccc2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccae:	f107 0208 	add.w	r2, r7, #8
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	4798      	blx	r3
 800ccb6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	2207      	movs	r2, #7
 800ccbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ccc0:	e00f      	b.n	800cce2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ccc2:	6839      	ldr	r1, [r7, #0]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 f9dd 	bl	800d084 <USBD_CtlError>
        err++;
 800ccca:	7afb      	ldrb	r3, [r7, #11]
 800cccc:	3301      	adds	r3, #1
 800ccce:	72fb      	strb	r3, [r7, #11]
      break;
 800ccd0:	e007      	b.n	800cce2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ccd2:	6839      	ldr	r1, [r7, #0]
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 f9d5 	bl	800d084 <USBD_CtlError>
      err++;
 800ccda:	7afb      	ldrb	r3, [r7, #11]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	72fb      	strb	r3, [r7, #11]
      break;
 800cce0:	bf00      	nop
  }

  if (err != 0U)
 800cce2:	7afb      	ldrb	r3, [r7, #11]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d11c      	bne.n	800cd22 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800cce8:	893b      	ldrh	r3, [r7, #8]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d011      	beq.n	800cd12 <USBD_GetDescriptor+0x2b6>
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	88db      	ldrh	r3, [r3, #6]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00d      	beq.n	800cd12 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	88da      	ldrh	r2, [r3, #6]
 800ccfa:	893b      	ldrh	r3, [r7, #8]
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	bf28      	it	cs
 800cd00:	4613      	movcs	r3, r2
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cd06:	893b      	ldrh	r3, [r7, #8]
 800cd08:	461a      	mov	r2, r3
 800cd0a:	68f9      	ldr	r1, [r7, #12]
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 fa24 	bl	800d15a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	88db      	ldrh	r3, [r3, #6]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d104      	bne.n	800cd24 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 fa7b 	bl	800d216 <USBD_CtlSendStatus>
 800cd20:	e000      	b.n	800cd24 <USBD_GetDescriptor+0x2c8>
    return;
 800cd22:	bf00      	nop
    }
  }
}
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop

0800cd2c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	889b      	ldrh	r3, [r3, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d130      	bne.n	800cda0 <USBD_SetAddress+0x74>
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	88db      	ldrh	r3, [r3, #6]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d12c      	bne.n	800cda0 <USBD_SetAddress+0x74>
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	885b      	ldrh	r3, [r3, #2]
 800cd4a:	2b7f      	cmp	r3, #127	; 0x7f
 800cd4c:	d828      	bhi.n	800cda0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	885b      	ldrh	r3, [r3, #2]
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd60:	2b03      	cmp	r3, #3
 800cd62:	d104      	bne.n	800cd6e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 f98c 	bl	800d084 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd6c:	e01d      	b.n	800cdaa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	7bfa      	ldrb	r2, [r7, #15]
 800cd72:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cd76:	7bfb      	ldrb	r3, [r7, #15]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f008 fe5d 	bl	8015a3a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 fa48 	bl	800d216 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d004      	beq.n	800cd96 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2202      	movs	r2, #2
 800cd90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd94:	e009      	b.n	800cdaa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd9e:	e004      	b.n	800cdaa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cda0:	6839      	ldr	r1, [r7, #0]
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 f96e 	bl	800d084 <USBD_CtlError>
  }
}
 800cda8:	bf00      	nop
 800cdaa:	bf00      	nop
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
	...

0800cdb4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	885b      	ldrh	r3, [r3, #2]
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	4b41      	ldr	r3, [pc, #260]	; (800cecc <USBD_SetConfig+0x118>)
 800cdc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cdc8:	4b40      	ldr	r3, [pc, #256]	; (800cecc <USBD_SetConfig+0x118>)
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d904      	bls.n	800cdda <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800cdd0:	6839      	ldr	r1, [r7, #0]
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 f956 	bl	800d084 <USBD_CtlError>
 800cdd8:	e075      	b.n	800cec6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d002      	beq.n	800cdea <USBD_SetConfig+0x36>
 800cde4:	2b03      	cmp	r3, #3
 800cde6:	d023      	beq.n	800ce30 <USBD_SetConfig+0x7c>
 800cde8:	e062      	b.n	800ceb0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800cdea:	4b38      	ldr	r3, [pc, #224]	; (800cecc <USBD_SetConfig+0x118>)
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d01a      	beq.n	800ce28 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800cdf2:	4b36      	ldr	r3, [pc, #216]	; (800cecc <USBD_SetConfig+0x118>)
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2203      	movs	r2, #3
 800ce00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ce04:	4b31      	ldr	r3, [pc, #196]	; (800cecc <USBD_SetConfig+0x118>)
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7ff f9e4 	bl	800c1d8 <USBD_SetClassConfig>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b02      	cmp	r3, #2
 800ce14:	d104      	bne.n	800ce20 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ce16:	6839      	ldr	r1, [r7, #0]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f933 	bl	800d084 <USBD_CtlError>
            return;
 800ce1e:	e052      	b.n	800cec6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 f9f8 	bl	800d216 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ce26:	e04e      	b.n	800cec6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 f9f4 	bl	800d216 <USBD_CtlSendStatus>
        break;
 800ce2e:	e04a      	b.n	800cec6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ce30:	4b26      	ldr	r3, [pc, #152]	; (800cecc <USBD_SetConfig+0x118>)
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d112      	bne.n	800ce5e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2202      	movs	r2, #2
 800ce3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ce40:	4b22      	ldr	r3, [pc, #136]	; (800cecc <USBD_SetConfig+0x118>)
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	461a      	mov	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ce4a:	4b20      	ldr	r3, [pc, #128]	; (800cecc <USBD_SetConfig+0x118>)
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	4619      	mov	r1, r3
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f7ff f9e0 	bl	800c216 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 f9dd 	bl	800d216 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ce5c:	e033      	b.n	800cec6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ce5e:	4b1b      	ldr	r3, [pc, #108]	; (800cecc <USBD_SetConfig+0x118>)
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d01d      	beq.n	800cea8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7ff f9ce 	bl	800c216 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ce7a:	4b14      	ldr	r3, [pc, #80]	; (800cecc <USBD_SetConfig+0x118>)
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ce84:	4b11      	ldr	r3, [pc, #68]	; (800cecc <USBD_SetConfig+0x118>)
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	4619      	mov	r1, r3
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7ff f9a4 	bl	800c1d8 <USBD_SetClassConfig>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	d104      	bne.n	800cea0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ce96:	6839      	ldr	r1, [r7, #0]
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 f8f3 	bl	800d084 <USBD_CtlError>
            return;
 800ce9e:	e012      	b.n	800cec6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 f9b8 	bl	800d216 <USBD_CtlSendStatus>
        break;
 800cea6:	e00e      	b.n	800cec6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f9b4 	bl	800d216 <USBD_CtlSendStatus>
        break;
 800ceae:	e00a      	b.n	800cec6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 f8e6 	bl	800d084 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ceb8:	4b04      	ldr	r3, [pc, #16]	; (800cecc <USBD_SetConfig+0x118>)
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	4619      	mov	r1, r3
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7ff f9a9 	bl	800c216 <USBD_ClrClassConfig>
        break;
 800cec4:	bf00      	nop
    }
  }
}
 800cec6:	3708      	adds	r7, #8
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	200004f8 	.word	0x200004f8

0800ced0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	88db      	ldrh	r3, [r3, #6]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d004      	beq.n	800ceec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cee2:	6839      	ldr	r1, [r7, #0]
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 f8cd 	bl	800d084 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ceea:	e022      	b.n	800cf32 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	dc02      	bgt.n	800cefc <USBD_GetConfig+0x2c>
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	dc03      	bgt.n	800cf02 <USBD_GetConfig+0x32>
 800cefa:	e015      	b.n	800cf28 <USBD_GetConfig+0x58>
 800cefc:	2b03      	cmp	r3, #3
 800cefe:	d00b      	beq.n	800cf18 <USBD_GetConfig+0x48>
 800cf00:	e012      	b.n	800cf28 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2200      	movs	r2, #0
 800cf06:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	3308      	adds	r3, #8
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	4619      	mov	r1, r3
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 f922 	bl	800d15a <USBD_CtlSendData>
        break;
 800cf16:	e00c      	b.n	800cf32 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	4619      	mov	r1, r3
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f91a 	bl	800d15a <USBD_CtlSendData>
        break;
 800cf26:	e004      	b.n	800cf32 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800cf28:	6839      	ldr	r1, [r7, #0]
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 f8aa 	bl	800d084 <USBD_CtlError>
        break;
 800cf30:	bf00      	nop
}
 800cf32:	bf00      	nop
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b082      	sub	sp, #8
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d81e      	bhi.n	800cf8e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	88db      	ldrh	r3, [r3, #6]
 800cf54:	2b02      	cmp	r3, #2
 800cf56:	d004      	beq.n	800cf62 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800cf58:	6839      	ldr	r1, [r7, #0]
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 f892 	bl	800d084 <USBD_CtlError>
        break;
 800cf60:	e01a      	b.n	800cf98 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2201      	movs	r2, #1
 800cf66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d005      	beq.n	800cf7e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	f043 0202 	orr.w	r2, r3, #2
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	330c      	adds	r3, #12
 800cf82:	2202      	movs	r2, #2
 800cf84:	4619      	mov	r1, r3
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 f8e7 	bl	800d15a <USBD_CtlSendData>
      break;
 800cf8c:	e004      	b.n	800cf98 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800cf8e:	6839      	ldr	r1, [r7, #0]
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 f877 	bl	800d084 <USBD_CtlError>
      break;
 800cf96:	bf00      	nop
  }
}
 800cf98:	bf00      	nop
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	885b      	ldrh	r3, [r3, #2]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d106      	bne.n	800cfc0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 f92b 	bl	800d216 <USBD_CtlSendStatus>
  }
}
 800cfc0:	bf00      	nop
 800cfc2:	3708      	adds	r7, #8
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	d80b      	bhi.n	800cff6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	885b      	ldrh	r3, [r3, #2]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d10c      	bne.n	800d000 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 f911 	bl	800d216 <USBD_CtlSendStatus>
      }
      break;
 800cff4:	e004      	b.n	800d000 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cff6:	6839      	ldr	r1, [r7, #0]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f843 	bl	800d084 <USBD_CtlError>
      break;
 800cffe:	e000      	b.n	800d002 <USBD_ClrFeature+0x3a>
      break;
 800d000:	bf00      	nop
  }
}
 800d002:	bf00      	nop
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d00a:	b480      	push	{r7}
 800d00c:	b083      	sub	sp, #12
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
 800d012:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	781a      	ldrb	r2, [r3, #0]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	785a      	ldrb	r2, [r3, #1]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	3302      	adds	r3, #2
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	3303      	adds	r3, #3
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	b29b      	uxth	r3, r3
 800d034:	021b      	lsls	r3, r3, #8
 800d036:	b29b      	uxth	r3, r3
 800d038:	4413      	add	r3, r2
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	3304      	adds	r3, #4
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	b29a      	uxth	r2, r3
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	3305      	adds	r3, #5
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	b29b      	uxth	r3, r3
 800d050:	021b      	lsls	r3, r3, #8
 800d052:	b29b      	uxth	r3, r3
 800d054:	4413      	add	r3, r2
 800d056:	b29a      	uxth	r2, r3
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	3306      	adds	r3, #6
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	b29a      	uxth	r2, r3
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	3307      	adds	r3, #7
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	021b      	lsls	r3, r3, #8
 800d06e:	b29b      	uxth	r3, r3
 800d070:	4413      	add	r3, r2
 800d072:	b29a      	uxth	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	80da      	strh	r2, [r3, #6]

}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d08e:	2180      	movs	r1, #128	; 0x80
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f008 fc67 	bl	8015964 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d096:	2100      	movs	r1, #0
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f008 fc63 	bl	8015964 <USBD_LL_StallEP>
}
 800d09e:	bf00      	nop
 800d0a0:	3708      	adds	r7, #8
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b086      	sub	sp, #24
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	60f8      	str	r0, [r7, #12]
 800d0ae:	60b9      	str	r1, [r7, #8]
 800d0b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d032      	beq.n	800d122 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	f000 f834 	bl	800d12a <USBD_GetLen>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	005b      	lsls	r3, r3, #1
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d0d0:	7dfb      	ldrb	r3, [r7, #23]
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	75fa      	strb	r2, [r7, #23]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	4413      	add	r3, r2
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	7812      	ldrb	r2, [r2, #0]
 800d0e0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d0e2:	7dfb      	ldrb	r3, [r7, #23]
 800d0e4:	1c5a      	adds	r2, r3, #1
 800d0e6:	75fa      	strb	r2, [r7, #23]
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	2203      	movs	r2, #3
 800d0f0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d0f2:	e012      	b.n	800d11a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	1c5a      	adds	r2, r3, #1
 800d0f8:	60fa      	str	r2, [r7, #12]
 800d0fa:	7dfa      	ldrb	r2, [r7, #23]
 800d0fc:	1c51      	adds	r1, r2, #1
 800d0fe:	75f9      	strb	r1, [r7, #23]
 800d100:	4611      	mov	r1, r2
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	440a      	add	r2, r1
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d10a:	7dfb      	ldrb	r3, [r7, #23]
 800d10c:	1c5a      	adds	r2, r3, #1
 800d10e:	75fa      	strb	r2, [r7, #23]
 800d110:	461a      	mov	r2, r3
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	4413      	add	r3, r2
 800d116:	2200      	movs	r2, #0
 800d118:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d1e8      	bne.n	800d0f4 <USBD_GetString+0x4e>
    }
  }
}
 800d122:	bf00      	nop
 800d124:	3718      	adds	r7, #24
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d12a:	b480      	push	{r7}
 800d12c:	b085      	sub	sp, #20
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d132:	2300      	movs	r3, #0
 800d134:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800d136:	e005      	b.n	800d144 <USBD_GetLen+0x1a>
  {
    len++;
 800d138:	7bfb      	ldrb	r3, [r7, #15]
 800d13a:	3301      	adds	r3, #1
 800d13c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	3301      	adds	r3, #1
 800d142:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1f5      	bne.n	800d138 <USBD_GetLen+0xe>
  }

  return len;
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3714      	adds	r7, #20
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr

0800d15a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b084      	sub	sp, #16
 800d15e:	af00      	add	r7, sp, #0
 800d160:	60f8      	str	r0, [r7, #12]
 800d162:	60b9      	str	r1, [r7, #8]
 800d164:	4613      	mov	r3, r2
 800d166:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2202      	movs	r2, #2
 800d16c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d170:	88fa      	ldrh	r2, [r7, #6]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d176:	88fa      	ldrh	r2, [r7, #6]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d17c:	88fb      	ldrh	r3, [r7, #6]
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	2100      	movs	r1, #0
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f008 fc78 	bl	8015a78 <USBD_LL_Transmit>

  return USBD_OK;
 800d188:	2300      	movs	r3, #0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b084      	sub	sp, #16
 800d196:	af00      	add	r7, sp, #0
 800d198:	60f8      	str	r0, [r7, #12]
 800d19a:	60b9      	str	r1, [r7, #8]
 800d19c:	4613      	mov	r3, r2
 800d19e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d1a0:	88fb      	ldrh	r3, [r7, #6]
 800d1a2:	68ba      	ldr	r2, [r7, #8]
 800d1a4:	2100      	movs	r1, #0
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f008 fc66 	bl	8015a78 <USBD_LL_Transmit>

  return USBD_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	60f8      	str	r0, [r7, #12]
 800d1be:	60b9      	str	r1, [r7, #8]
 800d1c0:	4613      	mov	r3, r2
 800d1c2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2203      	movs	r2, #3
 800d1c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d1cc:	88fa      	ldrh	r2, [r7, #6]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800d1d4:	88fa      	ldrh	r2, [r7, #6]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d1dc:	88fb      	ldrh	r3, [r7, #6]
 800d1de:	68ba      	ldr	r2, [r7, #8]
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	68f8      	ldr	r0, [r7, #12]
 800d1e4:	f008 fc6b 	bl	8015abe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b084      	sub	sp, #16
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	60f8      	str	r0, [r7, #12]
 800d1fa:	60b9      	str	r1, [r7, #8]
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d200:	88fb      	ldrh	r3, [r7, #6]
 800d202:	68ba      	ldr	r2, [r7, #8]
 800d204:	2100      	movs	r1, #0
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f008 fc59 	bl	8015abe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d20c:	2300      	movs	r3, #0
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d216:	b580      	push	{r7, lr}
 800d218:	b082      	sub	sp, #8
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2204      	movs	r2, #4
 800d222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d226:	2300      	movs	r3, #0
 800d228:	2200      	movs	r2, #0
 800d22a:	2100      	movs	r1, #0
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f008 fc23 	bl	8015a78 <USBD_LL_Transmit>

  return USBD_OK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3708      	adds	r7, #8
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2205      	movs	r2, #5
 800d248:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d24c:	2300      	movs	r3, #0
 800d24e:	2200      	movs	r2, #0
 800d250:	2100      	movs	r1, #0
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f008 fc33 	bl	8015abe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
	...

0800d264 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d26a:	f3ef 8305 	mrs	r3, IPSR
 800d26e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d270:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d272:	2b00      	cmp	r3, #0
 800d274:	d10f      	bne.n	800d296 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d276:	f3ef 8310 	mrs	r3, PRIMASK
 800d27a:	607b      	str	r3, [r7, #4]
  return(result);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d109      	bne.n	800d296 <osKernelInitialize+0x32>
 800d282:	4b11      	ldr	r3, [pc, #68]	; (800d2c8 <osKernelInitialize+0x64>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b02      	cmp	r3, #2
 800d288:	d109      	bne.n	800d29e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d28a:	f3ef 8311 	mrs	r3, BASEPRI
 800d28e:	603b      	str	r3, [r7, #0]
  return(result);
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d003      	beq.n	800d29e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d296:	f06f 0305 	mvn.w	r3, #5
 800d29a:	60fb      	str	r3, [r7, #12]
 800d29c:	e00c      	b.n	800d2b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d29e:	4b0a      	ldr	r3, [pc, #40]	; (800d2c8 <osKernelInitialize+0x64>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d105      	bne.n	800d2b2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800d2a6:	4b08      	ldr	r3, [pc, #32]	; (800d2c8 <osKernelInitialize+0x64>)
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	60fb      	str	r3, [r7, #12]
 800d2b0:	e002      	b.n	800d2b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3714      	adds	r7, #20
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr
 800d2c6:	bf00      	nop
 800d2c8:	200004fc 	.word	0x200004fc

0800d2cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b084      	sub	sp, #16
 800d2d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2d2:	f3ef 8305 	mrs	r3, IPSR
 800d2d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d2d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d10f      	bne.n	800d2fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2de:	f3ef 8310 	mrs	r3, PRIMASK
 800d2e2:	607b      	str	r3, [r7, #4]
  return(result);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d109      	bne.n	800d2fe <osKernelStart+0x32>
 800d2ea:	4b11      	ldr	r3, [pc, #68]	; (800d330 <osKernelStart+0x64>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	d109      	bne.n	800d306 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d2f2:	f3ef 8311 	mrs	r3, BASEPRI
 800d2f6:	603b      	str	r3, [r7, #0]
  return(result);
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d003      	beq.n	800d306 <osKernelStart+0x3a>
    stat = osErrorISR;
 800d2fe:	f06f 0305 	mvn.w	r3, #5
 800d302:	60fb      	str	r3, [r7, #12]
 800d304:	e00e      	b.n	800d324 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800d306:	4b0a      	ldr	r3, [pc, #40]	; (800d330 <osKernelStart+0x64>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d107      	bne.n	800d31e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800d30e:	4b08      	ldr	r3, [pc, #32]	; (800d330 <osKernelStart+0x64>)
 800d310:	2202      	movs	r2, #2
 800d312:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800d314:	f001 fb4e 	bl	800e9b4 <vTaskStartScheduler>
      stat = osOK;
 800d318:	2300      	movs	r3, #0
 800d31a:	60fb      	str	r3, [r7, #12]
 800d31c:	e002      	b.n	800d324 <osKernelStart+0x58>
    } else {
      stat = osError;
 800d31e:	f04f 33ff 	mov.w	r3, #4294967295
 800d322:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d324:	68fb      	ldr	r3, [r7, #12]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3710      	adds	r7, #16
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	200004fc 	.word	0x200004fc

0800d334 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d334:	b580      	push	{r7, lr}
 800d336:	b092      	sub	sp, #72	; 0x48
 800d338:	af04      	add	r7, sp, #16
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d340:	2300      	movs	r3, #0
 800d342:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d344:	f3ef 8305 	mrs	r3, IPSR
 800d348:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f040 8094 	bne.w	800d47a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d352:	f3ef 8310 	mrs	r3, PRIMASK
 800d356:	623b      	str	r3, [r7, #32]
  return(result);
 800d358:	6a3b      	ldr	r3, [r7, #32]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f040 808d 	bne.w	800d47a <osThreadNew+0x146>
 800d360:	4b48      	ldr	r3, [pc, #288]	; (800d484 <osThreadNew+0x150>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b02      	cmp	r3, #2
 800d366:	d106      	bne.n	800d376 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d368:	f3ef 8311 	mrs	r3, BASEPRI
 800d36c:	61fb      	str	r3, [r7, #28]
  return(result);
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	2b00      	cmp	r3, #0
 800d372:	f040 8082 	bne.w	800d47a <osThreadNew+0x146>
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d07e      	beq.n	800d47a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800d37c:	2380      	movs	r3, #128	; 0x80
 800d37e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800d380:	2318      	movs	r3, #24
 800d382:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800d384:	2300      	movs	r3, #0
 800d386:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800d388:	f107 031b 	add.w	r3, r7, #27
 800d38c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800d38e:	f04f 33ff 	mov.w	r3, #4294967295
 800d392:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d045      	beq.n	800d426 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d002      	beq.n	800d3a8 <osThreadNew+0x74>
        name = attr->name;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	699b      	ldr	r3, [r3, #24]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	699b      	ldr	r3, [r3, #24]
 800d3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d008      	beq.n	800d3ce <osThreadNew+0x9a>
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	2b38      	cmp	r3, #56	; 0x38
 800d3c0:	d805      	bhi.n	800d3ce <osThreadNew+0x9a>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	f003 0301 	and.w	r3, r3, #1
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d001      	beq.n	800d3d2 <osThreadNew+0x9e>
        return (NULL);
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	e054      	b.n	800d47c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	695b      	ldr	r3, [r3, #20]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d003      	beq.n	800d3e2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	695b      	ldr	r3, [r3, #20]
 800d3de:	089b      	lsrs	r3, r3, #2
 800d3e0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00e      	beq.n	800d408 <osThreadNew+0xd4>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	2b5f      	cmp	r3, #95	; 0x5f
 800d3f0:	d90a      	bls.n	800d408 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d006      	beq.n	800d408 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	695b      	ldr	r3, [r3, #20]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d002      	beq.n	800d408 <osThreadNew+0xd4>
        mem = 1;
 800d402:	2301      	movs	r3, #1
 800d404:	62bb      	str	r3, [r7, #40]	; 0x28
 800d406:	e010      	b.n	800d42a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10c      	bne.n	800d42a <osThreadNew+0xf6>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d108      	bne.n	800d42a <osThreadNew+0xf6>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d104      	bne.n	800d42a <osThreadNew+0xf6>
          mem = 0;
 800d420:	2300      	movs	r3, #0
 800d422:	62bb      	str	r3, [r7, #40]	; 0x28
 800d424:	e001      	b.n	800d42a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800d42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d110      	bne.n	800d452 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d438:	9202      	str	r2, [sp, #8]
 800d43a:	9301      	str	r3, [sp, #4]
 800d43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d444:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f001 f8e4 	bl	800e614 <xTaskCreateStatic>
 800d44c:	4603      	mov	r3, r0
 800d44e:	617b      	str	r3, [r7, #20]
 800d450:	e013      	b.n	800d47a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800d452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d454:	2b00      	cmp	r3, #0
 800d456:	d110      	bne.n	800d47a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	f107 0314 	add.w	r3, r7, #20
 800d460:	9301      	str	r3, [sp, #4]
 800d462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f001 f92e 	bl	800e6cc <xTaskCreate>
 800d470:	4603      	mov	r3, r0
 800d472:	2b01      	cmp	r3, #1
 800d474:	d001      	beq.n	800d47a <osThreadNew+0x146>
          hTask = NULL;
 800d476:	2300      	movs	r3, #0
 800d478:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d47a:	697b      	ldr	r3, [r7, #20]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3738      	adds	r7, #56	; 0x38
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	200004fc 	.word	0x200004fc

0800d488 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d490:	f3ef 8305 	mrs	r3, IPSR
 800d494:	613b      	str	r3, [r7, #16]
  return(result);
 800d496:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10f      	bne.n	800d4bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d49c:	f3ef 8310 	mrs	r3, PRIMASK
 800d4a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d109      	bne.n	800d4bc <osDelay+0x34>
 800d4a8:	4b0d      	ldr	r3, [pc, #52]	; (800d4e0 <osDelay+0x58>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d109      	bne.n	800d4c4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d4b0:	f3ef 8311 	mrs	r3, BASEPRI
 800d4b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d003      	beq.n	800d4c4 <osDelay+0x3c>
    stat = osErrorISR;
 800d4bc:	f06f 0305 	mvn.w	r3, #5
 800d4c0:	617b      	str	r3, [r7, #20]
 800d4c2:	e007      	b.n	800d4d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d002      	beq.n	800d4d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f001 fa3c 	bl	800e94c <vTaskDelay>
    }
  }

  return (stat);
 800d4d4:	697b      	ldr	r3, [r7, #20]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3718      	adds	r7, #24
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	200004fc 	.word	0x200004fc

0800d4e4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b08c      	sub	sp, #48	; 0x30
 800d4e8:	af02      	add	r7, sp, #8
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4f4:	f3ef 8305 	mrs	r3, IPSR
 800d4f8:	61bb      	str	r3, [r7, #24]
  return(result);
 800d4fa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d16f      	bne.n	800d5e0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d500:	f3ef 8310 	mrs	r3, PRIMASK
 800d504:	617b      	str	r3, [r7, #20]
  return(result);
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d169      	bne.n	800d5e0 <osMessageQueueNew+0xfc>
 800d50c:	4b37      	ldr	r3, [pc, #220]	; (800d5ec <osMessageQueueNew+0x108>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2b02      	cmp	r3, #2
 800d512:	d105      	bne.n	800d520 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d514:	f3ef 8311 	mrs	r3, BASEPRI
 800d518:	613b      	str	r3, [r7, #16]
  return(result);
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d15f      	bne.n	800d5e0 <osMessageQueueNew+0xfc>
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d05c      	beq.n	800d5e0 <osMessageQueueNew+0xfc>
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d059      	beq.n	800d5e0 <osMessageQueueNew+0xfc>
    mem = -1;
 800d52c:	f04f 33ff 	mov.w	r3, #4294967295
 800d530:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d029      	beq.n	800d58c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d012      	beq.n	800d566 <osMessageQueueNew+0x82>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	2b4f      	cmp	r3, #79	; 0x4f
 800d546:	d90e      	bls.n	800d566 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00a      	beq.n	800d566 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	695a      	ldr	r2, [r3, #20]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	68b9      	ldr	r1, [r7, #8]
 800d558:	fb01 f303 	mul.w	r3, r1, r3
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d302      	bcc.n	800d566 <osMessageQueueNew+0x82>
        mem = 1;
 800d560:	2301      	movs	r3, #1
 800d562:	623b      	str	r3, [r7, #32]
 800d564:	e014      	b.n	800d590 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	689b      	ldr	r3, [r3, #8]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d110      	bne.n	800d590 <osMessageQueueNew+0xac>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10c      	bne.n	800d590 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d108      	bne.n	800d590 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	695b      	ldr	r3, [r3, #20]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d104      	bne.n	800d590 <osMessageQueueNew+0xac>
          mem = 0;
 800d586:	2300      	movs	r3, #0
 800d588:	623b      	str	r3, [r7, #32]
 800d58a:	e001      	b.n	800d590 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d590:	6a3b      	ldr	r3, [r7, #32]
 800d592:	2b01      	cmp	r3, #1
 800d594:	d10b      	bne.n	800d5ae <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	691a      	ldr	r2, [r3, #16]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	2100      	movs	r1, #0
 800d5a0:	9100      	str	r1, [sp, #0]
 800d5a2:	68b9      	ldr	r1, [r7, #8]
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f000 fabf 	bl	800db28 <xQueueGenericCreateStatic>
 800d5aa:	6278      	str	r0, [r7, #36]	; 0x24
 800d5ac:	e008      	b.n	800d5c0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800d5ae:	6a3b      	ldr	r3, [r7, #32]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d105      	bne.n	800d5c0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	68b9      	ldr	r1, [r7, #8]
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f000 fb2c 	bl	800dc16 <xQueueGenericCreate>
 800d5be:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d00c      	beq.n	800d5e0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d003      	beq.n	800d5d4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	61fb      	str	r3, [r7, #28]
 800d5d2:	e001      	b.n	800d5d8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d5d8:	69f9      	ldr	r1, [r7, #28]
 800d5da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5dc:	f000 ffbc 	bl	800e558 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3728      	adds	r7, #40	; 0x28
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	200004fc 	.word	0x200004fc

0800d5f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b08a      	sub	sp, #40	; 0x28
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	603b      	str	r3, [r7, #0]
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d604:	2300      	movs	r3, #0
 800d606:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d608:	f3ef 8305 	mrs	r3, IPSR
 800d60c:	61fb      	str	r3, [r7, #28]
  return(result);
 800d60e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10f      	bne.n	800d634 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d614:	f3ef 8310 	mrs	r3, PRIMASK
 800d618:	61bb      	str	r3, [r7, #24]
  return(result);
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d109      	bne.n	800d634 <osMessageQueuePut+0x44>
 800d620:	4b2b      	ldr	r3, [pc, #172]	; (800d6d0 <osMessageQueuePut+0xe0>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b02      	cmp	r3, #2
 800d626:	d12e      	bne.n	800d686 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d628:	f3ef 8311 	mrs	r3, BASEPRI
 800d62c:	617b      	str	r3, [r7, #20]
  return(result);
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d028      	beq.n	800d686 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d634:	6a3b      	ldr	r3, [r7, #32]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d005      	beq.n	800d646 <osMessageQueuePut+0x56>
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <osMessageQueuePut+0x56>
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d003      	beq.n	800d64e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d646:	f06f 0303 	mvn.w	r3, #3
 800d64a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d64c:	e039      	b.n	800d6c2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d64e:	2300      	movs	r3, #0
 800d650:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d652:	f107 0210 	add.w	r2, r7, #16
 800d656:	2300      	movs	r3, #0
 800d658:	68b9      	ldr	r1, [r7, #8]
 800d65a:	6a38      	ldr	r0, [r7, #32]
 800d65c:	f000 fc3a 	bl	800ded4 <xQueueGenericSendFromISR>
 800d660:	4603      	mov	r3, r0
 800d662:	2b01      	cmp	r3, #1
 800d664:	d003      	beq.n	800d66e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d666:	f06f 0302 	mvn.w	r3, #2
 800d66a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d66c:	e029      	b.n	800d6c2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d026      	beq.n	800d6c2 <osMessageQueuePut+0xd2>
 800d674:	4b17      	ldr	r3, [pc, #92]	; (800d6d4 <osMessageQueuePut+0xe4>)
 800d676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d67a:	601a      	str	r2, [r3, #0]
 800d67c:	f3bf 8f4f 	dsb	sy
 800d680:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d684:	e01d      	b.n	800d6c2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d686:	6a3b      	ldr	r3, [r7, #32]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d002      	beq.n	800d692 <osMessageQueuePut+0xa2>
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d103      	bne.n	800d69a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d692:	f06f 0303 	mvn.w	r3, #3
 800d696:	627b      	str	r3, [r7, #36]	; 0x24
 800d698:	e014      	b.n	800d6c4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d69a:	2300      	movs	r3, #0
 800d69c:	683a      	ldr	r2, [r7, #0]
 800d69e:	68b9      	ldr	r1, [r7, #8]
 800d6a0:	6a38      	ldr	r0, [r7, #32]
 800d6a2:	f000 fb19 	bl	800dcd8 <xQueueGenericSend>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d00b      	beq.n	800d6c4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d003      	beq.n	800d6ba <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d6b2:	f06f 0301 	mvn.w	r3, #1
 800d6b6:	627b      	str	r3, [r7, #36]	; 0x24
 800d6b8:	e004      	b.n	800d6c4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d6ba:	f06f 0302 	mvn.w	r3, #2
 800d6be:	627b      	str	r3, [r7, #36]	; 0x24
 800d6c0:	e000      	b.n	800d6c4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d6c2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3728      	adds	r7, #40	; 0x28
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	200004fc 	.word	0x200004fc
 800d6d4:	e000ed04 	.word	0xe000ed04

0800d6d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08a      	sub	sp, #40	; 0x28
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	607a      	str	r2, [r7, #4]
 800d6e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6ee:	f3ef 8305 	mrs	r3, IPSR
 800d6f2:	61fb      	str	r3, [r7, #28]
  return(result);
 800d6f4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d10f      	bne.n	800d71a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6fa:	f3ef 8310 	mrs	r3, PRIMASK
 800d6fe:	61bb      	str	r3, [r7, #24]
  return(result);
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d109      	bne.n	800d71a <osMessageQueueGet+0x42>
 800d706:	4b2b      	ldr	r3, [pc, #172]	; (800d7b4 <osMessageQueueGet+0xdc>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d12e      	bne.n	800d76c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d70e:	f3ef 8311 	mrs	r3, BASEPRI
 800d712:	617b      	str	r3, [r7, #20]
  return(result);
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d028      	beq.n	800d76c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d71a:	6a3b      	ldr	r3, [r7, #32]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d005      	beq.n	800d72c <osMessageQueueGet+0x54>
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d002      	beq.n	800d72c <osMessageQueueGet+0x54>
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d003      	beq.n	800d734 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d72c:	f06f 0303 	mvn.w	r3, #3
 800d730:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d732:	e038      	b.n	800d7a6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d734:	2300      	movs	r3, #0
 800d736:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d738:	f107 0310 	add.w	r3, r7, #16
 800d73c:	461a      	mov	r2, r3
 800d73e:	68b9      	ldr	r1, [r7, #8]
 800d740:	6a38      	ldr	r0, [r7, #32]
 800d742:	f000 fd3f 	bl	800e1c4 <xQueueReceiveFromISR>
 800d746:	4603      	mov	r3, r0
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d003      	beq.n	800d754 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d74c:	f06f 0302 	mvn.w	r3, #2
 800d750:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d752:	e028      	b.n	800d7a6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d025      	beq.n	800d7a6 <osMessageQueueGet+0xce>
 800d75a:	4b17      	ldr	r3, [pc, #92]	; (800d7b8 <osMessageQueueGet+0xe0>)
 800d75c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d760:	601a      	str	r2, [r3, #0]
 800d762:	f3bf 8f4f 	dsb	sy
 800d766:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d76a:	e01c      	b.n	800d7a6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d76c:	6a3b      	ldr	r3, [r7, #32]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d002      	beq.n	800d778 <osMessageQueueGet+0xa0>
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d103      	bne.n	800d780 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d778:	f06f 0303 	mvn.w	r3, #3
 800d77c:	627b      	str	r3, [r7, #36]	; 0x24
 800d77e:	e013      	b.n	800d7a8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d780:	683a      	ldr	r2, [r7, #0]
 800d782:	68b9      	ldr	r1, [r7, #8]
 800d784:	6a38      	ldr	r0, [r7, #32]
 800d786:	f000 fc3d 	bl	800e004 <xQueueReceive>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d00b      	beq.n	800d7a8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d003      	beq.n	800d79e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d796:	f06f 0301 	mvn.w	r3, #1
 800d79a:	627b      	str	r3, [r7, #36]	; 0x24
 800d79c:	e004      	b.n	800d7a8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d79e:	f06f 0302 	mvn.w	r3, #2
 800d7a2:	627b      	str	r3, [r7, #36]	; 0x24
 800d7a4:	e000      	b.n	800d7a8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7a6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3728      	adds	r7, #40	; 0x28
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	200004fc 	.word	0x200004fc
 800d7b8:	e000ed04 	.word	0xe000ed04

0800d7bc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d102      	bne.n	800d7d4 <osMessageQueueGetCount+0x18>
    count = 0U;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	61fb      	str	r3, [r7, #28]
 800d7d2:	e01e      	b.n	800d812 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7d4:	f3ef 8305 	mrs	r3, IPSR
 800d7d8:	617b      	str	r3, [r7, #20]
  return(result);
 800d7da:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d10f      	bne.n	800d800 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d7e4:	613b      	str	r3, [r7, #16]
  return(result);
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d109      	bne.n	800d800 <osMessageQueueGetCount+0x44>
 800d7ec:	4b0b      	ldr	r3, [pc, #44]	; (800d81c <osMessageQueueGetCount+0x60>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	d10a      	bne.n	800d80a <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d7f4:	f3ef 8311 	mrs	r3, BASEPRI
 800d7f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d004      	beq.n	800d80a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800d800:	69b8      	ldr	r0, [r7, #24]
 800d802:	f000 fd7d 	bl	800e300 <uxQueueMessagesWaitingFromISR>
 800d806:	61f8      	str	r0, [r7, #28]
 800d808:	e003      	b.n	800d812 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800d80a:	69b8      	ldr	r0, [r7, #24]
 800d80c:	f000 fd5a 	bl	800e2c4 <uxQueueMessagesWaiting>
 800d810:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800d812:	69fb      	ldr	r3, [r7, #28]
}
 800d814:	4618      	mov	r0, r3
 800d816:	3720      	adds	r7, #32
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	200004fc 	.word	0x200004fc

0800d820 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800d820:	b580      	push	{r7, lr}
 800d822:	b088      	sub	sp, #32
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d82c:	f3ef 8305 	mrs	r3, IPSR
 800d830:	617b      	str	r3, [r7, #20]
  return(result);
 800d832:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d834:	2b00      	cmp	r3, #0
 800d836:	d10f      	bne.n	800d858 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d838:	f3ef 8310 	mrs	r3, PRIMASK
 800d83c:	613b      	str	r3, [r7, #16]
  return(result);
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d109      	bne.n	800d858 <osMessageQueueReset+0x38>
 800d844:	4b0f      	ldr	r3, [pc, #60]	; (800d884 <osMessageQueueReset+0x64>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2b02      	cmp	r3, #2
 800d84a:	d109      	bne.n	800d860 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d84c:	f3ef 8311 	mrs	r3, BASEPRI
 800d850:	60fb      	str	r3, [r7, #12]
  return(result);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d003      	beq.n	800d860 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 800d858:	f06f 0305 	mvn.w	r3, #5
 800d85c:	61fb      	str	r3, [r7, #28]
 800d85e:	e00c      	b.n	800d87a <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d103      	bne.n	800d86e <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 800d866:	f06f 0303 	mvn.w	r3, #3
 800d86a:	61fb      	str	r3, [r7, #28]
 800d86c:	e005      	b.n	800d87a <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800d86e:	2300      	movs	r3, #0
 800d870:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800d872:	2100      	movs	r1, #0
 800d874:	69b8      	ldr	r0, [r7, #24]
 800d876:	f000 f8ef 	bl	800da58 <xQueueGenericReset>
  }

  return (stat);
 800d87a:	69fb      	ldr	r3, [r7, #28]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3720      	adds	r7, #32
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	200004fc 	.word	0x200004fc

0800d888 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d888:	b480      	push	{r7}
 800d88a:	b085      	sub	sp, #20
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	4a07      	ldr	r2, [pc, #28]	; (800d8b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800d898:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	4a06      	ldr	r2, [pc, #24]	; (800d8b8 <vApplicationGetIdleTaskMemory+0x30>)
 800d89e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2280      	movs	r2, #128	; 0x80
 800d8a4:	601a      	str	r2, [r3, #0]
}
 800d8a6:	bf00      	nop
 800d8a8:	3714      	adds	r7, #20
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr
 800d8b2:	bf00      	nop
 800d8b4:	20000500 	.word	0x20000500
 800d8b8:	20000560 	.word	0x20000560

0800d8bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d8bc:	b480      	push	{r7}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	4a07      	ldr	r2, [pc, #28]	; (800d8e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d8cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	4a06      	ldr	r2, [pc, #24]	; (800d8ec <vApplicationGetTimerTaskMemory+0x30>)
 800d8d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8da:	601a      	str	r2, [r3, #0]
}
 800d8dc:	bf00      	nop
 800d8de:	3714      	adds	r7, #20
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr
 800d8e8:	20000760 	.word	0x20000760
 800d8ec:	200007c0 	.word	0x200007c0

0800d8f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f103 0208 	add.w	r2, r3, #8
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f04f 32ff 	mov.w	r2, #4294967295
 800d908:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f103 0208 	add.w	r2, r3, #8
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f103 0208 	add.w	r2, r3, #8
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d924:	bf00      	nop
 800d926:	370c      	adds	r7, #12
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d93e:	bf00      	nop
 800d940:	370c      	adds	r7, #12
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d94a:	b480      	push	{r7}
 800d94c:	b085      	sub	sp, #20
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	689a      	ldr	r2, [r3, #8]
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	689b      	ldr	r3, [r3, #8]
 800d96c:	683a      	ldr	r2, [r7, #0]
 800d96e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	683a      	ldr	r2, [r7, #0]
 800d974:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	1c5a      	adds	r2, r3, #1
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	601a      	str	r2, [r3, #0]
}
 800d986:	bf00      	nop
 800d988:	3714      	adds	r7, #20
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr

0800d992 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d992:	b480      	push	{r7}
 800d994:	b085      	sub	sp, #20
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
 800d99a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a8:	d103      	bne.n	800d9b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	691b      	ldr	r3, [r3, #16]
 800d9ae:	60fb      	str	r3, [r7, #12]
 800d9b0:	e00c      	b.n	800d9cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	3308      	adds	r3, #8
 800d9b6:	60fb      	str	r3, [r7, #12]
 800d9b8:	e002      	b.n	800d9c0 <vListInsert+0x2e>
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	60fb      	str	r3, [r7, #12]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	68ba      	ldr	r2, [r7, #8]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d2f6      	bcs.n	800d9ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	683a      	ldr	r2, [r7, #0]
 800d9da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	68fa      	ldr	r2, [r7, #12]
 800d9e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	1c5a      	adds	r2, r3, #1
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	601a      	str	r2, [r3, #0]
}
 800d9f8:	bf00      	nop
 800d9fa:	3714      	adds	r7, #20
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800da04:	b480      	push	{r7}
 800da06:	b085      	sub	sp, #20
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	6892      	ldr	r2, [r2, #8]
 800da1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	6852      	ldr	r2, [r2, #4]
 800da24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d103      	bne.n	800da38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	689a      	ldr	r2, [r3, #8]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	1e5a      	subs	r2, r3, #1
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3714      	adds	r7, #20
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d10a      	bne.n	800da82 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800da6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da70:	f383 8811 	msr	BASEPRI, r3
 800da74:	f3bf 8f6f 	isb	sy
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800da7e:	bf00      	nop
 800da80:	e7fe      	b.n	800da80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800da82:	f002 f927 	bl	800fcd4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da8e:	68f9      	ldr	r1, [r7, #12]
 800da90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800da92:	fb01 f303 	mul.w	r3, r1, r3
 800da96:	441a      	add	r2, r3
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2200      	movs	r2, #0
 800daa0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dab2:	3b01      	subs	r3, #1
 800dab4:	68f9      	ldr	r1, [r7, #12]
 800dab6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dab8:	fb01 f303 	mul.w	r3, r1, r3
 800dabc:	441a      	add	r2, r3
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	22ff      	movs	r2, #255	; 0xff
 800dac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	22ff      	movs	r2, #255	; 0xff
 800dace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d114      	bne.n	800db02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	691b      	ldr	r3, [r3, #16]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d01a      	beq.n	800db16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	3310      	adds	r3, #16
 800dae4:	4618      	mov	r0, r3
 800dae6:	f001 fa0f 	bl	800ef08 <xTaskRemoveFromEventList>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d012      	beq.n	800db16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800daf0:	4b0c      	ldr	r3, [pc, #48]	; (800db24 <xQueueGenericReset+0xcc>)
 800daf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daf6:	601a      	str	r2, [r3, #0]
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	e009      	b.n	800db16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	3310      	adds	r3, #16
 800db06:	4618      	mov	r0, r3
 800db08:	f7ff fef2 	bl	800d8f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	3324      	adds	r3, #36	; 0x24
 800db10:	4618      	mov	r0, r3
 800db12:	f7ff feed 	bl	800d8f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800db16:	f002 f90d 	bl	800fd34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800db1a:	2301      	movs	r3, #1
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3710      	adds	r7, #16
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	e000ed04 	.word	0xe000ed04

0800db28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b08e      	sub	sp, #56	; 0x38
 800db2c:	af02      	add	r7, sp, #8
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	607a      	str	r2, [r7, #4]
 800db34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d10a      	bne.n	800db52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800db3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db40:	f383 8811 	msr	BASEPRI, r3
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800db4e:	bf00      	nop
 800db50:	e7fe      	b.n	800db50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d10a      	bne.n	800db6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800db58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5c:	f383 8811 	msr	BASEPRI, r3
 800db60:	f3bf 8f6f 	isb	sy
 800db64:	f3bf 8f4f 	dsb	sy
 800db68:	627b      	str	r3, [r7, #36]	; 0x24
}
 800db6a:	bf00      	nop
 800db6c:	e7fe      	b.n	800db6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d002      	beq.n	800db7a <xQueueGenericCreateStatic+0x52>
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d001      	beq.n	800db7e <xQueueGenericCreateStatic+0x56>
 800db7a:	2301      	movs	r3, #1
 800db7c:	e000      	b.n	800db80 <xQueueGenericCreateStatic+0x58>
 800db7e:	2300      	movs	r3, #0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10a      	bne.n	800db9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800db84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	623b      	str	r3, [r7, #32]
}
 800db96:	bf00      	nop
 800db98:	e7fe      	b.n	800db98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d102      	bne.n	800dba6 <xQueueGenericCreateStatic+0x7e>
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d101      	bne.n	800dbaa <xQueueGenericCreateStatic+0x82>
 800dba6:	2301      	movs	r3, #1
 800dba8:	e000      	b.n	800dbac <xQueueGenericCreateStatic+0x84>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10a      	bne.n	800dbc6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800dbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb4:	f383 8811 	msr	BASEPRI, r3
 800dbb8:	f3bf 8f6f 	isb	sy
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	61fb      	str	r3, [r7, #28]
}
 800dbc2:	bf00      	nop
 800dbc4:	e7fe      	b.n	800dbc4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dbc6:	2350      	movs	r3, #80	; 0x50
 800dbc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	2b50      	cmp	r3, #80	; 0x50
 800dbce:	d00a      	beq.n	800dbe6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800dbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd4:	f383 8811 	msr	BASEPRI, r3
 800dbd8:	f3bf 8f6f 	isb	sy
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	61bb      	str	r3, [r7, #24]
}
 800dbe2:	bf00      	nop
 800dbe4:	e7fe      	b.n	800dbe4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00d      	beq.n	800dc0c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dbf8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	4613      	mov	r3, r2
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	68b9      	ldr	r1, [r7, #8]
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	f000 f843 	bl	800dc92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800dc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3730      	adds	r7, #48	; 0x30
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b08a      	sub	sp, #40	; 0x28
 800dc1a:	af02      	add	r7, sp, #8
 800dc1c:	60f8      	str	r0, [r7, #12]
 800dc1e:	60b9      	str	r1, [r7, #8]
 800dc20:	4613      	mov	r3, r2
 800dc22:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d10a      	bne.n	800dc40 <xQueueGenericCreate+0x2a>
	__asm volatile
 800dc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	613b      	str	r3, [r7, #16]
}
 800dc3c:	bf00      	nop
 800dc3e:	e7fe      	b.n	800dc3e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d102      	bne.n	800dc4c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800dc46:	2300      	movs	r3, #0
 800dc48:	61fb      	str	r3, [r7, #28]
 800dc4a:	e004      	b.n	800dc56 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	68ba      	ldr	r2, [r7, #8]
 800dc50:	fb02 f303 	mul.w	r3, r2, r3
 800dc54:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dc56:	69fb      	ldr	r3, [r7, #28]
 800dc58:	3350      	adds	r3, #80	; 0x50
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f002 f95c 	bl	800ff18 <pvPortMalloc>
 800dc60:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dc62:	69bb      	ldr	r3, [r7, #24]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d00f      	beq.n	800dc88 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	3350      	adds	r3, #80	; 0x50
 800dc6c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dc76:	79fa      	ldrb	r2, [r7, #7]
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	9300      	str	r3, [sp, #0]
 800dc7c:	4613      	mov	r3, r2
 800dc7e:	697a      	ldr	r2, [r7, #20]
 800dc80:	68b9      	ldr	r1, [r7, #8]
 800dc82:	68f8      	ldr	r0, [r7, #12]
 800dc84:	f000 f805 	bl	800dc92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800dc88:	69bb      	ldr	r3, [r7, #24]
	}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3720      	adds	r7, #32
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b084      	sub	sp, #16
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	60f8      	str	r0, [r7, #12]
 800dc9a:	60b9      	str	r1, [r7, #8]
 800dc9c:	607a      	str	r2, [r7, #4]
 800dc9e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d103      	bne.n	800dcae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	69ba      	ldr	r2, [r7, #24]
 800dcaa:	601a      	str	r2, [r3, #0]
 800dcac:	e002      	b.n	800dcb4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dcae:	69bb      	ldr	r3, [r7, #24]
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	68ba      	ldr	r2, [r7, #8]
 800dcbe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dcc0:	2101      	movs	r1, #1
 800dcc2:	69b8      	ldr	r0, [r7, #24]
 800dcc4:	f7ff fec8 	bl	800da58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	78fa      	ldrb	r2, [r7, #3]
 800dccc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dcd0:	bf00      	nop
 800dcd2:	3710      	adds	r7, #16
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b08e      	sub	sp, #56	; 0x38
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	607a      	str	r2, [r7, #4]
 800dce4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dce6:	2300      	movs	r3, #0
 800dce8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d10a      	bne.n	800dd0a <xQueueGenericSend+0x32>
	__asm volatile
 800dcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf8:	f383 8811 	msr	BASEPRI, r3
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dd06:	bf00      	nop
 800dd08:	e7fe      	b.n	800dd08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d103      	bne.n	800dd18 <xQueueGenericSend+0x40>
 800dd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d101      	bne.n	800dd1c <xQueueGenericSend+0x44>
 800dd18:	2301      	movs	r3, #1
 800dd1a:	e000      	b.n	800dd1e <xQueueGenericSend+0x46>
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d10a      	bne.n	800dd38 <xQueueGenericSend+0x60>
	__asm volatile
 800dd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd26:	f383 8811 	msr	BASEPRI, r3
 800dd2a:	f3bf 8f6f 	isb	sy
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dd34:	bf00      	nop
 800dd36:	e7fe      	b.n	800dd36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	2b02      	cmp	r3, #2
 800dd3c:	d103      	bne.n	800dd46 <xQueueGenericSend+0x6e>
 800dd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d101      	bne.n	800dd4a <xQueueGenericSend+0x72>
 800dd46:	2301      	movs	r3, #1
 800dd48:	e000      	b.n	800dd4c <xQueueGenericSend+0x74>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d10a      	bne.n	800dd66 <xQueueGenericSend+0x8e>
	__asm volatile
 800dd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd54:	f383 8811 	msr	BASEPRI, r3
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	623b      	str	r3, [r7, #32]
}
 800dd62:	bf00      	nop
 800dd64:	e7fe      	b.n	800dd64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd66:	f001 fa93 	bl	800f290 <xTaskGetSchedulerState>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d102      	bne.n	800dd76 <xQueueGenericSend+0x9e>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d101      	bne.n	800dd7a <xQueueGenericSend+0xa2>
 800dd76:	2301      	movs	r3, #1
 800dd78:	e000      	b.n	800dd7c <xQueueGenericSend+0xa4>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d10a      	bne.n	800dd96 <xQueueGenericSend+0xbe>
	__asm volatile
 800dd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd84:	f383 8811 	msr	BASEPRI, r3
 800dd88:	f3bf 8f6f 	isb	sy
 800dd8c:	f3bf 8f4f 	dsb	sy
 800dd90:	61fb      	str	r3, [r7, #28]
}
 800dd92:	bf00      	nop
 800dd94:	e7fe      	b.n	800dd94 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd96:	f001 ff9d 	bl	800fcd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d302      	bcc.n	800ddac <xQueueGenericSend+0xd4>
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	d129      	bne.n	800de00 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ddac:	683a      	ldr	r2, [r7, #0]
 800ddae:	68b9      	ldr	r1, [r7, #8]
 800ddb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddb2:	f000 fac1 	bl	800e338 <prvCopyDataToQueue>
 800ddb6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ddb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d010      	beq.n	800dde2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc2:	3324      	adds	r3, #36	; 0x24
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f001 f89f 	bl	800ef08 <xTaskRemoveFromEventList>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d013      	beq.n	800ddf8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ddd0:	4b3f      	ldr	r3, [pc, #252]	; (800ded0 <xQueueGenericSend+0x1f8>)
 800ddd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddd6:	601a      	str	r2, [r3, #0]
 800ddd8:	f3bf 8f4f 	dsb	sy
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	e00a      	b.n	800ddf8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d007      	beq.n	800ddf8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dde8:	4b39      	ldr	r3, [pc, #228]	; (800ded0 <xQueueGenericSend+0x1f8>)
 800ddea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddee:	601a      	str	r2, [r3, #0]
 800ddf0:	f3bf 8f4f 	dsb	sy
 800ddf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ddf8:	f001 ff9c 	bl	800fd34 <vPortExitCritical>
				return pdPASS;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e063      	b.n	800dec8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d103      	bne.n	800de0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de06:	f001 ff95 	bl	800fd34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800de0a:	2300      	movs	r3, #0
 800de0c:	e05c      	b.n	800dec8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de10:	2b00      	cmp	r3, #0
 800de12:	d106      	bne.n	800de22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de14:	f107 0314 	add.w	r3, r7, #20
 800de18:	4618      	mov	r0, r3
 800de1a:	f001 f8d9 	bl	800efd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de1e:	2301      	movs	r3, #1
 800de20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de22:	f001 ff87 	bl	800fd34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de26:	f000 fe2d 	bl	800ea84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de2a:	f001 ff53 	bl	800fcd4 <vPortEnterCritical>
 800de2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de34:	b25b      	sxtb	r3, r3
 800de36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de3a:	d103      	bne.n	800de44 <xQueueGenericSend+0x16c>
 800de3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de4a:	b25b      	sxtb	r3, r3
 800de4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de50:	d103      	bne.n	800de5a <xQueueGenericSend+0x182>
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	2200      	movs	r2, #0
 800de56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de5a:	f001 ff6b 	bl	800fd34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de5e:	1d3a      	adds	r2, r7, #4
 800de60:	f107 0314 	add.w	r3, r7, #20
 800de64:	4611      	mov	r1, r2
 800de66:	4618      	mov	r0, r3
 800de68:	f001 f8c8 	bl	800effc <xTaskCheckForTimeOut>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d124      	bne.n	800debc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800de72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de74:	f000 fb58 	bl	800e528 <prvIsQueueFull>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d018      	beq.n	800deb0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800de7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de80:	3310      	adds	r3, #16
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	4611      	mov	r1, r2
 800de86:	4618      	mov	r0, r3
 800de88:	f000 ffee 	bl	800ee68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800de8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de8e:	f000 fae3 	bl	800e458 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800de92:	f000 fe05 	bl	800eaa0 <xTaskResumeAll>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	f47f af7c 	bne.w	800dd96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800de9e:	4b0c      	ldr	r3, [pc, #48]	; (800ded0 <xQueueGenericSend+0x1f8>)
 800dea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dea4:	601a      	str	r2, [r3, #0]
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	f3bf 8f6f 	isb	sy
 800deae:	e772      	b.n	800dd96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800deb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800deb2:	f000 fad1 	bl	800e458 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800deb6:	f000 fdf3 	bl	800eaa0 <xTaskResumeAll>
 800deba:	e76c      	b.n	800dd96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800debc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800debe:	f000 facb 	bl	800e458 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dec2:	f000 fded 	bl	800eaa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dec6:	2300      	movs	r3, #0
		}
	}
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3738      	adds	r7, #56	; 0x38
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	e000ed04 	.word	0xe000ed04

0800ded4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b08e      	sub	sp, #56	; 0x38
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
 800dee0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10a      	bne.n	800df02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800deec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800defe:	bf00      	nop
 800df00:	e7fe      	b.n	800df00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d103      	bne.n	800df10 <xQueueGenericSendFromISR+0x3c>
 800df08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d101      	bne.n	800df14 <xQueueGenericSendFromISR+0x40>
 800df10:	2301      	movs	r3, #1
 800df12:	e000      	b.n	800df16 <xQueueGenericSendFromISR+0x42>
 800df14:	2300      	movs	r3, #0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10a      	bne.n	800df30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800df1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	623b      	str	r3, [r7, #32]
}
 800df2c:	bf00      	nop
 800df2e:	e7fe      	b.n	800df2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	2b02      	cmp	r3, #2
 800df34:	d103      	bne.n	800df3e <xQueueGenericSendFromISR+0x6a>
 800df36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d101      	bne.n	800df42 <xQueueGenericSendFromISR+0x6e>
 800df3e:	2301      	movs	r3, #1
 800df40:	e000      	b.n	800df44 <xQueueGenericSendFromISR+0x70>
 800df42:	2300      	movs	r3, #0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10a      	bne.n	800df5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	61fb      	str	r3, [r7, #28]
}
 800df5a:	bf00      	nop
 800df5c:	e7fe      	b.n	800df5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df5e:	f001 ff9b 	bl	800fe98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800df62:	f3ef 8211 	mrs	r2, BASEPRI
 800df66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6a:	f383 8811 	msr	BASEPRI, r3
 800df6e:	f3bf 8f6f 	isb	sy
 800df72:	f3bf 8f4f 	dsb	sy
 800df76:	61ba      	str	r2, [r7, #24]
 800df78:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800df7a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df86:	429a      	cmp	r2, r3
 800df88:	d302      	bcc.n	800df90 <xQueueGenericSendFromISR+0xbc>
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	2b02      	cmp	r3, #2
 800df8e:	d12c      	bne.n	800dfea <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800df90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df9a:	683a      	ldr	r2, [r7, #0]
 800df9c:	68b9      	ldr	r1, [r7, #8]
 800df9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfa0:	f000 f9ca 	bl	800e338 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dfa4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800dfa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfac:	d112      	bne.n	800dfd4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d016      	beq.n	800dfe4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb8:	3324      	adds	r3, #36	; 0x24
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f000 ffa4 	bl	800ef08 <xTaskRemoveFromEventList>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d00e      	beq.n	800dfe4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d00b      	beq.n	800dfe4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	601a      	str	r2, [r3, #0]
 800dfd2:	e007      	b.n	800dfe4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dfd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dfd8:	3301      	adds	r3, #1
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	b25a      	sxtb	r2, r3
 800dfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800dfe8:	e001      	b.n	800dfee <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dfea:	2300      	movs	r3, #0
 800dfec:	637b      	str	r3, [r7, #52]	; 0x34
 800dfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dff8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3738      	adds	r7, #56	; 0x38
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b08c      	sub	sp, #48	; 0x30
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e010:	2300      	movs	r3, #0
 800e012:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d10a      	bne.n	800e034 <xQueueReceive+0x30>
	__asm volatile
 800e01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	623b      	str	r3, [r7, #32]
}
 800e030:	bf00      	nop
 800e032:	e7fe      	b.n	800e032 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d103      	bne.n	800e042 <xQueueReceive+0x3e>
 800e03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d101      	bne.n	800e046 <xQueueReceive+0x42>
 800e042:	2301      	movs	r3, #1
 800e044:	e000      	b.n	800e048 <xQueueReceive+0x44>
 800e046:	2300      	movs	r3, #0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d10a      	bne.n	800e062 <xQueueReceive+0x5e>
	__asm volatile
 800e04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e050:	f383 8811 	msr	BASEPRI, r3
 800e054:	f3bf 8f6f 	isb	sy
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	61fb      	str	r3, [r7, #28]
}
 800e05e:	bf00      	nop
 800e060:	e7fe      	b.n	800e060 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e062:	f001 f915 	bl	800f290 <xTaskGetSchedulerState>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d102      	bne.n	800e072 <xQueueReceive+0x6e>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d101      	bne.n	800e076 <xQueueReceive+0x72>
 800e072:	2301      	movs	r3, #1
 800e074:	e000      	b.n	800e078 <xQueueReceive+0x74>
 800e076:	2300      	movs	r3, #0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10a      	bne.n	800e092 <xQueueReceive+0x8e>
	__asm volatile
 800e07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e080:	f383 8811 	msr	BASEPRI, r3
 800e084:	f3bf 8f6f 	isb	sy
 800e088:	f3bf 8f4f 	dsb	sy
 800e08c:	61bb      	str	r3, [r7, #24]
}
 800e08e:	bf00      	nop
 800e090:	e7fe      	b.n	800e090 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800e092:	f001 fe1f 	bl	800fcd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e09a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d01f      	beq.n	800e0e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e0a2:	68b9      	ldr	r1, [r7, #8]
 800e0a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0a6:	f000 f9b1 	bl	800e40c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ac:	1e5a      	subs	r2, r3, #1
 800e0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b4:	691b      	ldr	r3, [r3, #16]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d00f      	beq.n	800e0da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0bc:	3310      	adds	r3, #16
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f000 ff22 	bl	800ef08 <xTaskRemoveFromEventList>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d007      	beq.n	800e0da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e0ca:	4b3d      	ldr	r3, [pc, #244]	; (800e1c0 <xQueueReceive+0x1bc>)
 800e0cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0d0:	601a      	str	r2, [r3, #0]
 800e0d2:	f3bf 8f4f 	dsb	sy
 800e0d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e0da:	f001 fe2b 	bl	800fd34 <vPortExitCritical>
				return pdPASS;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e069      	b.n	800e1b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d103      	bne.n	800e0f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e0e8:	f001 fe24 	bl	800fd34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	e062      	b.n	800e1b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d106      	bne.n	800e104 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0f6:	f107 0310 	add.w	r3, r7, #16
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f000 ff68 	bl	800efd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e100:	2301      	movs	r3, #1
 800e102:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e104:	f001 fe16 	bl	800fd34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e108:	f000 fcbc 	bl	800ea84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e10c:	f001 fde2 	bl	800fcd4 <vPortEnterCritical>
 800e110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e116:	b25b      	sxtb	r3, r3
 800e118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e11c:	d103      	bne.n	800e126 <xQueueReceive+0x122>
 800e11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e120:	2200      	movs	r2, #0
 800e122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e12c:	b25b      	sxtb	r3, r3
 800e12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e132:	d103      	bne.n	800e13c <xQueueReceive+0x138>
 800e134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e136:	2200      	movs	r2, #0
 800e138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e13c:	f001 fdfa 	bl	800fd34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e140:	1d3a      	adds	r2, r7, #4
 800e142:	f107 0310 	add.w	r3, r7, #16
 800e146:	4611      	mov	r1, r2
 800e148:	4618      	mov	r0, r3
 800e14a:	f000 ff57 	bl	800effc <xTaskCheckForTimeOut>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d123      	bne.n	800e19c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e156:	f000 f9d1 	bl	800e4fc <prvIsQueueEmpty>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d017      	beq.n	800e190 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e162:	3324      	adds	r3, #36	; 0x24
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	4611      	mov	r1, r2
 800e168:	4618      	mov	r0, r3
 800e16a:	f000 fe7d 	bl	800ee68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e16e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e170:	f000 f972 	bl	800e458 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e174:	f000 fc94 	bl	800eaa0 <xTaskResumeAll>
 800e178:	4603      	mov	r3, r0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d189      	bne.n	800e092 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e17e:	4b10      	ldr	r3, [pc, #64]	; (800e1c0 <xQueueReceive+0x1bc>)
 800e180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e184:	601a      	str	r2, [r3, #0]
 800e186:	f3bf 8f4f 	dsb	sy
 800e18a:	f3bf 8f6f 	isb	sy
 800e18e:	e780      	b.n	800e092 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e192:	f000 f961 	bl	800e458 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e196:	f000 fc83 	bl	800eaa0 <xTaskResumeAll>
 800e19a:	e77a      	b.n	800e092 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e19c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e19e:	f000 f95b 	bl	800e458 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e1a2:	f000 fc7d 	bl	800eaa0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e1a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1a8:	f000 f9a8 	bl	800e4fc <prvIsQueueEmpty>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f43f af6f 	beq.w	800e092 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e1b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3730      	adds	r7, #48	; 0x30
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	e000ed04 	.word	0xe000ed04

0800e1c4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b08e      	sub	sp, #56	; 0x38
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	60f8      	str	r0, [r7, #12]
 800e1cc:	60b9      	str	r1, [r7, #8]
 800e1ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d10a      	bne.n	800e1f0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1de:	f383 8811 	msr	BASEPRI, r3
 800e1e2:	f3bf 8f6f 	isb	sy
 800e1e6:	f3bf 8f4f 	dsb	sy
 800e1ea:	623b      	str	r3, [r7, #32]
}
 800e1ec:	bf00      	nop
 800e1ee:	e7fe      	b.n	800e1ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d103      	bne.n	800e1fe <xQueueReceiveFromISR+0x3a>
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d101      	bne.n	800e202 <xQueueReceiveFromISR+0x3e>
 800e1fe:	2301      	movs	r3, #1
 800e200:	e000      	b.n	800e204 <xQueueReceiveFromISR+0x40>
 800e202:	2300      	movs	r3, #0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d10a      	bne.n	800e21e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20c:	f383 8811 	msr	BASEPRI, r3
 800e210:	f3bf 8f6f 	isb	sy
 800e214:	f3bf 8f4f 	dsb	sy
 800e218:	61fb      	str	r3, [r7, #28]
}
 800e21a:	bf00      	nop
 800e21c:	e7fe      	b.n	800e21c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e21e:	f001 fe3b 	bl	800fe98 <vPortValidateInterruptPriority>
	__asm volatile
 800e222:	f3ef 8211 	mrs	r2, BASEPRI
 800e226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22a:	f383 8811 	msr	BASEPRI, r3
 800e22e:	f3bf 8f6f 	isb	sy
 800e232:	f3bf 8f4f 	dsb	sy
 800e236:	61ba      	str	r2, [r7, #24]
 800e238:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e23a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e23c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e242:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e246:	2b00      	cmp	r3, #0
 800e248:	d02f      	beq.n	800e2aa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e254:	68b9      	ldr	r1, [r7, #8]
 800e256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e258:	f000 f8d8 	bl	800e40c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25e:	1e5a      	subs	r2, r3, #1
 800e260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e262:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e264:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e26c:	d112      	bne.n	800e294 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e270:	691b      	ldr	r3, [r3, #16]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d016      	beq.n	800e2a4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e278:	3310      	adds	r3, #16
 800e27a:	4618      	mov	r0, r3
 800e27c:	f000 fe44 	bl	800ef08 <xTaskRemoveFromEventList>
 800e280:	4603      	mov	r3, r0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d00e      	beq.n	800e2a4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00b      	beq.n	800e2a4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2201      	movs	r2, #1
 800e290:	601a      	str	r2, [r3, #0]
 800e292:	e007      	b.n	800e2a4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e298:	3301      	adds	r3, #1
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	b25a      	sxtb	r2, r3
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	637b      	str	r3, [r7, #52]	; 0x34
 800e2a8:	e001      	b.n	800e2ae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	637b      	str	r3, [r7, #52]	; 0x34
 800e2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	f383 8811 	msr	BASEPRI, r3
}
 800e2b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3738      	adds	r7, #56	; 0x38
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d10a      	bne.n	800e2e8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800e2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d6:	f383 8811 	msr	BASEPRI, r3
 800e2da:	f3bf 8f6f 	isb	sy
 800e2de:	f3bf 8f4f 	dsb	sy
 800e2e2:	60bb      	str	r3, [r7, #8]
}
 800e2e4:	bf00      	nop
 800e2e6:	e7fe      	b.n	800e2e6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800e2e8:	f001 fcf4 	bl	800fcd4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e2f2:	f001 fd1f 	bl	800fd34 <vPortExitCritical>

	return uxReturn;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3710      	adds	r7, #16
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d10a      	bne.n	800e324 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 800e30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e312:	f383 8811 	msr	BASEPRI, r3
 800e316:	f3bf 8f6f 	isb	sy
 800e31a:	f3bf 8f4f 	dsb	sy
 800e31e:	60bb      	str	r3, [r7, #8]
}
 800e320:	bf00      	nop
 800e322:	e7fe      	b.n	800e322 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e328:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800e32a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e32c:	4618      	mov	r0, r3
 800e32e:	3714      	adds	r7, #20
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b086      	sub	sp, #24
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e344:	2300      	movs	r3, #0
 800e346:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e34c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e352:	2b00      	cmp	r3, #0
 800e354:	d10d      	bne.n	800e372 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d14d      	bne.n	800e3fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	4618      	mov	r0, r3
 800e364:	f000 ffb2 	bl	800f2cc <xTaskPriorityDisinherit>
 800e368:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2200      	movs	r2, #0
 800e36e:	605a      	str	r2, [r3, #4]
 800e370:	e043      	b.n	800e3fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d119      	bne.n	800e3ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6898      	ldr	r0, [r3, #8]
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e380:	461a      	mov	r2, r3
 800e382:	68b9      	ldr	r1, [r7, #8]
 800e384:	f007 fc4c 	bl	8015c20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	689a      	ldr	r2, [r3, #8]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e390:	441a      	add	r2, r3
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	689a      	ldr	r2, [r3, #8]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d32b      	bcc.n	800e3fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	609a      	str	r2, [r3, #8]
 800e3aa:	e026      	b.n	800e3fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	68d8      	ldr	r0, [r3, #12]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	68b9      	ldr	r1, [r7, #8]
 800e3b8:	f007 fc32 	bl	8015c20 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	68da      	ldr	r2, [r3, #12]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3c4:	425b      	negs	r3, r3
 800e3c6:	441a      	add	r2, r3
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	68da      	ldr	r2, [r3, #12]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d207      	bcs.n	800e3e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	685a      	ldr	r2, [r3, #4]
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3e0:	425b      	negs	r3, r3
 800e3e2:	441a      	add	r2, r3
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	d105      	bne.n	800e3fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	1c5a      	adds	r2, r3, #1
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e402:	697b      	ldr	r3, [r7, #20]
}
 800e404:	4618      	mov	r0, r3
 800e406:	3718      	adds	r7, #24
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d018      	beq.n	800e450 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	68da      	ldr	r2, [r3, #12]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e426:	441a      	add	r2, r3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	68da      	ldr	r2, [r3, #12]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	429a      	cmp	r2, r3
 800e436:	d303      	bcc.n	800e440 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	68d9      	ldr	r1, [r3, #12]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e448:	461a      	mov	r2, r3
 800e44a:	6838      	ldr	r0, [r7, #0]
 800e44c:	f007 fbe8 	bl	8015c20 <memcpy>
	}
}
 800e450:	bf00      	nop
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e460:	f001 fc38 	bl	800fcd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e46a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e46c:	e011      	b.n	800e492 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e472:	2b00      	cmp	r3, #0
 800e474:	d012      	beq.n	800e49c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	3324      	adds	r3, #36	; 0x24
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 fd44 	bl	800ef08 <xTaskRemoveFromEventList>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e486:	f000 fe1b 	bl	800f0c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e48a:	7bfb      	ldrb	r3, [r7, #15]
 800e48c:	3b01      	subs	r3, #1
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e496:	2b00      	cmp	r3, #0
 800e498:	dce9      	bgt.n	800e46e <prvUnlockQueue+0x16>
 800e49a:	e000      	b.n	800e49e <prvUnlockQueue+0x46>
					break;
 800e49c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	22ff      	movs	r2, #255	; 0xff
 800e4a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e4a6:	f001 fc45 	bl	800fd34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e4aa:	f001 fc13 	bl	800fcd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e4b6:	e011      	b.n	800e4dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	691b      	ldr	r3, [r3, #16]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d012      	beq.n	800e4e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	3310      	adds	r3, #16
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f000 fd1f 	bl	800ef08 <xTaskRemoveFromEventList>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e4d0:	f000 fdf6 	bl	800f0c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e4d4:	7bbb      	ldrb	r3, [r7, #14]
 800e4d6:	3b01      	subs	r3, #1
 800e4d8:	b2db      	uxtb	r3, r3
 800e4da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e4dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	dce9      	bgt.n	800e4b8 <prvUnlockQueue+0x60>
 800e4e4:	e000      	b.n	800e4e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e4e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	22ff      	movs	r2, #255	; 0xff
 800e4ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e4f0:	f001 fc20 	bl	800fd34 <vPortExitCritical>
}
 800e4f4:	bf00      	nop
 800e4f6:	3710      	adds	r7, #16
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e504:	f001 fbe6 	bl	800fcd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d102      	bne.n	800e516 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e510:	2301      	movs	r3, #1
 800e512:	60fb      	str	r3, [r7, #12]
 800e514:	e001      	b.n	800e51a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e516:	2300      	movs	r3, #0
 800e518:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e51a:	f001 fc0b 	bl	800fd34 <vPortExitCritical>

	return xReturn;
 800e51e:	68fb      	ldr	r3, [r7, #12]
}
 800e520:	4618      	mov	r0, r3
 800e522:	3710      	adds	r7, #16
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e530:	f001 fbd0 	bl	800fcd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d102      	bne.n	800e546 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e540:	2301      	movs	r3, #1
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	e001      	b.n	800e54a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e546:	2300      	movs	r3, #0
 800e548:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e54a:	f001 fbf3 	bl	800fd34 <vPortExitCritical>

	return xReturn;
 800e54e:	68fb      	ldr	r3, [r7, #12]
}
 800e550:	4618      	mov	r0, r3
 800e552:	3710      	adds	r7, #16
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e558:	b480      	push	{r7}
 800e55a:	b085      	sub	sp, #20
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e562:	2300      	movs	r3, #0
 800e564:	60fb      	str	r3, [r7, #12]
 800e566:	e014      	b.n	800e592 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e568:	4a0f      	ldr	r2, [pc, #60]	; (800e5a8 <vQueueAddToRegistry+0x50>)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d10b      	bne.n	800e58c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e574:	490c      	ldr	r1, [pc, #48]	; (800e5a8 <vQueueAddToRegistry+0x50>)
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	683a      	ldr	r2, [r7, #0]
 800e57a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e57e:	4a0a      	ldr	r2, [pc, #40]	; (800e5a8 <vQueueAddToRegistry+0x50>)
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	00db      	lsls	r3, r3, #3
 800e584:	4413      	add	r3, r2
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e58a:	e006      	b.n	800e59a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	3301      	adds	r3, #1
 800e590:	60fb      	str	r3, [r7, #12]
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2b07      	cmp	r3, #7
 800e596:	d9e7      	bls.n	800e568 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e598:	bf00      	nop
 800e59a:	bf00      	nop
 800e59c:	3714      	adds	r7, #20
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
 800e5a8:	20000bc0 	.word	0x20000bc0

0800e5ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b086      	sub	sp, #24
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e5bc:	f001 fb8a 	bl	800fcd4 <vPortEnterCritical>
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5c6:	b25b      	sxtb	r3, r3
 800e5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5cc:	d103      	bne.n	800e5d6 <vQueueWaitForMessageRestricted+0x2a>
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5dc:	b25b      	sxtb	r3, r3
 800e5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e2:	d103      	bne.n	800e5ec <vQueueWaitForMessageRestricted+0x40>
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5ec:	f001 fba2 	bl	800fd34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d106      	bne.n	800e606 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	3324      	adds	r3, #36	; 0x24
 800e5fc:	687a      	ldr	r2, [r7, #4]
 800e5fe:	68b9      	ldr	r1, [r7, #8]
 800e600:	4618      	mov	r0, r3
 800e602:	f000 fc55 	bl	800eeb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e606:	6978      	ldr	r0, [r7, #20]
 800e608:	f7ff ff26 	bl	800e458 <prvUnlockQueue>
	}
 800e60c:	bf00      	nop
 800e60e:	3718      	adds	r7, #24
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e614:	b580      	push	{r7, lr}
 800e616:	b08e      	sub	sp, #56	; 0x38
 800e618:	af04      	add	r7, sp, #16
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	607a      	str	r2, [r7, #4]
 800e620:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e624:	2b00      	cmp	r3, #0
 800e626:	d10a      	bne.n	800e63e <xTaskCreateStatic+0x2a>
	__asm volatile
 800e628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62c:	f383 8811 	msr	BASEPRI, r3
 800e630:	f3bf 8f6f 	isb	sy
 800e634:	f3bf 8f4f 	dsb	sy
 800e638:	623b      	str	r3, [r7, #32]
}
 800e63a:	bf00      	nop
 800e63c:	e7fe      	b.n	800e63c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10a      	bne.n	800e65a <xTaskCreateStatic+0x46>
	__asm volatile
 800e644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e648:	f383 8811 	msr	BASEPRI, r3
 800e64c:	f3bf 8f6f 	isb	sy
 800e650:	f3bf 8f4f 	dsb	sy
 800e654:	61fb      	str	r3, [r7, #28]
}
 800e656:	bf00      	nop
 800e658:	e7fe      	b.n	800e658 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e65a:	2360      	movs	r3, #96	; 0x60
 800e65c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	2b60      	cmp	r3, #96	; 0x60
 800e662:	d00a      	beq.n	800e67a <xTaskCreateStatic+0x66>
	__asm volatile
 800e664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e668:	f383 8811 	msr	BASEPRI, r3
 800e66c:	f3bf 8f6f 	isb	sy
 800e670:	f3bf 8f4f 	dsb	sy
 800e674:	61bb      	str	r3, [r7, #24]
}
 800e676:	bf00      	nop
 800e678:	e7fe      	b.n	800e678 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d01e      	beq.n	800e6be <xTaskCreateStatic+0xaa>
 800e680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e682:	2b00      	cmp	r3, #0
 800e684:	d01b      	beq.n	800e6be <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e688:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e68e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e692:	2202      	movs	r2, #2
 800e694:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e698:	2300      	movs	r3, #0
 800e69a:	9303      	str	r3, [sp, #12]
 800e69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69e:	9302      	str	r3, [sp, #8]
 800e6a0:	f107 0314 	add.w	r3, r7, #20
 800e6a4:	9301      	str	r3, [sp, #4]
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a8:	9300      	str	r3, [sp, #0]
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	68b9      	ldr	r1, [r7, #8]
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f000 f850 	bl	800e756 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e6b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6b8:	f000 f8d8 	bl	800e86c <prvAddNewTaskToReadyList>
 800e6bc:	e001      	b.n	800e6c2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e6c2:	697b      	ldr	r3, [r7, #20]
	}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3728      	adds	r7, #40	; 0x28
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b08c      	sub	sp, #48	; 0x30
 800e6d0:	af04      	add	r7, sp, #16
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	603b      	str	r3, [r7, #0]
 800e6d8:	4613      	mov	r3, r2
 800e6da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6dc:	88fb      	ldrh	r3, [r7, #6]
 800e6de:	009b      	lsls	r3, r3, #2
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f001 fc19 	bl	800ff18 <pvPortMalloc>
 800e6e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00e      	beq.n	800e70c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800e6ee:	2060      	movs	r0, #96	; 0x60
 800e6f0:	f001 fc12 	bl	800ff18 <pvPortMalloc>
 800e6f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d003      	beq.n	800e704 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	697a      	ldr	r2, [r7, #20]
 800e700:	631a      	str	r2, [r3, #48]	; 0x30
 800e702:	e005      	b.n	800e710 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e704:	6978      	ldr	r0, [r7, #20]
 800e706:	f001 fc4d 	bl	800ffa4 <vPortFree>
 800e70a:	e001      	b.n	800e710 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e70c:	2300      	movs	r3, #0
 800e70e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d017      	beq.n	800e746 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e716:	69fb      	ldr	r3, [r7, #28]
 800e718:	2200      	movs	r2, #0
 800e71a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e71e:	88fa      	ldrh	r2, [r7, #6]
 800e720:	2300      	movs	r3, #0
 800e722:	9303      	str	r3, [sp, #12]
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	9302      	str	r3, [sp, #8]
 800e728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72a:	9301      	str	r3, [sp, #4]
 800e72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72e:	9300      	str	r3, [sp, #0]
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	68b9      	ldr	r1, [r7, #8]
 800e734:	68f8      	ldr	r0, [r7, #12]
 800e736:	f000 f80e 	bl	800e756 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e73a:	69f8      	ldr	r0, [r7, #28]
 800e73c:	f000 f896 	bl	800e86c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e740:	2301      	movs	r3, #1
 800e742:	61bb      	str	r3, [r7, #24]
 800e744:	e002      	b.n	800e74c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e746:	f04f 33ff 	mov.w	r3, #4294967295
 800e74a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e74c:	69bb      	ldr	r3, [r7, #24]
	}
 800e74e:	4618      	mov	r0, r3
 800e750:	3720      	adds	r7, #32
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b088      	sub	sp, #32
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	60f8      	str	r0, [r7, #12]
 800e75e:	60b9      	str	r1, [r7, #8]
 800e760:	607a      	str	r2, [r7, #4]
 800e762:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e766:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	461a      	mov	r2, r3
 800e76e:	21a5      	movs	r1, #165	; 0xa5
 800e770:	f007 fa64 	bl	8015c3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800e774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e77e:	3b01      	subs	r3, #1
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	4413      	add	r3, r2
 800e784:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	f023 0307 	bic.w	r3, r3, #7
 800e78c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	f003 0307 	and.w	r3, r3, #7
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00a      	beq.n	800e7ae <prvInitialiseNewTask+0x58>
	__asm volatile
 800e798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79c:	f383 8811 	msr	BASEPRI, r3
 800e7a0:	f3bf 8f6f 	isb	sy
 800e7a4:	f3bf 8f4f 	dsb	sy
 800e7a8:	617b      	str	r3, [r7, #20]
}
 800e7aa:	bf00      	nop
 800e7ac:	e7fe      	b.n	800e7ac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	61fb      	str	r3, [r7, #28]
 800e7b2:	e012      	b.n	800e7da <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e7b4:	68ba      	ldr	r2, [r7, #8]
 800e7b6:	69fb      	ldr	r3, [r7, #28]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	7819      	ldrb	r1, [r3, #0]
 800e7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	3334      	adds	r3, #52	; 0x34
 800e7c4:	460a      	mov	r2, r1
 800e7c6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800e7c8:	68ba      	ldr	r2, [r7, #8]
 800e7ca:	69fb      	ldr	r3, [r7, #28]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d006      	beq.n	800e7e2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	61fb      	str	r3, [r7, #28]
 800e7da:	69fb      	ldr	r3, [r7, #28]
 800e7dc:	2b0f      	cmp	r3, #15
 800e7de:	d9e9      	bls.n	800e7b4 <prvInitialiseNewTask+0x5e>
 800e7e0:	e000      	b.n	800e7e4 <prvInitialiseNewTask+0x8e>
		{
			break;
 800e7e2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ee:	2b37      	cmp	r3, #55	; 0x37
 800e7f0:	d901      	bls.n	800e7f6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e7f2:	2337      	movs	r3, #55	; 0x37
 800e7f4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7fa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e800:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e804:	2200      	movs	r2, #0
 800e806:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80a:	3304      	adds	r3, #4
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7ff f88f 	bl	800d930 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e814:	3318      	adds	r3, #24
 800e816:	4618      	mov	r0, r3
 800e818:	f7ff f88a 	bl	800d930 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e820:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e830:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e834:	2200      	movs	r2, #0
 800e836:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e83a:	2200      	movs	r2, #0
 800e83c:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e840:	2200      	movs	r2, #0
 800e842:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	68f9      	ldr	r1, [r7, #12]
 800e84a:	69b8      	ldr	r0, [r7, #24]
 800e84c:	f001 f912 	bl	800fa74 <pxPortInitialiseStack>
 800e850:	4602      	mov	r2, r0
 800e852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e854:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800e856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d002      	beq.n	800e862 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e862:	bf00      	nop
 800e864:	3720      	adds	r7, #32
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
	...

0800e86c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e874:	f001 fa2e 	bl	800fcd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e878:	4b2d      	ldr	r3, [pc, #180]	; (800e930 <prvAddNewTaskToReadyList+0xc4>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	3301      	adds	r3, #1
 800e87e:	4a2c      	ldr	r2, [pc, #176]	; (800e930 <prvAddNewTaskToReadyList+0xc4>)
 800e880:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e882:	4b2c      	ldr	r3, [pc, #176]	; (800e934 <prvAddNewTaskToReadyList+0xc8>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d109      	bne.n	800e89e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e88a:	4a2a      	ldr	r2, [pc, #168]	; (800e934 <prvAddNewTaskToReadyList+0xc8>)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e890:	4b27      	ldr	r3, [pc, #156]	; (800e930 <prvAddNewTaskToReadyList+0xc4>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d110      	bne.n	800e8ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e898:	f000 fc36 	bl	800f108 <prvInitialiseTaskLists>
 800e89c:	e00d      	b.n	800e8ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e89e:	4b26      	ldr	r3, [pc, #152]	; (800e938 <prvAddNewTaskToReadyList+0xcc>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d109      	bne.n	800e8ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e8a6:	4b23      	ldr	r3, [pc, #140]	; (800e934 <prvAddNewTaskToReadyList+0xc8>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d802      	bhi.n	800e8ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e8b4:	4a1f      	ldr	r2, [pc, #124]	; (800e934 <prvAddNewTaskToReadyList+0xc8>)
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e8ba:	4b20      	ldr	r3, [pc, #128]	; (800e93c <prvAddNewTaskToReadyList+0xd0>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	4a1e      	ldr	r2, [pc, #120]	; (800e93c <prvAddNewTaskToReadyList+0xd0>)
 800e8c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e8c4:	4b1d      	ldr	r3, [pc, #116]	; (800e93c <prvAddNewTaskToReadyList+0xd0>)
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8d0:	4b1b      	ldr	r3, [pc, #108]	; (800e940 <prvAddNewTaskToReadyList+0xd4>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d903      	bls.n	800e8e0 <prvAddNewTaskToReadyList+0x74>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8dc:	4a18      	ldr	r2, [pc, #96]	; (800e940 <prvAddNewTaskToReadyList+0xd4>)
 800e8de:	6013      	str	r3, [r2, #0]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8e4:	4613      	mov	r3, r2
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	4413      	add	r3, r2
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	4a15      	ldr	r2, [pc, #84]	; (800e944 <prvAddNewTaskToReadyList+0xd8>)
 800e8ee:	441a      	add	r2, r3
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	3304      	adds	r3, #4
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	4610      	mov	r0, r2
 800e8f8:	f7ff f827 	bl	800d94a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e8fc:	f001 fa1a 	bl	800fd34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e900:	4b0d      	ldr	r3, [pc, #52]	; (800e938 <prvAddNewTaskToReadyList+0xcc>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d00e      	beq.n	800e926 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e908:	4b0a      	ldr	r3, [pc, #40]	; (800e934 <prvAddNewTaskToReadyList+0xc8>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e912:	429a      	cmp	r2, r3
 800e914:	d207      	bcs.n	800e926 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e916:	4b0c      	ldr	r3, [pc, #48]	; (800e948 <prvAddNewTaskToReadyList+0xdc>)
 800e918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e91c:	601a      	str	r2, [r3, #0]
 800e91e:	f3bf 8f4f 	dsb	sy
 800e922:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e926:	bf00      	nop
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	200010d4 	.word	0x200010d4
 800e934:	20000c00 	.word	0x20000c00
 800e938:	200010e0 	.word	0x200010e0
 800e93c:	200010f0 	.word	0x200010f0
 800e940:	200010dc 	.word	0x200010dc
 800e944:	20000c04 	.word	0x20000c04
 800e948:	e000ed04 	.word	0xe000ed04

0800e94c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e954:	2300      	movs	r3, #0
 800e956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d017      	beq.n	800e98e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e95e:	4b13      	ldr	r3, [pc, #76]	; (800e9ac <vTaskDelay+0x60>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00a      	beq.n	800e97c <vTaskDelay+0x30>
	__asm volatile
 800e966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96a:	f383 8811 	msr	BASEPRI, r3
 800e96e:	f3bf 8f6f 	isb	sy
 800e972:	f3bf 8f4f 	dsb	sy
 800e976:	60bb      	str	r3, [r7, #8]
}
 800e978:	bf00      	nop
 800e97a:	e7fe      	b.n	800e97a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e97c:	f000 f882 	bl	800ea84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e980:	2100      	movs	r1, #0
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 fd10 	bl	800f3a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e988:	f000 f88a 	bl	800eaa0 <xTaskResumeAll>
 800e98c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d107      	bne.n	800e9a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e994:	4b06      	ldr	r3, [pc, #24]	; (800e9b0 <vTaskDelay+0x64>)
 800e996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e99a:	601a      	str	r2, [r3, #0]
 800e99c:	f3bf 8f4f 	dsb	sy
 800e9a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e9a4:	bf00      	nop
 800e9a6:	3710      	adds	r7, #16
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	200010fc 	.word	0x200010fc
 800e9b0:	e000ed04 	.word	0xe000ed04

0800e9b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b08a      	sub	sp, #40	; 0x28
 800e9b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e9c2:	463a      	mov	r2, r7
 800e9c4:	1d39      	adds	r1, r7, #4
 800e9c6:	f107 0308 	add.w	r3, r7, #8
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fe ff5c 	bl	800d888 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e9d0:	6839      	ldr	r1, [r7, #0]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	68ba      	ldr	r2, [r7, #8]
 800e9d6:	9202      	str	r2, [sp, #8]
 800e9d8:	9301      	str	r3, [sp, #4]
 800e9da:	2300      	movs	r3, #0
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	2300      	movs	r3, #0
 800e9e0:	460a      	mov	r2, r1
 800e9e2:	4922      	ldr	r1, [pc, #136]	; (800ea6c <vTaskStartScheduler+0xb8>)
 800e9e4:	4822      	ldr	r0, [pc, #136]	; (800ea70 <vTaskStartScheduler+0xbc>)
 800e9e6:	f7ff fe15 	bl	800e614 <xTaskCreateStatic>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	4a21      	ldr	r2, [pc, #132]	; (800ea74 <vTaskStartScheduler+0xc0>)
 800e9ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e9f0:	4b20      	ldr	r3, [pc, #128]	; (800ea74 <vTaskStartScheduler+0xc0>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d002      	beq.n	800e9fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	617b      	str	r3, [r7, #20]
 800e9fc:	e001      	b.n	800ea02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d102      	bne.n	800ea0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ea08:	f000 fd22 	bl	800f450 <xTimerCreateTimerTask>
 800ea0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d118      	bne.n	800ea46 <vTaskStartScheduler+0x92>
	__asm volatile
 800ea14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea18:	f383 8811 	msr	BASEPRI, r3
 800ea1c:	f3bf 8f6f 	isb	sy
 800ea20:	f3bf 8f4f 	dsb	sy
 800ea24:	613b      	str	r3, [r7, #16]
}
 800ea26:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ea28:	4b13      	ldr	r3, [pc, #76]	; (800ea78 <vTaskStartScheduler+0xc4>)
 800ea2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ea30:	4b12      	ldr	r3, [pc, #72]	; (800ea7c <vTaskStartScheduler+0xc8>)
 800ea32:	2201      	movs	r2, #1
 800ea34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ea36:	4b12      	ldr	r3, [pc, #72]	; (800ea80 <vTaskStartScheduler+0xcc>)
 800ea38:	2200      	movs	r2, #0
 800ea3a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ea3c:	f7f3 fa28 	bl	8001e90 <ConfigureRunTimeCounter>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ea40:	f001 f8a6 	bl	800fb90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ea44:	e00e      	b.n	800ea64 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea4c:	d10a      	bne.n	800ea64 <vTaskStartScheduler+0xb0>
	__asm volatile
 800ea4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea52:	f383 8811 	msr	BASEPRI, r3
 800ea56:	f3bf 8f6f 	isb	sy
 800ea5a:	f3bf 8f4f 	dsb	sy
 800ea5e:	60fb      	str	r3, [r7, #12]
}
 800ea60:	bf00      	nop
 800ea62:	e7fe      	b.n	800ea62 <vTaskStartScheduler+0xae>
}
 800ea64:	bf00      	nop
 800ea66:	3718      	adds	r7, #24
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	0801668c 	.word	0x0801668c
 800ea70:	0800f0d9 	.word	0x0800f0d9
 800ea74:	200010f8 	.word	0x200010f8
 800ea78:	200010f4 	.word	0x200010f4
 800ea7c:	200010e0 	.word	0x200010e0
 800ea80:	200010d8 	.word	0x200010d8

0800ea84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ea84:	b480      	push	{r7}
 800ea86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ea88:	4b04      	ldr	r3, [pc, #16]	; (800ea9c <vTaskSuspendAll+0x18>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	4a03      	ldr	r2, [pc, #12]	; (800ea9c <vTaskSuspendAll+0x18>)
 800ea90:	6013      	str	r3, [r2, #0]
}
 800ea92:	bf00      	nop
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr
 800ea9c:	200010fc 	.word	0x200010fc

0800eaa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eaae:	4b42      	ldr	r3, [pc, #264]	; (800ebb8 <xTaskResumeAll+0x118>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d10a      	bne.n	800eacc <xTaskResumeAll+0x2c>
	__asm volatile
 800eab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaba:	f383 8811 	msr	BASEPRI, r3
 800eabe:	f3bf 8f6f 	isb	sy
 800eac2:	f3bf 8f4f 	dsb	sy
 800eac6:	603b      	str	r3, [r7, #0]
}
 800eac8:	bf00      	nop
 800eaca:	e7fe      	b.n	800eaca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800eacc:	f001 f902 	bl	800fcd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ead0:	4b39      	ldr	r3, [pc, #228]	; (800ebb8 <xTaskResumeAll+0x118>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	3b01      	subs	r3, #1
 800ead6:	4a38      	ldr	r2, [pc, #224]	; (800ebb8 <xTaskResumeAll+0x118>)
 800ead8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eada:	4b37      	ldr	r3, [pc, #220]	; (800ebb8 <xTaskResumeAll+0x118>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d162      	bne.n	800eba8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eae2:	4b36      	ldr	r3, [pc, #216]	; (800ebbc <xTaskResumeAll+0x11c>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d05e      	beq.n	800eba8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eaea:	e02f      	b.n	800eb4c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800eaec:	4b34      	ldr	r3, [pc, #208]	; (800ebc0 <xTaskResumeAll+0x120>)
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	3318      	adds	r3, #24
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7fe ff83 	bl	800da04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	3304      	adds	r3, #4
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7fe ff7e 	bl	800da04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb0c:	4b2d      	ldr	r3, [pc, #180]	; (800ebc4 <xTaskResumeAll+0x124>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d903      	bls.n	800eb1c <xTaskResumeAll+0x7c>
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb18:	4a2a      	ldr	r2, [pc, #168]	; (800ebc4 <xTaskResumeAll+0x124>)
 800eb1a:	6013      	str	r3, [r2, #0]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb20:	4613      	mov	r3, r2
 800eb22:	009b      	lsls	r3, r3, #2
 800eb24:	4413      	add	r3, r2
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	4a27      	ldr	r2, [pc, #156]	; (800ebc8 <xTaskResumeAll+0x128>)
 800eb2a:	441a      	add	r2, r3
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	3304      	adds	r3, #4
 800eb30:	4619      	mov	r1, r3
 800eb32:	4610      	mov	r0, r2
 800eb34:	f7fe ff09 	bl	800d94a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb3c:	4b23      	ldr	r3, [pc, #140]	; (800ebcc <xTaskResumeAll+0x12c>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d302      	bcc.n	800eb4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800eb46:	4b22      	ldr	r3, [pc, #136]	; (800ebd0 <xTaskResumeAll+0x130>)
 800eb48:	2201      	movs	r2, #1
 800eb4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb4c:	4b1c      	ldr	r3, [pc, #112]	; (800ebc0 <xTaskResumeAll+0x120>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d1cb      	bne.n	800eaec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d001      	beq.n	800eb5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eb5a:	f000 fb73 	bl	800f244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800eb5e:	4b1d      	ldr	r3, [pc, #116]	; (800ebd4 <xTaskResumeAll+0x134>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d010      	beq.n	800eb8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eb6a:	f000 f847 	bl	800ebfc <xTaskIncrementTick>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d002      	beq.n	800eb7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800eb74:	4b16      	ldr	r3, [pc, #88]	; (800ebd0 <xTaskResumeAll+0x130>)
 800eb76:	2201      	movs	r2, #1
 800eb78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	3b01      	subs	r3, #1
 800eb7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d1f1      	bne.n	800eb6a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800eb86:	4b13      	ldr	r3, [pc, #76]	; (800ebd4 <xTaskResumeAll+0x134>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eb8c:	4b10      	ldr	r3, [pc, #64]	; (800ebd0 <xTaskResumeAll+0x130>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d009      	beq.n	800eba8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eb94:	2301      	movs	r3, #1
 800eb96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eb98:	4b0f      	ldr	r3, [pc, #60]	; (800ebd8 <xTaskResumeAll+0x138>)
 800eb9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb9e:	601a      	str	r2, [r3, #0]
 800eba0:	f3bf 8f4f 	dsb	sy
 800eba4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eba8:	f001 f8c4 	bl	800fd34 <vPortExitCritical>

	return xAlreadyYielded;
 800ebac:	68bb      	ldr	r3, [r7, #8]
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3710      	adds	r7, #16
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	bf00      	nop
 800ebb8:	200010fc 	.word	0x200010fc
 800ebbc:	200010d4 	.word	0x200010d4
 800ebc0:	20001094 	.word	0x20001094
 800ebc4:	200010dc 	.word	0x200010dc
 800ebc8:	20000c04 	.word	0x20000c04
 800ebcc:	20000c00 	.word	0x20000c00
 800ebd0:	200010e8 	.word	0x200010e8
 800ebd4:	200010e4 	.word	0x200010e4
 800ebd8:	e000ed04 	.word	0xe000ed04

0800ebdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ebe2:	4b05      	ldr	r3, [pc, #20]	; (800ebf8 <xTaskGetTickCount+0x1c>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ebe8:	687b      	ldr	r3, [r7, #4]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	370c      	adds	r7, #12
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf4:	4770      	bx	lr
 800ebf6:	bf00      	nop
 800ebf8:	200010d8 	.word	0x200010d8

0800ebfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b086      	sub	sp, #24
 800ec00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ec02:	2300      	movs	r3, #0
 800ec04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec06:	4b51      	ldr	r3, [pc, #324]	; (800ed4c <xTaskIncrementTick+0x150>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	f040 808e 	bne.w	800ed2c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ec10:	4b4f      	ldr	r3, [pc, #316]	; (800ed50 <xTaskIncrementTick+0x154>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	3301      	adds	r3, #1
 800ec16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ec18:	4a4d      	ldr	r2, [pc, #308]	; (800ed50 <xTaskIncrementTick+0x154>)
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d120      	bne.n	800ec66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ec24:	4b4b      	ldr	r3, [pc, #300]	; (800ed54 <xTaskIncrementTick+0x158>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00a      	beq.n	800ec44 <xTaskIncrementTick+0x48>
	__asm volatile
 800ec2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec32:	f383 8811 	msr	BASEPRI, r3
 800ec36:	f3bf 8f6f 	isb	sy
 800ec3a:	f3bf 8f4f 	dsb	sy
 800ec3e:	603b      	str	r3, [r7, #0]
}
 800ec40:	bf00      	nop
 800ec42:	e7fe      	b.n	800ec42 <xTaskIncrementTick+0x46>
 800ec44:	4b43      	ldr	r3, [pc, #268]	; (800ed54 <xTaskIncrementTick+0x158>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	60fb      	str	r3, [r7, #12]
 800ec4a:	4b43      	ldr	r3, [pc, #268]	; (800ed58 <xTaskIncrementTick+0x15c>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	4a41      	ldr	r2, [pc, #260]	; (800ed54 <xTaskIncrementTick+0x158>)
 800ec50:	6013      	str	r3, [r2, #0]
 800ec52:	4a41      	ldr	r2, [pc, #260]	; (800ed58 <xTaskIncrementTick+0x15c>)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6013      	str	r3, [r2, #0]
 800ec58:	4b40      	ldr	r3, [pc, #256]	; (800ed5c <xTaskIncrementTick+0x160>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	4a3f      	ldr	r2, [pc, #252]	; (800ed5c <xTaskIncrementTick+0x160>)
 800ec60:	6013      	str	r3, [r2, #0]
 800ec62:	f000 faef 	bl	800f244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ec66:	4b3e      	ldr	r3, [pc, #248]	; (800ed60 <xTaskIncrementTick+0x164>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	693a      	ldr	r2, [r7, #16]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d34e      	bcc.n	800ed0e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec70:	4b38      	ldr	r3, [pc, #224]	; (800ed54 <xTaskIncrementTick+0x158>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d101      	bne.n	800ec7e <xTaskIncrementTick+0x82>
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e000      	b.n	800ec80 <xTaskIncrementTick+0x84>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d004      	beq.n	800ec8e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec84:	4b36      	ldr	r3, [pc, #216]	; (800ed60 <xTaskIncrementTick+0x164>)
 800ec86:	f04f 32ff 	mov.w	r2, #4294967295
 800ec8a:	601a      	str	r2, [r3, #0]
					break;
 800ec8c:	e03f      	b.n	800ed0e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ec8e:	4b31      	ldr	r3, [pc, #196]	; (800ed54 <xTaskIncrementTick+0x158>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ec9e:	693a      	ldr	r2, [r7, #16]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d203      	bcs.n	800ecae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eca6:	4a2e      	ldr	r2, [pc, #184]	; (800ed60 <xTaskIncrementTick+0x164>)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6013      	str	r3, [r2, #0]
						break;
 800ecac:	e02f      	b.n	800ed0e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	3304      	adds	r3, #4
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fe fea6 	bl	800da04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d004      	beq.n	800ecca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	3318      	adds	r3, #24
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7fe fe9d 	bl	800da04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecce:	4b25      	ldr	r3, [pc, #148]	; (800ed64 <xTaskIncrementTick+0x168>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d903      	bls.n	800ecde <xTaskIncrementTick+0xe2>
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecda:	4a22      	ldr	r2, [pc, #136]	; (800ed64 <xTaskIncrementTick+0x168>)
 800ecdc:	6013      	str	r3, [r2, #0]
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ece2:	4613      	mov	r3, r2
 800ece4:	009b      	lsls	r3, r3, #2
 800ece6:	4413      	add	r3, r2
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	4a1f      	ldr	r2, [pc, #124]	; (800ed68 <xTaskIncrementTick+0x16c>)
 800ecec:	441a      	add	r2, r3
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	3304      	adds	r3, #4
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	4610      	mov	r0, r2
 800ecf6:	f7fe fe28 	bl	800d94a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecfe:	4b1b      	ldr	r3, [pc, #108]	; (800ed6c <xTaskIncrementTick+0x170>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d3b3      	bcc.n	800ec70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed0c:	e7b0      	b.n	800ec70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ed0e:	4b17      	ldr	r3, [pc, #92]	; (800ed6c <xTaskIncrementTick+0x170>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed14:	4914      	ldr	r1, [pc, #80]	; (800ed68 <xTaskIncrementTick+0x16c>)
 800ed16:	4613      	mov	r3, r2
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	4413      	add	r3, r2
 800ed1c:	009b      	lsls	r3, r3, #2
 800ed1e:	440b      	add	r3, r1
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	d907      	bls.n	800ed36 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ed26:	2301      	movs	r3, #1
 800ed28:	617b      	str	r3, [r7, #20]
 800ed2a:	e004      	b.n	800ed36 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ed2c:	4b10      	ldr	r3, [pc, #64]	; (800ed70 <xTaskIncrementTick+0x174>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	3301      	adds	r3, #1
 800ed32:	4a0f      	ldr	r2, [pc, #60]	; (800ed70 <xTaskIncrementTick+0x174>)
 800ed34:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ed36:	4b0f      	ldr	r3, [pc, #60]	; (800ed74 <xTaskIncrementTick+0x178>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d001      	beq.n	800ed42 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ed42:	697b      	ldr	r3, [r7, #20]
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3718      	adds	r7, #24
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	200010fc 	.word	0x200010fc
 800ed50:	200010d8 	.word	0x200010d8
 800ed54:	2000108c 	.word	0x2000108c
 800ed58:	20001090 	.word	0x20001090
 800ed5c:	200010ec 	.word	0x200010ec
 800ed60:	200010f4 	.word	0x200010f4
 800ed64:	200010dc 	.word	0x200010dc
 800ed68:	20000c04 	.word	0x20000c04
 800ed6c:	20000c00 	.word	0x20000c00
 800ed70:	200010e4 	.word	0x200010e4
 800ed74:	200010e8 	.word	0x200010e8

0800ed78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ed7e:	4b33      	ldr	r3, [pc, #204]	; (800ee4c <vTaskSwitchContext+0xd4>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d003      	beq.n	800ed8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ed86:	4b32      	ldr	r3, [pc, #200]	; (800ee50 <vTaskSwitchContext+0xd8>)
 800ed88:	2201      	movs	r2, #1
 800ed8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ed8c:	e05a      	b.n	800ee44 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 800ed8e:	4b30      	ldr	r3, [pc, #192]	; (800ee50 <vTaskSwitchContext+0xd8>)
 800ed90:	2200      	movs	r2, #0
 800ed92:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ed94:	f7f3 f888 	bl	8001ea8 <GetRunTimeCounter>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	4a2e      	ldr	r2, [pc, #184]	; (800ee54 <vTaskSwitchContext+0xdc>)
 800ed9c:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ed9e:	4b2d      	ldr	r3, [pc, #180]	; (800ee54 <vTaskSwitchContext+0xdc>)
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	4b2d      	ldr	r3, [pc, #180]	; (800ee58 <vTaskSwitchContext+0xe0>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d909      	bls.n	800edbe <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800edaa:	4b2c      	ldr	r3, [pc, #176]	; (800ee5c <vTaskSwitchContext+0xe4>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800edb0:	4a28      	ldr	r2, [pc, #160]	; (800ee54 <vTaskSwitchContext+0xdc>)
 800edb2:	6810      	ldr	r0, [r2, #0]
 800edb4:	4a28      	ldr	r2, [pc, #160]	; (800ee58 <vTaskSwitchContext+0xe0>)
 800edb6:	6812      	ldr	r2, [r2, #0]
 800edb8:	1a82      	subs	r2, r0, r2
 800edba:	440a      	add	r2, r1
 800edbc:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800edbe:	4b25      	ldr	r3, [pc, #148]	; (800ee54 <vTaskSwitchContext+0xdc>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4a25      	ldr	r2, [pc, #148]	; (800ee58 <vTaskSwitchContext+0xe0>)
 800edc4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800edc6:	4b26      	ldr	r3, [pc, #152]	; (800ee60 <vTaskSwitchContext+0xe8>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	60fb      	str	r3, [r7, #12]
 800edcc:	e010      	b.n	800edf0 <vTaskSwitchContext+0x78>
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d10a      	bne.n	800edea <vTaskSwitchContext+0x72>
	__asm volatile
 800edd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd8:	f383 8811 	msr	BASEPRI, r3
 800eddc:	f3bf 8f6f 	isb	sy
 800ede0:	f3bf 8f4f 	dsb	sy
 800ede4:	607b      	str	r3, [r7, #4]
}
 800ede6:	bf00      	nop
 800ede8:	e7fe      	b.n	800ede8 <vTaskSwitchContext+0x70>
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	3b01      	subs	r3, #1
 800edee:	60fb      	str	r3, [r7, #12]
 800edf0:	491c      	ldr	r1, [pc, #112]	; (800ee64 <vTaskSwitchContext+0xec>)
 800edf2:	68fa      	ldr	r2, [r7, #12]
 800edf4:	4613      	mov	r3, r2
 800edf6:	009b      	lsls	r3, r3, #2
 800edf8:	4413      	add	r3, r2
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	440b      	add	r3, r1
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d0e4      	beq.n	800edce <vTaskSwitchContext+0x56>
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	4613      	mov	r3, r2
 800ee08:	009b      	lsls	r3, r3, #2
 800ee0a:	4413      	add	r3, r2
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	4a15      	ldr	r2, [pc, #84]	; (800ee64 <vTaskSwitchContext+0xec>)
 800ee10:	4413      	add	r3, r2
 800ee12:	60bb      	str	r3, [r7, #8]
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	685a      	ldr	r2, [r3, #4]
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	605a      	str	r2, [r3, #4]
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	685a      	ldr	r2, [r3, #4]
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	3308      	adds	r3, #8
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d104      	bne.n	800ee34 <vTaskSwitchContext+0xbc>
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	685a      	ldr	r2, [r3, #4]
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	605a      	str	r2, [r3, #4]
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	4a08      	ldr	r2, [pc, #32]	; (800ee5c <vTaskSwitchContext+0xe4>)
 800ee3c:	6013      	str	r3, [r2, #0]
 800ee3e:	4a08      	ldr	r2, [pc, #32]	; (800ee60 <vTaskSwitchContext+0xe8>)
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6013      	str	r3, [r2, #0]
}
 800ee44:	bf00      	nop
 800ee46:	3710      	adds	r7, #16
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	200010fc 	.word	0x200010fc
 800ee50:	200010e8 	.word	0x200010e8
 800ee54:	20001104 	.word	0x20001104
 800ee58:	20001100 	.word	0x20001100
 800ee5c:	20000c00 	.word	0x20000c00
 800ee60:	200010dc 	.word	0x200010dc
 800ee64:	20000c04 	.word	0x20000c04

0800ee68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d10a      	bne.n	800ee8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ee78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7c:	f383 8811 	msr	BASEPRI, r3
 800ee80:	f3bf 8f6f 	isb	sy
 800ee84:	f3bf 8f4f 	dsb	sy
 800ee88:	60fb      	str	r3, [r7, #12]
}
 800ee8a:	bf00      	nop
 800ee8c:	e7fe      	b.n	800ee8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee8e:	4b07      	ldr	r3, [pc, #28]	; (800eeac <vTaskPlaceOnEventList+0x44>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	3318      	adds	r3, #24
 800ee94:	4619      	mov	r1, r3
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f7fe fd7b 	bl	800d992 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee9c:	2101      	movs	r1, #1
 800ee9e:	6838      	ldr	r0, [r7, #0]
 800eea0:	f000 fa82 	bl	800f3a8 <prvAddCurrentTaskToDelayedList>
}
 800eea4:	bf00      	nop
 800eea6:	3710      	adds	r7, #16
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	20000c00 	.word	0x20000c00

0800eeb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b086      	sub	sp, #24
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d10a      	bne.n	800eed8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800eec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec6:	f383 8811 	msr	BASEPRI, r3
 800eeca:	f3bf 8f6f 	isb	sy
 800eece:	f3bf 8f4f 	dsb	sy
 800eed2:	617b      	str	r3, [r7, #20]
}
 800eed4:	bf00      	nop
 800eed6:	e7fe      	b.n	800eed6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eed8:	4b0a      	ldr	r3, [pc, #40]	; (800ef04 <vTaskPlaceOnEventListRestricted+0x54>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	3318      	adds	r3, #24
 800eede:	4619      	mov	r1, r3
 800eee0:	68f8      	ldr	r0, [r7, #12]
 800eee2:	f7fe fd32 	bl	800d94a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d002      	beq.n	800eef2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800eeec:	f04f 33ff 	mov.w	r3, #4294967295
 800eef0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eef2:	6879      	ldr	r1, [r7, #4]
 800eef4:	68b8      	ldr	r0, [r7, #8]
 800eef6:	f000 fa57 	bl	800f3a8 <prvAddCurrentTaskToDelayedList>
	}
 800eefa:	bf00      	nop
 800eefc:	3718      	adds	r7, #24
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	20000c00 	.word	0x20000c00

0800ef08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b086      	sub	sp, #24
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d10a      	bne.n	800ef34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ef1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef22:	f383 8811 	msr	BASEPRI, r3
 800ef26:	f3bf 8f6f 	isb	sy
 800ef2a:	f3bf 8f4f 	dsb	sy
 800ef2e:	60fb      	str	r3, [r7, #12]
}
 800ef30:	bf00      	nop
 800ef32:	e7fe      	b.n	800ef32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	3318      	adds	r3, #24
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7fe fd63 	bl	800da04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef3e:	4b1e      	ldr	r3, [pc, #120]	; (800efb8 <xTaskRemoveFromEventList+0xb0>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d11d      	bne.n	800ef82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	3304      	adds	r3, #4
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fe fd5a 	bl	800da04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef54:	4b19      	ldr	r3, [pc, #100]	; (800efbc <xTaskRemoveFromEventList+0xb4>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d903      	bls.n	800ef64 <xTaskRemoveFromEventList+0x5c>
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef60:	4a16      	ldr	r2, [pc, #88]	; (800efbc <xTaskRemoveFromEventList+0xb4>)
 800ef62:	6013      	str	r3, [r2, #0]
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef68:	4613      	mov	r3, r2
 800ef6a:	009b      	lsls	r3, r3, #2
 800ef6c:	4413      	add	r3, r2
 800ef6e:	009b      	lsls	r3, r3, #2
 800ef70:	4a13      	ldr	r2, [pc, #76]	; (800efc0 <xTaskRemoveFromEventList+0xb8>)
 800ef72:	441a      	add	r2, r3
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	3304      	adds	r3, #4
 800ef78:	4619      	mov	r1, r3
 800ef7a:	4610      	mov	r0, r2
 800ef7c:	f7fe fce5 	bl	800d94a <vListInsertEnd>
 800ef80:	e005      	b.n	800ef8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	3318      	adds	r3, #24
 800ef86:	4619      	mov	r1, r3
 800ef88:	480e      	ldr	r0, [pc, #56]	; (800efc4 <xTaskRemoveFromEventList+0xbc>)
 800ef8a:	f7fe fcde 	bl	800d94a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef92:	4b0d      	ldr	r3, [pc, #52]	; (800efc8 <xTaskRemoveFromEventList+0xc0>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d905      	bls.n	800efa8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800efa0:	4b0a      	ldr	r3, [pc, #40]	; (800efcc <xTaskRemoveFromEventList+0xc4>)
 800efa2:	2201      	movs	r2, #1
 800efa4:	601a      	str	r2, [r3, #0]
 800efa6:	e001      	b.n	800efac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800efa8:	2300      	movs	r3, #0
 800efaa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800efac:	697b      	ldr	r3, [r7, #20]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3718      	adds	r7, #24
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	200010fc 	.word	0x200010fc
 800efbc:	200010dc 	.word	0x200010dc
 800efc0:	20000c04 	.word	0x20000c04
 800efc4:	20001094 	.word	0x20001094
 800efc8:	20000c00 	.word	0x20000c00
 800efcc:	200010e8 	.word	0x200010e8

0800efd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800efd8:	4b06      	ldr	r3, [pc, #24]	; (800eff4 <vTaskInternalSetTimeOutState+0x24>)
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800efe0:	4b05      	ldr	r3, [pc, #20]	; (800eff8 <vTaskInternalSetTimeOutState+0x28>)
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	605a      	str	r2, [r3, #4]
}
 800efe8:	bf00      	nop
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr
 800eff4:	200010ec 	.word	0x200010ec
 800eff8:	200010d8 	.word	0x200010d8

0800effc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b088      	sub	sp, #32
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d10a      	bne.n	800f022 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f010:	f383 8811 	msr	BASEPRI, r3
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	613b      	str	r3, [r7, #16]
}
 800f01e:	bf00      	nop
 800f020:	e7fe      	b.n	800f020 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d10a      	bne.n	800f03e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02c:	f383 8811 	msr	BASEPRI, r3
 800f030:	f3bf 8f6f 	isb	sy
 800f034:	f3bf 8f4f 	dsb	sy
 800f038:	60fb      	str	r3, [r7, #12]
}
 800f03a:	bf00      	nop
 800f03c:	e7fe      	b.n	800f03c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f03e:	f000 fe49 	bl	800fcd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f042:	4b1d      	ldr	r3, [pc, #116]	; (800f0b8 <xTaskCheckForTimeOut+0xbc>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	69ba      	ldr	r2, [r7, #24]
 800f04e:	1ad3      	subs	r3, r2, r3
 800f050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f05a:	d102      	bne.n	800f062 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f05c:	2300      	movs	r3, #0
 800f05e:	61fb      	str	r3, [r7, #28]
 800f060:	e023      	b.n	800f0aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	4b15      	ldr	r3, [pc, #84]	; (800f0bc <xTaskCheckForTimeOut+0xc0>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d007      	beq.n	800f07e <xTaskCheckForTimeOut+0x82>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	69ba      	ldr	r2, [r7, #24]
 800f074:	429a      	cmp	r2, r3
 800f076:	d302      	bcc.n	800f07e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f078:	2301      	movs	r3, #1
 800f07a:	61fb      	str	r3, [r7, #28]
 800f07c:	e015      	b.n	800f0aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	697a      	ldr	r2, [r7, #20]
 800f084:	429a      	cmp	r2, r3
 800f086:	d20b      	bcs.n	800f0a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	1ad2      	subs	r2, r2, r3
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f7ff ff9b 	bl	800efd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f09a:	2300      	movs	r3, #0
 800f09c:	61fb      	str	r3, [r7, #28]
 800f09e:	e004      	b.n	800f0aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f0aa:	f000 fe43 	bl	800fd34 <vPortExitCritical>

	return xReturn;
 800f0ae:	69fb      	ldr	r3, [r7, #28]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3720      	adds	r7, #32
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}
 800f0b8:	200010d8 	.word	0x200010d8
 800f0bc:	200010ec 	.word	0x200010ec

0800f0c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f0c4:	4b03      	ldr	r3, [pc, #12]	; (800f0d4 <vTaskMissedYield+0x14>)
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	601a      	str	r2, [r3, #0]
}
 800f0ca:	bf00      	nop
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr
 800f0d4:	200010e8 	.word	0x200010e8

0800f0d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f0e0:	f000 f852 	bl	800f188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f0e4:	4b06      	ldr	r3, [pc, #24]	; (800f100 <prvIdleTask+0x28>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d9f9      	bls.n	800f0e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f0ec:	4b05      	ldr	r3, [pc, #20]	; (800f104 <prvIdleTask+0x2c>)
 800f0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0f2:	601a      	str	r2, [r3, #0]
 800f0f4:	f3bf 8f4f 	dsb	sy
 800f0f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f0fc:	e7f0      	b.n	800f0e0 <prvIdleTask+0x8>
 800f0fe:	bf00      	nop
 800f100:	20000c04 	.word	0x20000c04
 800f104:	e000ed04 	.word	0xe000ed04

0800f108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b082      	sub	sp, #8
 800f10c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f10e:	2300      	movs	r3, #0
 800f110:	607b      	str	r3, [r7, #4]
 800f112:	e00c      	b.n	800f12e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	4613      	mov	r3, r2
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	4413      	add	r3, r2
 800f11c:	009b      	lsls	r3, r3, #2
 800f11e:	4a12      	ldr	r2, [pc, #72]	; (800f168 <prvInitialiseTaskLists+0x60>)
 800f120:	4413      	add	r3, r2
 800f122:	4618      	mov	r0, r3
 800f124:	f7fe fbe4 	bl	800d8f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	3301      	adds	r3, #1
 800f12c:	607b      	str	r3, [r7, #4]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2b37      	cmp	r3, #55	; 0x37
 800f132:	d9ef      	bls.n	800f114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f134:	480d      	ldr	r0, [pc, #52]	; (800f16c <prvInitialiseTaskLists+0x64>)
 800f136:	f7fe fbdb 	bl	800d8f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f13a:	480d      	ldr	r0, [pc, #52]	; (800f170 <prvInitialiseTaskLists+0x68>)
 800f13c:	f7fe fbd8 	bl	800d8f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f140:	480c      	ldr	r0, [pc, #48]	; (800f174 <prvInitialiseTaskLists+0x6c>)
 800f142:	f7fe fbd5 	bl	800d8f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f146:	480c      	ldr	r0, [pc, #48]	; (800f178 <prvInitialiseTaskLists+0x70>)
 800f148:	f7fe fbd2 	bl	800d8f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f14c:	480b      	ldr	r0, [pc, #44]	; (800f17c <prvInitialiseTaskLists+0x74>)
 800f14e:	f7fe fbcf 	bl	800d8f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f152:	4b0b      	ldr	r3, [pc, #44]	; (800f180 <prvInitialiseTaskLists+0x78>)
 800f154:	4a05      	ldr	r2, [pc, #20]	; (800f16c <prvInitialiseTaskLists+0x64>)
 800f156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f158:	4b0a      	ldr	r3, [pc, #40]	; (800f184 <prvInitialiseTaskLists+0x7c>)
 800f15a:	4a05      	ldr	r2, [pc, #20]	; (800f170 <prvInitialiseTaskLists+0x68>)
 800f15c:	601a      	str	r2, [r3, #0]
}
 800f15e:	bf00      	nop
 800f160:	3708      	adds	r7, #8
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
 800f166:	bf00      	nop
 800f168:	20000c04 	.word	0x20000c04
 800f16c:	20001064 	.word	0x20001064
 800f170:	20001078 	.word	0x20001078
 800f174:	20001094 	.word	0x20001094
 800f178:	200010a8 	.word	0x200010a8
 800f17c:	200010c0 	.word	0x200010c0
 800f180:	2000108c 	.word	0x2000108c
 800f184:	20001090 	.word	0x20001090

0800f188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f18e:	e019      	b.n	800f1c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f190:	f000 fda0 	bl	800fcd4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f194:	4b10      	ldr	r3, [pc, #64]	; (800f1d8 <prvCheckTasksWaitingTermination+0x50>)
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	68db      	ldr	r3, [r3, #12]
 800f19a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	3304      	adds	r3, #4
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7fe fc2f 	bl	800da04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f1a6:	4b0d      	ldr	r3, [pc, #52]	; (800f1dc <prvCheckTasksWaitingTermination+0x54>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	3b01      	subs	r3, #1
 800f1ac:	4a0b      	ldr	r2, [pc, #44]	; (800f1dc <prvCheckTasksWaitingTermination+0x54>)
 800f1ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f1b0:	4b0b      	ldr	r3, [pc, #44]	; (800f1e0 <prvCheckTasksWaitingTermination+0x58>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	3b01      	subs	r3, #1
 800f1b6:	4a0a      	ldr	r2, [pc, #40]	; (800f1e0 <prvCheckTasksWaitingTermination+0x58>)
 800f1b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f1ba:	f000 fdbb 	bl	800fd34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f000 f810 	bl	800f1e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f1c4:	4b06      	ldr	r3, [pc, #24]	; (800f1e0 <prvCheckTasksWaitingTermination+0x58>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1e1      	bne.n	800f190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f1cc:	bf00      	nop
 800f1ce:	bf00      	nop
 800f1d0:	3708      	adds	r7, #8
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	200010a8 	.word	0x200010a8
 800f1dc:	200010d4 	.word	0x200010d4
 800f1e0:	200010bc 	.word	0x200010bc

0800f1e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b084      	sub	sp, #16
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d108      	bne.n	800f208 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f000 fed2 	bl	800ffa4 <vPortFree>
				vPortFree( pxTCB );
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 fecf 	bl	800ffa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f206:	e018      	b.n	800f23a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d103      	bne.n	800f21a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 fec6 	bl	800ffa4 <vPortFree>
	}
 800f218:	e00f      	b.n	800f23a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f220:	2b02      	cmp	r3, #2
 800f222:	d00a      	beq.n	800f23a <prvDeleteTCB+0x56>
	__asm volatile
 800f224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f228:	f383 8811 	msr	BASEPRI, r3
 800f22c:	f3bf 8f6f 	isb	sy
 800f230:	f3bf 8f4f 	dsb	sy
 800f234:	60fb      	str	r3, [r7, #12]
}
 800f236:	bf00      	nop
 800f238:	e7fe      	b.n	800f238 <prvDeleteTCB+0x54>
	}
 800f23a:	bf00      	nop
 800f23c:	3710      	adds	r7, #16
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
	...

0800f244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f24a:	4b0f      	ldr	r3, [pc, #60]	; (800f288 <prvResetNextTaskUnblockTime+0x44>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d101      	bne.n	800f258 <prvResetNextTaskUnblockTime+0x14>
 800f254:	2301      	movs	r3, #1
 800f256:	e000      	b.n	800f25a <prvResetNextTaskUnblockTime+0x16>
 800f258:	2300      	movs	r3, #0
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d004      	beq.n	800f268 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f25e:	4b0b      	ldr	r3, [pc, #44]	; (800f28c <prvResetNextTaskUnblockTime+0x48>)
 800f260:	f04f 32ff 	mov.w	r2, #4294967295
 800f264:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f266:	e008      	b.n	800f27a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f268:	4b07      	ldr	r3, [pc, #28]	; (800f288 <prvResetNextTaskUnblockTime+0x44>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	68db      	ldr	r3, [r3, #12]
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	4a05      	ldr	r2, [pc, #20]	; (800f28c <prvResetNextTaskUnblockTime+0x48>)
 800f278:	6013      	str	r3, [r2, #0]
}
 800f27a:	bf00      	nop
 800f27c:	370c      	adds	r7, #12
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	2000108c 	.word	0x2000108c
 800f28c:	200010f4 	.word	0x200010f4

0800f290 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f296:	4b0b      	ldr	r3, [pc, #44]	; (800f2c4 <xTaskGetSchedulerState+0x34>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d102      	bne.n	800f2a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f29e:	2301      	movs	r3, #1
 800f2a0:	607b      	str	r3, [r7, #4]
 800f2a2:	e008      	b.n	800f2b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2a4:	4b08      	ldr	r3, [pc, #32]	; (800f2c8 <xTaskGetSchedulerState+0x38>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d102      	bne.n	800f2b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f2ac:	2302      	movs	r3, #2
 800f2ae:	607b      	str	r3, [r7, #4]
 800f2b0:	e001      	b.n	800f2b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f2b6:	687b      	ldr	r3, [r7, #4]
	}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr
 800f2c4:	200010e0 	.word	0x200010e0
 800f2c8:	200010fc 	.word	0x200010fc

0800f2cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b086      	sub	sp, #24
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d056      	beq.n	800f390 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f2e2:	4b2e      	ldr	r3, [pc, #184]	; (800f39c <xTaskPriorityDisinherit+0xd0>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	693a      	ldr	r2, [r7, #16]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d00a      	beq.n	800f302 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f0:	f383 8811 	msr	BASEPRI, r3
 800f2f4:	f3bf 8f6f 	isb	sy
 800f2f8:	f3bf 8f4f 	dsb	sy
 800f2fc:	60fb      	str	r3, [r7, #12]
}
 800f2fe:	bf00      	nop
 800f300:	e7fe      	b.n	800f300 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f306:	2b00      	cmp	r3, #0
 800f308:	d10a      	bne.n	800f320 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30e:	f383 8811 	msr	BASEPRI, r3
 800f312:	f3bf 8f6f 	isb	sy
 800f316:	f3bf 8f4f 	dsb	sy
 800f31a:	60bb      	str	r3, [r7, #8]
}
 800f31c:	bf00      	nop
 800f31e:	e7fe      	b.n	800f31e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f324:	1e5a      	subs	r2, r3, #1
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f332:	429a      	cmp	r2, r3
 800f334:	d02c      	beq.n	800f390 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d128      	bne.n	800f390 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	3304      	adds	r3, #4
 800f342:	4618      	mov	r0, r3
 800f344:	f7fe fb5e 	bl	800da04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f354:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f360:	4b0f      	ldr	r3, [pc, #60]	; (800f3a0 <xTaskPriorityDisinherit+0xd4>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	429a      	cmp	r2, r3
 800f366:	d903      	bls.n	800f370 <xTaskPriorityDisinherit+0xa4>
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f36c:	4a0c      	ldr	r2, [pc, #48]	; (800f3a0 <xTaskPriorityDisinherit+0xd4>)
 800f36e:	6013      	str	r3, [r2, #0]
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f374:	4613      	mov	r3, r2
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	4413      	add	r3, r2
 800f37a:	009b      	lsls	r3, r3, #2
 800f37c:	4a09      	ldr	r2, [pc, #36]	; (800f3a4 <xTaskPriorityDisinherit+0xd8>)
 800f37e:	441a      	add	r2, r3
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	3304      	adds	r3, #4
 800f384:	4619      	mov	r1, r3
 800f386:	4610      	mov	r0, r2
 800f388:	f7fe fadf 	bl	800d94a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f38c:	2301      	movs	r3, #1
 800f38e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f390:	697b      	ldr	r3, [r7, #20]
	}
 800f392:	4618      	mov	r0, r3
 800f394:	3718      	adds	r7, #24
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	20000c00 	.word	0x20000c00
 800f3a0:	200010dc 	.word	0x200010dc
 800f3a4:	20000c04 	.word	0x20000c04

0800f3a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f3b2:	4b21      	ldr	r3, [pc, #132]	; (800f438 <prvAddCurrentTaskToDelayedList+0x90>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3b8:	4b20      	ldr	r3, [pc, #128]	; (800f43c <prvAddCurrentTaskToDelayedList+0x94>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	3304      	adds	r3, #4
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fe fb20 	bl	800da04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ca:	d10a      	bne.n	800f3e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d007      	beq.n	800f3e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3d2:	4b1a      	ldr	r3, [pc, #104]	; (800f43c <prvAddCurrentTaskToDelayedList+0x94>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	3304      	adds	r3, #4
 800f3d8:	4619      	mov	r1, r3
 800f3da:	4819      	ldr	r0, [pc, #100]	; (800f440 <prvAddCurrentTaskToDelayedList+0x98>)
 800f3dc:	f7fe fab5 	bl	800d94a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f3e0:	e026      	b.n	800f430 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f3ea:	4b14      	ldr	r3, [pc, #80]	; (800f43c <prvAddCurrentTaskToDelayedList+0x94>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	68ba      	ldr	r2, [r7, #8]
 800f3f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f3f2:	68ba      	ldr	r2, [r7, #8]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d209      	bcs.n	800f40e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3fa:	4b12      	ldr	r3, [pc, #72]	; (800f444 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	4b0f      	ldr	r3, [pc, #60]	; (800f43c <prvAddCurrentTaskToDelayedList+0x94>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	3304      	adds	r3, #4
 800f404:	4619      	mov	r1, r3
 800f406:	4610      	mov	r0, r2
 800f408:	f7fe fac3 	bl	800d992 <vListInsert>
}
 800f40c:	e010      	b.n	800f430 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f40e:	4b0e      	ldr	r3, [pc, #56]	; (800f448 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	4b0a      	ldr	r3, [pc, #40]	; (800f43c <prvAddCurrentTaskToDelayedList+0x94>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	3304      	adds	r3, #4
 800f418:	4619      	mov	r1, r3
 800f41a:	4610      	mov	r0, r2
 800f41c:	f7fe fab9 	bl	800d992 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f420:	4b0a      	ldr	r3, [pc, #40]	; (800f44c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	68ba      	ldr	r2, [r7, #8]
 800f426:	429a      	cmp	r2, r3
 800f428:	d202      	bcs.n	800f430 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f42a:	4a08      	ldr	r2, [pc, #32]	; (800f44c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	6013      	str	r3, [r2, #0]
}
 800f430:	bf00      	nop
 800f432:	3710      	adds	r7, #16
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}
 800f438:	200010d8 	.word	0x200010d8
 800f43c:	20000c00 	.word	0x20000c00
 800f440:	200010c0 	.word	0x200010c0
 800f444:	20001090 	.word	0x20001090
 800f448:	2000108c 	.word	0x2000108c
 800f44c:	200010f4 	.word	0x200010f4

0800f450 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b08a      	sub	sp, #40	; 0x28
 800f454:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f456:	2300      	movs	r3, #0
 800f458:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f45a:	f000 facb 	bl	800f9f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f45e:	4b1c      	ldr	r3, [pc, #112]	; (800f4d0 <xTimerCreateTimerTask+0x80>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d021      	beq.n	800f4aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f466:	2300      	movs	r3, #0
 800f468:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f46a:	2300      	movs	r3, #0
 800f46c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f46e:	1d3a      	adds	r2, r7, #4
 800f470:	f107 0108 	add.w	r1, r7, #8
 800f474:	f107 030c 	add.w	r3, r7, #12
 800f478:	4618      	mov	r0, r3
 800f47a:	f7fe fa1f 	bl	800d8bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f47e:	6879      	ldr	r1, [r7, #4]
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	68fa      	ldr	r2, [r7, #12]
 800f484:	9202      	str	r2, [sp, #8]
 800f486:	9301      	str	r3, [sp, #4]
 800f488:	2302      	movs	r3, #2
 800f48a:	9300      	str	r3, [sp, #0]
 800f48c:	2300      	movs	r3, #0
 800f48e:	460a      	mov	r2, r1
 800f490:	4910      	ldr	r1, [pc, #64]	; (800f4d4 <xTimerCreateTimerTask+0x84>)
 800f492:	4811      	ldr	r0, [pc, #68]	; (800f4d8 <xTimerCreateTimerTask+0x88>)
 800f494:	f7ff f8be 	bl	800e614 <xTaskCreateStatic>
 800f498:	4603      	mov	r3, r0
 800f49a:	4a10      	ldr	r2, [pc, #64]	; (800f4dc <xTimerCreateTimerTask+0x8c>)
 800f49c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f49e:	4b0f      	ldr	r3, [pc, #60]	; (800f4dc <xTimerCreateTimerTask+0x8c>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d001      	beq.n	800f4aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d10a      	bne.n	800f4c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b4:	f383 8811 	msr	BASEPRI, r3
 800f4b8:	f3bf 8f6f 	isb	sy
 800f4bc:	f3bf 8f4f 	dsb	sy
 800f4c0:	613b      	str	r3, [r7, #16]
}
 800f4c2:	bf00      	nop
 800f4c4:	e7fe      	b.n	800f4c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f4c6:	697b      	ldr	r3, [r7, #20]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3718      	adds	r7, #24
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	20001138 	.word	0x20001138
 800f4d4:	08016694 	.word	0x08016694
 800f4d8:	0800f5fd 	.word	0x0800f5fd
 800f4dc:	2000113c 	.word	0x2000113c

0800f4e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b08a      	sub	sp, #40	; 0x28
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
 800f4ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d10a      	bne.n	800f50e <xTimerGenericCommand+0x2e>
	__asm volatile
 800f4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fc:	f383 8811 	msr	BASEPRI, r3
 800f500:	f3bf 8f6f 	isb	sy
 800f504:	f3bf 8f4f 	dsb	sy
 800f508:	623b      	str	r3, [r7, #32]
}
 800f50a:	bf00      	nop
 800f50c:	e7fe      	b.n	800f50c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f50e:	4b1a      	ldr	r3, [pc, #104]	; (800f578 <xTimerGenericCommand+0x98>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d02a      	beq.n	800f56c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	2b05      	cmp	r3, #5
 800f526:	dc18      	bgt.n	800f55a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f528:	f7ff feb2 	bl	800f290 <xTaskGetSchedulerState>
 800f52c:	4603      	mov	r3, r0
 800f52e:	2b02      	cmp	r3, #2
 800f530:	d109      	bne.n	800f546 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f532:	4b11      	ldr	r3, [pc, #68]	; (800f578 <xTimerGenericCommand+0x98>)
 800f534:	6818      	ldr	r0, [r3, #0]
 800f536:	f107 0110 	add.w	r1, r7, #16
 800f53a:	2300      	movs	r3, #0
 800f53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f53e:	f7fe fbcb 	bl	800dcd8 <xQueueGenericSend>
 800f542:	6278      	str	r0, [r7, #36]	; 0x24
 800f544:	e012      	b.n	800f56c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f546:	4b0c      	ldr	r3, [pc, #48]	; (800f578 <xTimerGenericCommand+0x98>)
 800f548:	6818      	ldr	r0, [r3, #0]
 800f54a:	f107 0110 	add.w	r1, r7, #16
 800f54e:	2300      	movs	r3, #0
 800f550:	2200      	movs	r2, #0
 800f552:	f7fe fbc1 	bl	800dcd8 <xQueueGenericSend>
 800f556:	6278      	str	r0, [r7, #36]	; 0x24
 800f558:	e008      	b.n	800f56c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f55a:	4b07      	ldr	r3, [pc, #28]	; (800f578 <xTimerGenericCommand+0x98>)
 800f55c:	6818      	ldr	r0, [r3, #0]
 800f55e:	f107 0110 	add.w	r1, r7, #16
 800f562:	2300      	movs	r3, #0
 800f564:	683a      	ldr	r2, [r7, #0]
 800f566:	f7fe fcb5 	bl	800ded4 <xQueueGenericSendFromISR>
 800f56a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3728      	adds	r7, #40	; 0x28
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	20001138 	.word	0x20001138

0800f57c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b088      	sub	sp, #32
 800f580:	af02      	add	r7, sp, #8
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f586:	4b1c      	ldr	r3, [pc, #112]	; (800f5f8 <prvProcessExpiredTimer+0x7c>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	3304      	adds	r3, #4
 800f594:	4618      	mov	r0, r3
 800f596:	f7fe fa35 	bl	800da04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	69db      	ldr	r3, [r3, #28]
 800f59e:	2b01      	cmp	r3, #1
 800f5a0:	d122      	bne.n	800f5e8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	699a      	ldr	r2, [r3, #24]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	18d1      	adds	r1, r2, r3
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	683a      	ldr	r2, [r7, #0]
 800f5ae:	6978      	ldr	r0, [r7, #20]
 800f5b0:	f000 f8c8 	bl	800f744 <prvInsertTimerInActiveList>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d016      	beq.n	800f5e8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	9300      	str	r3, [sp, #0]
 800f5be:	2300      	movs	r3, #0
 800f5c0:	687a      	ldr	r2, [r7, #4]
 800f5c2:	2100      	movs	r1, #0
 800f5c4:	6978      	ldr	r0, [r7, #20]
 800f5c6:	f7ff ff8b 	bl	800f4e0 <xTimerGenericCommand>
 800f5ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d10a      	bne.n	800f5e8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800f5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d6:	f383 8811 	msr	BASEPRI, r3
 800f5da:	f3bf 8f6f 	isb	sy
 800f5de:	f3bf 8f4f 	dsb	sy
 800f5e2:	60fb      	str	r3, [r7, #12]
}
 800f5e4:	bf00      	nop
 800f5e6:	e7fe      	b.n	800f5e6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ec:	6978      	ldr	r0, [r7, #20]
 800f5ee:	4798      	blx	r3
}
 800f5f0:	bf00      	nop
 800f5f2:	3718      	adds	r7, #24
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	20001130 	.word	0x20001130

0800f5fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f604:	f107 0308 	add.w	r3, r7, #8
 800f608:	4618      	mov	r0, r3
 800f60a:	f000 f857 	bl	800f6bc <prvGetNextExpireTime>
 800f60e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	4619      	mov	r1, r3
 800f614:	68f8      	ldr	r0, [r7, #12]
 800f616:	f000 f803 	bl	800f620 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f61a:	f000 f8d5 	bl	800f7c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f61e:	e7f1      	b.n	800f604 <prvTimerTask+0x8>

0800f620 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f62a:	f7ff fa2b 	bl	800ea84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f62e:	f107 0308 	add.w	r3, r7, #8
 800f632:	4618      	mov	r0, r3
 800f634:	f000 f866 	bl	800f704 <prvSampleTimeNow>
 800f638:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d130      	bne.n	800f6a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d10a      	bne.n	800f65c <prvProcessTimerOrBlockTask+0x3c>
 800f646:	687a      	ldr	r2, [r7, #4]
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d806      	bhi.n	800f65c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f64e:	f7ff fa27 	bl	800eaa0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f652:	68f9      	ldr	r1, [r7, #12]
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f7ff ff91 	bl	800f57c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f65a:	e024      	b.n	800f6a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d008      	beq.n	800f674 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f662:	4b13      	ldr	r3, [pc, #76]	; (800f6b0 <prvProcessTimerOrBlockTask+0x90>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	bf0c      	ite	eq
 800f66c:	2301      	moveq	r3, #1
 800f66e:	2300      	movne	r3, #0
 800f670:	b2db      	uxtb	r3, r3
 800f672:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f674:	4b0f      	ldr	r3, [pc, #60]	; (800f6b4 <prvProcessTimerOrBlockTask+0x94>)
 800f676:	6818      	ldr	r0, [r3, #0]
 800f678:	687a      	ldr	r2, [r7, #4]
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	1ad3      	subs	r3, r2, r3
 800f67e:	683a      	ldr	r2, [r7, #0]
 800f680:	4619      	mov	r1, r3
 800f682:	f7fe ff93 	bl	800e5ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f686:	f7ff fa0b 	bl	800eaa0 <xTaskResumeAll>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d10a      	bne.n	800f6a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f690:	4b09      	ldr	r3, [pc, #36]	; (800f6b8 <prvProcessTimerOrBlockTask+0x98>)
 800f692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f696:	601a      	str	r2, [r3, #0]
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	f3bf 8f6f 	isb	sy
}
 800f6a0:	e001      	b.n	800f6a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f6a2:	f7ff f9fd 	bl	800eaa0 <xTaskResumeAll>
}
 800f6a6:	bf00      	nop
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	20001134 	.word	0x20001134
 800f6b4:	20001138 	.word	0x20001138
 800f6b8:	e000ed04 	.word	0xe000ed04

0800f6bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b085      	sub	sp, #20
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f6c4:	4b0e      	ldr	r3, [pc, #56]	; (800f700 <prvGetNextExpireTime+0x44>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	bf0c      	ite	eq
 800f6ce:	2301      	moveq	r3, #1
 800f6d0:	2300      	movne	r3, #0
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d105      	bne.n	800f6ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6e2:	4b07      	ldr	r3, [pc, #28]	; (800f700 <prvGetNextExpireTime+0x44>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	e001      	b.n	800f6f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3714      	adds	r7, #20
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr
 800f700:	20001130 	.word	0x20001130

0800f704 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b084      	sub	sp, #16
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f70c:	f7ff fa66 	bl	800ebdc <xTaskGetTickCount>
 800f710:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f712:	4b0b      	ldr	r3, [pc, #44]	; (800f740 <prvSampleTimeNow+0x3c>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	68fa      	ldr	r2, [r7, #12]
 800f718:	429a      	cmp	r2, r3
 800f71a:	d205      	bcs.n	800f728 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f71c:	f000 f908 	bl	800f930 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2201      	movs	r2, #1
 800f724:	601a      	str	r2, [r3, #0]
 800f726:	e002      	b.n	800f72e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2200      	movs	r2, #0
 800f72c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f72e:	4a04      	ldr	r2, [pc, #16]	; (800f740 <prvSampleTimeNow+0x3c>)
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f734:	68fb      	ldr	r3, [r7, #12]
}
 800f736:	4618      	mov	r0, r3
 800f738:	3710      	adds	r7, #16
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	20001140 	.word	0x20001140

0800f744 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b086      	sub	sp, #24
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
 800f750:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f752:	2300      	movs	r3, #0
 800f754:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	68ba      	ldr	r2, [r7, #8]
 800f75a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	68fa      	ldr	r2, [r7, #12]
 800f760:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f762:	68ba      	ldr	r2, [r7, #8]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	429a      	cmp	r2, r3
 800f768:	d812      	bhi.n	800f790 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f76a:	687a      	ldr	r2, [r7, #4]
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	1ad2      	subs	r2, r2, r3
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	699b      	ldr	r3, [r3, #24]
 800f774:	429a      	cmp	r2, r3
 800f776:	d302      	bcc.n	800f77e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f778:	2301      	movs	r3, #1
 800f77a:	617b      	str	r3, [r7, #20]
 800f77c:	e01b      	b.n	800f7b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f77e:	4b10      	ldr	r3, [pc, #64]	; (800f7c0 <prvInsertTimerInActiveList+0x7c>)
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	3304      	adds	r3, #4
 800f786:	4619      	mov	r1, r3
 800f788:	4610      	mov	r0, r2
 800f78a:	f7fe f902 	bl	800d992 <vListInsert>
 800f78e:	e012      	b.n	800f7b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	429a      	cmp	r2, r3
 800f796:	d206      	bcs.n	800f7a6 <prvInsertTimerInActiveList+0x62>
 800f798:	68ba      	ldr	r2, [r7, #8]
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d302      	bcc.n	800f7a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	617b      	str	r3, [r7, #20]
 800f7a4:	e007      	b.n	800f7b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7a6:	4b07      	ldr	r3, [pc, #28]	; (800f7c4 <prvInsertTimerInActiveList+0x80>)
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	3304      	adds	r3, #4
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	4610      	mov	r0, r2
 800f7b2:	f7fe f8ee 	bl	800d992 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f7b6:	697b      	ldr	r3, [r7, #20]
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3718      	adds	r7, #24
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	20001134 	.word	0x20001134
 800f7c4:	20001130 	.word	0x20001130

0800f7c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b08e      	sub	sp, #56	; 0x38
 800f7cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7ce:	e09d      	b.n	800f90c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	da18      	bge.n	800f808 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f7d6:	1d3b      	adds	r3, r7, #4
 800f7d8:	3304      	adds	r3, #4
 800f7da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d10a      	bne.n	800f7f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e6:	f383 8811 	msr	BASEPRI, r3
 800f7ea:	f3bf 8f6f 	isb	sy
 800f7ee:	f3bf 8f4f 	dsb	sy
 800f7f2:	61fb      	str	r3, [r7, #28]
}
 800f7f4:	bf00      	nop
 800f7f6:	e7fe      	b.n	800f7f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7fe:	6850      	ldr	r0, [r2, #4]
 800f800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f802:	6892      	ldr	r2, [r2, #8]
 800f804:	4611      	mov	r1, r2
 800f806:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	db7d      	blt.n	800f90a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f814:	695b      	ldr	r3, [r3, #20]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d004      	beq.n	800f824 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81c:	3304      	adds	r3, #4
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fe f8f0 	bl	800da04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f824:	463b      	mov	r3, r7
 800f826:	4618      	mov	r0, r3
 800f828:	f7ff ff6c 	bl	800f704 <prvSampleTimeNow>
 800f82c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2b09      	cmp	r3, #9
 800f832:	d86b      	bhi.n	800f90c <prvProcessReceivedCommands+0x144>
 800f834:	a201      	add	r2, pc, #4	; (adr r2, 800f83c <prvProcessReceivedCommands+0x74>)
 800f836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f83a:	bf00      	nop
 800f83c:	0800f865 	.word	0x0800f865
 800f840:	0800f865 	.word	0x0800f865
 800f844:	0800f865 	.word	0x0800f865
 800f848:	0800f90d 	.word	0x0800f90d
 800f84c:	0800f8c1 	.word	0x0800f8c1
 800f850:	0800f8f9 	.word	0x0800f8f9
 800f854:	0800f865 	.word	0x0800f865
 800f858:	0800f865 	.word	0x0800f865
 800f85c:	0800f90d 	.word	0x0800f90d
 800f860:	0800f8c1 	.word	0x0800f8c1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f864:	68ba      	ldr	r2, [r7, #8]
 800f866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f868:	699b      	ldr	r3, [r3, #24]
 800f86a:	18d1      	adds	r1, r2, r3
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f872:	f7ff ff67 	bl	800f744 <prvInsertTimerInActiveList>
 800f876:	4603      	mov	r3, r0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d047      	beq.n	800f90c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f882:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f886:	69db      	ldr	r3, [r3, #28]
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d13f      	bne.n	800f90c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f88c:	68ba      	ldr	r2, [r7, #8]
 800f88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f890:	699b      	ldr	r3, [r3, #24]
 800f892:	441a      	add	r2, r3
 800f894:	2300      	movs	r3, #0
 800f896:	9300      	str	r3, [sp, #0]
 800f898:	2300      	movs	r3, #0
 800f89a:	2100      	movs	r1, #0
 800f89c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f89e:	f7ff fe1f 	bl	800f4e0 <xTimerGenericCommand>
 800f8a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f8a4:	6a3b      	ldr	r3, [r7, #32]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d130      	bne.n	800f90c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800f8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ae:	f383 8811 	msr	BASEPRI, r3
 800f8b2:	f3bf 8f6f 	isb	sy
 800f8b6:	f3bf 8f4f 	dsb	sy
 800f8ba:	61bb      	str	r3, [r7, #24]
}
 800f8bc:	bf00      	nop
 800f8be:	e7fe      	b.n	800f8be <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f8c0:	68ba      	ldr	r2, [r7, #8]
 800f8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c8:	699b      	ldr	r3, [r3, #24]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d10a      	bne.n	800f8e4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800f8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	617b      	str	r3, [r7, #20]
}
 800f8e0:	bf00      	nop
 800f8e2:	e7fe      	b.n	800f8e2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e6:	699a      	ldr	r2, [r3, #24]
 800f8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ea:	18d1      	adds	r1, r2, r3
 800f8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8f2:	f7ff ff27 	bl	800f744 <prvInsertTimerInActiveList>
					break;
 800f8f6:	e009      	b.n	800f90c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d104      	bne.n	800f90c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800f902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f904:	f000 fb4e 	bl	800ffa4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f908:	e000      	b.n	800f90c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f90a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f90c:	4b07      	ldr	r3, [pc, #28]	; (800f92c <prvProcessReceivedCommands+0x164>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	1d39      	adds	r1, r7, #4
 800f912:	2200      	movs	r2, #0
 800f914:	4618      	mov	r0, r3
 800f916:	f7fe fb75 	bl	800e004 <xQueueReceive>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	f47f af57 	bne.w	800f7d0 <prvProcessReceivedCommands+0x8>
	}
}
 800f922:	bf00      	nop
 800f924:	bf00      	nop
 800f926:	3730      	adds	r7, #48	; 0x30
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	20001138 	.word	0x20001138

0800f930 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b088      	sub	sp, #32
 800f934:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f936:	e045      	b.n	800f9c4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f938:	4b2c      	ldr	r3, [pc, #176]	; (800f9ec <prvSwitchTimerLists+0xbc>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f942:	4b2a      	ldr	r3, [pc, #168]	; (800f9ec <prvSwitchTimerLists+0xbc>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	3304      	adds	r3, #4
 800f950:	4618      	mov	r0, r3
 800f952:	f7fe f857 	bl	800da04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	69db      	ldr	r3, [r3, #28]
 800f962:	2b01      	cmp	r3, #1
 800f964:	d12e      	bne.n	800f9c4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	699b      	ldr	r3, [r3, #24]
 800f96a:	693a      	ldr	r2, [r7, #16]
 800f96c:	4413      	add	r3, r2
 800f96e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f970:	68ba      	ldr	r2, [r7, #8]
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	429a      	cmp	r2, r3
 800f976:	d90e      	bls.n	800f996 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	68ba      	ldr	r2, [r7, #8]
 800f97c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	68fa      	ldr	r2, [r7, #12]
 800f982:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f984:	4b19      	ldr	r3, [pc, #100]	; (800f9ec <prvSwitchTimerLists+0xbc>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	3304      	adds	r3, #4
 800f98c:	4619      	mov	r1, r3
 800f98e:	4610      	mov	r0, r2
 800f990:	f7fd ffff 	bl	800d992 <vListInsert>
 800f994:	e016      	b.n	800f9c4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f996:	2300      	movs	r3, #0
 800f998:	9300      	str	r3, [sp, #0]
 800f99a:	2300      	movs	r3, #0
 800f99c:	693a      	ldr	r2, [r7, #16]
 800f99e:	2100      	movs	r1, #0
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	f7ff fd9d 	bl	800f4e0 <xTimerGenericCommand>
 800f9a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d10a      	bne.n	800f9c4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800f9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b2:	f383 8811 	msr	BASEPRI, r3
 800f9b6:	f3bf 8f6f 	isb	sy
 800f9ba:	f3bf 8f4f 	dsb	sy
 800f9be:	603b      	str	r3, [r7, #0]
}
 800f9c0:	bf00      	nop
 800f9c2:	e7fe      	b.n	800f9c2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9c4:	4b09      	ldr	r3, [pc, #36]	; (800f9ec <prvSwitchTimerLists+0xbc>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d1b4      	bne.n	800f938 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f9ce:	4b07      	ldr	r3, [pc, #28]	; (800f9ec <prvSwitchTimerLists+0xbc>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f9d4:	4b06      	ldr	r3, [pc, #24]	; (800f9f0 <prvSwitchTimerLists+0xc0>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4a04      	ldr	r2, [pc, #16]	; (800f9ec <prvSwitchTimerLists+0xbc>)
 800f9da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f9dc:	4a04      	ldr	r2, [pc, #16]	; (800f9f0 <prvSwitchTimerLists+0xc0>)
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	6013      	str	r3, [r2, #0]
}
 800f9e2:	bf00      	nop
 800f9e4:	3718      	adds	r7, #24
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	20001130 	.word	0x20001130
 800f9f0:	20001134 	.word	0x20001134

0800f9f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f9fa:	f000 f96b 	bl	800fcd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f9fe:	4b15      	ldr	r3, [pc, #84]	; (800fa54 <prvCheckForValidListAndQueue+0x60>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d120      	bne.n	800fa48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa06:	4814      	ldr	r0, [pc, #80]	; (800fa58 <prvCheckForValidListAndQueue+0x64>)
 800fa08:	f7fd ff72 	bl	800d8f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa0c:	4813      	ldr	r0, [pc, #76]	; (800fa5c <prvCheckForValidListAndQueue+0x68>)
 800fa0e:	f7fd ff6f 	bl	800d8f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa12:	4b13      	ldr	r3, [pc, #76]	; (800fa60 <prvCheckForValidListAndQueue+0x6c>)
 800fa14:	4a10      	ldr	r2, [pc, #64]	; (800fa58 <prvCheckForValidListAndQueue+0x64>)
 800fa16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa18:	4b12      	ldr	r3, [pc, #72]	; (800fa64 <prvCheckForValidListAndQueue+0x70>)
 800fa1a:	4a10      	ldr	r2, [pc, #64]	; (800fa5c <prvCheckForValidListAndQueue+0x68>)
 800fa1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa1e:	2300      	movs	r3, #0
 800fa20:	9300      	str	r3, [sp, #0]
 800fa22:	4b11      	ldr	r3, [pc, #68]	; (800fa68 <prvCheckForValidListAndQueue+0x74>)
 800fa24:	4a11      	ldr	r2, [pc, #68]	; (800fa6c <prvCheckForValidListAndQueue+0x78>)
 800fa26:	2110      	movs	r1, #16
 800fa28:	200a      	movs	r0, #10
 800fa2a:	f7fe f87d 	bl	800db28 <xQueueGenericCreateStatic>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	4a08      	ldr	r2, [pc, #32]	; (800fa54 <prvCheckForValidListAndQueue+0x60>)
 800fa32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa34:	4b07      	ldr	r3, [pc, #28]	; (800fa54 <prvCheckForValidListAndQueue+0x60>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d005      	beq.n	800fa48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa3c:	4b05      	ldr	r3, [pc, #20]	; (800fa54 <prvCheckForValidListAndQueue+0x60>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	490b      	ldr	r1, [pc, #44]	; (800fa70 <prvCheckForValidListAndQueue+0x7c>)
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7fe fd88 	bl	800e558 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa48:	f000 f974 	bl	800fd34 <vPortExitCritical>
}
 800fa4c:	bf00      	nop
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
 800fa52:	bf00      	nop
 800fa54:	20001138 	.word	0x20001138
 800fa58:	20001108 	.word	0x20001108
 800fa5c:	2000111c 	.word	0x2000111c
 800fa60:	20001130 	.word	0x20001130
 800fa64:	20001134 	.word	0x20001134
 800fa68:	200011e4 	.word	0x200011e4
 800fa6c:	20001144 	.word	0x20001144
 800fa70:	0801669c 	.word	0x0801669c

0800fa74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fa74:	b480      	push	{r7}
 800fa76:	b085      	sub	sp, #20
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	60f8      	str	r0, [r7, #12]
 800fa7c:	60b9      	str	r1, [r7, #8]
 800fa7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	3b04      	subs	r3, #4
 800fa84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fa8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	3b04      	subs	r3, #4
 800fa92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	f023 0201 	bic.w	r2, r3, #1
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	3b04      	subs	r3, #4
 800faa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800faa4:	4a0c      	ldr	r2, [pc, #48]	; (800fad8 <pxPortInitialiseStack+0x64>)
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	3b14      	subs	r3, #20
 800faae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fab0:	687a      	ldr	r2, [r7, #4]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	3b04      	subs	r3, #4
 800faba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f06f 0202 	mvn.w	r2, #2
 800fac2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	3b20      	subs	r3, #32
 800fac8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800faca:	68fb      	ldr	r3, [r7, #12]
}
 800facc:	4618      	mov	r0, r3
 800face:	3714      	adds	r7, #20
 800fad0:	46bd      	mov	sp, r7
 800fad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad6:	4770      	bx	lr
 800fad8:	0800fadd 	.word	0x0800fadd

0800fadc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fadc:	b480      	push	{r7}
 800fade:	b085      	sub	sp, #20
 800fae0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fae2:	2300      	movs	r3, #0
 800fae4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fae6:	4b12      	ldr	r3, [pc, #72]	; (800fb30 <prvTaskExitError+0x54>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faee:	d00a      	beq.n	800fb06 <prvTaskExitError+0x2a>
	__asm volatile
 800faf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf4:	f383 8811 	msr	BASEPRI, r3
 800faf8:	f3bf 8f6f 	isb	sy
 800fafc:	f3bf 8f4f 	dsb	sy
 800fb00:	60fb      	str	r3, [r7, #12]
}
 800fb02:	bf00      	nop
 800fb04:	e7fe      	b.n	800fb04 <prvTaskExitError+0x28>
	__asm volatile
 800fb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb0a:	f383 8811 	msr	BASEPRI, r3
 800fb0e:	f3bf 8f6f 	isb	sy
 800fb12:	f3bf 8f4f 	dsb	sy
 800fb16:	60bb      	str	r3, [r7, #8]
}
 800fb18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb1a:	bf00      	nop
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d0fc      	beq.n	800fb1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb22:	bf00      	nop
 800fb24:	bf00      	nop
 800fb26:	3714      	adds	r7, #20
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr
 800fb30:	2000011c 	.word	0x2000011c
	...

0800fb40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb40:	4b07      	ldr	r3, [pc, #28]	; (800fb60 <pxCurrentTCBConst2>)
 800fb42:	6819      	ldr	r1, [r3, #0]
 800fb44:	6808      	ldr	r0, [r1, #0]
 800fb46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb4a:	f380 8809 	msr	PSP, r0
 800fb4e:	f3bf 8f6f 	isb	sy
 800fb52:	f04f 0000 	mov.w	r0, #0
 800fb56:	f380 8811 	msr	BASEPRI, r0
 800fb5a:	4770      	bx	lr
 800fb5c:	f3af 8000 	nop.w

0800fb60 <pxCurrentTCBConst2>:
 800fb60:	20000c00 	.word	0x20000c00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fb64:	bf00      	nop
 800fb66:	bf00      	nop

0800fb68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb68:	4808      	ldr	r0, [pc, #32]	; (800fb8c <prvPortStartFirstTask+0x24>)
 800fb6a:	6800      	ldr	r0, [r0, #0]
 800fb6c:	6800      	ldr	r0, [r0, #0]
 800fb6e:	f380 8808 	msr	MSP, r0
 800fb72:	f04f 0000 	mov.w	r0, #0
 800fb76:	f380 8814 	msr	CONTROL, r0
 800fb7a:	b662      	cpsie	i
 800fb7c:	b661      	cpsie	f
 800fb7e:	f3bf 8f4f 	dsb	sy
 800fb82:	f3bf 8f6f 	isb	sy
 800fb86:	df00      	svc	0
 800fb88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb8a:	bf00      	nop
 800fb8c:	e000ed08 	.word	0xe000ed08

0800fb90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fb96:	4b46      	ldr	r3, [pc, #280]	; (800fcb0 <xPortStartScheduler+0x120>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	4a46      	ldr	r2, [pc, #280]	; (800fcb4 <xPortStartScheduler+0x124>)
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d10a      	bne.n	800fbb6 <xPortStartScheduler+0x26>
	__asm volatile
 800fba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba4:	f383 8811 	msr	BASEPRI, r3
 800fba8:	f3bf 8f6f 	isb	sy
 800fbac:	f3bf 8f4f 	dsb	sy
 800fbb0:	613b      	str	r3, [r7, #16]
}
 800fbb2:	bf00      	nop
 800fbb4:	e7fe      	b.n	800fbb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fbb6:	4b3e      	ldr	r3, [pc, #248]	; (800fcb0 <xPortStartScheduler+0x120>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	4a3f      	ldr	r2, [pc, #252]	; (800fcb8 <xPortStartScheduler+0x128>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d10a      	bne.n	800fbd6 <xPortStartScheduler+0x46>
	__asm volatile
 800fbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc4:	f383 8811 	msr	BASEPRI, r3
 800fbc8:	f3bf 8f6f 	isb	sy
 800fbcc:	f3bf 8f4f 	dsb	sy
 800fbd0:	60fb      	str	r3, [r7, #12]
}
 800fbd2:	bf00      	nop
 800fbd4:	e7fe      	b.n	800fbd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fbd6:	4b39      	ldr	r3, [pc, #228]	; (800fcbc <xPortStartScheduler+0x12c>)
 800fbd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	b2db      	uxtb	r3, r3
 800fbe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	22ff      	movs	r2, #255	; 0xff
 800fbe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fbf0:	78fb      	ldrb	r3, [r7, #3]
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fbf8:	b2da      	uxtb	r2, r3
 800fbfa:	4b31      	ldr	r3, [pc, #196]	; (800fcc0 <xPortStartScheduler+0x130>)
 800fbfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fbfe:	4b31      	ldr	r3, [pc, #196]	; (800fcc4 <xPortStartScheduler+0x134>)
 800fc00:	2207      	movs	r2, #7
 800fc02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc04:	e009      	b.n	800fc1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fc06:	4b2f      	ldr	r3, [pc, #188]	; (800fcc4 <xPortStartScheduler+0x134>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	3b01      	subs	r3, #1
 800fc0c:	4a2d      	ldr	r2, [pc, #180]	; (800fcc4 <xPortStartScheduler+0x134>)
 800fc0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc10:	78fb      	ldrb	r3, [r7, #3]
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	005b      	lsls	r3, r3, #1
 800fc16:	b2db      	uxtb	r3, r3
 800fc18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc1a:	78fb      	ldrb	r3, [r7, #3]
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc22:	2b80      	cmp	r3, #128	; 0x80
 800fc24:	d0ef      	beq.n	800fc06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc26:	4b27      	ldr	r3, [pc, #156]	; (800fcc4 <xPortStartScheduler+0x134>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f1c3 0307 	rsb	r3, r3, #7
 800fc2e:	2b04      	cmp	r3, #4
 800fc30:	d00a      	beq.n	800fc48 <xPortStartScheduler+0xb8>
	__asm volatile
 800fc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc36:	f383 8811 	msr	BASEPRI, r3
 800fc3a:	f3bf 8f6f 	isb	sy
 800fc3e:	f3bf 8f4f 	dsb	sy
 800fc42:	60bb      	str	r3, [r7, #8]
}
 800fc44:	bf00      	nop
 800fc46:	e7fe      	b.n	800fc46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc48:	4b1e      	ldr	r3, [pc, #120]	; (800fcc4 <xPortStartScheduler+0x134>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	021b      	lsls	r3, r3, #8
 800fc4e:	4a1d      	ldr	r2, [pc, #116]	; (800fcc4 <xPortStartScheduler+0x134>)
 800fc50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc52:	4b1c      	ldr	r3, [pc, #112]	; (800fcc4 <xPortStartScheduler+0x134>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fc5a:	4a1a      	ldr	r2, [pc, #104]	; (800fcc4 <xPortStartScheduler+0x134>)
 800fc5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	b2da      	uxtb	r2, r3
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc66:	4b18      	ldr	r3, [pc, #96]	; (800fcc8 <xPortStartScheduler+0x138>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4a17      	ldr	r2, [pc, #92]	; (800fcc8 <xPortStartScheduler+0x138>)
 800fc6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fc70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc72:	4b15      	ldr	r3, [pc, #84]	; (800fcc8 <xPortStartScheduler+0x138>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4a14      	ldr	r2, [pc, #80]	; (800fcc8 <xPortStartScheduler+0x138>)
 800fc78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fc7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fc7e:	f000 f8dd 	bl	800fe3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc82:	4b12      	ldr	r3, [pc, #72]	; (800fccc <xPortStartScheduler+0x13c>)
 800fc84:	2200      	movs	r2, #0
 800fc86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fc88:	f000 f8fc 	bl	800fe84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fc8c:	4b10      	ldr	r3, [pc, #64]	; (800fcd0 <xPortStartScheduler+0x140>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4a0f      	ldr	r2, [pc, #60]	; (800fcd0 <xPortStartScheduler+0x140>)
 800fc92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fc96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fc98:	f7ff ff66 	bl	800fb68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fc9c:	f7ff f86c 	bl	800ed78 <vTaskSwitchContext>
	prvTaskExitError();
 800fca0:	f7ff ff1c 	bl	800fadc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fca4:	2300      	movs	r3, #0
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3718      	adds	r7, #24
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	e000ed00 	.word	0xe000ed00
 800fcb4:	410fc271 	.word	0x410fc271
 800fcb8:	410fc270 	.word	0x410fc270
 800fcbc:	e000e400 	.word	0xe000e400
 800fcc0:	20001234 	.word	0x20001234
 800fcc4:	20001238 	.word	0x20001238
 800fcc8:	e000ed20 	.word	0xe000ed20
 800fccc:	2000011c 	.word	0x2000011c
 800fcd0:	e000ef34 	.word	0xe000ef34

0800fcd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
	__asm volatile
 800fcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcde:	f383 8811 	msr	BASEPRI, r3
 800fce2:	f3bf 8f6f 	isb	sy
 800fce6:	f3bf 8f4f 	dsb	sy
 800fcea:	607b      	str	r3, [r7, #4]
}
 800fcec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fcee:	4b0f      	ldr	r3, [pc, #60]	; (800fd2c <vPortEnterCritical+0x58>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	4a0d      	ldr	r2, [pc, #52]	; (800fd2c <vPortEnterCritical+0x58>)
 800fcf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fcf8:	4b0c      	ldr	r3, [pc, #48]	; (800fd2c <vPortEnterCritical+0x58>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d10f      	bne.n	800fd20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd00:	4b0b      	ldr	r3, [pc, #44]	; (800fd30 <vPortEnterCritical+0x5c>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d00a      	beq.n	800fd20 <vPortEnterCritical+0x4c>
	__asm volatile
 800fd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0e:	f383 8811 	msr	BASEPRI, r3
 800fd12:	f3bf 8f6f 	isb	sy
 800fd16:	f3bf 8f4f 	dsb	sy
 800fd1a:	603b      	str	r3, [r7, #0]
}
 800fd1c:	bf00      	nop
 800fd1e:	e7fe      	b.n	800fd1e <vPortEnterCritical+0x4a>
	}
}
 800fd20:	bf00      	nop
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr
 800fd2c:	2000011c 	.word	0x2000011c
 800fd30:	e000ed04 	.word	0xe000ed04

0800fd34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd3a:	4b12      	ldr	r3, [pc, #72]	; (800fd84 <vPortExitCritical+0x50>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d10a      	bne.n	800fd58 <vPortExitCritical+0x24>
	__asm volatile
 800fd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd46:	f383 8811 	msr	BASEPRI, r3
 800fd4a:	f3bf 8f6f 	isb	sy
 800fd4e:	f3bf 8f4f 	dsb	sy
 800fd52:	607b      	str	r3, [r7, #4]
}
 800fd54:	bf00      	nop
 800fd56:	e7fe      	b.n	800fd56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fd58:	4b0a      	ldr	r3, [pc, #40]	; (800fd84 <vPortExitCritical+0x50>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	3b01      	subs	r3, #1
 800fd5e:	4a09      	ldr	r2, [pc, #36]	; (800fd84 <vPortExitCritical+0x50>)
 800fd60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd62:	4b08      	ldr	r3, [pc, #32]	; (800fd84 <vPortExitCritical+0x50>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d105      	bne.n	800fd76 <vPortExitCritical+0x42>
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	f383 8811 	msr	BASEPRI, r3
}
 800fd74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fd76:	bf00      	nop
 800fd78:	370c      	adds	r7, #12
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	2000011c 	.word	0x2000011c
	...

0800fd90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fd90:	f3ef 8009 	mrs	r0, PSP
 800fd94:	f3bf 8f6f 	isb	sy
 800fd98:	4b15      	ldr	r3, [pc, #84]	; (800fdf0 <pxCurrentTCBConst>)
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	f01e 0f10 	tst.w	lr, #16
 800fda0:	bf08      	it	eq
 800fda2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fda6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdaa:	6010      	str	r0, [r2, #0]
 800fdac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fdb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fdb4:	f380 8811 	msr	BASEPRI, r0
 800fdb8:	f3bf 8f4f 	dsb	sy
 800fdbc:	f3bf 8f6f 	isb	sy
 800fdc0:	f7fe ffda 	bl	800ed78 <vTaskSwitchContext>
 800fdc4:	f04f 0000 	mov.w	r0, #0
 800fdc8:	f380 8811 	msr	BASEPRI, r0
 800fdcc:	bc09      	pop	{r0, r3}
 800fdce:	6819      	ldr	r1, [r3, #0]
 800fdd0:	6808      	ldr	r0, [r1, #0]
 800fdd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd6:	f01e 0f10 	tst.w	lr, #16
 800fdda:	bf08      	it	eq
 800fddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fde0:	f380 8809 	msr	PSP, r0
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	4770      	bx	lr
 800fdea:	bf00      	nop
 800fdec:	f3af 8000 	nop.w

0800fdf0 <pxCurrentTCBConst>:
 800fdf0:	20000c00 	.word	0x20000c00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fdf4:	bf00      	nop
 800fdf6:	bf00      	nop

0800fdf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
	__asm volatile
 800fdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe02:	f383 8811 	msr	BASEPRI, r3
 800fe06:	f3bf 8f6f 	isb	sy
 800fe0a:	f3bf 8f4f 	dsb	sy
 800fe0e:	607b      	str	r3, [r7, #4]
}
 800fe10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe12:	f7fe fef3 	bl	800ebfc <xTaskIncrementTick>
 800fe16:	4603      	mov	r3, r0
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d003      	beq.n	800fe24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe1c:	4b06      	ldr	r3, [pc, #24]	; (800fe38 <SysTick_Handler+0x40>)
 800fe1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe22:	601a      	str	r2, [r3, #0]
 800fe24:	2300      	movs	r3, #0
 800fe26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	f383 8811 	msr	BASEPRI, r3
}
 800fe2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe30:	bf00      	nop
 800fe32:	3708      	adds	r7, #8
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}
 800fe38:	e000ed04 	.word	0xe000ed04

0800fe3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe40:	4b0b      	ldr	r3, [pc, #44]	; (800fe70 <vPortSetupTimerInterrupt+0x34>)
 800fe42:	2200      	movs	r2, #0
 800fe44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe46:	4b0b      	ldr	r3, [pc, #44]	; (800fe74 <vPortSetupTimerInterrupt+0x38>)
 800fe48:	2200      	movs	r2, #0
 800fe4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe4c:	4b0a      	ldr	r3, [pc, #40]	; (800fe78 <vPortSetupTimerInterrupt+0x3c>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4a0a      	ldr	r2, [pc, #40]	; (800fe7c <vPortSetupTimerInterrupt+0x40>)
 800fe52:	fba2 2303 	umull	r2, r3, r2, r3
 800fe56:	099b      	lsrs	r3, r3, #6
 800fe58:	4a09      	ldr	r2, [pc, #36]	; (800fe80 <vPortSetupTimerInterrupt+0x44>)
 800fe5a:	3b01      	subs	r3, #1
 800fe5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe5e:	4b04      	ldr	r3, [pc, #16]	; (800fe70 <vPortSetupTimerInterrupt+0x34>)
 800fe60:	2207      	movs	r2, #7
 800fe62:	601a      	str	r2, [r3, #0]
}
 800fe64:	bf00      	nop
 800fe66:	46bd      	mov	sp, r7
 800fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6c:	4770      	bx	lr
 800fe6e:	bf00      	nop
 800fe70:	e000e010 	.word	0xe000e010
 800fe74:	e000e018 	.word	0xe000e018
 800fe78:	20000000 	.word	0x20000000
 800fe7c:	10624dd3 	.word	0x10624dd3
 800fe80:	e000e014 	.word	0xe000e014

0800fe84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fe84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fe94 <vPortEnableVFP+0x10>
 800fe88:	6801      	ldr	r1, [r0, #0]
 800fe8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fe8e:	6001      	str	r1, [r0, #0]
 800fe90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fe92:	bf00      	nop
 800fe94:	e000ed88 	.word	0xe000ed88

0800fe98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fe9e:	f3ef 8305 	mrs	r3, IPSR
 800fea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2b0f      	cmp	r3, #15
 800fea8:	d914      	bls.n	800fed4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800feaa:	4a17      	ldr	r2, [pc, #92]	; (800ff08 <vPortValidateInterruptPriority+0x70>)
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	4413      	add	r3, r2
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800feb4:	4b15      	ldr	r3, [pc, #84]	; (800ff0c <vPortValidateInterruptPriority+0x74>)
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	7afa      	ldrb	r2, [r7, #11]
 800feba:	429a      	cmp	r2, r3
 800febc:	d20a      	bcs.n	800fed4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800febe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec2:	f383 8811 	msr	BASEPRI, r3
 800fec6:	f3bf 8f6f 	isb	sy
 800feca:	f3bf 8f4f 	dsb	sy
 800fece:	607b      	str	r3, [r7, #4]
}
 800fed0:	bf00      	nop
 800fed2:	e7fe      	b.n	800fed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fed4:	4b0e      	ldr	r3, [pc, #56]	; (800ff10 <vPortValidateInterruptPriority+0x78>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fedc:	4b0d      	ldr	r3, [pc, #52]	; (800ff14 <vPortValidateInterruptPriority+0x7c>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d90a      	bls.n	800fefa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee8:	f383 8811 	msr	BASEPRI, r3
 800feec:	f3bf 8f6f 	isb	sy
 800fef0:	f3bf 8f4f 	dsb	sy
 800fef4:	603b      	str	r3, [r7, #0]
}
 800fef6:	bf00      	nop
 800fef8:	e7fe      	b.n	800fef8 <vPortValidateInterruptPriority+0x60>
	}
 800fefa:	bf00      	nop
 800fefc:	3714      	adds	r7, #20
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop
 800ff08:	e000e3f0 	.word	0xe000e3f0
 800ff0c:	20001234 	.word	0x20001234
 800ff10:	e000ed0c 	.word	0xe000ed0c
 800ff14:	20001238 	.word	0x20001238

0800ff18 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b084      	sub	sp, #16
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800ff20:	2300      	movs	r3, #0
 800ff22:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f003 0307 	and.w	r3, r3, #7
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d004      	beq.n	800ff38 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f023 0307 	bic.w	r3, r3, #7
 800ff34:	3308      	adds	r3, #8
 800ff36:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800ff38:	f7fe fda4 	bl	800ea84 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800ff3c:	4b16      	ldr	r3, [pc, #88]	; (800ff98 <pvPortMalloc+0x80>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d105      	bne.n	800ff50 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800ff44:	4b15      	ldr	r3, [pc, #84]	; (800ff9c <pvPortMalloc+0x84>)
 800ff46:	f023 0307 	bic.w	r3, r3, #7
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	4b12      	ldr	r3, [pc, #72]	; (800ff98 <pvPortMalloc+0x80>)
 800ff4e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800ff50:	4b13      	ldr	r3, [pc, #76]	; (800ffa0 <pvPortMalloc+0x88>)
 800ff52:	681a      	ldr	r2, [r3, #0]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4413      	add	r3, r2
 800ff58:	f241 72f7 	movw	r2, #6135	; 0x17f7
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	d813      	bhi.n	800ff88 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800ff60:	4b0f      	ldr	r3, [pc, #60]	; (800ffa0 <pvPortMalloc+0x88>)
 800ff62:	681a      	ldr	r2, [r3, #0]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	441a      	add	r2, r3
 800ff68:	4b0d      	ldr	r3, [pc, #52]	; (800ffa0 <pvPortMalloc+0x88>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d90b      	bls.n	800ff88 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800ff70:	4b09      	ldr	r3, [pc, #36]	; (800ff98 <pvPortMalloc+0x80>)
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	4b0a      	ldr	r3, [pc, #40]	; (800ffa0 <pvPortMalloc+0x88>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	4413      	add	r3, r2
 800ff7a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800ff7c:	4b08      	ldr	r3, [pc, #32]	; (800ffa0 <pvPortMalloc+0x88>)
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	4413      	add	r3, r2
 800ff84:	4a06      	ldr	r2, [pc, #24]	; (800ffa0 <pvPortMalloc+0x88>)
 800ff86:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ff88:	f7fe fd8a 	bl	800eaa0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3710      	adds	r7, #16
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}
 800ff96:	bf00      	nop
 800ff98:	20002a40 	.word	0x20002a40
 800ff9c:	20001244 	.word	0x20001244
 800ffa0:	20002a3c 	.word	0x20002a3c

0800ffa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d00a      	beq.n	800ffc8 <vPortFree+0x24>
	__asm volatile
 800ffb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb6:	f383 8811 	msr	BASEPRI, r3
 800ffba:	f3bf 8f6f 	isb	sy
 800ffbe:	f3bf 8f4f 	dsb	sy
 800ffc2:	60fb      	str	r3, [r7, #12]
}
 800ffc4:	bf00      	nop
 800ffc6:	e7fe      	b.n	800ffc6 <vPortFree+0x22>
}
 800ffc8:	bf00      	nop
 800ffca:	3714      	adds	r7, #20
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr

0800ffd4 <EvaluateCANInput>:
 */

#include "can_input.h"

uint8_t EvaluateCANInput(CAN_RxHeaderTypeDef* stRxHeader, uint8_t nRxData[8], PdmConfig_CanInput_t *in, uint16_t* nResult)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b088      	sub	sp, #32
 800ffd8:	af02      	add	r7, sp, #8
 800ffda:	60f8      	str	r0, [r7, #12]
 800ffdc:	60b9      	str	r1, [r7, #8]
 800ffde:	607a      	str	r2, [r7, #4]
 800ffe0:	603b      	str	r3, [r7, #0]
  if(!in->nEnabled)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d101      	bne.n	800ffee <EvaluateCANInput+0x1a>
    return 0;
 800ffea:	2300      	movs	r3, #0
 800ffec:	e0a6      	b.n	801013c <EvaluateCANInput+0x168>
  if(stRxHeader->StdId != in->nId)
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	8852      	ldrh	r2, [r2, #2]
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d001      	beq.n	800fffe <EvaluateCANInput+0x2a>
    return 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	e09e      	b.n	801013c <EvaluateCANInput+0x168>

  uint16_t nSelected;

  //8 bit
  if(in->nHighByte == 0)
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	88db      	ldrh	r3, [r3, #6]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d107      	bne.n	8010016 <EvaluateCANInput+0x42>
  {
    nSelected = nRxData[in->nLowByte];
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	889b      	ldrh	r3, [r3, #4]
 801000a:	461a      	mov	r2, r3
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	4413      	add	r3, r2
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	82fb      	strh	r3, [r7, #22]
 8010014:	e011      	b.n	801003a <EvaluateCANInput+0x66>
  }
  else
  {
    nSelected = (nRxData[in->nHighByte] << 8) + nRxData[in->nLowByte];
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	88db      	ldrh	r3, [r3, #6]
 801001a:	461a      	mov	r2, r3
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	4413      	add	r3, r2
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	b29b      	uxth	r3, r3
 8010024:	021b      	lsls	r3, r3, #8
 8010026:	b29a      	uxth	r2, r3
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	889b      	ldrh	r3, [r3, #4]
 801002c:	4619      	mov	r1, r3
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	440b      	add	r3, r1
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	b29b      	uxth	r3, r3
 8010036:	4413      	add	r3, r2
 8010038:	82fb      	strh	r3, [r7, #22]
  }

  switch(in->eOperator)
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	7a1b      	ldrb	r3, [r3, #8]
 801003e:	2b04      	cmp	r3, #4
 8010040:	d87b      	bhi.n	801013a <EvaluateCANInput+0x166>
 8010042:	a201      	add	r2, pc, #4	; (adr r2, 8010048 <EvaluateCANInput+0x74>)
 8010044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010048:	0801005d 	.word	0x0801005d
 801004c:	0801006b 	.word	0x0801006b
 8010050:	08010085 	.word	0x08010085
 8010054:	0801009f 	.word	0x0801009f
 8010058:	080100e5 	.word	0x080100e5
  {
  case OPER_EQUAL:
    *nResult = nSelected & 0xFF;
 801005c:	8afb      	ldrh	r3, [r7, #22]
 801005e:	b2db      	uxtb	r3, r3
 8010060:	b29a      	uxth	r2, r3
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	801a      	strh	r2, [r3, #0]
    return 1;
 8010066:	2301      	movs	r3, #1
 8010068:	e068      	b.n	801013c <EvaluateCANInput+0x168>

  case OPER_GREATER_THAN:
    *nResult = nSelected > in->nOnVal;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	895b      	ldrh	r3, [r3, #10]
 801006e:	8afa      	ldrh	r2, [r7, #22]
 8010070:	429a      	cmp	r2, r3
 8010072:	bf8c      	ite	hi
 8010074:	2301      	movhi	r3, #1
 8010076:	2300      	movls	r3, #0
 8010078:	b2db      	uxtb	r3, r3
 801007a:	b29a      	uxth	r2, r3
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	801a      	strh	r2, [r3, #0]
    return 1;
 8010080:	2301      	movs	r3, #1
 8010082:	e05b      	b.n	801013c <EvaluateCANInput+0x168>

  case OPER_LESS_THAN:
    *nResult = nSelected < in->nOnVal;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	895b      	ldrh	r3, [r3, #10]
 8010088:	8afa      	ldrh	r2, [r7, #22]
 801008a:	429a      	cmp	r2, r3
 801008c:	bf34      	ite	cc
 801008e:	2301      	movcc	r3, #1
 8010090:	2300      	movcs	r3, #0
 8010092:	b2db      	uxtb	r3, r3
 8010094:	b29a      	uxth	r2, r3
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	801a      	strh	r2, [r3, #0]
    return 1;
 801009a:	2301      	movs	r3, #1
 801009c:	e04e      	b.n	801013c <EvaluateCANInput+0x168>

  case OPER_BITWISE_AND:
    if (in->eMode == MODE_NUM)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	7b1b      	ldrb	r3, [r3, #12]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d107      	bne.n	80100b6 <EvaluateCANInput+0xe2>
      *nResult = (nSelected & in->nOnVal);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	895a      	ldrh	r2, [r3, #10]
 80100aa:	8afb      	ldrh	r3, [r7, #22]
 80100ac:	4013      	ands	r3, r2
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	801a      	strh	r2, [r3, #0]
 80100b4:	e014      	b.n	80100e0 <EvaluateCANInput+0x10c>
    else
      CheckPushbutton(&in->ePbConfig, in->eMode, ((nSelected & in->nOnVal) > 0), nResult, NO_DEBOUNCE);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f103 0010 	add.w	r0, r3, #16
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	7b19      	ldrb	r1, [r3, #12]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	895a      	ldrh	r2, [r3, #10]
 80100c4:	8afb      	ldrh	r3, [r7, #22]
 80100c6:	4013      	ands	r3, r2
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	bf14      	ite	ne
 80100ce:	2301      	movne	r3, #1
 80100d0:	2300      	moveq	r3, #0
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	b29a      	uxth	r2, r3
 80100d6:	2300      	movs	r3, #0
 80100d8:	9300      	str	r3, [sp, #0]
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	f005 f81e 	bl	801511c <CheckPushbutton>
    return 1;
 80100e0:	2301      	movs	r3, #1
 80100e2:	e02b      	b.n	801013c <EvaluateCANInput+0x168>

  case OPER_BITWISE_NAND:
    if (in->eMode == MODE_NUM)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	7b1b      	ldrb	r3, [r3, #12]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d10f      	bne.n	801010c <EvaluateCANInput+0x138>
      *nResult = (nSelected & !in->nOnVal);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	895b      	ldrh	r3, [r3, #10]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	bf0c      	ite	eq
 80100f4:	2301      	moveq	r3, #1
 80100f6:	2300      	movne	r3, #0
 80100f8:	b2db      	uxtb	r3, r3
 80100fa:	b21a      	sxth	r2, r3
 80100fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010100:	4013      	ands	r3, r2
 8010102:	b21b      	sxth	r3, r3
 8010104:	b29a      	uxth	r2, r3
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	801a      	strh	r2, [r3, #0]
 801010a:	e014      	b.n	8010136 <EvaluateCANInput+0x162>
    else
      CheckPushbutton(&in->ePbConfig, in->eMode, !((nSelected & in->nOnVal) > 0), nResult, NO_DEBOUNCE);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f103 0010 	add.w	r0, r3, #16
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	7b19      	ldrb	r1, [r3, #12]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	895a      	ldrh	r2, [r3, #10]
 801011a:	8afb      	ldrh	r3, [r7, #22]
 801011c:	4013      	ands	r3, r2
 801011e:	b29b      	uxth	r3, r3
 8010120:	2b00      	cmp	r3, #0
 8010122:	bf0c      	ite	eq
 8010124:	2301      	moveq	r3, #1
 8010126:	2300      	movne	r3, #0
 8010128:	b2db      	uxtb	r3, r3
 801012a:	b29a      	uxth	r2, r3
 801012c:	2300      	movs	r3, #0
 801012e:	9300      	str	r3, [sp, #0]
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	f004 fff3 	bl	801511c <CheckPushbutton>
    return 1;
 8010136:	2301      	movs	r3, #1
 8010138:	e000      	b.n	801013c <EvaluateCANInput+0x168>
  }

  return 0;
 801013a:	2300      	movs	r3, #0

}
 801013c:	4618      	mov	r0, r3
 801013e:	3718      	adds	r7, #24
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <CANBoardCheckConnection>:
  rx->nHeartbeat = msg[7];
  rx->nLastHeartbeatTime = HAL_GetTick();
}

void CANBoardCheckConnection(volatile CANBoard_RX_t* rx)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  if( (rx->nHeartbeat == rx->nLastHeartbeat) &&
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010152:	b2da      	uxtb	r2, r3
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801015a:	b2db      	uxtb	r3, r3
 801015c:	429a      	cmp	r2, r3
 801015e:	d10c      	bne.n	801017a <CANBoardCheckConnection+0x36>
      ((HAL_GetTick() - rx->nLastHeartbeatTime) > (CANBOARD_TX_DELAY * 4)))
 8010160:	f7f2 fb98 	bl	8002894 <HAL_GetTick>
 8010164:	4602      	mov	r2, r0
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801016a:	1ad3      	subs	r3, r2, r3
  if( (rx->nHeartbeat == rx->nLastHeartbeat) &&
 801016c:	2bc8      	cmp	r3, #200	; 0xc8
 801016e:	d904      	bls.n	801017a <CANBoardCheckConnection+0x36>
  {
    rx->nConnected = 0;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2200      	movs	r2, #0
 8010174:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010178:	e003      	b.n	8010182 <CANBoardCheckConnection+0x3e>
  }
  else
  {
    rx->nConnected = 1;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2201      	movs	r2, #1
 801017e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }
  rx->nLastHeartbeat = rx->nHeartbeat;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010188:	b2da      	uxtb	r2, r3
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8010190:	bf00      	nop
 8010192:	3708      	adds	r7, #8
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8010198:	b480      	push	{r7}
 801019a:	b083      	sub	sp, #12
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80101a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80101a4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80101a8:	f003 0301 	and.w	r3, r3, #1
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d013      	beq.n	80101d8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80101b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80101b4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80101b8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d00b      	beq.n	80101d8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80101c0:	e000      	b.n	80101c4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80101c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80101c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d0f9      	beq.n	80101c2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80101ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	b2d2      	uxtb	r2, r2
 80101d6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80101d8:	687b      	ldr	r3, [r7, #4]
}
 80101da:	4618      	mov	r0, r3
 80101dc:	370c      	adds	r7, #12
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr
	...

080101e8 <USBD_CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Init(void)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUSBD, USBD_TxBuffer, 0);
 80101ec:	2200      	movs	r2, #0
 80101ee:	4905      	ldr	r1, [pc, #20]	; (8010204 <USBD_CDC_Init+0x1c>)
 80101f0:	4805      	ldr	r0, [pc, #20]	; (8010208 <USBD_CDC_Init+0x20>)
 80101f2:	f7fb ff0e 	bl	800c012 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUSBD, USBD_RxBuffer);
 80101f6:	4905      	ldr	r1, [pc, #20]	; (801020c <USBD_CDC_Init+0x24>)
 80101f8:	4803      	ldr	r0, [pc, #12]	; (8010208 <USBD_CDC_Init+0x20>)
 80101fa:	f7fb ff24 	bl	800c046 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80101fe:	2300      	movs	r3, #0
}
 8010200:	4618      	mov	r0, r3
 8010202:	bd80      	pop	{r7, pc}
 8010204:	200040e4 	.word	0x200040e4
 8010208:	200048e4 	.word	0x200048e4
 801020c:	200038e4 	.word	0x200038e4

08010210 <USBD_CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_DeInit(void)
{
 8010210:	b480      	push	{r7}
 8010212:	af00      	add	r7, sp, #0
  return (USBD_OK);
 8010214:	2300      	movs	r3, #0
}
 8010216:	4618      	mov	r0, r3
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr

08010220 <USBD_CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Control(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
 8010226:	4603      	mov	r3, r0
 8010228:	6039      	str	r1, [r7, #0]
 801022a:	71fb      	strb	r3, [r7, #7]
 801022c:	4613      	mov	r3, r2
 801022e:	80bb      	strh	r3, [r7, #4]
  switch(cmd)
 8010230:	79fb      	ldrb	r3, [r7, #7]
 8010232:	2b23      	cmp	r3, #35	; 0x23
 8010234:	d866      	bhi.n	8010304 <USBD_CDC_Control+0xe4>
 8010236:	a201      	add	r2, pc, #4	; (adr r2, 801023c <USBD_CDC_Control+0x1c>)
 8010238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801023c:	08010305 	.word	0x08010305
 8010240:	08010305 	.word	0x08010305
 8010244:	08010305 	.word	0x08010305
 8010248:	08010305 	.word	0x08010305
 801024c:	08010305 	.word	0x08010305
 8010250:	08010305 	.word	0x08010305
 8010254:	08010305 	.word	0x08010305
 8010258:	08010305 	.word	0x08010305
 801025c:	08010305 	.word	0x08010305
 8010260:	08010305 	.word	0x08010305
 8010264:	08010305 	.word	0x08010305
 8010268:	08010305 	.word	0x08010305
 801026c:	08010305 	.word	0x08010305
 8010270:	08010305 	.word	0x08010305
 8010274:	08010305 	.word	0x08010305
 8010278:	08010305 	.word	0x08010305
 801027c:	08010305 	.word	0x08010305
 8010280:	08010305 	.word	0x08010305
 8010284:	08010305 	.word	0x08010305
 8010288:	08010305 	.word	0x08010305
 801028c:	08010305 	.word	0x08010305
 8010290:	08010305 	.word	0x08010305
 8010294:	08010305 	.word	0x08010305
 8010298:	08010305 	.word	0x08010305
 801029c:	08010305 	.word	0x08010305
 80102a0:	08010305 	.word	0x08010305
 80102a4:	08010305 	.word	0x08010305
 80102a8:	08010305 	.word	0x08010305
 80102ac:	08010305 	.word	0x08010305
 80102b0:	08010305 	.word	0x08010305
 80102b4:	08010305 	.word	0x08010305
 80102b8:	08010305 	.word	0x08010305
 80102bc:	08010305 	.word	0x08010305
 80102c0:	080102cd 	.word	0x080102cd
 80102c4:	08010305 	.word	0x08010305
 80102c8:	08010305 	.word	0x08010305
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(115200);
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	2200      	movs	r2, #0
 80102d0:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(115200 >> 8);
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	3301      	adds	r3, #1
 80102d6:	22c2      	movs	r2, #194	; 0xc2
 80102d8:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(115200 >> 16);
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	3302      	adds	r3, #2
 80102de:	2201      	movs	r2, #1
 80102e0:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(115200 >> 24);
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	3303      	adds	r3, #3
 80102e6:	2200      	movs	r2, #0
 80102e8:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0; //Stop bits (1)
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	3304      	adds	r3, #4
 80102ee:	2200      	movs	r2, #0
 80102f0:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0; //Parity (none)
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	3305      	adds	r3, #5
 80102f6:	2200      	movs	r2, #0
 80102f8:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8; //Number of bits (8)
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	3306      	adds	r3, #6
 80102fe:	2208      	movs	r2, #8
 8010300:	701a      	strb	r2, [r3, #0]
    break;
 8010302:	e000      	b.n	8010306 <USBD_CDC_Control+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010304:	bf00      	nop
  }

  return (USBD_OK);
 8010306:	2300      	movs	r3, #0
}
 8010308:	4618      	mov	r0, r3
 801030a:	370c      	adds	r7, #12
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <USBD_CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Receive(uint8_t* Buf, uint32_t *Len)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b090      	sub	sp, #64	; 0x40
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
  MsgQueueRx_t stMsg;
  stMsg.eMsgSrc = USB_RX;
 801031e:	2301      	movs	r3, #1
 8010320:	733b      	strb	r3, [r7, #12]
  stMsg.nCRC = 0xFFFFFFFF;
 8010322:	f04f 33ff 	mov.w	r3, #4294967295
 8010326:	63bb      	str	r3, [r7, #56]	; 0x38
  stMsg.nRxLen = 0;
 8010328:	2300      	movs	r3, #0
 801032a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  for(uint8_t i=0; i<*Len; i++){
 801032e:	2300      	movs	r3, #0
 8010330:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010334:	e019      	b.n	801036a <USBD_CDC_Receive+0x56>
    if(i < 8){
 8010336:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801033a:	2b07      	cmp	r3, #7
 801033c:	d810      	bhi.n	8010360 <USBD_CDC_Receive+0x4c>
      stMsg.nRxData[i] = Buf[i];
 801033e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010342:	687a      	ldr	r2, [r7, #4]
 8010344:	441a      	add	r2, r3
 8010346:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801034a:	7812      	ldrb	r2, [r2, #0]
 801034c:	3340      	adds	r3, #64	; 0x40
 801034e:	443b      	add	r3, r7
 8010350:	f803 2c14 	strb.w	r2, [r3, #-20]
      stMsg.nRxLen++;
 8010354:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010358:	3301      	adds	r3, #1
 801035a:	b2db      	uxtb	r3, r3
 801035c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  for(uint8_t i=0; i<*Len; i++){
 8010360:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010364:	3301      	adds	r3, #1
 8010366:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801036a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	429a      	cmp	r2, r3
 8010374:	d3df      	bcc.n	8010336 <USBD_CDC_Receive+0x22>
    }
  }

  osMessageQueuePut(qMsgQueueRx, &stMsg, 0U, 0U);
 8010376:	4b0a      	ldr	r3, [pc, #40]	; (80103a0 <USBD_CDC_Receive+0x8c>)
 8010378:	6818      	ldr	r0, [r3, #0]
 801037a:	f107 010c 	add.w	r1, r7, #12
 801037e:	2300      	movs	r3, #0
 8010380:	2200      	movs	r2, #0
 8010382:	f7fd f935 	bl	800d5f0 <osMessageQueuePut>

  USBD_CDC_SetRxBuffer(&hUSBD, &Buf[0]);
 8010386:	6879      	ldr	r1, [r7, #4]
 8010388:	4806      	ldr	r0, [pc, #24]	; (80103a4 <USBD_CDC_Receive+0x90>)
 801038a:	f7fb fe5c 	bl	800c046 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUSBD);
 801038e:	4805      	ldr	r0, [pc, #20]	; (80103a4 <USBD_CDC_Receive+0x90>)
 8010390:	f7fb fe9c 	bl	800c0cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010394:	2300      	movs	r3, #0
}
 8010396:	4618      	mov	r0, r3
 8010398:	3740      	adds	r7, #64	; 0x40
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	20003320 	.word	0x20003320
 80103a4:	200048e4 	.word	0x200048e4

080103a8 <USBD_CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t USBD_CDC_Transmit(uint8_t* Buf, uint16_t Len)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	460b      	mov	r3, r1
 80103b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80103b4:	2300      	movs	r3, #0
 80103b6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUSBD.pClassData;
 80103b8:	4b0d      	ldr	r3, [pc, #52]	; (80103f0 <USBD_CDC_Transmit+0x48>)
 80103ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d001      	beq.n	80103ce <USBD_CDC_Transmit+0x26>
    return USBD_BUSY;
 80103ca:	2301      	movs	r3, #1
 80103cc:	e00b      	b.n	80103e6 <USBD_CDC_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUSBD, Buf, Len);
 80103ce:	887b      	ldrh	r3, [r7, #2]
 80103d0:	461a      	mov	r2, r3
 80103d2:	6879      	ldr	r1, [r7, #4]
 80103d4:	4806      	ldr	r0, [pc, #24]	; (80103f0 <USBD_CDC_Transmit+0x48>)
 80103d6:	f7fb fe1c 	bl	800c012 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUSBD);
 80103da:	4805      	ldr	r0, [pc, #20]	; (80103f0 <USBD_CDC_Transmit+0x48>)
 80103dc:	f7fb fe47 	bl	800c06e <USBD_CDC_TransmitPacket>
 80103e0:	4603      	mov	r3, r0
 80103e2:	73fb      	strb	r3, [r7, #15]
  return result;
 80103e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3710      	adds	r7, #16
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	200048e4 	.word	0x200048e4

080103f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

//========================================================================
// CAN Receive Callback
//========================================================================
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80103f4:	b5b0      	push	{r4, r5, r7, lr}
 80103f6:	b08e      	sub	sp, #56	; 0x38
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]

  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &stCanRxHeader, nCanRxData) != HAL_OK)
 80103fc:	4b19      	ldr	r3, [pc, #100]	; (8010464 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80103fe:	4a1a      	ldr	r2, [pc, #104]	; (8010468 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8010400:	2100      	movs	r1, #0
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f7f3 fd5e 	bl	8003ec4 <HAL_CAN_GetRxMessage>
 8010408:	4603      	mov	r3, r0
 801040a:	2b00      	cmp	r3, #0
 801040c:	d001      	beq.n	8010412 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 801040e:	f7f1 ffa9 	bl	8002364 <Error_Handler>
  }

  //Store latest receive time
  //Use to determine connection status
  nLastCanUpdate = HAL_GetTick();
 8010412:	f7f2 fa3f 	bl	8002894 <HAL_GetTick>
 8010416:	4603      	mov	r3, r0
 8010418:	4a14      	ldr	r2, [pc, #80]	; (801046c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 801041a:	6013      	str	r3, [r2, #0]

  MsgQueueRx_t stMsg;
  stMsg.eMsgSrc = CAN_RX;
 801041c:	2300      	movs	r3, #0
 801041e:	723b      	strb	r3, [r7, #8]
  stMsg.nRxLen = (uint8_t)stCanRxHeader.DLC;
 8010420:	4b11      	ldr	r3, [pc, #68]	; (8010468 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8010422:	691b      	ldr	r3, [r3, #16]
 8010424:	b2db      	uxtb	r3, r3
 8010426:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  memcpy(&stMsg.stCanRxHeader, &stCanRxHeader, sizeof(stCanRxHeader));
 801042a:	4b0f      	ldr	r3, [pc, #60]	; (8010468 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 801042c:	f107 040c 	add.w	r4, r7, #12
 8010430:	461d      	mov	r5, r3
 8010432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801043a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  memcpy(&stMsg.nRxData, &nCanRxData, sizeof(nCanRxData));
 801043e:	4a09      	ldr	r2, [pc, #36]	; (8010464 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8010440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010444:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010448:	e883 0003 	stmia.w	r3, {r0, r1}
  osMessageQueuePut(qMsgQueueRx, &stMsg, 0U, 0U);
 801044c:	4b08      	ldr	r3, [pc, #32]	; (8010470 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 801044e:	6818      	ldr	r0, [r3, #0]
 8010450:	f107 0108 	add.w	r1, r7, #8
 8010454:	2300      	movs	r3, #0
 8010456:	2200      	movs	r2, #0
 8010458:	f7fd f8ca 	bl	800d5f0 <osMessageQueuePut>

}
 801045c:	bf00      	nop
 801045e:	3738      	adds	r7, #56	; 0x38
 8010460:	46bd      	mov	sp, r7
 8010462:	bdb0      	pop	{r4, r5, r7, pc}
 8010464:	2000366c 	.word	0x2000366c
 8010468:	20003648 	.word	0x20003648
 801046c:	20003678 	.word	0x20003678
 8010470:	20003320 	.word	0x20003320
 8010474:	00000000 	.word	0x00000000

08010478 <PdmMainTask>:
//========================================================================
//========================================================================
// MAIN
//========================================================================
//========================================================================
void PdmMainTask(osThreadId_t* thisThreadId, ADC_HandleTypeDef* hadc1, ADC_HandleTypeDef* hadc4, RTC_HandleTypeDef* hrtc, CRC_HandleTypeDef* hcrc){
 8010478:	b5b0      	push	{r4, r5, r7, lr}
 801047a:	b0ac      	sub	sp, #176	; 0xb0
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	607a      	str	r2, [r7, #4]
 8010484:	603b      	str	r3, [r7, #0]

  HAL_ADC_Start_DMA(hadc1, (uint32_t*) nAdc1Data, ADC_1_COUNT);
 8010486:	2201      	movs	r2, #1
 8010488:	49ad      	ldr	r1, [pc, #692]	; (8010740 <PdmMainTask+0x2c8>)
 801048a:	68b8      	ldr	r0, [r7, #8]
 801048c:	f7f2 fc0c 	bl	8002ca8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(hadc4, (uint32_t*) nAdc4Data, ADC_4_COUNT);
 8010490:	2201      	movs	r2, #1
 8010492:	49ac      	ldr	r1, [pc, #688]	; (8010744 <PdmMainTask+0x2cc>)
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f7f2 fc07 	bl	8002ca8 <HAL_ADC_Start_DMA>

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUSBD, &FS_Desc, DEVICE_FS) != USBD_OK)
 801049a:	2200      	movs	r2, #0
 801049c:	49aa      	ldr	r1, [pc, #680]	; (8010748 <PdmMainTask+0x2d0>)
 801049e:	48ab      	ldr	r0, [pc, #684]	; (801074c <PdmMainTask+0x2d4>)
 80104a0:	f7fb fe3e 	bl	800c120 <USBD_Init>
 80104a4:	4603      	mov	r3, r0
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d001      	beq.n	80104ae <PdmMainTask+0x36>
  {
    Error_Handler();
 80104aa:	f7f1 ff5b 	bl	8002364 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUSBD, &USBD_CDC) != USBD_OK)
 80104ae:	49a8      	ldr	r1, [pc, #672]	; (8010750 <PdmMainTask+0x2d8>)
 80104b0:	48a6      	ldr	r0, [pc, #664]	; (801074c <PdmMainTask+0x2d4>)
 80104b2:	f7fb fe60 	bl	800c176 <USBD_RegisterClass>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d001      	beq.n	80104c0 <PdmMainTask+0x48>
  {
    Error_Handler();
 80104bc:	f7f1 ff52 	bl	8002364 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUSBD, &USBD_Interface_PDM) != USBD_OK)
 80104c0:	49a4      	ldr	r1, [pc, #656]	; (8010754 <PdmMainTask+0x2dc>)
 80104c2:	48a2      	ldr	r0, [pc, #648]	; (801074c <PdmMainTask+0x2d4>)
 80104c4:	f7fb fd8e 	bl	800bfe4 <USBD_CDC_RegisterInterface>
 80104c8:	4603      	mov	r3, r0
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d001      	beq.n	80104d2 <PdmMainTask+0x5a>
  {
    Error_Handler();
 80104ce:	f7f1 ff49 	bl	8002364 <Error_Handler>
  }
  if (USBD_Start(&hUSBD) != USBD_OK)
 80104d2:	489e      	ldr	r0, [pc, #632]	; (801074c <PdmMainTask+0x2d4>)
 80104d4:	f7fb fe69 	bl	800c1aa <USBD_Start>
 80104d8:	4603      	mov	r3, r0
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d001      	beq.n	80104e2 <PdmMainTask+0x6a>
  {
    Error_Handler();
 80104de:	f7f1 ff41 	bl	8002364 <Error_Handler>
  }

  Profet_Init();
 80104e2:	f001 fd35 	bl	8011f50 <Profet_Init>

  MsgQueueUsbTx_t stMsgUsbTx;
  MsgQueueCanTx_t stMsgCanTx;

  RTC_TimeTypeDef stTime = {0};
 80104e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80104ea:	2200      	movs	r2, #0
 80104ec:	601a      	str	r2, [r3, #0]
 80104ee:	605a      	str	r2, [r3, #4]
 80104f0:	609a      	str	r2, [r3, #8]
 80104f2:	60da      	str	r2, [r3, #12]
 80104f4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef stDate = {0};
 80104f6:	2300      	movs	r3, #0
 80104f8:	64fb      	str	r3, [r7, #76]	; 0x4c

    //=====================================================================================================
    // Standby
    //=====================================================================================================
    /* Check if the system was resumed from Standby mode */
    if ((__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) ||
 80104fa:	4b97      	ldr	r3, [pc, #604]	; (8010758 <PdmMainTask+0x2e0>)
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	f003 0302 	and.w	r3, r3, #2
 8010502:	2b02      	cmp	r3, #2
 8010504:	d005      	beq.n	8010512 <PdmMainTask+0x9a>
        (__HAL_PWR_GET_FLAG(PWR_FLAG_WU) != RESET))
 8010506:	4b94      	ldr	r3, [pc, #592]	; (8010758 <PdmMainTask+0x2e0>)
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	f003 0301 	and.w	r3, r3, #1
    if ((__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) ||
 801050e:	2b01      	cmp	r3, #1
 8010510:	d112      	bne.n	8010538 <PdmMainTask+0xc0>
    {
      /* Clear Standby flag */
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8010512:	4b91      	ldr	r3, [pc, #580]	; (8010758 <PdmMainTask+0x2e0>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4a90      	ldr	r2, [pc, #576]	; (8010758 <PdmMainTask+0x2e0>)
 8010518:	f043 0308 	orr.w	r3, r3, #8
 801051c:	6013      	str	r3, [r2, #0]
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 801051e:	4b8e      	ldr	r3, [pc, #568]	; (8010758 <PdmMainTask+0x2e0>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	4a8d      	ldr	r2, [pc, #564]	; (8010758 <PdmMainTask+0x2e0>)
 8010524:	f043 0304 	orr.w	r3, r3, #4
 8010528:	6013      	str	r3, [r2, #0]

      HAL_GPIO_WritePin(EXTRA3_GPIO_Port, EXTRA3_Pin, GPIO_PIN_RESET);
 801052a:	2200      	movs	r2, #0
 801052c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010534:	f7f4 fd28 	bl	8004f88 <HAL_GPIO_WritePin>
    }


    //Check standby pin
    //If no voltage - enter standby
    if(!READ_BIT(STANDBY_GPIO_Port->IDR, STANDBY_Pin)){
 8010538:	4b88      	ldr	r3, [pc, #544]	; (801075c <PdmMainTask+0x2e4>)
 801053a:	691b      	ldr	r3, [r3, #16]
 801053c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010540:	2b00      	cmp	r3, #0
 8010542:	d117      	bne.n	8010574 <PdmMainTask+0xfc>

      HAL_GPIO_WritePin(EXTRA3_GPIO_Port, EXTRA3_Pin, GPIO_PIN_SET);
 8010544:	2201      	movs	r2, #1
 8010546:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801054a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801054e:	f7f4 fd1b 	bl	8004f88 <HAL_GPIO_WritePin>

      HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2); //PC13
 8010552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010556:	f7f6 ff57 	bl	8007408 <HAL_PWR_DisableWakeUpPin>

      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 801055a:	4b7f      	ldr	r3, [pc, #508]	; (8010758 <PdmMainTask+0x2e0>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	4a7e      	ldr	r2, [pc, #504]	; (8010758 <PdmMainTask+0x2e0>)
 8010560:	f043 0304 	orr.w	r3, r3, #4
 8010564:	6013      	str	r3, [r2, #0]

      HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2); //PC13
 8010566:	f44f 7000 	mov.w	r0, #512	; 0x200
 801056a:	f7f6 ff3b 	bl	80073e4 <HAL_PWR_EnableWakeUpPin>

      HAL_PWR_EnterSTANDBYMode();
 801056e:	f7f6 ff5f 	bl	8007430 <HAL_PWR_EnterSTANDBYMode>
 8010572:	e003      	b.n	801057c <PdmMainTask+0x104>
    }
    else
    {
      HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2); //PC13
 8010574:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010578:	f7f6 ff46 	bl	8007408 <HAL_PWR_DisableWakeUpPin>
    //=====================================================================================================
    // ADC channels
    // ADC1 = Vbat and device temperature
    // ADC4 = Battery sense
    //=====================================================================================================
    nBattSense = (uint16_t)(((float)nAdc4Data[0]) * 0.0519 - 11.3);
 801057c:	4b71      	ldr	r3, [pc, #452]	; (8010744 <PdmMainTask+0x2cc>)
 801057e:	881b      	ldrh	r3, [r3, #0]
 8010580:	b29b      	uxth	r3, r3
 8010582:	ee07 3a90 	vmov	s15, r3
 8010586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801058a:	ee17 0a90 	vmov	r0, s15
 801058e:	f7ef ff83 	bl	8000498 <__aeabi_f2d>
 8010592:	a367      	add	r3, pc, #412	; (adr r3, 8010730 <PdmMainTask+0x2b8>)
 8010594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010598:	f7ef ffd6 	bl	8000548 <__aeabi_dmul>
 801059c:	4602      	mov	r2, r0
 801059e:	460b      	mov	r3, r1
 80105a0:	4610      	mov	r0, r2
 80105a2:	4619      	mov	r1, r3
 80105a4:	a364      	add	r3, pc, #400	; (adr r3, 8010738 <PdmMainTask+0x2c0>)
 80105a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105aa:	f7ef fe15 	bl	80001d8 <__aeabi_dsub>
 80105ae:	4602      	mov	r2, r0
 80105b0:	460b      	mov	r3, r1
 80105b2:	4610      	mov	r0, r2
 80105b4:	4619      	mov	r1, r3
 80105b6:	f7f0 f9d9 	bl	800096c <__aeabi_d2uiz>
 80105ba:	4603      	mov	r3, r0
 80105bc:	b29a      	uxth	r2, r3
 80105be:	4b68      	ldr	r3, [pc, #416]	; (8010760 <PdmMainTask+0x2e8>)
 80105c0:	801a      	strh	r2, [r3, #0]
    nStmTemp = (uint16_t)(80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 80105c2:	4b68      	ldr	r3, [pc, #416]	; (8010764 <PdmMainTask+0x2ec>)
 80105c4:	881b      	ldrh	r3, [r3, #0]
 80105c6:	ee07 3a90 	vmov	s15, r3
 80105ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80105ce:	4b66      	ldr	r3, [pc, #408]	; (8010768 <PdmMainTask+0x2f0>)
 80105d0:	881b      	ldrh	r3, [r3, #0]
 80105d2:	ee07 3a90 	vmov	s15, r3
 80105d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105de:	ee17 0a90 	vmov	r0, s15
 80105e2:	f7ef ff59 	bl	8000498 <__aeabi_f2d>
 80105e6:	4602      	mov	r2, r0
 80105e8:	460b      	mov	r3, r1
 80105ea:	f04f 0000 	mov.w	r0, #0
 80105ee:	495f      	ldr	r1, [pc, #380]	; (801076c <PdmMainTask+0x2f4>)
 80105f0:	f7f0 f8d4 	bl	800079c <__aeabi_ddiv>
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	4614      	mov	r4, r2
 80105fa:	461d      	mov	r5, r3
                          (((float)nAdc1Data[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0);
 80105fc:	4b50      	ldr	r3, [pc, #320]	; (8010740 <PdmMainTask+0x2c8>)
 80105fe:	881b      	ldrh	r3, [r3, #0]
 8010600:	b29b      	uxth	r3, r3
 8010602:	ee07 3a90 	vmov	s15, r3
 8010606:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801060a:	4b57      	ldr	r3, [pc, #348]	; (8010768 <PdmMainTask+0x2f0>)
 801060c:	881b      	ldrh	r3, [r3, #0]
 801060e:	ee07 3a90 	vmov	s15, r3
 8010612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010616:	ee77 7a67 	vsub.f32	s15, s14, s15
 801061a:	ee17 0a90 	vmov	r0, s15
 801061e:	f7ef ff3b 	bl	8000498 <__aeabi_f2d>
 8010622:	4602      	mov	r2, r0
 8010624:	460b      	mov	r3, r1
    nStmTemp = (uint16_t)(80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8010626:	4620      	mov	r0, r4
 8010628:	4629      	mov	r1, r5
 801062a:	f7ef ff8d 	bl	8000548 <__aeabi_dmul>
 801062e:	4602      	mov	r2, r0
 8010630:	460b      	mov	r3, r1
 8010632:	4610      	mov	r0, r2
 8010634:	4619      	mov	r1, r3
                          (((float)nAdc1Data[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0);
 8010636:	f04f 0200 	mov.w	r2, #0
 801063a:	4b4d      	ldr	r3, [pc, #308]	; (8010770 <PdmMainTask+0x2f8>)
 801063c:	f7ef fdce 	bl	80001dc <__adddf3>
 8010640:	4602      	mov	r2, r0
 8010642:	460b      	mov	r3, r1
    nStmTemp = (uint16_t)(80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8010644:	4610      	mov	r0, r2
 8010646:	4619      	mov	r1, r3
 8010648:	f7f0 f990 	bl	800096c <__aeabi_d2uiz>
 801064c:	4603      	mov	r3, r0
 801064e:	b29a      	uxth	r2, r3
 8010650:	4b48      	ldr	r3, [pc, #288]	; (8010774 <PdmMainTask+0x2fc>)
 8010652:	801a      	strh	r2, [r3, #0]

    //=====================================================================================================
    // CANBoard check connection
    //=====================================================================================================
    CANBoardCheckConnection(&stCANBoard_RX);
 8010654:	4848      	ldr	r0, [pc, #288]	; (8010778 <PdmMainTask+0x300>)
 8010656:	f7ff fd75 	bl	8010144 <CANBoardCheckConnection>

    //=====================================================================================================
    // USB Connection
    //=====================================================================================================
    if( READ_BIT(USB_VBUS_GPIO_Port->IDR, USB_VBUS_Pin) && !bUsbConnected){
 801065a:	4b48      	ldr	r3, [pc, #288]	; (801077c <PdmMainTask+0x304>)
 801065c:	691b      	ldr	r3, [r3, #16]
 801065e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00f      	beq.n	8010686 <PdmMainTask+0x20e>
 8010666:	4b46      	ldr	r3, [pc, #280]	; (8010780 <PdmMainTask+0x308>)
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	f083 0301 	eor.w	r3, r3, #1
 801066e:	b2db      	uxtb	r3, r3
 8010670:	2b00      	cmp	r3, #0
 8010672:	d008      	beq.n	8010686 <PdmMainTask+0x20e>
      HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_SET);
 8010674:	2201      	movs	r2, #1
 8010676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801067a:	4840      	ldr	r0, [pc, #256]	; (801077c <PdmMainTask+0x304>)
 801067c:	f7f4 fc84 	bl	8004f88 <HAL_GPIO_WritePin>
      bUsbConnected = true;
 8010680:	4b3f      	ldr	r3, [pc, #252]	; (8010780 <PdmMainTask+0x308>)
 8010682:	2201      	movs	r2, #1
 8010684:	701a      	strb	r2, [r3, #0]
    }

    if( !READ_BIT(USB_VBUS_GPIO_Port->IDR, USB_VBUS_Pin) && bUsbConnected){
 8010686:	4b3d      	ldr	r3, [pc, #244]	; (801077c <PdmMainTask+0x304>)
 8010688:	691b      	ldr	r3, [r3, #16]
 801068a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801068e:	2b00      	cmp	r3, #0
 8010690:	d126      	bne.n	80106e0 <PdmMainTask+0x268>
 8010692:	4b3b      	ldr	r3, [pc, #236]	; (8010780 <PdmMainTask+0x308>)
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d022      	beq.n	80106e0 <PdmMainTask+0x268>
      HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_RESET);
 801069a:	2200      	movs	r2, #0
 801069c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80106a0:	4836      	ldr	r0, [pc, #216]	; (801077c <PdmMainTask+0x304>)
 80106a2:	f7f4 fc71 	bl	8004f88 <HAL_GPIO_WritePin>
      bUsbConnected = false;
 80106a6:	4b36      	ldr	r3, [pc, #216]	; (8010780 <PdmMainTask+0x308>)
 80106a8:	2200      	movs	r2, #0
 80106aa:	701a      	strb	r2, [r3, #0]

      //Reset back to auto mode if in manual
      if (eDevMode == DEVICE_MANUAL){
 80106ac:	4b35      	ldr	r3, [pc, #212]	; (8010784 <PdmMainTask+0x30c>)
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d115      	bne.n	80106e0 <PdmMainTask+0x268>
        for(int i=0; i<12; i++) nManualOutputs[i] = 0;
 80106b4:	2300      	movs	r3, #0
 80106b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80106ba:	e00a      	b.n	80106d2 <PdmMainTask+0x25a>
 80106bc:	4a32      	ldr	r2, [pc, #200]	; (8010788 <PdmMainTask+0x310>)
 80106be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80106c2:	4413      	add	r3, r2
 80106c4:	2200      	movs	r2, #0
 80106c6:	701a      	strb	r2, [r3, #0]
 80106c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80106cc:	3301      	adds	r3, #1
 80106ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80106d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80106d6:	2b0b      	cmp	r3, #11
 80106d8:	ddf0      	ble.n	80106bc <PdmMainTask+0x244>
        eDevMode = DEVICE_AUTO;
 80106da:	4b2a      	ldr	r3, [pc, #168]	; (8010784 <PdmMainTask+0x30c>)
 80106dc:	2200      	movs	r2, #0
 80106de:	701a      	strb	r2, [r3, #0]
    }

    //=====================================================================================================
    // Totalize current
    //=====================================================================================================
    nILTotal = 0;
 80106e0:	4b2a      	ldr	r3, [pc, #168]	; (801078c <PdmMainTask+0x314>)
 80106e2:	2200      	movs	r2, #0
 80106e4:	801a      	strh	r2, [r3, #0]
    for(int i=0;i<PDM_NUM_OUTPUTS;i++)
 80106e6:	2300      	movs	r3, #0
 80106e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80106ec:	e016      	b.n	801071c <PdmMainTask+0x2a4>
      nILTotal += pf[i].nIL;
 80106ee:	4928      	ldr	r1, [pc, #160]	; (8010790 <PdmMainTask+0x318>)
 80106f0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80106f4:	4613      	mov	r3, r2
 80106f6:	00db      	lsls	r3, r3, #3
 80106f8:	1a9b      	subs	r3, r3, r2
 80106fa:	00db      	lsls	r3, r3, #3
 80106fc:	440b      	add	r3, r1
 80106fe:	3320      	adds	r3, #32
 8010700:	881b      	ldrh	r3, [r3, #0]
 8010702:	b29a      	uxth	r2, r3
 8010704:	4b21      	ldr	r3, [pc, #132]	; (801078c <PdmMainTask+0x314>)
 8010706:	881b      	ldrh	r3, [r3, #0]
 8010708:	b29b      	uxth	r3, r3
 801070a:	4413      	add	r3, r2
 801070c:	b29a      	uxth	r2, r3
 801070e:	4b1f      	ldr	r3, [pc, #124]	; (801078c <PdmMainTask+0x314>)
 8010710:	801a      	strh	r2, [r3, #0]
    for(int i=0;i<PDM_NUM_OUTPUTS;i++)
 8010712:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010716:	3301      	adds	r3, #1
 8010718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801071c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010720:	2b0b      	cmp	r3, #11
 8010722:	dde4      	ble.n	80106ee <PdmMainTask+0x276>
      printf("USB TX Busy\n");

    memset(cUsbBuffer,0,120);
    */

    for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8010724:	2300      	movs	r3, #0
 8010726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801072a:	e043      	b.n	80107b4 <PdmMainTask+0x33c>
 801072c:	f3af 8000 	nop.w
 8010730:	05532618 	.word	0x05532618
 8010734:	3faa92a3 	.word	0x3faa92a3
 8010738:	9999999a 	.word	0x9999999a
 801073c:	40269999 	.word	0x40269999
 8010740:	20003608 	.word	0x20003608
 8010744:	2000360c 	.word	0x2000360c
 8010748:	20000130 	.word	0x20000130
 801074c:	200048e4 	.word	0x200048e4
 8010750:	20000018 	.word	0x20000018
 8010754:	20000120 	.word	0x20000120
 8010758:	40007000 	.word	0x40007000
 801075c:	48000800 	.word	0x48000800
 8010760:	2000360e 	.word	0x2000360e
 8010764:	1ffff7c2 	.word	0x1ffff7c2
 8010768:	1ffff7b8 	.word	0x1ffff7b8
 801076c:	40540000 	.word	0x40540000
 8010770:	403e0000 	.word	0x403e0000
 8010774:	20003610 	.word	0x20003610
 8010778:	2000367c 	.word	0x2000367c
 801077c:	48000400 	.word	0x48000400
 8010780:	20003604 	.word	0x20003604
 8010784:	2000332c 	.word	0x2000332c
 8010788:	20004ba8 	.word	0x20004ba8
 801078c:	200035d0 	.word	0x200035d0
 8010790:	20003330 	.word	0x20003330
      Profet_SM(&pf[i]);
 8010794:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010798:	4613      	mov	r3, r2
 801079a:	00db      	lsls	r3, r3, #3
 801079c:	1a9b      	subs	r3, r3, r2
 801079e:	00db      	lsls	r3, r3, #3
 80107a0:	4ab7      	ldr	r2, [pc, #732]	; (8010a80 <PdmMainTask+0x608>)
 80107a2:	4413      	add	r3, r2
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7f0 ff27 	bl	80015f8 <Profet_SM>
    for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 80107aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80107ae:	3301      	adds	r3, #1
 80107b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80107b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80107b8:	2b0b      	cmp	r3, #11
 80107ba:	ddeb      	ble.n	8010794 <PdmMainTask+0x31c>
    }
    //WiperSM(&stWiper);
    MsgQueueRx_t stMsgRx;
    osStatus_t eStatus;

    nMsgCnt = osMessageQueueGetCount(qMsgQueueRx);
 80107bc:	4bb1      	ldr	r3, [pc, #708]	; (8010a84 <PdmMainTask+0x60c>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7fc fffb 	bl	800d7bc <osMessageQueueGetCount>
 80107c6:	4603      	mov	r3, r0
 80107c8:	4aaf      	ldr	r2, [pc, #700]	; (8010a88 <PdmMainTask+0x610>)
 80107ca:	6013      	str	r3, [r2, #0]

    eStatus = osMessageQueueGet(qMsgQueueRx, &stMsgRx, NULL, 0U);
 80107cc:	4bad      	ldr	r3, [pc, #692]	; (8010a84 <PdmMainTask+0x60c>)
 80107ce:	6818      	ldr	r0, [r3, #0]
 80107d0:	f107 0110 	add.w	r1, r7, #16
 80107d4:	2300      	movs	r3, #0
 80107d6:	2200      	movs	r2, #0
 80107d8:	f7fc ff7e 	bl	800d6d8 <osMessageQueueGet>
 80107dc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(eStatus == osOK){
 80107e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	f040 83b2 	bne.w	8010f4e <PdmMainTask+0xad6>
      if(stMsgRx.eMsgSrc == CAN_RX){
 80107ea:	7c3b      	ldrb	r3, [r7, #16]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d126      	bne.n	801083e <PdmMainTask+0x3c6>
        for(int i=0; i<PDM_NUM_CAN_INPUTS; i++){
 80107f0:	2300      	movs	r3, #0
 80107f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80107f6:	e01e      	b.n	8010836 <PdmMainTask+0x3be>
          EvaluateCANInput(&stMsgRx.stCanRxHeader, stMsgRx.nRxData, &stPdmConfig.stCanInput[i], &nCanInputs[i]);
 80107f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80107fc:	4613      	mov	r3, r2
 80107fe:	00db      	lsls	r3, r3, #3
 8010800:	1a9b      	subs	r3, r3, r2
 8010802:	009b      	lsls	r3, r3, #2
 8010804:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8010808:	4aa0      	ldr	r2, [pc, #640]	; (8010a8c <PdmMainTask+0x614>)
 801080a:	4413      	add	r3, r2
 801080c:	1d1a      	adds	r2, r3, #4
 801080e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010812:	005b      	lsls	r3, r3, #1
 8010814:	499e      	ldr	r1, [pc, #632]	; (8010a90 <PdmMainTask+0x618>)
 8010816:	185c      	adds	r4, r3, r1
 8010818:	f107 0310 	add.w	r3, r7, #16
 801081c:	f103 0120 	add.w	r1, r3, #32
 8010820:	f107 0310 	add.w	r3, r7, #16
 8010824:	1d18      	adds	r0, r3, #4
 8010826:	4623      	mov	r3, r4
 8010828:	f7ff fbd4 	bl	800ffd4 <EvaluateCANInput>
        for(int i=0; i<PDM_NUM_CAN_INPUTS; i++){
 801082c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010830:	3301      	adds	r3, #1
 8010832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010836:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801083a:	2b1d      	cmp	r3, #29
 801083c:	dddc      	ble.n	80107f8 <PdmMainTask+0x380>
        }
      }
      if((stMsgRx.eMsgSrc == CAN_RX && stMsgRx.stCanRxHeader.StdId == stPdmConfig.stCanOutput.nBaseId + 21) || (stMsgRx.eMsgSrc == USB_RX)){
 801083e:	7c3b      	ldrb	r3, [r7, #16]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d106      	bne.n	8010852 <PdmMainTask+0x3da>
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	4a91      	ldr	r2, [pc, #580]	; (8010a8c <PdmMainTask+0x614>)
 8010848:	f8b2 28d6 	ldrh.w	r2, [r2, #2262]	; 0x8d6
 801084c:	3215      	adds	r2, #21
 801084e:	4293      	cmp	r3, r2
 8010850:	d003      	beq.n	801085a <PdmMainTask+0x3e2>
 8010852:	7c3b      	ldrb	r3, [r7, #16]
 8010854:	2b01      	cmp	r3, #1
 8010856:	f040 837a 	bne.w	8010f4e <PdmMainTask+0xad6>
        //EXTRA2_GPIO_Port->ODR ^= EXTRA2_Pin;

        nSend = 0;
 801085a:	2300      	movs	r3, #0
 801085c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

        switch((MsgQueueRxCmd_t)stMsgRx.nRxData[0]){
 8010860:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010864:	3b42      	subs	r3, #66	; 0x42
 8010866:	2b12      	cmp	r3, #18
 8010868:	f200 8369 	bhi.w	8010f3e <PdmMainTask+0xac6>
 801086c:	a201      	add	r2, pc, #4	; (adr r2, 8010874 <PdmMainTask+0x3fc>)
 801086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010872:	bf00      	nop
 8010874:	080108c1 	.word	0x080108c1
 8010878:	08010f3f 	.word	0x08010f3f
 801087c:	08010f3f 	.word	0x08010f3f
 8010880:	08010f3f 	.word	0x08010f3f
 8010884:	08010e99 	.word	0x08010e99
 8010888:	08010f3f 	.word	0x08010f3f
 801088c:	08010f3f 	.word	0x08010f3f
 8010890:	08010f3f 	.word	0x08010f3f
 8010894:	08010f3f 	.word	0x08010f3f
 8010898:	08010f3f 	.word	0x08010f3f
 801089c:	08010f3f 	.word	0x08010f3f
 80108a0:	0801095f 	.word	0x0801095f
 80108a4:	08010f3f 	.word	0x08010f3f
 80108a8:	08010f3f 	.word	0x08010f3f
 80108ac:	08010f3f 	.word	0x08010f3f
 80108b0:	08010aa5 	.word	0x08010aa5
 80108b4:	08010ce1 	.word	0x08010ce1
 80108b8:	08010f3f 	.word	0x08010f3f
 80108bc:	08010db9 	.word	0x08010db9

            //Burn Settings
            // 'B'
            case MSG_RX_BURN_SETTINGS:
              //Check special number sequence
              if(stMsgRx.nRxLen == 4){
 80108c0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80108c4:	2b04      	cmp	r3, #4
 80108c6:	f040 8344 	bne.w	8010f52 <PdmMainTask+0xada>
                if((stMsgRx.nRxData[1] == 1) && (stMsgRx.nRxData[2] == 23) && (stMsgRx.nRxData[3] == 20)){
 80108ca:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	f040 833f 	bne.w	8010f52 <PdmMainTask+0xada>
 80108d4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80108d8:	2b17      	cmp	r3, #23
 80108da:	f040 833a 	bne.w	8010f52 <PdmMainTask+0xada>
 80108de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80108e2:	2b14      	cmp	r3, #20
 80108e4:	f040 8335 	bne.w	8010f52 <PdmMainTask+0xada>
                  //Write settings to FRAM
                  //uint8_t nRet = PdmConfig_Write(hi2c2, MB85RC_ADDRESS, &stPdmConfig);
                  //TODO: Use flag to I2C task

                  stMsgUsbTx.nTxLen = 2;
 80108e8:	2302      	movs	r3, #2
 80108ea:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
                  stMsgCanTx.stTxHeader.DLC = 2;
 80108ee:	2302      	movs	r3, #2
 80108f0:	677b      	str	r3, [r7, #116]	; 0x74

                  stMsgUsbTx.nTxData[0] = MSG_TX_BURN_SETTINGS;
 80108f2:	2362      	movs	r3, #98	; 0x62
 80108f4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                  stMsgUsbTx.nTxData[1] = 0;// nRet;
 80108f8:	2300      	movs	r3, #0
 80108fa:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                  stMsgUsbTx.nTxData[2] = 0;
 80108fe:	2300      	movs	r3, #0
 8010900:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                  stMsgUsbTx.nTxData[3] = 0;
 8010904:	2300      	movs	r3, #0
 8010906:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                  stMsgUsbTx.nTxData[4] = 0;
 801090a:	2300      	movs	r3, #0
 801090c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                  stMsgUsbTx.nTxData[5] = 0;
 8010910:	2300      	movs	r3, #0
 8010912:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
                  stMsgUsbTx.nTxData[6] = 0;
 8010916:	2300      	movs	r3, #0
 8010918:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                  stMsgUsbTx.nTxData[7] = 0;
 801091c:	2300      	movs	r3, #0
 801091e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

                  stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8010922:	4b5a      	ldr	r3, [pc, #360]	; (8010a8c <PdmMainTask+0x614>)
 8010924:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8010928:	3314      	adds	r3, #20
 801092a:	667b      	str	r3, [r7, #100]	; 0x64

                  memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 801092c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010930:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8010934:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010938:	e883 0003 	stmia.w	r3, {r0, r1}

                  osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 801093c:	4b55      	ldr	r3, [pc, #340]	; (8010a94 <PdmMainTask+0x61c>)
 801093e:	6818      	ldr	r0, [r3, #0]
 8010940:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8010944:	2300      	movs	r3, #0
 8010946:	2200      	movs	r2, #0
 8010948:	f7fc fe52 	bl	800d5f0 <osMessageQueuePut>
                  osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 801094c:	4b52      	ldr	r3, [pc, #328]	; (8010a98 <PdmMainTask+0x620>)
 801094e:	6818      	ldr	r0, [r3, #0]
 8010950:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8010954:	2300      	movs	r3, #0
 8010956:	2200      	movs	r2, #0
 8010958:	f7fc fe4a 	bl	800d5f0 <osMessageQueuePut>
                }
              }
            break;
 801095c:	e2f9      	b.n	8010f52 <PdmMainTask+0xada>

           //Set Mode
           // 'M'
           case MSG_RX_SET_MODE:
             if(stMsgRx.nRxLen == 2){
 801095e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010962:	2b02      	cmp	r3, #2
 8010964:	d147      	bne.n	80109f6 <PdmMainTask+0x57e>
               switch(eDevMode){
 8010966:	4b4d      	ldr	r3, [pc, #308]	; (8010a9c <PdmMainTask+0x624>)
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d002      	beq.n	8010974 <PdmMainTask+0x4fc>
 801096e:	2b01      	cmp	r3, #1
 8010970:	d01e      	beq.n	80109b0 <PdmMainTask+0x538>
 8010972:	e03d      	b.n	80109f0 <PdmMainTask+0x578>
               case DEVICE_AUTO:
                 if(GET_BIT_AT(stMsgRx.nRxData[1],0)){ //Manual sent
 8010974:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8010978:	f003 0301 	and.w	r3, r3, #1
 801097c:	b2db      	uxtb	r3, r3
 801097e:	2b00      	cmp	r3, #0
 8010980:	d033      	beq.n	80109ea <PdmMainTask+0x572>
                   for(int i=0; i<12; i++) nManualOutputs[i] = 0;
 8010982:	2300      	movs	r3, #0
 8010984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010988:	e00a      	b.n	80109a0 <PdmMainTask+0x528>
 801098a:	4a45      	ldr	r2, [pc, #276]	; (8010aa0 <PdmMainTask+0x628>)
 801098c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010990:	4413      	add	r3, r2
 8010992:	2200      	movs	r2, #0
 8010994:	701a      	strb	r2, [r3, #0]
 8010996:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801099a:	3301      	adds	r3, #1
 801099c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80109a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80109a4:	2b0b      	cmp	r3, #11
 80109a6:	ddf0      	ble.n	801098a <PdmMainTask+0x512>
                   eDevMode = DEVICE_MANUAL;
 80109a8:	4b3c      	ldr	r3, [pc, #240]	; (8010a9c <PdmMainTask+0x624>)
 80109aa:	2201      	movs	r2, #1
 80109ac:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 80109ae:	e01c      	b.n	80109ea <PdmMainTask+0x572>

               case DEVICE_MANUAL:
                 if(!GET_BIT_AT(stMsgRx.nRxData[1], 0)){ //Auto sent
 80109b0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80109b4:	f003 0301 	and.w	r3, r3, #1
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d118      	bne.n	80109ee <PdmMainTask+0x576>
                   for(int i=0; i<12; i++) nManualOutputs[i] = 0;
 80109bc:	2300      	movs	r3, #0
 80109be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80109c2:	e00a      	b.n	80109da <PdmMainTask+0x562>
 80109c4:	4a36      	ldr	r2, [pc, #216]	; (8010aa0 <PdmMainTask+0x628>)
 80109c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109ca:	4413      	add	r3, r2
 80109cc:	2200      	movs	r2, #0
 80109ce:	701a      	strb	r2, [r3, #0]
 80109d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109d4:	3301      	adds	r3, #1
 80109d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80109da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109de:	2b0b      	cmp	r3, #11
 80109e0:	ddf0      	ble.n	80109c4 <PdmMainTask+0x54c>
                   eDevMode = DEVICE_AUTO;
 80109e2:	4b2e      	ldr	r3, [pc, #184]	; (8010a9c <PdmMainTask+0x624>)
 80109e4:	2200      	movs	r2, #0
 80109e6:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 80109e8:	e001      	b.n	80109ee <PdmMainTask+0x576>
                 break;
 80109ea:	bf00      	nop
 80109ec:	e000      	b.n	80109f0 <PdmMainTask+0x578>
                 break;
 80109ee:	bf00      	nop
               }
               nSend = 1;
 80109f0:	2301      	movs	r3, #1
 80109f2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
             }

             if((stMsgRx.nRxLen == 1) || (nSend)){
 80109f6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80109fa:	2b01      	cmp	r3, #1
 80109fc:	d004      	beq.n	8010a08 <PdmMainTask+0x590>
 80109fe:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	f000 82a7 	beq.w	8010f56 <PdmMainTask+0xade>
               stMsgUsbTx.nTxLen = 2;
 8010a08:	2302      	movs	r3, #2
 8010a0a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
               stMsgCanTx.stTxHeader.DLC = 2;
 8010a0e:	2302      	movs	r3, #2
 8010a10:	677b      	str	r3, [r7, #116]	; 0x74

               stMsgUsbTx.nTxData[0] = MSG_TX_SET_MODE;
 8010a12:	236d      	movs	r3, #109	; 0x6d
 8010a14:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
               stMsgUsbTx.nTxData[1] = (uint8_t)eDevMode;
 8010a18:	4b20      	ldr	r3, [pc, #128]	; (8010a9c <PdmMainTask+0x624>)
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
               stMsgUsbTx.nTxData[2] = 0;
 8010a20:	2300      	movs	r3, #0
 8010a22:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
               stMsgUsbTx.nTxData[3] = 0;
 8010a26:	2300      	movs	r3, #0
 8010a28:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
               stMsgUsbTx.nTxData[4] = 0;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgUsbTx.nTxData[5] = 0;
 8010a32:	2300      	movs	r3, #0
 8010a34:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
               stMsgUsbTx.nTxData[6] = 0;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
               stMsgUsbTx.nTxData[7] = 0;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8010a44:	4b11      	ldr	r3, [pc, #68]	; (8010a8c <PdmMainTask+0x614>)
 8010a46:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8010a4a:	3314      	adds	r3, #20
 8010a4c:	667b      	str	r3, [r7, #100]	; 0x64

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8010a4e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010a52:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8010a56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a5a:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8010a5e:	4b0d      	ldr	r3, [pc, #52]	; (8010a94 <PdmMainTask+0x61c>)
 8010a60:	6818      	ldr	r0, [r3, #0]
 8010a62:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8010a66:	2300      	movs	r3, #0
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f7fc fdc1 	bl	800d5f0 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8010a6e:	4b0a      	ldr	r3, [pc, #40]	; (8010a98 <PdmMainTask+0x620>)
 8010a70:	6818      	ldr	r0, [r3, #0]
 8010a72:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8010a76:	2300      	movs	r3, #0
 8010a78:	2200      	movs	r2, #0
 8010a7a:	f7fc fdb9 	bl	800d5f0 <osMessageQueuePut>
             }
           break;
 8010a7e:	e26a      	b.n	8010f56 <PdmMainTask+0xade>
 8010a80:	20003330 	.word	0x20003330
 8010a84:	20003320 	.word	0x20003320
 8010a88:	200038e0 	.word	0x200038e0
 8010a8c:	20002a44 	.word	0x20002a44
 8010a90:	20003834 	.word	0x20003834
 8010a94:	20003324 	.word	0x20003324
 8010a98:	20003328 	.word	0x20003328
 8010a9c:	2000332c 	.word	0x2000332c
 8010aa0:	20004ba8 	.word	0x20004ba8


           //Force Outputs
           // 'Q'
           case MSG_RX_FORCE_OUTPUTS:
             if(stMsgRx.nRxLen == 7){
 8010aa4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010aa8:	2b07      	cmp	r3, #7
 8010aaa:	d16b      	bne.n	8010b84 <PdmMainTask+0x70c>
               if(eDevMode == DEVICE_MANUAL){
 8010aac:	4b87      	ldr	r3, [pc, #540]	; (8010ccc <PdmMainTask+0x854>)
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d167      	bne.n	8010b84 <PdmMainTask+0x70c>
                 nManualOutputs[0] = (stMsgRx.nRxData[1] & 0x01);
 8010ab4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8010ab8:	f003 0301 	and.w	r3, r3, #1
 8010abc:	b2da      	uxtb	r2, r3
 8010abe:	4b84      	ldr	r3, [pc, #528]	; (8010cd0 <PdmMainTask+0x858>)
 8010ac0:	701a      	strb	r2, [r3, #0]
                 nManualOutputs[1] = (stMsgRx.nRxData[1] & 0x02) >> 1;
 8010ac2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8010ac6:	105b      	asrs	r3, r3, #1
 8010ac8:	b2db      	uxtb	r3, r3
 8010aca:	f003 0301 	and.w	r3, r3, #1
 8010ace:	b2da      	uxtb	r2, r3
 8010ad0:	4b7f      	ldr	r3, [pc, #508]	; (8010cd0 <PdmMainTask+0x858>)
 8010ad2:	705a      	strb	r2, [r3, #1]
                 nManualOutputs[2] = (stMsgRx.nRxData[1] & 0x04) >> 2;
 8010ad4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8010ad8:	109b      	asrs	r3, r3, #2
 8010ada:	b2db      	uxtb	r3, r3
 8010adc:	f003 0301 	and.w	r3, r3, #1
 8010ae0:	b2da      	uxtb	r2, r3
 8010ae2:	4b7b      	ldr	r3, [pc, #492]	; (8010cd0 <PdmMainTask+0x858>)
 8010ae4:	709a      	strb	r2, [r3, #2]
                 nManualOutputs[3] = (stMsgRx.nRxData[1] & 0x08) >> 3;
 8010ae6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8010aea:	10db      	asrs	r3, r3, #3
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	f003 0301 	and.w	r3, r3, #1
 8010af2:	b2da      	uxtb	r2, r3
 8010af4:	4b76      	ldr	r3, [pc, #472]	; (8010cd0 <PdmMainTask+0x858>)
 8010af6:	70da      	strb	r2, [r3, #3]
                 nManualOutputs[4] = (stMsgRx.nRxData[1] & 0x10) >> 4;
 8010af8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8010afc:	111b      	asrs	r3, r3, #4
 8010afe:	b2db      	uxtb	r3, r3
 8010b00:	f003 0301 	and.w	r3, r3, #1
 8010b04:	b2da      	uxtb	r2, r3
 8010b06:	4b72      	ldr	r3, [pc, #456]	; (8010cd0 <PdmMainTask+0x858>)
 8010b08:	711a      	strb	r2, [r3, #4]
                 nManualOutputs[5] = (stMsgRx.nRxData[1] & 0x20) >> 5;
 8010b0a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8010b0e:	115b      	asrs	r3, r3, #5
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	f003 0301 	and.w	r3, r3, #1
 8010b16:	b2da      	uxtb	r2, r3
 8010b18:	4b6d      	ldr	r3, [pc, #436]	; (8010cd0 <PdmMainTask+0x858>)
 8010b1a:	715a      	strb	r2, [r3, #5]
                 nManualOutputs[6] = (stMsgRx.nRxData[1] & 0x40) >> 6;
 8010b1c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8010b20:	119b      	asrs	r3, r3, #6
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	f003 0301 	and.w	r3, r3, #1
 8010b28:	b2da      	uxtb	r2, r3
 8010b2a:	4b69      	ldr	r3, [pc, #420]	; (8010cd0 <PdmMainTask+0x858>)
 8010b2c:	719a      	strb	r2, [r3, #6]
                 nManualOutputs[7] = (stMsgRx.nRxData[1] & 0x80) >> 7;
 8010b2e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8010b32:	09db      	lsrs	r3, r3, #7
 8010b34:	b2da      	uxtb	r2, r3
 8010b36:	4b66      	ldr	r3, [pc, #408]	; (8010cd0 <PdmMainTask+0x858>)
 8010b38:	71da      	strb	r2, [r3, #7]
                 nManualOutputs[8] = (stMsgRx.nRxData[2] & 0x01);
 8010b3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8010b3e:	f003 0301 	and.w	r3, r3, #1
 8010b42:	b2da      	uxtb	r2, r3
 8010b44:	4b62      	ldr	r3, [pc, #392]	; (8010cd0 <PdmMainTask+0x858>)
 8010b46:	721a      	strb	r2, [r3, #8]
                 nManualOutputs[9] = (stMsgRx.nRxData[2] & 0x02) >> 1;
 8010b48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8010b4c:	105b      	asrs	r3, r3, #1
 8010b4e:	b2db      	uxtb	r3, r3
 8010b50:	f003 0301 	and.w	r3, r3, #1
 8010b54:	b2da      	uxtb	r2, r3
 8010b56:	4b5e      	ldr	r3, [pc, #376]	; (8010cd0 <PdmMainTask+0x858>)
 8010b58:	725a      	strb	r2, [r3, #9]
                 nManualOutputs[10] = (stMsgRx.nRxData[2] & 0x04) >> 2;
 8010b5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8010b5e:	109b      	asrs	r3, r3, #2
 8010b60:	b2db      	uxtb	r3, r3
 8010b62:	f003 0301 	and.w	r3, r3, #1
 8010b66:	b2da      	uxtb	r2, r3
 8010b68:	4b59      	ldr	r3, [pc, #356]	; (8010cd0 <PdmMainTask+0x858>)
 8010b6a:	729a      	strb	r2, [r3, #10]
                 nManualOutputs[11] = (stMsgRx.nRxData[2] & 0x08) >> 3;
 8010b6c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8010b70:	10db      	asrs	r3, r3, #3
 8010b72:	b2db      	uxtb	r3, r3
 8010b74:	f003 0301 	and.w	r3, r3, #1
 8010b78:	b2da      	uxtb	r2, r3
 8010b7a:	4b55      	ldr	r3, [pc, #340]	; (8010cd0 <PdmMainTask+0x858>)
 8010b7c:	72da      	strb	r2, [r3, #11]
                 nSend = 1;
 8010b7e:	2301      	movs	r3, #1
 8010b80:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
               }
             }
             if((stMsgRx.nRxLen == 1) || (nSend)){
 8010b84:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	d004      	beq.n	8010b96 <PdmMainTask+0x71e>
 8010b8c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	f000 81e2 	beq.w	8010f5a <PdmMainTask+0xae2>
               stMsgUsbTx.nTxLen = 7;
 8010b96:	2307      	movs	r3, #7
 8010b98:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
               stMsgCanTx.stTxHeader.DLC = 7;
 8010b9c:	2307      	movs	r3, #7
 8010b9e:	677b      	str	r3, [r7, #116]	; 0x74

               stMsgUsbTx.nTxData[0] = MSG_TX_FORCE_OUTPUTS;
 8010ba0:	2371      	movs	r3, #113	; 0x71
 8010ba2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8010ba6:	4b4a      	ldr	r3, [pc, #296]	; (8010cd0 <PdmMainTask+0x858>)
 8010ba8:	79db      	ldrb	r3, [r3, #7]
 8010baa:	01db      	lsls	r3, r3, #7
 8010bac:	b2da      	uxtb	r2, r3
 8010bae:	4b48      	ldr	r3, [pc, #288]	; (8010cd0 <PdmMainTask+0x858>)
 8010bb0:	799b      	ldrb	r3, [r3, #6]
 8010bb2:	019b      	lsls	r3, r3, #6
 8010bb4:	b2db      	uxtb	r3, r3
 8010bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	4413      	add	r3, r2
 8010bbe:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8010bc0:	4b43      	ldr	r3, [pc, #268]	; (8010cd0 <PdmMainTask+0x858>)
 8010bc2:	795b      	ldrb	r3, [r3, #5]
 8010bc4:	015b      	lsls	r3, r3, #5
 8010bc6:	b2db      	uxtb	r3, r3
 8010bc8:	f003 0320 	and.w	r3, r3, #32
 8010bcc:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8010bce:	4413      	add	r3, r2
 8010bd0:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8010bd2:	4b3f      	ldr	r3, [pc, #252]	; (8010cd0 <PdmMainTask+0x858>)
 8010bd4:	791b      	ldrb	r3, [r3, #4]
 8010bd6:	011b      	lsls	r3, r3, #4
 8010bd8:	b2db      	uxtb	r3, r3
 8010bda:	f003 0310 	and.w	r3, r3, #16
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	4413      	add	r3, r2
 8010be2:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8010be4:	4b3a      	ldr	r3, [pc, #232]	; (8010cd0 <PdmMainTask+0x858>)
 8010be6:	78db      	ldrb	r3, [r3, #3]
 8010be8:	00db      	lsls	r3, r3, #3
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	f003 0308 	and.w	r3, r3, #8
 8010bf0:	b2db      	uxtb	r3, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8010bf2:	4413      	add	r3, r2
 8010bf4:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8010bf6:	4b36      	ldr	r3, [pc, #216]	; (8010cd0 <PdmMainTask+0x858>)
 8010bf8:	789b      	ldrb	r3, [r3, #2]
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	f003 0304 	and.w	r3, r3, #4
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	4413      	add	r3, r2
 8010c06:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[1] & 0x01) << 1) + (nManualOutputs[0] & 0x01);
 8010c08:	4b31      	ldr	r3, [pc, #196]	; (8010cd0 <PdmMainTask+0x858>)
 8010c0a:	785b      	ldrb	r3, [r3, #1]
 8010c0c:	005b      	lsls	r3, r3, #1
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	f003 0302 	and.w	r3, r3, #2
 8010c14:	b2db      	uxtb	r3, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8010c16:	4413      	add	r3, r2
 8010c18:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[1] & 0x01) << 1) + (nManualOutputs[0] & 0x01);
 8010c1a:	4b2d      	ldr	r3, [pc, #180]	; (8010cd0 <PdmMainTask+0x858>)
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	f003 0301 	and.w	r3, r3, #1
 8010c22:	b2db      	uxtb	r3, r3
 8010c24:	4413      	add	r3, r2
 8010c26:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8010c28:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8010c2c:	4b28      	ldr	r3, [pc, #160]	; (8010cd0 <PdmMainTask+0x858>)
 8010c2e:	7adb      	ldrb	r3, [r3, #11]
 8010c30:	00db      	lsls	r3, r3, #3
 8010c32:	b25b      	sxtb	r3, r3
 8010c34:	f003 0308 	and.w	r3, r3, #8
 8010c38:	b25a      	sxtb	r2, r3
 8010c3a:	4b25      	ldr	r3, [pc, #148]	; (8010cd0 <PdmMainTask+0x858>)
 8010c3c:	7a9b      	ldrb	r3, [r3, #10]
 8010c3e:	009b      	lsls	r3, r3, #2
 8010c40:	b25b      	sxtb	r3, r3
 8010c42:	f003 0304 	and.w	r3, r3, #4
 8010c46:	b25b      	sxtb	r3, r3
 8010c48:	4313      	orrs	r3, r2
 8010c4a:	b25b      	sxtb	r3, r3
 8010c4c:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[9] & 0x01) << 1) + (nManualOutputs[8] & 0x01);
 8010c4e:	4b20      	ldr	r3, [pc, #128]	; (8010cd0 <PdmMainTask+0x858>)
 8010c50:	7a5b      	ldrb	r3, [r3, #9]
 8010c52:	005b      	lsls	r3, r3, #1
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	f003 0302 	and.w	r3, r3, #2
 8010c5a:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8010c5c:	4413      	add	r3, r2
 8010c5e:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[9] & 0x01) << 1) + (nManualOutputs[8] & 0x01);
 8010c60:	4b1b      	ldr	r3, [pc, #108]	; (8010cd0 <PdmMainTask+0x858>)
 8010c62:	7a1b      	ldrb	r3, [r3, #8]
 8010c64:	f003 0301 	and.w	r3, r3, #1
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	4413      	add	r3, r2
 8010c6c:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8010c6e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

               //TODO:Add manual output modes
               stMsgUsbTx.nTxData[3] = 0;
 8010c72:	2300      	movs	r3, #0
 8010c74:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
               stMsgUsbTx.nTxData[4] = 0;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgUsbTx.nTxData[5] = 0;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
               stMsgUsbTx.nTxData[6] = 0;
 8010c84:	2300      	movs	r3, #0
 8010c86:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
               stMsgUsbTx.nTxData[7] = 0;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8010c90:	4b10      	ldr	r3, [pc, #64]	; (8010cd4 <PdmMainTask+0x85c>)
 8010c92:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8010c96:	3314      	adds	r3, #20
 8010c98:	667b      	str	r3, [r7, #100]	; 0x64

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8010c9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010c9e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8010ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ca6:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8010caa:	4b0b      	ldr	r3, [pc, #44]	; (8010cd8 <PdmMainTask+0x860>)
 8010cac:	6818      	ldr	r0, [r3, #0]
 8010cae:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	f7fc fc9b 	bl	800d5f0 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8010cba:	4b08      	ldr	r3, [pc, #32]	; (8010cdc <PdmMainTask+0x864>)
 8010cbc:	6818      	ldr	r0, [r3, #0]
 8010cbe:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	f7fc fc93 	bl	800d5f0 <osMessageQueuePut>
             }
           break;
 8010cca:	e146      	b.n	8010f5a <PdmMainTask+0xae2>
 8010ccc:	2000332c 	.word	0x2000332c
 8010cd0:	20004ba8 	.word	0x20004ba8
 8010cd4:	20002a44 	.word	0x20002a44
 8010cd8:	20003324 	.word	0x20003324
 8010cdc:	20003328 	.word	0x20003328

           //Set Reporting
           // 'R'
           case MSG_RX_SET_REPORTING:
             if(stMsgRx.nRxLen == 3){
 8010ce0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010ce4:	2b03      	cmp	r3, #3
 8010ce6:	d118      	bne.n	8010d1a <PdmMainTask+0x8a2>
               nReportingOn = stMsgRx.nRxData[1] & 0x01;
 8010ce8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8010cec:	f003 0301 	and.w	r3, r3, #1
 8010cf0:	b2da      	uxtb	r2, r3
 8010cf2:	4bac      	ldr	r3, [pc, #688]	; (8010fa4 <PdmMainTask+0xb2c>)
 8010cf4:	701a      	strb	r2, [r3, #0]
               nReportingDelay = stMsgRx.nRxData[2] * 100;
 8010cf6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	461a      	mov	r2, r3
 8010cfe:	0092      	lsls	r2, r2, #2
 8010d00:	4413      	add	r3, r2
 8010d02:	461a      	mov	r2, r3
 8010d04:	0091      	lsls	r1, r2, #2
 8010d06:	461a      	mov	r2, r3
 8010d08:	460b      	mov	r3, r1
 8010d0a:	4413      	add	r3, r2
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	b29a      	uxth	r2, r3
 8010d10:	4ba5      	ldr	r3, [pc, #660]	; (8010fa8 <PdmMainTask+0xb30>)
 8010d12:	801a      	strh	r2, [r3, #0]
               nSend = 1;
 8010d14:	2301      	movs	r3, #1
 8010d16:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
             }
             if((stMsgRx.nRxLen == 1) || (nSend)){
 8010d1a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010d1e:	2b01      	cmp	r3, #1
 8010d20:	d004      	beq.n	8010d2c <PdmMainTask+0x8b4>
 8010d22:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	f000 8119 	beq.w	8010f5e <PdmMainTask+0xae6>
               stMsgUsbTx.nTxLen = 3;
 8010d2c:	2303      	movs	r3, #3
 8010d2e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
               stMsgCanTx.stTxHeader.DLC = 3;
 8010d32:	2303      	movs	r3, #3
 8010d34:	677b      	str	r3, [r7, #116]	; 0x74

               stMsgUsbTx.nTxData[0] = MSG_TX_SET_REPORTING;
 8010d36:	2372      	movs	r3, #114	; 0x72
 8010d38:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
               stMsgUsbTx.nTxData[1] = (nReportingOn & 0x01);
 8010d3c:	4b99      	ldr	r3, [pc, #612]	; (8010fa4 <PdmMainTask+0xb2c>)
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	f003 0301 	and.w	r3, r3, #1
 8010d44:	b2db      	uxtb	r3, r3
 8010d46:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
               stMsgUsbTx.nTxData[2] = (uint8_t)(nReportingDelay / 100);
 8010d4a:	4b97      	ldr	r3, [pc, #604]	; (8010fa8 <PdmMainTask+0xb30>)
 8010d4c:	881b      	ldrh	r3, [r3, #0]
 8010d4e:	4a97      	ldr	r2, [pc, #604]	; (8010fac <PdmMainTask+0xb34>)
 8010d50:	fba2 2303 	umull	r2, r3, r2, r3
 8010d54:	095b      	lsrs	r3, r3, #5
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
               stMsgUsbTx.nTxData[3] = 0;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
               stMsgUsbTx.nTxData[4] = 0;
 8010d64:	2300      	movs	r3, #0
 8010d66:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgUsbTx.nTxData[5] = 0;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
               stMsgUsbTx.nTxData[6] = 0;
 8010d70:	2300      	movs	r3, #0
 8010d72:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
               stMsgUsbTx.nTxData[7] = 0;
 8010d76:	2300      	movs	r3, #0
 8010d78:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8010d7c:	4b8c      	ldr	r3, [pc, #560]	; (8010fb0 <PdmMainTask+0xb38>)
 8010d7e:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8010d82:	3314      	adds	r3, #20
 8010d84:	667b      	str	r3, [r7, #100]	; 0x64

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8010d86:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010d8a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8010d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d92:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8010d96:	4b87      	ldr	r3, [pc, #540]	; (8010fb4 <PdmMainTask+0xb3c>)
 8010d98:	6818      	ldr	r0, [r3, #0]
 8010d9a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8010d9e:	2300      	movs	r3, #0
 8010da0:	2200      	movs	r2, #0
 8010da2:	f7fc fc25 	bl	800d5f0 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8010da6:	4b84      	ldr	r3, [pc, #528]	; (8010fb8 <PdmMainTask+0xb40>)
 8010da8:	6818      	ldr	r0, [r3, #0]
 8010daa:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8010dae:	2300      	movs	r3, #0
 8010db0:	2200      	movs	r2, #0
 8010db2:	f7fc fc1d 	bl	800d5f0 <osMessageQueuePut>
             }
           break;
 8010db6:	e0d2      	b.n	8010f5e <PdmMainTask+0xae6>

           //Set Time
           // 'T'
           case MSG_RX_SET_TIME:
             if(stMsgRx.nRxLen == 7){
 8010db8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010dbc:	2b07      	cmp	r3, #7
 8010dbe:	d121      	bne.n	8010e04 <PdmMainTask+0x98c>
               stTime.Hours = stMsgRx.nRxData[1];
 8010dc0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8010dc4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
               stTime.Minutes = stMsgRx.nRxData[2];
 8010dc8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8010dcc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
               stTime.Seconds = stMsgRx.nRxData[3];
 8010dd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010dd4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
               stTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	65fb      	str	r3, [r7, #92]	; 0x5c
               stTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	663b      	str	r3, [r7, #96]	; 0x60

               stDate.Year = stMsgRx.nRxData[4];
 8010de0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010de4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
               stDate.Month = stMsgRx.nRxData[5];
 8010de8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8010dec:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
               stDate.Date = stMsgRx.nRxData[6];
 8010df0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010df4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
               stDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8010df8:	2301      	movs	r3, #1
 8010dfa:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

               //HAL_RTC_SetTime(hrtc, &stTime, RTC_FORMAT_BCD);
               //HAL_RTC_SetDate(hrtc, &stDate, RTC_FORMAT_BCD);
               //TODO: Use flag to Main task
               nSend = 1;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
             }

             if((stMsgRx.nRxLen == 1) || nSend){
 8010e04:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	d004      	beq.n	8010e16 <PdmMainTask+0x99e>
 8010e0c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	f000 80a6 	beq.w	8010f62 <PdmMainTask+0xaea>
                 //HAL_RTC_GetTime(hrtc, &stTime, RTC_FORMAT_BCD);
                 //HAL_RTC_GetDate(hrtc, &stDate, RTC_FORMAT_BCD);
                 //TODO: Use flag to Main task

                 stMsgUsbTx.nTxLen = 7;
 8010e16:	2307      	movs	r3, #7
 8010e18:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
                 stMsgCanTx.stTxHeader.DLC = 7;
 8010e1c:	2307      	movs	r3, #7
 8010e1e:	677b      	str	r3, [r7, #116]	; 0x74

                 stMsgUsbTx.nTxData[0] = MSG_TX_SET_TIME;
 8010e20:	2374      	movs	r3, #116	; 0x74
 8010e22:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                 stMsgUsbTx.nTxData[1] = stTime.Hours;
 8010e26:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010e2a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                 stMsgUsbTx.nTxData[2] = stTime.Minutes;
 8010e2e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8010e32:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                 stMsgUsbTx.nTxData[3] = stTime.Seconds;
 8010e36:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8010e3a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                 stMsgUsbTx.nTxData[4] = stDate.Year;
 8010e3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010e42:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                 stMsgUsbTx.nTxData[5] = stDate.Month;
 8010e46:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8010e4a:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
                 stMsgUsbTx.nTxData[6] = stDate.Date;
 8010e4e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8010e52:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                 stMsgUsbTx.nTxData[7] = 0;
 8010e56:	2300      	movs	r3, #0
 8010e58:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

                 stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8010e5c:	4b54      	ldr	r3, [pc, #336]	; (8010fb0 <PdmMainTask+0xb38>)
 8010e5e:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8010e62:	3314      	adds	r3, #20
 8010e64:	667b      	str	r3, [r7, #100]	; 0x64

                 memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8010e66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010e6a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8010e6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e72:	e883 0003 	stmia.w	r3, {r0, r1}

                 osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8010e76:	4b4f      	ldr	r3, [pc, #316]	; (8010fb4 <PdmMainTask+0xb3c>)
 8010e78:	6818      	ldr	r0, [r3, #0]
 8010e7a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8010e7e:	2300      	movs	r3, #0
 8010e80:	2200      	movs	r2, #0
 8010e82:	f7fc fbb5 	bl	800d5f0 <osMessageQueuePut>
                 osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8010e86:	4b4c      	ldr	r3, [pc, #304]	; (8010fb8 <PdmMainTask+0xb40>)
 8010e88:	6818      	ldr	r0, [r3, #0]
 8010e8a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8010e8e:	2300      	movs	r3, #0
 8010e90:	2200      	movs	r2, #0
 8010e92:	f7fc fbad 	bl	800d5f0 <osMessageQueuePut>
             }


             break;
 8010e96:	e064      	b.n	8010f62 <PdmMainTask+0xaea>

           //Get Temperature
           // 'F'
           case MSG_RX_GET_TEMP:
             if((stMsgRx.nRxLen == 1) || nSend){
 8010e98:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010e9c:	2b01      	cmp	r3, #1
 8010e9e:	d003      	beq.n	8010ea8 <PdmMainTask+0xa30>
 8010ea0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d05e      	beq.n	8010f66 <PdmMainTask+0xaee>
                  stMsgUsbTx.nTxLen = 7;
 8010ea8:	2307      	movs	r3, #7
 8010eaa:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
                  stMsgCanTx.stTxHeader.DLC = 7;
 8010eae:	2307      	movs	r3, #7
 8010eb0:	677b      	str	r3, [r7, #116]	; 0x74

                  stMsgUsbTx.nTxData[0] = MSG_TX_GET_TEMP;
 8010eb2:	2366      	movs	r3, #102	; 0x66
 8010eb4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                  stMsgUsbTx.nTxData[1] = nBoardTempC >> 8;
 8010eb8:	4b40      	ldr	r3, [pc, #256]	; (8010fbc <PdmMainTask+0xb44>)
 8010eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ebe:	121b      	asrs	r3, r3, #8
 8010ec0:	b21b      	sxth	r3, r3
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                  stMsgUsbTx.nTxData[2] = nBoardTempC;
 8010ec8:	4b3c      	ldr	r3, [pc, #240]	; (8010fbc <PdmMainTask+0xb44>)
 8010eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ece:	b2db      	uxtb	r3, r3
 8010ed0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                  stMsgUsbTx.nTxData[3] = nStmTemp >> 8;
 8010ed4:	4b3a      	ldr	r3, [pc, #232]	; (8010fc0 <PdmMainTask+0xb48>)
 8010ed6:	881b      	ldrh	r3, [r3, #0]
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	0a1b      	lsrs	r3, r3, #8
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	b2db      	uxtb	r3, r3
 8010ee0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                  stMsgUsbTx.nTxData[4] = nStmTemp;
 8010ee4:	4b36      	ldr	r3, [pc, #216]	; (8010fc0 <PdmMainTask+0xb48>)
 8010ee6:	881b      	ldrh	r3, [r3, #0]
 8010ee8:	b29b      	uxth	r3, r3
 8010eea:	b2db      	uxtb	r3, r3
 8010eec:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                  stMsgUsbTx.nTxData[5] = 0;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
                  stMsgUsbTx.nTxData[6] = 0;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                  stMsgUsbTx.nTxData[7] = 0;
 8010efc:	2300      	movs	r3, #0
 8010efe:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

                  stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8010f02:	4b2b      	ldr	r3, [pc, #172]	; (8010fb0 <PdmMainTask+0xb38>)
 8010f04:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8010f08:	3314      	adds	r3, #20
 8010f0a:	667b      	str	r3, [r7, #100]	; 0x64

                  memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8010f0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010f10:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8010f14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f18:	e883 0003 	stmia.w	r3, {r0, r1}

                  osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8010f1c:	4b25      	ldr	r3, [pc, #148]	; (8010fb4 <PdmMainTask+0xb3c>)
 8010f1e:	6818      	ldr	r0, [r3, #0]
 8010f20:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8010f24:	2300      	movs	r3, #0
 8010f26:	2200      	movs	r2, #0
 8010f28:	f7fc fb62 	bl	800d5f0 <osMessageQueuePut>
                  osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8010f2c:	4b22      	ldr	r3, [pc, #136]	; (8010fb8 <PdmMainTask+0xb40>)
 8010f2e:	6818      	ldr	r0, [r3, #0]
 8010f30:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8010f34:	2300      	movs	r3, #0
 8010f36:	2200      	movs	r2, #0
 8010f38:	f7fc fb5a 	bl	800d5f0 <osMessageQueuePut>
             }
             break;
 8010f3c:	e013      	b.n	8010f66 <PdmMainTask+0xaee>

           //All other message types
           default:
             PdmConfig_Set(&stPdmConfig, &stMsgRx, &qMsgQueueUsbTx, &qMsgQueueCanTx);
 8010f3e:	f107 0110 	add.w	r1, r7, #16
 8010f42:	4b1d      	ldr	r3, [pc, #116]	; (8010fb8 <PdmMainTask+0xb40>)
 8010f44:	4a1b      	ldr	r2, [pc, #108]	; (8010fb4 <PdmMainTask+0xb3c>)
 8010f46:	481a      	ldr	r0, [pc, #104]	; (8010fb0 <PdmMainTask+0xb38>)
 8010f48:	f001 fb9a 	bl	8012680 <PdmConfig_Set>
             break;
 8010f4c:	e00c      	b.n	8010f68 <PdmMainTask+0xaf0>
        }
      }
 8010f4e:	bf00      	nop
 8010f50:	e00a      	b.n	8010f68 <PdmMainTask+0xaf0>
            break;
 8010f52:	bf00      	nop
 8010f54:	e008      	b.n	8010f68 <PdmMainTask+0xaf0>
           break;
 8010f56:	bf00      	nop
 8010f58:	e006      	b.n	8010f68 <PdmMainTask+0xaf0>
           break;
 8010f5a:	bf00      	nop
 8010f5c:	e004      	b.n	8010f68 <PdmMainTask+0xaf0>
           break;
 8010f5e:	bf00      	nop
 8010f60:	e002      	b.n	8010f68 <PdmMainTask+0xaf0>
             break;
 8010f62:	bf00      	nop
 8010f64:	e000      	b.n	8010f68 <PdmMainTask+0xaf0>
             break;
 8010f66:	bf00      	nop
    }

    MsgQueueUsbTx_t stMsgTx;
    if(osMessageQueueGet(qMsgQueueUsbTx, &stMsgTx, NULL, 0U) == osOK){
 8010f68:	4b12      	ldr	r3, [pc, #72]	; (8010fb4 <PdmMainTask+0xb3c>)
 8010f6a:	6818      	ldr	r0, [r3, #0]
 8010f6c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010f70:	2300      	movs	r3, #0
 8010f72:	2200      	movs	r2, #0
 8010f74:	f7fc fbb0 	bl	800d6d8 <osMessageQueueGet>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d10c      	bne.n	8010f98 <PdmMainTask+0xb20>
      if(bUsbConnected){
 8010f7e:	4b11      	ldr	r3, [pc, #68]	; (8010fc4 <PdmMainTask+0xb4c>)
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d008      	beq.n	8010f98 <PdmMainTask+0xb20>
        if(USBD_CDC_Transmit((uint8_t*)stMsgTx.nTxData, stMsgTx.nTxLen) != USBD_OK){
 8010f86:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010f8a:	b29a      	uxth	r2, r3
 8010f8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010f90:	4611      	mov	r1, r2
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7ff fa08 	bl	80103a8 <USBD_CDC_Transmit>

#ifdef MEAS_HEAP_USE
    __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

    osDelay(MAIN_TASK_DELAY);
 8010f98:	2005      	movs	r0, #5
 8010f9a:	f7fc fa75 	bl	800d488 <osDelay>
  {
 8010f9e:	f7ff baac 	b.w	80104fa <PdmMainTask+0x82>
 8010fa2:	bf00      	nop
 8010fa4:	20004bb4 	.word	0x20004bb4
 8010fa8:	20004bb6 	.word	0x20004bb6
 8010fac:	51eb851f 	.word	0x51eb851f
 8010fb0:	20002a44 	.word	0x20002a44
 8010fb4:	20003324 	.word	0x20003324
 8010fb8:	20003328 	.word	0x20003328
 8010fbc:	20003606 	.word	0x20003606
 8010fc0:	20003610 	.word	0x20003610
 8010fc4:	20003604 	.word	0x20003604

08010fc8 <InputLogic>:
    //Debug GPIO
    //EXTRA3_GPIO_Port->ODR ^= EXTRA3_Pin;
  }
}

void InputLogic(){
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b086      	sub	sp, #24
 8010fcc:	af00      	add	r7, sp, #0
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 8010fce:	2300      	movs	r3, #0
 8010fd0:	617b      	str	r3, [r7, #20]
 8010fd2:	e012      	b.n	8010ffa <InputLogic+0x32>
    EvaluateInput(&stPdmConfig.stInput[i], &nPdmInputs[i]);
 8010fd4:	697a      	ldr	r2, [r7, #20]
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	00db      	lsls	r3, r3, #3
 8010fda:	1a9b      	subs	r3, r3, r2
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	3308      	adds	r3, #8
 8010fe0:	4a4a      	ldr	r2, [pc, #296]	; (801110c <InputLogic+0x144>)
 8010fe2:	441a      	add	r2, r3
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	005b      	lsls	r3, r3, #1
 8010fe8:	4949      	ldr	r1, [pc, #292]	; (8011110 <InputLogic+0x148>)
 8010fea:	440b      	add	r3, r1
 8010fec:	4619      	mov	r1, r3
 8010fee:	4610      	mov	r0, r2
 8010ff0:	f004 f86e 	bl	80150d0 <EvaluateInput>
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	3301      	adds	r3, #1
 8010ff8:	617b      	str	r3, [r7, #20]
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	2b07      	cmp	r3, #7
 8010ffe:	dde9      	ble.n	8010fd4 <InputLogic+0xc>

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8011000:	2300      	movs	r3, #0
 8011002:	613b      	str	r3, [r7, #16]
 8011004:	e012      	b.n	801102c <InputLogic+0x64>
    EvaluateVirtInput(&stPdmConfig.stVirtualInput[i], &nVirtInputs[i]);
 8011006:	693a      	ldr	r2, [r7, #16]
 8011008:	4613      	mov	r3, r2
 801100a:	009b      	lsls	r3, r3, #2
 801100c:	4413      	add	r3, r2
 801100e:	00db      	lsls	r3, r3, #3
 8011010:	33e8      	adds	r3, #232	; 0xe8
 8011012:	4a3e      	ldr	r2, [pc, #248]	; (801110c <InputLogic+0x144>)
 8011014:	441a      	add	r2, r3
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	005b      	lsls	r3, r3, #1
 801101a:	493e      	ldr	r1, [pc, #248]	; (8011114 <InputLogic+0x14c>)
 801101c:	440b      	add	r3, r1
 801101e:	4619      	mov	r1, r3
 8011020:	4610      	mov	r0, r2
 8011022:	f004 f916 	bl	8015252 <EvaluateVirtInput>
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	3301      	adds	r3, #1
 801102a:	613b      	str	r3, [r7, #16]
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	2b13      	cmp	r3, #19
 8011030:	dde9      	ble.n	8011006 <InputLogic+0x3e>

  //Map profet state to integer for use as virtual input pointer
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8011032:	2300      	movs	r3, #0
 8011034:	60fb      	str	r3, [r7, #12]
 8011036:	e020      	b.n	801107a <InputLogic+0xb2>
    nOutputs[i] = pf[i].eState == ON;
 8011038:	4937      	ldr	r1, [pc, #220]	; (8011118 <InputLogic+0x150>)
 801103a:	68fa      	ldr	r2, [r7, #12]
 801103c:	4613      	mov	r3, r2
 801103e:	00db      	lsls	r3, r3, #3
 8011040:	1a9b      	subs	r3, r3, r2
 8011042:	00db      	lsls	r3, r3, #3
 8011044:	440b      	add	r3, r1
 8011046:	3301      	adds	r3, #1
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	b2db      	uxtb	r3, r3
 801104c:	2b01      	cmp	r3, #1
 801104e:	bf0c      	ite	eq
 8011050:	2301      	moveq	r3, #1
 8011052:	2300      	movne	r3, #0
 8011054:	b2db      	uxtb	r3, r3
 8011056:	b299      	uxth	r1, r3
 8011058:	4a30      	ldr	r2, [pc, #192]	; (801111c <InputLogic+0x154>)
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    EvaluateStarter(&stPdmConfig.stStarter, i, &nStarterDisable[i]);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	b2d9      	uxtb	r1, r3
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	005b      	lsls	r3, r3, #1
 8011068:	4a2d      	ldr	r2, [pc, #180]	; (8011120 <InputLogic+0x158>)
 801106a:	4413      	add	r3, r2
 801106c:	461a      	mov	r2, r3
 801106e:	482d      	ldr	r0, [pc, #180]	; (8011124 <InputLogic+0x15c>)
 8011070:	f004 f8c9 	bl	8015206 <EvaluateStarter>
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	3301      	adds	r3, #1
 8011078:	60fb      	str	r3, [r7, #12]
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2b0b      	cmp	r3, #11
 801107e:	dddb      	ble.n	8011038 <InputLogic+0x70>
  }

  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8011080:	2300      	movs	r3, #0
 8011082:	60bb      	str	r3, [r7, #8]
 8011084:	e023      	b.n	80110ce <InputLogic+0x106>
      if( (stPdmConfig.stFlasher[0].nOutput != i) &&
 8011086:	4b21      	ldr	r3, [pc, #132]	; (801110c <InputLogic+0x144>)
 8011088:	f893 3525 	ldrb.w	r3, [r3, #1317]	; 0x525
 801108c:	461a      	mov	r2, r3
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	4293      	cmp	r3, r2
 8011092:	d019      	beq.n	80110c8 <InputLogic+0x100>
          (stPdmConfig.stFlasher[1].nOutput != i) &&
 8011094:	4b1d      	ldr	r3, [pc, #116]	; (801110c <InputLogic+0x144>)
 8011096:	f893 353d 	ldrb.w	r3, [r3, #1341]	; 0x53d
 801109a:	461a      	mov	r2, r3
      if( (stPdmConfig.stFlasher[0].nOutput != i) &&
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	4293      	cmp	r3, r2
 80110a0:	d012      	beq.n	80110c8 <InputLogic+0x100>
          (stPdmConfig.stFlasher[2].nOutput != i) &&
 80110a2:	4b1a      	ldr	r3, [pc, #104]	; (801110c <InputLogic+0x144>)
 80110a4:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 80110a8:	461a      	mov	r2, r3
          (stPdmConfig.stFlasher[1].nOutput != i) &&
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	4293      	cmp	r3, r2
 80110ae:	d00b      	beq.n	80110c8 <InputLogic+0x100>
          (stPdmConfig.stFlasher[3].nOutput != i))
 80110b0:	4b16      	ldr	r3, [pc, #88]	; (801110c <InputLogic+0x144>)
 80110b2:	f893 356d 	ldrb.w	r3, [r3, #1389]	; 0x56d
 80110b6:	461a      	mov	r2, r3
          (stPdmConfig.stFlasher[2].nOutput != i) &&
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	4293      	cmp	r3, r2
 80110bc:	d004      	beq.n	80110c8 <InputLogic+0x100>
        nOutputFlasher[i] = 1;
 80110be:	4a1a      	ldr	r2, [pc, #104]	; (8011128 <InputLogic+0x160>)
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	2101      	movs	r1, #1
 80110c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	3301      	adds	r3, #1
 80110cc:	60bb      	str	r3, [r7, #8]
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	2b0b      	cmp	r3, #11
 80110d2:	ddd8      	ble.n	8011086 <InputLogic+0xbe>
  }
  for(int i=0; i<PDM_NUM_FLASHERS; i++){
 80110d4:	2300      	movs	r3, #0
 80110d6:	607b      	str	r3, [r7, #4]
 80110d8:	e00f      	b.n	80110fa <InputLogic+0x132>
    EvaluateFlasher(&stPdmConfig.stFlasher[i], nOutputFlasher);
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	4613      	mov	r3, r2
 80110de:	005b      	lsls	r3, r3, #1
 80110e0:	4413      	add	r3, r2
 80110e2:	00db      	lsls	r3, r3, #3
 80110e4:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80110e8:	4a08      	ldr	r2, [pc, #32]	; (801110c <InputLogic+0x144>)
 80110ea:	4413      	add	r3, r2
 80110ec:	490e      	ldr	r1, [pc, #56]	; (8011128 <InputLogic+0x160>)
 80110ee:	4618      	mov	r0, r3
 80110f0:	f001 fa68 	bl	80125c4 <EvaluateFlasher>
  for(int i=0; i<PDM_NUM_FLASHERS; i++){
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	3301      	adds	r3, #1
 80110f8:	607b      	str	r3, [r7, #4]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2b03      	cmp	r3, #3
 80110fe:	ddec      	ble.n	80110da <InputLogic+0x112>
  }
}
 8011100:	bf00      	nop
 8011102:	bf00      	nop
 8011104:	3718      	adds	r7, #24
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	20002a44 	.word	0x20002a44
 8011110:	20003824 	.word	0x20003824
 8011114:	20003870 	.word	0x20003870
 8011118:	20003330 	.word	0x20003330
 801111c:	20003898 	.word	0x20003898
 8011120:	200038b0 	.word	0x200038b0
 8011124:	20002fbc 	.word	0x20002fbc
 8011128:	200038c8 	.word	0x200038c8

0801112c <OutputLogic>:

void OutputLogic(){
 801112c:	b480      	push	{r7}
 801112e:	b083      	sub	sp, #12
 8011130:	af00      	add	r7, sp, #0
  //Copy output logic to profet requested state
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8011132:	2300      	movs	r3, #0
 8011134:	607b      	str	r3, [r7, #4]
 8011136:	e03f      	b.n	80111b8 <OutputLogic+0x8c>
  {
    if(eDevMode == DEVICE_AUTO){
 8011138:	4b24      	ldr	r3, [pc, #144]	; (80111cc <OutputLogic+0xa0>)
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d126      	bne.n	801118e <OutputLogic+0x62>
      pf[i].eReqState = (ProfetStateTypeDef)(*stPdmConfig.stOutput[i].pInput && nStarterDisable[i] && nOutputFlasher[i]);
 8011140:	4923      	ldr	r1, [pc, #140]	; (80111d0 <OutputLogic+0xa4>)
 8011142:	687a      	ldr	r2, [r7, #4]
 8011144:	4613      	mov	r3, r2
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	4413      	add	r3, r2
 801114a:	009b      	lsls	r3, r3, #2
 801114c:	440b      	add	r3, r1
 801114e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	881b      	ldrh	r3, [r3, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d00d      	beq.n	8011176 <OutputLogic+0x4a>
 801115a:	4a1e      	ldr	r2, [pc, #120]	; (80111d4 <OutputLogic+0xa8>)
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d007      	beq.n	8011176 <OutputLogic+0x4a>
 8011166:	4a1c      	ldr	r2, [pc, #112]	; (80111d8 <OutputLogic+0xac>)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d001      	beq.n	8011176 <OutputLogic+0x4a>
 8011172:	2301      	movs	r3, #1
 8011174:	e000      	b.n	8011178 <OutputLogic+0x4c>
 8011176:	2300      	movs	r3, #0
 8011178:	b2d8      	uxtb	r0, r3
 801117a:	4918      	ldr	r1, [pc, #96]	; (80111dc <OutputLogic+0xb0>)
 801117c:	687a      	ldr	r2, [r7, #4]
 801117e:	4613      	mov	r3, r2
 8011180:	00db      	lsls	r3, r3, #3
 8011182:	1a9b      	subs	r3, r3, r2
 8011184:	00db      	lsls	r3, r3, #3
 8011186:	440b      	add	r3, r1
 8011188:	3302      	adds	r3, #2
 801118a:	4602      	mov	r2, r0
 801118c:	701a      	strb	r2, [r3, #0]
    }
    if(eDevMode == DEVICE_MANUAL){
 801118e:	4b0f      	ldr	r3, [pc, #60]	; (80111cc <OutputLogic+0xa0>)
 8011190:	781b      	ldrb	r3, [r3, #0]
 8011192:	2b01      	cmp	r3, #1
 8011194:	d10d      	bne.n	80111b2 <OutputLogic+0x86>
      pf[i].eReqState = (ProfetStateTypeDef)nManualOutputs[i];
 8011196:	4a12      	ldr	r2, [pc, #72]	; (80111e0 <OutputLogic+0xb4>)
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	4413      	add	r3, r2
 801119c:	7818      	ldrb	r0, [r3, #0]
 801119e:	490f      	ldr	r1, [pc, #60]	; (80111dc <OutputLogic+0xb0>)
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	4613      	mov	r3, r2
 80111a4:	00db      	lsls	r3, r3, #3
 80111a6:	1a9b      	subs	r3, r3, r2
 80111a8:	00db      	lsls	r3, r3, #3
 80111aa:	440b      	add	r3, r1
 80111ac:	3302      	adds	r3, #2
 80111ae:	4602      	mov	r2, r0
 80111b0:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	3301      	adds	r3, #1
 80111b6:	607b      	str	r3, [r7, #4]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2b0b      	cmp	r3, #11
 80111bc:	ddbc      	ble.n	8011138 <OutputLogic+0xc>
    }
  }
}
 80111be:	bf00      	nop
 80111c0:	bf00      	nop
 80111c2:	370c      	adds	r7, #12
 80111c4:	46bd      	mov	sp, r7
 80111c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ca:	4770      	bx	lr
 80111cc:	2000332c 	.word	0x2000332c
 80111d0:	20002a44 	.word	0x20002a44
 80111d4:	200038b0 	.word	0x200038b0
 80111d8:	200038c8 	.word	0x200038c8
 80111dc:	20003330 	.word	0x20003330
 80111e0:	20004ba8 	.word	0x20004ba8

080111e4 <I2CTask>:

void I2CTask(osThreadId_t* thisThreadId, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2){
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b08a      	sub	sp, #40	; 0x28
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	60f8      	str	r0, [r7, #12]
 80111ec:	60b9      	str	r1, [r7, #8]
 80111ee:	607a      	str	r2, [r7, #4]
  //=====================================================================================================
  // MCP9808 Temperature Sensor Configuration
  //=====================================================================================================
  if(MCP9808_Init(hi2c1, MCP9808_ADDRESS) != MCP9808_OK)
 80111f0:	2118      	movs	r1, #24
 80111f2:	68b8      	ldr	r0, [r7, #8]
 80111f4:	f7ef fc96 	bl	8000b24 <MCP9808_Init>
 80111f8:	4603      	mov	r3, r0
 80111fa:	2b01      	cmp	r3, #1
 80111fc:	d002      	beq.n	8011204 <I2CTask+0x20>
    printf("MCP9808 Init FAIL\n");
 80111fe:	48a5      	ldr	r0, [pc, #660]	; (8011494 <I2CTask+0x2b0>)
 8011200:	f004 fd92 	bl	8015d28 <puts>

  MCP9808_SetResolution(hi2c1, MCP9808_ADDRESS, MCP9808_RESOLUTION_0_5DEG);
 8011204:	2200      	movs	r2, #0
 8011206:	2118      	movs	r1, #24
 8011208:	68b8      	ldr	r0, [r7, #8]
 801120a:	f7ef fcf3 	bl	8000bf4 <MCP9808_SetResolution>

  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_UPPER_TEMP, BOARD_TEMP_MAX) != MCP9808_OK)
 801120e:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8011498 <I2CTask+0x2b4>
 8011212:	2202      	movs	r2, #2
 8011214:	2118      	movs	r1, #24
 8011216:	68b8      	ldr	r0, [r7, #8]
 8011218:	f7ef fd00 	bl	8000c1c <MCP9808_SetLimit>
 801121c:	4603      	mov	r3, r0
 801121e:	2b01      	cmp	r3, #1
 8011220:	d002      	beq.n	8011228 <I2CTask+0x44>
    printf("MCP9808 Set Upper Limit Failed\n");
 8011222:	489e      	ldr	r0, [pc, #632]	; (801149c <I2CTask+0x2b8>)
 8011224:	f004 fd80 	bl	8015d28 <puts>
  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_LOWER_TEMP, BOARD_TEMP_MIN) != MCP9808_OK)
 8011228:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80114a0 <I2CTask+0x2bc>
 801122c:	2203      	movs	r2, #3
 801122e:	2118      	movs	r1, #24
 8011230:	68b8      	ldr	r0, [r7, #8]
 8011232:	f7ef fcf3 	bl	8000c1c <MCP9808_SetLimit>
 8011236:	4603      	mov	r3, r0
 8011238:	2b01      	cmp	r3, #1
 801123a:	d002      	beq.n	8011242 <I2CTask+0x5e>
    printf("MCP9808 Set Lower Limit Failed\n");
 801123c:	4899      	ldr	r0, [pc, #612]	; (80114a4 <I2CTask+0x2c0>)
 801123e:	f004 fd73 	bl	8015d28 <puts>
  if(MCP9808_SetLimit(hi2c1, MCP9808_ADDRESS, MCP9808_REG_CRIT_TEMP, BOARD_TEMP_CRIT) != MCP9808_OK)
 8011242:	ed9f 0a99 	vldr	s0, [pc, #612]	; 80114a8 <I2CTask+0x2c4>
 8011246:	2204      	movs	r2, #4
 8011248:	2118      	movs	r1, #24
 801124a:	68b8      	ldr	r0, [r7, #8]
 801124c:	f7ef fce6 	bl	8000c1c <MCP9808_SetLimit>
 8011250:	4603      	mov	r3, r0
 8011252:	2b01      	cmp	r3, #1
 8011254:	d002      	beq.n	801125c <I2CTask+0x78>
    printf("MCP9808 Set Critical Limit Failed\n");
 8011256:	4895      	ldr	r0, [pc, #596]	; (80114ac <I2CTask+0x2c8>)
 8011258:	f004 fd66 	bl	8015d28 <puts>
  //Setup configuration
  //Enable alert pin
  //Lock Tupper/Tlower window settings
  //Lock Tcrit settings
  //Set Tupper/Tlower hysteresis to +1.5 deg C
  MCP9808_Write16(hi2c1, MCP9808_ADDRESS, MCP9808_REG_CONFIG, (MCP9808_REG_CONFIG_ALERTCTRL | MCP9808_REG_CONFIG_WINLOCKED | MCP9808_REG_CONFIG_CRITLOCKED | MCP9808_REG_CONFIG_HYST_1_5));
 801125c:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 8011260:	2201      	movs	r2, #1
 8011262:	2118      	movs	r1, #24
 8011264:	68b8      	ldr	r0, [r7, #8]
 8011266:	f7ef fd91 	bl	8000d8c <MCP9808_Write16>

  //=====================================================================================================
  // PCAL9554B User Input Configuration
  //=====================================================================================================
  //Set configuration registers (all to input = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_CFG, 0xFF);
 801126a:	23ff      	movs	r3, #255	; 0xff
 801126c:	2203      	movs	r2, #3
 801126e:	2120      	movs	r1, #32
 8011270:	68b8      	ldr	r0, [r7, #8]
 8011272:	f7ef ff8b 	bl	800118c <PCAL9554B_WriteReg8>
  //Set latch register (no latch = 0)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_IN_LATCH, 0x00);
 8011276:	2300      	movs	r3, #0
 8011278:	2242      	movs	r2, #66	; 0x42
 801127a:	2120      	movs	r1, #32
 801127c:	68b8      	ldr	r0, [r7, #8]
 801127e:	f7ef ff85 	bl	800118c <PCAL9554B_WriteReg8>
  //Set pullup/pulldown enable register (all enable = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_PU_PD_ENABLE, 0xFF);
 8011282:	23ff      	movs	r3, #255	; 0xff
 8011284:	2243      	movs	r2, #67	; 0x43
 8011286:	2120      	movs	r1, #32
 8011288:	68b8      	ldr	r0, [r7, #8]
 801128a:	f7ef ff7f 	bl	800118c <PCAL9554B_WriteReg8>
  //Set pullup/pulldown selection register (all to pullup = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_PU_PD_SELECT, 0xFF);
 801128e:	23ff      	movs	r3, #255	; 0xff
 8011290:	2244      	movs	r2, #68	; 0x44
 8011292:	2120      	movs	r1, #32
 8011294:	68b8      	ldr	r0, [r7, #8]
 8011296:	f7ef ff79 	bl	800118c <PCAL9554B_WriteReg8>
  //Set interrupt mask (all to disable interrupt = 1)
  PCAL9554B_WriteReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_INT_MASK, 0xFF);
 801129a:	23ff      	movs	r3, #255	; 0xff
 801129c:	2245      	movs	r2, #69	; 0x45
 801129e:	2120      	movs	r1, #32
 80112a0:	68b8      	ldr	r0, [r7, #8]
 80112a2:	f7ef ff73 	bl	800118c <PCAL9554B_WriteReg8>


  //=====================================================================================================
  // PCA9539 Profet GPIO Configuration
  //=====================================================================================================
  HAL_GPIO_WritePin(PF_RESET_GPIO_Port, PF_RESET_Pin, GPIO_PIN_SET);
 80112a6:	2201      	movs	r2, #1
 80112a8:	2110      	movs	r1, #16
 80112aa:	4881      	ldr	r0, [pc, #516]	; (80114b0 <I2CTask+0x2cc>)
 80112ac:	f7f3 fe6c 	bl	8004f88 <HAL_GPIO_WritePin>
  //Set all outputs to push-pull
  PCA9539_WriteReg8(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT_CONFIG, 0x00);
 80112b0:	2300      	movs	r3, #0
 80112b2:	224f      	movs	r2, #79	; 0x4f
 80112b4:	2174      	movs	r1, #116	; 0x74
 80112b6:	68b8      	ldr	r0, [r7, #8]
 80112b8:	f7ef fdf8 	bl	8000eac <PCA9539_WriteReg8>
  //Set configuration registers (all to output)
  PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_CONFIG_PORT0, 0x0000);
 80112bc:	2300      	movs	r3, #0
 80112be:	2206      	movs	r2, #6
 80112c0:	2174      	movs	r1, #116	; 0x74
 80112c2:	68b8      	ldr	r0, [r7, #8]
 80112c4:	f7ef fe12 	bl	8000eec <PCA9539_WriteReg16>
  //Enable all pullup/pulldown
  PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_PU_PD_ENABLE_PORT0, 0x0000);
 80112c8:	2300      	movs	r3, #0
 80112ca:	2246      	movs	r2, #70	; 0x46
 80112cc:	2174      	movs	r1, #116	; 0x74
 80112ce:	68b8      	ldr	r0, [r7, #8]
 80112d0:	f7ef fe0c 	bl	8000eec <PCA9539_WriteReg16>
  //Set all outputs to pulldown
  PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_PU_PD_SELECT_PORT0, 0x0000);
 80112d4:	2300      	movs	r3, #0
 80112d6:	2248      	movs	r2, #72	; 0x48
 80112d8:	2174      	movs	r1, #116	; 0x74
 80112da:	68b8      	ldr	r0, [r7, #8]
 80112dc:	f7ef fe06 	bl	8000eec <PCA9539_WriteReg16>

  //=====================================================================================================
  // ADS1x15 Analog In Configuration
  //=====================================================================================================
  stAdcPfBank1.deviceType = ADS1015;
 80112e0:	4b74      	ldr	r3, [pc, #464]	; (80114b4 <I2CTask+0x2d0>)
 80112e2:	2200      	movs	r2, #0
 80112e4:	701a      	strb	r2, [r3, #0]
  stAdcPfBank1.bitShift = 0;
 80112e6:	4b73      	ldr	r3, [pc, #460]	; (80114b4 <I2CTask+0x2d0>)
 80112e8:	2200      	movs	r2, #0
 80112ea:	715a      	strb	r2, [r3, #5]
  stAdcPfBank1.gain = GAIN_ONE;
 80112ec:	4b71      	ldr	r3, [pc, #452]	; (80114b4 <I2CTask+0x2d0>)
 80112ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80112f2:	805a      	strh	r2, [r3, #2]
  stAdcPfBank1.dataRate = ADS1015_DATARATE_3300SPS;
 80112f4:	4b6f      	ldr	r3, [pc, #444]	; (80114b4 <I2CTask+0x2d0>)
 80112f6:	22c0      	movs	r2, #192	; 0xc0
 80112f8:	711a      	strb	r2, [r3, #4]

  //=====================================================================================================
  // PCA9539 Profet GPIO Configuration
  //=====================================================================================================
  //Set all outputs to push-pull
  PCA9539_WriteReg8(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT_CONFIG, 0x00);
 80112fa:	2300      	movs	r3, #0
 80112fc:	224f      	movs	r2, #79	; 0x4f
 80112fe:	2174      	movs	r1, #116	; 0x74
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f7ef fdd3 	bl	8000eac <PCA9539_WriteReg8>
  //Set configuration registers (all to output)
  PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_CONFIG_PORT0, 0x0000);
 8011306:	2300      	movs	r3, #0
 8011308:	2206      	movs	r2, #6
 801130a:	2174      	movs	r1, #116	; 0x74
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f7ef fded 	bl	8000eec <PCA9539_WriteReg16>
  //Enable all pullup/pulldown
  PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_PU_PD_ENABLE_PORT0, 0x0000);
 8011312:	2300      	movs	r3, #0
 8011314:	2246      	movs	r2, #70	; 0x46
 8011316:	2174      	movs	r1, #116	; 0x74
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f7ef fde7 	bl	8000eec <PCA9539_WriteReg16>
  //Set all outputs to pulldown
  PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_PU_PD_SELECT_PORT0, 0x0000);
 801131e:	2300      	movs	r3, #0
 8011320:	2248      	movs	r2, #72	; 0x48
 8011322:	2174      	movs	r1, #116	; 0x74
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f7ef fde1 	bl	8000eec <PCA9539_WriteReg16>

  //=====================================================================================================
  // ADS1x15 Analog In Configuration
  //=====================================================================================================
  stAdcPfBank2.deviceType = ADS1015;
 801132a:	4b63      	ldr	r3, [pc, #396]	; (80114b8 <I2CTask+0x2d4>)
 801132c:	2200      	movs	r2, #0
 801132e:	701a      	strb	r2, [r3, #0]
  stAdcPfBank2.bitShift = 0;
 8011330:	4b61      	ldr	r3, [pc, #388]	; (80114b8 <I2CTask+0x2d4>)
 8011332:	2200      	movs	r2, #0
 8011334:	715a      	strb	r2, [r3, #5]
  stAdcPfBank2.gain = GAIN_ONE;
 8011336:	4b60      	ldr	r3, [pc, #384]	; (80114b8 <I2CTask+0x2d4>)
 8011338:	f44f 7200 	mov.w	r2, #512	; 0x200
 801133c:	805a      	strh	r2, [r3, #2]
  stAdcPfBank2.dataRate = ADS1015_DATARATE_3300SPS;
 801133e:	4b5e      	ldr	r3, [pc, #376]	; (80114b8 <I2CTask+0x2d4>)
 8011340:	22c0      	movs	r2, #192	; 0xc0
 8011342:	711a      	strb	r2, [r3, #4]

  //=====================================================================================================
  // PCA9635 LED Configuration
  //=====================================================================================================
  //Send configuration, set to blink/flasher
  PCA9635_Init(hi2c2, PCA9635_ADDRESS, PCA9635_BLINK);
 8011344:	2201      	movs	r2, #1
 8011346:	2130      	movs	r1, #48	; 0x30
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f7ef fdf5 	bl	8000f38 <PCA9635_Init>

  //Set flashing frequency
  PCA9635_SetGroupFreq(hi2c2, PCA9635_ADDRESS, PCA9635_FLASH_FREQ);
 801134e:	2202      	movs	r2, #2
 8011350:	2130      	movs	r1, #48	; 0x30
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f7ef fe5d 	bl	8001012 <PCA9635_SetGroupFreq>

  //Set PWM duty cycle for each channel (overriden by group PWM)
  for(int i=0; i<PDM_NUM_LEDS; i++){
 8011358:	2300      	movs	r3, #0
 801135a:	627b      	str	r3, [r7, #36]	; 0x24
 801135c:	e009      	b.n	8011372 <I2CTask+0x18e>
    PCA9635_SetPWM(hi2c2, PCA9635_ADDRESS, i, 255);
 801135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011360:	b2da      	uxtb	r2, r3
 8011362:	23ff      	movs	r3, #255	; 0xff
 8011364:	2130      	movs	r1, #48	; 0x30
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f7ef fe13 	bl	8000f92 <PCA9635_SetPWM>
  for(int i=0; i<PDM_NUM_LEDS; i++){
 801136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136e:	3301      	adds	r3, #1
 8011370:	627b      	str	r3, [r7, #36]	; 0x24
 8011372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011374:	2b0f      	cmp	r3, #15
 8011376:	ddf2      	ble.n	801135e <I2CTask+0x17a>
  }

  //Set flashing duty cycle
  PCA9635_SetGroupPWM(hi2c2, PCA9635_ADDRESS, PCA9635_FLASH_DUTY_CYCLE); //Have to set individual brightness levels first
 8011378:	2280      	movs	r2, #128	; 0x80
 801137a:	2130      	movs	r1, #48	; 0x30
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f7ef fe2d 	bl	8000fdc <PCA9635_SetGroupPWM>

  //Start LED test sequence
  nLEDTestSeqIndex = 1;
 8011382:	4b4e      	ldr	r3, [pc, #312]	; (80114bc <I2CTask+0x2d8>)
 8011384:	2201      	movs	r2, #1
 8011386:	701a      	strb	r2, [r3, #0]
  nLEDTestSeqLastTime = HAL_GetTick();
 8011388:	f7f1 fa84 	bl	8002894 <HAL_GetTick>
 801138c:	4603      	mov	r3, r0
 801138e:	4a4c      	ldr	r2, [pc, #304]	; (80114c0 <I2CTask+0x2dc>)
 8011390:	6013      	str	r3, [r2, #0]
  for(;;)
  {
   //=====================================================================================================
   // PCAL9554B User Input
   //=====================================================================================================
   nUserDigInputRaw = PCAL9554B_ReadReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_IN_PORT);
 8011392:	2200      	movs	r2, #0
 8011394:	2120      	movs	r1, #32
 8011396:	68b8      	ldr	r0, [r7, #8]
 8011398:	f7ef ff18 	bl	80011cc <PCAL9554B_ReadReg8>
 801139c:	4603      	mov	r3, r0
 801139e:	461a      	mov	r2, r3
 80113a0:	4b48      	ldr	r3, [pc, #288]	; (80114c4 <I2CTask+0x2e0>)
 80113a2:	701a      	strb	r2, [r3, #0]
   nUserDigInput[0] = !GET_BIT_AT(nUserDigInputRaw, 3);
 80113a4:	4b47      	ldr	r3, [pc, #284]	; (80114c4 <I2CTask+0x2e0>)
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	f003 0308 	and.w	r3, r3, #8
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	bf0c      	ite	eq
 80113b0:	2301      	moveq	r3, #1
 80113b2:	2300      	movne	r3, #0
 80113b4:	b2db      	uxtb	r3, r3
 80113b6:	461a      	mov	r2, r3
 80113b8:	4b43      	ldr	r3, [pc, #268]	; (80114c8 <I2CTask+0x2e4>)
 80113ba:	701a      	strb	r2, [r3, #0]
   nUserDigInput[1] = !GET_BIT_AT(nUserDigInputRaw, 2);
 80113bc:	4b41      	ldr	r3, [pc, #260]	; (80114c4 <I2CTask+0x2e0>)
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	f003 0304 	and.w	r3, r3, #4
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	bf0c      	ite	eq
 80113c8:	2301      	moveq	r3, #1
 80113ca:	2300      	movne	r3, #0
 80113cc:	b2db      	uxtb	r3, r3
 80113ce:	461a      	mov	r2, r3
 80113d0:	4b3d      	ldr	r3, [pc, #244]	; (80114c8 <I2CTask+0x2e4>)
 80113d2:	705a      	strb	r2, [r3, #1]
   nUserDigInput[2] = !GET_BIT_AT(nUserDigInputRaw, 1);
 80113d4:	4b3b      	ldr	r3, [pc, #236]	; (80114c4 <I2CTask+0x2e0>)
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	f003 0302 	and.w	r3, r3, #2
 80113dc:	2b00      	cmp	r3, #0
 80113de:	bf0c      	ite	eq
 80113e0:	2301      	moveq	r3, #1
 80113e2:	2300      	movne	r3, #0
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	461a      	mov	r2, r3
 80113e8:	4b37      	ldr	r3, [pc, #220]	; (80114c8 <I2CTask+0x2e4>)
 80113ea:	709a      	strb	r2, [r3, #2]
   nUserDigInput[3] = !GET_BIT_AT(nUserDigInputRaw, 0);
 80113ec:	4b35      	ldr	r3, [pc, #212]	; (80114c4 <I2CTask+0x2e0>)
 80113ee:	781b      	ldrb	r3, [r3, #0]
 80113f0:	f003 0301 	and.w	r3, r3, #1
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	bf0c      	ite	eq
 80113f8:	2301      	moveq	r3, #1
 80113fa:	2300      	movne	r3, #0
 80113fc:	b2db      	uxtb	r3, r3
 80113fe:	461a      	mov	r2, r3
 8011400:	4b31      	ldr	r3, [pc, #196]	; (80114c8 <I2CTask+0x2e4>)
 8011402:	70da      	strb	r2, [r3, #3]
   nUserDigInput[4] = !GET_BIT_AT(nUserDigInputRaw, 4);
 8011404:	4b2f      	ldr	r3, [pc, #188]	; (80114c4 <I2CTask+0x2e0>)
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	f003 0310 	and.w	r3, r3, #16
 801140c:	2b00      	cmp	r3, #0
 801140e:	bf0c      	ite	eq
 8011410:	2301      	moveq	r3, #1
 8011412:	2300      	movne	r3, #0
 8011414:	b2db      	uxtb	r3, r3
 8011416:	461a      	mov	r2, r3
 8011418:	4b2b      	ldr	r3, [pc, #172]	; (80114c8 <I2CTask+0x2e4>)
 801141a:	711a      	strb	r2, [r3, #4]
   nUserDigInput[5] = !GET_BIT_AT(nUserDigInputRaw, 5);
 801141c:	4b29      	ldr	r3, [pc, #164]	; (80114c4 <I2CTask+0x2e0>)
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	f003 0320 	and.w	r3, r3, #32
 8011424:	2b00      	cmp	r3, #0
 8011426:	bf0c      	ite	eq
 8011428:	2301      	moveq	r3, #1
 801142a:	2300      	movne	r3, #0
 801142c:	b2db      	uxtb	r3, r3
 801142e:	461a      	mov	r2, r3
 8011430:	4b25      	ldr	r3, [pc, #148]	; (80114c8 <I2CTask+0x2e4>)
 8011432:	715a      	strb	r2, [r3, #5]
   nUserDigInput[6] = !GET_BIT_AT(nUserDigInputRaw, 6);
 8011434:	4b23      	ldr	r3, [pc, #140]	; (80114c4 <I2CTask+0x2e0>)
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801143c:	2b00      	cmp	r3, #0
 801143e:	bf0c      	ite	eq
 8011440:	2301      	moveq	r3, #1
 8011442:	2300      	movne	r3, #0
 8011444:	b2db      	uxtb	r3, r3
 8011446:	461a      	mov	r2, r3
 8011448:	4b1f      	ldr	r3, [pc, #124]	; (80114c8 <I2CTask+0x2e4>)
 801144a:	719a      	strb	r2, [r3, #6]
   nUserDigInput[7] = !GET_BIT_AT(nUserDigInputRaw, 7);
 801144c:	4b1d      	ldr	r3, [pc, #116]	; (80114c4 <I2CTask+0x2e0>)
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	b25b      	sxtb	r3, r3
 8011452:	43db      	mvns	r3, r3
 8011454:	b2db      	uxtb	r3, r3
 8011456:	09db      	lsrs	r3, r3, #7
 8011458:	b2db      	uxtb	r3, r3
 801145a:	461a      	mov	r2, r3
 801145c:	4b1a      	ldr	r3, [pc, #104]	; (80114c8 <I2CTask+0x2e4>)
 801145e:	71da      	strb	r2, [r3, #7]
   //=====================================================================================================
   // Set Profet
   // DSEL to channel 1
   // Enable all DEN
   //=====================================================================================================
   CLEAR_BIT(pfGpioBank1, PF_BANK1_DSEL);
 8011460:	4b1a      	ldr	r3, [pc, #104]	; (80114cc <I2CTask+0x2e8>)
 8011462:	881b      	ldrh	r3, [r3, #0]
 8011464:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8011468:	b29a      	uxth	r2, r3
 801146a:	4b18      	ldr	r3, [pc, #96]	; (80114cc <I2CTask+0x2e8>)
 801146c:	801a      	strh	r2, [r3, #0]
   SET_BIT(pfGpioBank1, PF_BANK1_DEN);
 801146e:	4b17      	ldr	r3, [pc, #92]	; (80114cc <I2CTask+0x2e8>)
 8011470:	881b      	ldrh	r3, [r3, #0]
 8011472:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8011476:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 801147a:	b29a      	uxth	r2, r3
 801147c:	4b13      	ldr	r3, [pc, #76]	; (80114cc <I2CTask+0x2e8>)
 801147e:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 8011480:	4b12      	ldr	r3, [pc, #72]	; (80114cc <I2CTask+0x2e8>)
 8011482:	881b      	ldrh	r3, [r3, #0]
 8011484:	2202      	movs	r2, #2
 8011486:	2174      	movs	r1, #116	; 0x74
 8011488:	68b8      	ldr	r0, [r7, #8]
 801148a:	f7ef fd2f 	bl	8000eec <PCA9539_WriteReg16>

   //=====================================================================================================
   // ADS1x15 Analog Input
   //=====================================================================================================
   for(int i = 0; i < 4; i++){
 801148e:	2300      	movs	r3, #0
 8011490:	623b      	str	r3, [r7, #32]
 8011492:	e042      	b.n	801151a <I2CTask+0x336>
 8011494:	080166a4 	.word	0x080166a4
 8011498:	42480000 	.word	0x42480000
 801149c:	080166b8 	.word	0x080166b8
 80114a0:	00000000 	.word	0x00000000
 80114a4:	080166d8 	.word	0x080166d8
 80114a8:	42a00000 	.word	0x42a00000
 80114ac:	080166f8 	.word	0x080166f8
 80114b0:	48000400 	.word	0x48000400
 80114b4:	200035e8 	.word	0x200035e8
 80114b8:	200035f0 	.word	0x200035f0
 80114bc:	20003624 	.word	0x20003624
 80114c0:	2000362c 	.word	0x2000362c
 80114c4:	200035f8 	.word	0x200035f8
 80114c8:	200035fc 	.word	0x200035fc
 80114cc:	200035d2 	.word	0x200035d2
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, i);
 80114d0:	6a3b      	ldr	r3, [r7, #32]
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	4a92      	ldr	r2, [pc, #584]	; (8011720 <I2CTask+0x53c>)
 80114d6:	2148      	movs	r1, #72	; 0x48
 80114d8:	68b8      	ldr	r0, [r7, #8]
 80114da:	f7ef fa67 	bl	80009ac <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 80114de:	2201      	movs	r2, #1
 80114e0:	2104      	movs	r1, #4
 80114e2:	4890      	ldr	r0, [pc, #576]	; (8011724 <I2CTask+0x540>)
 80114e4:	f7f3 fd50 	bl	8004f88 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 80114e8:	2002      	movs	r0, #2
 80114ea:	f7fb ffcd 	bl	800d488 <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 80114ee:	2200      	movs	r2, #0
 80114f0:	2104      	movs	r1, #4
 80114f2:	488c      	ldr	r0, [pc, #560]	; (8011724 <I2CTask+0x540>)
 80114f4:	f7f3 fd48 	bl	8004f88 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, &nPfISBank1Raw[i]) != HAL_OK)
 80114f8:	6a3b      	ldr	r3, [r7, #32]
 80114fa:	005b      	lsls	r3, r3, #1
 80114fc:	4a8a      	ldr	r2, [pc, #552]	; (8011728 <I2CTask+0x544>)
 80114fe:	4413      	add	r3, r2
 8011500:	4a87      	ldr	r2, [pc, #540]	; (8011720 <I2CTask+0x53c>)
 8011502:	2148      	movs	r1, #72	; 0x48
 8011504:	68b8      	ldr	r0, [r7, #8]
 8011506:	f7ef facd 	bl	8000aa4 <ADS1x15_ReadADC>
 801150a:	4603      	mov	r3, r0
 801150c:	2b00      	cmp	r3, #0
 801150e:	d001      	beq.n	8011514 <I2CTask+0x330>
     {
       Error_Handler();
 8011510:	f7f0 ff28 	bl	8002364 <Error_Handler>
   for(int i = 0; i < 4; i++){
 8011514:	6a3b      	ldr	r3, [r7, #32]
 8011516:	3301      	adds	r3, #1
 8011518:	623b      	str	r3, [r7, #32]
 801151a:	6a3b      	ldr	r3, [r7, #32]
 801151c:	2b03      	cmp	r3, #3
 801151e:	ddd7      	ble.n	80114d0 <I2CTask+0x2ec>
     }
   }

   Profet_UpdateIS(&pf[0], nPfISBank1Raw[3]);
 8011520:	4b81      	ldr	r3, [pc, #516]	; (8011728 <I2CTask+0x544>)
 8011522:	88db      	ldrh	r3, [r3, #6]
 8011524:	4619      	mov	r1, r3
 8011526:	4881      	ldr	r0, [pc, #516]	; (801172c <I2CTask+0x548>)
 8011528:	f7f0 f8ca 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[1], nPfISBank1Raw[2]);
 801152c:	4b7e      	ldr	r3, [pc, #504]	; (8011728 <I2CTask+0x544>)
 801152e:	889b      	ldrh	r3, [r3, #4]
 8011530:	4619      	mov	r1, r3
 8011532:	487f      	ldr	r0, [pc, #508]	; (8011730 <I2CTask+0x54c>)
 8011534:	f7f0 f8c4 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[2], nPfISBank1Raw[1]);
 8011538:	4b7b      	ldr	r3, [pc, #492]	; (8011728 <I2CTask+0x544>)
 801153a:	885b      	ldrh	r3, [r3, #2]
 801153c:	4619      	mov	r1, r3
 801153e:	487d      	ldr	r0, [pc, #500]	; (8011734 <I2CTask+0x550>)
 8011540:	f7f0 f8be 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[4], nPfISBank1Raw[0]);
 8011544:	4b78      	ldr	r3, [pc, #480]	; (8011728 <I2CTask+0x544>)
 8011546:	881b      	ldrh	r3, [r3, #0]
 8011548:	4619      	mov	r1, r3
 801154a:	487b      	ldr	r0, [pc, #492]	; (8011738 <I2CTask+0x554>)
 801154c:	f7f0 f8b8 	bl	80016c0 <Profet_UpdateIS>

   //=====================================================================================================
   //Flip Profet DSEL to channel 2
   //=====================================================================================================
   SET_BIT(pfGpioBank1, PF_BANK1_DSEL);
 8011550:	4b7a      	ldr	r3, [pc, #488]	; (801173c <I2CTask+0x558>)
 8011552:	881b      	ldrh	r3, [r3, #0]
 8011554:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8011558:	b29a      	uxth	r2, r3
 801155a:	4b78      	ldr	r3, [pc, #480]	; (801173c <I2CTask+0x558>)
 801155c:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 801155e:	4b77      	ldr	r3, [pc, #476]	; (801173c <I2CTask+0x558>)
 8011560:	881b      	ldrh	r3, [r3, #0]
 8011562:	2202      	movs	r2, #2
 8011564:	2174      	movs	r1, #116	; 0x74
 8011566:	68b8      	ldr	r0, [r7, #8]
 8011568:	f7ef fcc0 	bl	8000eec <PCA9539_WriteReg16>

   for(int i = 0; i < 2; i++){
 801156c:	2300      	movs	r3, #0
 801156e:	61fb      	str	r3, [r7, #28]
 8011570:	e024      	b.n	80115bc <I2CTask+0x3d8>
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, i);
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	b2db      	uxtb	r3, r3
 8011576:	4a6a      	ldr	r2, [pc, #424]	; (8011720 <I2CTask+0x53c>)
 8011578:	2148      	movs	r1, #72	; 0x48
 801157a:	68b8      	ldr	r0, [r7, #8]
 801157c:	f7ef fa16 	bl	80009ac <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 8011580:	2201      	movs	r2, #1
 8011582:	2104      	movs	r1, #4
 8011584:	4867      	ldr	r0, [pc, #412]	; (8011724 <I2CTask+0x540>)
 8011586:	f7f3 fcff 	bl	8004f88 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 801158a:	2002      	movs	r0, #2
 801158c:	f7fb ff7c 	bl	800d488 <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 8011590:	2200      	movs	r2, #0
 8011592:	2104      	movs	r1, #4
 8011594:	4863      	ldr	r0, [pc, #396]	; (8011724 <I2CTask+0x540>)
 8011596:	f7f3 fcf7 	bl	8004f88 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c1, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, &nPfISBank1Raw[i]) != HAL_OK)
 801159a:	69fb      	ldr	r3, [r7, #28]
 801159c:	005b      	lsls	r3, r3, #1
 801159e:	4a62      	ldr	r2, [pc, #392]	; (8011728 <I2CTask+0x544>)
 80115a0:	4413      	add	r3, r2
 80115a2:	4a5f      	ldr	r2, [pc, #380]	; (8011720 <I2CTask+0x53c>)
 80115a4:	2148      	movs	r1, #72	; 0x48
 80115a6:	68b8      	ldr	r0, [r7, #8]
 80115a8:	f7ef fa7c 	bl	8000aa4 <ADS1x15_ReadADC>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d001      	beq.n	80115b6 <I2CTask+0x3d2>
     {
        Error_Handler();
 80115b2:	f7f0 fed7 	bl	8002364 <Error_Handler>
   for(int i = 0; i < 2; i++){
 80115b6:	69fb      	ldr	r3, [r7, #28]
 80115b8:	3301      	adds	r3, #1
 80115ba:	61fb      	str	r3, [r7, #28]
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	2b01      	cmp	r3, #1
 80115c0:	ddd7      	ble.n	8011572 <I2CTask+0x38e>
   }

   //=====================================================================================================
   // Scale to IS Values
   //=====================================================================================================
   Profet_UpdateIS(&pf[3], nPfISBank1Raw[1]);
 80115c2:	4b59      	ldr	r3, [pc, #356]	; (8011728 <I2CTask+0x544>)
 80115c4:	885b      	ldrh	r3, [r3, #2]
 80115c6:	4619      	mov	r1, r3
 80115c8:	485d      	ldr	r0, [pc, #372]	; (8011740 <I2CTask+0x55c>)
 80115ca:	f7f0 f879 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[5], nPfISBank1Raw[0]);
 80115ce:	4b56      	ldr	r3, [pc, #344]	; (8011728 <I2CTask+0x544>)
 80115d0:	881b      	ldrh	r3, [r3, #0]
 80115d2:	4619      	mov	r1, r3
 80115d4:	485b      	ldr	r0, [pc, #364]	; (8011744 <I2CTask+0x560>)
 80115d6:	f7f0 f873 	bl	80016c0 <Profet_UpdateIS>
   //=====================================================================================================
   // Profet I2C GPIO
   // PCA9555
   // PF1-6 Bank 1
   //=====================================================================================================
   InputLogic();
 80115da:	f7ff fcf5 	bl	8010fc8 <InputLogic>
   OutputLogic();
 80115de:	f7ff fda5 	bl	801112c <OutputLogic>
   PCA9539_WriteReg16(hi2c1, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 80115e2:	4b56      	ldr	r3, [pc, #344]	; (801173c <I2CTask+0x558>)
 80115e4:	881b      	ldrh	r3, [r3, #0]
 80115e6:	2202      	movs	r2, #2
 80115e8:	2174      	movs	r1, #116	; 0x74
 80115ea:	68b8      	ldr	r0, [r7, #8]
 80115ec:	f7ef fc7e 	bl	8000eec <PCA9539_WriteReg16>

   //=====================================================================================================
   // MCP9808 temperature sensor
   //=====================================================================================================
   nBoardTempC = MCP9808_ReadTempC_Int(hi2c1, MCP9808_ADDRESS);
 80115f0:	2118      	movs	r1, #24
 80115f2:	68b8      	ldr	r0, [r7, #8]
 80115f4:	f7ef fac2 	bl	8000b7c <MCP9808_ReadTempC_Int>
 80115f8:	4603      	mov	r3, r0
 80115fa:	461a      	mov	r2, r3
 80115fc:	4b52      	ldr	r3, [pc, #328]	; (8011748 <I2CTask+0x564>)
 80115fe:	801a      	strh	r2, [r3, #0]

   if(MCP9808_GetOvertemp()) printf("*******MCP9808 Overtemp Detected*******\n");
 8011600:	f7ef fc48 	bl	8000e94 <MCP9808_GetOvertemp>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d002      	beq.n	8011610 <I2CTask+0x42c>
 801160a:	4850      	ldr	r0, [pc, #320]	; (801174c <I2CTask+0x568>)
 801160c:	f004 fb8c 	bl	8015d28 <puts>
   if(MCP9808_GetCriticalTemp()) printf("*******MCP9808 CRITICAL Overtemp Detected*******\n");
 8011610:	f7ef fc34 	bl	8000e7c <MCP9808_GetCriticalTemp>
 8011614:	4603      	mov	r3, r0
 8011616:	2b00      	cmp	r3, #0
 8011618:	d002      	beq.n	8011620 <I2CTask+0x43c>
 801161a:	484d      	ldr	r0, [pc, #308]	; (8011750 <I2CTask+0x56c>)
 801161c:	f004 fb84 	bl	8015d28 <puts>
   //=====================================================================================================
   // Set Profet
   // DSEL to channel 1
   // Enable all DEN
   //=====================================================================================================
   CLEAR_BIT(pfGpioBank2, PF_BANK2_DSEL);
 8011620:	4b4c      	ldr	r3, [pc, #304]	; (8011754 <I2CTask+0x570>)
 8011622:	881b      	ldrh	r3, [r3, #0]
 8011624:	f423 7308 	bic.w	r3, r3, #544	; 0x220
 8011628:	b29a      	uxth	r2, r3
 801162a:	4b4a      	ldr	r3, [pc, #296]	; (8011754 <I2CTask+0x570>)
 801162c:	801a      	strh	r2, [r3, #0]
   SET_BIT(pfGpioBank2, PF_BANK2_DEN);
 801162e:	4b49      	ldr	r3, [pc, #292]	; (8011754 <I2CTask+0x570>)
 8011630:	881b      	ldrh	r3, [r3, #0]
 8011632:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
 8011636:	f043 0305 	orr.w	r3, r3, #5
 801163a:	b29a      	uxth	r2, r3
 801163c:	4b45      	ldr	r3, [pc, #276]	; (8011754 <I2CTask+0x570>)
 801163e:	801a      	strh	r2, [r3, #0]

   //=====================================================================================================
   // Set CAN Terminating Resistor
   // Output 16 of Bank 2
   //=====================================================================================================
   if(stPdmConfig.stDevConfig.nCanTerm == 1)
 8011640:	4b45      	ldr	r3, [pc, #276]	; (8011758 <I2CTask+0x574>)
 8011642:	789b      	ldrb	r3, [r3, #2]
 8011644:	2b01      	cmp	r3, #1
 8011646:	d109      	bne.n	801165c <I2CTask+0x478>
   {
     SET_BIT(pfGpioBank2, CAN_TERM);
 8011648:	4b42      	ldr	r3, [pc, #264]	; (8011754 <I2CTask+0x570>)
 801164a:	881b      	ldrh	r3, [r3, #0]
 801164c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011654:	b29a      	uxth	r2, r3
 8011656:	4b3f      	ldr	r3, [pc, #252]	; (8011754 <I2CTask+0x570>)
 8011658:	801a      	strh	r2, [r3, #0]
 801165a:	e006      	b.n	801166a <I2CTask+0x486>
   }
   else
   {
     CLEAR_BIT(pfGpioBank2, CAN_TERM);
 801165c:	4b3d      	ldr	r3, [pc, #244]	; (8011754 <I2CTask+0x570>)
 801165e:	881b      	ldrh	r3, [r3, #0]
 8011660:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011664:	b29a      	uxth	r2, r3
 8011666:	4b3b      	ldr	r3, [pc, #236]	; (8011754 <I2CTask+0x570>)
 8011668:	801a      	strh	r2, [r3, #0]
   }

   PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 801166a:	4b3a      	ldr	r3, [pc, #232]	; (8011754 <I2CTask+0x570>)
 801166c:	881b      	ldrh	r3, [r3, #0]
 801166e:	2202      	movs	r2, #2
 8011670:	2174      	movs	r1, #116	; 0x74
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f7ef fc3a 	bl	8000eec <PCA9539_WriteReg16>

   //=====================================================================================================
   // ADS1115 Analog Input
   //=====================================================================================================
   for(int i = 0; i < 4; i++){
 8011678:	2300      	movs	r3, #0
 801167a:	61bb      	str	r3, [r7, #24]
 801167c:	e024      	b.n	80116c8 <I2CTask+0x4e4>
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, i);
 801167e:	69bb      	ldr	r3, [r7, #24]
 8011680:	b2db      	uxtb	r3, r3
 8011682:	4a36      	ldr	r2, [pc, #216]	; (801175c <I2CTask+0x578>)
 8011684:	2148      	movs	r1, #72	; 0x48
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f7ef f990 	bl	80009ac <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 801168c:	2201      	movs	r2, #1
 801168e:	2104      	movs	r1, #4
 8011690:	4824      	ldr	r0, [pc, #144]	; (8011724 <I2CTask+0x540>)
 8011692:	f7f3 fc79 	bl	8004f88 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 8011696:	2002      	movs	r0, #2
 8011698:	f7fb fef6 	bl	800d488 <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 801169c:	2200      	movs	r2, #0
 801169e:	2104      	movs	r1, #4
 80116a0:	4820      	ldr	r0, [pc, #128]	; (8011724 <I2CTask+0x540>)
 80116a2:	f7f3 fc71 	bl	8004f88 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, &nPfISBank2Raw[i]) != HAL_OK)
 80116a6:	69bb      	ldr	r3, [r7, #24]
 80116a8:	005b      	lsls	r3, r3, #1
 80116aa:	4a2d      	ldr	r2, [pc, #180]	; (8011760 <I2CTask+0x57c>)
 80116ac:	4413      	add	r3, r2
 80116ae:	4a2b      	ldr	r2, [pc, #172]	; (801175c <I2CTask+0x578>)
 80116b0:	2148      	movs	r1, #72	; 0x48
 80116b2:	6878      	ldr	r0, [r7, #4]
 80116b4:	f7ef f9f6 	bl	8000aa4 <ADS1x15_ReadADC>
 80116b8:	4603      	mov	r3, r0
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d001      	beq.n	80116c2 <I2CTask+0x4de>
     {
       Error_Handler();
 80116be:	f7f0 fe51 	bl	8002364 <Error_Handler>
   for(int i = 0; i < 4; i++){
 80116c2:	69bb      	ldr	r3, [r7, #24]
 80116c4:	3301      	adds	r3, #1
 80116c6:	61bb      	str	r3, [r7, #24]
 80116c8:	69bb      	ldr	r3, [r7, #24]
 80116ca:	2b03      	cmp	r3, #3
 80116cc:	ddd7      	ble.n	801167e <I2CTask+0x49a>
     }
   }

   Profet_UpdateIS(&pf[6], nPfISBank2Raw[0]);
 80116ce:	4b24      	ldr	r3, [pc, #144]	; (8011760 <I2CTask+0x57c>)
 80116d0:	881b      	ldrh	r3, [r3, #0]
 80116d2:	4619      	mov	r1, r3
 80116d4:	4823      	ldr	r0, [pc, #140]	; (8011764 <I2CTask+0x580>)
 80116d6:	f7ef fff3 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[7], nPfISBank2Raw[1]);
 80116da:	4b21      	ldr	r3, [pc, #132]	; (8011760 <I2CTask+0x57c>)
 80116dc:	885b      	ldrh	r3, [r3, #2]
 80116de:	4619      	mov	r1, r3
 80116e0:	4821      	ldr	r0, [pc, #132]	; (8011768 <I2CTask+0x584>)
 80116e2:	f7ef ffed 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[9], nPfISBank2Raw[2]);
 80116e6:	4b1e      	ldr	r3, [pc, #120]	; (8011760 <I2CTask+0x57c>)
 80116e8:	889b      	ldrh	r3, [r3, #4]
 80116ea:	4619      	mov	r1, r3
 80116ec:	481f      	ldr	r0, [pc, #124]	; (801176c <I2CTask+0x588>)
 80116ee:	f7ef ffe7 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[11], nPfISBank2Raw[3]);
 80116f2:	4b1b      	ldr	r3, [pc, #108]	; (8011760 <I2CTask+0x57c>)
 80116f4:	88db      	ldrh	r3, [r3, #6]
 80116f6:	4619      	mov	r1, r3
 80116f8:	481d      	ldr	r0, [pc, #116]	; (8011770 <I2CTask+0x58c>)
 80116fa:	f7ef ffe1 	bl	80016c0 <Profet_UpdateIS>

   //=====================================================================================================
   //Flip Profet DSEL to channel 2
   //=====================================================================================================
   SET_BIT(pfGpioBank2, PF_BANK2_DSEL);
 80116fe:	4b15      	ldr	r3, [pc, #84]	; (8011754 <I2CTask+0x570>)
 8011700:	881b      	ldrh	r3, [r3, #0]
 8011702:	f443 7308 	orr.w	r3, r3, #544	; 0x220
 8011706:	b29a      	uxth	r2, r3
 8011708:	4b12      	ldr	r3, [pc, #72]	; (8011754 <I2CTask+0x570>)
 801170a:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 801170c:	4b11      	ldr	r3, [pc, #68]	; (8011754 <I2CTask+0x570>)
 801170e:	881b      	ldrh	r3, [r3, #0]
 8011710:	2202      	movs	r2, #2
 8011712:	2174      	movs	r1, #116	; 0x74
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f7ef fbe9 	bl	8000eec <PCA9539_WriteReg16>

   for(int i = 0; i < 2; i++){
 801171a:	2300      	movs	r3, #0
 801171c:	617b      	str	r3, [r7, #20]
 801171e:	e051      	b.n	80117c4 <I2CTask+0x5e0>
 8011720:	200035e8 	.word	0x200035e8
 8011724:	48000400 	.word	0x48000400
 8011728:	200035d8 	.word	0x200035d8
 801172c:	20003330 	.word	0x20003330
 8011730:	20003368 	.word	0x20003368
 8011734:	200033a0 	.word	0x200033a0
 8011738:	20003410 	.word	0x20003410
 801173c:	200035d2 	.word	0x200035d2
 8011740:	200033d8 	.word	0x200033d8
 8011744:	20003448 	.word	0x20003448
 8011748:	20003606 	.word	0x20003606
 801174c:	0801671c 	.word	0x0801671c
 8011750:	08016744 	.word	0x08016744
 8011754:	200035d4 	.word	0x200035d4
 8011758:	20002a44 	.word	0x20002a44
 801175c:	200035f0 	.word	0x200035f0
 8011760:	200035e0 	.word	0x200035e0
 8011764:	20003480 	.word	0x20003480
 8011768:	200034b8 	.word	0x200034b8
 801176c:	20003528 	.word	0x20003528
 8011770:	20003598 	.word	0x20003598
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, i+2);
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	b2db      	uxtb	r3, r3
 8011778:	3302      	adds	r3, #2
 801177a:	b2db      	uxtb	r3, r3
 801177c:	4a61      	ldr	r2, [pc, #388]	; (8011904 <I2CTask+0x720>)
 801177e:	2148      	movs	r1, #72	; 0x48
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f7ef f913 	bl	80009ac <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_SET);
 8011786:	2201      	movs	r2, #1
 8011788:	2104      	movs	r1, #4
 801178a:	485f      	ldr	r0, [pc, #380]	; (8011908 <I2CTask+0x724>)
 801178c:	f7f3 fbfc 	bl	8004f88 <HAL_GPIO_WritePin>
     osDelay(ADS1015_CONVERSIONDELAY);
 8011790:	2002      	movs	r0, #2
 8011792:	f7fb fe79 	bl	800d488 <osDelay>
     HAL_GPIO_WritePin(EXTRA2_GPIO_Port, EXTRA2_Pin, GPIO_PIN_RESET);
 8011796:	2200      	movs	r2, #0
 8011798:	2104      	movs	r1, #4
 801179a:	485b      	ldr	r0, [pc, #364]	; (8011908 <I2CTask+0x724>)
 801179c:	f7f3 fbf4 	bl	8004f88 <HAL_GPIO_WritePin>

     //Read channel value
     if(ADS1x15_ReadADC(hi2c2, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, &nPfISBank2Raw[i+2]) != HAL_OK)
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	3302      	adds	r3, #2
 80117a4:	005b      	lsls	r3, r3, #1
 80117a6:	4a59      	ldr	r2, [pc, #356]	; (801190c <I2CTask+0x728>)
 80117a8:	4413      	add	r3, r2
 80117aa:	4a56      	ldr	r2, [pc, #344]	; (8011904 <I2CTask+0x720>)
 80117ac:	2148      	movs	r1, #72	; 0x48
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f7ef f978 	bl	8000aa4 <ADS1x15_ReadADC>
 80117b4:	4603      	mov	r3, r0
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d001      	beq.n	80117be <I2CTask+0x5da>
     {
       Error_Handler();
 80117ba:	f7f0 fdd3 	bl	8002364 <Error_Handler>
   for(int i = 0; i < 2; i++){
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	3301      	adds	r3, #1
 80117c2:	617b      	str	r3, [r7, #20]
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	2b01      	cmp	r3, #1
 80117c8:	ddd4      	ble.n	8011774 <I2CTask+0x590>
   }

   //=====================================================================================================
   // Scale to IS Values
   //=====================================================================================================
   Profet_UpdateIS(&pf[8], nPfISBank2Raw[2]);
 80117ca:	4b50      	ldr	r3, [pc, #320]	; (801190c <I2CTask+0x728>)
 80117cc:	889b      	ldrh	r3, [r3, #4]
 80117ce:	4619      	mov	r1, r3
 80117d0:	484f      	ldr	r0, [pc, #316]	; (8011910 <I2CTask+0x72c>)
 80117d2:	f7ef ff75 	bl	80016c0 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[10], nPfISBank2Raw[3]);
 80117d6:	4b4d      	ldr	r3, [pc, #308]	; (801190c <I2CTask+0x728>)
 80117d8:	88db      	ldrh	r3, [r3, #6]
 80117da:	4619      	mov	r1, r3
 80117dc:	484d      	ldr	r0, [pc, #308]	; (8011914 <I2CTask+0x730>)
 80117de:	f7ef ff6f 	bl	80016c0 <Profet_UpdateIS>
   // Profet I2C GPIO
   // PCA9555
   // PF1-6 Bank 1
   // PF7-12 Bank 2
   //=====================================================================================================
   InputLogic();
 80117e2:	f7ff fbf1 	bl	8010fc8 <InputLogic>
   OutputLogic();
 80117e6:	f7ff fca1 	bl	801112c <OutputLogic>
   PCA9539_WriteReg16(hi2c2, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 80117ea:	4b4b      	ldr	r3, [pc, #300]	; (8011918 <I2CTask+0x734>)
 80117ec:	881b      	ldrh	r3, [r3, #0]
 80117ee:	2202      	movs	r2, #2
 80117f0:	2174      	movs	r1, #116	; 0x74
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f7ef fb7a 	bl	8000eec <PCA9539_WriteReg16>

   //=====================================================================================================
   // Status LEDs
   //=====================================================================================================
   if(nLEDTestSeqIndex > 0)
 80117f8:	4b48      	ldr	r3, [pc, #288]	; (801191c <I2CTask+0x738>)
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d02b      	beq.n	8011858 <I2CTask+0x674>
   {
     nLEDTestSeqValues = (0x00000001 << ((nLEDTestSeqIndex-1)*2));
 8011800:	4b46      	ldr	r3, [pc, #280]	; (801191c <I2CTask+0x738>)
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	3b01      	subs	r3, #1
 8011806:	005b      	lsls	r3, r3, #1
 8011808:	2201      	movs	r2, #1
 801180a:	fa02 f303 	lsl.w	r3, r2, r3
 801180e:	461a      	mov	r2, r3
 8011810:	4b43      	ldr	r3, [pc, #268]	; (8011920 <I2CTask+0x73c>)
 8011812:	601a      	str	r2, [r3, #0]

     PCA9635_SetAllNum(hi2c2, PCA9635_ADDRESS, nLEDTestSeqValues);
 8011814:	4b42      	ldr	r3, [pc, #264]	; (8011920 <I2CTask+0x73c>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	461a      	mov	r2, r3
 801181a:	2130      	movs	r1, #48	; 0x30
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f7ef fc13 	bl	8001048 <PCA9635_SetAllNum>

     if((HAL_GetTick() - nLEDTestSeqLastTime) > LED_TEST_SEQ_DELAY)
 8011822:	f7f1 f837 	bl	8002894 <HAL_GetTick>
 8011826:	4602      	mov	r2, r0
 8011828:	4b3e      	ldr	r3, [pc, #248]	; (8011924 <I2CTask+0x740>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	2b32      	cmp	r3, #50	; 0x32
 8011830:	d90a      	bls.n	8011848 <I2CTask+0x664>
     {
       nLEDTestSeqLastTime = HAL_GetTick();
 8011832:	f7f1 f82f 	bl	8002894 <HAL_GetTick>
 8011836:	4603      	mov	r3, r0
 8011838:	4a3a      	ldr	r2, [pc, #232]	; (8011924 <I2CTask+0x740>)
 801183a:	6013      	str	r3, [r2, #0]
       nLEDTestSeqIndex++;
 801183c:	4b37      	ldr	r3, [pc, #220]	; (801191c <I2CTask+0x738>)
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	3301      	adds	r3, #1
 8011842:	b2da      	uxtb	r2, r3
 8011844:	4b35      	ldr	r3, [pc, #212]	; (801191c <I2CTask+0x738>)
 8011846:	701a      	strb	r2, [r3, #0]
     }

     //Last step
     if(nLEDTestSeqIndex > 16)
 8011848:	4b34      	ldr	r3, [pc, #208]	; (801191c <I2CTask+0x738>)
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	2b10      	cmp	r3, #16
 801184e:	d950      	bls.n	80118f2 <I2CTask+0x70e>
       nLEDTestSeqIndex = 0;
 8011850:	4b32      	ldr	r3, [pc, #200]	; (801191c <I2CTask+0x738>)
 8011852:	2200      	movs	r2, #0
 8011854:	701a      	strb	r2, [r3, #0]
 8011856:	e04c      	b.n	80118f2 <I2CTask+0x70e>
   }
   else
   {
     for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8011858:	2300      	movs	r3, #0
 801185a:	613b      	str	r3, [r7, #16]
 801185c:	e00f      	b.n	801187e <I2CTask+0x69a>
       SetPfStatusLed(&eStatusLeds[i], &pf[i]);
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	4a31      	ldr	r2, [pc, #196]	; (8011928 <I2CTask+0x744>)
 8011862:	1898      	adds	r0, r3, r2
 8011864:	693a      	ldr	r2, [r7, #16]
 8011866:	4613      	mov	r3, r2
 8011868:	00db      	lsls	r3, r3, #3
 801186a:	1a9b      	subs	r3, r3, r2
 801186c:	00db      	lsls	r3, r3, #3
 801186e:	4a2f      	ldr	r2, [pc, #188]	; (801192c <I2CTask+0x748>)
 8011870:	4413      	add	r3, r2
 8011872:	4619      	mov	r1, r3
 8011874:	f000 fb24 	bl	8011ec0 <SetPfStatusLed>
     for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	3301      	adds	r3, #1
 801187c:	613b      	str	r3, [r7, #16]
 801187e:	693b      	ldr	r3, [r7, #16]
 8011880:	2b0b      	cmp	r3, #11
 8011882:	ddec      	ble.n	801185e <I2CTask+0x67a>
     }
     eStatusLeds[12] = (eDevMode == DEVICE_AUTO) + ((eDevMode == DEVICE_MANUAL) * LED_FLASH);              //State
 8011884:	4b2a      	ldr	r3, [pc, #168]	; (8011930 <I2CTask+0x74c>)
 8011886:	781b      	ldrb	r3, [r3, #0]
 8011888:	2b00      	cmp	r3, #0
 801188a:	bf0c      	ite	eq
 801188c:	2301      	moveq	r3, #1
 801188e:	2300      	movne	r3, #0
 8011890:	b2db      	uxtb	r3, r3
 8011892:	461a      	mov	r2, r3
 8011894:	4b26      	ldr	r3, [pc, #152]	; (8011930 <I2CTask+0x74c>)
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	2b01      	cmp	r3, #1
 801189a:	d101      	bne.n	80118a0 <I2CTask+0x6bc>
 801189c:	2303      	movs	r3, #3
 801189e:	e000      	b.n	80118a2 <I2CTask+0x6be>
 80118a0:	2300      	movs	r3, #0
 80118a2:	4413      	add	r3, r2
 80118a4:	b2da      	uxtb	r2, r3
 80118a6:	4b20      	ldr	r3, [pc, #128]	; (8011928 <I2CTask+0x744>)
 80118a8:	731a      	strb	r2, [r3, #12]
     eStatusLeds[13] = bUsbConnected;   //USB
 80118aa:	4b22      	ldr	r3, [pc, #136]	; (8011934 <I2CTask+0x750>)
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	461a      	mov	r2, r3
 80118b0:	4b1d      	ldr	r3, [pc, #116]	; (8011928 <I2CTask+0x744>)
 80118b2:	735a      	strb	r2, [r3, #13]
     eStatusLeds[14] = (HAL_GetTick() - nLastCanUpdate) < 1000;              //CAN
 80118b4:	f7f0 ffee 	bl	8002894 <HAL_GetTick>
 80118b8:	4602      	mov	r2, r0
 80118ba:	4b1f      	ldr	r3, [pc, #124]	; (8011938 <I2CTask+0x754>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	1ad3      	subs	r3, r2, r3
 80118c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80118c4:	4293      	cmp	r3, r2
 80118c6:	bf94      	ite	ls
 80118c8:	2301      	movls	r3, #1
 80118ca:	2300      	movhi	r3, #0
 80118cc:	b2db      	uxtb	r3, r3
 80118ce:	461a      	mov	r2, r3
 80118d0:	4b15      	ldr	r3, [pc, #84]	; (8011928 <I2CTask+0x744>)
 80118d2:	739a      	strb	r2, [r3, #14]
     eStatusLeds[15] = (eDevState == DEVICE_ERROR);   //Fault
 80118d4:	4b19      	ldr	r3, [pc, #100]	; (801193c <I2CTask+0x758>)
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	2b03      	cmp	r3, #3
 80118da:	bf0c      	ite	eq
 80118dc:	2301      	moveq	r3, #1
 80118de:	2300      	movne	r3, #0
 80118e0:	b2db      	uxtb	r3, r3
 80118e2:	461a      	mov	r2, r3
 80118e4:	4b10      	ldr	r3, [pc, #64]	; (8011928 <I2CTask+0x744>)
 80118e6:	73da      	strb	r2, [r3, #15]
     PCA9635_SetAll(hi2c2, PCA9635_ADDRESS, eStatusLeds);
 80118e8:	4a0f      	ldr	r2, [pc, #60]	; (8011928 <I2CTask+0x744>)
 80118ea:	2130      	movs	r1, #48	; 0x30
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f7ef fbd2 	bl	8001096 <PCA9635_SetAll>
   }

   //Debug GPIO
   HAL_GPIO_TogglePin(EXTRA1_GPIO_Port, EXTRA1_Pin);
 80118f2:	2104      	movs	r1, #4
 80118f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80118f8:	f7f3 fb5e 	bl	8004fb8 <HAL_GPIO_TogglePin>

#ifdef MEAS_HEAP_USE
   __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

   osDelay(I2C_TASK_DELAY);
 80118fc:	2005      	movs	r0, #5
 80118fe:	f7fb fdc3 	bl	800d488 <osDelay>
   nUserDigInputRaw = PCAL9554B_ReadReg8(hi2c1, PCAL9554B_ADDRESS, PCAL9554B_CMD_IN_PORT);
 8011902:	e546      	b.n	8011392 <I2CTask+0x1ae>
 8011904:	200035f0 	.word	0x200035f0
 8011908:	48000400 	.word	0x48000400
 801190c:	200035e0 	.word	0x200035e0
 8011910:	200034f0 	.word	0x200034f0
 8011914:	20003560 	.word	0x20003560
 8011918:	200035d4 	.word	0x200035d4
 801191c:	20003624 	.word	0x20003624
 8011920:	20003628 	.word	0x20003628
 8011924:	2000362c 	.word	0x2000362c
 8011928:	20003614 	.word	0x20003614
 801192c:	20003330 	.word	0x20003330
 8011930:	2000332c 	.word	0x2000332c
 8011934:	20003604 	.word	0x20003604
 8011938:	20003678 	.word	0x20003678
 801193c:	2000332d 	.word	0x2000332d

08011940 <CanTxTask>:


}

void CanTxTask(osThreadId_t* thisThreadId, CAN_HandleTypeDef* hcan)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b096      	sub	sp, #88	; 0x58
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
 8011948:	6039      	str	r1, [r7, #0]
  //Configure the CAN Filter
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 801194a:	2300      	movs	r3, #0
 801194c:	643b      	str	r3, [r7, #64]	; 0x40
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 801194e:	2300      	movs	r3, #0
 8011950:	647b      	str	r3, [r7, #68]	; 0x44
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8011952:	2301      	movs	r3, #1
 8011954:	64bb      	str	r3, [r7, #72]	; 0x48
  sFilterConfig.FilterIdHigh = 0x0000;
 8011956:	2300      	movs	r3, #0
 8011958:	62fb      	str	r3, [r7, #44]	; 0x2c
  sFilterConfig.FilterIdLow = 0x0000;
 801195a:	2300      	movs	r3, #0
 801195c:	633b      	str	r3, [r7, #48]	; 0x30
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 801195e:	2300      	movs	r3, #0
 8011960:	637b      	str	r3, [r7, #52]	; 0x34
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8011962:	2300      	movs	r3, #0
 8011964:	63bb      	str	r3, [r7, #56]	; 0x38
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8011966:	2300      	movs	r3, #0
 8011968:	63fb      	str	r3, [r7, #60]	; 0x3c
  sFilterConfig.FilterActivation = ENABLE;
 801196a:	2301      	movs	r3, #1
 801196c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sFilterConfig.SlaveStartFilterBank = 14;
 801196e:	230e      	movs	r3, #14
 8011970:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8011972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011976:	4619      	mov	r1, r3
 8011978:	6838      	ldr	r0, [r7, #0]
 801197a:	f7f2 f8ba 	bl	8003af2 <HAL_CAN_ConfigFilter>
 801197e:	4603      	mov	r3, r0
 8011980:	2b00      	cmp	r3, #0
 8011982:	d001      	beq.n	8011988 <CanTxTask+0x48>
  {
    /* Filter configuration Error */
    Error_Handler();
 8011984:	f7f0 fcee 	bl	8002364 <Error_Handler>
  }

  //Start the CAN periphera
  if (HAL_CAN_Start(hcan) != HAL_OK)
 8011988:	6838      	ldr	r0, [r7, #0]
 801198a:	f7f2 f97c 	bl	8003c86 <HAL_CAN_Start>
 801198e:	4603      	mov	r3, r0
 8011990:	2b00      	cmp	r3, #0
 8011992:	d001      	beq.n	8011998 <CanTxTask+0x58>
  {
    /* Start Error */
    Error_Handler();
 8011994:	f7f0 fce6 	bl	8002364 <Error_Handler>
  }

  //Activate CAN RX notification
  if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8011998:	2102      	movs	r1, #2
 801199a:	6838      	ldr	r0, [r7, #0]
 801199c:	f7f2 fba4 	bl	80040e8 <HAL_CAN_ActivateNotification>
 80119a0:	4603      	mov	r3, r0
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d001      	beq.n	80119aa <CanTxTask+0x6a>
  {
    /* Notification Error */
    Error_Handler();
 80119a6:	f7f0 fcdd 	bl	8002364 <Error_Handler>
  }

  //Configure Transmission
  stCanTxHeader.StdId = 1620;
 80119aa:	4ba4      	ldr	r3, [pc, #656]	; (8011c3c <CanTxTask+0x2fc>)
 80119ac:	f240 6254 	movw	r2, #1620	; 0x654
 80119b0:	601a      	str	r2, [r3, #0]
  stCanTxHeader.ExtId = 0;
 80119b2:	4ba2      	ldr	r3, [pc, #648]	; (8011c3c <CanTxTask+0x2fc>)
 80119b4:	2200      	movs	r2, #0
 80119b6:	605a      	str	r2, [r3, #4]
  stCanTxHeader.RTR = CAN_RTR_DATA;
 80119b8:	4ba0      	ldr	r3, [pc, #640]	; (8011c3c <CanTxTask+0x2fc>)
 80119ba:	2200      	movs	r2, #0
 80119bc:	60da      	str	r2, [r3, #12]
  stCanTxHeader.IDE = CAN_ID_STD;
 80119be:	4b9f      	ldr	r3, [pc, #636]	; (8011c3c <CanTxTask+0x2fc>)
 80119c0:	2200      	movs	r2, #0
 80119c2:	609a      	str	r2, [r3, #8]
  stCanTxHeader.DLC = 8;
 80119c4:	4b9d      	ldr	r3, [pc, #628]	; (8011c3c <CanTxTask+0x2fc>)
 80119c6:	2208      	movs	r2, #8
 80119c8:	611a      	str	r2, [r3, #16]
  stCanTxHeader.TransmitGlobalTime = DISABLE;
 80119ca:	4b9c      	ldr	r3, [pc, #624]	; (8011c3c <CanTxTask+0x2fc>)
 80119cc:	2200      	movs	r2, #0
 80119ce:	751a      	strb	r2, [r3, #20]

  for(;;){
    if(stPdmConfig.stCanOutput.nEnabled &&
 80119d0:	4b9b      	ldr	r3, [pc, #620]	; (8011c40 <CanTxTask+0x300>)
 80119d2:	f893 38d4 	ldrb.w	r3, [r3, #2260]	; 0x8d4
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	f000 8253 	beq.w	8011e82 <CanTxTask+0x542>
        (stPdmConfig.stCanOutput.nUpdateTime > 0) &&
 80119dc:	4b98      	ldr	r3, [pc, #608]	; (8011c40 <CanTxTask+0x300>)
 80119de:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
    if(stPdmConfig.stCanOutput.nEnabled &&
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	f000 824d 	beq.w	8011e82 <CanTxTask+0x542>
        stPdmConfig.stCanOutput.nBaseId > 0 &&
 80119e8:	4b95      	ldr	r3, [pc, #596]	; (8011c40 <CanTxTask+0x300>)
 80119ea:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
        (stPdmConfig.stCanOutput.nUpdateTime > 0) &&
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f000 8247 	beq.w	8011e82 <CanTxTask+0x542>
        stPdmConfig.stCanOutput.nBaseId < 2048){
 80119f4:	4b92      	ldr	r3, [pc, #584]	; (8011c40 <CanTxTask+0x300>)
 80119f6:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
        stPdmConfig.stCanOutput.nBaseId > 0 &&
 80119fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80119fe:	f080 8240 	bcs.w	8011e82 <CanTxTask+0x542>

      MsgQueueCanTx_t stMsgTx;
      osStatus_t stStatus;
      //Keep sending queued messages until empty
      do{
        stStatus = osMessageQueueGet(qMsgQueueCanTx, &stMsgTx, NULL, 0U);
 8011a02:	4b90      	ldr	r3, [pc, #576]	; (8011c44 <CanTxTask+0x304>)
 8011a04:	6818      	ldr	r0, [r3, #0]
 8011a06:	f107 010c 	add.w	r1, r7, #12
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	f7fb fe63 	bl	800d6d8 <osMessageQueueGet>
 8011a12:	6578      	str	r0, [r7, #84]	; 0x54
        if(stStatus == osOK){
 8011a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d11d      	bne.n	8011a56 <CanTxTask+0x116>
          stMsgTx.stTxHeader.ExtId = 0;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	613b      	str	r3, [r7, #16]
          stMsgTx.stTxHeader.IDE = CAN_ID_STD;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	617b      	str	r3, [r7, #20]
          stMsgTx.stTxHeader.RTR = CAN_RTR_DATA;
 8011a22:	2300      	movs	r3, #0
 8011a24:	61bb      	str	r3, [r7, #24]
          stMsgTx.stTxHeader.TransmitGlobalTime = DISABLE;
 8011a26:	2300      	movs	r3, #0
 8011a28:	f887 3020 	strb.w	r3, [r7, #32]

          if(HAL_CAN_AddTxMessage(hcan, &stMsgTx.stTxHeader, stMsgTx.nTxData, &nCanTxMailbox) != HAL_OK){
 8011a2c:	f107 030c 	add.w	r3, r7, #12
 8011a30:	f103 0218 	add.w	r2, r3, #24
 8011a34:	f107 010c 	add.w	r1, r7, #12
 8011a38:	4b83      	ldr	r3, [pc, #524]	; (8011c48 <CanTxTask+0x308>)
 8011a3a:	6838      	ldr	r0, [r7, #0]
 8011a3c:	f7f2 f967 	bl	8003d0e <HAL_CAN_AddTxMessage>
 8011a40:	4603      	mov	r3, r0
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d007      	beq.n	8011a56 <CanTxTask+0x116>
            //Send failed - add back to queue
            osMessageQueuePut(qMsgQueueCanTx, &stMsgTx, 0U, 0U);
 8011a46:	4b7f      	ldr	r3, [pc, #508]	; (8011c44 <CanTxTask+0x304>)
 8011a48:	6818      	ldr	r0, [r3, #0]
 8011a4a:	f107 010c 	add.w	r1, r7, #12
 8011a4e:	2300      	movs	r3, #0
 8011a50:	2200      	movs	r2, #0
 8011a52:	f7fb fdcd 	bl	800d5f0 <osMessageQueuePut>
          }
        }
      }while(stStatus == osOK);
 8011a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d0d2      	beq.n	8011a02 <CanTxTask+0xc2>


      //=======================================================
      //Build Msg 0 (Digital inputs 1-8)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 0;
 8011a5c:	4b78      	ldr	r3, [pc, #480]	; (8011c40 <CanTxTask+0x300>)
 8011a5e:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8011a62:	461a      	mov	r2, r3
 8011a64:	4b75      	ldr	r3, [pc, #468]	; (8011c3c <CanTxTask+0x2fc>)
 8011a66:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8011a68:	4b74      	ldr	r3, [pc, #464]	; (8011c3c <CanTxTask+0x2fc>)
 8011a6a:	2208      	movs	r2, #8
 8011a6c:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = nUserDigInput[0];
 8011a6e:	4b77      	ldr	r3, [pc, #476]	; (8011c4c <CanTxTask+0x30c>)
 8011a70:	781a      	ldrb	r2, [r3, #0]
 8011a72:	4b77      	ldr	r3, [pc, #476]	; (8011c50 <CanTxTask+0x310>)
 8011a74:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = nUserDigInput[1];
 8011a76:	4b75      	ldr	r3, [pc, #468]	; (8011c4c <CanTxTask+0x30c>)
 8011a78:	785a      	ldrb	r2, [r3, #1]
 8011a7a:	4b75      	ldr	r3, [pc, #468]	; (8011c50 <CanTxTask+0x310>)
 8011a7c:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = nUserDigInput[2];
 8011a7e:	4b73      	ldr	r3, [pc, #460]	; (8011c4c <CanTxTask+0x30c>)
 8011a80:	789a      	ldrb	r2, [r3, #2]
 8011a82:	4b73      	ldr	r3, [pc, #460]	; (8011c50 <CanTxTask+0x310>)
 8011a84:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = nUserDigInput[3];
 8011a86:	4b71      	ldr	r3, [pc, #452]	; (8011c4c <CanTxTask+0x30c>)
 8011a88:	78da      	ldrb	r2, [r3, #3]
 8011a8a:	4b71      	ldr	r3, [pc, #452]	; (8011c50 <CanTxTask+0x310>)
 8011a8c:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = nUserDigInput[4];
 8011a8e:	4b6f      	ldr	r3, [pc, #444]	; (8011c4c <CanTxTask+0x30c>)
 8011a90:	791a      	ldrb	r2, [r3, #4]
 8011a92:	4b6f      	ldr	r3, [pc, #444]	; (8011c50 <CanTxTask+0x310>)
 8011a94:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = nUserDigInput[5];
 8011a96:	4b6d      	ldr	r3, [pc, #436]	; (8011c4c <CanTxTask+0x30c>)
 8011a98:	795a      	ldrb	r2, [r3, #5]
 8011a9a:	4b6d      	ldr	r3, [pc, #436]	; (8011c50 <CanTxTask+0x310>)
 8011a9c:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = nUserDigInput[6];
 8011a9e:	4b6b      	ldr	r3, [pc, #428]	; (8011c4c <CanTxTask+0x30c>)
 8011aa0:	799a      	ldrb	r2, [r3, #6]
 8011aa2:	4b6b      	ldr	r3, [pc, #428]	; (8011c50 <CanTxTask+0x310>)
 8011aa4:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = nUserDigInput[7];
 8011aa6:	4b69      	ldr	r3, [pc, #420]	; (8011c4c <CanTxTask+0x30c>)
 8011aa8:	79da      	ldrb	r2, [r3, #7]
 8011aaa:	4b69      	ldr	r3, [pc, #420]	; (8011c50 <CanTxTask+0x310>)
 8011aac:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8011aae:	4b66      	ldr	r3, [pc, #408]	; (8011c48 <CanTxTask+0x308>)
 8011ab0:	4a67      	ldr	r2, [pc, #412]	; (8011c50 <CanTxTask+0x310>)
 8011ab2:	4962      	ldr	r1, [pc, #392]	; (8011c3c <CanTxTask+0x2fc>)
 8011ab4:	6838      	ldr	r0, [r7, #0]
 8011ab6:	f7f2 f92a 	bl	8003d0e <HAL_CAN_AddTxMessage>
 8011aba:	4603      	mov	r3, r0
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d001      	beq.n	8011ac4 <CanTxTask+0x184>
        Error_Handler();
 8011ac0:	f7f0 fc50 	bl	8002364 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8011ac4:	2005      	movs	r0, #5
 8011ac6:	f7fb fcdf 	bl	800d488 <osDelay>

      //=======================================================
      //Build Msg 1 (Device status)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 1;
 8011aca:	4b5d      	ldr	r3, [pc, #372]	; (8011c40 <CanTxTask+0x300>)
 8011acc:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	4b59      	ldr	r3, [pc, #356]	; (8011c3c <CanTxTask+0x2fc>)
 8011ad6:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8011ad8:	4b58      	ldr	r3, [pc, #352]	; (8011c3c <CanTxTask+0x2fc>)
 8011ada:	2208      	movs	r2, #8
 8011adc:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = eDevState;
 8011ade:	4b5d      	ldr	r3, [pc, #372]	; (8011c54 <CanTxTask+0x314>)
 8011ae0:	781a      	ldrb	r2, [r3, #0]
 8011ae2:	4b5b      	ldr	r3, [pc, #364]	; (8011c50 <CanTxTask+0x310>)
 8011ae4:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = 0;
 8011ae6:	4b5a      	ldr	r3, [pc, #360]	; (8011c50 <CanTxTask+0x310>)
 8011ae8:	2200      	movs	r2, #0
 8011aea:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = nILTotal >> 8;
 8011aec:	4b5a      	ldr	r3, [pc, #360]	; (8011c58 <CanTxTask+0x318>)
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	0a1b      	lsrs	r3, r3, #8
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	b2da      	uxtb	r2, r3
 8011af8:	4b55      	ldr	r3, [pc, #340]	; (8011c50 <CanTxTask+0x310>)
 8011afa:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = nILTotal;
 8011afc:	4b56      	ldr	r3, [pc, #344]	; (8011c58 <CanTxTask+0x318>)
 8011afe:	881b      	ldrh	r3, [r3, #0]
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	b2da      	uxtb	r2, r3
 8011b04:	4b52      	ldr	r3, [pc, #328]	; (8011c50 <CanTxTask+0x310>)
 8011b06:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = nBattSense >> 8;
 8011b08:	4b54      	ldr	r3, [pc, #336]	; (8011c5c <CanTxTask+0x31c>)
 8011b0a:	881b      	ldrh	r3, [r3, #0]
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	0a1b      	lsrs	r3, r3, #8
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	b2da      	uxtb	r2, r3
 8011b14:	4b4e      	ldr	r3, [pc, #312]	; (8011c50 <CanTxTask+0x310>)
 8011b16:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = nBattSense;
 8011b18:	4b50      	ldr	r3, [pc, #320]	; (8011c5c <CanTxTask+0x31c>)
 8011b1a:	881b      	ldrh	r3, [r3, #0]
 8011b1c:	b29b      	uxth	r3, r3
 8011b1e:	b2da      	uxtb	r2, r3
 8011b20:	4b4b      	ldr	r3, [pc, #300]	; (8011c50 <CanTxTask+0x310>)
 8011b22:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = nBoardTempC >> 8;
 8011b24:	4b4e      	ldr	r3, [pc, #312]	; (8011c60 <CanTxTask+0x320>)
 8011b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b2a:	121b      	asrs	r3, r3, #8
 8011b2c:	b21b      	sxth	r3, r3
 8011b2e:	b2da      	uxtb	r2, r3
 8011b30:	4b47      	ldr	r3, [pc, #284]	; (8011c50 <CanTxTask+0x310>)
 8011b32:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = nBoardTempC;
 8011b34:	4b4a      	ldr	r3, [pc, #296]	; (8011c60 <CanTxTask+0x320>)
 8011b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b3a:	b2da      	uxtb	r2, r3
 8011b3c:	4b44      	ldr	r3, [pc, #272]	; (8011c50 <CanTxTask+0x310>)
 8011b3e:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8011b40:	4b41      	ldr	r3, [pc, #260]	; (8011c48 <CanTxTask+0x308>)
 8011b42:	4a43      	ldr	r2, [pc, #268]	; (8011c50 <CanTxTask+0x310>)
 8011b44:	493d      	ldr	r1, [pc, #244]	; (8011c3c <CanTxTask+0x2fc>)
 8011b46:	6838      	ldr	r0, [r7, #0]
 8011b48:	f7f2 f8e1 	bl	8003d0e <HAL_CAN_AddTxMessage>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d001      	beq.n	8011b56 <CanTxTask+0x216>
        Error_Handler();
 8011b52:	f7f0 fc07 	bl	8002364 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8011b56:	2005      	movs	r0, #5
 8011b58:	f7fb fc96 	bl	800d488 <osDelay>

      //=======================================================
      //Build Msg 2 (Out 1-4 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 2;
 8011b5c:	4b38      	ldr	r3, [pc, #224]	; (8011c40 <CanTxTask+0x300>)
 8011b5e:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8011b62:	3302      	adds	r3, #2
 8011b64:	461a      	mov	r2, r3
 8011b66:	4b35      	ldr	r3, [pc, #212]	; (8011c3c <CanTxTask+0x2fc>)
 8011b68:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8011b6a:	4b34      	ldr	r3, [pc, #208]	; (8011c3c <CanTxTask+0x2fc>)
 8011b6c:	2208      	movs	r2, #8
 8011b6e:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[0].nIL >> 8;
 8011b70:	4b3c      	ldr	r3, [pc, #240]	; (8011c64 <CanTxTask+0x324>)
 8011b72:	8c1b      	ldrh	r3, [r3, #32]
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	0a1b      	lsrs	r3, r3, #8
 8011b78:	b29b      	uxth	r3, r3
 8011b7a:	b2da      	uxtb	r2, r3
 8011b7c:	4b34      	ldr	r3, [pc, #208]	; (8011c50 <CanTxTask+0x310>)
 8011b7e:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[0].nIL;
 8011b80:	4b38      	ldr	r3, [pc, #224]	; (8011c64 <CanTxTask+0x324>)
 8011b82:	8c1b      	ldrh	r3, [r3, #32]
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	b2da      	uxtb	r2, r3
 8011b88:	4b31      	ldr	r3, [pc, #196]	; (8011c50 <CanTxTask+0x310>)
 8011b8a:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[1].nIL >> 8;
 8011b8c:	4b35      	ldr	r3, [pc, #212]	; (8011c64 <CanTxTask+0x324>)
 8011b8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	0a1b      	lsrs	r3, r3, #8
 8011b96:	b29b      	uxth	r3, r3
 8011b98:	b2da      	uxtb	r2, r3
 8011b9a:	4b2d      	ldr	r3, [pc, #180]	; (8011c50 <CanTxTask+0x310>)
 8011b9c:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[1].nIL;
 8011b9e:	4b31      	ldr	r3, [pc, #196]	; (8011c64 <CanTxTask+0x324>)
 8011ba0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	b2da      	uxtb	r2, r3
 8011ba8:	4b29      	ldr	r3, [pc, #164]	; (8011c50 <CanTxTask+0x310>)
 8011baa:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[2].nIL >> 8;
 8011bac:	4b2d      	ldr	r3, [pc, #180]	; (8011c64 <CanTxTask+0x324>)
 8011bae:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8011bb2:	b29b      	uxth	r3, r3
 8011bb4:	0a1b      	lsrs	r3, r3, #8
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	b2da      	uxtb	r2, r3
 8011bba:	4b25      	ldr	r3, [pc, #148]	; (8011c50 <CanTxTask+0x310>)
 8011bbc:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[2].nIL;
 8011bbe:	4b29      	ldr	r3, [pc, #164]	; (8011c64 <CanTxTask+0x324>)
 8011bc0:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	b2da      	uxtb	r2, r3
 8011bc8:	4b21      	ldr	r3, [pc, #132]	; (8011c50 <CanTxTask+0x310>)
 8011bca:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[3].nIL >> 8;
 8011bcc:	4b25      	ldr	r3, [pc, #148]	; (8011c64 <CanTxTask+0x324>)
 8011bce:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	0a1b      	lsrs	r3, r3, #8
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	b2da      	uxtb	r2, r3
 8011bda:	4b1d      	ldr	r3, [pc, #116]	; (8011c50 <CanTxTask+0x310>)
 8011bdc:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[3].nIL;
 8011bde:	4b21      	ldr	r3, [pc, #132]	; (8011c64 <CanTxTask+0x324>)
 8011be0:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	b2da      	uxtb	r2, r3
 8011be8:	4b19      	ldr	r3, [pc, #100]	; (8011c50 <CanTxTask+0x310>)
 8011bea:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8011bec:	4b16      	ldr	r3, [pc, #88]	; (8011c48 <CanTxTask+0x308>)
 8011bee:	4a18      	ldr	r2, [pc, #96]	; (8011c50 <CanTxTask+0x310>)
 8011bf0:	4912      	ldr	r1, [pc, #72]	; (8011c3c <CanTxTask+0x2fc>)
 8011bf2:	6838      	ldr	r0, [r7, #0]
 8011bf4:	f7f2 f88b 	bl	8003d0e <HAL_CAN_AddTxMessage>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d001      	beq.n	8011c02 <CanTxTask+0x2c2>
        Error_Handler();
 8011bfe:	f7f0 fbb1 	bl	8002364 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8011c02:	2005      	movs	r0, #5
 8011c04:	f7fb fc40 	bl	800d488 <osDelay>

      //=======================================================
      //Build Msg 3 (Out 5-8 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 3;
 8011c08:	4b0d      	ldr	r3, [pc, #52]	; (8011c40 <CanTxTask+0x300>)
 8011c0a:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8011c0e:	3303      	adds	r3, #3
 8011c10:	461a      	mov	r2, r3
 8011c12:	4b0a      	ldr	r3, [pc, #40]	; (8011c3c <CanTxTask+0x2fc>)
 8011c14:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8011c16:	4b09      	ldr	r3, [pc, #36]	; (8011c3c <CanTxTask+0x2fc>)
 8011c18:	2208      	movs	r2, #8
 8011c1a:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[4].nIL >> 8;
 8011c1c:	4b11      	ldr	r3, [pc, #68]	; (8011c64 <CanTxTask+0x324>)
 8011c1e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	0a1b      	lsrs	r3, r3, #8
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	b2da      	uxtb	r2, r3
 8011c2a:	4b09      	ldr	r3, [pc, #36]	; (8011c50 <CanTxTask+0x310>)
 8011c2c:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[4].nIL;
 8011c2e:	4b0d      	ldr	r3, [pc, #52]	; (8011c64 <CanTxTask+0x324>)
 8011c30:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8011c34:	b29b      	uxth	r3, r3
 8011c36:	b2da      	uxtb	r2, r3
 8011c38:	e016      	b.n	8011c68 <CanTxTask+0x328>
 8011c3a:	bf00      	nop
 8011c3c:	20003630 	.word	0x20003630
 8011c40:	20002a44 	.word	0x20002a44
 8011c44:	20003328 	.word	0x20003328
 8011c48:	20003674 	.word	0x20003674
 8011c4c:	200035fc 	.word	0x200035fc
 8011c50:	20003664 	.word	0x20003664
 8011c54:	2000332d 	.word	0x2000332d
 8011c58:	200035d0 	.word	0x200035d0
 8011c5c:	2000360e 	.word	0x2000360e
 8011c60:	20003606 	.word	0x20003606
 8011c64:	20003330 	.word	0x20003330
 8011c68:	4b8f      	ldr	r3, [pc, #572]	; (8011ea8 <CanTxTask+0x568>)
 8011c6a:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[5].nIL >> 8;
 8011c6c:	4b8f      	ldr	r3, [pc, #572]	; (8011eac <CanTxTask+0x56c>)
 8011c6e:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	0a1b      	lsrs	r3, r3, #8
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	b2da      	uxtb	r2, r3
 8011c7a:	4b8b      	ldr	r3, [pc, #556]	; (8011ea8 <CanTxTask+0x568>)
 8011c7c:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[5].nIL;
 8011c7e:	4b8b      	ldr	r3, [pc, #556]	; (8011eac <CanTxTask+0x56c>)
 8011c80:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	b2da      	uxtb	r2, r3
 8011c88:	4b87      	ldr	r3, [pc, #540]	; (8011ea8 <CanTxTask+0x568>)
 8011c8a:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[6].nIL >> 8;
 8011c8c:	4b87      	ldr	r3, [pc, #540]	; (8011eac <CanTxTask+0x56c>)
 8011c8e:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	0a1b      	lsrs	r3, r3, #8
 8011c96:	b29b      	uxth	r3, r3
 8011c98:	b2da      	uxtb	r2, r3
 8011c9a:	4b83      	ldr	r3, [pc, #524]	; (8011ea8 <CanTxTask+0x568>)
 8011c9c:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[6].nIL;
 8011c9e:	4b83      	ldr	r3, [pc, #524]	; (8011eac <CanTxTask+0x56c>)
 8011ca0:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	b2da      	uxtb	r2, r3
 8011ca8:	4b7f      	ldr	r3, [pc, #508]	; (8011ea8 <CanTxTask+0x568>)
 8011caa:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[7].nIL >> 8;
 8011cac:	4b7f      	ldr	r3, [pc, #508]	; (8011eac <CanTxTask+0x56c>)
 8011cae:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	0a1b      	lsrs	r3, r3, #8
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	b2da      	uxtb	r2, r3
 8011cba:	4b7b      	ldr	r3, [pc, #492]	; (8011ea8 <CanTxTask+0x568>)
 8011cbc:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[7].nIL;
 8011cbe:	4b7b      	ldr	r3, [pc, #492]	; (8011eac <CanTxTask+0x56c>)
 8011cc0:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8011cc4:	b29b      	uxth	r3, r3
 8011cc6:	b2da      	uxtb	r2, r3
 8011cc8:	4b77      	ldr	r3, [pc, #476]	; (8011ea8 <CanTxTask+0x568>)
 8011cca:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8011ccc:	4b78      	ldr	r3, [pc, #480]	; (8011eb0 <CanTxTask+0x570>)
 8011cce:	4a76      	ldr	r2, [pc, #472]	; (8011ea8 <CanTxTask+0x568>)
 8011cd0:	4978      	ldr	r1, [pc, #480]	; (8011eb4 <CanTxTask+0x574>)
 8011cd2:	6838      	ldr	r0, [r7, #0]
 8011cd4:	f7f2 f81b 	bl	8003d0e <HAL_CAN_AddTxMessage>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d001      	beq.n	8011ce2 <CanTxTask+0x3a2>
        Error_Handler();
 8011cde:	f7f0 fb41 	bl	8002364 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8011ce2:	2005      	movs	r0, #5
 8011ce4:	f7fb fbd0 	bl	800d488 <osDelay>

      //=======================================================
      //Build Msg 4 (Out 9-12 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 4;
 8011ce8:	4b73      	ldr	r3, [pc, #460]	; (8011eb8 <CanTxTask+0x578>)
 8011cea:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8011cee:	3304      	adds	r3, #4
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	4b70      	ldr	r3, [pc, #448]	; (8011eb4 <CanTxTask+0x574>)
 8011cf4:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8011cf6:	4b6f      	ldr	r3, [pc, #444]	; (8011eb4 <CanTxTask+0x574>)
 8011cf8:	2208      	movs	r2, #8
 8011cfa:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[8].nIL >> 8;
 8011cfc:	4b6b      	ldr	r3, [pc, #428]	; (8011eac <CanTxTask+0x56c>)
 8011cfe:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	0a1b      	lsrs	r3, r3, #8
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	b2da      	uxtb	r2, r3
 8011d0a:	4b67      	ldr	r3, [pc, #412]	; (8011ea8 <CanTxTask+0x568>)
 8011d0c:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[8].nIL;
 8011d0e:	4b67      	ldr	r3, [pc, #412]	; (8011eac <CanTxTask+0x56c>)
 8011d10:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	b2da      	uxtb	r2, r3
 8011d18:	4b63      	ldr	r3, [pc, #396]	; (8011ea8 <CanTxTask+0x568>)
 8011d1a:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[9].nIL >> 8;
 8011d1c:	4b63      	ldr	r3, [pc, #396]	; (8011eac <CanTxTask+0x56c>)
 8011d1e:	f8b3 3218 	ldrh.w	r3, [r3, #536]	; 0x218
 8011d22:	b29b      	uxth	r3, r3
 8011d24:	0a1b      	lsrs	r3, r3, #8
 8011d26:	b29b      	uxth	r3, r3
 8011d28:	b2da      	uxtb	r2, r3
 8011d2a:	4b5f      	ldr	r3, [pc, #380]	; (8011ea8 <CanTxTask+0x568>)
 8011d2c:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[9].nIL;
 8011d2e:	4b5f      	ldr	r3, [pc, #380]	; (8011eac <CanTxTask+0x56c>)
 8011d30:	f8b3 3218 	ldrh.w	r3, [r3, #536]	; 0x218
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	b2da      	uxtb	r2, r3
 8011d38:	4b5b      	ldr	r3, [pc, #364]	; (8011ea8 <CanTxTask+0x568>)
 8011d3a:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[10].nIL >> 8;
 8011d3c:	4b5b      	ldr	r3, [pc, #364]	; (8011eac <CanTxTask+0x56c>)
 8011d3e:	f8b3 3250 	ldrh.w	r3, [r3, #592]	; 0x250
 8011d42:	b29b      	uxth	r3, r3
 8011d44:	0a1b      	lsrs	r3, r3, #8
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	b2da      	uxtb	r2, r3
 8011d4a:	4b57      	ldr	r3, [pc, #348]	; (8011ea8 <CanTxTask+0x568>)
 8011d4c:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[10].nIL;
 8011d4e:	4b57      	ldr	r3, [pc, #348]	; (8011eac <CanTxTask+0x56c>)
 8011d50:	f8b3 3250 	ldrh.w	r3, [r3, #592]	; 0x250
 8011d54:	b29b      	uxth	r3, r3
 8011d56:	b2da      	uxtb	r2, r3
 8011d58:	4b53      	ldr	r3, [pc, #332]	; (8011ea8 <CanTxTask+0x568>)
 8011d5a:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[11].nIL >> 8;
 8011d5c:	4b53      	ldr	r3, [pc, #332]	; (8011eac <CanTxTask+0x56c>)
 8011d5e:	f8b3 3288 	ldrh.w	r3, [r3, #648]	; 0x288
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	0a1b      	lsrs	r3, r3, #8
 8011d66:	b29b      	uxth	r3, r3
 8011d68:	b2da      	uxtb	r2, r3
 8011d6a:	4b4f      	ldr	r3, [pc, #316]	; (8011ea8 <CanTxTask+0x568>)
 8011d6c:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[11].nIL;
 8011d6e:	4b4f      	ldr	r3, [pc, #316]	; (8011eac <CanTxTask+0x56c>)
 8011d70:	f8b3 3288 	ldrh.w	r3, [r3, #648]	; 0x288
 8011d74:	b29b      	uxth	r3, r3
 8011d76:	b2da      	uxtb	r2, r3
 8011d78:	4b4b      	ldr	r3, [pc, #300]	; (8011ea8 <CanTxTask+0x568>)
 8011d7a:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8011d7c:	4b4c      	ldr	r3, [pc, #304]	; (8011eb0 <CanTxTask+0x570>)
 8011d7e:	4a4a      	ldr	r2, [pc, #296]	; (8011ea8 <CanTxTask+0x568>)
 8011d80:	494c      	ldr	r1, [pc, #304]	; (8011eb4 <CanTxTask+0x574>)
 8011d82:	6838      	ldr	r0, [r7, #0]
 8011d84:	f7f1 ffc3 	bl	8003d0e <HAL_CAN_AddTxMessage>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d001      	beq.n	8011d92 <CanTxTask+0x452>
        Error_Handler();
 8011d8e:	f7f0 fae9 	bl	8002364 <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8011d92:	2005      	movs	r0, #5
 8011d94:	f7fb fb78 	bl	800d488 <osDelay>

      //=======================================================
      //Build Msg 5 (Out 1-12 Status)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 5;
 8011d98:	4b47      	ldr	r3, [pc, #284]	; (8011eb8 <CanTxTask+0x578>)
 8011d9a:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8011d9e:	3305      	adds	r3, #5
 8011da0:	461a      	mov	r2, r3
 8011da2:	4b44      	ldr	r3, [pc, #272]	; (8011eb4 <CanTxTask+0x574>)
 8011da4:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8011da6:	4b43      	ldr	r3, [pc, #268]	; (8011eb4 <CanTxTask+0x574>)
 8011da8:	2208      	movs	r2, #8
 8011daa:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = (pf[1].eState << 4) + pf[0].eState;
 8011dac:	4b3f      	ldr	r3, [pc, #252]	; (8011eac <CanTxTask+0x56c>)
 8011dae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	011b      	lsls	r3, r3, #4
 8011db6:	b2da      	uxtb	r2, r3
 8011db8:	4b3c      	ldr	r3, [pc, #240]	; (8011eac <CanTxTask+0x56c>)
 8011dba:	785b      	ldrb	r3, [r3, #1]
 8011dbc:	b2db      	uxtb	r3, r3
 8011dbe:	4413      	add	r3, r2
 8011dc0:	b2da      	uxtb	r2, r3
 8011dc2:	4b39      	ldr	r3, [pc, #228]	; (8011ea8 <CanTxTask+0x568>)
 8011dc4:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = (pf[3].eState << 4) + pf[2].eState;
 8011dc6:	4b39      	ldr	r3, [pc, #228]	; (8011eac <CanTxTask+0x56c>)
 8011dc8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8011dcc:	b2db      	uxtb	r3, r3
 8011dce:	011b      	lsls	r3, r3, #4
 8011dd0:	b2da      	uxtb	r2, r3
 8011dd2:	4b36      	ldr	r3, [pc, #216]	; (8011eac <CanTxTask+0x56c>)
 8011dd4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	4413      	add	r3, r2
 8011ddc:	b2da      	uxtb	r2, r3
 8011dde:	4b32      	ldr	r3, [pc, #200]	; (8011ea8 <CanTxTask+0x568>)
 8011de0:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = (pf[5].eState << 4) + pf[4].eState;
 8011de2:	4b32      	ldr	r3, [pc, #200]	; (8011eac <CanTxTask+0x56c>)
 8011de4:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	011b      	lsls	r3, r3, #4
 8011dec:	b2da      	uxtb	r2, r3
 8011dee:	4b2f      	ldr	r3, [pc, #188]	; (8011eac <CanTxTask+0x56c>)
 8011df0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8011df4:	b2db      	uxtb	r3, r3
 8011df6:	4413      	add	r3, r2
 8011df8:	b2da      	uxtb	r2, r3
 8011dfa:	4b2b      	ldr	r3, [pc, #172]	; (8011ea8 <CanTxTask+0x568>)
 8011dfc:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = (pf[7].eState << 4) + pf[6].eState;
 8011dfe:	4b2b      	ldr	r3, [pc, #172]	; (8011eac <CanTxTask+0x56c>)
 8011e00:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8011e04:	b2db      	uxtb	r3, r3
 8011e06:	011b      	lsls	r3, r3, #4
 8011e08:	b2da      	uxtb	r2, r3
 8011e0a:	4b28      	ldr	r3, [pc, #160]	; (8011eac <CanTxTask+0x56c>)
 8011e0c:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8011e10:	b2db      	uxtb	r3, r3
 8011e12:	4413      	add	r3, r2
 8011e14:	b2da      	uxtb	r2, r3
 8011e16:	4b24      	ldr	r3, [pc, #144]	; (8011ea8 <CanTxTask+0x568>)
 8011e18:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = (pf[9].eState << 4) + pf[8].eState;
 8011e1a:	4b24      	ldr	r3, [pc, #144]	; (8011eac <CanTxTask+0x56c>)
 8011e1c:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8011e20:	b2db      	uxtb	r3, r3
 8011e22:	011b      	lsls	r3, r3, #4
 8011e24:	b2da      	uxtb	r2, r3
 8011e26:	4b21      	ldr	r3, [pc, #132]	; (8011eac <CanTxTask+0x56c>)
 8011e28:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 8011e2c:	b2db      	uxtb	r3, r3
 8011e2e:	4413      	add	r3, r2
 8011e30:	b2da      	uxtb	r2, r3
 8011e32:	4b1d      	ldr	r3, [pc, #116]	; (8011ea8 <CanTxTask+0x568>)
 8011e34:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = (pf[11].eState << 4) + pf[10].eState;
 8011e36:	4b1d      	ldr	r3, [pc, #116]	; (8011eac <CanTxTask+0x56c>)
 8011e38:	f893 3269 	ldrb.w	r3, [r3, #617]	; 0x269
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	011b      	lsls	r3, r3, #4
 8011e40:	b2da      	uxtb	r2, r3
 8011e42:	4b1a      	ldr	r3, [pc, #104]	; (8011eac <CanTxTask+0x56c>)
 8011e44:	f893 3231 	ldrb.w	r3, [r3, #561]	; 0x231
 8011e48:	b2db      	uxtb	r3, r3
 8011e4a:	4413      	add	r3, r2
 8011e4c:	b2da      	uxtb	r2, r3
 8011e4e:	4b16      	ldr	r3, [pc, #88]	; (8011ea8 <CanTxTask+0x568>)
 8011e50:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = 0;
 8011e52:	4b15      	ldr	r3, [pc, #84]	; (8011ea8 <CanTxTask+0x568>)
 8011e54:	2200      	movs	r2, #0
 8011e56:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = 0;
 8011e58:	4b13      	ldr	r3, [pc, #76]	; (8011ea8 <CanTxTask+0x568>)
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8011e5e:	4b14      	ldr	r3, [pc, #80]	; (8011eb0 <CanTxTask+0x570>)
 8011e60:	4a11      	ldr	r2, [pc, #68]	; (8011ea8 <CanTxTask+0x568>)
 8011e62:	4914      	ldr	r1, [pc, #80]	; (8011eb4 <CanTxTask+0x574>)
 8011e64:	6838      	ldr	r0, [r7, #0]
 8011e66:	f7f1 ff52 	bl	8003d0e <HAL_CAN_AddTxMessage>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d001      	beq.n	8011e74 <CanTxTask+0x534>
        Error_Handler();
 8011e70:	f7f0 fa78 	bl	8002364 <Error_Handler>

#ifdef MEAS_HEAP_USE
      __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

      osDelay(stPdmConfig.stCanOutput.nUpdateTime);
 8011e74:	4b10      	ldr	r3, [pc, #64]	; (8011eb8 <CanTxTask+0x578>)
 8011e76:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7fb fb04 	bl	800d488 <osDelay>
        stPdmConfig.stCanOutput.nBaseId < 2048){
 8011e80:	e010      	b.n	8011ea4 <CanTxTask+0x564>
    }
    else{
      //Not transmitting
      //Clear CAN TX reply messages generated by config RX messages
      if(osMessageQueueGetCount(qMsgQueueCanTx) > 0)
 8011e82:	4b0e      	ldr	r3, [pc, #56]	; (8011ebc <CanTxTask+0x57c>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7fb fc98 	bl	800d7bc <osMessageQueueGetCount>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d004      	beq.n	8011e9c <CanTxTask+0x55c>
      {
        osMessageQueueReset(qMsgQueueCanTx);
 8011e92:	4b0a      	ldr	r3, [pc, #40]	; (8011ebc <CanTxTask+0x57c>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7fb fcc2 	bl	800d820 <osMessageQueueReset>
      }
      osDelay(1000); //Don't need to check for config changes very often
 8011e9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011ea0:	f7fb faf2 	bl	800d488 <osDelay>
    if(stPdmConfig.stCanOutput.nEnabled &&
 8011ea4:	e594      	b.n	80119d0 <CanTxTask+0x90>
 8011ea6:	bf00      	nop
 8011ea8:	20003664 	.word	0x20003664
 8011eac:	20003330 	.word	0x20003330
 8011eb0:	20003674 	.word	0x20003674
 8011eb4:	20003630 	.word	0x20003630
 8011eb8:	20002a44 	.word	0x20002a44
 8011ebc:	20003328 	.word	0x20003328

08011ec0 <SetPfStatusLed>:

  }
}

void SetPfStatusLed(PCA9635_LEDOnState_t *ledState, volatile ProfetTypeDef *profet)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b083      	sub	sp, #12
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	6039      	str	r1, [r7, #0]
  //0 = Off
  //1 = On
  //3 = Flash
  *ledState = (profet->eState == ON) +          //On
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	785b      	ldrb	r3, [r3, #1]
 8011ece:	b2db      	uxtb	r3, r3
 8011ed0:	2b01      	cmp	r3, #1
 8011ed2:	bf0c      	ite	eq
 8011ed4:	2301      	moveq	r3, #1
 8011ed6:	2300      	movne	r3, #0
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	461a      	mov	r2, r3
              (profet->eState == IN_RUSH) +     //On
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	785b      	ldrb	r3, [r3, #1]
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	2b02      	cmp	r3, #2
 8011ee4:	bf0c      	ite	eq
 8011ee6:	2301      	moveq	r3, #1
 8011ee8:	2300      	movne	r3, #0
 8011eea:	b2db      	uxtb	r3, r3
  *ledState = (profet->eState == ON) +          //On
 8011eec:	4413      	add	r3, r2
 8011eee:	b2db      	uxtb	r3, r3
              (profet->eState == OVERCURRENT)   * LED_FLASH +
 8011ef0:	683a      	ldr	r2, [r7, #0]
 8011ef2:	7852      	ldrb	r2, [r2, #1]
 8011ef4:	b2d2      	uxtb	r2, r2
              (profet->eState == IN_RUSH) +     //On
 8011ef6:	2a04      	cmp	r2, #4
 8011ef8:	d101      	bne.n	8011efe <SetPfStatusLed+0x3e>
 8011efa:	2203      	movs	r2, #3
 8011efc:	e000      	b.n	8011f00 <SetPfStatusLed+0x40>
 8011efe:	2200      	movs	r2, #0
 8011f00:	4413      	add	r3, r2
 8011f02:	b2db      	uxtb	r3, r3
              (profet->eState == SHORT_CIRCUIT) * LED_FLASH +
 8011f04:	683a      	ldr	r2, [r7, #0]
 8011f06:	7852      	ldrb	r2, [r2, #1]
 8011f08:	b2d2      	uxtb	r2, r2
              (profet->eState == OVERCURRENT)   * LED_FLASH +
 8011f0a:	2a03      	cmp	r2, #3
 8011f0c:	d101      	bne.n	8011f12 <SetPfStatusLed+0x52>
 8011f0e:	2203      	movs	r2, #3
 8011f10:	e000      	b.n	8011f14 <SetPfStatusLed+0x54>
 8011f12:	2200      	movs	r2, #0
 8011f14:	4413      	add	r3, r2
 8011f16:	b2db      	uxtb	r3, r3
              (profet->eState == SUSPENDED)     * LED_FLASH +
 8011f18:	683a      	ldr	r2, [r7, #0]
 8011f1a:	7852      	ldrb	r2, [r2, #1]
 8011f1c:	b2d2      	uxtb	r2, r2
              (profet->eState == SHORT_CIRCUIT) * LED_FLASH +
 8011f1e:	2a06      	cmp	r2, #6
 8011f20:	d101      	bne.n	8011f26 <SetPfStatusLed+0x66>
 8011f22:	2203      	movs	r2, #3
 8011f24:	e000      	b.n	8011f28 <SetPfStatusLed+0x68>
 8011f26:	2200      	movs	r2, #0
 8011f28:	4413      	add	r3, r2
 8011f2a:	b2db      	uxtb	r3, r3
              (profet->eState == FAULT)         * LED_FLASH;
 8011f2c:	683a      	ldr	r2, [r7, #0]
 8011f2e:	7852      	ldrb	r2, [r2, #1]
 8011f30:	b2d2      	uxtb	r2, r2
              (profet->eState == SUSPENDED)     * LED_FLASH +
 8011f32:	2a05      	cmp	r2, #5
 8011f34:	d101      	bne.n	8011f3a <SetPfStatusLed+0x7a>
 8011f36:	2203      	movs	r2, #3
 8011f38:	e000      	b.n	8011f3c <SetPfStatusLed+0x7c>
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	4413      	add	r3, r2
 8011f3e:	b2da      	uxtb	r2, r3
  *ledState = (profet->eState == ON) +          //On
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	701a      	strb	r2, [r3, #0]
}
 8011f44:	bf00      	nop
 8011f46:	370c      	adds	r7, #12
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr

08011f50 <Profet_Init>:

void Profet_Init(){
 8011f50:	b480      	push	{r7}
 8011f52:	af00      	add	r7, sp, #0

  pf[0].eModel = BTS7002_1EPP;
 8011f54:	4b8a      	ldr	r3, [pc, #552]	; (8012180 <Profet_Init+0x230>)
 8011f56:	2200      	movs	r2, #0
 8011f58:	701a      	strb	r2, [r3, #0]
  pf[0].nNum = 0;
 8011f5a:	4b89      	ldr	r3, [pc, #548]	; (8012180 <Profet_Init+0x230>)
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	809a      	strh	r2, [r3, #4]
  pf[0].nIN_Port = &pfGpioBank1;
 8011f60:	4b87      	ldr	r3, [pc, #540]	; (8012180 <Profet_Init+0x230>)
 8011f62:	4a88      	ldr	r2, [pc, #544]	; (8012184 <Profet_Init+0x234>)
 8011f64:	609a      	str	r2, [r3, #8]
  pf[0].nIN_Pin = 0x0080;
 8011f66:	4b86      	ldr	r3, [pc, #536]	; (8012180 <Profet_Init+0x230>)
 8011f68:	2280      	movs	r2, #128	; 0x80
 8011f6a:	819a      	strh	r2, [r3, #12]
  pf[0].fKilis = 2.286;
 8011f6c:	4b84      	ldr	r3, [pc, #528]	; (8012180 <Profet_Init+0x230>)
 8011f6e:	4a86      	ldr	r2, [pc, #536]	; (8012188 <Profet_Init+0x238>)
 8011f70:	635a      	str	r2, [r3, #52]	; 0x34

  pf[1].eModel = BTS7002_1EPP;
 8011f72:	4b83      	ldr	r3, [pc, #524]	; (8012180 <Profet_Init+0x230>)
 8011f74:	2200      	movs	r2, #0
 8011f76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pf[1].nNum = 1;
 8011f7a:	4b81      	ldr	r3, [pc, #516]	; (8012180 <Profet_Init+0x230>)
 8011f7c:	2201      	movs	r2, #1
 8011f7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  pf[1].nIN_Port = &pfGpioBank1;
 8011f80:	4b7f      	ldr	r3, [pc, #508]	; (8012180 <Profet_Init+0x230>)
 8011f82:	4a80      	ldr	r2, [pc, #512]	; (8012184 <Profet_Init+0x234>)
 8011f84:	641a      	str	r2, [r3, #64]	; 0x40
  pf[1].nIN_Pin = 0x0002;
 8011f86:	4b7e      	ldr	r3, [pc, #504]	; (8012180 <Profet_Init+0x230>)
 8011f88:	2202      	movs	r2, #2
 8011f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  pf[1].fKilis = 2.286;
 8011f8e:	4b7c      	ldr	r3, [pc, #496]	; (8012180 <Profet_Init+0x230>)
 8011f90:	4a7d      	ldr	r2, [pc, #500]	; (8012188 <Profet_Init+0x238>)
 8011f92:	66da      	str	r2, [r3, #108]	; 0x6c

  pf[2].eModel = BTS7008_2EPA_CH1;
 8011f94:	4b7a      	ldr	r3, [pc, #488]	; (8012180 <Profet_Init+0x230>)
 8011f96:	2201      	movs	r2, #1
 8011f98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  pf[2].nNum = 2;
 8011f9c:	4b78      	ldr	r3, [pc, #480]	; (8012180 <Profet_Init+0x230>)
 8011f9e:	2202      	movs	r2, #2
 8011fa0:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  pf[2].nIN_Port = &pfGpioBank1;
 8011fa4:	4b76      	ldr	r3, [pc, #472]	; (8012180 <Profet_Init+0x230>)
 8011fa6:	4a77      	ldr	r2, [pc, #476]	; (8012184 <Profet_Init+0x234>)
 8011fa8:	679a      	str	r2, [r3, #120]	; 0x78
  pf[2].nIN_Pin = 0x8000;
 8011faa:	4b75      	ldr	r3, [pc, #468]	; (8012180 <Profet_Init+0x230>)
 8011fac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011fb0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
  pf[2].fKilis = 0.554;
 8011fb4:	4b72      	ldr	r3, [pc, #456]	; (8012180 <Profet_Init+0x230>)
 8011fb6:	4a75      	ldr	r2, [pc, #468]	; (801218c <Profet_Init+0x23c>)
 8011fb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  pf[3].eModel = BTS7008_2EPA_CH2;
 8011fbc:	4b70      	ldr	r3, [pc, #448]	; (8012180 <Profet_Init+0x230>)
 8011fbe:	2202      	movs	r2, #2
 8011fc0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
  pf[3].eState = OFF;
 8011fc4:	4b6e      	ldr	r3, [pc, #440]	; (8012180 <Profet_Init+0x230>)
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
  pf[3].nNum = 3;
 8011fcc:	4b6c      	ldr	r3, [pc, #432]	; (8012180 <Profet_Init+0x230>)
 8011fce:	2203      	movs	r2, #3
 8011fd0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  pf[3].nIN_Port = &pfGpioBank1;
 8011fd4:	4b6a      	ldr	r3, [pc, #424]	; (8012180 <Profet_Init+0x230>)
 8011fd6:	4a6b      	ldr	r2, [pc, #428]	; (8012184 <Profet_Init+0x234>)
 8011fd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  pf[3].nIN_Pin = 0x1000;
 8011fdc:	4b68      	ldr	r3, [pc, #416]	; (8012180 <Profet_Init+0x230>)
 8011fde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011fe2:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  pf[3].fKilis = 0.554;
 8011fe6:	4b66      	ldr	r3, [pc, #408]	; (8012180 <Profet_Init+0x230>)
 8011fe8:	4a68      	ldr	r2, [pc, #416]	; (801218c <Profet_Init+0x23c>)
 8011fea:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  pf[4].eModel = BTS7008_2EPA_CH1;
 8011fee:	4b64      	ldr	r3, [pc, #400]	; (8012180 <Profet_Init+0x230>)
 8011ff0:	2201      	movs	r2, #1
 8011ff2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  pf[4].eState = OFF;
 8011ff6:	4b62      	ldr	r3, [pc, #392]	; (8012180 <Profet_Init+0x230>)
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  pf[4].nNum = 4;
 8011ffe:	4b60      	ldr	r3, [pc, #384]	; (8012180 <Profet_Init+0x230>)
 8012000:	2204      	movs	r2, #4
 8012002:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
  pf[4].nIN_Port = &pfGpioBank1;
 8012006:	4b5e      	ldr	r3, [pc, #376]	; (8012180 <Profet_Init+0x230>)
 8012008:	4a5e      	ldr	r2, [pc, #376]	; (8012184 <Profet_Init+0x234>)
 801200a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  pf[4].nIN_Pin = 0x0800;
 801200e:	4b5c      	ldr	r3, [pc, #368]	; (8012180 <Profet_Init+0x230>)
 8012010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012014:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  pf[4].fKilis = 0.554;
 8012018:	4b59      	ldr	r3, [pc, #356]	; (8012180 <Profet_Init+0x230>)
 801201a:	4a5c      	ldr	r2, [pc, #368]	; (801218c <Profet_Init+0x23c>)
 801201c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  pf[5].eModel = BTS7008_2EPA_CH2;
 8012020:	4b57      	ldr	r3, [pc, #348]	; (8012180 <Profet_Init+0x230>)
 8012022:	2202      	movs	r2, #2
 8012024:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
  pf[5].eState = OFF;
 8012028:	4b55      	ldr	r3, [pc, #340]	; (8012180 <Profet_Init+0x230>)
 801202a:	2200      	movs	r2, #0
 801202c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  pf[5].nNum = 5;
 8012030:	4b53      	ldr	r3, [pc, #332]	; (8012180 <Profet_Init+0x230>)
 8012032:	2205      	movs	r2, #5
 8012034:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
  pf[5].nIN_Port = &pfGpioBank1;
 8012038:	4b51      	ldr	r3, [pc, #324]	; (8012180 <Profet_Init+0x230>)
 801203a:	4a52      	ldr	r2, [pc, #328]	; (8012184 <Profet_Init+0x234>)
 801203c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  pf[5].nIN_Pin = 0x0100;
 8012040:	4b4f      	ldr	r3, [pc, #316]	; (8012180 <Profet_Init+0x230>)
 8012042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012046:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
  pf[5].fKilis = 0.554;
 801204a:	4b4d      	ldr	r3, [pc, #308]	; (8012180 <Profet_Init+0x230>)
 801204c:	4a4f      	ldr	r2, [pc, #316]	; (801218c <Profet_Init+0x23c>)
 801204e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  pf[6].eModel = BTS7002_1EPP;
 8012052:	4b4b      	ldr	r3, [pc, #300]	; (8012180 <Profet_Init+0x230>)
 8012054:	2200      	movs	r2, #0
 8012056:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  pf[6].eState = OFF;
 801205a:	4b49      	ldr	r3, [pc, #292]	; (8012180 <Profet_Init+0x230>)
 801205c:	2200      	movs	r2, #0
 801205e:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  pf[6].nNum = 6;
 8012062:	4b47      	ldr	r3, [pc, #284]	; (8012180 <Profet_Init+0x230>)
 8012064:	2206      	movs	r2, #6
 8012066:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
  pf[6].nIN_Port = &pfGpioBank2;
 801206a:	4b45      	ldr	r3, [pc, #276]	; (8012180 <Profet_Init+0x230>)
 801206c:	4a48      	ldr	r2, [pc, #288]	; (8012190 <Profet_Init+0x240>)
 801206e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pf[6].nIN_Pin = 0x0002;
 8012072:	4b43      	ldr	r3, [pc, #268]	; (8012180 <Profet_Init+0x230>)
 8012074:	2202      	movs	r2, #2
 8012076:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
  pf[6].fKilis = 2.286;
 801207a:	4b41      	ldr	r3, [pc, #260]	; (8012180 <Profet_Init+0x230>)
 801207c:	4a42      	ldr	r2, [pc, #264]	; (8012188 <Profet_Init+0x238>)
 801207e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

  pf[7].eModel = BTS7002_1EPP;
 8012082:	4b3f      	ldr	r3, [pc, #252]	; (8012180 <Profet_Init+0x230>)
 8012084:	2200      	movs	r2, #0
 8012086:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
  pf[7].eState = OFF;
 801208a:	4b3d      	ldr	r3, [pc, #244]	; (8012180 <Profet_Init+0x230>)
 801208c:	2200      	movs	r2, #0
 801208e:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  pf[7].nNum = 7;
 8012092:	4b3b      	ldr	r3, [pc, #236]	; (8012180 <Profet_Init+0x230>)
 8012094:	2207      	movs	r2, #7
 8012096:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pf[7].nIN_Port = &pfGpioBank2;
 801209a:	4b39      	ldr	r3, [pc, #228]	; (8012180 <Profet_Init+0x230>)
 801209c:	4a3c      	ldr	r2, [pc, #240]	; (8012190 <Profet_Init+0x240>)
 801209e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  pf[7].nIN_Pin = 0x0008;
 80120a2:	4b37      	ldr	r3, [pc, #220]	; (8012180 <Profet_Init+0x230>)
 80120a4:	2208      	movs	r2, #8
 80120a6:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
  pf[7].fKilis = 2.286;
 80120aa:	4b35      	ldr	r3, [pc, #212]	; (8012180 <Profet_Init+0x230>)
 80120ac:	4a36      	ldr	r2, [pc, #216]	; (8012188 <Profet_Init+0x238>)
 80120ae:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

  pf[8].eModel = BTS7008_2EPA_CH1;
 80120b2:	4b33      	ldr	r3, [pc, #204]	; (8012180 <Profet_Init+0x230>)
 80120b4:	2201      	movs	r2, #1
 80120b6:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
  pf[8].eState = OFF;
 80120ba:	4b31      	ldr	r3, [pc, #196]	; (8012180 <Profet_Init+0x230>)
 80120bc:	2200      	movs	r2, #0
 80120be:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  pf[8].nNum = 8;
 80120c2:	4b2f      	ldr	r3, [pc, #188]	; (8012180 <Profet_Init+0x230>)
 80120c4:	2208      	movs	r2, #8
 80120c6:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  pf[8].nIN_Port = &pfGpioBank2;
 80120ca:	4b2d      	ldr	r3, [pc, #180]	; (8012180 <Profet_Init+0x230>)
 80120cc:	4a30      	ldr	r2, [pc, #192]	; (8012190 <Profet_Init+0x240>)
 80120ce:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  pf[8].nIN_Pin = 0x0010;
 80120d2:	4b2b      	ldr	r3, [pc, #172]	; (8012180 <Profet_Init+0x230>)
 80120d4:	2210      	movs	r2, #16
 80120d6:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
  pf[8].fKilis = 0.554;
 80120da:	4b29      	ldr	r3, [pc, #164]	; (8012180 <Profet_Init+0x230>)
 80120dc:	4a2b      	ldr	r2, [pc, #172]	; (801218c <Profet_Init+0x23c>)
 80120de:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  pf[9].eModel = BTS7008_2EPA_CH2;
 80120e2:	4b27      	ldr	r3, [pc, #156]	; (8012180 <Profet_Init+0x230>)
 80120e4:	2202      	movs	r2, #2
 80120e6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  pf[9].eState = OFF;
 80120ea:	4b25      	ldr	r3, [pc, #148]	; (8012180 <Profet_Init+0x230>)
 80120ec:	2200      	movs	r2, #0
 80120ee:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
  pf[9].nNum = 9;
 80120f2:	4b23      	ldr	r3, [pc, #140]	; (8012180 <Profet_Init+0x230>)
 80120f4:	2209      	movs	r2, #9
 80120f6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
  pf[9].nIN_Port = &pfGpioBank2;
 80120fa:	4b21      	ldr	r3, [pc, #132]	; (8012180 <Profet_Init+0x230>)
 80120fc:	4a24      	ldr	r2, [pc, #144]	; (8012190 <Profet_Init+0x240>)
 80120fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  pf[9].nIN_Pin = 0x0080;
 8012102:	4b1f      	ldr	r3, [pc, #124]	; (8012180 <Profet_Init+0x230>)
 8012104:	2280      	movs	r2, #128	; 0x80
 8012106:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
  pf[9].fKilis = 0.554;
 801210a:	4b1d      	ldr	r3, [pc, #116]	; (8012180 <Profet_Init+0x230>)
 801210c:	4a1f      	ldr	r2, [pc, #124]	; (801218c <Profet_Init+0x23c>)
 801210e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

  pf[10].eModel = BTS7008_2EPA_CH1;
 8012112:	4b1b      	ldr	r3, [pc, #108]	; (8012180 <Profet_Init+0x230>)
 8012114:	2201      	movs	r2, #1
 8012116:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
  pf[10].eState = OFF;
 801211a:	4b19      	ldr	r3, [pc, #100]	; (8012180 <Profet_Init+0x230>)
 801211c:	2200      	movs	r2, #0
 801211e:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
  pf[10].nNum = 10;
 8012122:	4b17      	ldr	r3, [pc, #92]	; (8012180 <Profet_Init+0x230>)
 8012124:	220a      	movs	r2, #10
 8012126:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
  pf[10].nIN_Port = &pfGpioBank2;
 801212a:	4b15      	ldr	r3, [pc, #84]	; (8012180 <Profet_Init+0x230>)
 801212c:	4a18      	ldr	r2, [pc, #96]	; (8012190 <Profet_Init+0x240>)
 801212e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  pf[10].nIN_Pin = 0x0100;
 8012132:	4b13      	ldr	r3, [pc, #76]	; (8012180 <Profet_Init+0x230>)
 8012134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012138:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
  pf[10].fKilis = 0.554;
 801213c:	4b10      	ldr	r3, [pc, #64]	; (8012180 <Profet_Init+0x230>)
 801213e:	4a13      	ldr	r2, [pc, #76]	; (801218c <Profet_Init+0x23c>)
 8012140:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

  pf[11].eModel = BTS7008_2EPA_CH2;
 8012144:	4b0e      	ldr	r3, [pc, #56]	; (8012180 <Profet_Init+0x230>)
 8012146:	2202      	movs	r2, #2
 8012148:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
  pf[11].eState = OFF;
 801214c:	4b0c      	ldr	r3, [pc, #48]	; (8012180 <Profet_Init+0x230>)
 801214e:	2200      	movs	r2, #0
 8012150:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
  pf[11].nNum = 11;
 8012154:	4b0a      	ldr	r3, [pc, #40]	; (8012180 <Profet_Init+0x230>)
 8012156:	220b      	movs	r2, #11
 8012158:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
  pf[11].nIN_Port = &pfGpioBank2;
 801215c:	4b08      	ldr	r3, [pc, #32]	; (8012180 <Profet_Init+0x230>)
 801215e:	4a0c      	ldr	r2, [pc, #48]	; (8012190 <Profet_Init+0x240>)
 8012160:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
  pf[11].nIN_Pin = 0x0800;
 8012164:	4b06      	ldr	r3, [pc, #24]	; (8012180 <Profet_Init+0x230>)
 8012166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801216a:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
  pf[11].fKilis = 0.554;
 801216e:	4b04      	ldr	r3, [pc, #16]	; (8012180 <Profet_Init+0x230>)
 8012170:	4a06      	ldr	r2, [pc, #24]	; (801218c <Profet_Init+0x23c>)
 8012172:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
}
 8012176:	bf00      	nop
 8012178:	46bd      	mov	sp, r7
 801217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217e:	4770      	bx	lr
 8012180:	20003330 	.word	0x20003330
 8012184:	200035d2 	.word	0x200035d2
 8012188:	40124dd3 	.word	0x40124dd3
 801218c:	3f0dd2f2 	.word	0x3f0dd2f2
 8012190:	200035d4 	.word	0x200035d4

08012194 <_write>:


//Overwrite printf _write to send to ITM_SendChar
int _write(int file, char *ptr, int len){
 8012194:	b580      	push	{r7, lr}
 8012196:	b086      	sub	sp, #24
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	607a      	str	r2, [r7, #4]
  int i=0;
 80121a0:	2300      	movs	r3, #0
 80121a2:	617b      	str	r3, [r7, #20]
  for(i=0; i<len; i++){
 80121a4:	2300      	movs	r3, #0
 80121a6:	617b      	str	r3, [r7, #20]
 80121a8:	e009      	b.n	80121be <_write+0x2a>
    ITM_SendChar((*ptr++));
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	1c5a      	adds	r2, r3, #1
 80121ae:	60ba      	str	r2, [r7, #8]
 80121b0:	781b      	ldrb	r3, [r3, #0]
 80121b2:	4618      	mov	r0, r3
 80121b4:	f7fd fff0 	bl	8010198 <ITM_SendChar>
  for(i=0; i<len; i++){
 80121b8:	697b      	ldr	r3, [r7, #20]
 80121ba:	3301      	adds	r3, #1
 80121bc:	617b      	str	r3, [r7, #20]
 80121be:	697a      	ldr	r2, [r7, #20]
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	dbf1      	blt.n	80121aa <_write+0x16>
  }
  return len;
 80121c6:	687b      	ldr	r3, [r7, #4]
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	3718      	adds	r7, #24
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}

080121d0 <ReadPdmConfig>:

uint8_t ReadPdmConfig()
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b08c      	sub	sp, #48	; 0x30
 80121d4:	af00      	add	r7, sp, #0
  PdmConfig_SetDefault(&stPdmConfig);
 80121d6:	4872      	ldr	r0, [pc, #456]	; (80123a0 <ReadPdmConfig+0x1d0>)
 80121d8:	f001 fdb4 	bl	8013d44 <PdmConfig_SetDefault>

  //Map config to profet values
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 80121dc:	2300      	movs	r3, #0
 80121de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80121e0:	e052      	b.n	8012288 <ReadPdmConfig+0xb8>
  {
    pf[i].nIL_Limit = stPdmConfig.stOutput[i].nCurrentLimit;
 80121e2:	496f      	ldr	r1, [pc, #444]	; (80123a0 <ReadPdmConfig+0x1d0>)
 80121e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121e6:	4613      	mov	r3, r2
 80121e8:	009b      	lsls	r3, r3, #2
 80121ea:	4413      	add	r3, r2
 80121ec:	009b      	lsls	r3, r3, #2
 80121ee:	440b      	add	r3, r1
 80121f0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80121f4:	8818      	ldrh	r0, [r3, #0]
 80121f6:	496b      	ldr	r1, [pc, #428]	; (80123a4 <ReadPdmConfig+0x1d4>)
 80121f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121fa:	4613      	mov	r3, r2
 80121fc:	00db      	lsls	r3, r3, #3
 80121fe:	1a9b      	subs	r3, r3, r2
 8012200:	00db      	lsls	r3, r3, #3
 8012202:	440b      	add	r3, r1
 8012204:	3314      	adds	r3, #20
 8012206:	4602      	mov	r2, r0
 8012208:	801a      	strh	r2, [r3, #0]
    pf[i].nIL_InRush_Limit = stPdmConfig.stOutput[i].nInrushLimit;
 801220a:	4965      	ldr	r1, [pc, #404]	; (80123a0 <ReadPdmConfig+0x1d0>)
 801220c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801220e:	4613      	mov	r3, r2
 8012210:	009b      	lsls	r3, r3, #2
 8012212:	4413      	add	r3, r2
 8012214:	009b      	lsls	r3, r3, #2
 8012216:	440b      	add	r3, r1
 8012218:	f203 4312 	addw	r3, r3, #1042	; 0x412
 801221c:	8818      	ldrh	r0, [r3, #0]
 801221e:	4961      	ldr	r1, [pc, #388]	; (80123a4 <ReadPdmConfig+0x1d4>)
 8012220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012222:	4613      	mov	r3, r2
 8012224:	00db      	lsls	r3, r3, #3
 8012226:	1a9b      	subs	r3, r3, r2
 8012228:	00db      	lsls	r3, r3, #3
 801222a:	440b      	add	r3, r1
 801222c:	3316      	adds	r3, #22
 801222e:	4602      	mov	r2, r0
 8012230:	801a      	strh	r2, [r3, #0]
    pf[i].nIL_InRush_Time = stPdmConfig.stOutput[i].nInrushTime;
 8012232:	495b      	ldr	r1, [pc, #364]	; (80123a0 <ReadPdmConfig+0x1d0>)
 8012234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012236:	4613      	mov	r3, r2
 8012238:	009b      	lsls	r3, r3, #2
 801223a:	4413      	add	r3, r2
 801223c:	009b      	lsls	r3, r3, #2
 801223e:	440b      	add	r3, r1
 8012240:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8012244:	8818      	ldrh	r0, [r3, #0]
 8012246:	4957      	ldr	r1, [pc, #348]	; (80123a4 <ReadPdmConfig+0x1d4>)
 8012248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801224a:	4613      	mov	r3, r2
 801224c:	00db      	lsls	r3, r3, #3
 801224e:	1a9b      	subs	r3, r3, r2
 8012250:	00db      	lsls	r3, r3, #3
 8012252:	440b      	add	r3, r1
 8012254:	3318      	adds	r3, #24
 8012256:	4602      	mov	r2, r0
 8012258:	801a      	strh	r2, [r3, #0]
    //pf[i]. = stPdmConfig.stOutput[i].eResetMode;
    //pf[i] = stPdmConfig.stOutput[i].nResetTime;
    pf[i].nOC_ResetLimit = stPdmConfig.stOutput[i].nResetLimit;
 801225a:	4951      	ldr	r1, [pc, #324]	; (80123a0 <ReadPdmConfig+0x1d0>)
 801225c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801225e:	4613      	mov	r3, r2
 8012260:	009b      	lsls	r3, r3, #2
 8012262:	4413      	add	r3, r2
 8012264:	009b      	lsls	r3, r3, #2
 8012266:	440b      	add	r3, r1
 8012268:	f203 431a 	addw	r3, r3, #1050	; 0x41a
 801226c:	7818      	ldrb	r0, [r3, #0]
 801226e:	494d      	ldr	r1, [pc, #308]	; (80123a4 <ReadPdmConfig+0x1d4>)
 8012270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012272:	4613      	mov	r3, r2
 8012274:	00db      	lsls	r3, r3, #3
 8012276:	1a9b      	subs	r3, r3, r2
 8012278:	00db      	lsls	r3, r3, #3
 801227a:	440b      	add	r3, r1
 801227c:	3331      	adds	r3, #49	; 0x31
 801227e:	4602      	mov	r2, r0
 8012280:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8012282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012284:	3301      	adds	r3, #1
 8012286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228a:	2b0b      	cmp	r3, #11
 801228c:	dda9      	ble.n	80121e2 <ReadPdmConfig+0x12>
  }
  */

  //Map the variable map first before using
  //User inputs
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 801228e:	2300      	movs	r3, #0
 8012290:	62bb      	str	r3, [r7, #40]	; 0x28
 8012292:	e00b      	b.n	80122ac <ReadPdmConfig+0xdc>
    pVariableMap[i+1] = &nPdmInputs[i];
 8012294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012296:	3301      	adds	r3, #1
 8012298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801229a:	0052      	lsls	r2, r2, #1
 801229c:	4942      	ldr	r1, [pc, #264]	; (80123a8 <ReadPdmConfig+0x1d8>)
 801229e:	440a      	add	r2, r1
 80122a0:	4942      	ldr	r1, [pc, #264]	; (80123ac <ReadPdmConfig+0x1dc>)
 80122a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 80122a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a8:	3301      	adds	r3, #1
 80122aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80122ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ae:	2b07      	cmp	r3, #7
 80122b0:	ddf0      	ble.n	8012294 <ReadPdmConfig+0xc4>

  //CAN inputs
  for(int i=0; i<PDM_NUM_CAN_INPUTS; i++)
 80122b2:	2300      	movs	r3, #0
 80122b4:	627b      	str	r3, [r7, #36]	; 0x24
 80122b6:	e00b      	b.n	80122d0 <ReadPdmConfig+0x100>
    pVariableMap[i + 9] = &nCanInputs[i];
 80122b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ba:	3309      	adds	r3, #9
 80122bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122be:	0052      	lsls	r2, r2, #1
 80122c0:	493b      	ldr	r1, [pc, #236]	; (80123b0 <ReadPdmConfig+0x1e0>)
 80122c2:	440a      	add	r2, r1
 80122c4:	4939      	ldr	r1, [pc, #228]	; (80123ac <ReadPdmConfig+0x1dc>)
 80122c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_CAN_INPUTS; i++)
 80122ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122cc:	3301      	adds	r3, #1
 80122ce:	627b      	str	r3, [r7, #36]	; 0x24
 80122d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d2:	2b1d      	cmp	r3, #29
 80122d4:	ddf0      	ble.n	80122b8 <ReadPdmConfig+0xe8>

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 80122d6:	2300      	movs	r3, #0
 80122d8:	623b      	str	r3, [r7, #32]
 80122da:	e00b      	b.n	80122f4 <ReadPdmConfig+0x124>
    pVariableMap[i + 39] = &nVirtInputs[i];
 80122dc:	6a3b      	ldr	r3, [r7, #32]
 80122de:	3327      	adds	r3, #39	; 0x27
 80122e0:	6a3a      	ldr	r2, [r7, #32]
 80122e2:	0052      	lsls	r2, r2, #1
 80122e4:	4933      	ldr	r1, [pc, #204]	; (80123b4 <ReadPdmConfig+0x1e4>)
 80122e6:	440a      	add	r2, r1
 80122e8:	4930      	ldr	r1, [pc, #192]	; (80123ac <ReadPdmConfig+0x1dc>)
 80122ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 80122ee:	6a3b      	ldr	r3, [r7, #32]
 80122f0:	3301      	adds	r3, #1
 80122f2:	623b      	str	r3, [r7, #32]
 80122f4:	6a3b      	ldr	r3, [r7, #32]
 80122f6:	2b13      	cmp	r3, #19
 80122f8:	ddf0      	ble.n	80122dc <ReadPdmConfig+0x10c>

  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 80122fa:	2300      	movs	r3, #0
 80122fc:	61fb      	str	r3, [r7, #28]
 80122fe:	e00b      	b.n	8012318 <ReadPdmConfig+0x148>
  {
    pVariableMap[i + 59] = &nOutputs[i];
 8012300:	69fb      	ldr	r3, [r7, #28]
 8012302:	333b      	adds	r3, #59	; 0x3b
 8012304:	69fa      	ldr	r2, [r7, #28]
 8012306:	0052      	lsls	r2, r2, #1
 8012308:	492b      	ldr	r1, [pc, #172]	; (80123b8 <ReadPdmConfig+0x1e8>)
 801230a:	440a      	add	r2, r1
 801230c:	4927      	ldr	r1, [pc, #156]	; (80123ac <ReadPdmConfig+0x1dc>)
 801230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8012312:	69fb      	ldr	r3, [r7, #28]
 8012314:	3301      	adds	r3, #1
 8012316:	61fb      	str	r3, [r7, #28]
 8012318:	69fb      	ldr	r3, [r7, #28]
 801231a:	2b0b      	cmp	r3, #11
 801231c:	ddf0      	ble.n	8012300 <ReadPdmConfig+0x130>
  }

  pVariableMap[71] = &stWiper.nSlowOut;
 801231e:	4b23      	ldr	r3, [pc, #140]	; (80123ac <ReadPdmConfig+0x1dc>)
 8012320:	4a26      	ldr	r2, [pc, #152]	; (80123bc <ReadPdmConfig+0x1ec>)
 8012322:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  pVariableMap[72] = &stWiper.nFastOut;
 8012326:	4b21      	ldr	r3, [pc, #132]	; (80123ac <ReadPdmConfig+0x1dc>)
 8012328:	4a25      	ldr	r2, [pc, #148]	; (80123c0 <ReadPdmConfig+0x1f0>)
 801232a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120


  //Assign variable map values
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 801232e:	2300      	movs	r3, #0
 8012330:	61bb      	str	r3, [r7, #24]
 8012332:	e01a      	b.n	801236a <ReadPdmConfig+0x19a>
  {
    stPdmConfig.stOutput[i].pInput = pVariableMap[stPdmConfig.stOutput[i].nInput];
 8012334:	491a      	ldr	r1, [pc, #104]	; (80123a0 <ReadPdmConfig+0x1d0>)
 8012336:	69ba      	ldr	r2, [r7, #24]
 8012338:	4613      	mov	r3, r2
 801233a:	009b      	lsls	r3, r3, #2
 801233c:	4413      	add	r3, r2
 801233e:	009b      	lsls	r3, r3, #2
 8012340:	440b      	add	r3, r1
 8012342:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	461a      	mov	r2, r3
 801234a:	4b18      	ldr	r3, [pc, #96]	; (80123ac <ReadPdmConfig+0x1dc>)
 801234c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012350:	4813      	ldr	r0, [pc, #76]	; (80123a0 <ReadPdmConfig+0x1d0>)
 8012352:	69ba      	ldr	r2, [r7, #24]
 8012354:	4613      	mov	r3, r2
 8012356:	009b      	lsls	r3, r3, #2
 8012358:	4413      	add	r3, r2
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	4403      	add	r3, r0
 801235e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8012362:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 8012364:	69bb      	ldr	r3, [r7, #24]
 8012366:	3301      	adds	r3, #1
 8012368:	61bb      	str	r3, [r7, #24]
 801236a:	69bb      	ldr	r3, [r7, #24]
 801236c:	2b0b      	cmp	r3, #11
 801236e:	dde1      	ble.n	8012334 <ReadPdmConfig+0x164>
  }

  //Map input values to config structure
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 8012370:	2300      	movs	r3, #0
 8012372:	617b      	str	r3, [r7, #20]
 8012374:	e00e      	b.n	8012394 <ReadPdmConfig+0x1c4>
  {
    stPdmConfig.stInput[i].pInput = &nUserDigInput[i];
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	4a12      	ldr	r2, [pc, #72]	; (80123c4 <ReadPdmConfig+0x1f4>)
 801237a:	1899      	adds	r1, r3, r2
 801237c:	4808      	ldr	r0, [pc, #32]	; (80123a0 <ReadPdmConfig+0x1d0>)
 801237e:	697a      	ldr	r2, [r7, #20]
 8012380:	4613      	mov	r3, r2
 8012382:	00db      	lsls	r3, r3, #3
 8012384:	1a9b      	subs	r3, r3, r2
 8012386:	009b      	lsls	r3, r3, #2
 8012388:	4403      	add	r3, r0
 801238a:	330c      	adds	r3, #12
 801238c:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	3301      	adds	r3, #1
 8012392:	617b      	str	r3, [r7, #20]
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	2b07      	cmp	r3, #7
 8012398:	dded      	ble.n	8012376 <ReadPdmConfig+0x1a6>
  }

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 801239a:	2300      	movs	r3, #0
 801239c:	613b      	str	r3, [r7, #16]
 801239e:	e058      	b.n	8012452 <ReadPdmConfig+0x282>
 80123a0:	20002a44 	.word	0x20002a44
 80123a4:	20003330 	.word	0x20003330
 80123a8:	20003824 	.word	0x20003824
 80123ac:	20003700 	.word	0x20003700
 80123b0:	20003834 	.word	0x20003834
 80123b4:	20003870 	.word	0x20003870
 80123b8:	20003898 	.word	0x20003898
 80123bc:	200036b2 	.word	0x200036b2
 80123c0:	200036b4 	.word	0x200036b4
 80123c4:	200035fc 	.word	0x200035fc
  {
    stPdmConfig.stVirtualInput[i].pVar0 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar0];
 80123c8:	497b      	ldr	r1, [pc, #492]	; (80125b8 <ReadPdmConfig+0x3e8>)
 80123ca:	693a      	ldr	r2, [r7, #16]
 80123cc:	4613      	mov	r3, r2
 80123ce:	009b      	lsls	r3, r3, #2
 80123d0:	4413      	add	r3, r2
 80123d2:	00db      	lsls	r3, r3, #3
 80123d4:	440b      	add	r3, r1
 80123d6:	33ea      	adds	r3, #234	; 0xea
 80123d8:	781b      	ldrb	r3, [r3, #0]
 80123da:	461a      	mov	r2, r3
 80123dc:	4b77      	ldr	r3, [pc, #476]	; (80125bc <ReadPdmConfig+0x3ec>)
 80123de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80123e2:	4875      	ldr	r0, [pc, #468]	; (80125b8 <ReadPdmConfig+0x3e8>)
 80123e4:	693a      	ldr	r2, [r7, #16]
 80123e6:	4613      	mov	r3, r2
 80123e8:	009b      	lsls	r3, r3, #2
 80123ea:	4413      	add	r3, r2
 80123ec:	00db      	lsls	r3, r3, #3
 80123ee:	4403      	add	r3, r0
 80123f0:	33ec      	adds	r3, #236	; 0xec
 80123f2:	6019      	str	r1, [r3, #0]
    stPdmConfig.stVirtualInput[i].pVar1 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar1];
 80123f4:	4970      	ldr	r1, [pc, #448]	; (80125b8 <ReadPdmConfig+0x3e8>)
 80123f6:	693a      	ldr	r2, [r7, #16]
 80123f8:	4613      	mov	r3, r2
 80123fa:	009b      	lsls	r3, r3, #2
 80123fc:	4413      	add	r3, r2
 80123fe:	00db      	lsls	r3, r3, #3
 8012400:	440b      	add	r3, r1
 8012402:	33f2      	adds	r3, #242	; 0xf2
 8012404:	781b      	ldrb	r3, [r3, #0]
 8012406:	461a      	mov	r2, r3
 8012408:	4b6c      	ldr	r3, [pc, #432]	; (80125bc <ReadPdmConfig+0x3ec>)
 801240a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801240e:	486a      	ldr	r0, [pc, #424]	; (80125b8 <ReadPdmConfig+0x3e8>)
 8012410:	693a      	ldr	r2, [r7, #16]
 8012412:	4613      	mov	r3, r2
 8012414:	009b      	lsls	r3, r3, #2
 8012416:	4413      	add	r3, r2
 8012418:	00db      	lsls	r3, r3, #3
 801241a:	4403      	add	r3, r0
 801241c:	33f4      	adds	r3, #244	; 0xf4
 801241e:	6019      	str	r1, [r3, #0]
    stPdmConfig.stVirtualInput[i].pVar2 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar2];
 8012420:	4965      	ldr	r1, [pc, #404]	; (80125b8 <ReadPdmConfig+0x3e8>)
 8012422:	693a      	ldr	r2, [r7, #16]
 8012424:	4613      	mov	r3, r2
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	4413      	add	r3, r2
 801242a:	00db      	lsls	r3, r3, #3
 801242c:	440b      	add	r3, r1
 801242e:	33fa      	adds	r3, #250	; 0xfa
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	461a      	mov	r2, r3
 8012434:	4b61      	ldr	r3, [pc, #388]	; (80125bc <ReadPdmConfig+0x3ec>)
 8012436:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801243a:	485f      	ldr	r0, [pc, #380]	; (80125b8 <ReadPdmConfig+0x3e8>)
 801243c:	693a      	ldr	r2, [r7, #16]
 801243e:	4613      	mov	r3, r2
 8012440:	009b      	lsls	r3, r3, #2
 8012442:	4413      	add	r3, r2
 8012444:	00db      	lsls	r3, r3, #3
 8012446:	4403      	add	r3, r0
 8012448:	33fc      	adds	r3, #252	; 0xfc
 801244a:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	3301      	adds	r3, #1
 8012450:	613b      	str	r3, [r7, #16]
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	2b13      	cmp	r3, #19
 8012456:	ddb7      	ble.n	80123c8 <ReadPdmConfig+0x1f8>
  }

  stWiper.eMode = stPdmConfig.stWiper.nMode;
 8012458:	4b57      	ldr	r3, [pc, #348]	; (80125b8 <ReadPdmConfig+0x3e8>)
 801245a:	f893 24f9 	ldrb.w	r2, [r3, #1273]	; 0x4f9
 801245e:	4b58      	ldr	r3, [pc, #352]	; (80125c0 <ReadPdmConfig+0x3f0>)
 8012460:	701a      	strb	r2, [r3, #0]
  stWiper.pSlowInput = pVariableMap[stPdmConfig.stWiper.nSlowInput];
 8012462:	4b55      	ldr	r3, [pc, #340]	; (80125b8 <ReadPdmConfig+0x3e8>)
 8012464:	f893 34fa 	ldrb.w	r3, [r3, #1274]	; 0x4fa
 8012468:	461a      	mov	r2, r3
 801246a:	4b54      	ldr	r3, [pc, #336]	; (80125bc <ReadPdmConfig+0x3ec>)
 801246c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012470:	4a53      	ldr	r2, [pc, #332]	; (80125c0 <ReadPdmConfig+0x3f0>)
 8012472:	6253      	str	r3, [r2, #36]	; 0x24
  stWiper.pFastInput = pVariableMap[stPdmConfig.stWiper.nFastInput];
 8012474:	4b50      	ldr	r3, [pc, #320]	; (80125b8 <ReadPdmConfig+0x3e8>)
 8012476:	f893 34fb 	ldrb.w	r3, [r3, #1275]	; 0x4fb
 801247a:	461a      	mov	r2, r3
 801247c:	4b4f      	ldr	r3, [pc, #316]	; (80125bc <ReadPdmConfig+0x3ec>)
 801247e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012482:	4a4f      	ldr	r2, [pc, #316]	; (80125c0 <ReadPdmConfig+0x3f0>)
 8012484:	6293      	str	r3, [r2, #40]	; 0x28
  stWiper.pInterInput = pVariableMap[stPdmConfig.stWiper.nInterInput];
 8012486:	4b4c      	ldr	r3, [pc, #304]	; (80125b8 <ReadPdmConfig+0x3e8>)
 8012488:	f893 34fc 	ldrb.w	r3, [r3, #1276]	; 0x4fc
 801248c:	461a      	mov	r2, r3
 801248e:	4b4b      	ldr	r3, [pc, #300]	; (80125bc <ReadPdmConfig+0x3ec>)
 8012490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012494:	4a4a      	ldr	r2, [pc, #296]	; (80125c0 <ReadPdmConfig+0x3f0>)
 8012496:	62d3      	str	r3, [r2, #44]	; 0x2c
  stWiper.pSwipeInput = pVariableMap[stPdmConfig.stWiper.nSwipeInput];
 8012498:	4b47      	ldr	r3, [pc, #284]	; (80125b8 <ReadPdmConfig+0x3e8>)
 801249a:	f893 3501 	ldrb.w	r3, [r3, #1281]	; 0x501
 801249e:	461a      	mov	r2, r3
 80124a0:	4b46      	ldr	r3, [pc, #280]	; (80125bc <ReadPdmConfig+0x3ec>)
 80124a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124a6:	4a46      	ldr	r2, [pc, #280]	; (80125c0 <ReadPdmConfig+0x3f0>)
 80124a8:	6193      	str	r3, [r2, #24]
  stWiper.pOnSw = pVariableMap[stPdmConfig.stWiper.nOnInput];
 80124aa:	4b43      	ldr	r3, [pc, #268]	; (80125b8 <ReadPdmConfig+0x3e8>)
 80124ac:	f893 34fd 	ldrb.w	r3, [r3, #1277]	; 0x4fd
 80124b0:	461a      	mov	r2, r3
 80124b2:	4b42      	ldr	r3, [pc, #264]	; (80125bc <ReadPdmConfig+0x3ec>)
 80124b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124b8:	4a41      	ldr	r2, [pc, #260]	; (80125c0 <ReadPdmConfig+0x3f0>)
 80124ba:	6413      	str	r3, [r2, #64]	; 0x40
  stWiper.pParkSw = pVariableMap[stPdmConfig.stWiper.nParkInput];
 80124bc:	4b3e      	ldr	r3, [pc, #248]	; (80125b8 <ReadPdmConfig+0x3e8>)
 80124be:	f893 34ff 	ldrb.w	r3, [r3, #1279]	; 0x4ff
 80124c2:	461a      	mov	r2, r3
 80124c4:	4b3d      	ldr	r3, [pc, #244]	; (80125bc <ReadPdmConfig+0x3ec>)
 80124c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124ca:	4a3d      	ldr	r2, [pc, #244]	; (80125c0 <ReadPdmConfig+0x3f0>)
 80124cc:	6093      	str	r3, [r2, #8]
  stWiper.pSpeedInput = pVariableMap[stPdmConfig.stWiper.nSpeedInput];
 80124ce:	4b3a      	ldr	r3, [pc, #232]	; (80125b8 <ReadPdmConfig+0x3e8>)
 80124d0:	f893 34fe 	ldrb.w	r3, [r3, #1278]	; 0x4fe
 80124d4:	461a      	mov	r2, r3
 80124d6:	4b39      	ldr	r3, [pc, #228]	; (80125bc <ReadPdmConfig+0x3ec>)
 80124d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124dc:	4a38      	ldr	r2, [pc, #224]	; (80125c0 <ReadPdmConfig+0x3f0>)
 80124de:	6313      	str	r3, [r2, #48]	; 0x30
  stWiper.pWashInput = pVariableMap[stPdmConfig.stWiper.nWashInput];
 80124e0:	4b35      	ldr	r3, [pc, #212]	; (80125b8 <ReadPdmConfig+0x3e8>)
 80124e2:	f893 3502 	ldrb.w	r3, [r3, #1282]	; 0x502
 80124e6:	461a      	mov	r2, r3
 80124e8:	4b34      	ldr	r3, [pc, #208]	; (80125bc <ReadPdmConfig+0x3ec>)
 80124ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124ee:	4a34      	ldr	r2, [pc, #208]	; (80125c0 <ReadPdmConfig+0x3f0>)
 80124f0:	61d3      	str	r3, [r2, #28]
  stWiper.nWashWipeCycles = stPdmConfig.stWiper.nWashWipeCycles;
 80124f2:	4b31      	ldr	r3, [pc, #196]	; (80125b8 <ReadPdmConfig+0x3e8>)
 80124f4:	f893 2503 	ldrb.w	r2, [r3, #1283]	; 0x503
 80124f8:	4b31      	ldr	r3, [pc, #196]	; (80125c0 <ReadPdmConfig+0x3f0>)
 80124fa:	f883 2020 	strb.w	r2, [r3, #32]
  for(int i=0; i<PDM_NUM_WIPER_INTER_DELAYS; i++)
 80124fe:	2300      	movs	r3, #0
 8012500:	60fb      	str	r3, [r7, #12]
 8012502:	e010      	b.n	8012526 <ReadPdmConfig+0x356>
    stWiper.nInterDelays[i] = stPdmConfig.stWiper.nIntermitTime[i];
 8012504:	4a2c      	ldr	r2, [pc, #176]	; (80125b8 <ReadPdmConfig+0x3e8>)
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801250c:	005b      	lsls	r3, r3, #1
 801250e:	4413      	add	r3, r2
 8012510:	8899      	ldrh	r1, [r3, #4]
 8012512:	4a2b      	ldr	r2, [pc, #172]	; (80125c0 <ReadPdmConfig+0x3f0>)
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	3304      	adds	r3, #4
 8012518:	005b      	lsls	r3, r3, #1
 801251a:	4413      	add	r3, r2
 801251c:	460a      	mov	r2, r1
 801251e:	809a      	strh	r2, [r3, #4]
  for(int i=0; i<PDM_NUM_WIPER_INTER_DELAYS; i++)
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	3301      	adds	r3, #1
 8012524:	60fb      	str	r3, [r7, #12]
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	2b05      	cmp	r3, #5
 801252a:	ddeb      	ble.n	8012504 <ReadPdmConfig+0x334>
  for(int i=0; i<PDM_NUM_WIPER_SPEED_MAP; i++)
 801252c:	2300      	movs	r3, #0
 801252e:	60bb      	str	r3, [r7, #8]
 8012530:	e00e      	b.n	8012550 <ReadPdmConfig+0x380>
    stWiper.eSpeedMap[i] = (WiperSpeed_t)stPdmConfig.stWiper.nSpeedMap[i];
 8012532:	4a21      	ldr	r2, [pc, #132]	; (80125b8 <ReadPdmConfig+0x3e8>)
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	4413      	add	r3, r2
 8012538:	f203 5304 	addw	r3, r3, #1284	; 0x504
 801253c:	7819      	ldrb	r1, [r3, #0]
 801253e:	4a20      	ldr	r2, [pc, #128]	; (80125c0 <ReadPdmConfig+0x3f0>)
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	4413      	add	r3, r2
 8012544:	3334      	adds	r3, #52	; 0x34
 8012546:	460a      	mov	r2, r1
 8012548:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<PDM_NUM_WIPER_SPEED_MAP; i++)
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	3301      	adds	r3, #1
 801254e:	60bb      	str	r3, [r7, #8]
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	2b07      	cmp	r3, #7
 8012554:	dded      	ble.n	8012532 <ReadPdmConfig+0x362>

  stPdmConfig.stStarter.pInput = pVariableMap[stPdmConfig.stStarter.nInput];
 8012556:	4b18      	ldr	r3, [pc, #96]	; (80125b8 <ReadPdmConfig+0x3e8>)
 8012558:	f893 3579 	ldrb.w	r3, [r3, #1401]	; 0x579
 801255c:	461a      	mov	r2, r3
 801255e:	4b17      	ldr	r3, [pc, #92]	; (80125bc <ReadPdmConfig+0x3ec>)
 8012560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012564:	4a14      	ldr	r2, [pc, #80]	; (80125b8 <ReadPdmConfig+0x3e8>)
 8012566:	f8c2 357c 	str.w	r3, [r2, #1404]	; 0x57c

  for(int i=0; i<PDM_NUM_FLASHERS; i++)
 801256a:	2300      	movs	r3, #0
 801256c:	607b      	str	r3, [r7, #4]
 801256e:	e01a      	b.n	80125a6 <ReadPdmConfig+0x3d6>
    stPdmConfig.stFlasher[i].pInput = pVariableMap[stPdmConfig.stFlasher[i].nInput];
 8012570:	4911      	ldr	r1, [pc, #68]	; (80125b8 <ReadPdmConfig+0x3e8>)
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	4613      	mov	r3, r2
 8012576:	005b      	lsls	r3, r3, #1
 8012578:	4413      	add	r3, r2
 801257a:	00db      	lsls	r3, r3, #3
 801257c:	440b      	add	r3, r1
 801257e:	f203 5319 	addw	r3, r3, #1305	; 0x519
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	461a      	mov	r2, r3
 8012586:	4b0d      	ldr	r3, [pc, #52]	; (80125bc <ReadPdmConfig+0x3ec>)
 8012588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801258c:	480a      	ldr	r0, [pc, #40]	; (80125b8 <ReadPdmConfig+0x3e8>)
 801258e:	687a      	ldr	r2, [r7, #4]
 8012590:	4613      	mov	r3, r2
 8012592:	005b      	lsls	r3, r3, #1
 8012594:	4413      	add	r3, r2
 8012596:	00db      	lsls	r3, r3, #3
 8012598:	4403      	add	r3, r0
 801259a:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 801259e:	6019      	str	r1, [r3, #0]
  for(int i=0; i<PDM_NUM_FLASHERS; i++)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	3301      	adds	r3, #1
 80125a4:	607b      	str	r3, [r7, #4]
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2b03      	cmp	r3, #3
 80125aa:	dde1      	ble.n	8012570 <ReadPdmConfig+0x3a0>


  return PDM_OK;
 80125ac:	2301      	movs	r3, #1

}
 80125ae:	4618      	mov	r0, r3
 80125b0:	3730      	adds	r7, #48	; 0x30
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	20002a44 	.word	0x20002a44
 80125bc:	20003700 	.word	0x20003700
 80125c0:	200036b0 	.word	0x200036b0

080125c4 <EvaluateFlasher>:
 */

#include "flasher.h"

void EvaluateFlasher(PdmConfig_Flasher_t* pFlasher, uint16_t pResult[12])
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b082      	sub	sp, #8
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
  if(!pFlasher->nEnabled){
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d107      	bne.n	80125e6 <EvaluateFlasher+0x22>
    pResult[pFlasher->nOutput] = 1;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	7b5b      	ldrb	r3, [r3, #13]
 80125da:	005b      	lsls	r3, r3, #1
 80125dc:	683a      	ldr	r2, [r7, #0]
 80125de:	4413      	add	r3, r2
 80125e0:	2201      	movs	r2, #1
 80125e2:	801a      	strh	r2, [r3, #0]
    return;
 80125e4:	e048      	b.n	8012678 <EvaluateFlasher+0xb4>
  }
  if(!*pFlasher->pInput){
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	881b      	ldrh	r3, [r3, #0]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d107      	bne.n	8012600 <EvaluateFlasher+0x3c>
    pResult[pFlasher->nOutput] = 1;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	7b5b      	ldrb	r3, [r3, #13]
 80125f4:	005b      	lsls	r3, r3, #1
 80125f6:	683a      	ldr	r2, [r7, #0]
 80125f8:	4413      	add	r3, r2
 80125fa:	2201      	movs	r2, #1
 80125fc:	801a      	strh	r2, [r3, #0]
    return;
 80125fe:	e03b      	b.n	8012678 <EvaluateFlasher+0xb4>
  }

  if((pResult[pFlasher->nOutput] == 0) && ((HAL_GetTick() - pFlasher->nTimeOff) > pFlasher->nFlashOffTime)){
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	7b5b      	ldrb	r3, [r3, #13]
 8012604:	005b      	lsls	r3, r3, #1
 8012606:	683a      	ldr	r2, [r7, #0]
 8012608:	4413      	add	r3, r2
 801260a:	881b      	ldrh	r3, [r3, #0]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d115      	bne.n	801263c <EvaluateFlasher+0x78>
 8012610:	f7f0 f940 	bl	8002894 <HAL_GetTick>
 8012614:	4602      	mov	r2, r0
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	691b      	ldr	r3, [r3, #16]
 801261a:	1ad3      	subs	r3, r2, r3
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	8952      	ldrh	r2, [r2, #10]
 8012620:	4293      	cmp	r3, r2
 8012622:	d90b      	bls.n	801263c <EvaluateFlasher+0x78>
    pResult[pFlasher->nOutput] = 1;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	7b5b      	ldrb	r3, [r3, #13]
 8012628:	005b      	lsls	r3, r3, #1
 801262a:	683a      	ldr	r2, [r7, #0]
 801262c:	4413      	add	r3, r2
 801262e:	2201      	movs	r2, #1
 8012630:	801a      	strh	r2, [r3, #0]
    pFlasher->nTimeOn = HAL_GetTick();
 8012632:	f7f0 f92f 	bl	8002894 <HAL_GetTick>
 8012636:	4602      	mov	r2, r0
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	615a      	str	r2, [r3, #20]
  }
  if((pResult[pFlasher->nOutput] == 1) && ((HAL_GetTick() - pFlasher->nTimeOn) > pFlasher->nFlashOnTime)){
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	7b5b      	ldrb	r3, [r3, #13]
 8012640:	005b      	lsls	r3, r3, #1
 8012642:	683a      	ldr	r2, [r7, #0]
 8012644:	4413      	add	r3, r2
 8012646:	881b      	ldrh	r3, [r3, #0]
 8012648:	2b01      	cmp	r3, #1
 801264a:	d115      	bne.n	8012678 <EvaluateFlasher+0xb4>
 801264c:	f7f0 f922 	bl	8002894 <HAL_GetTick>
 8012650:	4602      	mov	r2, r0
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	695b      	ldr	r3, [r3, #20]
 8012656:	1ad3      	subs	r3, r2, r3
 8012658:	687a      	ldr	r2, [r7, #4]
 801265a:	8912      	ldrh	r2, [r2, #8]
 801265c:	4293      	cmp	r3, r2
 801265e:	d90b      	bls.n	8012678 <EvaluateFlasher+0xb4>
    pResult[pFlasher->nOutput] = 0;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	7b5b      	ldrb	r3, [r3, #13]
 8012664:	005b      	lsls	r3, r3, #1
 8012666:	683a      	ldr	r2, [r7, #0]
 8012668:	4413      	add	r3, r2
 801266a:	2200      	movs	r2, #0
 801266c:	801a      	strh	r2, [r3, #0]
    pFlasher->nTimeOff = HAL_GetTick();
 801266e:	f7f0 f911 	bl	8002894 <HAL_GetTick>
 8012672:	4602      	mov	r2, r0
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	611a      	str	r2, [r3, #16]
  }

}
 8012678:	3708      	adds	r7, #8
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}
	...

08012680 <PdmConfig_Set>:
  MB85RC_Write(hi2c, nAddr, 0x0, (uint8_t*)pConfig, sizeof(*pConfig));

  return 1;
}

uint8_t PdmConfig_Set(PdmConfig_t* pConfig, MsgQueueRx_t* stMsgRx, osMessageQueueId_t* qMsgQueueUsbTx, osMessageQueueId_t* qMsgQueueCanTx){
 8012680:	b580      	push	{r7, lr}
 8012682:	b084      	sub	sp, #16
 8012684:	af00      	add	r7, sp, #0
 8012686:	60f8      	str	r0, [r7, #12]
 8012688:	60b9      	str	r1, [r7, #8]
 801268a:	607a      	str	r2, [r7, #4]
 801268c:	603b      	str	r3, [r7, #0]

  nSend = 0;
 801268e:	4b73      	ldr	r3, [pc, #460]	; (801285c <PdmConfig_Set+0x1dc>)
 8012690:	2200      	movs	r2, #0
 8012692:	701a      	strb	r2, [r3, #0]

  switch((MsgQueueRxCmd_t)stMsgRx->nRxData[0]){
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	f893 3020 	ldrb.w	r3, [r3, #32]
 801269a:	3b43      	subs	r3, #67	; 0x43
 801269c:	2b16      	cmp	r3, #22
 801269e:	f201 8306 	bhi.w	8013cae <PdmConfig_Set+0x162e>
 80126a2:	a201      	add	r2, pc, #4	; (adr r2, 80126a8 <PdmConfig_Set+0x28>)
 80126a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126a8:	08012705 	.word	0x08012705
 80126ac:	08013761 	.word	0x08013761
 80126b0:	08013caf 	.word	0x08013caf
 80126b4:	08013caf 	.word	0x08013caf
 80126b8:	08013caf 	.word	0x08013caf
 80126bc:	080134f5 	.word	0x080134f5
 80126c0:	0801286d 	.word	0x0801286d
 80126c4:	08013caf 	.word	0x08013caf
 80126c8:	08013caf 	.word	0x08013caf
 80126cc:	08012851 	.word	0x08012851
 80126d0:	08013caf 	.word	0x08013caf
 80126d4:	080139d5 	.word	0x080139d5
 80126d8:	08012a05 	.word	0x08012a05
 80126dc:	080131ad 	.word	0x080131ad
 80126e0:	08013caf 	.word	0x08013caf
 80126e4:	08013caf 	.word	0x08013caf
 80126e8:	08013caf 	.word	0x08013caf
 80126ec:	08013caf 	.word	0x08013caf
 80126f0:	08012d11 	.word	0x08012d11
 80126f4:	08013c61 	.word	0x08013c61
 80126f8:	0801303f 	.word	0x0801303f
 80126fc:	08013caf 	.word	0x08013caf
 8012700:	0801334f 	.word	0x0801334f

    //Set CAN Settings
    // 'C'
    case MSG_RX_SET_CAN:
      if(stMsgRx->nRxLen == 5){
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801270a:	2b05      	cmp	r3, #5
 801270c:	d146      	bne.n	801279c <PdmConfig_Set+0x11c>

        pConfig->stDevConfig.nCanEnabled = stMsgRx->nRxData[1] & 0x01;
 801270e:	68bb      	ldr	r3, [r7, #8]
 8012710:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012714:	f003 0301 	and.w	r3, r3, #1
 8012718:	b2da      	uxtb	r2, r3
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	705a      	strb	r2, [r3, #1]
        pConfig->stCanOutput.nEnabled = (stMsgRx->nRxData[1] & 0x02) >> 1;
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012724:	105b      	asrs	r3, r3, #1
 8012726:	b2db      	uxtb	r3, r3
 8012728:	f003 0301 	and.w	r3, r3, #1
 801272c:	b2da      	uxtb	r2, r3
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
        pConfig->stDevConfig.nCanTerm = (stMsgRx->nRxData[1] & 0x04) >> 2;
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801273a:	109b      	asrs	r3, r3, #2
 801273c:	b2db      	uxtb	r3, r3
 801273e:	f003 0301 	and.w	r3, r3, #1
 8012742:	b2da      	uxtb	r2, r3
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	709a      	strb	r2, [r3, #2]
        pConfig->stDevConfig.nCanSpeed = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801274e:	091b      	lsrs	r3, r3, #4
 8012750:	b2da      	uxtb	r2, r3
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	70da      	strb	r2, [r3, #3]

        pConfig->stCanOutput.nBaseId = (stMsgRx->nRxData[2] << 8) + stMsgRx->nRxData[3];
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801275c:	b29b      	uxth	r3, r3
 801275e:	021b      	lsls	r3, r3, #8
 8012760:	b29a      	uxth	r2, r3
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012768:	b29b      	uxth	r3, r3
 801276a:	4413      	add	r3, r2
 801276c:	b29a      	uxth	r2, r3
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	f8a3 28d6 	strh.w	r2, [r3, #2262]	; 0x8d6
        pConfig->stCanOutput.nUpdateTime = stMsgRx->nRxData[4] * 100;
 8012774:	68bb      	ldr	r3, [r7, #8]
 8012776:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801277a:	b29b      	uxth	r3, r3
 801277c:	461a      	mov	r2, r3
 801277e:	0092      	lsls	r2, r2, #2
 8012780:	4413      	add	r3, r2
 8012782:	461a      	mov	r2, r3
 8012784:	0091      	lsls	r1, r2, #2
 8012786:	461a      	mov	r2, r3
 8012788:	460b      	mov	r3, r1
 801278a:	4413      	add	r3, r2
 801278c:	009b      	lsls	r3, r3, #2
 801278e:	b29a      	uxth	r2, r3
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	f8a3 28d8 	strh.w	r2, [r3, #2264]	; 0x8d8
        nSend = 1;
 8012796:	4b31      	ldr	r3, [pc, #196]	; (801285c <PdmConfig_Set+0x1dc>)
 8012798:	2201      	movs	r2, #1
 801279a:	701a      	strb	r2, [r3, #0]
      }

      if((stMsgRx->nRxLen == 1) || (nSend)){
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127a2:	2b01      	cmp	r3, #1
 80127a4:	d004      	beq.n	80127b0 <PdmConfig_Set+0x130>
 80127a6:	4b2d      	ldr	r3, [pc, #180]	; (801285c <PdmConfig_Set+0x1dc>)
 80127a8:	781b      	ldrb	r3, [r3, #0]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	f001 8281 	beq.w	8013cb2 <PdmConfig_Set+0x1632>
        stMsgUsbTx.nTxLen = 5;
 80127b0:	4b2b      	ldr	r3, [pc, #172]	; (8012860 <PdmConfig_Set+0x1e0>)
 80127b2:	2205      	movs	r2, #5
 80127b4:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 80127b6:	4b2b      	ldr	r3, [pc, #172]	; (8012864 <PdmConfig_Set+0x1e4>)
 80127b8:	2205      	movs	r2, #5
 80127ba:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_CAN;
 80127bc:	4b28      	ldr	r3, [pc, #160]	; (8012860 <PdmConfig_Set+0x1e0>)
 80127be:	2263      	movs	r2, #99	; 0x63
 80127c0:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stDevConfig.nCanSpeed & 0x0F) << 4) + ((pConfig->stDevConfig.nCanTerm & 0x01) << 2) + ((pConfig->stCanOutput.nEnabled & 0x01) << 1) + (pConfig->stDevConfig.nCanEnabled & 0x01);
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	78db      	ldrb	r3, [r3, #3]
 80127c6:	011b      	lsls	r3, r3, #4
 80127c8:	b2da      	uxtb	r2, r3
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	789b      	ldrb	r3, [r3, #2]
 80127ce:	009b      	lsls	r3, r3, #2
 80127d0:	b2db      	uxtb	r3, r3
 80127d2:	f003 0304 	and.w	r3, r3, #4
 80127d6:	b2db      	uxtb	r3, r3
 80127d8:	4413      	add	r3, r2
 80127da:	b2da      	uxtb	r2, r3
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	f893 38d4 	ldrb.w	r3, [r3, #2260]	; 0x8d4
 80127e2:	005b      	lsls	r3, r3, #1
 80127e4:	b2db      	uxtb	r3, r3
 80127e6:	f003 0302 	and.w	r3, r3, #2
 80127ea:	b2db      	uxtb	r3, r3
 80127ec:	4413      	add	r3, r2
 80127ee:	b2da      	uxtb	r2, r3
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	785b      	ldrb	r3, [r3, #1]
 80127f4:	f003 0301 	and.w	r3, r3, #1
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	4413      	add	r3, r2
 80127fc:	b2da      	uxtb	r2, r3
 80127fe:	4b18      	ldr	r3, [pc, #96]	; (8012860 <PdmConfig_Set+0x1e0>)
 8012800:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)((pConfig->stCanOutput.nBaseId & 0xFF00) >> 8);
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8012808:	0a1b      	lsrs	r3, r3, #8
 801280a:	b29b      	uxth	r3, r3
 801280c:	b2da      	uxtb	r2, r3
 801280e:	4b14      	ldr	r3, [pc, #80]	; (8012860 <PdmConfig_Set+0x1e0>)
 8012810:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stCanOutput.nBaseId & 0x00FF);
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8012818:	b2da      	uxtb	r2, r3
 801281a:	4b11      	ldr	r3, [pc, #68]	; (8012860 <PdmConfig_Set+0x1e0>)
 801281c:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)((pConfig->stCanOutput.nUpdateTime) / 100);
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
 8012824:	4a10      	ldr	r2, [pc, #64]	; (8012868 <PdmConfig_Set+0x1e8>)
 8012826:	fba2 2303 	umull	r2, r3, r2, r3
 801282a:	095b      	lsrs	r3, r3, #5
 801282c:	b29b      	uxth	r3, r3
 801282e:	b2da      	uxtb	r2, r3
 8012830:	4b0b      	ldr	r3, [pc, #44]	; (8012860 <PdmConfig_Set+0x1e0>)
 8012832:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8012834:	4b0a      	ldr	r3, [pc, #40]	; (8012860 <PdmConfig_Set+0x1e0>)
 8012836:	2200      	movs	r2, #0
 8012838:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 801283a:	4b09      	ldr	r3, [pc, #36]	; (8012860 <PdmConfig_Set+0x1e0>)
 801283c:	2200      	movs	r2, #0
 801283e:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8012840:	4b07      	ldr	r3, [pc, #28]	; (8012860 <PdmConfig_Set+0x1e0>)
 8012842:	2200      	movs	r2, #0
 8012844:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8012846:	4b05      	ldr	r3, [pc, #20]	; (801285c <PdmConfig_Set+0x1dc>)
 8012848:	2201      	movs	r2, #1
 801284a:	701a      	strb	r2, [r3, #0]
      }
    break;
 801284c:	f001 ba31 	b.w	8013cb2 <PdmConfig_Set+0x1632>
    // 'L'
    case MSG_RX_SET_LOGGING:
      if(stMsgRx->nRxLen == 3){
        //TODO:Send response
      }
      if((stMsgRx->nRxLen == 1) || (nSend)){
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012856:	2b01      	cmp	r3, #1

      }
    break;
 8012858:	f001 ba49 	b.w	8013cee <PdmConfig_Set+0x166e>
 801285c:	20004be4 	.word	0x20004be4
 8012860:	20004bb8 	.word	0x20004bb8
 8012864:	20004bc4 	.word	0x20004bc4
 8012868:	51eb851f 	.word	0x51eb851f

    //Set Input Settings
    // 'I'
    case MSG_RX_SET_INPUTS:
      if(stMsgRx->nRxLen == 3){
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012872:	2b03      	cmp	r3, #3
 8012874:	d14e      	bne.n	8012914 <PdmConfig_Set+0x294>
        nInNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801287c:	091b      	lsrs	r3, r3, #4
 801287e:	b2da      	uxtb	r2, r3
 8012880:	4b5b      	ldr	r3, [pc, #364]	; (80129f0 <PdmConfig_Set+0x370>)
 8012882:	701a      	strb	r2, [r3, #0]
        if(nInNum < PDM_NUM_INPUTS){
 8012884:	4b5a      	ldr	r3, [pc, #360]	; (80129f0 <PdmConfig_Set+0x370>)
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	2b07      	cmp	r3, #7
 801288a:	d843      	bhi.n	8012914 <PdmConfig_Set+0x294>
          pConfig->stInput[nInNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012892:	4a57      	ldr	r2, [pc, #348]	; (80129f0 <PdmConfig_Set+0x370>)
 8012894:	7812      	ldrb	r2, [r2, #0]
 8012896:	4611      	mov	r1, r2
 8012898:	f003 0301 	and.w	r3, r3, #1
 801289c:	b2d8      	uxtb	r0, r3
 801289e:	68fa      	ldr	r2, [r7, #12]
 80128a0:	460b      	mov	r3, r1
 80128a2:	00db      	lsls	r3, r3, #3
 80128a4:	1a5b      	subs	r3, r3, r1
 80128a6:	009b      	lsls	r3, r3, #2
 80128a8:	4413      	add	r3, r2
 80128aa:	3308      	adds	r3, #8
 80128ac:	4602      	mov	r2, r0
 80128ae:	701a      	strb	r2, [r3, #0]
          pConfig->stInput[nInNum].eMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80128b6:	105b      	asrs	r3, r3, #1
 80128b8:	b2db      	uxtb	r3, r3
 80128ba:	4a4d      	ldr	r2, [pc, #308]	; (80129f0 <PdmConfig_Set+0x370>)
 80128bc:	7812      	ldrb	r2, [r2, #0]
 80128be:	4611      	mov	r1, r2
 80128c0:	f003 0303 	and.w	r3, r3, #3
 80128c4:	b2d8      	uxtb	r0, r3
 80128c6:	68fa      	ldr	r2, [r7, #12]
 80128c8:	460b      	mov	r3, r1
 80128ca:	00db      	lsls	r3, r3, #3
 80128cc:	1a5b      	subs	r3, r3, r1
 80128ce:	009b      	lsls	r3, r3, #2
 80128d0:	4413      	add	r3, r2
 80128d2:	3310      	adds	r3, #16
 80128d4:	4602      	mov	r2, r0
 80128d6:	701a      	strb	r2, [r3, #0]
          //TODO:Include binary on level on V3 PCB
          //pConfig->stInput[nInNum].nOnLevel = (stMsgRx->nRxData[1] & 0x08) >> 3;
          pConfig->stInput[nInNum].nDebounceTime = stMsgRx->nRxData[2] * 100;
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80128de:	b29a      	uxth	r2, r3
 80128e0:	4b43      	ldr	r3, [pc, #268]	; (80129f0 <PdmConfig_Set+0x370>)
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	4619      	mov	r1, r3
 80128e6:	4613      	mov	r3, r2
 80128e8:	461a      	mov	r2, r3
 80128ea:	0092      	lsls	r2, r2, #2
 80128ec:	4413      	add	r3, r2
 80128ee:	461a      	mov	r2, r3
 80128f0:	0090      	lsls	r0, r2, #2
 80128f2:	461a      	mov	r2, r3
 80128f4:	4603      	mov	r3, r0
 80128f6:	4413      	add	r3, r2
 80128f8:	009b      	lsls	r3, r3, #2
 80128fa:	b298      	uxth	r0, r3
 80128fc:	68fa      	ldr	r2, [r7, #12]
 80128fe:	460b      	mov	r3, r1
 8012900:	00db      	lsls	r3, r3, #3
 8012902:	1a5b      	subs	r3, r3, r1
 8012904:	009b      	lsls	r3, r3, #2
 8012906:	4413      	add	r3, r2
 8012908:	3322      	adds	r3, #34	; 0x22
 801290a:	4602      	mov	r2, r0
 801290c:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 801290e:	4b39      	ldr	r3, [pc, #228]	; (80129f4 <PdmConfig_Set+0x374>)
 8012910:	2201      	movs	r2, #1
 8012912:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801291a:	2b02      	cmp	r3, #2
 801291c:	d10d      	bne.n	801293a <PdmConfig_Set+0x2ba>
        nInNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012924:	091b      	lsrs	r3, r3, #4
 8012926:	b2da      	uxtb	r2, r3
 8012928:	4b31      	ldr	r3, [pc, #196]	; (80129f0 <PdmConfig_Set+0x370>)
 801292a:	701a      	strb	r2, [r3, #0]
        if(nInNum < PDM_NUM_INPUTS){
 801292c:	4b30      	ldr	r3, [pc, #192]	; (80129f0 <PdmConfig_Set+0x370>)
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	2b07      	cmp	r3, #7
 8012932:	d802      	bhi.n	801293a <PdmConfig_Set+0x2ba>
          nSend = 1;
 8012934:	4b2f      	ldr	r3, [pc, #188]	; (80129f4 <PdmConfig_Set+0x374>)
 8012936:	2201      	movs	r2, #1
 8012938:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 801293a:	4b2e      	ldr	r3, [pc, #184]	; (80129f4 <PdmConfig_Set+0x374>)
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	f001 81b9 	beq.w	8013cb6 <PdmConfig_Set+0x1636>
        stMsgUsbTx.nTxLen = 3;
 8012944:	4b2c      	ldr	r3, [pc, #176]	; (80129f8 <PdmConfig_Set+0x378>)
 8012946:	2203      	movs	r2, #3
 8012948:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 3;
 801294a:	4b2c      	ldr	r3, [pc, #176]	; (80129fc <PdmConfig_Set+0x37c>)
 801294c:	2203      	movs	r2, #3
 801294e:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_INPUTS;
 8012950:	4b29      	ldr	r3, [pc, #164]	; (80129f8 <PdmConfig_Set+0x378>)
 8012952:	2269      	movs	r2, #105	; 0x69
 8012954:	701a      	strb	r2, [r3, #0]
        //TODO:Add binary On Level on V3 PCB
        stMsgUsbTx.nTxData[1] = ((nInNum & 0x0F) << 4) + ((pConfig->stInput[nInNum].eMode & 0x03) << 2) + (pConfig->stInput[nInNum].nEnabled & 0x01);
 8012956:	4b26      	ldr	r3, [pc, #152]	; (80129f0 <PdmConfig_Set+0x370>)
 8012958:	781b      	ldrb	r3, [r3, #0]
 801295a:	011b      	lsls	r3, r3, #4
 801295c:	b2da      	uxtb	r2, r3
 801295e:	4b24      	ldr	r3, [pc, #144]	; (80129f0 <PdmConfig_Set+0x370>)
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	4618      	mov	r0, r3
 8012964:	68f9      	ldr	r1, [r7, #12]
 8012966:	4603      	mov	r3, r0
 8012968:	00db      	lsls	r3, r3, #3
 801296a:	1a1b      	subs	r3, r3, r0
 801296c:	009b      	lsls	r3, r3, #2
 801296e:	440b      	add	r3, r1
 8012970:	3310      	adds	r3, #16
 8012972:	781b      	ldrb	r3, [r3, #0]
 8012974:	009b      	lsls	r3, r3, #2
 8012976:	b2db      	uxtb	r3, r3
 8012978:	f003 030c 	and.w	r3, r3, #12
 801297c:	b2db      	uxtb	r3, r3
 801297e:	4413      	add	r3, r2
 8012980:	b2da      	uxtb	r2, r3
 8012982:	4b1b      	ldr	r3, [pc, #108]	; (80129f0 <PdmConfig_Set+0x370>)
 8012984:	781b      	ldrb	r3, [r3, #0]
 8012986:	4618      	mov	r0, r3
 8012988:	68f9      	ldr	r1, [r7, #12]
 801298a:	4603      	mov	r3, r0
 801298c:	00db      	lsls	r3, r3, #3
 801298e:	1a1b      	subs	r3, r3, r0
 8012990:	009b      	lsls	r3, r3, #2
 8012992:	440b      	add	r3, r1
 8012994:	3308      	adds	r3, #8
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	f003 0301 	and.w	r3, r3, #1
 801299c:	b2db      	uxtb	r3, r3
 801299e:	4413      	add	r3, r2
 80129a0:	b2da      	uxtb	r2, r3
 80129a2:	4b15      	ldr	r3, [pc, #84]	; (80129f8 <PdmConfig_Set+0x378>)
 80129a4:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)(pConfig->stInput[nInNum].nDebounceTime / 100);
 80129a6:	4b12      	ldr	r3, [pc, #72]	; (80129f0 <PdmConfig_Set+0x370>)
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	4619      	mov	r1, r3
 80129ac:	68fa      	ldr	r2, [r7, #12]
 80129ae:	460b      	mov	r3, r1
 80129b0:	00db      	lsls	r3, r3, #3
 80129b2:	1a5b      	subs	r3, r3, r1
 80129b4:	009b      	lsls	r3, r3, #2
 80129b6:	4413      	add	r3, r2
 80129b8:	3322      	adds	r3, #34	; 0x22
 80129ba:	881b      	ldrh	r3, [r3, #0]
 80129bc:	4a10      	ldr	r2, [pc, #64]	; (8012a00 <PdmConfig_Set+0x380>)
 80129be:	fba2 2303 	umull	r2, r3, r2, r3
 80129c2:	095b      	lsrs	r3, r3, #5
 80129c4:	b29b      	uxth	r3, r3
 80129c6:	b2da      	uxtb	r2, r3
 80129c8:	4b0b      	ldr	r3, [pc, #44]	; (80129f8 <PdmConfig_Set+0x378>)
 80129ca:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = 0;
 80129cc:	4b0a      	ldr	r3, [pc, #40]	; (80129f8 <PdmConfig_Set+0x378>)
 80129ce:	2200      	movs	r2, #0
 80129d0:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = 0;
 80129d2:	4b09      	ldr	r3, [pc, #36]	; (80129f8 <PdmConfig_Set+0x378>)
 80129d4:	2200      	movs	r2, #0
 80129d6:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 80129d8:	4b07      	ldr	r3, [pc, #28]	; (80129f8 <PdmConfig_Set+0x378>)
 80129da:	2200      	movs	r2, #0
 80129dc:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 80129de:	4b06      	ldr	r3, [pc, #24]	; (80129f8 <PdmConfig_Set+0x378>)
 80129e0:	2200      	movs	r2, #0
 80129e2:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 80129e4:	4b04      	ldr	r3, [pc, #16]	; (80129f8 <PdmConfig_Set+0x378>)
 80129e6:	2200      	movs	r2, #0
 80129e8:	71da      	strb	r2, [r3, #7]
      }

    break;
 80129ea:	f001 b964 	b.w	8013cb6 <PdmConfig_Set+0x1636>
 80129ee:	bf00      	nop
 80129f0:	20004be5 	.word	0x20004be5
 80129f4:	20004be4 	.word	0x20004be4
 80129f8:	20004bb8 	.word	0x20004bb8
 80129fc:	20004bc4 	.word	0x20004bc4
 8012a00:	51eb851f 	.word	0x51eb851f

    //Set Output Settings
    // 'O'
    case MSG_RX_SET_OUTPUTS:
      if(stMsgRx->nRxLen == 8){
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a0a:	2b08      	cmp	r3, #8
 8012a0c:	f040 80bb 	bne.w	8012b86 <PdmConfig_Set+0x506>
        nOutNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012a16:	091b      	lsrs	r3, r3, #4
 8012a18:	b2da      	uxtb	r2, r3
 8012a1a:	4bb7      	ldr	r3, [pc, #732]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012a1c:	701a      	strb	r2, [r3, #0]
        if(nOutNum < PDM_NUM_OUTPUTS){
 8012a1e:	4bb6      	ldr	r3, [pc, #728]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012a20:	781b      	ldrb	r3, [r3, #0]
 8012a22:	2b0b      	cmp	r3, #11
 8012a24:	f200 80af 	bhi.w	8012b86 <PdmConfig_Set+0x506>
          pConfig->stOutput[nOutNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012a2e:	4ab2      	ldr	r2, [pc, #712]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012a30:	7812      	ldrb	r2, [r2, #0]
 8012a32:	4611      	mov	r1, r2
 8012a34:	f003 0301 	and.w	r3, r3, #1
 8012a38:	b2d8      	uxtb	r0, r3
 8012a3a:	68fa      	ldr	r2, [r7, #12]
 8012a3c:	460b      	mov	r3, r1
 8012a3e:	009b      	lsls	r3, r3, #2
 8012a40:	440b      	add	r3, r1
 8012a42:	009b      	lsls	r3, r3, #2
 8012a44:	4413      	add	r3, r2
 8012a46:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8012a4a:	4602      	mov	r2, r0
 8012a4c:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInput = stMsgRx->nRxData[2];
 8012a4e:	4baa      	ldr	r3, [pc, #680]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012a50:	781b      	ldrb	r3, [r3, #0]
 8012a52:	4619      	mov	r1, r3
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8012a5a:	68fa      	ldr	r2, [r7, #12]
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	009b      	lsls	r3, r3, #2
 8012a60:	440b      	add	r3, r1
 8012a62:	009b      	lsls	r3, r3, #2
 8012a64:	4413      	add	r3, r2
 8012a66:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8012a6a:	4602      	mov	r2, r0
 8012a6c:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nCurrentLimit = stMsgRx->nRxData[3] / 10;
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012a74:	4aa1      	ldr	r2, [pc, #644]	; (8012cfc <PdmConfig_Set+0x67c>)
 8012a76:	fba2 2303 	umull	r2, r3, r2, r3
 8012a7a:	08db      	lsrs	r3, r3, #3
 8012a7c:	b2da      	uxtb	r2, r3
 8012a7e:	4b9e      	ldr	r3, [pc, #632]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	4619      	mov	r1, r3
 8012a84:	b290      	uxth	r0, r2
 8012a86:	68fa      	ldr	r2, [r7, #12]
 8012a88:	460b      	mov	r3, r1
 8012a8a:	009b      	lsls	r3, r3, #2
 8012a8c:	440b      	add	r3, r1
 8012a8e:	009b      	lsls	r3, r3, #2
 8012a90:	4413      	add	r3, r2
 8012a92:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012a96:	4602      	mov	r2, r0
 8012a98:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].eResetMode = (stMsgRx->nRxData[4] & 0x0F);
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012aa0:	4a95      	ldr	r2, [pc, #596]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012aa2:	7812      	ldrb	r2, [r2, #0]
 8012aa4:	4611      	mov	r1, r2
 8012aa6:	f003 030f 	and.w	r3, r3, #15
 8012aaa:	b2d8      	uxtb	r0, r3
 8012aac:	68fa      	ldr	r2, [r7, #12]
 8012aae:	460b      	mov	r3, r1
 8012ab0:	009b      	lsls	r3, r3, #2
 8012ab2:	440b      	add	r3, r1
 8012ab4:	009b      	lsls	r3, r3, #2
 8012ab6:	4413      	add	r3, r2
 8012ab8:	f203 4316 	addw	r3, r3, #1046	; 0x416
 8012abc:	4602      	mov	r2, r0
 8012abe:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nResetLimit = (stMsgRx->nRxData[4] & 0xF0) >> 4;
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012ac6:	4a8c      	ldr	r2, [pc, #560]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012ac8:	7812      	ldrb	r2, [r2, #0]
 8012aca:	4611      	mov	r1, r2
 8012acc:	091b      	lsrs	r3, r3, #4
 8012ace:	b2d8      	uxtb	r0, r3
 8012ad0:	68fa      	ldr	r2, [r7, #12]
 8012ad2:	460b      	mov	r3, r1
 8012ad4:	009b      	lsls	r3, r3, #2
 8012ad6:	440b      	add	r3, r1
 8012ad8:	009b      	lsls	r3, r3, #2
 8012ada:	4413      	add	r3, r2
 8012adc:	f203 431a 	addw	r3, r3, #1050	; 0x41a
 8012ae0:	4602      	mov	r2, r0
 8012ae2:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nResetTime = stMsgRx->nRxData[5] * 100;
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012aea:	b29a      	uxth	r2, r3
 8012aec:	4b82      	ldr	r3, [pc, #520]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	4619      	mov	r1, r3
 8012af2:	4613      	mov	r3, r2
 8012af4:	461a      	mov	r2, r3
 8012af6:	0092      	lsls	r2, r2, #2
 8012af8:	4413      	add	r3, r2
 8012afa:	461a      	mov	r2, r3
 8012afc:	0090      	lsls	r0, r2, #2
 8012afe:	461a      	mov	r2, r3
 8012b00:	4603      	mov	r3, r0
 8012b02:	4413      	add	r3, r2
 8012b04:	009b      	lsls	r3, r3, #2
 8012b06:	b298      	uxth	r0, r3
 8012b08:	68fa      	ldr	r2, [r7, #12]
 8012b0a:	460b      	mov	r3, r1
 8012b0c:	009b      	lsls	r3, r3, #2
 8012b0e:	440b      	add	r3, r1
 8012b10:	009b      	lsls	r3, r3, #2
 8012b12:	4413      	add	r3, r2
 8012b14:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8012b18:	4602      	mov	r2, r0
 8012b1a:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInrushLimit = stMsgRx->nRxData[6] / 10;
 8012b1c:	68bb      	ldr	r3, [r7, #8]
 8012b1e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8012b22:	4a76      	ldr	r2, [pc, #472]	; (8012cfc <PdmConfig_Set+0x67c>)
 8012b24:	fba2 2303 	umull	r2, r3, r2, r3
 8012b28:	08db      	lsrs	r3, r3, #3
 8012b2a:	b2da      	uxtb	r2, r3
 8012b2c:	4b72      	ldr	r3, [pc, #456]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	4619      	mov	r1, r3
 8012b32:	b290      	uxth	r0, r2
 8012b34:	68fa      	ldr	r2, [r7, #12]
 8012b36:	460b      	mov	r3, r1
 8012b38:	009b      	lsls	r3, r3, #2
 8012b3a:	440b      	add	r3, r1
 8012b3c:	009b      	lsls	r3, r3, #2
 8012b3e:	4413      	add	r3, r2
 8012b40:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8012b44:	4602      	mov	r2, r0
 8012b46:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInrushTime = stMsgRx->nRxData[7] * 100;
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012b4e:	b29a      	uxth	r2, r3
 8012b50:	4b69      	ldr	r3, [pc, #420]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	4619      	mov	r1, r3
 8012b56:	4613      	mov	r3, r2
 8012b58:	461a      	mov	r2, r3
 8012b5a:	0092      	lsls	r2, r2, #2
 8012b5c:	4413      	add	r3, r2
 8012b5e:	461a      	mov	r2, r3
 8012b60:	0090      	lsls	r0, r2, #2
 8012b62:	461a      	mov	r2, r3
 8012b64:	4603      	mov	r3, r0
 8012b66:	4413      	add	r3, r2
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	b298      	uxth	r0, r3
 8012b6c:	68fa      	ldr	r2, [r7, #12]
 8012b6e:	460b      	mov	r3, r1
 8012b70:	009b      	lsls	r3, r3, #2
 8012b72:	440b      	add	r3, r1
 8012b74:	009b      	lsls	r3, r3, #2
 8012b76:	4413      	add	r3, r2
 8012b78:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8012b7c:	4602      	mov	r2, r0
 8012b7e:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 8012b80:	4b5f      	ldr	r3, [pc, #380]	; (8012d00 <PdmConfig_Set+0x680>)
 8012b82:	2201      	movs	r2, #1
 8012b84:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b8c:	2b02      	cmp	r3, #2
 8012b8e:	d10d      	bne.n	8012bac <PdmConfig_Set+0x52c>
        nOutNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012b96:	091b      	lsrs	r3, r3, #4
 8012b98:	b2da      	uxtb	r2, r3
 8012b9a:	4b57      	ldr	r3, [pc, #348]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012b9c:	701a      	strb	r2, [r3, #0]
        if(nOutNum < PDM_NUM_OUTPUTS){
 8012b9e:	4b56      	ldr	r3, [pc, #344]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	2b0b      	cmp	r3, #11
 8012ba4:	d802      	bhi.n	8012bac <PdmConfig_Set+0x52c>
          nSend = 1;
 8012ba6:	4b56      	ldr	r3, [pc, #344]	; (8012d00 <PdmConfig_Set+0x680>)
 8012ba8:	2201      	movs	r2, #1
 8012baa:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8012bac:	4b54      	ldr	r3, [pc, #336]	; (8012d00 <PdmConfig_Set+0x680>)
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	f001 8082 	beq.w	8013cba <PdmConfig_Set+0x163a>
        stMsgUsbTx.nTxLen = 8;
 8012bb6:	4b53      	ldr	r3, [pc, #332]	; (8012d04 <PdmConfig_Set+0x684>)
 8012bb8:	2208      	movs	r2, #8
 8012bba:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 8;
 8012bbc:	4b52      	ldr	r3, [pc, #328]	; (8012d08 <PdmConfig_Set+0x688>)
 8012bbe:	2208      	movs	r2, #8
 8012bc0:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_OUTPUTS;
 8012bc2:	4b50      	ldr	r3, [pc, #320]	; (8012d04 <PdmConfig_Set+0x684>)
 8012bc4:	226f      	movs	r2, #111	; 0x6f
 8012bc6:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((nOutNum & 0x0F) << 4) + (pConfig->stOutput[nOutNum].nEnabled & 0x01);
 8012bc8:	4b4b      	ldr	r3, [pc, #300]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	011b      	lsls	r3, r3, #4
 8012bce:	b2da      	uxtb	r2, r3
 8012bd0:	4b49      	ldr	r3, [pc, #292]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	68f9      	ldr	r1, [r7, #12]
 8012bd8:	4603      	mov	r3, r0
 8012bda:	009b      	lsls	r3, r3, #2
 8012bdc:	4403      	add	r3, r0
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	440b      	add	r3, r1
 8012be2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	f003 0301 	and.w	r3, r3, #1
 8012bec:	b2db      	uxtb	r3, r3
 8012bee:	4413      	add	r3, r2
 8012bf0:	b2da      	uxtb	r2, r3
 8012bf2:	4b44      	ldr	r3, [pc, #272]	; (8012d04 <PdmConfig_Set+0x684>)
 8012bf4:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stOutput[nOutNum].nInput;
 8012bf6:	4b40      	ldr	r3, [pc, #256]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	4619      	mov	r1, r3
 8012bfc:	68fa      	ldr	r2, [r7, #12]
 8012bfe:	460b      	mov	r3, r1
 8012c00:	009b      	lsls	r3, r3, #2
 8012c02:	440b      	add	r3, r1
 8012c04:	009b      	lsls	r3, r3, #2
 8012c06:	4413      	add	r3, r2
 8012c08:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8012c0c:	781a      	ldrb	r2, [r3, #0]
 8012c0e:	4b3d      	ldr	r3, [pc, #244]	; (8012d04 <PdmConfig_Set+0x684>)
 8012c10:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stOutput[nOutNum].nCurrentLimit * 10);
 8012c12:	4b39      	ldr	r3, [pc, #228]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	4619      	mov	r1, r3
 8012c18:	68fa      	ldr	r2, [r7, #12]
 8012c1a:	460b      	mov	r3, r1
 8012c1c:	009b      	lsls	r3, r3, #2
 8012c1e:	440b      	add	r3, r1
 8012c20:	009b      	lsls	r3, r3, #2
 8012c22:	4413      	add	r3, r2
 8012c24:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012c28:	881b      	ldrh	r3, [r3, #0]
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	0092      	lsls	r2, r2, #2
 8012c30:	4413      	add	r3, r2
 8012c32:	005b      	lsls	r3, r3, #1
 8012c34:	b2da      	uxtb	r2, r3
 8012c36:	4b33      	ldr	r3, [pc, #204]	; (8012d04 <PdmConfig_Set+0x684>)
 8012c38:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stOutput[nOutNum].nResetLimit & 0x0F) << 4) + (pConfig->stOutput[nOutNum].eResetMode & 0x0F);
 8012c3a:	4b2f      	ldr	r3, [pc, #188]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012c3c:	781b      	ldrb	r3, [r3, #0]
 8012c3e:	4619      	mov	r1, r3
 8012c40:	68fa      	ldr	r2, [r7, #12]
 8012c42:	460b      	mov	r3, r1
 8012c44:	009b      	lsls	r3, r3, #2
 8012c46:	440b      	add	r3, r1
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	4413      	add	r3, r2
 8012c4c:	f203 431a 	addw	r3, r3, #1050	; 0x41a
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	011b      	lsls	r3, r3, #4
 8012c54:	b2da      	uxtb	r2, r3
 8012c56:	4b28      	ldr	r3, [pc, #160]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012c58:	781b      	ldrb	r3, [r3, #0]
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	68f9      	ldr	r1, [r7, #12]
 8012c5e:	4603      	mov	r3, r0
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	4403      	add	r3, r0
 8012c64:	009b      	lsls	r3, r3, #2
 8012c66:	440b      	add	r3, r1
 8012c68:	f203 4316 	addw	r3, r3, #1046	; 0x416
 8012c6c:	781b      	ldrb	r3, [r3, #0]
 8012c6e:	f003 030f 	and.w	r3, r3, #15
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	4413      	add	r3, r2
 8012c76:	b2da      	uxtb	r2, r3
 8012c78:	4b22      	ldr	r3, [pc, #136]	; (8012d04 <PdmConfig_Set+0x684>)
 8012c7a:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stOutput[nOutNum].nResetTime / 100);
 8012c7c:	4b1e      	ldr	r3, [pc, #120]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012c7e:	781b      	ldrb	r3, [r3, #0]
 8012c80:	4619      	mov	r1, r3
 8012c82:	68fa      	ldr	r2, [r7, #12]
 8012c84:	460b      	mov	r3, r1
 8012c86:	009b      	lsls	r3, r3, #2
 8012c88:	440b      	add	r3, r1
 8012c8a:	009b      	lsls	r3, r3, #2
 8012c8c:	4413      	add	r3, r2
 8012c8e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8012c92:	881b      	ldrh	r3, [r3, #0]
 8012c94:	4a1d      	ldr	r2, [pc, #116]	; (8012d0c <PdmConfig_Set+0x68c>)
 8012c96:	fba2 2303 	umull	r2, r3, r2, r3
 8012c9a:	095b      	lsrs	r3, r3, #5
 8012c9c:	b29b      	uxth	r3, r3
 8012c9e:	b2da      	uxtb	r2, r3
 8012ca0:	4b18      	ldr	r3, [pc, #96]	; (8012d04 <PdmConfig_Set+0x684>)
 8012ca2:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stOutput[nOutNum].nInrushLimit * 10);
 8012ca4:	4b14      	ldr	r3, [pc, #80]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	4619      	mov	r1, r3
 8012caa:	68fa      	ldr	r2, [r7, #12]
 8012cac:	460b      	mov	r3, r1
 8012cae:	009b      	lsls	r3, r3, #2
 8012cb0:	440b      	add	r3, r1
 8012cb2:	009b      	lsls	r3, r3, #2
 8012cb4:	4413      	add	r3, r2
 8012cb6:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8012cba:	881b      	ldrh	r3, [r3, #0]
 8012cbc:	b2db      	uxtb	r3, r3
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	0092      	lsls	r2, r2, #2
 8012cc2:	4413      	add	r3, r2
 8012cc4:	005b      	lsls	r3, r3, #1
 8012cc6:	b2da      	uxtb	r2, r3
 8012cc8:	4b0e      	ldr	r3, [pc, #56]	; (8012d04 <PdmConfig_Set+0x684>)
 8012cca:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = (uint8_t)(pConfig->stOutput[nOutNum].nInrushTime / 100);
 8012ccc:	4b0a      	ldr	r3, [pc, #40]	; (8012cf8 <PdmConfig_Set+0x678>)
 8012cce:	781b      	ldrb	r3, [r3, #0]
 8012cd0:	4619      	mov	r1, r3
 8012cd2:	68fa      	ldr	r2, [r7, #12]
 8012cd4:	460b      	mov	r3, r1
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	440b      	add	r3, r1
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	4413      	add	r3, r2
 8012cde:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8012ce2:	881b      	ldrh	r3, [r3, #0]
 8012ce4:	4a09      	ldr	r2, [pc, #36]	; (8012d0c <PdmConfig_Set+0x68c>)
 8012ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8012cea:	095b      	lsrs	r3, r3, #5
 8012cec:	b29b      	uxth	r3, r3
 8012cee:	b2da      	uxtb	r2, r3
 8012cf0:	4b04      	ldr	r3, [pc, #16]	; (8012d04 <PdmConfig_Set+0x684>)
 8012cf2:	71da      	strb	r2, [r3, #7]
      }
    break;
 8012cf4:	f000 bfe1 	b.w	8013cba <PdmConfig_Set+0x163a>
 8012cf8:	20004be6 	.word	0x20004be6
 8012cfc:	cccccccd 	.word	0xcccccccd
 8012d00:	20004be4 	.word	0x20004be4
 8012d04:	20004bb8 	.word	0x20004bb8
 8012d08:	20004bc4 	.word	0x20004bc4
 8012d0c:	51eb851f 	.word	0x51eb851f

    //Set Virtual Input Settings
    // 'U'
    case MSG_RX_SET_VIRTUAL_INPUTS:
      if(stMsgRx->nRxLen == 7){
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d16:	2b07      	cmp	r3, #7
 8012d18:	f040 80c0 	bne.w	8012e9c <PdmConfig_Set+0x81c>
        nVirtInNum = (stMsgRx->nRxData[2]);
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8012d22:	4bbb      	ldr	r3, [pc, #748]	; (8013010 <PdmConfig_Set+0x990>)
 8012d24:	701a      	strb	r2, [r3, #0]
        if(nVirtInNum < PDM_NUM_VIRT_INPUTS){
 8012d26:	4bba      	ldr	r3, [pc, #744]	; (8013010 <PdmConfig_Set+0x990>)
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	2b13      	cmp	r3, #19
 8012d2c:	f200 80b6 	bhi.w	8012e9c <PdmConfig_Set+0x81c>
          pConfig->stVirtualInput[nVirtInNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012d36:	4ab6      	ldr	r2, [pc, #728]	; (8013010 <PdmConfig_Set+0x990>)
 8012d38:	7812      	ldrb	r2, [r2, #0]
 8012d3a:	4611      	mov	r1, r2
 8012d3c:	f003 0301 	and.w	r3, r3, #1
 8012d40:	b2d8      	uxtb	r0, r3
 8012d42:	68fa      	ldr	r2, [r7, #12]
 8012d44:	460b      	mov	r3, r1
 8012d46:	009b      	lsls	r3, r3, #2
 8012d48:	440b      	add	r3, r1
 8012d4a:	00db      	lsls	r3, r3, #3
 8012d4c:	4413      	add	r3, r2
 8012d4e:	33e8      	adds	r3, #232	; 0xe8
 8012d50:	4602      	mov	r2, r0
 8012d52:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot0 = (stMsgRx->nRxData[1] & 0x02) >> 1;
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012d5a:	105b      	asrs	r3, r3, #1
 8012d5c:	b2db      	uxtb	r3, r3
 8012d5e:	4aac      	ldr	r2, [pc, #688]	; (8013010 <PdmConfig_Set+0x990>)
 8012d60:	7812      	ldrb	r2, [r2, #0]
 8012d62:	4611      	mov	r1, r2
 8012d64:	f003 0301 	and.w	r3, r3, #1
 8012d68:	b2d8      	uxtb	r0, r3
 8012d6a:	68fa      	ldr	r2, [r7, #12]
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	009b      	lsls	r3, r3, #2
 8012d70:	440b      	add	r3, r1
 8012d72:	00db      	lsls	r3, r3, #3
 8012d74:	4413      	add	r3, r2
 8012d76:	33e9      	adds	r3, #233	; 0xe9
 8012d78:	4602      	mov	r2, r0
 8012d7a:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot1 = (stMsgRx->nRxData[1] & 0x04) >> 2;
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012d82:	109b      	asrs	r3, r3, #2
 8012d84:	b2db      	uxtb	r3, r3
 8012d86:	4aa2      	ldr	r2, [pc, #648]	; (8013010 <PdmConfig_Set+0x990>)
 8012d88:	7812      	ldrb	r2, [r2, #0]
 8012d8a:	4611      	mov	r1, r2
 8012d8c:	f003 0301 	and.w	r3, r3, #1
 8012d90:	b2d8      	uxtb	r0, r3
 8012d92:	68fa      	ldr	r2, [r7, #12]
 8012d94:	460b      	mov	r3, r1
 8012d96:	009b      	lsls	r3, r3, #2
 8012d98:	440b      	add	r3, r1
 8012d9a:	00db      	lsls	r3, r3, #3
 8012d9c:	4413      	add	r3, r2
 8012d9e:	33f1      	adds	r3, #241	; 0xf1
 8012da0:	4602      	mov	r2, r0
 8012da2:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot2 = (stMsgRx->nRxData[1] & 0x08) >> 3;
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012daa:	10db      	asrs	r3, r3, #3
 8012dac:	b2db      	uxtb	r3, r3
 8012dae:	4a98      	ldr	r2, [pc, #608]	; (8013010 <PdmConfig_Set+0x990>)
 8012db0:	7812      	ldrb	r2, [r2, #0]
 8012db2:	4611      	mov	r1, r2
 8012db4:	f003 0301 	and.w	r3, r3, #1
 8012db8:	b2d8      	uxtb	r0, r3
 8012dba:	68fa      	ldr	r2, [r7, #12]
 8012dbc:	460b      	mov	r3, r1
 8012dbe:	009b      	lsls	r3, r3, #2
 8012dc0:	440b      	add	r3, r1
 8012dc2:	00db      	lsls	r3, r3, #3
 8012dc4:	4413      	add	r3, r2
 8012dc6:	33f9      	adds	r3, #249	; 0xf9
 8012dc8:	4602      	mov	r2, r0
 8012dca:	701a      	strb	r2, [r3, #0]

          pConfig->stVirtualInput[nVirtInNum].nVar0 = stMsgRx->nRxData[3];
 8012dcc:	4b90      	ldr	r3, [pc, #576]	; (8013010 <PdmConfig_Set+0x990>)
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	4619      	mov	r1, r3
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8012dd8:	68fa      	ldr	r2, [r7, #12]
 8012dda:	460b      	mov	r3, r1
 8012ddc:	009b      	lsls	r3, r3, #2
 8012dde:	440b      	add	r3, r1
 8012de0:	00db      	lsls	r3, r3, #3
 8012de2:	4413      	add	r3, r2
 8012de4:	33ea      	adds	r3, #234	; 0xea
 8012de6:	4602      	mov	r2, r0
 8012de8:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nVar1 = stMsgRx->nRxData[4];
 8012dea:	4b89      	ldr	r3, [pc, #548]	; (8013010 <PdmConfig_Set+0x990>)
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	4619      	mov	r1, r3
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8012df6:	68fa      	ldr	r2, [r7, #12]
 8012df8:	460b      	mov	r3, r1
 8012dfa:	009b      	lsls	r3, r3, #2
 8012dfc:	440b      	add	r3, r1
 8012dfe:	00db      	lsls	r3, r3, #3
 8012e00:	4413      	add	r3, r2
 8012e02:	33f2      	adds	r3, #242	; 0xf2
 8012e04:	4602      	mov	r2, r0
 8012e06:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nVar2 = stMsgRx->nRxData[5];
 8012e08:	4b81      	ldr	r3, [pc, #516]	; (8013010 <PdmConfig_Set+0x990>)
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8012e14:	68fa      	ldr	r2, [r7, #12]
 8012e16:	460b      	mov	r3, r1
 8012e18:	009b      	lsls	r3, r3, #2
 8012e1a:	440b      	add	r3, r1
 8012e1c:	00db      	lsls	r3, r3, #3
 8012e1e:	4413      	add	r3, r2
 8012e20:	33fa      	adds	r3, #250	; 0xfa
 8012e22:	4602      	mov	r2, r0
 8012e24:	701a      	strb	r2, [r3, #0]

          pConfig->stVirtualInput[nVirtInNum].eCond0 = (stMsgRx->nRxData[6] & 0x03);
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8012e2c:	4a78      	ldr	r2, [pc, #480]	; (8013010 <PdmConfig_Set+0x990>)
 8012e2e:	7812      	ldrb	r2, [r2, #0]
 8012e30:	4611      	mov	r1, r2
 8012e32:	f003 0303 	and.w	r3, r3, #3
 8012e36:	b2d8      	uxtb	r0, r3
 8012e38:	68fa      	ldr	r2, [r7, #12]
 8012e3a:	460b      	mov	r3, r1
 8012e3c:	009b      	lsls	r3, r3, #2
 8012e3e:	440b      	add	r3, r1
 8012e40:	00db      	lsls	r3, r3, #3
 8012e42:	4413      	add	r3, r2
 8012e44:	33f0      	adds	r3, #240	; 0xf0
 8012e46:	4602      	mov	r2, r0
 8012e48:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].eCond1 = (stMsgRx->nRxData[6] & 0x0C) >> 2;
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8012e50:	109b      	asrs	r3, r3, #2
 8012e52:	b2db      	uxtb	r3, r3
 8012e54:	4a6e      	ldr	r2, [pc, #440]	; (8013010 <PdmConfig_Set+0x990>)
 8012e56:	7812      	ldrb	r2, [r2, #0]
 8012e58:	4611      	mov	r1, r2
 8012e5a:	f003 0303 	and.w	r3, r3, #3
 8012e5e:	b2d8      	uxtb	r0, r3
 8012e60:	68fa      	ldr	r2, [r7, #12]
 8012e62:	460b      	mov	r3, r1
 8012e64:	009b      	lsls	r3, r3, #2
 8012e66:	440b      	add	r3, r1
 8012e68:	00db      	lsls	r3, r3, #3
 8012e6a:	4413      	add	r3, r2
 8012e6c:	33f8      	adds	r3, #248	; 0xf8
 8012e6e:	4602      	mov	r2, r0
 8012e70:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].eMode = (stMsgRx->nRxData[6] & 0xC0) >> 6;
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8012e78:	4a65      	ldr	r2, [pc, #404]	; (8013010 <PdmConfig_Set+0x990>)
 8012e7a:	7812      	ldrb	r2, [r2, #0]
 8012e7c:	4611      	mov	r1, r2
 8012e7e:	099b      	lsrs	r3, r3, #6
 8012e80:	b2d8      	uxtb	r0, r3
 8012e82:	68fa      	ldr	r2, [r7, #12]
 8012e84:	460b      	mov	r3, r1
 8012e86:	009b      	lsls	r3, r3, #2
 8012e88:	440b      	add	r3, r1
 8012e8a:	00db      	lsls	r3, r3, #3
 8012e8c:	4413      	add	r3, r2
 8012e8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012e92:	4602      	mov	r2, r0
 8012e94:	701a      	strb	r2, [r3, #0]
          nSend = 1;
 8012e96:	4b5f      	ldr	r3, [pc, #380]	; (8013014 <PdmConfig_Set+0x994>)
 8012e98:	2201      	movs	r2, #1
 8012e9a:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8012e9c:	68bb      	ldr	r3, [r7, #8]
 8012e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ea2:	2b02      	cmp	r3, #2
 8012ea4:	d10b      	bne.n	8012ebe <PdmConfig_Set+0x83e>
        nVirtInNum = (stMsgRx->nRxData[1]);
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8012eac:	4b58      	ldr	r3, [pc, #352]	; (8013010 <PdmConfig_Set+0x990>)
 8012eae:	701a      	strb	r2, [r3, #0]
        if(nVirtInNum < PDM_NUM_VIRT_INPUTS){
 8012eb0:	4b57      	ldr	r3, [pc, #348]	; (8013010 <PdmConfig_Set+0x990>)
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	2b13      	cmp	r3, #19
 8012eb6:	d802      	bhi.n	8012ebe <PdmConfig_Set+0x83e>
          nSend = 1;
 8012eb8:	4b56      	ldr	r3, [pc, #344]	; (8013014 <PdmConfig_Set+0x994>)
 8012eba:	2201      	movs	r2, #1
 8012ebc:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8012ebe:	4b55      	ldr	r3, [pc, #340]	; (8013014 <PdmConfig_Set+0x994>)
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	f000 8704 	beq.w	8013cd0 <PdmConfig_Set+0x1650>
        stMsgUsbTx.nTxLen = 7;
 8012ec8:	4b53      	ldr	r3, [pc, #332]	; (8013018 <PdmConfig_Set+0x998>)
 8012eca:	2207      	movs	r2, #7
 8012ecc:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 8012ece:	4b53      	ldr	r3, [pc, #332]	; (801301c <PdmConfig_Set+0x99c>)
 8012ed0:	2207      	movs	r2, #7
 8012ed2:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_VIRTUAL_INPUTS;
 8012ed4:	4b50      	ldr	r3, [pc, #320]	; (8013018 <PdmConfig_Set+0x998>)
 8012ed6:	2275      	movs	r2, #117	; 0x75
 8012ed8:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 8012eda:	4b4d      	ldr	r3, [pc, #308]	; (8013010 <PdmConfig_Set+0x990>)
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	4619      	mov	r1, r3
 8012ee0:	68fa      	ldr	r2, [r7, #12]
 8012ee2:	460b      	mov	r3, r1
 8012ee4:	009b      	lsls	r3, r3, #2
 8012ee6:	440b      	add	r3, r1
 8012ee8:	00db      	lsls	r3, r3, #3
 8012eea:	4413      	add	r3, r2
 8012eec:	33f9      	adds	r3, #249	; 0xf9
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	00db      	lsls	r3, r3, #3
 8012ef2:	b25b      	sxtb	r3, r3
 8012ef4:	f003 0308 	and.w	r3, r3, #8
 8012ef8:	b25a      	sxtb	r2, r3
 8012efa:	4b45      	ldr	r3, [pc, #276]	; (8013010 <PdmConfig_Set+0x990>)
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	4618      	mov	r0, r3
 8012f00:	68f9      	ldr	r1, [r7, #12]
 8012f02:	4603      	mov	r3, r0
 8012f04:	009b      	lsls	r3, r3, #2
 8012f06:	4403      	add	r3, r0
 8012f08:	00db      	lsls	r3, r3, #3
 8012f0a:	440b      	add	r3, r1
 8012f0c:	33f1      	adds	r3, #241	; 0xf1
 8012f0e:	781b      	ldrb	r3, [r3, #0]
 8012f10:	009b      	lsls	r3, r3, #2
 8012f12:	b25b      	sxtb	r3, r3
 8012f14:	f003 0304 	and.w	r3, r3, #4
 8012f18:	b25b      	sxtb	r3, r3
 8012f1a:	4313      	orrs	r3, r2
 8012f1c:	b25b      	sxtb	r3, r3
 8012f1e:	b2da      	uxtb	r2, r3
                                ((pConfig->stVirtualInput[nVirtInNum].nNot0 & 0x01) << 1) + (pConfig->stVirtualInput[nVirtInNum].nEnabled & 0x01);
 8012f20:	4b3b      	ldr	r3, [pc, #236]	; (8013010 <PdmConfig_Set+0x990>)
 8012f22:	781b      	ldrb	r3, [r3, #0]
 8012f24:	4618      	mov	r0, r3
 8012f26:	68f9      	ldr	r1, [r7, #12]
 8012f28:	4603      	mov	r3, r0
 8012f2a:	009b      	lsls	r3, r3, #2
 8012f2c:	4403      	add	r3, r0
 8012f2e:	00db      	lsls	r3, r3, #3
 8012f30:	440b      	add	r3, r1
 8012f32:	33e9      	adds	r3, #233	; 0xe9
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	005b      	lsls	r3, r3, #1
 8012f38:	b2db      	uxtb	r3, r3
 8012f3a:	f003 0302 	and.w	r3, r3, #2
 8012f3e:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 8012f40:	4413      	add	r3, r2
 8012f42:	b2da      	uxtb	r2, r3
                                ((pConfig->stVirtualInput[nVirtInNum].nNot0 & 0x01) << 1) + (pConfig->stVirtualInput[nVirtInNum].nEnabled & 0x01);
 8012f44:	4b32      	ldr	r3, [pc, #200]	; (8013010 <PdmConfig_Set+0x990>)
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	68f9      	ldr	r1, [r7, #12]
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	009b      	lsls	r3, r3, #2
 8012f50:	4403      	add	r3, r0
 8012f52:	00db      	lsls	r3, r3, #3
 8012f54:	440b      	add	r3, r1
 8012f56:	33e8      	adds	r3, #232	; 0xe8
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	f003 0301 	and.w	r3, r3, #1
 8012f5e:	b2db      	uxtb	r3, r3
 8012f60:	4413      	add	r3, r2
 8012f62:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 8012f64:	4b2c      	ldr	r3, [pc, #176]	; (8013018 <PdmConfig_Set+0x998>)
 8012f66:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = nVirtInNum;
 8012f68:	4b29      	ldr	r3, [pc, #164]	; (8013010 <PdmConfig_Set+0x990>)
 8012f6a:	781a      	ldrb	r2, [r3, #0]
 8012f6c:	4b2a      	ldr	r3, [pc, #168]	; (8013018 <PdmConfig_Set+0x998>)
 8012f6e:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stVirtualInput[nVirtInNum].nVar0;
 8012f70:	4b27      	ldr	r3, [pc, #156]	; (8013010 <PdmConfig_Set+0x990>)
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	4619      	mov	r1, r3
 8012f76:	68fa      	ldr	r2, [r7, #12]
 8012f78:	460b      	mov	r3, r1
 8012f7a:	009b      	lsls	r3, r3, #2
 8012f7c:	440b      	add	r3, r1
 8012f7e:	00db      	lsls	r3, r3, #3
 8012f80:	4413      	add	r3, r2
 8012f82:	33ea      	adds	r3, #234	; 0xea
 8012f84:	781a      	ldrb	r2, [r3, #0]
 8012f86:	4b24      	ldr	r3, [pc, #144]	; (8013018 <PdmConfig_Set+0x998>)
 8012f88:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = pConfig->stVirtualInput[nVirtInNum].nVar1;
 8012f8a:	4b21      	ldr	r3, [pc, #132]	; (8013010 <PdmConfig_Set+0x990>)
 8012f8c:	781b      	ldrb	r3, [r3, #0]
 8012f8e:	4619      	mov	r1, r3
 8012f90:	68fa      	ldr	r2, [r7, #12]
 8012f92:	460b      	mov	r3, r1
 8012f94:	009b      	lsls	r3, r3, #2
 8012f96:	440b      	add	r3, r1
 8012f98:	00db      	lsls	r3, r3, #3
 8012f9a:	4413      	add	r3, r2
 8012f9c:	33f2      	adds	r3, #242	; 0xf2
 8012f9e:	781a      	ldrb	r2, [r3, #0]
 8012fa0:	4b1d      	ldr	r3, [pc, #116]	; (8013018 <PdmConfig_Set+0x998>)
 8012fa2:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = pConfig->stVirtualInput[nVirtInNum].nVar2;
 8012fa4:	4b1a      	ldr	r3, [pc, #104]	; (8013010 <PdmConfig_Set+0x990>)
 8012fa6:	781b      	ldrb	r3, [r3, #0]
 8012fa8:	4619      	mov	r1, r3
 8012faa:	68fa      	ldr	r2, [r7, #12]
 8012fac:	460b      	mov	r3, r1
 8012fae:	009b      	lsls	r3, r3, #2
 8012fb0:	440b      	add	r3, r1
 8012fb2:	00db      	lsls	r3, r3, #3
 8012fb4:	4413      	add	r3, r2
 8012fb6:	33fa      	adds	r3, #250	; 0xfa
 8012fb8:	781a      	ldrb	r2, [r3, #0]
 8012fba:	4b17      	ldr	r3, [pc, #92]	; (8013018 <PdmConfig_Set+0x998>)
 8012fbc:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = ((pConfig->stVirtualInput[nVirtInNum].eMode & 0x0F) << 4) + ((pConfig->stVirtualInput[nVirtInNum].eCond0 & 0x03) << 2) +
 8012fbe:	4b14      	ldr	r3, [pc, #80]	; (8013010 <PdmConfig_Set+0x990>)
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	68fa      	ldr	r2, [r7, #12]
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	440b      	add	r3, r1
 8012fcc:	00db      	lsls	r3, r3, #3
 8012fce:	4413      	add	r3, r2
 8012fd0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	011b      	lsls	r3, r3, #4
 8012fd8:	b2da      	uxtb	r2, r3
 8012fda:	4b0d      	ldr	r3, [pc, #52]	; (8013010 <PdmConfig_Set+0x990>)
 8012fdc:	781b      	ldrb	r3, [r3, #0]
 8012fde:	4618      	mov	r0, r3
 8012fe0:	68f9      	ldr	r1, [r7, #12]
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	009b      	lsls	r3, r3, #2
 8012fe6:	4403      	add	r3, r0
 8012fe8:	00db      	lsls	r3, r3, #3
 8012fea:	440b      	add	r3, r1
 8012fec:	33f0      	adds	r3, #240	; 0xf0
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	009b      	lsls	r3, r3, #2
 8012ff2:	b2db      	uxtb	r3, r3
 8012ff4:	f003 030c 	and.w	r3, r3, #12
 8012ff8:	b2db      	uxtb	r3, r3
 8012ffa:	4413      	add	r3, r2
 8012ffc:	b2da      	uxtb	r2, r3
                                (pConfig->stVirtualInput[nVirtInNum].eCond1 & 0x03);
 8012ffe:	4b04      	ldr	r3, [pc, #16]	; (8013010 <PdmConfig_Set+0x990>)
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	4618      	mov	r0, r3
 8013004:	68f9      	ldr	r1, [r7, #12]
 8013006:	4603      	mov	r3, r0
 8013008:	009b      	lsls	r3, r3, #2
 801300a:	4403      	add	r3, r0
 801300c:	00db      	lsls	r3, r3, #3
 801300e:	e007      	b.n	8013020 <PdmConfig_Set+0x9a0>
 8013010:	20004be7 	.word	0x20004be7
 8013014:	20004be4 	.word	0x20004be4
 8013018:	20004bb8 	.word	0x20004bb8
 801301c:	20004bc4 	.word	0x20004bc4
 8013020:	440b      	add	r3, r1
 8013022:	33f8      	adds	r3, #248	; 0xf8
 8013024:	781b      	ldrb	r3, [r3, #0]
 8013026:	f003 0303 	and.w	r3, r3, #3
 801302a:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[6] = ((pConfig->stVirtualInput[nVirtInNum].eMode & 0x0F) << 4) + ((pConfig->stVirtualInput[nVirtInNum].eCond0 & 0x03) << 2) +
 801302c:	4413      	add	r3, r2
 801302e:	b2da      	uxtb	r2, r3
 8013030:	4b5b      	ldr	r3, [pc, #364]	; (80131a0 <PdmConfig_Set+0xb20>)
 8013032:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8013034:	4b5a      	ldr	r3, [pc, #360]	; (80131a0 <PdmConfig_Set+0xb20>)
 8013036:	2200      	movs	r2, #0
 8013038:	71da      	strb	r2, [r3, #7]
      }
    break;
 801303a:	f000 be49 	b.w	8013cd0 <PdmConfig_Set+0x1650>

    //Set Wiper Settings
    // 'W'
    case MSG_RX_SET_WIPER:
      if(stMsgRx->nRxLen == 8){
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013044:	2b08      	cmp	r3, #8
 8013046:	d152      	bne.n	80130ee <PdmConfig_Set+0xa6e>
        pConfig->stWiper.nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8013048:	68bb      	ldr	r3, [r7, #8]
 801304a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801304e:	f003 0301 	and.w	r3, r3, #1
 8013052:	b2da      	uxtb	r2, r3
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
        pConfig->stWiper.nMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 801305a:	68bb      	ldr	r3, [r7, #8]
 801305c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013060:	105b      	asrs	r3, r3, #1
 8013062:	b2db      	uxtb	r3, r3
 8013064:	f003 0303 	and.w	r3, r3, #3
 8013068:	b2da      	uxtb	r2, r3
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
        pConfig->stWiper.nParkStopLevel = (stMsgRx->nRxData[1] & 0x08) >> 3;
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013076:	10db      	asrs	r3, r3, #3
 8013078:	b2db      	uxtb	r3, r3
 801307a:	f003 0301 	and.w	r3, r3, #1
 801307e:	b2da      	uxtb	r2, r3
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
        pConfig->stWiper.nWashWipeCycles = (stMsgRx->nRxData[1] * 0xF0) >> 4;
 8013086:	68bb      	ldr	r3, [r7, #8]
 8013088:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801308c:	461a      	mov	r2, r3
 801308e:	4613      	mov	r3, r2
 8013090:	011b      	lsls	r3, r3, #4
 8013092:	1a9b      	subs	r3, r3, r2
 8013094:	011b      	lsls	r3, r3, #4
 8013096:	111b      	asrs	r3, r3, #4
 8013098:	b2da      	uxtb	r2, r3
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503

        pConfig->stWiper.nSlowInput = stMsgRx->nRxData[2];
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa

        pConfig->stWiper.nFastInput = stMsgRx->nRxData[3];
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb

        pConfig->stWiper.nInterInput = stMsgRx->nRxData[4];
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc

        pConfig->stWiper.nOnInput = stMsgRx->nRxData[5];
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	f883 24fd 	strb.w	r2, [r3, #1277]	; 0x4fd

        pConfig->stWiper.nParkInput = stMsgRx->nRxData[6];
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff

        pConfig->stWiper.nWashInput = stMsgRx->nRxData[7];
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
        nSend = 1;
 80130e8:	4b2e      	ldr	r3, [pc, #184]	; (80131a4 <PdmConfig_Set+0xb24>)
 80130ea:	2201      	movs	r2, #1
 80130ec:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	d004      	beq.n	8013102 <PdmConfig_Set+0xa82>
 80130f8:	4b2a      	ldr	r3, [pc, #168]	; (80131a4 <PdmConfig_Set+0xb24>)
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	f000 85e9 	beq.w	8013cd4 <PdmConfig_Set+0x1654>
        stMsgUsbTx.nTxLen = 8;
 8013102:	4b27      	ldr	r3, [pc, #156]	; (80131a0 <PdmConfig_Set+0xb20>)
 8013104:	2208      	movs	r2, #8
 8013106:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 8;
 8013108:	4b27      	ldr	r3, [pc, #156]	; (80131a8 <PdmConfig_Set+0xb28>)
 801310a:	2208      	movs	r2, #8
 801310c:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER;
 801310e:	4b24      	ldr	r3, [pc, #144]	; (80131a0 <PdmConfig_Set+0xb20>)
 8013110:	2277      	movs	r2, #119	; 0x77
 8013112:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	f893 3503 	ldrb.w	r3, [r3, #1283]	; 0x503
 801311a:	011b      	lsls	r3, r3, #4
 801311c:	b2da      	uxtb	r2, r3
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8013124:	00db      	lsls	r3, r3, #3
 8013126:	b2db      	uxtb	r3, r3
 8013128:	f003 0308 	and.w	r3, r3, #8
 801312c:	b2db      	uxtb	r3, r3
 801312e:	4413      	add	r3, r2
 8013130:	b2da      	uxtb	r2, r3
                                ((pConfig->stWiper.nMode & 0x03) << 2) + (pConfig->stWiper.nEnabled & 0x01);
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	f893 34f9 	ldrb.w	r3, [r3, #1273]	; 0x4f9
 8013138:	009b      	lsls	r3, r3, #2
 801313a:	b2db      	uxtb	r3, r3
 801313c:	f003 030c 	and.w	r3, r3, #12
 8013140:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 8013142:	4413      	add	r3, r2
 8013144:	b2da      	uxtb	r2, r3
                                ((pConfig->stWiper.nMode & 0x03) << 2) + (pConfig->stWiper.nEnabled & 0x01);
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	f893 34f8 	ldrb.w	r3, [r3, #1272]	; 0x4f8
 801314c:	f003 0301 	and.w	r3, r3, #1
 8013150:	b2db      	uxtb	r3, r3
 8013152:	4413      	add	r3, r2
 8013154:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 8013156:	4b12      	ldr	r3, [pc, #72]	; (80131a0 <PdmConfig_Set+0xb20>)
 8013158:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stWiper.nSlowInput;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	f893 24fa 	ldrb.w	r2, [r3, #1274]	; 0x4fa
 8013160:	4b0f      	ldr	r3, [pc, #60]	; (80131a0 <PdmConfig_Set+0xb20>)
 8013162:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stWiper.nFastInput;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	f893 24fb 	ldrb.w	r2, [r3, #1275]	; 0x4fb
 801316a:	4b0d      	ldr	r3, [pc, #52]	; (80131a0 <PdmConfig_Set+0xb20>)
 801316c:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = pConfig->stWiper.nInterInput;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	f893 24fc 	ldrb.w	r2, [r3, #1276]	; 0x4fc
 8013174:	4b0a      	ldr	r3, [pc, #40]	; (80131a0 <PdmConfig_Set+0xb20>)
 8013176:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = pConfig->stWiper.nOnInput;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	f893 24fd 	ldrb.w	r2, [r3, #1277]	; 0x4fd
 801317e:	4b08      	ldr	r3, [pc, #32]	; (80131a0 <PdmConfig_Set+0xb20>)
 8013180:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = pConfig->stWiper.nParkInput;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f893 24ff 	ldrb.w	r2, [r3, #1279]	; 0x4ff
 8013188:	4b05      	ldr	r3, [pc, #20]	; (80131a0 <PdmConfig_Set+0xb20>)
 801318a:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = pConfig->stWiper.nWashInput;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	f893 2502 	ldrb.w	r2, [r3, #1282]	; 0x502
 8013192:	4b03      	ldr	r3, [pc, #12]	; (80131a0 <PdmConfig_Set+0xb20>)
 8013194:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8013196:	4b03      	ldr	r3, [pc, #12]	; (80131a4 <PdmConfig_Set+0xb24>)
 8013198:	2201      	movs	r2, #1
 801319a:	701a      	strb	r2, [r3, #0]
      }
    break;
 801319c:	f000 bd9a 	b.w	8013cd4 <PdmConfig_Set+0x1654>
 80131a0:	20004bb8 	.word	0x20004bb8
 80131a4:	20004be4 	.word	0x20004be4
 80131a8:	20004bc4 	.word	0x20004bc4

    //Set Wiper Speed Settings
    // 'P'
    case MSG_RX_SET_WIPER_SPEED:
      if(stMsgRx->nRxLen == 7){
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131b2:	2b07      	cmp	r3, #7
 80131b4:	d16a      	bne.n	801328c <PdmConfig_Set+0xc0c>
        pConfig->stWiper.nSwipeInput = stMsgRx->nRxData[1];
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501

        pConfig->stWiper.nSpeedInput = stMsgRx->nRxData[2];
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe

        pConfig->stWiper.nSpeedMap[0] = (stMsgRx->nRxData[3] * 0x0F);
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80131d4:	461a      	mov	r2, r3
 80131d6:	0112      	lsls	r2, r2, #4
 80131d8:	1ad3      	subs	r3, r2, r3
 80131da:	b2da      	uxtb	r2, r3
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
        pConfig->stWiper.nSpeedMap[1] = (stMsgRx->nRxData[3] * 0xF0) >> 4;
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80131e8:	461a      	mov	r2, r3
 80131ea:	4613      	mov	r3, r2
 80131ec:	011b      	lsls	r3, r3, #4
 80131ee:	1a9b      	subs	r3, r3, r2
 80131f0:	011b      	lsls	r3, r3, #4
 80131f2:	111b      	asrs	r3, r3, #4
 80131f4:	b2da      	uxtb	r2, r3
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505

        pConfig->stWiper.nSpeedMap[2] = (stMsgRx->nRxData[4] * 0x0F);
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013202:	461a      	mov	r2, r3
 8013204:	0112      	lsls	r2, r2, #4
 8013206:	1ad3      	subs	r3, r2, r3
 8013208:	b2da      	uxtb	r2, r3
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
        pConfig->stWiper.nSpeedMap[3] = (stMsgRx->nRxData[4] * 0xF0) >> 4;
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013216:	461a      	mov	r2, r3
 8013218:	4613      	mov	r3, r2
 801321a:	011b      	lsls	r3, r3, #4
 801321c:	1a9b      	subs	r3, r3, r2
 801321e:	011b      	lsls	r3, r3, #4
 8013220:	111b      	asrs	r3, r3, #4
 8013222:	b2da      	uxtb	r2, r3
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507

        pConfig->stWiper.nSpeedMap[4] = (stMsgRx->nRxData[5] * 0x0F);
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8013230:	461a      	mov	r2, r3
 8013232:	0112      	lsls	r2, r2, #4
 8013234:	1ad3      	subs	r3, r2, r3
 8013236:	b2da      	uxtb	r2, r3
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
        pConfig->stWiper.nSpeedMap[5] = (stMsgRx->nRxData[5] * 0xF0) >> 4;
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8013244:	461a      	mov	r2, r3
 8013246:	4613      	mov	r3, r2
 8013248:	011b      	lsls	r3, r3, #4
 801324a:	1a9b      	subs	r3, r3, r2
 801324c:	011b      	lsls	r3, r3, #4
 801324e:	111b      	asrs	r3, r3, #4
 8013250:	b2da      	uxtb	r2, r3
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509

        pConfig->stWiper.nSpeedMap[6] = (stMsgRx->nRxData[6] * 0x0F);
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801325e:	461a      	mov	r2, r3
 8013260:	0112      	lsls	r2, r2, #4
 8013262:	1ad3      	subs	r3, r2, r3
 8013264:	b2da      	uxtb	r2, r3
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
        pConfig->stWiper.nSpeedMap[7] = (stMsgRx->nRxData[6] * 0xF0) >> 4;
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8013272:	461a      	mov	r2, r3
 8013274:	4613      	mov	r3, r2
 8013276:	011b      	lsls	r3, r3, #4
 8013278:	1a9b      	subs	r3, r3, r2
 801327a:	011b      	lsls	r3, r3, #4
 801327c:	111b      	asrs	r3, r3, #4
 801327e:	b2da      	uxtb	r2, r3
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
        nSend = 1;
 8013286:	4b97      	ldr	r3, [pc, #604]	; (80134e4 <PdmConfig_Set+0xe64>)
 8013288:	2201      	movs	r2, #1
 801328a:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013292:	2b01      	cmp	r3, #1
 8013294:	d004      	beq.n	80132a0 <PdmConfig_Set+0xc20>
 8013296:	4b93      	ldr	r3, [pc, #588]	; (80134e4 <PdmConfig_Set+0xe64>)
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	2b00      	cmp	r3, #0
 801329c:	f000 851c 	beq.w	8013cd8 <PdmConfig_Set+0x1658>
        stMsgUsbTx.nTxLen = 7;
 80132a0:	4b91      	ldr	r3, [pc, #580]	; (80134e8 <PdmConfig_Set+0xe68>)
 80132a2:	2207      	movs	r2, #7
 80132a4:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 80132a6:	4b91      	ldr	r3, [pc, #580]	; (80134ec <PdmConfig_Set+0xe6c>)
 80132a8:	2207      	movs	r2, #7
 80132aa:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER_SPEED;
 80132ac:	4b8e      	ldr	r3, [pc, #568]	; (80134e8 <PdmConfig_Set+0xe68>)
 80132ae:	2270      	movs	r2, #112	; 0x70
 80132b0:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = pConfig->stWiper.nSwipeInput;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	f893 2501 	ldrb.w	r2, [r3, #1281]	; 0x501
 80132b8:	4b8b      	ldr	r3, [pc, #556]	; (80134e8 <PdmConfig_Set+0xe68>)
 80132ba:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stWiper.nSpeedInput;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	f893 24fe 	ldrb.w	r2, [r3, #1278]	; 0x4fe
 80132c2:	4b89      	ldr	r3, [pc, #548]	; (80134e8 <PdmConfig_Set+0xe68>)
 80132c4:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = ((pConfig->stWiper.nSpeedMap[1] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[0] & 0x0F);
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 80132cc:	011b      	lsls	r3, r3, #4
 80132ce:	b2da      	uxtb	r2, r3
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 80132d6:	f003 030f 	and.w	r3, r3, #15
 80132da:	b2db      	uxtb	r3, r3
 80132dc:	4413      	add	r3, r2
 80132de:	b2da      	uxtb	r2, r3
 80132e0:	4b81      	ldr	r3, [pc, #516]	; (80134e8 <PdmConfig_Set+0xe68>)
 80132e2:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stWiper.nSpeedMap[3] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[2] & 0x0F);
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	f893 3507 	ldrb.w	r3, [r3, #1287]	; 0x507
 80132ea:	011b      	lsls	r3, r3, #4
 80132ec:	b2da      	uxtb	r2, r3
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 80132f4:	f003 030f 	and.w	r3, r3, #15
 80132f8:	b2db      	uxtb	r3, r3
 80132fa:	4413      	add	r3, r2
 80132fc:	b2da      	uxtb	r2, r3
 80132fe:	4b7a      	ldr	r3, [pc, #488]	; (80134e8 <PdmConfig_Set+0xe68>)
 8013300:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = ((pConfig->stWiper.nSpeedMap[5] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[4] & 0x0F);
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	f893 3509 	ldrb.w	r3, [r3, #1289]	; 0x509
 8013308:	011b      	lsls	r3, r3, #4
 801330a:	b2da      	uxtb	r2, r3
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	f893 3508 	ldrb.w	r3, [r3, #1288]	; 0x508
 8013312:	f003 030f 	and.w	r3, r3, #15
 8013316:	b2db      	uxtb	r3, r3
 8013318:	4413      	add	r3, r2
 801331a:	b2da      	uxtb	r2, r3
 801331c:	4b72      	ldr	r3, [pc, #456]	; (80134e8 <PdmConfig_Set+0xe68>)
 801331e:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = ((pConfig->stWiper.nSpeedMap[7] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[6] & 0x0F);
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	f893 350b 	ldrb.w	r3, [r3, #1291]	; 0x50b
 8013326:	011b      	lsls	r3, r3, #4
 8013328:	b2da      	uxtb	r2, r3
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	f893 350a 	ldrb.w	r3, [r3, #1290]	; 0x50a
 8013330:	f003 030f 	and.w	r3, r3, #15
 8013334:	b2db      	uxtb	r3, r3
 8013336:	4413      	add	r3, r2
 8013338:	b2da      	uxtb	r2, r3
 801333a:	4b6b      	ldr	r3, [pc, #428]	; (80134e8 <PdmConfig_Set+0xe68>)
 801333c:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 801333e:	4b6a      	ldr	r3, [pc, #424]	; (80134e8 <PdmConfig_Set+0xe68>)
 8013340:	2200      	movs	r2, #0
 8013342:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8013344:	4b67      	ldr	r3, [pc, #412]	; (80134e4 <PdmConfig_Set+0xe64>)
 8013346:	2201      	movs	r2, #1
 8013348:	701a      	strb	r2, [r3, #0]
      }
    break;
 801334a:	f000 bcc5 	b.w	8013cd8 <PdmConfig_Set+0x1658>

    //Set Wiper Intermit Delays Settings
    // 'Y'
    case MSG_RX_SET_WIPER_DELAYS:
      if(stMsgRx->nRxLen == 7){
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013354:	2b07      	cmp	r3, #7
 8013356:	d168      	bne.n	801342a <PdmConfig_Set+0xdaa>
        pConfig->stWiper.nIntermitTime[0] = stMsgRx->nRxData[1] * 100;
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801335e:	b29b      	uxth	r3, r3
 8013360:	461a      	mov	r2, r3
 8013362:	0092      	lsls	r2, r2, #2
 8013364:	4413      	add	r3, r2
 8013366:	461a      	mov	r2, r3
 8013368:	0091      	lsls	r1, r2, #2
 801336a:	461a      	mov	r2, r3
 801336c:	460b      	mov	r3, r1
 801336e:	4413      	add	r3, r2
 8013370:	009b      	lsls	r3, r3, #2
 8013372:	b29a      	uxth	r2, r3
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
        pConfig->stWiper.nIntermitTime[1] = stMsgRx->nRxData[2] * 100;
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013380:	b29b      	uxth	r3, r3
 8013382:	461a      	mov	r2, r3
 8013384:	0092      	lsls	r2, r2, #2
 8013386:	4413      	add	r3, r2
 8013388:	461a      	mov	r2, r3
 801338a:	0091      	lsls	r1, r2, #2
 801338c:	461a      	mov	r2, r3
 801338e:	460b      	mov	r3, r1
 8013390:	4413      	add	r3, r2
 8013392:	009b      	lsls	r3, r3, #2
 8013394:	b29a      	uxth	r2, r3
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	f8a3 250e 	strh.w	r2, [r3, #1294]	; 0x50e
        pConfig->stWiper.nIntermitTime[2] = stMsgRx->nRxData[3] * 100;
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80133a2:	b29b      	uxth	r3, r3
 80133a4:	461a      	mov	r2, r3
 80133a6:	0092      	lsls	r2, r2, #2
 80133a8:	4413      	add	r3, r2
 80133aa:	461a      	mov	r2, r3
 80133ac:	0091      	lsls	r1, r2, #2
 80133ae:	461a      	mov	r2, r3
 80133b0:	460b      	mov	r3, r1
 80133b2:	4413      	add	r3, r2
 80133b4:	009b      	lsls	r3, r3, #2
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	f8a3 2510 	strh.w	r2, [r3, #1296]	; 0x510
        pConfig->stWiper.nIntermitTime[3] = stMsgRx->nRxData[4] * 100;
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80133c4:	b29b      	uxth	r3, r3
 80133c6:	461a      	mov	r2, r3
 80133c8:	0092      	lsls	r2, r2, #2
 80133ca:	4413      	add	r3, r2
 80133cc:	461a      	mov	r2, r3
 80133ce:	0091      	lsls	r1, r2, #2
 80133d0:	461a      	mov	r2, r3
 80133d2:	460b      	mov	r3, r1
 80133d4:	4413      	add	r3, r2
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	b29a      	uxth	r2, r3
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	f8a3 2512 	strh.w	r2, [r3, #1298]	; 0x512
        pConfig->stWiper.nIntermitTime[4] = stMsgRx->nRxData[5] * 100;
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	461a      	mov	r2, r3
 80133ea:	0092      	lsls	r2, r2, #2
 80133ec:	4413      	add	r3, r2
 80133ee:	461a      	mov	r2, r3
 80133f0:	0091      	lsls	r1, r2, #2
 80133f2:	461a      	mov	r2, r3
 80133f4:	460b      	mov	r3, r1
 80133f6:	4413      	add	r3, r2
 80133f8:	009b      	lsls	r3, r3, #2
 80133fa:	b29a      	uxth	r2, r3
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
        pConfig->stWiper.nIntermitTime[5] = stMsgRx->nRxData[6] * 100;
 8013402:	68bb      	ldr	r3, [r7, #8]
 8013404:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8013408:	b29b      	uxth	r3, r3
 801340a:	461a      	mov	r2, r3
 801340c:	0092      	lsls	r2, r2, #2
 801340e:	4413      	add	r3, r2
 8013410:	461a      	mov	r2, r3
 8013412:	0091      	lsls	r1, r2, #2
 8013414:	461a      	mov	r2, r3
 8013416:	460b      	mov	r3, r1
 8013418:	4413      	add	r3, r2
 801341a:	009b      	lsls	r3, r3, #2
 801341c:	b29a      	uxth	r2, r3
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f8a3 2516 	strh.w	r2, [r3, #1302]	; 0x516
        nSend = 1;
 8013424:	4b2f      	ldr	r3, [pc, #188]	; (80134e4 <PdmConfig_Set+0xe64>)
 8013426:	2201      	movs	r2, #1
 8013428:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013430:	2b01      	cmp	r3, #1
 8013432:	d004      	beq.n	801343e <PdmConfig_Set+0xdbe>
 8013434:	4b2b      	ldr	r3, [pc, #172]	; (80134e4 <PdmConfig_Set+0xe64>)
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	2b00      	cmp	r3, #0
 801343a:	f000 844f 	beq.w	8013cdc <PdmConfig_Set+0x165c>
        stMsgUsbTx.nTxLen = 7;
 801343e:	4b2a      	ldr	r3, [pc, #168]	; (80134e8 <PdmConfig_Set+0xe68>)
 8013440:	2207      	movs	r2, #7
 8013442:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 8013444:	4b29      	ldr	r3, [pc, #164]	; (80134ec <PdmConfig_Set+0xe6c>)
 8013446:	2207      	movs	r2, #7
 8013448:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER_DELAYS;
 801344a:	4b27      	ldr	r3, [pc, #156]	; (80134e8 <PdmConfig_Set+0xe68>)
 801344c:	2279      	movs	r2, #121	; 0x79
 801344e:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (uint8_t)(pConfig->stWiper.nIntermitTime[0] / 100);
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	f8b3 350c 	ldrh.w	r3, [r3, #1292]	; 0x50c
 8013456:	4a26      	ldr	r2, [pc, #152]	; (80134f0 <PdmConfig_Set+0xe70>)
 8013458:	fba2 2303 	umull	r2, r3, r2, r3
 801345c:	095b      	lsrs	r3, r3, #5
 801345e:	b29b      	uxth	r3, r3
 8013460:	b2da      	uxtb	r2, r3
 8013462:	4b21      	ldr	r3, [pc, #132]	; (80134e8 <PdmConfig_Set+0xe68>)
 8013464:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)(pConfig->stWiper.nIntermitTime[1] / 100);
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	f8b3 350e 	ldrh.w	r3, [r3, #1294]	; 0x50e
 801346c:	4a20      	ldr	r2, [pc, #128]	; (80134f0 <PdmConfig_Set+0xe70>)
 801346e:	fba2 2303 	umull	r2, r3, r2, r3
 8013472:	095b      	lsrs	r3, r3, #5
 8013474:	b29b      	uxth	r3, r3
 8013476:	b2da      	uxtb	r2, r3
 8013478:	4b1b      	ldr	r3, [pc, #108]	; (80134e8 <PdmConfig_Set+0xe68>)
 801347a:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stWiper.nIntermitTime[2] / 100);
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 8013482:	4a1b      	ldr	r2, [pc, #108]	; (80134f0 <PdmConfig_Set+0xe70>)
 8013484:	fba2 2303 	umull	r2, r3, r2, r3
 8013488:	095b      	lsrs	r3, r3, #5
 801348a:	b29b      	uxth	r3, r3
 801348c:	b2da      	uxtb	r2, r3
 801348e:	4b16      	ldr	r3, [pc, #88]	; (80134e8 <PdmConfig_Set+0xe68>)
 8013490:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stWiper.nIntermitTime[3] / 100);
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	f8b3 3512 	ldrh.w	r3, [r3, #1298]	; 0x512
 8013498:	4a15      	ldr	r2, [pc, #84]	; (80134f0 <PdmConfig_Set+0xe70>)
 801349a:	fba2 2303 	umull	r2, r3, r2, r3
 801349e:	095b      	lsrs	r3, r3, #5
 80134a0:	b29b      	uxth	r3, r3
 80134a2:	b2da      	uxtb	r2, r3
 80134a4:	4b10      	ldr	r3, [pc, #64]	; (80134e8 <PdmConfig_Set+0xe68>)
 80134a6:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stWiper.nIntermitTime[4] / 100);
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 80134ae:	4a10      	ldr	r2, [pc, #64]	; (80134f0 <PdmConfig_Set+0xe70>)
 80134b0:	fba2 2303 	umull	r2, r3, r2, r3
 80134b4:	095b      	lsrs	r3, r3, #5
 80134b6:	b29b      	uxth	r3, r3
 80134b8:	b2da      	uxtb	r2, r3
 80134ba:	4b0b      	ldr	r3, [pc, #44]	; (80134e8 <PdmConfig_Set+0xe68>)
 80134bc:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stWiper.nIntermitTime[5] / 100);
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	f8b3 3516 	ldrh.w	r3, [r3, #1302]	; 0x516
 80134c4:	4a0a      	ldr	r2, [pc, #40]	; (80134f0 <PdmConfig_Set+0xe70>)
 80134c6:	fba2 2303 	umull	r2, r3, r2, r3
 80134ca:	095b      	lsrs	r3, r3, #5
 80134cc:	b29b      	uxth	r3, r3
 80134ce:	b2da      	uxtb	r2, r3
 80134d0:	4b05      	ldr	r3, [pc, #20]	; (80134e8 <PdmConfig_Set+0xe68>)
 80134d2:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 80134d4:	4b04      	ldr	r3, [pc, #16]	; (80134e8 <PdmConfig_Set+0xe68>)
 80134d6:	2200      	movs	r2, #0
 80134d8:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 80134da:	4b02      	ldr	r3, [pc, #8]	; (80134e4 <PdmConfig_Set+0xe64>)
 80134dc:	2201      	movs	r2, #1
 80134de:	701a      	strb	r2, [r3, #0]
      }
    break;
 80134e0:	e3fc      	b.n	8013cdc <PdmConfig_Set+0x165c>
 80134e2:	bf00      	nop
 80134e4:	20004be4 	.word	0x20004be4
 80134e8:	20004bb8 	.word	0x20004bb8
 80134ec:	20004bc4 	.word	0x20004bc4
 80134f0:	51eb851f 	.word	0x51eb851f

    //Set Flasher Settings
    // 'H'
    case MSG_RX_SET_FLASHER:
      if(stMsgRx->nRxLen == 6){
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134fa:	2b06      	cmp	r3, #6
 80134fc:	f040 808f 	bne.w	801361e <PdmConfig_Set+0xf9e>
        nFlasherNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013506:	091b      	lsrs	r3, r3, #4
 8013508:	b2da      	uxtb	r2, r3
 801350a:	4b90      	ldr	r3, [pc, #576]	; (801374c <PdmConfig_Set+0x10cc>)
 801350c:	701a      	strb	r2, [r3, #0]
        if(nFlasherNum < PDM_NUM_FLASHERS){
 801350e:	4b8f      	ldr	r3, [pc, #572]	; (801374c <PdmConfig_Set+0x10cc>)
 8013510:	781b      	ldrb	r3, [r3, #0]
 8013512:	2b03      	cmp	r3, #3
 8013514:	f200 8083 	bhi.w	801361e <PdmConfig_Set+0xf9e>
          pConfig->stFlasher[nFlasherNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801351e:	4a8b      	ldr	r2, [pc, #556]	; (801374c <PdmConfig_Set+0x10cc>)
 8013520:	7812      	ldrb	r2, [r2, #0]
 8013522:	4611      	mov	r1, r2
 8013524:	f003 0301 	and.w	r3, r3, #1
 8013528:	b2d8      	uxtb	r0, r3
 801352a:	68fa      	ldr	r2, [r7, #12]
 801352c:	460b      	mov	r3, r1
 801352e:	005b      	lsls	r3, r3, #1
 8013530:	440b      	add	r3, r1
 8013532:	00db      	lsls	r3, r3, #3
 8013534:	4413      	add	r3, r2
 8013536:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 801353a:	4602      	mov	r2, r0
 801353c:	701a      	strb	r2, [r3, #0]
          pConfig->stFlasher[nFlasherNum].nSingleCycle = (stMsgRx->nRxData[1] & 0x02) >> 1;
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013544:	105b      	asrs	r3, r3, #1
 8013546:	b2db      	uxtb	r3, r3
 8013548:	4a80      	ldr	r2, [pc, #512]	; (801374c <PdmConfig_Set+0x10cc>)
 801354a:	7812      	ldrb	r2, [r2, #0]
 801354c:	4611      	mov	r1, r2
 801354e:	f003 0301 	and.w	r3, r3, #1
 8013552:	b2d8      	uxtb	r0, r3
 8013554:	68fa      	ldr	r2, [r7, #12]
 8013556:	460b      	mov	r3, r1
 8013558:	005b      	lsls	r3, r3, #1
 801355a:	440b      	add	r3, r1
 801355c:	00db      	lsls	r3, r3, #3
 801355e:	4413      	add	r3, r2
 8013560:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8013564:	4602      	mov	r2, r0
 8013566:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nInput = stMsgRx->nRxData[2];
 8013568:	4b78      	ldr	r3, [pc, #480]	; (801374c <PdmConfig_Set+0x10cc>)
 801356a:	781b      	ldrb	r3, [r3, #0]
 801356c:	4619      	mov	r1, r3
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8013574:	68fa      	ldr	r2, [r7, #12]
 8013576:	460b      	mov	r3, r1
 8013578:	005b      	lsls	r3, r3, #1
 801357a:	440b      	add	r3, r1
 801357c:	00db      	lsls	r3, r3, #3
 801357e:	4413      	add	r3, r2
 8013580:	f203 5319 	addw	r3, r3, #1305	; 0x519
 8013584:	4602      	mov	r2, r0
 8013586:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nOutput = stMsgRx->nRxData[3];
 8013588:	4b70      	ldr	r3, [pc, #448]	; (801374c <PdmConfig_Set+0x10cc>)
 801358a:	781b      	ldrb	r3, [r3, #0]
 801358c:	4619      	mov	r1, r3
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8013594:	68fa      	ldr	r2, [r7, #12]
 8013596:	460b      	mov	r3, r1
 8013598:	005b      	lsls	r3, r3, #1
 801359a:	440b      	add	r3, r1
 801359c:	00db      	lsls	r3, r3, #3
 801359e:	4413      	add	r3, r2
 80135a0:	f203 5325 	addw	r3, r3, #1317	; 0x525
 80135a4:	4602      	mov	r2, r0
 80135a6:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nFlashOnTime = stMsgRx->nRxData[4] * 100;
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80135ae:	b29a      	uxth	r2, r3
 80135b0:	4b66      	ldr	r3, [pc, #408]	; (801374c <PdmConfig_Set+0x10cc>)
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	4619      	mov	r1, r3
 80135b6:	4613      	mov	r3, r2
 80135b8:	461a      	mov	r2, r3
 80135ba:	0092      	lsls	r2, r2, #2
 80135bc:	4413      	add	r3, r2
 80135be:	461a      	mov	r2, r3
 80135c0:	0090      	lsls	r0, r2, #2
 80135c2:	461a      	mov	r2, r3
 80135c4:	4603      	mov	r3, r0
 80135c6:	4413      	add	r3, r2
 80135c8:	009b      	lsls	r3, r3, #2
 80135ca:	b298      	uxth	r0, r3
 80135cc:	68fa      	ldr	r2, [r7, #12]
 80135ce:	460b      	mov	r3, r1
 80135d0:	005b      	lsls	r3, r3, #1
 80135d2:	440b      	add	r3, r1
 80135d4:	00db      	lsls	r3, r3, #3
 80135d6:	4413      	add	r3, r2
 80135d8:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80135dc:	4602      	mov	r2, r0
 80135de:	801a      	strh	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nFlashOffTime = stMsgRx->nRxData[5] * 100;
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80135e6:	b29a      	uxth	r2, r3
 80135e8:	4b58      	ldr	r3, [pc, #352]	; (801374c <PdmConfig_Set+0x10cc>)
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	4619      	mov	r1, r3
 80135ee:	4613      	mov	r3, r2
 80135f0:	461a      	mov	r2, r3
 80135f2:	0092      	lsls	r2, r2, #2
 80135f4:	4413      	add	r3, r2
 80135f6:	461a      	mov	r2, r3
 80135f8:	0090      	lsls	r0, r2, #2
 80135fa:	461a      	mov	r2, r3
 80135fc:	4603      	mov	r3, r0
 80135fe:	4413      	add	r3, r2
 8013600:	009b      	lsls	r3, r3, #2
 8013602:	b298      	uxth	r0, r3
 8013604:	68fa      	ldr	r2, [r7, #12]
 8013606:	460b      	mov	r3, r1
 8013608:	005b      	lsls	r3, r3, #1
 801360a:	440b      	add	r3, r1
 801360c:	00db      	lsls	r3, r3, #3
 801360e:	4413      	add	r3, r2
 8013610:	f203 5322 	addw	r3, r3, #1314	; 0x522
 8013614:	4602      	mov	r2, r0
 8013616:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 8013618:	4b4d      	ldr	r3, [pc, #308]	; (8013750 <PdmConfig_Set+0x10d0>)
 801361a:	2201      	movs	r2, #1
 801361c:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013624:	2b02      	cmp	r3, #2
 8013626:	d10d      	bne.n	8013644 <PdmConfig_Set+0xfc4>
        nFlasherNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801362e:	091b      	lsrs	r3, r3, #4
 8013630:	b2da      	uxtb	r2, r3
 8013632:	4b46      	ldr	r3, [pc, #280]	; (801374c <PdmConfig_Set+0x10cc>)
 8013634:	701a      	strb	r2, [r3, #0]
        if(nFlasherNum < PDM_NUM_FLASHERS){
 8013636:	4b45      	ldr	r3, [pc, #276]	; (801374c <PdmConfig_Set+0x10cc>)
 8013638:	781b      	ldrb	r3, [r3, #0]
 801363a:	2b03      	cmp	r3, #3
 801363c:	d802      	bhi.n	8013644 <PdmConfig_Set+0xfc4>
          nSend = 1;
 801363e:	4b44      	ldr	r3, [pc, #272]	; (8013750 <PdmConfig_Set+0x10d0>)
 8013640:	2201      	movs	r2, #1
 8013642:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8013644:	4b42      	ldr	r3, [pc, #264]	; (8013750 <PdmConfig_Set+0x10d0>)
 8013646:	781b      	ldrb	r3, [r3, #0]
 8013648:	2b00      	cmp	r3, #0
 801364a:	f000 8349 	beq.w	8013ce0 <PdmConfig_Set+0x1660>
        stMsgUsbTx.nTxLen = 6;
 801364e:	4b41      	ldr	r3, [pc, #260]	; (8013754 <PdmConfig_Set+0x10d4>)
 8013650:	2206      	movs	r2, #6
 8013652:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 6;
 8013654:	4b40      	ldr	r3, [pc, #256]	; (8013758 <PdmConfig_Set+0x10d8>)
 8013656:	2206      	movs	r2, #6
 8013658:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_FLASHER;
 801365a:	4b3e      	ldr	r3, [pc, #248]	; (8013754 <PdmConfig_Set+0x10d4>)
 801365c:	2268      	movs	r2, #104	; 0x68
 801365e:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((nFlasherNum & 0x0F) << 4) + ((pConfig->stFlasher[nFlasherNum].nSingleCycle & 0x01) << 1) +
 8013660:	4b3a      	ldr	r3, [pc, #232]	; (801374c <PdmConfig_Set+0x10cc>)
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	011b      	lsls	r3, r3, #4
 8013666:	b2da      	uxtb	r2, r3
 8013668:	4b38      	ldr	r3, [pc, #224]	; (801374c <PdmConfig_Set+0x10cc>)
 801366a:	781b      	ldrb	r3, [r3, #0]
 801366c:	4618      	mov	r0, r3
 801366e:	68f9      	ldr	r1, [r7, #12]
 8013670:	4603      	mov	r3, r0
 8013672:	005b      	lsls	r3, r3, #1
 8013674:	4403      	add	r3, r0
 8013676:	00db      	lsls	r3, r3, #3
 8013678:	440b      	add	r3, r1
 801367a:	f203 5324 	addw	r3, r3, #1316	; 0x524
 801367e:	781b      	ldrb	r3, [r3, #0]
 8013680:	005b      	lsls	r3, r3, #1
 8013682:	b2db      	uxtb	r3, r3
 8013684:	f003 0302 	and.w	r3, r3, #2
 8013688:	b2db      	uxtb	r3, r3
 801368a:	4413      	add	r3, r2
 801368c:	b2da      	uxtb	r2, r3
                                (pConfig->stFlasher[nFlasherNum].nEnabled & 0x01);
 801368e:	4b2f      	ldr	r3, [pc, #188]	; (801374c <PdmConfig_Set+0x10cc>)
 8013690:	781b      	ldrb	r3, [r3, #0]
 8013692:	4618      	mov	r0, r3
 8013694:	68f9      	ldr	r1, [r7, #12]
 8013696:	4603      	mov	r3, r0
 8013698:	005b      	lsls	r3, r3, #1
 801369a:	4403      	add	r3, r0
 801369c:	00db      	lsls	r3, r3, #3
 801369e:	440b      	add	r3, r1
 80136a0:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	f003 0301 	and.w	r3, r3, #1
 80136aa:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((nFlasherNum & 0x0F) << 4) + ((pConfig->stFlasher[nFlasherNum].nSingleCycle & 0x01) << 1) +
 80136ac:	4413      	add	r3, r2
 80136ae:	b2da      	uxtb	r2, r3
 80136b0:	4b28      	ldr	r3, [pc, #160]	; (8013754 <PdmConfig_Set+0x10d4>)
 80136b2:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stFlasher[nFlasherNum].nInput;
 80136b4:	4b25      	ldr	r3, [pc, #148]	; (801374c <PdmConfig_Set+0x10cc>)
 80136b6:	781b      	ldrb	r3, [r3, #0]
 80136b8:	4619      	mov	r1, r3
 80136ba:	68fa      	ldr	r2, [r7, #12]
 80136bc:	460b      	mov	r3, r1
 80136be:	005b      	lsls	r3, r3, #1
 80136c0:	440b      	add	r3, r1
 80136c2:	00db      	lsls	r3, r3, #3
 80136c4:	4413      	add	r3, r2
 80136c6:	f203 5319 	addw	r3, r3, #1305	; 0x519
 80136ca:	781a      	ldrb	r2, [r3, #0]
 80136cc:	4b21      	ldr	r3, [pc, #132]	; (8013754 <PdmConfig_Set+0x10d4>)
 80136ce:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stFlasher[nFlasherNum].nOutput;
 80136d0:	4b1e      	ldr	r3, [pc, #120]	; (801374c <PdmConfig_Set+0x10cc>)
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	4619      	mov	r1, r3
 80136d6:	68fa      	ldr	r2, [r7, #12]
 80136d8:	460b      	mov	r3, r1
 80136da:	005b      	lsls	r3, r3, #1
 80136dc:	440b      	add	r3, r1
 80136de:	00db      	lsls	r3, r3, #3
 80136e0:	4413      	add	r3, r2
 80136e2:	f203 5325 	addw	r3, r3, #1317	; 0x525
 80136e6:	781a      	ldrb	r2, [r3, #0]
 80136e8:	4b1a      	ldr	r3, [pc, #104]	; (8013754 <PdmConfig_Set+0x10d4>)
 80136ea:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stFlasher[nFlasherNum].nFlashOnTime / 100);
 80136ec:	4b17      	ldr	r3, [pc, #92]	; (801374c <PdmConfig_Set+0x10cc>)
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	4619      	mov	r1, r3
 80136f2:	68fa      	ldr	r2, [r7, #12]
 80136f4:	460b      	mov	r3, r1
 80136f6:	005b      	lsls	r3, r3, #1
 80136f8:	440b      	add	r3, r1
 80136fa:	00db      	lsls	r3, r3, #3
 80136fc:	4413      	add	r3, r2
 80136fe:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8013702:	881b      	ldrh	r3, [r3, #0]
 8013704:	4a15      	ldr	r2, [pc, #84]	; (801375c <PdmConfig_Set+0x10dc>)
 8013706:	fba2 2303 	umull	r2, r3, r2, r3
 801370a:	095b      	lsrs	r3, r3, #5
 801370c:	b29b      	uxth	r3, r3
 801370e:	b2da      	uxtb	r2, r3
 8013710:	4b10      	ldr	r3, [pc, #64]	; (8013754 <PdmConfig_Set+0x10d4>)
 8013712:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stFlasher[nFlasherNum].nFlashOffTime / 100);
 8013714:	4b0d      	ldr	r3, [pc, #52]	; (801374c <PdmConfig_Set+0x10cc>)
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	4619      	mov	r1, r3
 801371a:	68fa      	ldr	r2, [r7, #12]
 801371c:	460b      	mov	r3, r1
 801371e:	005b      	lsls	r3, r3, #1
 8013720:	440b      	add	r3, r1
 8013722:	00db      	lsls	r3, r3, #3
 8013724:	4413      	add	r3, r2
 8013726:	f203 5322 	addw	r3, r3, #1314	; 0x522
 801372a:	881b      	ldrh	r3, [r3, #0]
 801372c:	4a0b      	ldr	r2, [pc, #44]	; (801375c <PdmConfig_Set+0x10dc>)
 801372e:	fba2 2303 	umull	r2, r3, r2, r3
 8013732:	095b      	lsrs	r3, r3, #5
 8013734:	b29b      	uxth	r3, r3
 8013736:	b2da      	uxtb	r2, r3
 8013738:	4b06      	ldr	r3, [pc, #24]	; (8013754 <PdmConfig_Set+0x10d4>)
 801373a:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 801373c:	4b05      	ldr	r3, [pc, #20]	; (8013754 <PdmConfig_Set+0x10d4>)
 801373e:	2200      	movs	r2, #0
 8013740:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8013742:	4b04      	ldr	r3, [pc, #16]	; (8013754 <PdmConfig_Set+0x10d4>)
 8013744:	2200      	movs	r2, #0
 8013746:	71da      	strb	r2, [r3, #7]
      }
    break;
 8013748:	e2ca      	b.n	8013ce0 <PdmConfig_Set+0x1660>
 801374a:	bf00      	nop
 801374c:	20004be8 	.word	0x20004be8
 8013750:	20004be4 	.word	0x20004be4
 8013754:	20004bb8 	.word	0x20004bb8
 8013758:	20004bc4 	.word	0x20004bc4
 801375c:	51eb851f 	.word	0x51eb851f

    //Set Starter Disable Settings
    // 'D'
    case MSG_RX_SET_STARTER:
      if(stMsgRx->nRxLen == 5){
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013766:	2b05      	cmp	r3, #5
 8013768:	f040 808f 	bne.w	801388a <PdmConfig_Set+0x120a>
        pConfig->stStarter.nEnabled = (stMsgRx->nRxData[1] & 0x01);
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013772:	f003 0301 	and.w	r3, r3, #1
 8013776:	b2da      	uxtb	r2, r3
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578

        pConfig->stStarter.nInput = stMsgRx->nRxData[2];
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579

        pConfig->stStarter.nDisableOut[0] = (stMsgRx->nRxData[3] & 0x01);
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8013790:	f003 0301 	and.w	r3, r3, #1
 8013794:	b2da      	uxtb	r2, r3
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
        pConfig->stStarter.nDisableOut[1] = (stMsgRx->nRxData[3] & 0x02) >> 1;
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80137a2:	105b      	asrs	r3, r3, #1
 80137a4:	b2db      	uxtb	r3, r3
 80137a6:	f003 0301 	and.w	r3, r3, #1
 80137aa:	b2da      	uxtb	r2, r3
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
        pConfig->stStarter.nDisableOut[2] = (stMsgRx->nRxData[3] & 0x04) >> 2;
 80137b2:	68bb      	ldr	r3, [r7, #8]
 80137b4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80137b8:	109b      	asrs	r3, r3, #2
 80137ba:	b2db      	uxtb	r3, r3
 80137bc:	f003 0301 	and.w	r3, r3, #1
 80137c0:	b2da      	uxtb	r2, r3
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
        pConfig->stStarter.nDisableOut[3] = (stMsgRx->nRxData[3] & 0x08) >> 3;
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80137ce:	10db      	asrs	r3, r3, #3
 80137d0:	b2db      	uxtb	r3, r3
 80137d2:	f003 0301 	and.w	r3, r3, #1
 80137d6:	b2da      	uxtb	r2, r3
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
        pConfig->stStarter.nDisableOut[4] = (stMsgRx->nRxData[3] & 0x10) >> 4;
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80137e4:	111b      	asrs	r3, r3, #4
 80137e6:	b2db      	uxtb	r3, r3
 80137e8:	f003 0301 	and.w	r3, r3, #1
 80137ec:	b2da      	uxtb	r2, r3
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
        pConfig->stStarter.nDisableOut[5] = (stMsgRx->nRxData[3] & 0x20) >> 5;
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80137fa:	115b      	asrs	r3, r3, #5
 80137fc:	b2db      	uxtb	r3, r3
 80137fe:	f003 0301 	and.w	r3, r3, #1
 8013802:	b2da      	uxtb	r2, r3
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
        pConfig->stStarter.nDisableOut[6] = (stMsgRx->nRxData[3] & 0x40) >> 6;
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8013810:	119b      	asrs	r3, r3, #6
 8013812:	b2db      	uxtb	r3, r3
 8013814:	f003 0301 	and.w	r3, r3, #1
 8013818:	b2da      	uxtb	r2, r3
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	f883 2586 	strb.w	r2, [r3, #1414]	; 0x586
        pConfig->stStarter.nDisableOut[7] = (stMsgRx->nRxData[3] & 0x80) >> 7;
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8013826:	09db      	lsrs	r3, r3, #7
 8013828:	b2da      	uxtb	r2, r3
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	f883 2587 	strb.w	r2, [r3, #1415]	; 0x587

        pConfig->stStarter.nDisableOut[8] = (stMsgRx->nRxData[4] & 0x01);
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013836:	f003 0301 	and.w	r3, r3, #1
 801383a:	b2da      	uxtb	r2, r3
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	f883 2588 	strb.w	r2, [r3, #1416]	; 0x588
        pConfig->stStarter.nDisableOut[9] = (stMsgRx->nRxData[4] & 0x02) >> 1;
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013848:	105b      	asrs	r3, r3, #1
 801384a:	b2db      	uxtb	r3, r3
 801384c:	f003 0301 	and.w	r3, r3, #1
 8013850:	b2da      	uxtb	r2, r3
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
        pConfig->stStarter.nDisableOut[10] = (stMsgRx->nRxData[4] & 0x04) >> 2;
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801385e:	109b      	asrs	r3, r3, #2
 8013860:	b2db      	uxtb	r3, r3
 8013862:	f003 0301 	and.w	r3, r3, #1
 8013866:	b2da      	uxtb	r2, r3
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
        pConfig->stStarter.nDisableOut[11] = (stMsgRx->nRxData[4] & 0x08) >> 3;
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013874:	10db      	asrs	r3, r3, #3
 8013876:	b2db      	uxtb	r3, r3
 8013878:	f003 0301 	and.w	r3, r3, #1
 801387c:	b2da      	uxtb	r2, r3
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	f883 258b 	strb.w	r2, [r3, #1419]	; 0x58b
        nSend = 1;
 8013884:	4b50      	ldr	r3, [pc, #320]	; (80139c8 <PdmConfig_Set+0x1348>)
 8013886:	2201      	movs	r2, #1
 8013888:	701a      	strb	r2, [r3, #0]
      }

      if((stMsgRx->nRxLen == 1) || nSend){
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013890:	2b01      	cmp	r3, #1
 8013892:	d004      	beq.n	801389e <PdmConfig_Set+0x121e>
 8013894:	4b4c      	ldr	r3, [pc, #304]	; (80139c8 <PdmConfig_Set+0x1348>)
 8013896:	781b      	ldrb	r3, [r3, #0]
 8013898:	2b00      	cmp	r3, #0
 801389a:	f000 8223 	beq.w	8013ce4 <PdmConfig_Set+0x1664>
        stMsgUsbTx.nTxLen = 5;
 801389e:	4b4b      	ldr	r3, [pc, #300]	; (80139cc <PdmConfig_Set+0x134c>)
 80138a0:	2205      	movs	r2, #5
 80138a2:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 80138a4:	4b4a      	ldr	r3, [pc, #296]	; (80139d0 <PdmConfig_Set+0x1350>)
 80138a6:	2205      	movs	r2, #5
 80138a8:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_STARTER;
 80138aa:	4b48      	ldr	r3, [pc, #288]	; (80139cc <PdmConfig_Set+0x134c>)
 80138ac:	2264      	movs	r2, #100	; 0x64
 80138ae:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (pConfig->stStarter.nEnabled & 0x01);
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	f893 3578 	ldrb.w	r3, [r3, #1400]	; 0x578
 80138b6:	f003 0301 	and.w	r3, r3, #1
 80138ba:	b2da      	uxtb	r2, r3
 80138bc:	4b43      	ldr	r3, [pc, #268]	; (80139cc <PdmConfig_Set+0x134c>)
 80138be:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stStarter.nInput;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	f893 2579 	ldrb.w	r2, [r3, #1401]	; 0x579
 80138c6:	4b41      	ldr	r3, [pc, #260]	; (80139cc <PdmConfig_Set+0x134c>)
 80138c8:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	f893 3587 	ldrb.w	r3, [r3, #1415]	; 0x587
 80138d0:	01db      	lsls	r3, r3, #7
 80138d2:	b2da      	uxtb	r2, r3
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	f893 3586 	ldrb.w	r3, [r3, #1414]	; 0x586
 80138da:	019b      	lsls	r3, r3, #6
 80138dc:	b2db      	uxtb	r3, r3
 80138de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138e2:	b2db      	uxtb	r3, r3
 80138e4:	4413      	add	r3, r2
 80138e6:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	f893 3585 	ldrb.w	r3, [r3, #1413]	; 0x585
 80138ee:	015b      	lsls	r3, r3, #5
 80138f0:	b2db      	uxtb	r3, r3
 80138f2:	f003 0320 	and.w	r3, r3, #32
 80138f6:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 80138f8:	4413      	add	r3, r2
 80138fa:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	f893 3584 	ldrb.w	r3, [r3, #1412]	; 0x584
 8013902:	011b      	lsls	r3, r3, #4
 8013904:	b2db      	uxtb	r3, r3
 8013906:	f003 0310 	and.w	r3, r3, #16
 801390a:	b2db      	uxtb	r3, r3
 801390c:	4413      	add	r3, r2
 801390e:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	f893 3583 	ldrb.w	r3, [r3, #1411]	; 0x583
 8013916:	00db      	lsls	r3, r3, #3
 8013918:	b2db      	uxtb	r3, r3
 801391a:	f003 0308 	and.w	r3, r3, #8
 801391e:	b2db      	uxtb	r3, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 8013920:	4413      	add	r3, r2
 8013922:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	f893 3582 	ldrb.w	r3, [r3, #1410]	; 0x582
 801392a:	009b      	lsls	r3, r3, #2
 801392c:	b2db      	uxtb	r3, r3
 801392e:	f003 0304 	and.w	r3, r3, #4
 8013932:	b2db      	uxtb	r3, r3
 8013934:	4413      	add	r3, r2
 8013936:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[1] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[0] & 0x01);
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	f893 3581 	ldrb.w	r3, [r3, #1409]	; 0x581
 801393e:	005b      	lsls	r3, r3, #1
 8013940:	b2db      	uxtb	r3, r3
 8013942:	f003 0302 	and.w	r3, r3, #2
 8013946:	b2db      	uxtb	r3, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8013948:	4413      	add	r3, r2
 801394a:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[1] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[0] & 0x01);
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	f893 3580 	ldrb.w	r3, [r3, #1408]	; 0x580
 8013952:	f003 0301 	and.w	r3, r3, #1
 8013956:	b2db      	uxtb	r3, r3
 8013958:	4413      	add	r3, r2
 801395a:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 801395c:	4b1b      	ldr	r3, [pc, #108]	; (80139cc <PdmConfig_Set+0x134c>)
 801395e:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	f893 358b 	ldrb.w	r3, [r3, #1419]	; 0x58b
 8013966:	00db      	lsls	r3, r3, #3
 8013968:	b25b      	sxtb	r3, r3
 801396a:	f003 0308 	and.w	r3, r3, #8
 801396e:	b25a      	sxtb	r2, r3
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	f893 358a 	ldrb.w	r3, [r3, #1418]	; 0x58a
 8013976:	009b      	lsls	r3, r3, #2
 8013978:	b25b      	sxtb	r3, r3
 801397a:	f003 0304 	and.w	r3, r3, #4
 801397e:	b25b      	sxtb	r3, r3
 8013980:	4313      	orrs	r3, r2
 8013982:	b25b      	sxtb	r3, r3
 8013984:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[9] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[8] & 0x01);
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	f893 3589 	ldrb.w	r3, [r3, #1417]	; 0x589
 801398c:	005b      	lsls	r3, r3, #1
 801398e:	b2db      	uxtb	r3, r3
 8013990:	f003 0302 	and.w	r3, r3, #2
 8013994:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8013996:	4413      	add	r3, r2
 8013998:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[9] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[8] & 0x01);
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	f893 3588 	ldrb.w	r3, [r3, #1416]	; 0x588
 80139a0:	f003 0301 	and.w	r3, r3, #1
 80139a4:	b2db      	uxtb	r3, r3
 80139a6:	4413      	add	r3, r2
 80139a8:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 80139aa:	4b08      	ldr	r3, [pc, #32]	; (80139cc <PdmConfig_Set+0x134c>)
 80139ac:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 80139ae:	4b07      	ldr	r3, [pc, #28]	; (80139cc <PdmConfig_Set+0x134c>)
 80139b0:	2200      	movs	r2, #0
 80139b2:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 80139b4:	4b05      	ldr	r3, [pc, #20]	; (80139cc <PdmConfig_Set+0x134c>)
 80139b6:	2200      	movs	r2, #0
 80139b8:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 80139ba:	4b04      	ldr	r3, [pc, #16]	; (80139cc <PdmConfig_Set+0x134c>)
 80139bc:	2200      	movs	r2, #0
 80139be:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 80139c0:	4b01      	ldr	r3, [pc, #4]	; (80139c8 <PdmConfig_Set+0x1348>)
 80139c2:	2201      	movs	r2, #1
 80139c4:	701a      	strb	r2, [r3, #0]
      }
    break;
 80139c6:	e18d      	b.n	8013ce4 <PdmConfig_Set+0x1664>
 80139c8:	20004be4 	.word	0x20004be4
 80139cc:	20004bb8 	.word	0x20004bb8
 80139d0:	20004bc4 	.word	0x20004bc4

    //Set CAN Input Settings
    // 'N'
    case MSG_RX_SET_CAN_INPUTS:
       if(stMsgRx->nRxLen == 7){
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139da:	2b07      	cmp	r3, #7
 80139dc:	f040 8097 	bne.w	8013b0e <PdmConfig_Set+0x148e>
         nCanInputNum = (stMsgRx->nRxData[2]);
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80139e6:	4bb6      	ldr	r3, [pc, #728]	; (8013cc0 <PdmConfig_Set+0x1640>)
 80139e8:	701a      	strb	r2, [r3, #0]
         if(nCanInputNum < PDM_NUM_CAN_INPUTS){
 80139ea:	4bb5      	ldr	r3, [pc, #724]	; (8013cc0 <PdmConfig_Set+0x1640>)
 80139ec:	781b      	ldrb	r3, [r3, #0]
 80139ee:	2b1d      	cmp	r3, #29
 80139f0:	f200 808d 	bhi.w	8013b0e <PdmConfig_Set+0x148e>
           pConfig->stCanInput[nCanInputNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80139fa:	4ab1      	ldr	r2, [pc, #708]	; (8013cc0 <PdmConfig_Set+0x1640>)
 80139fc:	7812      	ldrb	r2, [r2, #0]
 80139fe:	4611      	mov	r1, r2
 8013a00:	f003 0301 	and.w	r3, r3, #1
 8013a04:	b2d8      	uxtb	r0, r3
 8013a06:	68fa      	ldr	r2, [r7, #12]
 8013a08:	460b      	mov	r3, r1
 8013a0a:	00db      	lsls	r3, r3, #3
 8013a0c:	1a5b      	subs	r3, r3, r1
 8013a0e:	009b      	lsls	r3, r3, #2
 8013a10:	4413      	add	r3, r2
 8013a12:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8013a16:	4602      	mov	r2, r0
 8013a18:	701a      	strb	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].eMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013a20:	105b      	asrs	r3, r3, #1
 8013a22:	b2db      	uxtb	r3, r3
 8013a24:	4aa6      	ldr	r2, [pc, #664]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013a26:	7812      	ldrb	r2, [r2, #0]
 8013a28:	4611      	mov	r1, r2
 8013a2a:	f003 0303 	and.w	r3, r3, #3
 8013a2e:	b2d8      	uxtb	r0, r3
 8013a30:	68fa      	ldr	r2, [r7, #12]
 8013a32:	460b      	mov	r3, r1
 8013a34:	00db      	lsls	r3, r3, #3
 8013a36:	1a5b      	subs	r3, r3, r1
 8013a38:	009b      	lsls	r3, r3, #2
 8013a3a:	4413      	add	r3, r2
 8013a3c:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8013a40:	4602      	mov	r2, r0
 8013a42:	701a      	strb	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].eOperator = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013a4a:	4a9d      	ldr	r2, [pc, #628]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013a4c:	7812      	ldrb	r2, [r2, #0]
 8013a4e:	4611      	mov	r1, r2
 8013a50:	091b      	lsrs	r3, r3, #4
 8013a52:	b2d8      	uxtb	r0, r3
 8013a54:	68fa      	ldr	r2, [r7, #12]
 8013a56:	460b      	mov	r3, r1
 8013a58:	00db      	lsls	r3, r3, #3
 8013a5a:	1a5b      	subs	r3, r3, r1
 8013a5c:	009b      	lsls	r3, r3, #2
 8013a5e:	4413      	add	r3, r2
 8013a60:	f203 5394 	addw	r3, r3, #1428	; 0x594
 8013a64:	4602      	mov	r2, r0
 8013a66:	701a      	strb	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nId = (stMsgRx->nRxData[3] << 8) + stMsgRx->nRxData[4];
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8013a6e:	b29b      	uxth	r3, r3
 8013a70:	021b      	lsls	r3, r3, #8
 8013a72:	b29a      	uxth	r2, r3
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013a7a:	b29b      	uxth	r3, r3
 8013a7c:	4990      	ldr	r1, [pc, #576]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013a7e:	7809      	ldrb	r1, [r1, #0]
 8013a80:	4413      	add	r3, r2
 8013a82:	b298      	uxth	r0, r3
 8013a84:	68fa      	ldr	r2, [r7, #12]
 8013a86:	460b      	mov	r3, r1
 8013a88:	00db      	lsls	r3, r3, #3
 8013a8a:	1a5b      	subs	r3, r3, r1
 8013a8c:	009b      	lsls	r3, r3, #2
 8013a8e:	4413      	add	r3, r2
 8013a90:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8013a94:	4602      	mov	r2, r0
 8013a96:	801a      	strh	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nLowByte = (stMsgRx->nRxData[5] & 0x0F);
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8013a9e:	b29b      	uxth	r3, r3
 8013aa0:	4a87      	ldr	r2, [pc, #540]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013aa2:	7812      	ldrb	r2, [r2, #0]
 8013aa4:	4611      	mov	r1, r2
 8013aa6:	f003 030f 	and.w	r3, r3, #15
 8013aaa:	b298      	uxth	r0, r3
 8013aac:	68fa      	ldr	r2, [r7, #12]
 8013aae:	460b      	mov	r3, r1
 8013ab0:	00db      	lsls	r3, r3, #3
 8013ab2:	1a5b      	subs	r3, r3, r1
 8013ab4:	009b      	lsls	r3, r3, #2
 8013ab6:	4413      	add	r3, r2
 8013ab8:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8013abc:	4602      	mov	r2, r0
 8013abe:	801a      	strh	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].nHighByte = (stMsgRx->nRxData[5] & 0xF0) >> 4;
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8013ac6:	091b      	lsrs	r3, r3, #4
 8013ac8:	b2da      	uxtb	r2, r3
 8013aca:	4b7d      	ldr	r3, [pc, #500]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013acc:	781b      	ldrb	r3, [r3, #0]
 8013ace:	4619      	mov	r1, r3
 8013ad0:	b290      	uxth	r0, r2
 8013ad2:	68fa      	ldr	r2, [r7, #12]
 8013ad4:	460b      	mov	r3, r1
 8013ad6:	00db      	lsls	r3, r3, #3
 8013ad8:	1a5b      	subs	r3, r3, r1
 8013ada:	009b      	lsls	r3, r3, #2
 8013adc:	4413      	add	r3, r2
 8013ade:	f203 5392 	addw	r3, r3, #1426	; 0x592
 8013ae2:	4602      	mov	r2, r0
 8013ae4:	801a      	strh	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nOnVal = stMsgRx->nRxData[6];
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8013aec:	4b74      	ldr	r3, [pc, #464]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	4619      	mov	r1, r3
 8013af2:	b290      	uxth	r0, r2
 8013af4:	68fa      	ldr	r2, [r7, #12]
 8013af6:	460b      	mov	r3, r1
 8013af8:	00db      	lsls	r3, r3, #3
 8013afa:	1a5b      	subs	r3, r3, r1
 8013afc:	009b      	lsls	r3, r3, #2
 8013afe:	4413      	add	r3, r2
 8013b00:	f203 5396 	addw	r3, r3, #1430	; 0x596
 8013b04:	4602      	mov	r2, r0
 8013b06:	801a      	strh	r2, [r3, #0]

           nSend = 1;
 8013b08:	4b6e      	ldr	r3, [pc, #440]	; (8013cc4 <PdmConfig_Set+0x1644>)
 8013b0a:	2201      	movs	r2, #1
 8013b0c:	701a      	strb	r2, [r3, #0]
         }
       }

       if(stMsgRx->nRxLen == 2){
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b14:	2b02      	cmp	r3, #2
 8013b16:	d10b      	bne.n	8013b30 <PdmConfig_Set+0x14b0>
          nCanInputNum = (stMsgRx->nRxData[1]);
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8013b1e:	4b68      	ldr	r3, [pc, #416]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013b20:	701a      	strb	r2, [r3, #0]
          if(nCanInputNum < PDM_NUM_CAN_INPUTS){
 8013b22:	4b67      	ldr	r3, [pc, #412]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	2b1d      	cmp	r3, #29
 8013b28:	d802      	bhi.n	8013b30 <PdmConfig_Set+0x14b0>
            nSend = 1;
 8013b2a:	4b66      	ldr	r3, [pc, #408]	; (8013cc4 <PdmConfig_Set+0x1644>)
 8013b2c:	2201      	movs	r2, #1
 8013b2e:	701a      	strb	r2, [r3, #0]
          }
       }

       if(nSend){
 8013b30:	4b64      	ldr	r3, [pc, #400]	; (8013cc4 <PdmConfig_Set+0x1644>)
 8013b32:	781b      	ldrb	r3, [r3, #0]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	f000 80d7 	beq.w	8013ce8 <PdmConfig_Set+0x1668>
         stMsgUsbTx.nTxLen = 7;
 8013b3a:	4b63      	ldr	r3, [pc, #396]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013b3c:	2207      	movs	r2, #7
 8013b3e:	721a      	strb	r2, [r3, #8]
         stMsgCanTx.stTxHeader.DLC = 7;
 8013b40:	4b62      	ldr	r3, [pc, #392]	; (8013ccc <PdmConfig_Set+0x164c>)
 8013b42:	2207      	movs	r2, #7
 8013b44:	611a      	str	r2, [r3, #16]

         stMsgUsbTx.nTxData[0] = MSG_TX_SET_CAN_INPUTS;
 8013b46:	4b60      	ldr	r3, [pc, #384]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013b48:	226e      	movs	r2, #110	; 0x6e
 8013b4a:	701a      	strb	r2, [r3, #0]
         stMsgUsbTx.nTxData[1] = ((pConfig->stCanInput[nCanInputNum].eOperator & 0x0F) << 4) + ((pConfig->stCanInput[nCanInputNum].eMode & 0x03) << 1) +
 8013b4c:	4b5c      	ldr	r3, [pc, #368]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013b4e:	781b      	ldrb	r3, [r3, #0]
 8013b50:	4619      	mov	r1, r3
 8013b52:	68fa      	ldr	r2, [r7, #12]
 8013b54:	460b      	mov	r3, r1
 8013b56:	00db      	lsls	r3, r3, #3
 8013b58:	1a5b      	subs	r3, r3, r1
 8013b5a:	009b      	lsls	r3, r3, #2
 8013b5c:	4413      	add	r3, r2
 8013b5e:	f203 5394 	addw	r3, r3, #1428	; 0x594
 8013b62:	781b      	ldrb	r3, [r3, #0]
 8013b64:	011b      	lsls	r3, r3, #4
 8013b66:	b2da      	uxtb	r2, r3
 8013b68:	4b55      	ldr	r3, [pc, #340]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	68f9      	ldr	r1, [r7, #12]
 8013b70:	4603      	mov	r3, r0
 8013b72:	00db      	lsls	r3, r3, #3
 8013b74:	1a1b      	subs	r3, r3, r0
 8013b76:	009b      	lsls	r3, r3, #2
 8013b78:	440b      	add	r3, r1
 8013b7a:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	005b      	lsls	r3, r3, #1
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	f003 0306 	and.w	r3, r3, #6
 8013b88:	b2db      	uxtb	r3, r3
 8013b8a:	4413      	add	r3, r2
 8013b8c:	b2da      	uxtb	r2, r3
                                 (pConfig->stCanInput[nCanInputNum].nEnabled & 0x01);
 8013b8e:	4b4c      	ldr	r3, [pc, #304]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013b90:	781b      	ldrb	r3, [r3, #0]
 8013b92:	4618      	mov	r0, r3
 8013b94:	68f9      	ldr	r1, [r7, #12]
 8013b96:	4603      	mov	r3, r0
 8013b98:	00db      	lsls	r3, r3, #3
 8013b9a:	1a1b      	subs	r3, r3, r0
 8013b9c:	009b      	lsls	r3, r3, #2
 8013b9e:	440b      	add	r3, r1
 8013ba0:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8013ba4:	781b      	ldrb	r3, [r3, #0]
 8013ba6:	f003 0301 	and.w	r3, r3, #1
 8013baa:	b2db      	uxtb	r3, r3
         stMsgUsbTx.nTxData[1] = ((pConfig->stCanInput[nCanInputNum].eOperator & 0x0F) << 4) + ((pConfig->stCanInput[nCanInputNum].eMode & 0x03) << 1) +
 8013bac:	4413      	add	r3, r2
 8013bae:	b2da      	uxtb	r2, r3
 8013bb0:	4b45      	ldr	r3, [pc, #276]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013bb2:	705a      	strb	r2, [r3, #1]
         stMsgUsbTx.nTxData[2] = nCanInputNum;
 8013bb4:	4b42      	ldr	r3, [pc, #264]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013bb6:	781a      	ldrb	r2, [r3, #0]
 8013bb8:	4b43      	ldr	r3, [pc, #268]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013bba:	709a      	strb	r2, [r3, #2]
         stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nId >> 8);
 8013bbc:	4b40      	ldr	r3, [pc, #256]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013bbe:	781b      	ldrb	r3, [r3, #0]
 8013bc0:	4619      	mov	r1, r3
 8013bc2:	68fa      	ldr	r2, [r7, #12]
 8013bc4:	460b      	mov	r3, r1
 8013bc6:	00db      	lsls	r3, r3, #3
 8013bc8:	1a5b      	subs	r3, r3, r1
 8013bca:	009b      	lsls	r3, r3, #2
 8013bcc:	4413      	add	r3, r2
 8013bce:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8013bd2:	881b      	ldrh	r3, [r3, #0]
 8013bd4:	0a1b      	lsrs	r3, r3, #8
 8013bd6:	b29b      	uxth	r3, r3
 8013bd8:	b2da      	uxtb	r2, r3
 8013bda:	4b3b      	ldr	r3, [pc, #236]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013bdc:	70da      	strb	r2, [r3, #3]
         stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nId & 0xFF);
 8013bde:	4b38      	ldr	r3, [pc, #224]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	4619      	mov	r1, r3
 8013be4:	68fa      	ldr	r2, [r7, #12]
 8013be6:	460b      	mov	r3, r1
 8013be8:	00db      	lsls	r3, r3, #3
 8013bea:	1a5b      	subs	r3, r3, r1
 8013bec:	009b      	lsls	r3, r3, #2
 8013bee:	4413      	add	r3, r2
 8013bf0:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8013bf4:	881b      	ldrh	r3, [r3, #0]
 8013bf6:	b2da      	uxtb	r2, r3
 8013bf8:	4b33      	ldr	r3, [pc, #204]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013bfa:	711a      	strb	r2, [r3, #4]
         stMsgUsbTx.nTxData[5] = ((pConfig->stCanInput[nCanInputNum].nHighByte & 0xF) << 4) + (pConfig->stCanInput[nCanInputNum].nLowByte & 0xF);
 8013bfc:	4b30      	ldr	r3, [pc, #192]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013bfe:	781b      	ldrb	r3, [r3, #0]
 8013c00:	4619      	mov	r1, r3
 8013c02:	68fa      	ldr	r2, [r7, #12]
 8013c04:	460b      	mov	r3, r1
 8013c06:	00db      	lsls	r3, r3, #3
 8013c08:	1a5b      	subs	r3, r3, r1
 8013c0a:	009b      	lsls	r3, r3, #2
 8013c0c:	4413      	add	r3, r2
 8013c0e:	f203 5392 	addw	r3, r3, #1426	; 0x592
 8013c12:	881b      	ldrh	r3, [r3, #0]
 8013c14:	011b      	lsls	r3, r3, #4
 8013c16:	b2da      	uxtb	r2, r3
 8013c18:	4b29      	ldr	r3, [pc, #164]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	68f9      	ldr	r1, [r7, #12]
 8013c20:	4603      	mov	r3, r0
 8013c22:	00db      	lsls	r3, r3, #3
 8013c24:	1a1b      	subs	r3, r3, r0
 8013c26:	009b      	lsls	r3, r3, #2
 8013c28:	440b      	add	r3, r1
 8013c2a:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8013c2e:	881b      	ldrh	r3, [r3, #0]
 8013c30:	b2db      	uxtb	r3, r3
 8013c32:	f003 030f 	and.w	r3, r3, #15
 8013c36:	b2db      	uxtb	r3, r3
 8013c38:	4413      	add	r3, r2
 8013c3a:	b2da      	uxtb	r2, r3
 8013c3c:	4b22      	ldr	r3, [pc, #136]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013c3e:	715a      	strb	r2, [r3, #5]
         stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nOnVal);
 8013c40:	4b1f      	ldr	r3, [pc, #124]	; (8013cc0 <PdmConfig_Set+0x1640>)
 8013c42:	781b      	ldrb	r3, [r3, #0]
 8013c44:	4619      	mov	r1, r3
 8013c46:	68fa      	ldr	r2, [r7, #12]
 8013c48:	460b      	mov	r3, r1
 8013c4a:	00db      	lsls	r3, r3, #3
 8013c4c:	1a5b      	subs	r3, r3, r1
 8013c4e:	009b      	lsls	r3, r3, #2
 8013c50:	4413      	add	r3, r2
 8013c52:	f203 5396 	addw	r3, r3, #1430	; 0x596
 8013c56:	881b      	ldrh	r3, [r3, #0]
 8013c58:	b2da      	uxtb	r2, r3
 8013c5a:	4b1b      	ldr	r3, [pc, #108]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013c5c:	719a      	strb	r2, [r3, #6]
       }
    break;
 8013c5e:	e043      	b.n	8013ce8 <PdmConfig_Set+0x1668>

    //Get Version
    // 'V'
    case MSG_RX_GET_VERSION:
      if(stMsgRx->nRxLen == 1){
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c66:	2b01      	cmp	r3, #1
 8013c68:	d140      	bne.n	8013cec <PdmConfig_Set+0x166c>
        nSend = 1;
 8013c6a:	4b16      	ldr	r3, [pc, #88]	; (8013cc4 <PdmConfig_Set+0x1644>)
 8013c6c:	2201      	movs	r2, #1
 8013c6e:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxLen = 5;
 8013c70:	4b15      	ldr	r3, [pc, #84]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013c72:	2205      	movs	r2, #5
 8013c74:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 8013c76:	4b15      	ldr	r3, [pc, #84]	; (8013ccc <PdmConfig_Set+0x164c>)
 8013c78:	2205      	movs	r2, #5
 8013c7a:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_GET_VERSION;
 8013c7c:	4b12      	ldr	r3, [pc, #72]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013c7e:	2276      	movs	r2, #118	; 0x76
 8013c80:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (uint8_t)PDM_MAJOR_VERSION;
 8013c82:	4b11      	ldr	r3, [pc, #68]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013c84:	2203      	movs	r2, #3
 8013c86:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)PDM_MINOR_VERSION;
 8013c88:	4b0f      	ldr	r3, [pc, #60]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(PDM_BUILD >> 8);
 8013c8e:	4b0e      	ldr	r3, [pc, #56]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013c90:	2200      	movs	r2, #0
 8013c92:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(PDM_BUILD & 0xFF);
 8013c94:	4b0c      	ldr	r3, [pc, #48]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013c96:	2201      	movs	r2, #1
 8013c98:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8013c9a:	4b0b      	ldr	r3, [pc, #44]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8013ca0:	4b09      	ldr	r3, [pc, #36]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8013ca6:	4b08      	ldr	r3, [pc, #32]	; (8013cc8 <PdmConfig_Set+0x1648>)
 8013ca8:	2200      	movs	r2, #0
 8013caa:	71da      	strb	r2, [r3, #7]
      }
    break;
 8013cac:	e01e      	b.n	8013cec <PdmConfig_Set+0x166c>

    default:
      return 0;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	e03e      	b.n	8013d30 <PdmConfig_Set+0x16b0>
    break;
 8013cb2:	bf00      	nop
 8013cb4:	e01b      	b.n	8013cee <PdmConfig_Set+0x166e>
    break;
 8013cb6:	bf00      	nop
 8013cb8:	e019      	b.n	8013cee <PdmConfig_Set+0x166e>
    break;
 8013cba:	bf00      	nop
 8013cbc:	e017      	b.n	8013cee <PdmConfig_Set+0x166e>
 8013cbe:	bf00      	nop
 8013cc0:	20004be9 	.word	0x20004be9
 8013cc4:	20004be4 	.word	0x20004be4
 8013cc8:	20004bb8 	.word	0x20004bb8
 8013ccc:	20004bc4 	.word	0x20004bc4
    break;
 8013cd0:	bf00      	nop
 8013cd2:	e00c      	b.n	8013cee <PdmConfig_Set+0x166e>
    break;
 8013cd4:	bf00      	nop
 8013cd6:	e00a      	b.n	8013cee <PdmConfig_Set+0x166e>
    break;
 8013cd8:	bf00      	nop
 8013cda:	e008      	b.n	8013cee <PdmConfig_Set+0x166e>
    break;
 8013cdc:	bf00      	nop
 8013cde:	e006      	b.n	8013cee <PdmConfig_Set+0x166e>
    break;
 8013ce0:	bf00      	nop
 8013ce2:	e004      	b.n	8013cee <PdmConfig_Set+0x166e>
    break;
 8013ce4:	bf00      	nop
 8013ce6:	e002      	b.n	8013cee <PdmConfig_Set+0x166e>
    break;
 8013ce8:	bf00      	nop
 8013cea:	e000      	b.n	8013cee <PdmConfig_Set+0x166e>
    break;
 8013cec:	bf00      	nop
    }

  if(nSend){
 8013cee:	4b12      	ldr	r3, [pc, #72]	; (8013d38 <PdmConfig_Set+0x16b8>)
 8013cf0:	781b      	ldrb	r3, [r3, #0]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d01b      	beq.n	8013d2e <PdmConfig_Set+0x16ae>
    stMsgCanTx.stTxHeader.StdId = pConfig->stCanOutput.nBaseId + 20;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
 8013cfc:	3314      	adds	r3, #20
 8013cfe:	461a      	mov	r2, r3
 8013d00:	4b0e      	ldr	r3, [pc, #56]	; (8013d3c <PdmConfig_Set+0x16bc>)
 8013d02:	601a      	str	r2, [r3, #0]

    memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8013d04:	4b0d      	ldr	r3, [pc, #52]	; (8013d3c <PdmConfig_Set+0x16bc>)
 8013d06:	4a0e      	ldr	r2, [pc, #56]	; (8013d40 <PdmConfig_Set+0x16c0>)
 8013d08:	3318      	adds	r3, #24
 8013d0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d0e:	e883 0003 	stmia.w	r3, {r0, r1}

    osMessageQueuePut(*qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	6818      	ldr	r0, [r3, #0]
 8013d16:	2300      	movs	r3, #0
 8013d18:	2200      	movs	r2, #0
 8013d1a:	4909      	ldr	r1, [pc, #36]	; (8013d40 <PdmConfig_Set+0x16c0>)
 8013d1c:	f7f9 fc68 	bl	800d5f0 <osMessageQueuePut>
    osMessageQueuePut(*qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	6818      	ldr	r0, [r3, #0]
 8013d24:	2300      	movs	r3, #0
 8013d26:	2200      	movs	r2, #0
 8013d28:	4904      	ldr	r1, [pc, #16]	; (8013d3c <PdmConfig_Set+0x16bc>)
 8013d2a:	f7f9 fc61 	bl	800d5f0 <osMessageQueuePut>
  }

  return 1;
 8013d2e:	2301      	movs	r3, #1

}
 8013d30:	4618      	mov	r0, r3
 8013d32:	3710      	adds	r7, #16
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	20004be4 	.word	0x20004be4
 8013d3c:	20004bc4 	.word	0x20004bc4
 8013d40:	20004bb8 	.word	0x20004bb8

08013d44 <PdmConfig_SetDefault>:

void PdmConfig_SetDefault(PdmConfig_t* pConfig){
 8013d44:	b480      	push	{r7}
 8013d46:	b083      	sub	sp, #12
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
  //Device Configuration
  pConfig->stDevConfig.nVersion = 3;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2203      	movs	r2, #3
 8013d50:	701a      	strb	r2, [r3, #0]
  pConfig->stDevConfig.nCanEnabled = 1;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2201      	movs	r2, #1
 8013d56:	705a      	strb	r2, [r3, #1]
  pConfig->stDevConfig.nCanTerm = 1;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2201      	movs	r2, #1
 8013d5c:	709a      	strb	r2, [r3, #2]
  pConfig->stDevConfig.nCanSpeed = 6;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2206      	movs	r2, #6
 8013d62:	70da      	strb	r2, [r3, #3]

  //Logging
  pConfig->stLogging.nUpdateTime = 1000;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013d6a:	809a      	strh	r2, [r3, #4]

  //Inputs
  pConfig->stInput[0].nEnabled = 1;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2201      	movs	r2, #1
 8013d70:	721a      	strb	r2, [r3, #8]
  pConfig->stInput[0].eMode = MODE_MOMENTARY;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	2201      	movs	r2, #1
 8013d76:	741a      	strb	r2, [r3, #16]
  pConfig->stInput[0].nOnLevel = 0;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	841a      	strh	r2, [r3, #32]
  pConfig->stInput[0].nDebounceTime = 20;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	2214      	movs	r2, #20
 8013d82:	845a      	strh	r2, [r3, #34]	; 0x22

  pConfig->stInput[1].nEnabled = 1;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2201      	movs	r2, #1
 8013d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pConfig->stInput[1].eMode = MODE_MOMENTARY;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2201      	movs	r2, #1
 8013d90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pConfig->stInput[1].nOnLevel = 0;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	2200      	movs	r2, #0
 8013d98:	879a      	strh	r2, [r3, #60]	; 0x3c
  pConfig->stInput[1].nDebounceTime = 20;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2214      	movs	r2, #20
 8013d9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  pConfig->stInput[2].nEnabled = 1;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2201      	movs	r2, #1
 8013da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pConfig->stInput[2].eMode = MODE_MOMENTARY;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2201      	movs	r2, #1
 8013dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  pConfig->stInput[2].nOnLevel = 0;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2200      	movs	r2, #0
 8013db4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  pConfig->stInput[2].nDebounceTime = 20;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	2214      	movs	r2, #20
 8013dbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  pConfig->stInput[3].nEnabled = 1;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2201      	movs	r2, #1
 8013dc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  pConfig->stInput[3].eMode = MODE_MOMENTARY;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2201      	movs	r2, #1
 8013dcc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  pConfig->stInput[3].nOnLevel = 0;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  pConfig->stInput[3].nDebounceTime = 20;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	2214      	movs	r2, #20
 8013ddc:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

  pConfig->stInput[4].nEnabled = 1;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2201      	movs	r2, #1
 8013de4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  pConfig->stInput[4].eMode = MODE_MOMENTARY;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2201      	movs	r2, #1
 8013dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  pConfig->stInput[4].nOnLevel = 0;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2200      	movs	r2, #0
 8013df4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  pConfig->stInput[4].nDebounceTime = 20;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	2214      	movs	r2, #20
 8013dfc:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92

  pConfig->stInput[5].nEnabled = 1;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2201      	movs	r2, #1
 8013e04:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  pConfig->stInput[5].eMode = MODE_MOMENTARY;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2201      	movs	r2, #1
 8013e0c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  pConfig->stInput[5].nOnLevel = 0;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	2200      	movs	r2, #0
 8013e14:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  pConfig->stInput[5].nDebounceTime = 20;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2214      	movs	r2, #20
 8013e1c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

  pConfig->stInput[6].nEnabled = 1;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2201      	movs	r2, #1
 8013e24:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  pConfig->stInput[6].eMode = MODE_MOMENTARY;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
  pConfig->stInput[6].nOnLevel = 0;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	2200      	movs	r2, #0
 8013e34:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
  pConfig->stInput[6].nDebounceTime = 20;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2214      	movs	r2, #20
 8013e3c:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

  pConfig->stInput[7].nEnabled = 1;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2201      	movs	r2, #1
 8013e44:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  pConfig->stInput[7].eMode = MODE_MOMENTARY;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2201      	movs	r2, #1
 8013e4c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
  pConfig->stInput[7].nOnLevel = 0;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2200      	movs	r2, #0
 8013e54:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
  pConfig->stInput[7].nDebounceTime = 20;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2214      	movs	r2, #20
 8013e5c:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6

  //Outputs
  pConfig->stOutput[0].nEnabled = 1;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2201      	movs	r2, #1
 8013e64:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
  pConfig->stOutput[0].nInput = 1;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2201      	movs	r2, #1
 8013e6c:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
  pConfig->stOutput[0].nCurrentLimit = 250;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	22fa      	movs	r2, #250	; 0xfa
 8013e74:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
  pConfig->stOutput[0].nInrushLimit = 300;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013e7e:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
  pConfig->stOutput[0].nInrushTime = 2000;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013e88:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
  pConfig->stOutput[0].eResetMode = RESET_ENDLESS;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2202      	movs	r2, #2
 8013e90:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
  pConfig->stOutput[0].nResetTime = 1000;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013e9a:	f8a3 2418 	strh.w	r2, [r3, #1048]	; 0x418
  pConfig->stOutput[0].nResetLimit = 1;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2201      	movs	r2, #1
 8013ea2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a

  pConfig->stOutput[1].nEnabled = 1;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2201      	movs	r2, #1
 8013eaa:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
  pConfig->stOutput[1].nInput = 2;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	2202      	movs	r2, #2
 8013eb2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
  pConfig->stOutput[1].nCurrentLimit = 150;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2296      	movs	r2, #150	; 0x96
 8013eba:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
  pConfig->stOutput[1].nInrushLimit = 300;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013ec4:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
  pConfig->stOutput[1].nInrushTime = 2000;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013ece:	f8a3 2428 	strh.w	r2, [r3, #1064]	; 0x428
  pConfig->stOutput[1].eResetMode = RESET_ENDLESS;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	2202      	movs	r2, #2
 8013ed6:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
  pConfig->stOutput[1].nResetTime = 1000;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013ee0:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
  pConfig->stOutput[1].nResetLimit = 2;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	2202      	movs	r2, #2
 8013ee8:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

  pConfig->stOutput[2].nEnabled = 1;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2201      	movs	r2, #1
 8013ef0:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
  pConfig->stOutput[2].nInput = 3;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2203      	movs	r2, #3
 8013ef8:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
  pConfig->stOutput[2].nCurrentLimit = 80;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2250      	movs	r2, #80	; 0x50
 8013f00:	f8a3 2438 	strh.w	r2, [r3, #1080]	; 0x438
  pConfig->stOutput[2].nInrushLimit = 160;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	22a0      	movs	r2, #160	; 0xa0
 8013f08:	f8a3 243a 	strh.w	r2, [r3, #1082]	; 0x43a
  pConfig->stOutput[2].nInrushTime = 2000;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013f12:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
  pConfig->stOutput[2].eResetMode = RESET_ENDLESS;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	2202      	movs	r2, #2
 8013f1a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
  pConfig->stOutput[2].nResetTime = 1000;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013f24:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440
  pConfig->stOutput[2].nResetLimit = 3;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2203      	movs	r2, #3
 8013f2c:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442

  pConfig->stOutput[3].nEnabled = 1;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2201      	movs	r2, #1
 8013f34:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
  pConfig->stOutput[3].nInput = 4;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2204      	movs	r2, #4
 8013f3c:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
  pConfig->stOutput[3].nCurrentLimit = 80;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2250      	movs	r2, #80	; 0x50
 8013f44:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
  pConfig->stOutput[3].nInrushLimit = 160;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	22a0      	movs	r2, #160	; 0xa0
 8013f4c:	f8a3 244e 	strh.w	r2, [r3, #1102]	; 0x44e
  pConfig->stOutput[3].nInrushTime = 2000;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013f56:	f8a3 2450 	strh.w	r2, [r3, #1104]	; 0x450
  pConfig->stOutput[3].eResetMode = RESET_ENDLESS;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2202      	movs	r2, #2
 8013f5e:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
  pConfig->stOutput[3].nResetTime = 1000;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013f68:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
  pConfig->stOutput[3].nResetLimit = 2;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2202      	movs	r2, #2
 8013f70:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456

  pConfig->stOutput[4].nEnabled = 1;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	2201      	movs	r2, #1
 8013f78:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
  pConfig->stOutput[4].nInput = 5;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2205      	movs	r2, #5
 8013f80:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
  pConfig->stOutput[4].nCurrentLimit = 80;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2250      	movs	r2, #80	; 0x50
 8013f88:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
  pConfig->stOutput[4].nInrushLimit = 160;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	22a0      	movs	r2, #160	; 0xa0
 8013f90:	f8a3 2462 	strh.w	r2, [r3, #1122]	; 0x462
  pConfig->stOutput[4].nInrushTime = 2000;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013f9a:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
  pConfig->stOutput[4].eResetMode = RESET_ENDLESS;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	2202      	movs	r2, #2
 8013fa2:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
  pConfig->stOutput[4].nResetTime = 1000;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013fac:	f8a3 2468 	strh.w	r2, [r3, #1128]	; 0x468
  pConfig->stOutput[4].nResetLimit = 2;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2202      	movs	r2, #2
 8013fb4:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a

  pConfig->stOutput[5].nEnabled = 1;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2201      	movs	r2, #1
 8013fbc:	f883 246c 	strb.w	r2, [r3, #1132]	; 0x46c
  pConfig->stOutput[5].nInput = 6;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2206      	movs	r2, #6
 8013fc4:	f883 246d 	strb.w	r2, [r3, #1133]	; 0x46d
  pConfig->stOutput[5].nCurrentLimit = 80;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2250      	movs	r2, #80	; 0x50
 8013fcc:	f8a3 2474 	strh.w	r2, [r3, #1140]	; 0x474
  pConfig->stOutput[5].nInrushLimit = 160;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	22a0      	movs	r2, #160	; 0xa0
 8013fd4:	f8a3 2476 	strh.w	r2, [r3, #1142]	; 0x476
  pConfig->stOutput[5].nInrushTime = 2000;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013fde:	f8a3 2478 	strh.w	r2, [r3, #1144]	; 0x478
  pConfig->stOutput[5].eResetMode = RESET_ENDLESS;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2202      	movs	r2, #2
 8013fe6:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
  pConfig->stOutput[5].nResetTime = 1000;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013ff0:	f8a3 247c 	strh.w	r2, [r3, #1148]	; 0x47c
  pConfig->stOutput[5].nResetLimit = 2;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2202      	movs	r2, #2
 8013ff8:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e

  pConfig->stOutput[6].nEnabled = 1;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2201      	movs	r2, #1
 8014000:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
  pConfig->stOutput[6].nInput = 7;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2207      	movs	r2, #7
 8014008:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
  pConfig->stOutput[6].nCurrentLimit = 150;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2296      	movs	r2, #150	; 0x96
 8014010:	f8a3 2488 	strh.w	r2, [r3, #1160]	; 0x488
  pConfig->stOutput[6].nInrushLimit = 300;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801401a:	f8a3 248a 	strh.w	r2, [r3, #1162]	; 0x48a
  pConfig->stOutput[6].nInrushTime = 2000;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8014024:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
  pConfig->stOutput[6].eResetMode = RESET_ENDLESS;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	2202      	movs	r2, #2
 801402c:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
  pConfig->stOutput[6].nResetTime = 1000;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014036:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
  pConfig->stOutput[6].nResetLimit = 2;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	2202      	movs	r2, #2
 801403e:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492

  pConfig->stOutput[7].nEnabled = 1;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2201      	movs	r2, #1
 8014046:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  pConfig->stOutput[7].nInput = 8;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	2208      	movs	r2, #8
 801404e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
  pConfig->stOutput[7].nCurrentLimit = 150;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2296      	movs	r2, #150	; 0x96
 8014056:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
  pConfig->stOutput[7].nInrushLimit = 300;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014060:	f8a3 249e 	strh.w	r2, [r3, #1182]	; 0x49e
  pConfig->stOutput[7].nInrushTime = 2000;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801406a:	f8a3 24a0 	strh.w	r2, [r3, #1184]	; 0x4a0
  pConfig->stOutput[7].eResetMode = RESET_ENDLESS;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2202      	movs	r2, #2
 8014072:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
  pConfig->stOutput[7].nResetTime = 1000;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801407c:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
  pConfig->stOutput[7].nResetLimit = 2;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2202      	movs	r2, #2
 8014084:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6

  pConfig->stOutput[8].nEnabled = 1;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	2201      	movs	r2, #1
 801408c:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
  pConfig->stOutput[8].nInput = 1;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2201      	movs	r2, #1
 8014094:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
  pConfig->stOutput[8].nCurrentLimit = 80;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	2250      	movs	r2, #80	; 0x50
 801409c:	f8a3 24b0 	strh.w	r2, [r3, #1200]	; 0x4b0
  pConfig->stOutput[8].nInrushLimit = 160;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	22a0      	movs	r2, #160	; 0xa0
 80140a4:	f8a3 24b2 	strh.w	r2, [r3, #1202]	; 0x4b2
  pConfig->stOutput[8].nInrushTime = 2000;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80140ae:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
  pConfig->stOutput[8].eResetMode = RESET_ENDLESS;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	2202      	movs	r2, #2
 80140b6:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
  pConfig->stOutput[8].nResetTime = 1000;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80140c0:	f8a3 24b8 	strh.w	r2, [r3, #1208]	; 0x4b8
  pConfig->stOutput[8].nResetLimit = 2;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2202      	movs	r2, #2
 80140c8:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba

  pConfig->stOutput[9].nEnabled = 1;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2201      	movs	r2, #1
 80140d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  pConfig->stOutput[9].nInput = 2;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	2202      	movs	r2, #2
 80140d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  pConfig->stOutput[9].nCurrentLimit = 80;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	2250      	movs	r2, #80	; 0x50
 80140e0:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
  pConfig->stOutput[9].nInrushLimit = 160;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	22a0      	movs	r2, #160	; 0xa0
 80140e8:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6
  pConfig->stOutput[9].nInrushTime = 2000;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80140f2:	f8a3 24c8 	strh.w	r2, [r3, #1224]	; 0x4c8
  pConfig->stOutput[9].eResetMode = RESET_ENDLESS;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2202      	movs	r2, #2
 80140fa:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
  pConfig->stOutput[9].nResetTime = 1000;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014104:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
  pConfig->stOutput[9].nResetLimit = 2;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2202      	movs	r2, #2
 801410c:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce

  pConfig->stOutput[10].nEnabled = 1;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	2201      	movs	r2, #1
 8014114:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
  pConfig->stOutput[10].nInput = 7;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	2207      	movs	r2, #7
 801411c:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
  pConfig->stOutput[10].nCurrentLimit = 80;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2250      	movs	r2, #80	; 0x50
 8014124:	f8a3 24d8 	strh.w	r2, [r3, #1240]	; 0x4d8
  pConfig->stOutput[10].nInrushLimit = 160;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	22a0      	movs	r2, #160	; 0xa0
 801412c:	f8a3 24da 	strh.w	r2, [r3, #1242]	; 0x4da
  pConfig->stOutput[10].nInrushTime = 2000;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8014136:	f8a3 24dc 	strh.w	r2, [r3, #1244]	; 0x4dc
  pConfig->stOutput[10].eResetMode = RESET_ENDLESS;
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	2202      	movs	r2, #2
 801413e:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
  pConfig->stOutput[10].nResetTime = 1000;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014148:	f8a3 24e0 	strh.w	r2, [r3, #1248]	; 0x4e0
  pConfig->stOutput[10].nResetLimit = 2;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2202      	movs	r2, #2
 8014150:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2

  pConfig->stOutput[11].nEnabled = 1;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2201      	movs	r2, #1
 8014158:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
  pConfig->stOutput[11].nInput = 8;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2208      	movs	r2, #8
 8014160:	f883 24e5 	strb.w	r2, [r3, #1253]	; 0x4e5
  pConfig->stOutput[11].nCurrentLimit = 80;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2250      	movs	r2, #80	; 0x50
 8014168:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
  pConfig->stOutput[11].nInrushLimit = 160;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	22a0      	movs	r2, #160	; 0xa0
 8014170:	f8a3 24ee 	strh.w	r2, [r3, #1262]	; 0x4ee
  pConfig->stOutput[11].nInrushTime = 2000;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801417a:	f8a3 24f0 	strh.w	r2, [r3, #1264]	; 0x4f0
  pConfig->stOutput[11].eResetMode = RESET_ENDLESS;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	2202      	movs	r2, #2
 8014182:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
  pConfig->stOutput[11].nResetTime = 1000;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801418c:	f8a3 24f4 	strh.w	r2, [r3, #1268]	; 0x4f4
  pConfig->stOutput[11].nResetLimit = 2;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2202      	movs	r2, #2
 8014194:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6

  //Virtual Inputs
  pConfig->stVirtualInput[0].nEnabled = 0;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2200      	movs	r2, #0
 801419c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
  pConfig->stVirtualInput[0].nNot0 = 0;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	2200      	movs	r2, #0
 80141a4:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
  pConfig->stVirtualInput[0].nVar0 = 10;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	220a      	movs	r2, #10
 80141ac:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
  pConfig->stVirtualInput[0].eCond0 = COND_AND;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	2200      	movs	r2, #0
 80141b4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  pConfig->stVirtualInput[0].nNot1 = 1;
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	2201      	movs	r2, #1
 80141bc:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
  pConfig->stVirtualInput[0].nVar1 = 63;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	223f      	movs	r2, #63	; 0x3f
 80141c4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
  pConfig->stVirtualInput[0].eCond1 = COND_OR;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2201      	movs	r2, #1
 80141cc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
  pConfig->stVirtualInput[0].nNot2 = 0;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	2200      	movs	r2, #0
 80141d4:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  pConfig->stVirtualInput[0].nVar2 = 0;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2200      	movs	r2, #0
 80141dc:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
  pConfig->stVirtualInput[0].eMode = MODE_LATCHING;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2202      	movs	r2, #2
 80141e4:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

  pConfig->stVirtualInput[1].nEnabled = 0;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2200      	movs	r2, #0
 80141ec:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
  pConfig->stVirtualInput[1].nNot0 = 0;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2200      	movs	r2, #0
 80141f4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  pConfig->stVirtualInput[1].nVar0 = 11;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	220b      	movs	r2, #11
 80141fc:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pConfig->stVirtualInput[1].eCond0 = COND_AND;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	2200      	movs	r2, #0
 8014204:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
  pConfig->stVirtualInput[1].nNot1 = 1;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2201      	movs	r2, #1
 801420c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  pConfig->stVirtualInput[1].nVar1 = 62;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	223e      	movs	r2, #62	; 0x3e
 8014214:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  pConfig->stVirtualInput[1].eCond1 = COND_OR;
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	2201      	movs	r2, #1
 801421c:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
  pConfig->stVirtualInput[1].nNot2 = 0;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2200      	movs	r2, #0
 8014224:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
  pConfig->stVirtualInput[1].nVar2 = 0;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2200      	movs	r2, #0
 801422c:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
  pConfig->stVirtualInput[1].eMode = MODE_LATCHING;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2202      	movs	r2, #2
 8014234:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

  pConfig->stVirtualInput[2].nEnabled = 0;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	2200      	movs	r2, #0
 801423c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
  pConfig->stVirtualInput[2].nNot0 = 0;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2200      	movs	r2, #0
 8014244:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
  pConfig->stVirtualInput[2].nVar0 = 0;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	2200      	movs	r2, #0
 801424c:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
  pConfig->stVirtualInput[2].eCond0 = COND_AND;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2200      	movs	r2, #0
 8014254:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  pConfig->stVirtualInput[2].nNot1 = 0;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2200      	movs	r2, #0
 801425c:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
  pConfig->stVirtualInput[2].nVar1 = 0;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2200      	movs	r2, #0
 8014264:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  pConfig->stVirtualInput[2].eCond1 = COND_OR;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	2201      	movs	r2, #1
 801426c:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
  pConfig->stVirtualInput[2].nNot2 = 0;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2200      	movs	r2, #0
 8014274:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
  pConfig->stVirtualInput[2].nVar2 = 0;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2200      	movs	r2, #0
 801427c:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
  pConfig->stVirtualInput[2].eMode = MODE_MOMENTARY;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	2201      	movs	r2, #1
 8014284:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

  pConfig->stVirtualInput[3].nEnabled = 0;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2200      	movs	r2, #0
 801428c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  pConfig->stVirtualInput[3].nNot0 = 0;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	2200      	movs	r2, #0
 8014294:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
  pConfig->stVirtualInput[3].nVar0 = 0;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	2200      	movs	r2, #0
 801429c:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
  pConfig->stVirtualInput[3].eCond0 = COND_AND;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2200      	movs	r2, #0
 80142a4:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  pConfig->stVirtualInput[3].nNot1 = 0;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2200      	movs	r2, #0
 80142ac:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  pConfig->stVirtualInput[3].nVar1 = 0;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2200      	movs	r2, #0
 80142b4:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
  pConfig->stVirtualInput[3].eCond1 = COND_OR;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2201      	movs	r2, #1
 80142bc:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
  pConfig->stVirtualInput[3].nNot2 = 0;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2200      	movs	r2, #0
 80142c4:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
  pConfig->stVirtualInput[3].nVar2 = 0;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	2200      	movs	r2, #0
 80142cc:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
  pConfig->stVirtualInput[3].eMode = MODE_MOMENTARY;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2201      	movs	r2, #1
 80142d4:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

  pConfig->stVirtualInput[4].nEnabled = 0;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2200      	movs	r2, #0
 80142dc:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
  pConfig->stVirtualInput[4].nNot0 = 0;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2200      	movs	r2, #0
 80142e4:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  pConfig->stVirtualInput[4].nVar0 = 0;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	2200      	movs	r2, #0
 80142ec:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  pConfig->stVirtualInput[4].eCond0 = COND_AND;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2200      	movs	r2, #0
 80142f4:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
  pConfig->stVirtualInput[4].nNot1 = 0;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	2200      	movs	r2, #0
 80142fc:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
  pConfig->stVirtualInput[4].nVar1 = 0;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2200      	movs	r2, #0
 8014304:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
  pConfig->stVirtualInput[4].eCond1 = COND_OR;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2201      	movs	r2, #1
 801430c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
  pConfig->stVirtualInput[4].nNot2 = 0;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	2200      	movs	r2, #0
 8014314:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
  pConfig->stVirtualInput[4].nVar2 = 0;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2200      	movs	r2, #0
 801431c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
  pConfig->stVirtualInput[4].eMode = MODE_MOMENTARY;
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2201      	movs	r2, #1
 8014324:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0

  pConfig->stVirtualInput[5].nEnabled = 0;
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	2200      	movs	r2, #0
 801432c:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
  pConfig->stVirtualInput[5].nNot0 = 0;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	2200      	movs	r2, #0
 8014334:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
  pConfig->stVirtualInput[5].nVar0 = 0;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2200      	movs	r2, #0
 801433c:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
  pConfig->stVirtualInput[5].eCond0 = COND_AND;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2200      	movs	r2, #0
 8014344:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
  pConfig->stVirtualInput[5].nNot1 = 0;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2200      	movs	r2, #0
 801434c:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
  pConfig->stVirtualInput[5].nVar1 = 0;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2200      	movs	r2, #0
 8014354:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  pConfig->stVirtualInput[5].eCond1 = COND_OR;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2201      	movs	r2, #1
 801435c:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
  pConfig->stVirtualInput[5].nNot2 = 0;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2200      	movs	r2, #0
 8014364:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  pConfig->stVirtualInput[5].nVar2 = 0;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2200      	movs	r2, #0
 801436c:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
  pConfig->stVirtualInput[5].eMode = MODE_MOMENTARY;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	2201      	movs	r2, #1
 8014374:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

  pConfig->stVirtualInput[6].nEnabled = 0;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2200      	movs	r2, #0
 801437c:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
  pConfig->stVirtualInput[6].nNot0 = 0;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2200      	movs	r2, #0
 8014384:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
  pConfig->stVirtualInput[6].nVar0 = 0;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	2200      	movs	r2, #0
 801438c:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
  pConfig->stVirtualInput[6].eCond0 = COND_AND;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2200      	movs	r2, #0
 8014394:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
  pConfig->stVirtualInput[6].nNot1 = 0;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2200      	movs	r2, #0
 801439c:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
  pConfig->stVirtualInput[6].nVar1 = 0;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	2200      	movs	r2, #0
 80143a4:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
  pConfig->stVirtualInput[6].eCond1 = COND_OR;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2201      	movs	r2, #1
 80143ac:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
  pConfig->stVirtualInput[6].nNot2 = 0;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2200      	movs	r2, #0
 80143b4:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
  pConfig->stVirtualInput[6].nVar2 = 0;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2200      	movs	r2, #0
 80143bc:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
  pConfig->stVirtualInput[6].eMode = MODE_MOMENTARY;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2201      	movs	r2, #1
 80143c4:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0

  pConfig->stVirtualInput[7].nEnabled = 0;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2200      	movs	r2, #0
 80143cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  pConfig->stVirtualInput[7].nNot0 = 0;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2200      	movs	r2, #0
 80143d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  pConfig->stVirtualInput[7].nVar0 = 0;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2200      	movs	r2, #0
 80143dc:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
  pConfig->stVirtualInput[7].eCond0 = COND_AND;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2200      	movs	r2, #0
 80143e4:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
  pConfig->stVirtualInput[7].nNot1 = 0;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2200      	movs	r2, #0
 80143ec:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
  pConfig->stVirtualInput[7].nVar1 = 0;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2200      	movs	r2, #0
 80143f4:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
  pConfig->stVirtualInput[7].eCond1 = COND_OR;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2201      	movs	r2, #1
 80143fc:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
  pConfig->stVirtualInput[7].nNot2 = 0;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2200      	movs	r2, #0
 8014404:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  pConfig->stVirtualInput[7].nVar2 = 0;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2200      	movs	r2, #0
 801440c:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
  pConfig->stVirtualInput[7].eMode = MODE_MOMENTARY;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	2201      	movs	r2, #1
 8014414:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

  pConfig->stVirtualInput[8].nEnabled = 0;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2200      	movs	r2, #0
 801441c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  pConfig->stVirtualInput[8].nNot0 = 0;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2200      	movs	r2, #0
 8014424:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  pConfig->stVirtualInput[8].nVar0 = 0;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	2200      	movs	r2, #0
 801442c:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
  pConfig->stVirtualInput[8].eCond0 = COND_AND;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2200      	movs	r2, #0
 8014434:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
  pConfig->stVirtualInput[8].nNot1 = 0;
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2200      	movs	r2, #0
 801443c:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
  pConfig->stVirtualInput[8].nVar1 = 0;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2200      	movs	r2, #0
 8014444:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
  pConfig->stVirtualInput[8].eCond1 = COND_OR;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2201      	movs	r2, #1
 801444c:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  pConfig->stVirtualInput[8].nNot2 = 0;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2200      	movs	r2, #0
 8014454:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
  pConfig->stVirtualInput[8].nVar2 = 0;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2200      	movs	r2, #0
 801445c:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
  pConfig->stVirtualInput[8].eMode = MODE_MOMENTARY;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2201      	movs	r2, #1
 8014464:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

  pConfig->stVirtualInput[9].nEnabled = 0;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2200      	movs	r2, #0
 801446c:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
  pConfig->stVirtualInput[9].nNot0 = 0;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	2200      	movs	r2, #0
 8014474:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
  pConfig->stVirtualInput[9].nVar0 = 0;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2200      	movs	r2, #0
 801447c:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
  pConfig->stVirtualInput[9].eCond0 = COND_AND;
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	2200      	movs	r2, #0
 8014484:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
  pConfig->stVirtualInput[9].nNot1 = 0;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2200      	movs	r2, #0
 801448c:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
  pConfig->stVirtualInput[9].nVar1 = 0;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2200      	movs	r2, #0
 8014494:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
  pConfig->stVirtualInput[9].eCond1 = COND_OR;
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2201      	movs	r2, #1
 801449c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  pConfig->stVirtualInput[9].nNot2 = 0;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2200      	movs	r2, #0
 80144a4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  pConfig->stVirtualInput[9].nVar2 = 0;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2200      	movs	r2, #0
 80144ac:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  pConfig->stVirtualInput[9].eMode = MODE_MOMENTARY;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2201      	movs	r2, #1
 80144b4:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268

  pConfig->stVirtualInput[10].nEnabled = 0;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2200      	movs	r2, #0
 80144bc:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
  pConfig->stVirtualInput[10].nNot0 = 0;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	2200      	movs	r2, #0
 80144c4:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
  pConfig->stVirtualInput[10].nVar0 = 0;
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	2200      	movs	r2, #0
 80144cc:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
  pConfig->stVirtualInput[10].eCond0 = COND_AND;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2200      	movs	r2, #0
 80144d4:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
  pConfig->stVirtualInput[10].nNot1 = 0;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2200      	movs	r2, #0
 80144dc:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
  pConfig->stVirtualInput[10].nVar1 = 0;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	2200      	movs	r2, #0
 80144e4:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
  pConfig->stVirtualInput[10].eCond1 = COND_OR;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	2201      	movs	r2, #1
 80144ec:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
  pConfig->stVirtualInput[10].nNot2 = 0;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2200      	movs	r2, #0
 80144f4:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
  pConfig->stVirtualInput[10].nVar2 = 0;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2200      	movs	r2, #0
 80144fc:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
  pConfig->stVirtualInput[10].eMode = MODE_MOMENTARY;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2201      	movs	r2, #1
 8014504:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  pConfig->stVirtualInput[11].nEnabled = 0;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	2200      	movs	r2, #0
 801450c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
  pConfig->stVirtualInput[11].nNot0 = 0;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	2200      	movs	r2, #0
 8014514:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
  pConfig->stVirtualInput[11].nVar0 = 0;
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	2200      	movs	r2, #0
 801451c:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
  pConfig->stVirtualInput[11].eCond0 = COND_AND;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2200      	movs	r2, #0
 8014524:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  pConfig->stVirtualInput[11].nNot1 = 0;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2200      	movs	r2, #0
 801452c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  pConfig->stVirtualInput[11].nVar1 = 0;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2200      	movs	r2, #0
 8014534:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
  pConfig->stVirtualInput[11].eCond1 = COND_OR;
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2201      	movs	r2, #1
 801453c:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
  pConfig->stVirtualInput[11].nNot2 = 0;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2200      	movs	r2, #0
 8014544:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
  pConfig->stVirtualInput[11].nVar2 = 0;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2200      	movs	r2, #0
 801454c:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
  pConfig->stVirtualInput[11].eMode = MODE_MOMENTARY;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2201      	movs	r2, #1
 8014554:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  pConfig->stVirtualInput[12].nEnabled = 0;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	2200      	movs	r2, #0
 801455c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
  pConfig->stVirtualInput[12].nNot0 = 0;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	2200      	movs	r2, #0
 8014564:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
  pConfig->stVirtualInput[12].nVar0 = 0;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2200      	movs	r2, #0
 801456c:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
  pConfig->stVirtualInput[12].eCond0 = COND_AND;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	2200      	movs	r2, #0
 8014574:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
  pConfig->stVirtualInput[12].nNot1 = 0;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2200      	movs	r2, #0
 801457c:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
  pConfig->stVirtualInput[12].nVar1 = 0;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2200      	movs	r2, #0
 8014584:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
  pConfig->stVirtualInput[12].eCond1 = COND_OR;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2201      	movs	r2, #1
 801458c:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
  pConfig->stVirtualInput[12].nNot2 = 0;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2200      	movs	r2, #0
 8014594:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
  pConfig->stVirtualInput[12].nVar2 = 0;
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2200      	movs	r2, #0
 801459c:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
  pConfig->stVirtualInput[12].eMode = MODE_MOMENTARY;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2201      	movs	r2, #1
 80145a4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  pConfig->stVirtualInput[13].nEnabled = 0;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	2200      	movs	r2, #0
 80145ac:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
  pConfig->stVirtualInput[13].nNot0 = 0;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	2200      	movs	r2, #0
 80145b4:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
  pConfig->stVirtualInput[13].nVar0 = 0;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	2200      	movs	r2, #0
 80145bc:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
  pConfig->stVirtualInput[13].eCond0 = COND_AND;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2200      	movs	r2, #0
 80145c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  pConfig->stVirtualInput[13].nNot1 = 0;
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	2200      	movs	r2, #0
 80145cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
  pConfig->stVirtualInput[13].nVar1 = 0;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2200      	movs	r2, #0
 80145d4:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
  pConfig->stVirtualInput[13].eCond1 = COND_OR;
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2201      	movs	r2, #1
 80145dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  pConfig->stVirtualInput[13].nNot2 = 0;
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	2200      	movs	r2, #0
 80145e4:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
  pConfig->stVirtualInput[13].nVar2 = 0;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2200      	movs	r2, #0
 80145ec:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
  pConfig->stVirtualInput[13].eMode = MODE_MOMENTARY;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2201      	movs	r2, #1
 80145f4:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308

  pConfig->stVirtualInput[14].nEnabled = 0;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2200      	movs	r2, #0
 80145fc:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  pConfig->stVirtualInput[14].nNot0 = 0;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	2200      	movs	r2, #0
 8014604:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  pConfig->stVirtualInput[14].nVar0 = 0;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2200      	movs	r2, #0
 801460c:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
  pConfig->stVirtualInput[14].eCond0 = COND_AND;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2200      	movs	r2, #0
 8014614:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  pConfig->stVirtualInput[14].nNot1 = 0;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2200      	movs	r2, #0
 801461c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  pConfig->stVirtualInput[14].nVar1 = 0;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2200      	movs	r2, #0
 8014624:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  pConfig->stVirtualInput[14].eCond1 = COND_OR;
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2201      	movs	r2, #1
 801462c:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  pConfig->stVirtualInput[14].nNot2 = 0;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2200      	movs	r2, #0
 8014634:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
  pConfig->stVirtualInput[14].nVar2 = 0;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2200      	movs	r2, #0
 801463c:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
  pConfig->stVirtualInput[14].eMode = MODE_MOMENTARY;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2201      	movs	r2, #1
 8014644:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330

  pConfig->stVirtualInput[15].nEnabled = 0;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2200      	movs	r2, #0
 801464c:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
  pConfig->stVirtualInput[15].nNot0 = 0;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	2200      	movs	r2, #0
 8014654:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
  pConfig->stVirtualInput[15].nVar0 = 0;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	2200      	movs	r2, #0
 801465c:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
  pConfig->stVirtualInput[15].eCond0 = COND_AND;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2200      	movs	r2, #0
 8014664:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
  pConfig->stVirtualInput[15].nNot1 = 0;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2200      	movs	r2, #0
 801466c:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
  pConfig->stVirtualInput[15].nVar1 = 0;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2200      	movs	r2, #0
 8014674:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
  pConfig->stVirtualInput[15].eCond1 = COND_OR;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	2201      	movs	r2, #1
 801467c:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
  pConfig->stVirtualInput[15].nNot2 = 0;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2200      	movs	r2, #0
 8014684:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
  pConfig->stVirtualInput[15].nVar2 = 0;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2200      	movs	r2, #0
 801468c:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
  pConfig->stVirtualInput[15].eMode = MODE_MOMENTARY;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	2201      	movs	r2, #1
 8014694:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

  pConfig->stVirtualInput[16].nEnabled = 0;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	2200      	movs	r2, #0
 801469c:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
  pConfig->stVirtualInput[16].nNot0 = 0;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2200      	movs	r2, #0
 80146a4:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
  pConfig->stVirtualInput[16].nVar0 = 0;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2200      	movs	r2, #0
 80146ac:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
  pConfig->stVirtualInput[16].eCond0 = COND_AND;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2200      	movs	r2, #0
 80146b4:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  pConfig->stVirtualInput[16].nNot1 = 0;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2200      	movs	r2, #0
 80146bc:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
  pConfig->stVirtualInput[16].nVar1 = 0;
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2200      	movs	r2, #0
 80146c4:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
  pConfig->stVirtualInput[16].eCond1 = COND_OR;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2201      	movs	r2, #1
 80146cc:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
  pConfig->stVirtualInput[16].nNot2 = 0;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2200      	movs	r2, #0
 80146d4:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
  pConfig->stVirtualInput[16].nVar2 = 0;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	2200      	movs	r2, #0
 80146dc:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
  pConfig->stVirtualInput[16].eMode = MODE_MOMENTARY;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2201      	movs	r2, #1
 80146e4:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380

  pConfig->stVirtualInput[17].nEnabled = 0;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2200      	movs	r2, #0
 80146ec:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
  pConfig->stVirtualInput[17].nNot0 = 0;
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	2200      	movs	r2, #0
 80146f4:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
  pConfig->stVirtualInput[17].nVar0 = 0;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	2200      	movs	r2, #0
 80146fc:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
  pConfig->stVirtualInput[17].eCond0 = COND_AND;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	2200      	movs	r2, #0
 8014704:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
  pConfig->stVirtualInput[17].nNot1 = 0;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2200      	movs	r2, #0
 801470c:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
  pConfig->stVirtualInput[17].nVar1 = 0;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	2200      	movs	r2, #0
 8014714:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
  pConfig->stVirtualInput[17].eCond1 = COND_OR;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2201      	movs	r2, #1
 801471c:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
  pConfig->stVirtualInput[17].nNot2 = 0;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2200      	movs	r2, #0
 8014724:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
  pConfig->stVirtualInput[17].nVar2 = 0;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2200      	movs	r2, #0
 801472c:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
  pConfig->stVirtualInput[17].eMode = MODE_MOMENTARY;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2201      	movs	r2, #1
 8014734:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8

  pConfig->stVirtualInput[18].nEnabled = 0;
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	2200      	movs	r2, #0
 801473c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  pConfig->stVirtualInput[18].nNot0 = 0;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	2200      	movs	r2, #0
 8014744:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  pConfig->stVirtualInput[18].nVar0 = 0;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2200      	movs	r2, #0
 801474c:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
  pConfig->stVirtualInput[18].eCond0 = COND_AND;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2200      	movs	r2, #0
 8014754:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
  pConfig->stVirtualInput[18].nNot1 = 0;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	2200      	movs	r2, #0
 801475c:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
  pConfig->stVirtualInput[18].nVar1 = 0;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2200      	movs	r2, #0
 8014764:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
  pConfig->stVirtualInput[18].eCond1 = COND_OR;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2201      	movs	r2, #1
 801476c:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
  pConfig->stVirtualInput[18].nNot2 = 0;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	2200      	movs	r2, #0
 8014774:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
  pConfig->stVirtualInput[18].nVar2 = 0;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2200      	movs	r2, #0
 801477c:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
  pConfig->stVirtualInput[18].eMode = MODE_MOMENTARY;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2201      	movs	r2, #1
 8014784:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0

  pConfig->stVirtualInput[19].nEnabled = 0;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2200      	movs	r2, #0
 801478c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
  pConfig->stVirtualInput[19].nNot0 = 0;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2200      	movs	r2, #0
 8014794:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
  pConfig->stVirtualInput[19].nVar0 = 0;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2200      	movs	r2, #0
 801479c:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
  pConfig->stVirtualInput[19].eCond0 = COND_AND;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2200      	movs	r2, #0
 80147a4:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  pConfig->stVirtualInput[19].nNot1 = 0;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	2200      	movs	r2, #0
 80147ac:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
  pConfig->stVirtualInput[19].nVar1 = 0;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	2200      	movs	r2, #0
 80147b4:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
  pConfig->stVirtualInput[19].eCond1 = COND_OR;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2201      	movs	r2, #1
 80147bc:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
  pConfig->stVirtualInput[19].nNot2 = 0;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2200      	movs	r2, #0
 80147c4:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
  pConfig->stVirtualInput[19].nVar2 = 0;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2200      	movs	r2, #0
 80147cc:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
  pConfig->stVirtualInput[19].eMode = MODE_MOMENTARY;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2201      	movs	r2, #1
 80147d4:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8

  //Wiper
  pConfig->stWiper.nEnabled = 0;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2200      	movs	r2, #0
 80147dc:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
  pConfig->stWiper.nMode = 2;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2202      	movs	r2, #2
 80147e4:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
  pConfig->stWiper.nSlowInput = 0;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	2200      	movs	r2, #0
 80147ec:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
  pConfig->stWiper.nFastInput = 0;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	2200      	movs	r2, #0
 80147f4:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
  pConfig->stWiper.nInterInput = 0;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2200      	movs	r2, #0
 80147fc:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
  pConfig->stWiper.nOnInput = 15;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	220f      	movs	r2, #15
 8014804:	f883 24fd 	strb.w	r2, [r3, #1277]	; 0x4fd
  pConfig->stWiper.nSpeedInput = 7;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	2207      	movs	r2, #7
 801480c:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
  pConfig->stWiper.nParkInput = 1;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	2201      	movs	r2, #1
 8014814:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
  pConfig->stWiper.nParkStopLevel = 0;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2200      	movs	r2, #0
 801481c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  pConfig->stWiper.nSwipeInput = 4;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2204      	movs	r2, #4
 8014824:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
  pConfig->stWiper.nWashInput = 14;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	220e      	movs	r2, #14
 801482c:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
  pConfig->stWiper.nWashWipeCycles = 2;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2202      	movs	r2, #2
 8014834:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
  pConfig->stWiper.nSpeedMap[0] = 3;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2203      	movs	r2, #3
 801483c:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
  pConfig->stWiper.nSpeedMap[1] = 4;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2204      	movs	r2, #4
 8014844:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
  pConfig->stWiper.nSpeedMap[2] = 5;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	2205      	movs	r2, #5
 801484c:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
  pConfig->stWiper.nSpeedMap[3] = 6;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	2206      	movs	r2, #6
 8014854:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
  pConfig->stWiper.nSpeedMap[4] = 7;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2207      	movs	r2, #7
 801485c:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
  pConfig->stWiper.nSpeedMap[5] = 8;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	2208      	movs	r2, #8
 8014864:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
  pConfig->stWiper.nSpeedMap[6] = 1;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2201      	movs	r2, #1
 801486c:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
  pConfig->stWiper.nSpeedMap[7] = 2;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2202      	movs	r2, #2
 8014874:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
  pConfig->stWiper.nIntermitTime[0] = 1000;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801487e:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
  pConfig->stWiper.nIntermitTime[1] = 2000;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8014888:	f8a3 250e 	strh.w	r2, [r3, #1294]	; 0x50e
  pConfig->stWiper.nIntermitTime[2] = 3000;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8014892:	f8a3 2510 	strh.w	r2, [r3, #1296]	; 0x510
  pConfig->stWiper.nIntermitTime[3] = 4000;
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801489c:	f8a3 2512 	strh.w	r2, [r3, #1298]	; 0x512
  pConfig->stWiper.nIntermitTime[4] = 5000;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80148a6:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
  pConfig->stWiper.nIntermitTime[5] = 6000;
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f241 7270 	movw	r2, #6000	; 0x1770
 80148b0:	f8a3 2516 	strh.w	r2, [r3, #1302]	; 0x516

  //Flasher
  pConfig->stFlasher[0].nEnabled = 1;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2201      	movs	r2, #1
 80148b8:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
  pConfig->stFlasher[0].nInput = 7;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2207      	movs	r2, #7
 80148c0:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
  pConfig->stFlasher[0].nFlashOnTime = 500;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80148ca:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
  pConfig->stFlasher[0].nFlashOffTime = 500;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80148d4:	f8a3 2522 	strh.w	r2, [r3, #1314]	; 0x522
  pConfig->stFlasher[0].nSingleCycle = 0;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	2200      	movs	r2, #0
 80148dc:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
  pConfig->stFlasher[0].nOutput = 10;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	220a      	movs	r2, #10
 80148e4:	f883 2525 	strb.w	r2, [r3, #1317]	; 0x525

  pConfig->stFlasher[1].nEnabled = 1;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	2201      	movs	r2, #1
 80148ec:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
  pConfig->stFlasher[1].nInput = 8;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	2208      	movs	r2, #8
 80148f4:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
  pConfig->stFlasher[1].nFlashOnTime = 250;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	22fa      	movs	r2, #250	; 0xfa
 80148fc:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
  pConfig->stFlasher[1].nFlashOffTime = 250;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	22fa      	movs	r2, #250	; 0xfa
 8014904:	f8a3 253a 	strh.w	r2, [r3, #1338]	; 0x53a
  pConfig->stFlasher[1].nSingleCycle = 0;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2200      	movs	r2, #0
 801490c:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
  pConfig->stFlasher[1].nOutput = 11;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	220b      	movs	r2, #11
 8014914:	f883 253d 	strb.w	r2, [r3, #1341]	; 0x53d

  pConfig->stFlasher[2].nEnabled = 0;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2200      	movs	r2, #0
 801491c:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
  pConfig->stFlasher[2].nInput = 0;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2200      	movs	r2, #0
 8014924:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
  pConfig->stFlasher[2].nFlashOnTime = 0;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2200      	movs	r2, #0
 801492c:	f8a3 2550 	strh.w	r2, [r3, #1360]	; 0x550
  pConfig->stFlasher[2].nFlashOffTime = 0;
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	2200      	movs	r2, #0
 8014934:	f8a3 2552 	strh.w	r2, [r3, #1362]	; 0x552
  pConfig->stFlasher[2].nSingleCycle = 0;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	2200      	movs	r2, #0
 801493c:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
  pConfig->stFlasher[2].nOutput = 0;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	2200      	movs	r2, #0
 8014944:	f883 2555 	strb.w	r2, [r3, #1365]	; 0x555

  pConfig->stFlasher[3].nEnabled = 0;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2200      	movs	r2, #0
 801494c:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
  pConfig->stFlasher[3].nInput = 0;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2200      	movs	r2, #0
 8014954:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
  pConfig->stFlasher[3].nFlashOnTime = 0;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2200      	movs	r2, #0
 801495c:	f8a3 2568 	strh.w	r2, [r3, #1384]	; 0x568
  pConfig->stFlasher[3].nFlashOffTime = 0;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2200      	movs	r2, #0
 8014964:	f8a3 256a 	strh.w	r2, [r3, #1386]	; 0x56a
  pConfig->stFlasher[3].nSingleCycle = 0;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	2200      	movs	r2, #0
 801496c:	f883 256c 	strb.w	r2, [r3, #1388]	; 0x56c
  pConfig->stFlasher[3].nOutput = 0;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2200      	movs	r2, #0
 8014974:	f883 256d 	strb.w	r2, [r3, #1389]	; 0x56d

  //Starter
  pConfig->stStarter.nEnabled = 0;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2200      	movs	r2, #0
 801497c:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
  pConfig->stStarter.nInput = 8;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2208      	movs	r2, #8
 8014984:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
  pConfig->stStarter.nDisableOut[0] = 0;
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	2200      	movs	r2, #0
 801498c:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
  pConfig->stStarter.nDisableOut[1] = 1;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	2201      	movs	r2, #1
 8014994:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
  pConfig->stStarter.nDisableOut[2] = 0;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2200      	movs	r2, #0
 801499c:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
  pConfig->stStarter.nDisableOut[3] = 0;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2200      	movs	r2, #0
 80149a4:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
  pConfig->stStarter.nDisableOut[4] = 0;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2200      	movs	r2, #0
 80149ac:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
  pConfig->stStarter.nDisableOut[5] = 0;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2200      	movs	r2, #0
 80149b4:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
  pConfig->stStarter.nDisableOut[6] = 0;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2200      	movs	r2, #0
 80149bc:	f883 2586 	strb.w	r2, [r3, #1414]	; 0x586
  pConfig->stStarter.nDisableOut[7] = 0;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2200      	movs	r2, #0
 80149c4:	f883 2587 	strb.w	r2, [r3, #1415]	; 0x587
  pConfig->stStarter.nDisableOut[8] = 0;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2200      	movs	r2, #0
 80149cc:	f883 2588 	strb.w	r2, [r3, #1416]	; 0x588
  pConfig->stStarter.nDisableOut[9] = 0;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2200      	movs	r2, #0
 80149d4:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
  pConfig->stStarter.nDisableOut[10] = 0;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2200      	movs	r2, #0
 80149dc:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
  pConfig->stStarter.nDisableOut[11] = 0;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2200      	movs	r2, #0
 80149e4:	f883 258b 	strb.w	r2, [r3, #1419]	; 0x58b

  //CAN Input
  pConfig->stCanInput[0].nEnabled = 1;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2201      	movs	r2, #1
 80149ec:	f883 258c 	strb.w	r2, [r3, #1420]	; 0x58c
  pConfig->stCanInput[0].nId = 1602;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	f240 6242 	movw	r2, #1602	; 0x642
 80149f6:	f8a3 258e 	strh.w	r2, [r3, #1422]	; 0x58e
  pConfig->stCanInput[0].nLowByte = 0;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2200      	movs	r2, #0
 80149fe:	f8a3 2590 	strh.w	r2, [r3, #1424]	; 0x590
  pConfig->stCanInput[0].nHighByte = 0;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	2200      	movs	r2, #0
 8014a06:	f8a3 2592 	strh.w	r2, [r3, #1426]	; 0x592
  pConfig->stCanInput[0].eOperator = OPER_BITWISE_AND;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	2203      	movs	r2, #3
 8014a0e:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
  pConfig->stCanInput[0].nOnVal = 0xF;
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	220f      	movs	r2, #15
 8014a16:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
  pConfig->stCanInput[0].eMode = MODE_NUM;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598

  pConfig->stCanInput[1].nEnabled = 1;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2201      	movs	r2, #1
 8014a26:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
  pConfig->stCanInput[1].nId = 1602;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	f240 6242 	movw	r2, #1602	; 0x642
 8014a30:	f8a3 25aa 	strh.w	r2, [r3, #1450]	; 0x5aa
  pConfig->stCanInput[1].nLowByte = 4;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	2204      	movs	r2, #4
 8014a38:	f8a3 25ac 	strh.w	r2, [r3, #1452]	; 0x5ac
  pConfig->stCanInput[1].nHighByte = 0;
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2200      	movs	r2, #0
 8014a40:	f8a3 25ae 	strh.w	r2, [r3, #1454]	; 0x5ae
  pConfig->stCanInput[1].eOperator = OPER_BITWISE_AND;
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2203      	movs	r2, #3
 8014a48:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
  pConfig->stCanInput[1].nOnVal = 0x1;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	2201      	movs	r2, #1
 8014a50:	f8a3 25b2 	strh.w	r2, [r3, #1458]	; 0x5b2
  pConfig->stCanInput[1].eMode = MODE_MOMENTARY;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2201      	movs	r2, #1
 8014a58:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4

  pConfig->stCanInput[2].nEnabled = 1;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2201      	movs	r2, #1
 8014a60:	f883 25c4 	strb.w	r2, [r3, #1476]	; 0x5c4
  pConfig->stCanInput[2].nId = 1602;
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	f240 6242 	movw	r2, #1602	; 0x642
 8014a6a:	f8a3 25c6 	strh.w	r2, [r3, #1478]	; 0x5c6
  pConfig->stCanInput[2].nLowByte = 4;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	2204      	movs	r2, #4
 8014a72:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
  pConfig->stCanInput[2].nHighByte = 0;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	2200      	movs	r2, #0
 8014a7a:	f8a3 25ca 	strh.w	r2, [r3, #1482]	; 0x5ca
  pConfig->stCanInput[2].eOperator = OPER_BITWISE_AND;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	2203      	movs	r2, #3
 8014a82:	f883 25cc 	strb.w	r2, [r3, #1484]	; 0x5cc
  pConfig->stCanInput[2].nOnVal = 0x2;
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	2202      	movs	r2, #2
 8014a8a:	f8a3 25ce 	strh.w	r2, [r3, #1486]	; 0x5ce
  pConfig->stCanInput[2].eMode = MODE_MOMENTARY;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	2201      	movs	r2, #1
 8014a92:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0

  pConfig->stCanInput[3].nEnabled = 1;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2201      	movs	r2, #1
 8014a9a:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
  pConfig->stCanInput[3].nId = 1602;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	f240 6242 	movw	r2, #1602	; 0x642
 8014aa4:	f8a3 25e2 	strh.w	r2, [r3, #1506]	; 0x5e2
  pConfig->stCanInput[3].nLowByte = 4;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2204      	movs	r2, #4
 8014aac:	f8a3 25e4 	strh.w	r2, [r3, #1508]	; 0x5e4
  pConfig->stCanInput[3].nHighByte = 0;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	f8a3 25e6 	strh.w	r2, [r3, #1510]	; 0x5e6
  pConfig->stCanInput[3].eOperator = OPER_BITWISE_AND;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2203      	movs	r2, #3
 8014abc:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
  pConfig->stCanInput[3].nOnVal = 0x4;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	2204      	movs	r2, #4
 8014ac4:	f8a3 25ea 	strh.w	r2, [r3, #1514]	; 0x5ea
  pConfig->stCanInput[3].eMode = MODE_MOMENTARY;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	2201      	movs	r2, #1
 8014acc:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec

  pConfig->stCanInput[4].nEnabled = 1;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2201      	movs	r2, #1
 8014ad4:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
  pConfig->stCanInput[4].nId = 1602;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	f240 6242 	movw	r2, #1602	; 0x642
 8014ade:	f8a3 25fe 	strh.w	r2, [r3, #1534]	; 0x5fe
  pConfig->stCanInput[4].nLowByte = 4;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	2204      	movs	r2, #4
 8014ae6:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
  pConfig->stCanInput[4].nHighByte = 0;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	2200      	movs	r2, #0
 8014aee:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
  pConfig->stCanInput[4].eOperator = OPER_BITWISE_AND;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	2203      	movs	r2, #3
 8014af6:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
  pConfig->stCanInput[4].nOnVal = 0x8;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	2208      	movs	r2, #8
 8014afe:	f8a3 2606 	strh.w	r2, [r3, #1542]	; 0x606
  pConfig->stCanInput[4].eMode = MODE_MOMENTARY;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2201      	movs	r2, #1
 8014b06:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608

  pConfig->stCanInput[5].nEnabled = 1;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	2201      	movs	r2, #1
 8014b0e:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
  pConfig->stCanInput[5].nId = 1602;
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	f240 6242 	movw	r2, #1602	; 0x642
 8014b18:	f8a3 261a 	strh.w	r2, [r3, #1562]	; 0x61a
  pConfig->stCanInput[5].nLowByte = 4;
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2204      	movs	r2, #4
 8014b20:	f8a3 261c 	strh.w	r2, [r3, #1564]	; 0x61c
  pConfig->stCanInput[5].nHighByte = 0;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2200      	movs	r2, #0
 8014b28:	f8a3 261e 	strh.w	r2, [r3, #1566]	; 0x61e
  pConfig->stCanInput[5].eOperator = OPER_BITWISE_AND;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	2203      	movs	r2, #3
 8014b30:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
  pConfig->stCanInput[5].nOnVal = 0x10;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	2210      	movs	r2, #16
 8014b38:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
  pConfig->stCanInput[5].eMode = MODE_LATCHING;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2202      	movs	r2, #2
 8014b40:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

  pConfig->stCanInput[6].nEnabled = 1;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2201      	movs	r2, #1
 8014b48:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
  pConfig->stCanInput[6].nId = 1602;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f240 6242 	movw	r2, #1602	; 0x642
 8014b52:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
  pConfig->stCanInput[6].nLowByte = 4;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2204      	movs	r2, #4
 8014b5a:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
  pConfig->stCanInput[6].nHighByte = 0;
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	2200      	movs	r2, #0
 8014b62:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
  pConfig->stCanInput[6].eOperator = OPER_BITWISE_AND;
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	2203      	movs	r2, #3
 8014b6a:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
  pConfig->stCanInput[6].nOnVal = 0x20;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	2220      	movs	r2, #32
 8014b72:	f8a3 263e 	strh.w	r2, [r3, #1598]	; 0x63e
  pConfig->stCanInput[6].eMode = MODE_LATCHING;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	2202      	movs	r2, #2
 8014b7a:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

  pConfig->stCanInput[7].nEnabled = 1;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2201      	movs	r2, #1
 8014b82:	f883 2650 	strb.w	r2, [r3, #1616]	; 0x650
  pConfig->stCanInput[7].nId = 1602;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f240 6242 	movw	r2, #1602	; 0x642
 8014b8c:	f8a3 2652 	strh.w	r2, [r3, #1618]	; 0x652
  pConfig->stCanInput[7].nLowByte = 4;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2204      	movs	r2, #4
 8014b94:	f8a3 2654 	strh.w	r2, [r3, #1620]	; 0x654
  pConfig->stCanInput[7].nHighByte = 0;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	f8a3 2656 	strh.w	r2, [r3, #1622]	; 0x656
  pConfig->stCanInput[7].eOperator = OPER_BITWISE_AND;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	2203      	movs	r2, #3
 8014ba4:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
  pConfig->stCanInput[7].nOnVal = 0x40;
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	2240      	movs	r2, #64	; 0x40
 8014bac:	f8a3 265a 	strh.w	r2, [r3, #1626]	; 0x65a
  pConfig->stCanInput[7].eMode = MODE_MOMENTARY;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	2201      	movs	r2, #1
 8014bb4:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c

  pConfig->stCanInput[8].nEnabled = 1;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	2201      	movs	r2, #1
 8014bbc:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
  pConfig->stCanInput[8].nId = 1602;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	f240 6242 	movw	r2, #1602	; 0x642
 8014bc6:	f8a3 266e 	strh.w	r2, [r3, #1646]	; 0x66e
  pConfig->stCanInput[8].nLowByte = 4;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2204      	movs	r2, #4
 8014bce:	f8a3 2670 	strh.w	r2, [r3, #1648]	; 0x670
  pConfig->stCanInput[8].nHighByte = 0;
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	f8a3 2672 	strh.w	r2, [r3, #1650]	; 0x672
  pConfig->stCanInput[8].eOperator = OPER_BITWISE_AND;
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	2203      	movs	r2, #3
 8014bde:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
  pConfig->stCanInput[8].nOnVal = 0x80;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2280      	movs	r2, #128	; 0x80
 8014be6:	f8a3 2676 	strh.w	r2, [r3, #1654]	; 0x676
  pConfig->stCanInput[8].eMode = MODE_LATCHING;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	2202      	movs	r2, #2
 8014bee:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678

  pConfig->stCanInput[9].nEnabled = 1;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	2201      	movs	r2, #1
 8014bf6:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
  pConfig->stCanInput[9].nId = 1620;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	f240 6254 	movw	r2, #1620	; 0x654
 8014c00:	f8a3 268a 	strh.w	r2, [r3, #1674]	; 0x68a
  pConfig->stCanInput[9].nLowByte = 4;
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	2204      	movs	r2, #4
 8014c08:	f8a3 268c 	strh.w	r2, [r3, #1676]	; 0x68c
  pConfig->stCanInput[9].nHighByte = 5;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	2205      	movs	r2, #5
 8014c10:	f8a3 268e 	strh.w	r2, [r3, #1678]	; 0x68e
  pConfig->stCanInput[9].eOperator = OPER_EQUAL;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2200      	movs	r2, #0
 8014c18:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
  pConfig->stCanInput[9].nOnVal = 1;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2201      	movs	r2, #1
 8014c20:	f8a3 2692 	strh.w	r2, [r3, #1682]	; 0x692
  pConfig->stCanInput[9].eMode = MODE_NUM;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2200      	movs	r2, #0
 8014c28:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694

  pConfig->stCanInput[10].nEnabled = 1;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2201      	movs	r2, #1
 8014c30:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
  pConfig->stCanInput[10].nId = 1620;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f240 6254 	movw	r2, #1620	; 0x654
 8014c3a:	f8a3 26a6 	strh.w	r2, [r3, #1702]	; 0x6a6
  pConfig->stCanInput[10].nLowByte = 2;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	2202      	movs	r2, #2
 8014c42:	f8a3 26a8 	strh.w	r2, [r3, #1704]	; 0x6a8
  pConfig->stCanInput[10].nHighByte = 3;
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	2203      	movs	r2, #3
 8014c4a:	f8a3 26aa 	strh.w	r2, [r3, #1706]	; 0x6aa
  pConfig->stCanInput[10].eOperator = OPER_EQUAL;
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	2200      	movs	r2, #0
 8014c52:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
  pConfig->stCanInput[10].nOnVal = 1;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	2201      	movs	r2, #1
 8014c5a:	f8a3 26ae 	strh.w	r2, [r3, #1710]	; 0x6ae
  pConfig->stCanInput[10].eMode = MODE_NUM;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2200      	movs	r2, #0
 8014c62:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0

  pConfig->stCanInput[11].nEnabled = 1;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2201      	movs	r2, #1
 8014c6a:	f883 26c0 	strb.w	r2, [r3, #1728]	; 0x6c0
  pConfig->stCanInput[11].nId = 1620;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	f240 6254 	movw	r2, #1620	; 0x654
 8014c74:	f8a3 26c2 	strh.w	r2, [r3, #1730]	; 0x6c2
  pConfig->stCanInput[11].nLowByte = 0;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	f8a3 26c4 	strh.w	r2, [r3, #1732]	; 0x6c4
  pConfig->stCanInput[11].nHighByte = 1;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	2201      	movs	r2, #1
 8014c84:	f8a3 26c6 	strh.w	r2, [r3, #1734]	; 0x6c6
  pConfig->stCanInput[11].eOperator = OPER_EQUAL;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	f883 26c8 	strb.w	r2, [r3, #1736]	; 0x6c8
  pConfig->stCanInput[11].nOnVal = 1;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	2201      	movs	r2, #1
 8014c94:	f8a3 26ca 	strh.w	r2, [r3, #1738]	; 0x6ca
  pConfig->stCanInput[11].eMode = MODE_NUM;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc

  pConfig->stCanInput[12].nEnabled = 1;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2201      	movs	r2, #1
 8014ca4:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
  pConfig->stCanInput[12].nId = 1620;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f240 6254 	movw	r2, #1620	; 0x654
 8014cae:	f8a3 26de 	strh.w	r2, [r3, #1758]	; 0x6de
  pConfig->stCanInput[12].nLowByte = 6;
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	2206      	movs	r2, #6
 8014cb6:	f8a3 26e0 	strh.w	r2, [r3, #1760]	; 0x6e0
  pConfig->stCanInput[12].nHighByte = 7;
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	2207      	movs	r2, #7
 8014cbe:	f8a3 26e2 	strh.w	r2, [r3, #1762]	; 0x6e2
  pConfig->stCanInput[12].eOperator = OPER_EQUAL;
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
  pConfig->stCanInput[12].nOnVal = 1;
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	2201      	movs	r2, #1
 8014cce:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
  pConfig->stCanInput[12].eMode = MODE_NUM;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8

  pConfig->stCanInput[13].nEnabled = 1;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2201      	movs	r2, #1
 8014cde:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
  pConfig->stCanInput[13].nId = 1621;
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f240 6255 	movw	r2, #1621	; 0x655
 8014ce8:	f8a3 26fa 	strh.w	r2, [r3, #1786]	; 0x6fa
  pConfig->stCanInput[13].nLowByte = 0;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	f8a3 26fc 	strh.w	r2, [r3, #1788]	; 0x6fc
  pConfig->stCanInput[13].nHighByte = 1;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	f8a3 26fe 	strh.w	r2, [r3, #1790]	; 0x6fe
  pConfig->stCanInput[13].eOperator = OPER_EQUAL;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
  pConfig->stCanInput[13].nOnVal = 1;
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	2201      	movs	r2, #1
 8014d08:	f8a3 2702 	strh.w	r2, [r3, #1794]	; 0x702
  pConfig->stCanInput[13].eMode = MODE_NUM;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704

  pConfig->stCanInput[14].nEnabled = 1;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2201      	movs	r2, #1
 8014d18:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
  pConfig->stCanInput[14].nId = 1621;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f240 6255 	movw	r2, #1621	; 0x655
 8014d22:	f8a3 2716 	strh.w	r2, [r3, #1814]	; 0x716
  pConfig->stCanInput[14].nLowByte = 2;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	2202      	movs	r2, #2
 8014d2a:	f8a3 2718 	strh.w	r2, [r3, #1816]	; 0x718
  pConfig->stCanInput[14].nHighByte = 3;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2203      	movs	r2, #3
 8014d32:	f8a3 271a 	strh.w	r2, [r3, #1818]	; 0x71a
  pConfig->stCanInput[14].eOperator = OPER_EQUAL;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
  pConfig->stCanInput[14].nOnVal = 1;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2201      	movs	r2, #1
 8014d42:	f8a3 271e 	strh.w	r2, [r3, #1822]	; 0x71e
  pConfig->stCanInput[14].eMode = MODE_NUM;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2200      	movs	r2, #0
 8014d4a:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720

  pConfig->stCanInput[15].nEnabled = 1;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	2201      	movs	r2, #1
 8014d52:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
  pConfig->stCanInput[15].nId = 1622;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	f240 6256 	movw	r2, #1622	; 0x656
 8014d5c:	f8a3 2732 	strh.w	r2, [r3, #1842]	; 0x732
  pConfig->stCanInput[15].nLowByte = 0;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	2200      	movs	r2, #0
 8014d64:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
  pConfig->stCanInput[15].nHighByte = 0;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	f8a3 2736 	strh.w	r2, [r3, #1846]	; 0x736
  pConfig->stCanInput[15].eOperator = OPER_BITWISE_AND;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	2203      	movs	r2, #3
 8014d74:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
  pConfig->stCanInput[15].nOnVal = 0x01;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2201      	movs	r2, #1
 8014d7c:	f8a3 273a 	strh.w	r2, [r3, #1850]	; 0x73a
  pConfig->stCanInput[15].eMode = MODE_MOMENTARY;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2201      	movs	r2, #1
 8014d84:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c

  pConfig->stCanInput[16].nEnabled = 1;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2201      	movs	r2, #1
 8014d8c:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
  pConfig->stCanInput[16].nId = 1622;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f240 6256 	movw	r2, #1622	; 0x656
 8014d96:	f8a3 274e 	strh.w	r2, [r3, #1870]	; 0x74e
  pConfig->stCanInput[16].nLowByte = 0;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	f8a3 2750 	strh.w	r2, [r3, #1872]	; 0x750
  pConfig->stCanInput[16].nHighByte = 0;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2200      	movs	r2, #0
 8014da6:	f8a3 2752 	strh.w	r2, [r3, #1874]	; 0x752
  pConfig->stCanInput[16].eOperator = OPER_BITWISE_AND;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	2203      	movs	r2, #3
 8014dae:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
  pConfig->stCanInput[16].nOnVal = 0x02;
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	2202      	movs	r2, #2
 8014db6:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
  pConfig->stCanInput[16].eMode = MODE_MOMENTARY;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	2201      	movs	r2, #1
 8014dbe:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758

  pConfig->stCanInput[17].nEnabled = 1;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2201      	movs	r2, #1
 8014dc6:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
  pConfig->stCanInput[17].nId = 1622;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f240 6256 	movw	r2, #1622	; 0x656
 8014dd0:	f8a3 276a 	strh.w	r2, [r3, #1898]	; 0x76a
  pConfig->stCanInput[17].nLowByte = 0;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	f8a3 276c 	strh.w	r2, [r3, #1900]	; 0x76c
  pConfig->stCanInput[17].nHighByte = 0;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	2200      	movs	r2, #0
 8014de0:	f8a3 276e 	strh.w	r2, [r3, #1902]	; 0x76e
  pConfig->stCanInput[17].eOperator = OPER_BITWISE_AND;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	2203      	movs	r2, #3
 8014de8:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
  pConfig->stCanInput[17].nOnVal = 0x04;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	2204      	movs	r2, #4
 8014df0:	f8a3 2772 	strh.w	r2, [r3, #1906]	; 0x772
  pConfig->stCanInput[17].eMode = MODE_MOMENTARY;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2201      	movs	r2, #1
 8014df8:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774

  pConfig->stCanInput[18].nEnabled = 1;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	2201      	movs	r2, #1
 8014e00:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
  pConfig->stCanInput[18].nId = 1622;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	f240 6256 	movw	r2, #1622	; 0x656
 8014e0a:	f8a3 2786 	strh.w	r2, [r3, #1926]	; 0x786
  pConfig->stCanInput[18].nLowByte = 0;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	2200      	movs	r2, #0
 8014e12:	f8a3 2788 	strh.w	r2, [r3, #1928]	; 0x788
  pConfig->stCanInput[18].nHighByte = 0;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	2200      	movs	r2, #0
 8014e1a:	f8a3 278a 	strh.w	r2, [r3, #1930]	; 0x78a
  pConfig->stCanInput[18].eOperator = OPER_BITWISE_AND;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	2203      	movs	r2, #3
 8014e22:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
  pConfig->stCanInput[18].nOnVal = 0x08;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	2208      	movs	r2, #8
 8014e2a:	f8a3 278e 	strh.w	r2, [r3, #1934]	; 0x78e
  pConfig->stCanInput[18].eMode = MODE_MOMENTARY;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2201      	movs	r2, #1
 8014e32:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790

  pConfig->stCanInput[19].nEnabled = 1;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	2201      	movs	r2, #1
 8014e3a:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
  pConfig->stCanInput[19].nId = 1622;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f240 6256 	movw	r2, #1622	; 0x656
 8014e44:	f8a3 27a2 	strh.w	r2, [r3, #1954]	; 0x7a2
  pConfig->stCanInput[19].nLowByte = 0;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	f8a3 27a4 	strh.w	r2, [r3, #1956]	; 0x7a4
  pConfig->stCanInput[19].nHighByte = 0;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2200      	movs	r2, #0
 8014e54:	f8a3 27a6 	strh.w	r2, [r3, #1958]	; 0x7a6
  pConfig->stCanInput[19].eOperator = OPER_BITWISE_AND;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	2203      	movs	r2, #3
 8014e5c:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
  pConfig->stCanInput[19].nOnVal = 0x10;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	2210      	movs	r2, #16
 8014e64:	f8a3 27aa 	strh.w	r2, [r3, #1962]	; 0x7aa
  pConfig->stCanInput[19].eMode = MODE_MOMENTARY;
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2201      	movs	r2, #1
 8014e6c:	f883 27ac 	strb.w	r2, [r3, #1964]	; 0x7ac

  pConfig->stCanInput[20].nEnabled = 1;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	2201      	movs	r2, #1
 8014e74:	f883 27bc 	strb.w	r2, [r3, #1980]	; 0x7bc
  pConfig->stCanInput[20].nId = 1622;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	f240 6256 	movw	r2, #1622	; 0x656
 8014e7e:	f8a3 27be 	strh.w	r2, [r3, #1982]	; 0x7be
  pConfig->stCanInput[20].nLowByte = 0;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2200      	movs	r2, #0
 8014e86:	f8a3 27c0 	strh.w	r2, [r3, #1984]	; 0x7c0
  pConfig->stCanInput[20].nHighByte = 0;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	f8a3 27c2 	strh.w	r2, [r3, #1986]	; 0x7c2
  pConfig->stCanInput[20].eOperator = OPER_BITWISE_AND;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	2203      	movs	r2, #3
 8014e96:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
  pConfig->stCanInput[20].nOnVal = 0x20;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	2220      	movs	r2, #32
 8014e9e:	f8a3 27c6 	strh.w	r2, [r3, #1990]	; 0x7c6
  pConfig->stCanInput[20].eMode = MODE_MOMENTARY;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2201      	movs	r2, #1
 8014ea6:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8

  pConfig->stCanInput[21].nEnabled = 1;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	2201      	movs	r2, #1
 8014eae:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
  pConfig->stCanInput[21].nId = 1622;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	f240 6256 	movw	r2, #1622	; 0x656
 8014eb8:	f8a3 27da 	strh.w	r2, [r3, #2010]	; 0x7da
  pConfig->stCanInput[21].nLowByte = 0;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	f8a3 27dc 	strh.w	r2, [r3, #2012]	; 0x7dc
  pConfig->stCanInput[21].nHighByte = 0;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	f8a3 27de 	strh.w	r2, [r3, #2014]	; 0x7de
  pConfig->stCanInput[21].eOperator = OPER_BITWISE_AND;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2203      	movs	r2, #3
 8014ed0:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
  pConfig->stCanInput[21].nOnVal = 0x40;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	2240      	movs	r2, #64	; 0x40
 8014ed8:	f8a3 27e2 	strh.w	r2, [r3, #2018]	; 0x7e2
  pConfig->stCanInput[21].eMode = MODE_MOMENTARY;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2201      	movs	r2, #1
 8014ee0:	f883 27e4 	strb.w	r2, [r3, #2020]	; 0x7e4

  pConfig->stCanInput[22].nEnabled = 1;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	2201      	movs	r2, #1
 8014ee8:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
  pConfig->stCanInput[22].nId = 1622;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f240 6256 	movw	r2, #1622	; 0x656
 8014ef2:	f8a3 27f6 	strh.w	r2, [r3, #2038]	; 0x7f6
  pConfig->stCanInput[22].nLowByte = 0;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	2200      	movs	r2, #0
 8014efa:	f8a3 27f8 	strh.w	r2, [r3, #2040]	; 0x7f8
  pConfig->stCanInput[22].nHighByte = 0;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2200      	movs	r2, #0
 8014f02:	f8a3 27fa 	strh.w	r2, [r3, #2042]	; 0x7fa
  pConfig->stCanInput[22].eOperator = OPER_BITWISE_AND;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2203      	movs	r2, #3
 8014f0a:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
  pConfig->stCanInput[22].nOnVal = 0x80;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	2280      	movs	r2, #128	; 0x80
 8014f12:	f8a3 27fe 	strh.w	r2, [r3, #2046]	; 0x7fe
  pConfig->stCanInput[22].eMode = MODE_MOMENTARY;
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	2201      	movs	r2, #1
 8014f1a:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800

  pConfig->stCanInput[23].nEnabled = 1;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	2201      	movs	r2, #1
 8014f22:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
  pConfig->stCanInput[23].nId = 1622;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f240 6256 	movw	r2, #1622	; 0x656
 8014f2c:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
  pConfig->stCanInput[23].nLowByte = 1;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	2201      	movs	r2, #1
 8014f34:	f8a3 2814 	strh.w	r2, [r3, #2068]	; 0x814
  pConfig->stCanInput[23].nHighByte = 0;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	f8a3 2816 	strh.w	r2, [r3, #2070]	; 0x816
  pConfig->stCanInput[23].eOperator = OPER_BITWISE_AND;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2203      	movs	r2, #3
 8014f44:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
  pConfig->stCanInput[23].nOnVal = 0x01;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2201      	movs	r2, #1
 8014f4c:	f8a3 281a 	strh.w	r2, [r3, #2074]	; 0x81a
  pConfig->stCanInput[23].eMode = MODE_MOMENTARY;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2201      	movs	r2, #1
 8014f54:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c

  pConfig->stCanInput[24].nEnabled = 1;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	2201      	movs	r2, #1
 8014f5c:	f883 282c 	strb.w	r2, [r3, #2092]	; 0x82c
  pConfig->stCanInput[24].nId = 1622;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f240 6256 	movw	r2, #1622	; 0x656
 8014f66:	f8a3 282e 	strh.w	r2, [r3, #2094]	; 0x82e
  pConfig->stCanInput[24].nLowByte = 1;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2201      	movs	r2, #1
 8014f6e:	f8a3 2830 	strh.w	r2, [r3, #2096]	; 0x830
  pConfig->stCanInput[24].nHighByte = 0;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	2200      	movs	r2, #0
 8014f76:	f8a3 2832 	strh.w	r2, [r3, #2098]	; 0x832
  pConfig->stCanInput[24].eOperator = OPER_BITWISE_AND;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	2203      	movs	r2, #3
 8014f7e:	f883 2834 	strb.w	r2, [r3, #2100]	; 0x834
  pConfig->stCanInput[24].nOnVal = 0x02;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	2202      	movs	r2, #2
 8014f86:	f8a3 2836 	strh.w	r2, [r3, #2102]	; 0x836
  pConfig->stCanInput[24].eMode = MODE_MOMENTARY;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	2201      	movs	r2, #1
 8014f8e:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838

  pConfig->stCanInput[25].nEnabled = 0;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	2200      	movs	r2, #0
 8014f96:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
  pConfig->stCanInput[25].nId = 0;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	f8a3 284a 	strh.w	r2, [r3, #2122]	; 0x84a
  pConfig->stCanInput[25].nLowByte = 0;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	f8a3 284c 	strh.w	r2, [r3, #2124]	; 0x84c
  pConfig->stCanInput[25].nHighByte = 0;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	2200      	movs	r2, #0
 8014fae:	f8a3 284e 	strh.w	r2, [r3, #2126]	; 0x84e
  pConfig->stCanInput[25].eOperator = OPER_EQUAL;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
  pConfig->stCanInput[25].nOnVal = 0;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	f8a3 2852 	strh.w	r2, [r3, #2130]	; 0x852
  pConfig->stCanInput[25].eMode = MODE_MOMENTARY;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2201      	movs	r2, #1
 8014fc6:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854

  pConfig->stCanInput[26].nEnabled = 0;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
  pConfig->stCanInput[26].nId = 0;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	f8a3 2866 	strh.w	r2, [r3, #2150]	; 0x866
  pConfig->stCanInput[26].nLowByte = 0;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	2200      	movs	r2, #0
 8014fde:	f8a3 2868 	strh.w	r2, [r3, #2152]	; 0x868
  pConfig->stCanInput[26].nHighByte = 0;
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	f8a3 286a 	strh.w	r2, [r3, #2154]	; 0x86a
  pConfig->stCanInput[26].eOperator = OPER_EQUAL;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2200      	movs	r2, #0
 8014fee:	f883 286c 	strb.w	r2, [r3, #2156]	; 0x86c
  pConfig->stCanInput[26].nOnVal = 0;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	f8a3 286e 	strh.w	r2, [r3, #2158]	; 0x86e
  pConfig->stCanInput[26].eMode = MODE_MOMENTARY;
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	2201      	movs	r2, #1
 8014ffe:	f883 2870 	strb.w	r2, [r3, #2160]	; 0x870

  pConfig->stCanInput[27].nEnabled = 0;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	2200      	movs	r2, #0
 8015006:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
  pConfig->stCanInput[27].nId = 0;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	2200      	movs	r2, #0
 801500e:	f8a3 2882 	strh.w	r2, [r3, #2178]	; 0x882
  pConfig->stCanInput[27].nLowByte = 0;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2200      	movs	r2, #0
 8015016:	f8a3 2884 	strh.w	r2, [r3, #2180]	; 0x884
  pConfig->stCanInput[27].nHighByte = 0;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	2200      	movs	r2, #0
 801501e:	f8a3 2886 	strh.w	r2, [r3, #2182]	; 0x886
  pConfig->stCanInput[27].eOperator = OPER_EQUAL;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2200      	movs	r2, #0
 8015026:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
  pConfig->stCanInput[27].nOnVal = 0;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	2200      	movs	r2, #0
 801502e:	f8a3 288a 	strh.w	r2, [r3, #2186]	; 0x88a
  pConfig->stCanInput[27].eMode = MODE_MOMENTARY;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2201      	movs	r2, #1
 8015036:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c

  pConfig->stCanInput[28].nEnabled = 0;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	2200      	movs	r2, #0
 801503e:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
  pConfig->stCanInput[28].nId = 0;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	2200      	movs	r2, #0
 8015046:	f8a3 289e 	strh.w	r2, [r3, #2206]	; 0x89e
  pConfig->stCanInput[28].nLowByte = 0;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	2200      	movs	r2, #0
 801504e:	f8a3 28a0 	strh.w	r2, [r3, #2208]	; 0x8a0
  pConfig->stCanInput[28].nHighByte = 0;
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	2200      	movs	r2, #0
 8015056:	f8a3 28a2 	strh.w	r2, [r3, #2210]	; 0x8a2
  pConfig->stCanInput[28].eOperator = OPER_EQUAL;
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	2200      	movs	r2, #0
 801505e:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
  pConfig->stCanInput[28].nOnVal = 0;
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	2200      	movs	r2, #0
 8015066:	f8a3 28a6 	strh.w	r2, [r3, #2214]	; 0x8a6
  pConfig->stCanInput[28].eMode = MODE_MOMENTARY;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	2201      	movs	r2, #1
 801506e:	f883 28a8 	strb.w	r2, [r3, #2216]	; 0x8a8

  pConfig->stCanInput[29].nEnabled = 0;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	2200      	movs	r2, #0
 8015076:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
  pConfig->stCanInput[29].nId = 0;
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	2200      	movs	r2, #0
 801507e:	f8a3 28ba 	strh.w	r2, [r3, #2234]	; 0x8ba
  pConfig->stCanInput[29].nLowByte = 0;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	2200      	movs	r2, #0
 8015086:	f8a3 28bc 	strh.w	r2, [r3, #2236]	; 0x8bc
  pConfig->stCanInput[29].nHighByte = 0;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	2200      	movs	r2, #0
 801508e:	f8a3 28be 	strh.w	r2, [r3, #2238]	; 0x8be
  pConfig->stCanInput[29].eOperator = OPER_EQUAL;
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	2200      	movs	r2, #0
 8015096:	f883 28c0 	strb.w	r2, [r3, #2240]	; 0x8c0
  pConfig->stCanInput[29].nOnVal = 0;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	2200      	movs	r2, #0
 801509e:	f8a3 28c2 	strh.w	r2, [r3, #2242]	; 0x8c2
  pConfig->stCanInput[29].eMode = MODE_MOMENTARY;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2201      	movs	r2, #1
 80150a6:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4

  //CAN Output
  pConfig->stCanOutput.nEnabled = 0;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	2200      	movs	r2, #0
 80150ae:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
  pConfig->stCanOutput.nBaseId = 2000;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80150b8:	f8a3 28d6 	strh.w	r2, [r3, #2262]	; 0x8d6
  pConfig->stCanOutput.nUpdateTime = 50;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	2232      	movs	r2, #50	; 0x32
 80150c0:	f8a3 28d8 	strh.w	r2, [r3, #2264]	; 0x8d8
}
 80150c4:	bf00      	nop
 80150c6:	370c      	adds	r7, #12
 80150c8:	46bd      	mov	sp, r7
 80150ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ce:	4770      	bx	lr

080150d0 <EvaluateInput>:
 */

#include "pdm_input.h"

void EvaluateInput(PdmConfig_Input_t *pIn, uint16_t* pResult)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b086      	sub	sp, #24
 80150d4:	af02      	add	r7, sp, #8
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	6039      	str	r1, [r7, #0]
  if(!pIn->nEnabled)
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d018      	beq.n	8015114 <EvaluateInput+0x44>
    return;

  uint16_t nLogicResult;

  nLogicResult = *pIn->pInput > pIn->nOnLevel;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	685b      	ldr	r3, [r3, #4]
 80150e6:	781b      	ldrb	r3, [r3, #0]
 80150e8:	b29a      	uxth	r2, r3
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	8b1b      	ldrh	r3, [r3, #24]
 80150ee:	429a      	cmp	r2, r3
 80150f0:	bf8c      	ite	hi
 80150f2:	2301      	movhi	r3, #1
 80150f4:	2300      	movls	r3, #0
 80150f6:	b2db      	uxtb	r3, r3
 80150f8:	81fb      	strh	r3, [r7, #14]

  CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nLogicResult, pResult, pIn->nDebounceTime);
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	f103 000c 	add.w	r0, r3, #12
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	7a19      	ldrb	r1, [r3, #8]
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	8b5b      	ldrh	r3, [r3, #26]
 8015108:	89fa      	ldrh	r2, [r7, #14]
 801510a:	9300      	str	r3, [sp, #0]
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	f000 f805 	bl	801511c <CheckPushbutton>
 8015112:	e000      	b.n	8015116 <EvaluateInput+0x46>
    return;
 8015114:	bf00      	nop
}
 8015116:	3710      	adds	r7, #16
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}

0801511c <CheckPushbutton>:
 */

#include "pushbutton.h"

void CheckPushbutton(PushbuttonConfig_t* pb, PushbuttonMode_t mode, uint16_t nInput, uint16_t* nOutput, uint16_t nDebounceTime)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b084      	sub	sp, #16
 8015120:	af00      	add	r7, sp, #0
 8015122:	60f8      	str	r0, [r7, #12]
 8015124:	607b      	str	r3, [r7, #4]
 8015126:	460b      	mov	r3, r1
 8015128:	72fb      	strb	r3, [r7, #11]
 801512a:	4613      	mov	r3, r2
 801512c:	813b      	strh	r3, [r7, #8]
  //=======================================================
  //Debounce and latch logic
  //=======================================================

  if(mode == MODE_MOMENTARY)
 801512e:	7afb      	ldrb	r3, [r7, #11]
 8015130:	2b01      	cmp	r3, #1
 8015132:	d132      	bne.n	801519a <CheckPushbutton+0x7e>
  {
    //Check for button change
    //Store trigger time
    if(nInput != pb->nLastState)
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	781b      	ldrb	r3, [r3, #0]
 8015138:	b29b      	uxth	r3, r3
 801513a:	893a      	ldrh	r2, [r7, #8]
 801513c:	429a      	cmp	r2, r3
 801513e:	d015      	beq.n	801516c <CheckPushbutton+0x50>
    {
      if(    ((nInput == 1) && (*nOutput == 0)) //Rising
 8015140:	893b      	ldrh	r3, [r7, #8]
 8015142:	2b01      	cmp	r3, #1
 8015144:	d103      	bne.n	801514e <CheckPushbutton+0x32>
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	881b      	ldrh	r3, [r3, #0]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d006      	beq.n	801515c <CheckPushbutton+0x40>
          || ((nInput == 0) && (*nOutput == 1))) //Falling
 801514e:	893b      	ldrh	r3, [r7, #8]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d10b      	bne.n	801516c <CheckPushbutton+0x50>
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	881b      	ldrh	r3, [r3, #0]
 8015158:	2b01      	cmp	r3, #1
 801515a:	d107      	bne.n	801516c <CheckPushbutton+0x50>
      {
        pb->nLastTrigTime = HAL_GetTick();
 801515c:	f7ed fb9a 	bl	8002894 <HAL_GetTick>
 8015160:	4602      	mov	r2, r0
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	605a      	str	r2, [r3, #4]
        pb->nCheckTime = 1;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	2201      	movs	r2, #1
 801516a:	721a      	strb	r2, [r3, #8]
      }
    }

    pb->nLastState = nInput;
 801516c:	893b      	ldrh	r3, [r7, #8]
 801516e:	b2da      	uxtb	r2, r3
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	701a      	strb	r2, [r3, #0]

    if((pb->nCheckTime > 0) && ((HAL_GetTick() - pb->nLastTrigTime) > nDebounceTime))
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	7a1b      	ldrb	r3, [r3, #8]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d00e      	beq.n	801519a <CheckPushbutton+0x7e>
 801517c:	f7ed fb8a 	bl	8002894 <HAL_GetTick>
 8015180:	4602      	mov	r2, r0
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	1ad2      	subs	r2, r2, r3
 8015188:	8b3b      	ldrh	r3, [r7, #24]
 801518a:	429a      	cmp	r2, r3
 801518c:	d905      	bls.n	801519a <CheckPushbutton+0x7e>
    {
      pb->nCheckTime = 0;
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	2200      	movs	r2, #0
 8015192:	721a      	strb	r2, [r3, #8]
      *nOutput = nInput;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	893a      	ldrh	r2, [r7, #8]
 8015198:	801a      	strh	r2, [r3, #0]
    }

    //Don't change output
  }

  if(mode == MODE_LATCHING)
 801519a:	7afb      	ldrb	r3, [r7, #11]
 801519c:	2b02      	cmp	r3, #2
 801519e:	d12e      	bne.n	80151fe <CheckPushbutton+0xe2>
  {
    //Check for rising trigger
    //Store trigger time
    if((nInput != pb->nLastState) && (nInput == 1))
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	781b      	ldrb	r3, [r3, #0]
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	893a      	ldrh	r2, [r7, #8]
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d00a      	beq.n	80151c2 <CheckPushbutton+0xa6>
 80151ac:	893b      	ldrh	r3, [r7, #8]
 80151ae:	2b01      	cmp	r3, #1
 80151b0:	d107      	bne.n	80151c2 <CheckPushbutton+0xa6>
    {
      pb->nLastTrigTime = HAL_GetTick();
 80151b2:	f7ed fb6f 	bl	8002894 <HAL_GetTick>
 80151b6:	4602      	mov	r2, r0
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	605a      	str	r2, [r3, #4]
      pb->nCheckTime = 1;
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	2201      	movs	r2, #1
 80151c0:	721a      	strb	r2, [r3, #8]
    }

    pb->nLastState = nInput;
 80151c2:	893b      	ldrh	r3, [r7, #8]
 80151c4:	b2da      	uxtb	r2, r3
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	701a      	strb	r2, [r3, #0]

    if((pb->nCheckTime > 0) && ((HAL_GetTick() - pb->nLastTrigTime) > nDebounceTime))
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	7a1b      	ldrb	r3, [r3, #8]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d015      	beq.n	80151fe <CheckPushbutton+0xe2>
 80151d2:	f7ed fb5f 	bl	8002894 <HAL_GetTick>
 80151d6:	4602      	mov	r2, r0
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	1ad2      	subs	r2, r2, r3
 80151de:	8b3b      	ldrh	r3, [r7, #24]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d90c      	bls.n	80151fe <CheckPushbutton+0xe2>
    {
      pb->nCheckTime = 0;
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	2200      	movs	r2, #0
 80151e8:	721a      	strb	r2, [r3, #8]
      *nOutput = !*nOutput;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	881b      	ldrh	r3, [r3, #0]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	bf0c      	ite	eq
 80151f2:	2301      	moveq	r3, #1
 80151f4:	2300      	movne	r3, #0
 80151f6:	b2db      	uxtb	r3, r3
 80151f8:	b29a      	uxth	r2, r3
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80151fe:	bf00      	nop
 8015200:	3710      	adds	r7, #16
 8015202:	46bd      	mov	sp, r7
 8015204:	bd80      	pop	{r7, pc}

08015206 <EvaluateStarter>:
 */

#include "starter.h"

void EvaluateStarter(PdmConfig_Starter_t *pStarter, uint8_t nIndex, uint16_t* pResult)
{
 8015206:	b480      	push	{r7}
 8015208:	b085      	sub	sp, #20
 801520a:	af00      	add	r7, sp, #0
 801520c:	60f8      	str	r0, [r7, #12]
 801520e:	460b      	mov	r3, r1
 8015210:	607a      	str	r2, [r7, #4]
 8015212:	72fb      	strb	r3, [r7, #11]
    if(!pStarter->nEnabled)
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	781b      	ldrb	r3, [r3, #0]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d103      	bne.n	8015224 <EvaluateStarter+0x1e>
      *pResult = 1;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	2201      	movs	r2, #1
 8015220:	801a      	strh	r2, [r3, #0]
    else
      *pResult = !(pStarter->nDisableOut[nIndex] && *pStarter->pInput);
}
 8015222:	e010      	b.n	8015246 <EvaluateStarter+0x40>
      *pResult = !(pStarter->nDisableOut[nIndex] && *pStarter->pInput);
 8015224:	7afb      	ldrb	r3, [r7, #11]
 8015226:	68fa      	ldr	r2, [r7, #12]
 8015228:	4413      	add	r3, r2
 801522a:	7a1b      	ldrb	r3, [r3, #8]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d004      	beq.n	801523a <EvaluateStarter+0x34>
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	685b      	ldr	r3, [r3, #4]
 8015234:	881b      	ldrh	r3, [r3, #0]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d101      	bne.n	801523e <EvaluateStarter+0x38>
 801523a:	2301      	movs	r3, #1
 801523c:	e000      	b.n	8015240 <EvaluateStarter+0x3a>
 801523e:	2300      	movs	r3, #0
 8015240:	b29a      	uxth	r2, r3
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	801a      	strh	r2, [r3, #0]
}
 8015246:	bf00      	nop
 8015248:	3714      	adds	r7, #20
 801524a:	46bd      	mov	sp, r7
 801524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015250:	4770      	bx	lr

08015252 <EvaluateVirtInput>:
 */

#include "virtual_input.h"

void EvaluateVirtInput(PdmConfig_VirtualInput_t *pIn, uint16_t* pResult)
{
 8015252:	b580      	push	{r7, lr}
 8015254:	b086      	sub	sp, #24
 8015256:	af02      	add	r7, sp, #8
 8015258:	6078      	str	r0, [r7, #4]
 801525a:	6039      	str	r1, [r7, #0]
  if(!pIn->nEnabled)
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	2b00      	cmp	r3, #0
 8015262:	f000 80be 	beq.w	80153e2 <EvaluateVirtInput+0x190>
    return;
  if((pIn->pVar0 == 0) || (pIn->pVar1 == 0))
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	685b      	ldr	r3, [r3, #4]
 801526a:	2b00      	cmp	r3, #0
 801526c:	f000 80bb 	beq.w	80153e6 <EvaluateVirtInput+0x194>
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	68db      	ldr	r3, [r3, #12]
 8015274:	2b00      	cmp	r3, #0
 8015276:	f000 80b6 	beq.w	80153e6 <EvaluateVirtInput+0x194>
    return;

  uint8_t nResult0, nResult1, nResult2, nResultSec0;

  nResult0 = *pIn->pVar0;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	685b      	ldr	r3, [r3, #4]
 801527e:	881b      	ldrh	r3, [r3, #0]
 8015280:	73fb      	strb	r3, [r7, #15]
  if(pIn->nNot0)
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	785b      	ldrb	r3, [r3, #1]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d006      	beq.n	8015298 <EvaluateVirtInput+0x46>
    nResult0 = !nResult0;
 801528a:	7bfb      	ldrb	r3, [r7, #15]
 801528c:	2b00      	cmp	r3, #0
 801528e:	bf0c      	ite	eq
 8015290:	2301      	moveq	r3, #1
 8015292:	2300      	movne	r3, #0
 8015294:	b2db      	uxtb	r3, r3
 8015296:	73fb      	strb	r3, [r7, #15]

  nResult1 = *pIn->pVar1;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	68db      	ldr	r3, [r3, #12]
 801529c:	881b      	ldrh	r3, [r3, #0]
 801529e:	73bb      	strb	r3, [r7, #14]
  if(pIn->nNot1)
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	7a5b      	ldrb	r3, [r3, #9]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d006      	beq.n	80152b6 <EvaluateVirtInput+0x64>
    nResult1 = !nResult1;
 80152a8:	7bbb      	ldrb	r3, [r7, #14]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	bf0c      	ite	eq
 80152ae:	2301      	moveq	r3, #1
 80152b0:	2300      	movne	r3, #0
 80152b2:	b2db      	uxtb	r3, r3
 80152b4:	73bb      	strb	r3, [r7, #14]

  switch(pIn->eCond0)
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	7a1b      	ldrb	r3, [r3, #8]
 80152ba:	2b02      	cmp	r3, #2
 80152bc:	d01c      	beq.n	80152f8 <EvaluateVirtInput+0xa6>
 80152be:	2b02      	cmp	r3, #2
 80152c0:	dc25      	bgt.n	801530e <EvaluateVirtInput+0xbc>
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d002      	beq.n	80152cc <EvaluateVirtInput+0x7a>
 80152c6:	2b01      	cmp	r3, #1
 80152c8:	d00b      	beq.n	80152e2 <EvaluateVirtInput+0x90>
 80152ca:	e020      	b.n	801530e <EvaluateVirtInput+0xbc>
  {
  case COND_AND:
    nResultSec0 = nResult0 && nResult1;
 80152cc:	7bfb      	ldrb	r3, [r7, #15]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d004      	beq.n	80152dc <EvaluateVirtInput+0x8a>
 80152d2:	7bbb      	ldrb	r3, [r7, #14]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d001      	beq.n	80152dc <EvaluateVirtInput+0x8a>
 80152d8:	2301      	movs	r3, #1
 80152da:	e000      	b.n	80152de <EvaluateVirtInput+0x8c>
 80152dc:	2300      	movs	r3, #0
 80152de:	733b      	strb	r3, [r7, #12]
    break;
 80152e0:	e015      	b.n	801530e <EvaluateVirtInput+0xbc>
  case COND_OR:
    nResultSec0 = nResult0 || nResult1;
 80152e2:	7bfb      	ldrb	r3, [r7, #15]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d102      	bne.n	80152ee <EvaluateVirtInput+0x9c>
 80152e8:	7bbb      	ldrb	r3, [r7, #14]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d001      	beq.n	80152f2 <EvaluateVirtInput+0xa0>
 80152ee:	2301      	movs	r3, #1
 80152f0:	e000      	b.n	80152f4 <EvaluateVirtInput+0xa2>
 80152f2:	2300      	movs	r3, #0
 80152f4:	733b      	strb	r3, [r7, #12]
    break;
 80152f6:	e00a      	b.n	801530e <EvaluateVirtInput+0xbc>
  case COND_NOR:
    nResultSec0 = !nResult0 || !nResult1;
 80152f8:	7bfb      	ldrb	r3, [r7, #15]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d002      	beq.n	8015304 <EvaluateVirtInput+0xb2>
 80152fe:	7bbb      	ldrb	r3, [r7, #14]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d101      	bne.n	8015308 <EvaluateVirtInput+0xb6>
 8015304:	2301      	movs	r3, #1
 8015306:	e000      	b.n	801530a <EvaluateVirtInput+0xb8>
 8015308:	2300      	movs	r3, #0
 801530a:	733b      	strb	r3, [r7, #12]
    break;
 801530c:	bf00      	nop
  }

  //Only 2 conditions
  if(pIn->nVar2 == 0)
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	7c9b      	ldrb	r3, [r3, #18]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d10c      	bne.n	8015330 <EvaluateVirtInput+0xde>
  {
    CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0, pResult, NO_DEBOUNCE);
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	f103 001c 	add.w	r0, r3, #28
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	7e19      	ldrb	r1, [r3, #24]
 8015320:	7b3b      	ldrb	r3, [r7, #12]
 8015322:	b29a      	uxth	r2, r3
 8015324:	2300      	movs	r3, #0
 8015326:	9300      	str	r3, [sp, #0]
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	f7ff fef7 	bl	801511c <CheckPushbutton>
    return;
 801532e:	e05b      	b.n	80153e8 <EvaluateVirtInput+0x196>
  }
  else
  {
    nResult2 = *pIn->pVar2;
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	695b      	ldr	r3, [r3, #20]
 8015334:	881b      	ldrh	r3, [r3, #0]
 8015336:	737b      	strb	r3, [r7, #13]
    if(pIn->nNot2)
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	7c5b      	ldrb	r3, [r3, #17]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d006      	beq.n	801534e <EvaluateVirtInput+0xfc>
      nResult2 = !nResult2;
 8015340:	7b7b      	ldrb	r3, [r7, #13]
 8015342:	2b00      	cmp	r3, #0
 8015344:	bf0c      	ite	eq
 8015346:	2301      	moveq	r3, #1
 8015348:	2300      	movne	r3, #0
 801534a:	b2db      	uxtb	r3, r3
 801534c:	737b      	strb	r3, [r7, #13]

    switch(pIn->eCond0)
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	7a1b      	ldrb	r3, [r3, #8]
 8015352:	2b02      	cmp	r3, #2
 8015354:	d030      	beq.n	80153b8 <EvaluateVirtInput+0x166>
 8015356:	2b02      	cmp	r3, #2
 8015358:	dc46      	bgt.n	80153e8 <EvaluateVirtInput+0x196>
 801535a:	2b00      	cmp	r3, #0
 801535c:	d002      	beq.n	8015364 <EvaluateVirtInput+0x112>
 801535e:	2b01      	cmp	r3, #1
 8015360:	d015      	beq.n	801538e <EvaluateVirtInput+0x13c>
 8015362:	e041      	b.n	80153e8 <EvaluateVirtInput+0x196>
    {
    case COND_AND:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0 && nResult2, pResult, NO_DEBOUNCE);
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	f103 001c 	add.w	r0, r3, #28
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	7e19      	ldrb	r1, [r3, #24]
 801536e:	7b3b      	ldrb	r3, [r7, #12]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d004      	beq.n	801537e <EvaluateVirtInput+0x12c>
 8015374:	7b7b      	ldrb	r3, [r7, #13]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d001      	beq.n	801537e <EvaluateVirtInput+0x12c>
 801537a:	2301      	movs	r3, #1
 801537c:	e000      	b.n	8015380 <EvaluateVirtInput+0x12e>
 801537e:	2300      	movs	r3, #0
 8015380:	b29a      	uxth	r2, r3
 8015382:	2300      	movs	r3, #0
 8015384:	9300      	str	r3, [sp, #0]
 8015386:	683b      	ldr	r3, [r7, #0]
 8015388:	f7ff fec8 	bl	801511c <CheckPushbutton>
      return;
 801538c:	e02c      	b.n	80153e8 <EvaluateVirtInput+0x196>
    case COND_OR:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0 || nResult2, pResult, NO_DEBOUNCE);
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f103 001c 	add.w	r0, r3, #28
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	7e19      	ldrb	r1, [r3, #24]
 8015398:	7b3b      	ldrb	r3, [r7, #12]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d102      	bne.n	80153a4 <EvaluateVirtInput+0x152>
 801539e:	7b7b      	ldrb	r3, [r7, #13]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d001      	beq.n	80153a8 <EvaluateVirtInput+0x156>
 80153a4:	2301      	movs	r3, #1
 80153a6:	e000      	b.n	80153aa <EvaluateVirtInput+0x158>
 80153a8:	2300      	movs	r3, #0
 80153aa:	b29a      	uxth	r2, r3
 80153ac:	2300      	movs	r3, #0
 80153ae:	9300      	str	r3, [sp, #0]
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	f7ff feb3 	bl	801511c <CheckPushbutton>
      return;
 80153b6:	e017      	b.n	80153e8 <EvaluateVirtInput+0x196>
    case COND_NOR:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, !nResultSec0 || !nResult2, pResult, NO_DEBOUNCE);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f103 001c 	add.w	r0, r3, #28
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	7e19      	ldrb	r1, [r3, #24]
 80153c2:	7b3b      	ldrb	r3, [r7, #12]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d002      	beq.n	80153ce <EvaluateVirtInput+0x17c>
 80153c8:	7b7b      	ldrb	r3, [r7, #13]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d101      	bne.n	80153d2 <EvaluateVirtInput+0x180>
 80153ce:	2301      	movs	r3, #1
 80153d0:	e000      	b.n	80153d4 <EvaluateVirtInput+0x182>
 80153d2:	2300      	movs	r3, #0
 80153d4:	b29a      	uxth	r2, r3
 80153d6:	2300      	movs	r3, #0
 80153d8:	9300      	str	r3, [sp, #0]
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	f7ff fe9e 	bl	801511c <CheckPushbutton>
      return;
 80153e0:	e002      	b.n	80153e8 <EvaluateVirtInput+0x196>
    return;
 80153e2:	bf00      	nop
 80153e4:	e000      	b.n	80153e8 <EvaluateVirtInput+0x196>
    return;
 80153e6:	bf00      	nop
    }
  }

}
 80153e8:	3710      	adds	r7, #16
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}
	...

080153f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153f0:	b480      	push	{r7}
 80153f2:	b083      	sub	sp, #12
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	4603      	mov	r3, r0
 80153f8:	6039      	str	r1, [r7, #0]
 80153fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	2212      	movs	r2, #18
 8015400:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015402:	4b03      	ldr	r3, [pc, #12]	; (8015410 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015404:	4618      	mov	r0, r3
 8015406:	370c      	adds	r7, #12
 8015408:	46bd      	mov	sp, r7
 801540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540e:	4770      	bx	lr
 8015410:	2000014c 	.word	0x2000014c

08015414 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015414:	b480      	push	{r7}
 8015416:	b083      	sub	sp, #12
 8015418:	af00      	add	r7, sp, #0
 801541a:	4603      	mov	r3, r0
 801541c:	6039      	str	r1, [r7, #0]
 801541e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	2204      	movs	r2, #4
 8015424:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015426:	4b03      	ldr	r3, [pc, #12]	; (8015434 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015428:	4618      	mov	r0, r3
 801542a:	370c      	adds	r7, #12
 801542c:	46bd      	mov	sp, r7
 801542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015432:	4770      	bx	lr
 8015434:	20000160 	.word	0x20000160

08015438 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	4603      	mov	r3, r0
 8015440:	6039      	str	r1, [r7, #0]
 8015442:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015444:	79fb      	ldrb	r3, [r7, #7]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d105      	bne.n	8015456 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801544a:	683a      	ldr	r2, [r7, #0]
 801544c:	4907      	ldr	r1, [pc, #28]	; (801546c <USBD_FS_ProductStrDescriptor+0x34>)
 801544e:	4808      	ldr	r0, [pc, #32]	; (8015470 <USBD_FS_ProductStrDescriptor+0x38>)
 8015450:	f7f7 fe29 	bl	800d0a6 <USBD_GetString>
 8015454:	e004      	b.n	8015460 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015456:	683a      	ldr	r2, [r7, #0]
 8015458:	4904      	ldr	r1, [pc, #16]	; (801546c <USBD_FS_ProductStrDescriptor+0x34>)
 801545a:	4805      	ldr	r0, [pc, #20]	; (8015470 <USBD_FS_ProductStrDescriptor+0x38>)
 801545c:	f7f7 fe23 	bl	800d0a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015460:	4b02      	ldr	r3, [pc, #8]	; (801546c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015462:	4618      	mov	r0, r3
 8015464:	3708      	adds	r7, #8
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}
 801546a:	bf00      	nop
 801546c:	20004bec 	.word	0x20004bec
 8015470:	08016778 	.word	0x08016778

08015474 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b082      	sub	sp, #8
 8015478:	af00      	add	r7, sp, #0
 801547a:	4603      	mov	r3, r0
 801547c:	6039      	str	r1, [r7, #0]
 801547e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015480:	683a      	ldr	r2, [r7, #0]
 8015482:	4904      	ldr	r1, [pc, #16]	; (8015494 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015484:	4804      	ldr	r0, [pc, #16]	; (8015498 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015486:	f7f7 fe0e 	bl	800d0a6 <USBD_GetString>
  return USBD_StrDesc;
 801548a:	4b02      	ldr	r3, [pc, #8]	; (8015494 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801548c:	4618      	mov	r0, r3
 801548e:	3708      	adds	r7, #8
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}
 8015494:	20004bec 	.word	0x20004bec
 8015498:	08016790 	.word	0x08016790

0801549c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b082      	sub	sp, #8
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	4603      	mov	r3, r0
 80154a4:	6039      	str	r1, [r7, #0]
 80154a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	221a      	movs	r2, #26
 80154ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80154ae:	f000 f843 	bl	8015538 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80154b2:	4b02      	ldr	r3, [pc, #8]	; (80154bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	3708      	adds	r7, #8
 80154b8:	46bd      	mov	sp, r7
 80154ba:	bd80      	pop	{r7, pc}
 80154bc:	20000164 	.word	0x20000164

080154c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b082      	sub	sp, #8
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	4603      	mov	r3, r0
 80154c8:	6039      	str	r1, [r7, #0]
 80154ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80154cc:	79fb      	ldrb	r3, [r7, #7]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d105      	bne.n	80154de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154d2:	683a      	ldr	r2, [r7, #0]
 80154d4:	4907      	ldr	r1, [pc, #28]	; (80154f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80154d6:	4808      	ldr	r0, [pc, #32]	; (80154f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80154d8:	f7f7 fde5 	bl	800d0a6 <USBD_GetString>
 80154dc:	e004      	b.n	80154e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154de:	683a      	ldr	r2, [r7, #0]
 80154e0:	4904      	ldr	r1, [pc, #16]	; (80154f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80154e2:	4805      	ldr	r0, [pc, #20]	; (80154f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80154e4:	f7f7 fddf 	bl	800d0a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80154e8:	4b02      	ldr	r3, [pc, #8]	; (80154f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3708      	adds	r7, #8
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}
 80154f2:	bf00      	nop
 80154f4:	20004bec 	.word	0x20004bec
 80154f8:	080167a4 	.word	0x080167a4

080154fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b082      	sub	sp, #8
 8015500:	af00      	add	r7, sp, #0
 8015502:	4603      	mov	r3, r0
 8015504:	6039      	str	r1, [r7, #0]
 8015506:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015508:	79fb      	ldrb	r3, [r7, #7]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d105      	bne.n	801551a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801550e:	683a      	ldr	r2, [r7, #0]
 8015510:	4907      	ldr	r1, [pc, #28]	; (8015530 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015512:	4808      	ldr	r0, [pc, #32]	; (8015534 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015514:	f7f7 fdc7 	bl	800d0a6 <USBD_GetString>
 8015518:	e004      	b.n	8015524 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801551a:	683a      	ldr	r2, [r7, #0]
 801551c:	4904      	ldr	r1, [pc, #16]	; (8015530 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801551e:	4805      	ldr	r0, [pc, #20]	; (8015534 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015520:	f7f7 fdc1 	bl	800d0a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015524:	4b02      	ldr	r3, [pc, #8]	; (8015530 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015526:	4618      	mov	r0, r3
 8015528:	3708      	adds	r7, #8
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}
 801552e:	bf00      	nop
 8015530:	20004bec 	.word	0x20004bec
 8015534:	080167b0 	.word	0x080167b0

08015538 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b084      	sub	sp, #16
 801553c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801553e:	4b0f      	ldr	r3, [pc, #60]	; (801557c <Get_SerialNum+0x44>)
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015544:	4b0e      	ldr	r3, [pc, #56]	; (8015580 <Get_SerialNum+0x48>)
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801554a:	4b0e      	ldr	r3, [pc, #56]	; (8015584 <Get_SerialNum+0x4c>)
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015550:	68fa      	ldr	r2, [r7, #12]
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	4413      	add	r3, r2
 8015556:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d009      	beq.n	8015572 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801555e:	2208      	movs	r2, #8
 8015560:	4909      	ldr	r1, [pc, #36]	; (8015588 <Get_SerialNum+0x50>)
 8015562:	68f8      	ldr	r0, [r7, #12]
 8015564:	f000 f814 	bl	8015590 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015568:	2204      	movs	r2, #4
 801556a:	4908      	ldr	r1, [pc, #32]	; (801558c <Get_SerialNum+0x54>)
 801556c:	68b8      	ldr	r0, [r7, #8]
 801556e:	f000 f80f 	bl	8015590 <IntToUnicode>
  }
}
 8015572:	bf00      	nop
 8015574:	3710      	adds	r7, #16
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}
 801557a:	bf00      	nop
 801557c:	1ffff7ac 	.word	0x1ffff7ac
 8015580:	1ffff7b0 	.word	0x1ffff7b0
 8015584:	1ffff7b4 	.word	0x1ffff7b4
 8015588:	20000166 	.word	0x20000166
 801558c:	20000176 	.word	0x20000176

08015590 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015590:	b480      	push	{r7}
 8015592:	b087      	sub	sp, #28
 8015594:	af00      	add	r7, sp, #0
 8015596:	60f8      	str	r0, [r7, #12]
 8015598:	60b9      	str	r1, [r7, #8]
 801559a:	4613      	mov	r3, r2
 801559c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801559e:	2300      	movs	r3, #0
 80155a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80155a2:	2300      	movs	r3, #0
 80155a4:	75fb      	strb	r3, [r7, #23]
 80155a6:	e027      	b.n	80155f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	0f1b      	lsrs	r3, r3, #28
 80155ac:	2b09      	cmp	r3, #9
 80155ae:	d80b      	bhi.n	80155c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	0f1b      	lsrs	r3, r3, #28
 80155b4:	b2da      	uxtb	r2, r3
 80155b6:	7dfb      	ldrb	r3, [r7, #23]
 80155b8:	005b      	lsls	r3, r3, #1
 80155ba:	4619      	mov	r1, r3
 80155bc:	68bb      	ldr	r3, [r7, #8]
 80155be:	440b      	add	r3, r1
 80155c0:	3230      	adds	r2, #48	; 0x30
 80155c2:	b2d2      	uxtb	r2, r2
 80155c4:	701a      	strb	r2, [r3, #0]
 80155c6:	e00a      	b.n	80155de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	0f1b      	lsrs	r3, r3, #28
 80155cc:	b2da      	uxtb	r2, r3
 80155ce:	7dfb      	ldrb	r3, [r7, #23]
 80155d0:	005b      	lsls	r3, r3, #1
 80155d2:	4619      	mov	r1, r3
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	440b      	add	r3, r1
 80155d8:	3237      	adds	r2, #55	; 0x37
 80155da:	b2d2      	uxtb	r2, r2
 80155dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	011b      	lsls	r3, r3, #4
 80155e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80155e4:	7dfb      	ldrb	r3, [r7, #23]
 80155e6:	005b      	lsls	r3, r3, #1
 80155e8:	3301      	adds	r3, #1
 80155ea:	68ba      	ldr	r2, [r7, #8]
 80155ec:	4413      	add	r3, r2
 80155ee:	2200      	movs	r2, #0
 80155f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80155f2:	7dfb      	ldrb	r3, [r7, #23]
 80155f4:	3301      	adds	r3, #1
 80155f6:	75fb      	strb	r3, [r7, #23]
 80155f8:	7dfa      	ldrb	r2, [r7, #23]
 80155fa:	79fb      	ldrb	r3, [r7, #7]
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d3d3      	bcc.n	80155a8 <IntToUnicode+0x18>
  }
}
 8015600:	bf00      	nop
 8015602:	bf00      	nop
 8015604:	371c      	adds	r7, #28
 8015606:	46bd      	mov	sp, r7
 8015608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560c:	4770      	bx	lr
	...

08015610 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b08a      	sub	sp, #40	; 0x28
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015618:	f107 0314 	add.w	r3, r7, #20
 801561c:	2200      	movs	r2, #0
 801561e:	601a      	str	r2, [r3, #0]
 8015620:	605a      	str	r2, [r3, #4]
 8015622:	609a      	str	r2, [r3, #8]
 8015624:	60da      	str	r2, [r3, #12]
 8015626:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	4a1f      	ldr	r2, [pc, #124]	; (80156ac <HAL_PCD_MspInit+0x9c>)
 801562e:	4293      	cmp	r3, r2
 8015630:	d137      	bne.n	80156a2 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015632:	4b1f      	ldr	r3, [pc, #124]	; (80156b0 <HAL_PCD_MspInit+0xa0>)
 8015634:	695b      	ldr	r3, [r3, #20]
 8015636:	4a1e      	ldr	r2, [pc, #120]	; (80156b0 <HAL_PCD_MspInit+0xa0>)
 8015638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801563c:	6153      	str	r3, [r2, #20]
 801563e:	4b1c      	ldr	r3, [pc, #112]	; (80156b0 <HAL_PCD_MspInit+0xa0>)
 8015640:	695b      	ldr	r3, [r3, #20]
 8015642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015646:	613b      	str	r3, [r7, #16]
 8015648:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801564a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801564e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015650:	2302      	movs	r3, #2
 8015652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015654:	2300      	movs	r3, #0
 8015656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8015658:	2303      	movs	r3, #3
 801565a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 801565c:	230e      	movs	r3, #14
 801565e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015660:	f107 0314 	add.w	r3, r7, #20
 8015664:	4619      	mov	r1, r3
 8015666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801566a:	f7ef fb13 	bl	8004c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801566e:	4b10      	ldr	r3, [pc, #64]	; (80156b0 <HAL_PCD_MspInit+0xa0>)
 8015670:	69db      	ldr	r3, [r3, #28]
 8015672:	4a0f      	ldr	r2, [pc, #60]	; (80156b0 <HAL_PCD_MspInit+0xa0>)
 8015674:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015678:	61d3      	str	r3, [r2, #28]
 801567a:	4b0d      	ldr	r3, [pc, #52]	; (80156b0 <HAL_PCD_MspInit+0xa0>)
 801567c:	69db      	ldr	r3, [r3, #28]
 801567e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015682:	60fb      	str	r3, [r7, #12]
 8015684:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 8015686:	4b0b      	ldr	r3, [pc, #44]	; (80156b4 <HAL_PCD_MspInit+0xa4>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	4a0a      	ldr	r2, [pc, #40]	; (80156b4 <HAL_PCD_MspInit+0xa4>)
 801568c:	f043 0320 	orr.w	r3, r3, #32
 8015690:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8015692:	2200      	movs	r2, #0
 8015694:	2105      	movs	r1, #5
 8015696:	204b      	movs	r0, #75	; 0x4b
 8015698:	f7ef f834 	bl	8004704 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801569c:	204b      	movs	r0, #75	; 0x4b
 801569e:	f7ef f84d 	bl	800473c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80156a2:	bf00      	nop
 80156a4:	3728      	adds	r7, #40	; 0x28
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
 80156aa:	bf00      	nop
 80156ac:	40005c00 	.word	0x40005c00
 80156b0:	40021000 	.word	0x40021000
 80156b4:	40010000 	.word	0x40010000

080156b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b082      	sub	sp, #8
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80156cc:	4619      	mov	r1, r3
 80156ce:	4610      	mov	r0, r2
 80156d0:	f7f6 fdb4 	bl	800c23c <USBD_LL_SetupStage>
}
 80156d4:	bf00      	nop
 80156d6:	3708      	adds	r7, #8
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}

080156dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b082      	sub	sp, #8
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	460b      	mov	r3, r1
 80156e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80156ee:	78fa      	ldrb	r2, [r7, #3]
 80156f0:	6879      	ldr	r1, [r7, #4]
 80156f2:	4613      	mov	r3, r2
 80156f4:	009b      	lsls	r3, r3, #2
 80156f6:	4413      	add	r3, r2
 80156f8:	00db      	lsls	r3, r3, #3
 80156fa:	440b      	add	r3, r1
 80156fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8015700:	681a      	ldr	r2, [r3, #0]
 8015702:	78fb      	ldrb	r3, [r7, #3]
 8015704:	4619      	mov	r1, r3
 8015706:	f7f6 fde6 	bl	800c2d6 <USBD_LL_DataOutStage>
}
 801570a:	bf00      	nop
 801570c:	3708      	adds	r7, #8
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}

08015712 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015712:	b580      	push	{r7, lr}
 8015714:	b082      	sub	sp, #8
 8015716:	af00      	add	r7, sp, #0
 8015718:	6078      	str	r0, [r7, #4]
 801571a:	460b      	mov	r3, r1
 801571c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8015724:	78fa      	ldrb	r2, [r7, #3]
 8015726:	6879      	ldr	r1, [r7, #4]
 8015728:	4613      	mov	r3, r2
 801572a:	009b      	lsls	r3, r3, #2
 801572c:	4413      	add	r3, r2
 801572e:	00db      	lsls	r3, r3, #3
 8015730:	440b      	add	r3, r1
 8015732:	333c      	adds	r3, #60	; 0x3c
 8015734:	681a      	ldr	r2, [r3, #0]
 8015736:	78fb      	ldrb	r3, [r7, #3]
 8015738:	4619      	mov	r1, r3
 801573a:	f7f6 fe3d 	bl	800c3b8 <USBD_LL_DataInStage>
}
 801573e:	bf00      	nop
 8015740:	3708      	adds	r7, #8
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}

08015746 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015746:	b580      	push	{r7, lr}
 8015748:	b082      	sub	sp, #8
 801574a:	af00      	add	r7, sp, #0
 801574c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8015754:	4618      	mov	r0, r3
 8015756:	f7f6 ff50 	bl	800c5fa <USBD_LL_SOF>
}
 801575a:	bf00      	nop
 801575c:	3708      	adds	r7, #8
 801575e:	46bd      	mov	sp, r7
 8015760:	bd80      	pop	{r7, pc}

08015762 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015762:	b580      	push	{r7, lr}
 8015764:	b084      	sub	sp, #16
 8015766:	af00      	add	r7, sp, #0
 8015768:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801576a:	2301      	movs	r3, #1
 801576c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	689b      	ldr	r3, [r3, #8]
 8015772:	2b02      	cmp	r3, #2
 8015774:	d001      	beq.n	801577a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015776:	f7ec fdf5 	bl	8002364 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8015780:	7bfa      	ldrb	r2, [r7, #15]
 8015782:	4611      	mov	r1, r2
 8015784:	4618      	mov	r0, r3
 8015786:	f7f6 fefd 	bl	800c584 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8015790:	4618      	mov	r0, r3
 8015792:	f7f6 feb6 	bl	800c502 <USBD_LL_Reset>
}
 8015796:	bf00      	nop
 8015798:	3710      	adds	r7, #16
 801579a:	46bd      	mov	sp, r7
 801579c:	bd80      	pop	{r7, pc}
	...

080157a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b082      	sub	sp, #8
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7f6 fef8 	bl	800c5a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	699b      	ldr	r3, [r3, #24]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d005      	beq.n	80157c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80157bc:	4b04      	ldr	r3, [pc, #16]	; (80157d0 <HAL_PCD_SuspendCallback+0x30>)
 80157be:	691b      	ldr	r3, [r3, #16]
 80157c0:	4a03      	ldr	r2, [pc, #12]	; (80157d0 <HAL_PCD_SuspendCallback+0x30>)
 80157c2:	f043 0306 	orr.w	r3, r3, #6
 80157c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80157c8:	bf00      	nop
 80157ca:	3708      	adds	r7, #8
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}
 80157d0:	e000ed00 	.word	0xe000ed00

080157d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b082      	sub	sp, #8
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80157e2:	4618      	mov	r0, r3
 80157e4:	f7f6 fef3 	bl	800c5ce <USBD_LL_Resume>
}
 80157e8:	bf00      	nop
 80157ea:	3708      	adds	r7, #8
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}

080157f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b082      	sub	sp, #8
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80157f8:	4a28      	ldr	r2, [pc, #160]	; (801589c <USBD_LL_Init+0xac>)
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	4a26      	ldr	r2, [pc, #152]	; (801589c <USBD_LL_Init+0xac>)
 8015804:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8015808:	4b24      	ldr	r3, [pc, #144]	; (801589c <USBD_LL_Init+0xac>)
 801580a:	4a25      	ldr	r2, [pc, #148]	; (80158a0 <USBD_LL_Init+0xb0>)
 801580c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801580e:	4b23      	ldr	r3, [pc, #140]	; (801589c <USBD_LL_Init+0xac>)
 8015810:	2208      	movs	r2, #8
 8015812:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015814:	4b21      	ldr	r3, [pc, #132]	; (801589c <USBD_LL_Init+0xac>)
 8015816:	2202      	movs	r2, #2
 8015818:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801581a:	4b20      	ldr	r3, [pc, #128]	; (801589c <USBD_LL_Init+0xac>)
 801581c:	2202      	movs	r2, #2
 801581e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015820:	4b1e      	ldr	r3, [pc, #120]	; (801589c <USBD_LL_Init+0xac>)
 8015822:	2200      	movs	r2, #0
 8015824:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015826:	4b1d      	ldr	r3, [pc, #116]	; (801589c <USBD_LL_Init+0xac>)
 8015828:	2200      	movs	r2, #0
 801582a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801582c:	481b      	ldr	r0, [pc, #108]	; (801589c <USBD_LL_Init+0xac>)
 801582e:	f7f0 f8de 	bl	80059ee <HAL_PCD_Init>
 8015832:	4603      	mov	r3, r0
 8015834:	2b00      	cmp	r3, #0
 8015836:	d001      	beq.n	801583c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8015838:	f7ec fd94 	bl	8002364 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015842:	2318      	movs	r3, #24
 8015844:	2200      	movs	r2, #0
 8015846:	2100      	movs	r1, #0
 8015848:	f7f1 fd79 	bl	800733e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015852:	2358      	movs	r3, #88	; 0x58
 8015854:	2200      	movs	r2, #0
 8015856:	2180      	movs	r1, #128	; 0x80
 8015858:	f7f1 fd71 	bl	800733e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015862:	23c0      	movs	r3, #192	; 0xc0
 8015864:	2200      	movs	r2, #0
 8015866:	2181      	movs	r1, #129	; 0x81
 8015868:	f7f1 fd69 	bl	800733e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015872:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015876:	2200      	movs	r2, #0
 8015878:	2101      	movs	r1, #1
 801587a:	f7f1 fd60 	bl	800733e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015888:	2200      	movs	r2, #0
 801588a:	2182      	movs	r1, #130	; 0x82
 801588c:	f7f1 fd57 	bl	800733e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015890:	2300      	movs	r3, #0
}
 8015892:	4618      	mov	r0, r3
 8015894:	3708      	adds	r7, #8
 8015896:	46bd      	mov	sp, r7
 8015898:	bd80      	pop	{r7, pc}
 801589a:	bf00      	nop
 801589c:	20004dec 	.word	0x20004dec
 80158a0:	40005c00 	.word	0x40005c00

080158a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b084      	sub	sp, #16
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158ac:	2300      	movs	r3, #0
 80158ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158b0:	2300      	movs	r3, #0
 80158b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80158ba:	4618      	mov	r0, r3
 80158bc:	f7f0 f975 	bl	8005baa <HAL_PCD_Start>
 80158c0:	4603      	mov	r3, r0
 80158c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158c4:	7bfb      	ldrb	r3, [r7, #15]
 80158c6:	4618      	mov	r0, r3
 80158c8:	f000 f954 	bl	8015b74 <USBD_Get_USB_Status>
 80158cc:	4603      	mov	r3, r0
 80158ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80158d2:	4618      	mov	r0, r3
 80158d4:	3710      	adds	r7, #16
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}

080158da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80158da:	b580      	push	{r7, lr}
 80158dc:	b084      	sub	sp, #16
 80158de:	af00      	add	r7, sp, #0
 80158e0:	6078      	str	r0, [r7, #4]
 80158e2:	4608      	mov	r0, r1
 80158e4:	4611      	mov	r1, r2
 80158e6:	461a      	mov	r2, r3
 80158e8:	4603      	mov	r3, r0
 80158ea:	70fb      	strb	r3, [r7, #3]
 80158ec:	460b      	mov	r3, r1
 80158ee:	70bb      	strb	r3, [r7, #2]
 80158f0:	4613      	mov	r3, r2
 80158f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158f4:	2300      	movs	r3, #0
 80158f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158f8:	2300      	movs	r3, #0
 80158fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015902:	78bb      	ldrb	r3, [r7, #2]
 8015904:	883a      	ldrh	r2, [r7, #0]
 8015906:	78f9      	ldrb	r1, [r7, #3]
 8015908:	f7f0 fa91 	bl	8005e2e <HAL_PCD_EP_Open>
 801590c:	4603      	mov	r3, r0
 801590e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015910:	7bfb      	ldrb	r3, [r7, #15]
 8015912:	4618      	mov	r0, r3
 8015914:	f000 f92e 	bl	8015b74 <USBD_Get_USB_Status>
 8015918:	4603      	mov	r3, r0
 801591a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801591c:	7bbb      	ldrb	r3, [r7, #14]
}
 801591e:	4618      	mov	r0, r3
 8015920:	3710      	adds	r7, #16
 8015922:	46bd      	mov	sp, r7
 8015924:	bd80      	pop	{r7, pc}

08015926 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015926:	b580      	push	{r7, lr}
 8015928:	b084      	sub	sp, #16
 801592a:	af00      	add	r7, sp, #0
 801592c:	6078      	str	r0, [r7, #4]
 801592e:	460b      	mov	r3, r1
 8015930:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015932:	2300      	movs	r3, #0
 8015934:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015936:	2300      	movs	r3, #0
 8015938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015940:	78fa      	ldrb	r2, [r7, #3]
 8015942:	4611      	mov	r1, r2
 8015944:	4618      	mov	r0, r3
 8015946:	f7f0 fad8 	bl	8005efa <HAL_PCD_EP_Close>
 801594a:	4603      	mov	r3, r0
 801594c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801594e:	7bfb      	ldrb	r3, [r7, #15]
 8015950:	4618      	mov	r0, r3
 8015952:	f000 f90f 	bl	8015b74 <USBD_Get_USB_Status>
 8015956:	4603      	mov	r3, r0
 8015958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801595a:	7bbb      	ldrb	r3, [r7, #14]
}
 801595c:	4618      	mov	r0, r3
 801595e:	3710      	adds	r7, #16
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}

08015964 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b084      	sub	sp, #16
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
 801596c:	460b      	mov	r3, r1
 801596e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015970:	2300      	movs	r3, #0
 8015972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015974:	2300      	movs	r3, #0
 8015976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801597e:	78fa      	ldrb	r2, [r7, #3]
 8015980:	4611      	mov	r1, r2
 8015982:	4618      	mov	r0, r3
 8015984:	f7f0 fb99 	bl	80060ba <HAL_PCD_EP_SetStall>
 8015988:	4603      	mov	r3, r0
 801598a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801598c:	7bfb      	ldrb	r3, [r7, #15]
 801598e:	4618      	mov	r0, r3
 8015990:	f000 f8f0 	bl	8015b74 <USBD_Get_USB_Status>
 8015994:	4603      	mov	r3, r0
 8015996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015998:	7bbb      	ldrb	r3, [r7, #14]
}
 801599a:	4618      	mov	r0, r3
 801599c:	3710      	adds	r7, #16
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd80      	pop	{r7, pc}

080159a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159a2:	b580      	push	{r7, lr}
 80159a4:	b084      	sub	sp, #16
 80159a6:	af00      	add	r7, sp, #0
 80159a8:	6078      	str	r0, [r7, #4]
 80159aa:	460b      	mov	r3, r1
 80159ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159ae:	2300      	movs	r3, #0
 80159b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159b2:	2300      	movs	r3, #0
 80159b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80159bc:	78fa      	ldrb	r2, [r7, #3]
 80159be:	4611      	mov	r1, r2
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7f0 fbcc 	bl	800615e <HAL_PCD_EP_ClrStall>
 80159c6:	4603      	mov	r3, r0
 80159c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159ca:	7bfb      	ldrb	r3, [r7, #15]
 80159cc:	4618      	mov	r0, r3
 80159ce:	f000 f8d1 	bl	8015b74 <USBD_Get_USB_Status>
 80159d2:	4603      	mov	r3, r0
 80159d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80159d8:	4618      	mov	r0, r3
 80159da:	3710      	adds	r7, #16
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd80      	pop	{r7, pc}

080159e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159e0:	b480      	push	{r7}
 80159e2:	b085      	sub	sp, #20
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	6078      	str	r0, [r7, #4]
 80159e8:	460b      	mov	r3, r1
 80159ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80159f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80159f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	da0c      	bge.n	8015a16 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80159fc:	78fb      	ldrb	r3, [r7, #3]
 80159fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a02:	68f9      	ldr	r1, [r7, #12]
 8015a04:	1c5a      	adds	r2, r3, #1
 8015a06:	4613      	mov	r3, r2
 8015a08:	009b      	lsls	r3, r3, #2
 8015a0a:	4413      	add	r3, r2
 8015a0c:	00db      	lsls	r3, r3, #3
 8015a0e:	440b      	add	r3, r1
 8015a10:	3302      	adds	r3, #2
 8015a12:	781b      	ldrb	r3, [r3, #0]
 8015a14:	e00b      	b.n	8015a2e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015a16:	78fb      	ldrb	r3, [r7, #3]
 8015a18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a1c:	68f9      	ldr	r1, [r7, #12]
 8015a1e:	4613      	mov	r3, r2
 8015a20:	009b      	lsls	r3, r3, #2
 8015a22:	4413      	add	r3, r2
 8015a24:	00db      	lsls	r3, r3, #3
 8015a26:	440b      	add	r3, r1
 8015a28:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8015a2c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015a2e:	4618      	mov	r0, r3
 8015a30:	3714      	adds	r7, #20
 8015a32:	46bd      	mov	sp, r7
 8015a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a38:	4770      	bx	lr

08015a3a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015a3a:	b580      	push	{r7, lr}
 8015a3c:	b084      	sub	sp, #16
 8015a3e:	af00      	add	r7, sp, #0
 8015a40:	6078      	str	r0, [r7, #4]
 8015a42:	460b      	mov	r3, r1
 8015a44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a46:	2300      	movs	r3, #0
 8015a48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015a54:	78fa      	ldrb	r2, [r7, #3]
 8015a56:	4611      	mov	r1, r2
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f7f0 f9c3 	bl	8005de4 <HAL_PCD_SetAddress>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a62:	7bfb      	ldrb	r3, [r7, #15]
 8015a64:	4618      	mov	r0, r3
 8015a66:	f000 f885 	bl	8015b74 <USBD_Get_USB_Status>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3710      	adds	r7, #16
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}

08015a78 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b086      	sub	sp, #24
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	60f8      	str	r0, [r7, #12]
 8015a80:	607a      	str	r2, [r7, #4]
 8015a82:	461a      	mov	r2, r3
 8015a84:	460b      	mov	r3, r1
 8015a86:	72fb      	strb	r3, [r7, #11]
 8015a88:	4613      	mov	r3, r2
 8015a8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a90:	2300      	movs	r3, #0
 8015a92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015a9a:	893b      	ldrh	r3, [r7, #8]
 8015a9c:	7af9      	ldrb	r1, [r7, #11]
 8015a9e:	687a      	ldr	r2, [r7, #4]
 8015aa0:	f7f0 fac8 	bl	8006034 <HAL_PCD_EP_Transmit>
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015aa8:	7dfb      	ldrb	r3, [r7, #23]
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f000 f862 	bl	8015b74 <USBD_Get_USB_Status>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015ab4:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3718      	adds	r7, #24
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}

08015abe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015abe:	b580      	push	{r7, lr}
 8015ac0:	b086      	sub	sp, #24
 8015ac2:	af00      	add	r7, sp, #0
 8015ac4:	60f8      	str	r0, [r7, #12]
 8015ac6:	607a      	str	r2, [r7, #4]
 8015ac8:	461a      	mov	r2, r3
 8015aca:	460b      	mov	r3, r1
 8015acc:	72fb      	strb	r3, [r7, #11]
 8015ace:	4613      	mov	r3, r2
 8015ad0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015ae0:	893b      	ldrh	r3, [r7, #8]
 8015ae2:	7af9      	ldrb	r1, [r7, #11]
 8015ae4:	687a      	ldr	r2, [r7, #4]
 8015ae6:	f7f0 fa50 	bl	8005f8a <HAL_PCD_EP_Receive>
 8015aea:	4603      	mov	r3, r0
 8015aec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015aee:	7dfb      	ldrb	r3, [r7, #23]
 8015af0:	4618      	mov	r0, r3
 8015af2:	f000 f83f 	bl	8015b74 <USBD_Get_USB_Status>
 8015af6:	4603      	mov	r3, r0
 8015af8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015afa:	7dbb      	ldrb	r3, [r7, #22]
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3718      	adds	r7, #24
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}

08015b04 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b082      	sub	sp, #8
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
 8015b0c:	460b      	mov	r3, r1
 8015b0e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015b16:	78fa      	ldrb	r2, [r7, #3]
 8015b18:	4611      	mov	r1, r2
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7f0 fa72 	bl	8006004 <HAL_PCD_EP_GetRxCount>
 8015b20:	4603      	mov	r3, r0
}
 8015b22:	4618      	mov	r0, r3
 8015b24:	3708      	adds	r7, #8
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
	...

08015b2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015b2c:	b480      	push	{r7}
 8015b2e:	b083      	sub	sp, #12
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015b34:	4b03      	ldr	r3, [pc, #12]	; (8015b44 <USBD_static_malloc+0x18>)
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	370c      	adds	r7, #12
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b40:	4770      	bx	lr
 8015b42:	bf00      	nop
 8015b44:	200050d8 	.word	0x200050d8

08015b48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015b48:	b480      	push	{r7}
 8015b4a:	b083      	sub	sp, #12
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]

}
 8015b50:	bf00      	nop
 8015b52:	370c      	adds	r7, #12
 8015b54:	46bd      	mov	sp, r7
 8015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5a:	4770      	bx	lr

08015b5c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b5c:	b480      	push	{r7}
 8015b5e:	b083      	sub	sp, #12
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
 8015b64:	460b      	mov	r3, r1
 8015b66:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8015b68:	bf00      	nop
 8015b6a:	370c      	adds	r7, #12
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b72:	4770      	bx	lr

08015b74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015b74:	b480      	push	{r7}
 8015b76:	b085      	sub	sp, #20
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015b82:	79fb      	ldrb	r3, [r7, #7]
 8015b84:	2b03      	cmp	r3, #3
 8015b86:	d817      	bhi.n	8015bb8 <USBD_Get_USB_Status+0x44>
 8015b88:	a201      	add	r2, pc, #4	; (adr r2, 8015b90 <USBD_Get_USB_Status+0x1c>)
 8015b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b8e:	bf00      	nop
 8015b90:	08015ba1 	.word	0x08015ba1
 8015b94:	08015ba7 	.word	0x08015ba7
 8015b98:	08015bad 	.word	0x08015bad
 8015b9c:	08015bb3 	.word	0x08015bb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8015ba4:	e00b      	b.n	8015bbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015ba6:	2302      	movs	r3, #2
 8015ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8015baa:	e008      	b.n	8015bbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015bac:	2301      	movs	r3, #1
 8015bae:	73fb      	strb	r3, [r7, #15]
    break;
 8015bb0:	e005      	b.n	8015bbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015bb2:	2302      	movs	r3, #2
 8015bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8015bb6:	e002      	b.n	8015bbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015bb8:	2302      	movs	r3, #2
 8015bba:	73fb      	strb	r3, [r7, #15]
    break;
 8015bbc:	bf00      	nop
  }
  return usb_status;
 8015bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	3714      	adds	r7, #20
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bca:	4770      	bx	lr

08015bcc <__errno>:
 8015bcc:	4b01      	ldr	r3, [pc, #4]	; (8015bd4 <__errno+0x8>)
 8015bce:	6818      	ldr	r0, [r3, #0]
 8015bd0:	4770      	bx	lr
 8015bd2:	bf00      	nop
 8015bd4:	20000180 	.word	0x20000180

08015bd8 <__libc_init_array>:
 8015bd8:	b570      	push	{r4, r5, r6, lr}
 8015bda:	4d0d      	ldr	r5, [pc, #52]	; (8015c10 <__libc_init_array+0x38>)
 8015bdc:	4c0d      	ldr	r4, [pc, #52]	; (8015c14 <__libc_init_array+0x3c>)
 8015bde:	1b64      	subs	r4, r4, r5
 8015be0:	10a4      	asrs	r4, r4, #2
 8015be2:	2600      	movs	r6, #0
 8015be4:	42a6      	cmp	r6, r4
 8015be6:	d109      	bne.n	8015bfc <__libc_init_array+0x24>
 8015be8:	4d0b      	ldr	r5, [pc, #44]	; (8015c18 <__libc_init_array+0x40>)
 8015bea:	4c0c      	ldr	r4, [pc, #48]	; (8015c1c <__libc_init_array+0x44>)
 8015bec:	f000 fd2c 	bl	8016648 <_init>
 8015bf0:	1b64      	subs	r4, r4, r5
 8015bf2:	10a4      	asrs	r4, r4, #2
 8015bf4:	2600      	movs	r6, #0
 8015bf6:	42a6      	cmp	r6, r4
 8015bf8:	d105      	bne.n	8015c06 <__libc_init_array+0x2e>
 8015bfa:	bd70      	pop	{r4, r5, r6, pc}
 8015bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c00:	4798      	blx	r3
 8015c02:	3601      	adds	r6, #1
 8015c04:	e7ee      	b.n	8015be4 <__libc_init_array+0xc>
 8015c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c0a:	4798      	blx	r3
 8015c0c:	3601      	adds	r6, #1
 8015c0e:	e7f2      	b.n	8015bf6 <__libc_init_array+0x1e>
 8015c10:	08016de0 	.word	0x08016de0
 8015c14:	08016de0 	.word	0x08016de0
 8015c18:	08016de0 	.word	0x08016de0
 8015c1c:	08016de4 	.word	0x08016de4

08015c20 <memcpy>:
 8015c20:	440a      	add	r2, r1
 8015c22:	4291      	cmp	r1, r2
 8015c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8015c28:	d100      	bne.n	8015c2c <memcpy+0xc>
 8015c2a:	4770      	bx	lr
 8015c2c:	b510      	push	{r4, lr}
 8015c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015c36:	4291      	cmp	r1, r2
 8015c38:	d1f9      	bne.n	8015c2e <memcpy+0xe>
 8015c3a:	bd10      	pop	{r4, pc}

08015c3c <memset>:
 8015c3c:	4402      	add	r2, r0
 8015c3e:	4603      	mov	r3, r0
 8015c40:	4293      	cmp	r3, r2
 8015c42:	d100      	bne.n	8015c46 <memset+0xa>
 8015c44:	4770      	bx	lr
 8015c46:	f803 1b01 	strb.w	r1, [r3], #1
 8015c4a:	e7f9      	b.n	8015c40 <memset+0x4>

08015c4c <_puts_r>:
 8015c4c:	b570      	push	{r4, r5, r6, lr}
 8015c4e:	460e      	mov	r6, r1
 8015c50:	4605      	mov	r5, r0
 8015c52:	b118      	cbz	r0, 8015c5c <_puts_r+0x10>
 8015c54:	6983      	ldr	r3, [r0, #24]
 8015c56:	b90b      	cbnz	r3, 8015c5c <_puts_r+0x10>
 8015c58:	f000 fa48 	bl	80160ec <__sinit>
 8015c5c:	69ab      	ldr	r3, [r5, #24]
 8015c5e:	68ac      	ldr	r4, [r5, #8]
 8015c60:	b913      	cbnz	r3, 8015c68 <_puts_r+0x1c>
 8015c62:	4628      	mov	r0, r5
 8015c64:	f000 fa42 	bl	80160ec <__sinit>
 8015c68:	4b2c      	ldr	r3, [pc, #176]	; (8015d1c <_puts_r+0xd0>)
 8015c6a:	429c      	cmp	r4, r3
 8015c6c:	d120      	bne.n	8015cb0 <_puts_r+0x64>
 8015c6e:	686c      	ldr	r4, [r5, #4]
 8015c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c72:	07db      	lsls	r3, r3, #31
 8015c74:	d405      	bmi.n	8015c82 <_puts_r+0x36>
 8015c76:	89a3      	ldrh	r3, [r4, #12]
 8015c78:	0598      	lsls	r0, r3, #22
 8015c7a:	d402      	bmi.n	8015c82 <_puts_r+0x36>
 8015c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c7e:	f000 fad3 	bl	8016228 <__retarget_lock_acquire_recursive>
 8015c82:	89a3      	ldrh	r3, [r4, #12]
 8015c84:	0719      	lsls	r1, r3, #28
 8015c86:	d51d      	bpl.n	8015cc4 <_puts_r+0x78>
 8015c88:	6923      	ldr	r3, [r4, #16]
 8015c8a:	b1db      	cbz	r3, 8015cc4 <_puts_r+0x78>
 8015c8c:	3e01      	subs	r6, #1
 8015c8e:	68a3      	ldr	r3, [r4, #8]
 8015c90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015c94:	3b01      	subs	r3, #1
 8015c96:	60a3      	str	r3, [r4, #8]
 8015c98:	bb39      	cbnz	r1, 8015cea <_puts_r+0x9e>
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	da38      	bge.n	8015d10 <_puts_r+0xc4>
 8015c9e:	4622      	mov	r2, r4
 8015ca0:	210a      	movs	r1, #10
 8015ca2:	4628      	mov	r0, r5
 8015ca4:	f000 f848 	bl	8015d38 <__swbuf_r>
 8015ca8:	3001      	adds	r0, #1
 8015caa:	d011      	beq.n	8015cd0 <_puts_r+0x84>
 8015cac:	250a      	movs	r5, #10
 8015cae:	e011      	b.n	8015cd4 <_puts_r+0x88>
 8015cb0:	4b1b      	ldr	r3, [pc, #108]	; (8015d20 <_puts_r+0xd4>)
 8015cb2:	429c      	cmp	r4, r3
 8015cb4:	d101      	bne.n	8015cba <_puts_r+0x6e>
 8015cb6:	68ac      	ldr	r4, [r5, #8]
 8015cb8:	e7da      	b.n	8015c70 <_puts_r+0x24>
 8015cba:	4b1a      	ldr	r3, [pc, #104]	; (8015d24 <_puts_r+0xd8>)
 8015cbc:	429c      	cmp	r4, r3
 8015cbe:	bf08      	it	eq
 8015cc0:	68ec      	ldreq	r4, [r5, #12]
 8015cc2:	e7d5      	b.n	8015c70 <_puts_r+0x24>
 8015cc4:	4621      	mov	r1, r4
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	f000 f888 	bl	8015ddc <__swsetup_r>
 8015ccc:	2800      	cmp	r0, #0
 8015cce:	d0dd      	beq.n	8015c8c <_puts_r+0x40>
 8015cd0:	f04f 35ff 	mov.w	r5, #4294967295
 8015cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015cd6:	07da      	lsls	r2, r3, #31
 8015cd8:	d405      	bmi.n	8015ce6 <_puts_r+0x9a>
 8015cda:	89a3      	ldrh	r3, [r4, #12]
 8015cdc:	059b      	lsls	r3, r3, #22
 8015cde:	d402      	bmi.n	8015ce6 <_puts_r+0x9a>
 8015ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ce2:	f000 faa2 	bl	801622a <__retarget_lock_release_recursive>
 8015ce6:	4628      	mov	r0, r5
 8015ce8:	bd70      	pop	{r4, r5, r6, pc}
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	da04      	bge.n	8015cf8 <_puts_r+0xac>
 8015cee:	69a2      	ldr	r2, [r4, #24]
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	dc06      	bgt.n	8015d02 <_puts_r+0xb6>
 8015cf4:	290a      	cmp	r1, #10
 8015cf6:	d004      	beq.n	8015d02 <_puts_r+0xb6>
 8015cf8:	6823      	ldr	r3, [r4, #0]
 8015cfa:	1c5a      	adds	r2, r3, #1
 8015cfc:	6022      	str	r2, [r4, #0]
 8015cfe:	7019      	strb	r1, [r3, #0]
 8015d00:	e7c5      	b.n	8015c8e <_puts_r+0x42>
 8015d02:	4622      	mov	r2, r4
 8015d04:	4628      	mov	r0, r5
 8015d06:	f000 f817 	bl	8015d38 <__swbuf_r>
 8015d0a:	3001      	adds	r0, #1
 8015d0c:	d1bf      	bne.n	8015c8e <_puts_r+0x42>
 8015d0e:	e7df      	b.n	8015cd0 <_puts_r+0x84>
 8015d10:	6823      	ldr	r3, [r4, #0]
 8015d12:	250a      	movs	r5, #10
 8015d14:	1c5a      	adds	r2, r3, #1
 8015d16:	6022      	str	r2, [r4, #0]
 8015d18:	701d      	strb	r5, [r3, #0]
 8015d1a:	e7db      	b.n	8015cd4 <_puts_r+0x88>
 8015d1c:	08016da0 	.word	0x08016da0
 8015d20:	08016dc0 	.word	0x08016dc0
 8015d24:	08016d80 	.word	0x08016d80

08015d28 <puts>:
 8015d28:	4b02      	ldr	r3, [pc, #8]	; (8015d34 <puts+0xc>)
 8015d2a:	4601      	mov	r1, r0
 8015d2c:	6818      	ldr	r0, [r3, #0]
 8015d2e:	f7ff bf8d 	b.w	8015c4c <_puts_r>
 8015d32:	bf00      	nop
 8015d34:	20000180 	.word	0x20000180

08015d38 <__swbuf_r>:
 8015d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d3a:	460e      	mov	r6, r1
 8015d3c:	4614      	mov	r4, r2
 8015d3e:	4605      	mov	r5, r0
 8015d40:	b118      	cbz	r0, 8015d4a <__swbuf_r+0x12>
 8015d42:	6983      	ldr	r3, [r0, #24]
 8015d44:	b90b      	cbnz	r3, 8015d4a <__swbuf_r+0x12>
 8015d46:	f000 f9d1 	bl	80160ec <__sinit>
 8015d4a:	4b21      	ldr	r3, [pc, #132]	; (8015dd0 <__swbuf_r+0x98>)
 8015d4c:	429c      	cmp	r4, r3
 8015d4e:	d12b      	bne.n	8015da8 <__swbuf_r+0x70>
 8015d50:	686c      	ldr	r4, [r5, #4]
 8015d52:	69a3      	ldr	r3, [r4, #24]
 8015d54:	60a3      	str	r3, [r4, #8]
 8015d56:	89a3      	ldrh	r3, [r4, #12]
 8015d58:	071a      	lsls	r2, r3, #28
 8015d5a:	d52f      	bpl.n	8015dbc <__swbuf_r+0x84>
 8015d5c:	6923      	ldr	r3, [r4, #16]
 8015d5e:	b36b      	cbz	r3, 8015dbc <__swbuf_r+0x84>
 8015d60:	6923      	ldr	r3, [r4, #16]
 8015d62:	6820      	ldr	r0, [r4, #0]
 8015d64:	1ac0      	subs	r0, r0, r3
 8015d66:	6963      	ldr	r3, [r4, #20]
 8015d68:	b2f6      	uxtb	r6, r6
 8015d6a:	4283      	cmp	r3, r0
 8015d6c:	4637      	mov	r7, r6
 8015d6e:	dc04      	bgt.n	8015d7a <__swbuf_r+0x42>
 8015d70:	4621      	mov	r1, r4
 8015d72:	4628      	mov	r0, r5
 8015d74:	f000 f926 	bl	8015fc4 <_fflush_r>
 8015d78:	bb30      	cbnz	r0, 8015dc8 <__swbuf_r+0x90>
 8015d7a:	68a3      	ldr	r3, [r4, #8]
 8015d7c:	3b01      	subs	r3, #1
 8015d7e:	60a3      	str	r3, [r4, #8]
 8015d80:	6823      	ldr	r3, [r4, #0]
 8015d82:	1c5a      	adds	r2, r3, #1
 8015d84:	6022      	str	r2, [r4, #0]
 8015d86:	701e      	strb	r6, [r3, #0]
 8015d88:	6963      	ldr	r3, [r4, #20]
 8015d8a:	3001      	adds	r0, #1
 8015d8c:	4283      	cmp	r3, r0
 8015d8e:	d004      	beq.n	8015d9a <__swbuf_r+0x62>
 8015d90:	89a3      	ldrh	r3, [r4, #12]
 8015d92:	07db      	lsls	r3, r3, #31
 8015d94:	d506      	bpl.n	8015da4 <__swbuf_r+0x6c>
 8015d96:	2e0a      	cmp	r6, #10
 8015d98:	d104      	bne.n	8015da4 <__swbuf_r+0x6c>
 8015d9a:	4621      	mov	r1, r4
 8015d9c:	4628      	mov	r0, r5
 8015d9e:	f000 f911 	bl	8015fc4 <_fflush_r>
 8015da2:	b988      	cbnz	r0, 8015dc8 <__swbuf_r+0x90>
 8015da4:	4638      	mov	r0, r7
 8015da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015da8:	4b0a      	ldr	r3, [pc, #40]	; (8015dd4 <__swbuf_r+0x9c>)
 8015daa:	429c      	cmp	r4, r3
 8015dac:	d101      	bne.n	8015db2 <__swbuf_r+0x7a>
 8015dae:	68ac      	ldr	r4, [r5, #8]
 8015db0:	e7cf      	b.n	8015d52 <__swbuf_r+0x1a>
 8015db2:	4b09      	ldr	r3, [pc, #36]	; (8015dd8 <__swbuf_r+0xa0>)
 8015db4:	429c      	cmp	r4, r3
 8015db6:	bf08      	it	eq
 8015db8:	68ec      	ldreq	r4, [r5, #12]
 8015dba:	e7ca      	b.n	8015d52 <__swbuf_r+0x1a>
 8015dbc:	4621      	mov	r1, r4
 8015dbe:	4628      	mov	r0, r5
 8015dc0:	f000 f80c 	bl	8015ddc <__swsetup_r>
 8015dc4:	2800      	cmp	r0, #0
 8015dc6:	d0cb      	beq.n	8015d60 <__swbuf_r+0x28>
 8015dc8:	f04f 37ff 	mov.w	r7, #4294967295
 8015dcc:	e7ea      	b.n	8015da4 <__swbuf_r+0x6c>
 8015dce:	bf00      	nop
 8015dd0:	08016da0 	.word	0x08016da0
 8015dd4:	08016dc0 	.word	0x08016dc0
 8015dd8:	08016d80 	.word	0x08016d80

08015ddc <__swsetup_r>:
 8015ddc:	4b32      	ldr	r3, [pc, #200]	; (8015ea8 <__swsetup_r+0xcc>)
 8015dde:	b570      	push	{r4, r5, r6, lr}
 8015de0:	681d      	ldr	r5, [r3, #0]
 8015de2:	4606      	mov	r6, r0
 8015de4:	460c      	mov	r4, r1
 8015de6:	b125      	cbz	r5, 8015df2 <__swsetup_r+0x16>
 8015de8:	69ab      	ldr	r3, [r5, #24]
 8015dea:	b913      	cbnz	r3, 8015df2 <__swsetup_r+0x16>
 8015dec:	4628      	mov	r0, r5
 8015dee:	f000 f97d 	bl	80160ec <__sinit>
 8015df2:	4b2e      	ldr	r3, [pc, #184]	; (8015eac <__swsetup_r+0xd0>)
 8015df4:	429c      	cmp	r4, r3
 8015df6:	d10f      	bne.n	8015e18 <__swsetup_r+0x3c>
 8015df8:	686c      	ldr	r4, [r5, #4]
 8015dfa:	89a3      	ldrh	r3, [r4, #12]
 8015dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015e00:	0719      	lsls	r1, r3, #28
 8015e02:	d42c      	bmi.n	8015e5e <__swsetup_r+0x82>
 8015e04:	06dd      	lsls	r5, r3, #27
 8015e06:	d411      	bmi.n	8015e2c <__swsetup_r+0x50>
 8015e08:	2309      	movs	r3, #9
 8015e0a:	6033      	str	r3, [r6, #0]
 8015e0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015e10:	81a3      	strh	r3, [r4, #12]
 8015e12:	f04f 30ff 	mov.w	r0, #4294967295
 8015e16:	e03e      	b.n	8015e96 <__swsetup_r+0xba>
 8015e18:	4b25      	ldr	r3, [pc, #148]	; (8015eb0 <__swsetup_r+0xd4>)
 8015e1a:	429c      	cmp	r4, r3
 8015e1c:	d101      	bne.n	8015e22 <__swsetup_r+0x46>
 8015e1e:	68ac      	ldr	r4, [r5, #8]
 8015e20:	e7eb      	b.n	8015dfa <__swsetup_r+0x1e>
 8015e22:	4b24      	ldr	r3, [pc, #144]	; (8015eb4 <__swsetup_r+0xd8>)
 8015e24:	429c      	cmp	r4, r3
 8015e26:	bf08      	it	eq
 8015e28:	68ec      	ldreq	r4, [r5, #12]
 8015e2a:	e7e6      	b.n	8015dfa <__swsetup_r+0x1e>
 8015e2c:	0758      	lsls	r0, r3, #29
 8015e2e:	d512      	bpl.n	8015e56 <__swsetup_r+0x7a>
 8015e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e32:	b141      	cbz	r1, 8015e46 <__swsetup_r+0x6a>
 8015e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e38:	4299      	cmp	r1, r3
 8015e3a:	d002      	beq.n	8015e42 <__swsetup_r+0x66>
 8015e3c:	4630      	mov	r0, r6
 8015e3e:	f000 fa5b 	bl	80162f8 <_free_r>
 8015e42:	2300      	movs	r3, #0
 8015e44:	6363      	str	r3, [r4, #52]	; 0x34
 8015e46:	89a3      	ldrh	r3, [r4, #12]
 8015e48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015e4c:	81a3      	strh	r3, [r4, #12]
 8015e4e:	2300      	movs	r3, #0
 8015e50:	6063      	str	r3, [r4, #4]
 8015e52:	6923      	ldr	r3, [r4, #16]
 8015e54:	6023      	str	r3, [r4, #0]
 8015e56:	89a3      	ldrh	r3, [r4, #12]
 8015e58:	f043 0308 	orr.w	r3, r3, #8
 8015e5c:	81a3      	strh	r3, [r4, #12]
 8015e5e:	6923      	ldr	r3, [r4, #16]
 8015e60:	b94b      	cbnz	r3, 8015e76 <__swsetup_r+0x9a>
 8015e62:	89a3      	ldrh	r3, [r4, #12]
 8015e64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015e6c:	d003      	beq.n	8015e76 <__swsetup_r+0x9a>
 8015e6e:	4621      	mov	r1, r4
 8015e70:	4630      	mov	r0, r6
 8015e72:	f000 fa01 	bl	8016278 <__smakebuf_r>
 8015e76:	89a0      	ldrh	r0, [r4, #12]
 8015e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015e7c:	f010 0301 	ands.w	r3, r0, #1
 8015e80:	d00a      	beq.n	8015e98 <__swsetup_r+0xbc>
 8015e82:	2300      	movs	r3, #0
 8015e84:	60a3      	str	r3, [r4, #8]
 8015e86:	6963      	ldr	r3, [r4, #20]
 8015e88:	425b      	negs	r3, r3
 8015e8a:	61a3      	str	r3, [r4, #24]
 8015e8c:	6923      	ldr	r3, [r4, #16]
 8015e8e:	b943      	cbnz	r3, 8015ea2 <__swsetup_r+0xc6>
 8015e90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015e94:	d1ba      	bne.n	8015e0c <__swsetup_r+0x30>
 8015e96:	bd70      	pop	{r4, r5, r6, pc}
 8015e98:	0781      	lsls	r1, r0, #30
 8015e9a:	bf58      	it	pl
 8015e9c:	6963      	ldrpl	r3, [r4, #20]
 8015e9e:	60a3      	str	r3, [r4, #8]
 8015ea0:	e7f4      	b.n	8015e8c <__swsetup_r+0xb0>
 8015ea2:	2000      	movs	r0, #0
 8015ea4:	e7f7      	b.n	8015e96 <__swsetup_r+0xba>
 8015ea6:	bf00      	nop
 8015ea8:	20000180 	.word	0x20000180
 8015eac:	08016da0 	.word	0x08016da0
 8015eb0:	08016dc0 	.word	0x08016dc0
 8015eb4:	08016d80 	.word	0x08016d80

08015eb8 <__sflush_r>:
 8015eb8:	898a      	ldrh	r2, [r1, #12]
 8015eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ebe:	4605      	mov	r5, r0
 8015ec0:	0710      	lsls	r0, r2, #28
 8015ec2:	460c      	mov	r4, r1
 8015ec4:	d458      	bmi.n	8015f78 <__sflush_r+0xc0>
 8015ec6:	684b      	ldr	r3, [r1, #4]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	dc05      	bgt.n	8015ed8 <__sflush_r+0x20>
 8015ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	dc02      	bgt.n	8015ed8 <__sflush_r+0x20>
 8015ed2:	2000      	movs	r0, #0
 8015ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015eda:	2e00      	cmp	r6, #0
 8015edc:	d0f9      	beq.n	8015ed2 <__sflush_r+0x1a>
 8015ede:	2300      	movs	r3, #0
 8015ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015ee4:	682f      	ldr	r7, [r5, #0]
 8015ee6:	602b      	str	r3, [r5, #0]
 8015ee8:	d032      	beq.n	8015f50 <__sflush_r+0x98>
 8015eea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015eec:	89a3      	ldrh	r3, [r4, #12]
 8015eee:	075a      	lsls	r2, r3, #29
 8015ef0:	d505      	bpl.n	8015efe <__sflush_r+0x46>
 8015ef2:	6863      	ldr	r3, [r4, #4]
 8015ef4:	1ac0      	subs	r0, r0, r3
 8015ef6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015ef8:	b10b      	cbz	r3, 8015efe <__sflush_r+0x46>
 8015efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015efc:	1ac0      	subs	r0, r0, r3
 8015efe:	2300      	movs	r3, #0
 8015f00:	4602      	mov	r2, r0
 8015f02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f04:	6a21      	ldr	r1, [r4, #32]
 8015f06:	4628      	mov	r0, r5
 8015f08:	47b0      	blx	r6
 8015f0a:	1c43      	adds	r3, r0, #1
 8015f0c:	89a3      	ldrh	r3, [r4, #12]
 8015f0e:	d106      	bne.n	8015f1e <__sflush_r+0x66>
 8015f10:	6829      	ldr	r1, [r5, #0]
 8015f12:	291d      	cmp	r1, #29
 8015f14:	d82c      	bhi.n	8015f70 <__sflush_r+0xb8>
 8015f16:	4a2a      	ldr	r2, [pc, #168]	; (8015fc0 <__sflush_r+0x108>)
 8015f18:	40ca      	lsrs	r2, r1
 8015f1a:	07d6      	lsls	r6, r2, #31
 8015f1c:	d528      	bpl.n	8015f70 <__sflush_r+0xb8>
 8015f1e:	2200      	movs	r2, #0
 8015f20:	6062      	str	r2, [r4, #4]
 8015f22:	04d9      	lsls	r1, r3, #19
 8015f24:	6922      	ldr	r2, [r4, #16]
 8015f26:	6022      	str	r2, [r4, #0]
 8015f28:	d504      	bpl.n	8015f34 <__sflush_r+0x7c>
 8015f2a:	1c42      	adds	r2, r0, #1
 8015f2c:	d101      	bne.n	8015f32 <__sflush_r+0x7a>
 8015f2e:	682b      	ldr	r3, [r5, #0]
 8015f30:	b903      	cbnz	r3, 8015f34 <__sflush_r+0x7c>
 8015f32:	6560      	str	r0, [r4, #84]	; 0x54
 8015f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f36:	602f      	str	r7, [r5, #0]
 8015f38:	2900      	cmp	r1, #0
 8015f3a:	d0ca      	beq.n	8015ed2 <__sflush_r+0x1a>
 8015f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f40:	4299      	cmp	r1, r3
 8015f42:	d002      	beq.n	8015f4a <__sflush_r+0x92>
 8015f44:	4628      	mov	r0, r5
 8015f46:	f000 f9d7 	bl	80162f8 <_free_r>
 8015f4a:	2000      	movs	r0, #0
 8015f4c:	6360      	str	r0, [r4, #52]	; 0x34
 8015f4e:	e7c1      	b.n	8015ed4 <__sflush_r+0x1c>
 8015f50:	6a21      	ldr	r1, [r4, #32]
 8015f52:	2301      	movs	r3, #1
 8015f54:	4628      	mov	r0, r5
 8015f56:	47b0      	blx	r6
 8015f58:	1c41      	adds	r1, r0, #1
 8015f5a:	d1c7      	bne.n	8015eec <__sflush_r+0x34>
 8015f5c:	682b      	ldr	r3, [r5, #0]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d0c4      	beq.n	8015eec <__sflush_r+0x34>
 8015f62:	2b1d      	cmp	r3, #29
 8015f64:	d001      	beq.n	8015f6a <__sflush_r+0xb2>
 8015f66:	2b16      	cmp	r3, #22
 8015f68:	d101      	bne.n	8015f6e <__sflush_r+0xb6>
 8015f6a:	602f      	str	r7, [r5, #0]
 8015f6c:	e7b1      	b.n	8015ed2 <__sflush_r+0x1a>
 8015f6e:	89a3      	ldrh	r3, [r4, #12]
 8015f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f74:	81a3      	strh	r3, [r4, #12]
 8015f76:	e7ad      	b.n	8015ed4 <__sflush_r+0x1c>
 8015f78:	690f      	ldr	r7, [r1, #16]
 8015f7a:	2f00      	cmp	r7, #0
 8015f7c:	d0a9      	beq.n	8015ed2 <__sflush_r+0x1a>
 8015f7e:	0793      	lsls	r3, r2, #30
 8015f80:	680e      	ldr	r6, [r1, #0]
 8015f82:	bf08      	it	eq
 8015f84:	694b      	ldreq	r3, [r1, #20]
 8015f86:	600f      	str	r7, [r1, #0]
 8015f88:	bf18      	it	ne
 8015f8a:	2300      	movne	r3, #0
 8015f8c:	eba6 0807 	sub.w	r8, r6, r7
 8015f90:	608b      	str	r3, [r1, #8]
 8015f92:	f1b8 0f00 	cmp.w	r8, #0
 8015f96:	dd9c      	ble.n	8015ed2 <__sflush_r+0x1a>
 8015f98:	6a21      	ldr	r1, [r4, #32]
 8015f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015f9c:	4643      	mov	r3, r8
 8015f9e:	463a      	mov	r2, r7
 8015fa0:	4628      	mov	r0, r5
 8015fa2:	47b0      	blx	r6
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	dc06      	bgt.n	8015fb6 <__sflush_r+0xfe>
 8015fa8:	89a3      	ldrh	r3, [r4, #12]
 8015faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fae:	81a3      	strh	r3, [r4, #12]
 8015fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8015fb4:	e78e      	b.n	8015ed4 <__sflush_r+0x1c>
 8015fb6:	4407      	add	r7, r0
 8015fb8:	eba8 0800 	sub.w	r8, r8, r0
 8015fbc:	e7e9      	b.n	8015f92 <__sflush_r+0xda>
 8015fbe:	bf00      	nop
 8015fc0:	20400001 	.word	0x20400001

08015fc4 <_fflush_r>:
 8015fc4:	b538      	push	{r3, r4, r5, lr}
 8015fc6:	690b      	ldr	r3, [r1, #16]
 8015fc8:	4605      	mov	r5, r0
 8015fca:	460c      	mov	r4, r1
 8015fcc:	b913      	cbnz	r3, 8015fd4 <_fflush_r+0x10>
 8015fce:	2500      	movs	r5, #0
 8015fd0:	4628      	mov	r0, r5
 8015fd2:	bd38      	pop	{r3, r4, r5, pc}
 8015fd4:	b118      	cbz	r0, 8015fde <_fflush_r+0x1a>
 8015fd6:	6983      	ldr	r3, [r0, #24]
 8015fd8:	b90b      	cbnz	r3, 8015fde <_fflush_r+0x1a>
 8015fda:	f000 f887 	bl	80160ec <__sinit>
 8015fde:	4b14      	ldr	r3, [pc, #80]	; (8016030 <_fflush_r+0x6c>)
 8015fe0:	429c      	cmp	r4, r3
 8015fe2:	d11b      	bne.n	801601c <_fflush_r+0x58>
 8015fe4:	686c      	ldr	r4, [r5, #4]
 8015fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d0ef      	beq.n	8015fce <_fflush_r+0xa>
 8015fee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015ff0:	07d0      	lsls	r0, r2, #31
 8015ff2:	d404      	bmi.n	8015ffe <_fflush_r+0x3a>
 8015ff4:	0599      	lsls	r1, r3, #22
 8015ff6:	d402      	bmi.n	8015ffe <_fflush_r+0x3a>
 8015ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ffa:	f000 f915 	bl	8016228 <__retarget_lock_acquire_recursive>
 8015ffe:	4628      	mov	r0, r5
 8016000:	4621      	mov	r1, r4
 8016002:	f7ff ff59 	bl	8015eb8 <__sflush_r>
 8016006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016008:	07da      	lsls	r2, r3, #31
 801600a:	4605      	mov	r5, r0
 801600c:	d4e0      	bmi.n	8015fd0 <_fflush_r+0xc>
 801600e:	89a3      	ldrh	r3, [r4, #12]
 8016010:	059b      	lsls	r3, r3, #22
 8016012:	d4dd      	bmi.n	8015fd0 <_fflush_r+0xc>
 8016014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016016:	f000 f908 	bl	801622a <__retarget_lock_release_recursive>
 801601a:	e7d9      	b.n	8015fd0 <_fflush_r+0xc>
 801601c:	4b05      	ldr	r3, [pc, #20]	; (8016034 <_fflush_r+0x70>)
 801601e:	429c      	cmp	r4, r3
 8016020:	d101      	bne.n	8016026 <_fflush_r+0x62>
 8016022:	68ac      	ldr	r4, [r5, #8]
 8016024:	e7df      	b.n	8015fe6 <_fflush_r+0x22>
 8016026:	4b04      	ldr	r3, [pc, #16]	; (8016038 <_fflush_r+0x74>)
 8016028:	429c      	cmp	r4, r3
 801602a:	bf08      	it	eq
 801602c:	68ec      	ldreq	r4, [r5, #12]
 801602e:	e7da      	b.n	8015fe6 <_fflush_r+0x22>
 8016030:	08016da0 	.word	0x08016da0
 8016034:	08016dc0 	.word	0x08016dc0
 8016038:	08016d80 	.word	0x08016d80

0801603c <std>:
 801603c:	2300      	movs	r3, #0
 801603e:	b510      	push	{r4, lr}
 8016040:	4604      	mov	r4, r0
 8016042:	e9c0 3300 	strd	r3, r3, [r0]
 8016046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801604a:	6083      	str	r3, [r0, #8]
 801604c:	8181      	strh	r1, [r0, #12]
 801604e:	6643      	str	r3, [r0, #100]	; 0x64
 8016050:	81c2      	strh	r2, [r0, #14]
 8016052:	6183      	str	r3, [r0, #24]
 8016054:	4619      	mov	r1, r3
 8016056:	2208      	movs	r2, #8
 8016058:	305c      	adds	r0, #92	; 0x5c
 801605a:	f7ff fdef 	bl	8015c3c <memset>
 801605e:	4b05      	ldr	r3, [pc, #20]	; (8016074 <std+0x38>)
 8016060:	6263      	str	r3, [r4, #36]	; 0x24
 8016062:	4b05      	ldr	r3, [pc, #20]	; (8016078 <std+0x3c>)
 8016064:	62a3      	str	r3, [r4, #40]	; 0x28
 8016066:	4b05      	ldr	r3, [pc, #20]	; (801607c <std+0x40>)
 8016068:	62e3      	str	r3, [r4, #44]	; 0x2c
 801606a:	4b05      	ldr	r3, [pc, #20]	; (8016080 <std+0x44>)
 801606c:	6224      	str	r4, [r4, #32]
 801606e:	6323      	str	r3, [r4, #48]	; 0x30
 8016070:	bd10      	pop	{r4, pc}
 8016072:	bf00      	nop
 8016074:	080164d9 	.word	0x080164d9
 8016078:	080164fb 	.word	0x080164fb
 801607c:	08016533 	.word	0x08016533
 8016080:	08016557 	.word	0x08016557

08016084 <_cleanup_r>:
 8016084:	4901      	ldr	r1, [pc, #4]	; (801608c <_cleanup_r+0x8>)
 8016086:	f000 b8af 	b.w	80161e8 <_fwalk_reent>
 801608a:	bf00      	nop
 801608c:	08015fc5 	.word	0x08015fc5

08016090 <__sfmoreglue>:
 8016090:	b570      	push	{r4, r5, r6, lr}
 8016092:	2268      	movs	r2, #104	; 0x68
 8016094:	1e4d      	subs	r5, r1, #1
 8016096:	4355      	muls	r5, r2
 8016098:	460e      	mov	r6, r1
 801609a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801609e:	f000 f997 	bl	80163d0 <_malloc_r>
 80160a2:	4604      	mov	r4, r0
 80160a4:	b140      	cbz	r0, 80160b8 <__sfmoreglue+0x28>
 80160a6:	2100      	movs	r1, #0
 80160a8:	e9c0 1600 	strd	r1, r6, [r0]
 80160ac:	300c      	adds	r0, #12
 80160ae:	60a0      	str	r0, [r4, #8]
 80160b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80160b4:	f7ff fdc2 	bl	8015c3c <memset>
 80160b8:	4620      	mov	r0, r4
 80160ba:	bd70      	pop	{r4, r5, r6, pc}

080160bc <__sfp_lock_acquire>:
 80160bc:	4801      	ldr	r0, [pc, #4]	; (80160c4 <__sfp_lock_acquire+0x8>)
 80160be:	f000 b8b3 	b.w	8016228 <__retarget_lock_acquire_recursive>
 80160c2:	bf00      	nop
 80160c4:	200052f9 	.word	0x200052f9

080160c8 <__sfp_lock_release>:
 80160c8:	4801      	ldr	r0, [pc, #4]	; (80160d0 <__sfp_lock_release+0x8>)
 80160ca:	f000 b8ae 	b.w	801622a <__retarget_lock_release_recursive>
 80160ce:	bf00      	nop
 80160d0:	200052f9 	.word	0x200052f9

080160d4 <__sinit_lock_acquire>:
 80160d4:	4801      	ldr	r0, [pc, #4]	; (80160dc <__sinit_lock_acquire+0x8>)
 80160d6:	f000 b8a7 	b.w	8016228 <__retarget_lock_acquire_recursive>
 80160da:	bf00      	nop
 80160dc:	200052fa 	.word	0x200052fa

080160e0 <__sinit_lock_release>:
 80160e0:	4801      	ldr	r0, [pc, #4]	; (80160e8 <__sinit_lock_release+0x8>)
 80160e2:	f000 b8a2 	b.w	801622a <__retarget_lock_release_recursive>
 80160e6:	bf00      	nop
 80160e8:	200052fa 	.word	0x200052fa

080160ec <__sinit>:
 80160ec:	b510      	push	{r4, lr}
 80160ee:	4604      	mov	r4, r0
 80160f0:	f7ff fff0 	bl	80160d4 <__sinit_lock_acquire>
 80160f4:	69a3      	ldr	r3, [r4, #24]
 80160f6:	b11b      	cbz	r3, 8016100 <__sinit+0x14>
 80160f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160fc:	f7ff bff0 	b.w	80160e0 <__sinit_lock_release>
 8016100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016104:	6523      	str	r3, [r4, #80]	; 0x50
 8016106:	4b13      	ldr	r3, [pc, #76]	; (8016154 <__sinit+0x68>)
 8016108:	4a13      	ldr	r2, [pc, #76]	; (8016158 <__sinit+0x6c>)
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	62a2      	str	r2, [r4, #40]	; 0x28
 801610e:	42a3      	cmp	r3, r4
 8016110:	bf04      	itt	eq
 8016112:	2301      	moveq	r3, #1
 8016114:	61a3      	streq	r3, [r4, #24]
 8016116:	4620      	mov	r0, r4
 8016118:	f000 f820 	bl	801615c <__sfp>
 801611c:	6060      	str	r0, [r4, #4]
 801611e:	4620      	mov	r0, r4
 8016120:	f000 f81c 	bl	801615c <__sfp>
 8016124:	60a0      	str	r0, [r4, #8]
 8016126:	4620      	mov	r0, r4
 8016128:	f000 f818 	bl	801615c <__sfp>
 801612c:	2200      	movs	r2, #0
 801612e:	60e0      	str	r0, [r4, #12]
 8016130:	2104      	movs	r1, #4
 8016132:	6860      	ldr	r0, [r4, #4]
 8016134:	f7ff ff82 	bl	801603c <std>
 8016138:	68a0      	ldr	r0, [r4, #8]
 801613a:	2201      	movs	r2, #1
 801613c:	2109      	movs	r1, #9
 801613e:	f7ff ff7d 	bl	801603c <std>
 8016142:	68e0      	ldr	r0, [r4, #12]
 8016144:	2202      	movs	r2, #2
 8016146:	2112      	movs	r1, #18
 8016148:	f7ff ff78 	bl	801603c <std>
 801614c:	2301      	movs	r3, #1
 801614e:	61a3      	str	r3, [r4, #24]
 8016150:	e7d2      	b.n	80160f8 <__sinit+0xc>
 8016152:	bf00      	nop
 8016154:	08016d7c 	.word	0x08016d7c
 8016158:	08016085 	.word	0x08016085

0801615c <__sfp>:
 801615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801615e:	4607      	mov	r7, r0
 8016160:	f7ff ffac 	bl	80160bc <__sfp_lock_acquire>
 8016164:	4b1e      	ldr	r3, [pc, #120]	; (80161e0 <__sfp+0x84>)
 8016166:	681e      	ldr	r6, [r3, #0]
 8016168:	69b3      	ldr	r3, [r6, #24]
 801616a:	b913      	cbnz	r3, 8016172 <__sfp+0x16>
 801616c:	4630      	mov	r0, r6
 801616e:	f7ff ffbd 	bl	80160ec <__sinit>
 8016172:	3648      	adds	r6, #72	; 0x48
 8016174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016178:	3b01      	subs	r3, #1
 801617a:	d503      	bpl.n	8016184 <__sfp+0x28>
 801617c:	6833      	ldr	r3, [r6, #0]
 801617e:	b30b      	cbz	r3, 80161c4 <__sfp+0x68>
 8016180:	6836      	ldr	r6, [r6, #0]
 8016182:	e7f7      	b.n	8016174 <__sfp+0x18>
 8016184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016188:	b9d5      	cbnz	r5, 80161c0 <__sfp+0x64>
 801618a:	4b16      	ldr	r3, [pc, #88]	; (80161e4 <__sfp+0x88>)
 801618c:	60e3      	str	r3, [r4, #12]
 801618e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016192:	6665      	str	r5, [r4, #100]	; 0x64
 8016194:	f000 f847 	bl	8016226 <__retarget_lock_init_recursive>
 8016198:	f7ff ff96 	bl	80160c8 <__sfp_lock_release>
 801619c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80161a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80161a4:	6025      	str	r5, [r4, #0]
 80161a6:	61a5      	str	r5, [r4, #24]
 80161a8:	2208      	movs	r2, #8
 80161aa:	4629      	mov	r1, r5
 80161ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80161b0:	f7ff fd44 	bl	8015c3c <memset>
 80161b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80161b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80161bc:	4620      	mov	r0, r4
 80161be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161c0:	3468      	adds	r4, #104	; 0x68
 80161c2:	e7d9      	b.n	8016178 <__sfp+0x1c>
 80161c4:	2104      	movs	r1, #4
 80161c6:	4638      	mov	r0, r7
 80161c8:	f7ff ff62 	bl	8016090 <__sfmoreglue>
 80161cc:	4604      	mov	r4, r0
 80161ce:	6030      	str	r0, [r6, #0]
 80161d0:	2800      	cmp	r0, #0
 80161d2:	d1d5      	bne.n	8016180 <__sfp+0x24>
 80161d4:	f7ff ff78 	bl	80160c8 <__sfp_lock_release>
 80161d8:	230c      	movs	r3, #12
 80161da:	603b      	str	r3, [r7, #0]
 80161dc:	e7ee      	b.n	80161bc <__sfp+0x60>
 80161de:	bf00      	nop
 80161e0:	08016d7c 	.word	0x08016d7c
 80161e4:	ffff0001 	.word	0xffff0001

080161e8 <_fwalk_reent>:
 80161e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161ec:	4606      	mov	r6, r0
 80161ee:	4688      	mov	r8, r1
 80161f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80161f4:	2700      	movs	r7, #0
 80161f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80161fa:	f1b9 0901 	subs.w	r9, r9, #1
 80161fe:	d505      	bpl.n	801620c <_fwalk_reent+0x24>
 8016200:	6824      	ldr	r4, [r4, #0]
 8016202:	2c00      	cmp	r4, #0
 8016204:	d1f7      	bne.n	80161f6 <_fwalk_reent+0xe>
 8016206:	4638      	mov	r0, r7
 8016208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801620c:	89ab      	ldrh	r3, [r5, #12]
 801620e:	2b01      	cmp	r3, #1
 8016210:	d907      	bls.n	8016222 <_fwalk_reent+0x3a>
 8016212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016216:	3301      	adds	r3, #1
 8016218:	d003      	beq.n	8016222 <_fwalk_reent+0x3a>
 801621a:	4629      	mov	r1, r5
 801621c:	4630      	mov	r0, r6
 801621e:	47c0      	blx	r8
 8016220:	4307      	orrs	r7, r0
 8016222:	3568      	adds	r5, #104	; 0x68
 8016224:	e7e9      	b.n	80161fa <_fwalk_reent+0x12>

08016226 <__retarget_lock_init_recursive>:
 8016226:	4770      	bx	lr

08016228 <__retarget_lock_acquire_recursive>:
 8016228:	4770      	bx	lr

0801622a <__retarget_lock_release_recursive>:
 801622a:	4770      	bx	lr

0801622c <__swhatbuf_r>:
 801622c:	b570      	push	{r4, r5, r6, lr}
 801622e:	460e      	mov	r6, r1
 8016230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016234:	2900      	cmp	r1, #0
 8016236:	b096      	sub	sp, #88	; 0x58
 8016238:	4614      	mov	r4, r2
 801623a:	461d      	mov	r5, r3
 801623c:	da08      	bge.n	8016250 <__swhatbuf_r+0x24>
 801623e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016242:	2200      	movs	r2, #0
 8016244:	602a      	str	r2, [r5, #0]
 8016246:	061a      	lsls	r2, r3, #24
 8016248:	d410      	bmi.n	801626c <__swhatbuf_r+0x40>
 801624a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801624e:	e00e      	b.n	801626e <__swhatbuf_r+0x42>
 8016250:	466a      	mov	r2, sp
 8016252:	f000 f9a7 	bl	80165a4 <_fstat_r>
 8016256:	2800      	cmp	r0, #0
 8016258:	dbf1      	blt.n	801623e <__swhatbuf_r+0x12>
 801625a:	9a01      	ldr	r2, [sp, #4]
 801625c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016260:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016264:	425a      	negs	r2, r3
 8016266:	415a      	adcs	r2, r3
 8016268:	602a      	str	r2, [r5, #0]
 801626a:	e7ee      	b.n	801624a <__swhatbuf_r+0x1e>
 801626c:	2340      	movs	r3, #64	; 0x40
 801626e:	2000      	movs	r0, #0
 8016270:	6023      	str	r3, [r4, #0]
 8016272:	b016      	add	sp, #88	; 0x58
 8016274:	bd70      	pop	{r4, r5, r6, pc}
	...

08016278 <__smakebuf_r>:
 8016278:	898b      	ldrh	r3, [r1, #12]
 801627a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801627c:	079d      	lsls	r5, r3, #30
 801627e:	4606      	mov	r6, r0
 8016280:	460c      	mov	r4, r1
 8016282:	d507      	bpl.n	8016294 <__smakebuf_r+0x1c>
 8016284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016288:	6023      	str	r3, [r4, #0]
 801628a:	6123      	str	r3, [r4, #16]
 801628c:	2301      	movs	r3, #1
 801628e:	6163      	str	r3, [r4, #20]
 8016290:	b002      	add	sp, #8
 8016292:	bd70      	pop	{r4, r5, r6, pc}
 8016294:	ab01      	add	r3, sp, #4
 8016296:	466a      	mov	r2, sp
 8016298:	f7ff ffc8 	bl	801622c <__swhatbuf_r>
 801629c:	9900      	ldr	r1, [sp, #0]
 801629e:	4605      	mov	r5, r0
 80162a0:	4630      	mov	r0, r6
 80162a2:	f000 f895 	bl	80163d0 <_malloc_r>
 80162a6:	b948      	cbnz	r0, 80162bc <__smakebuf_r+0x44>
 80162a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162ac:	059a      	lsls	r2, r3, #22
 80162ae:	d4ef      	bmi.n	8016290 <__smakebuf_r+0x18>
 80162b0:	f023 0303 	bic.w	r3, r3, #3
 80162b4:	f043 0302 	orr.w	r3, r3, #2
 80162b8:	81a3      	strh	r3, [r4, #12]
 80162ba:	e7e3      	b.n	8016284 <__smakebuf_r+0xc>
 80162bc:	4b0d      	ldr	r3, [pc, #52]	; (80162f4 <__smakebuf_r+0x7c>)
 80162be:	62b3      	str	r3, [r6, #40]	; 0x28
 80162c0:	89a3      	ldrh	r3, [r4, #12]
 80162c2:	6020      	str	r0, [r4, #0]
 80162c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80162c8:	81a3      	strh	r3, [r4, #12]
 80162ca:	9b00      	ldr	r3, [sp, #0]
 80162cc:	6163      	str	r3, [r4, #20]
 80162ce:	9b01      	ldr	r3, [sp, #4]
 80162d0:	6120      	str	r0, [r4, #16]
 80162d2:	b15b      	cbz	r3, 80162ec <__smakebuf_r+0x74>
 80162d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80162d8:	4630      	mov	r0, r6
 80162da:	f000 f975 	bl	80165c8 <_isatty_r>
 80162de:	b128      	cbz	r0, 80162ec <__smakebuf_r+0x74>
 80162e0:	89a3      	ldrh	r3, [r4, #12]
 80162e2:	f023 0303 	bic.w	r3, r3, #3
 80162e6:	f043 0301 	orr.w	r3, r3, #1
 80162ea:	81a3      	strh	r3, [r4, #12]
 80162ec:	89a0      	ldrh	r0, [r4, #12]
 80162ee:	4305      	orrs	r5, r0
 80162f0:	81a5      	strh	r5, [r4, #12]
 80162f2:	e7cd      	b.n	8016290 <__smakebuf_r+0x18>
 80162f4:	08016085 	.word	0x08016085

080162f8 <_free_r>:
 80162f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80162fa:	2900      	cmp	r1, #0
 80162fc:	d044      	beq.n	8016388 <_free_r+0x90>
 80162fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016302:	9001      	str	r0, [sp, #4]
 8016304:	2b00      	cmp	r3, #0
 8016306:	f1a1 0404 	sub.w	r4, r1, #4
 801630a:	bfb8      	it	lt
 801630c:	18e4      	addlt	r4, r4, r3
 801630e:	f000 f97d 	bl	801660c <__malloc_lock>
 8016312:	4a1e      	ldr	r2, [pc, #120]	; (801638c <_free_r+0x94>)
 8016314:	9801      	ldr	r0, [sp, #4]
 8016316:	6813      	ldr	r3, [r2, #0]
 8016318:	b933      	cbnz	r3, 8016328 <_free_r+0x30>
 801631a:	6063      	str	r3, [r4, #4]
 801631c:	6014      	str	r4, [r2, #0]
 801631e:	b003      	add	sp, #12
 8016320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016324:	f000 b978 	b.w	8016618 <__malloc_unlock>
 8016328:	42a3      	cmp	r3, r4
 801632a:	d908      	bls.n	801633e <_free_r+0x46>
 801632c:	6825      	ldr	r5, [r4, #0]
 801632e:	1961      	adds	r1, r4, r5
 8016330:	428b      	cmp	r3, r1
 8016332:	bf01      	itttt	eq
 8016334:	6819      	ldreq	r1, [r3, #0]
 8016336:	685b      	ldreq	r3, [r3, #4]
 8016338:	1949      	addeq	r1, r1, r5
 801633a:	6021      	streq	r1, [r4, #0]
 801633c:	e7ed      	b.n	801631a <_free_r+0x22>
 801633e:	461a      	mov	r2, r3
 8016340:	685b      	ldr	r3, [r3, #4]
 8016342:	b10b      	cbz	r3, 8016348 <_free_r+0x50>
 8016344:	42a3      	cmp	r3, r4
 8016346:	d9fa      	bls.n	801633e <_free_r+0x46>
 8016348:	6811      	ldr	r1, [r2, #0]
 801634a:	1855      	adds	r5, r2, r1
 801634c:	42a5      	cmp	r5, r4
 801634e:	d10b      	bne.n	8016368 <_free_r+0x70>
 8016350:	6824      	ldr	r4, [r4, #0]
 8016352:	4421      	add	r1, r4
 8016354:	1854      	adds	r4, r2, r1
 8016356:	42a3      	cmp	r3, r4
 8016358:	6011      	str	r1, [r2, #0]
 801635a:	d1e0      	bne.n	801631e <_free_r+0x26>
 801635c:	681c      	ldr	r4, [r3, #0]
 801635e:	685b      	ldr	r3, [r3, #4]
 8016360:	6053      	str	r3, [r2, #4]
 8016362:	4421      	add	r1, r4
 8016364:	6011      	str	r1, [r2, #0]
 8016366:	e7da      	b.n	801631e <_free_r+0x26>
 8016368:	d902      	bls.n	8016370 <_free_r+0x78>
 801636a:	230c      	movs	r3, #12
 801636c:	6003      	str	r3, [r0, #0]
 801636e:	e7d6      	b.n	801631e <_free_r+0x26>
 8016370:	6825      	ldr	r5, [r4, #0]
 8016372:	1961      	adds	r1, r4, r5
 8016374:	428b      	cmp	r3, r1
 8016376:	bf04      	itt	eq
 8016378:	6819      	ldreq	r1, [r3, #0]
 801637a:	685b      	ldreq	r3, [r3, #4]
 801637c:	6063      	str	r3, [r4, #4]
 801637e:	bf04      	itt	eq
 8016380:	1949      	addeq	r1, r1, r5
 8016382:	6021      	streq	r1, [r4, #0]
 8016384:	6054      	str	r4, [r2, #4]
 8016386:	e7ca      	b.n	801631e <_free_r+0x26>
 8016388:	b003      	add	sp, #12
 801638a:	bd30      	pop	{r4, r5, pc}
 801638c:	200052fc 	.word	0x200052fc

08016390 <sbrk_aligned>:
 8016390:	b570      	push	{r4, r5, r6, lr}
 8016392:	4e0e      	ldr	r6, [pc, #56]	; (80163cc <sbrk_aligned+0x3c>)
 8016394:	460c      	mov	r4, r1
 8016396:	6831      	ldr	r1, [r6, #0]
 8016398:	4605      	mov	r5, r0
 801639a:	b911      	cbnz	r1, 80163a2 <sbrk_aligned+0x12>
 801639c:	f000 f88c 	bl	80164b8 <_sbrk_r>
 80163a0:	6030      	str	r0, [r6, #0]
 80163a2:	4621      	mov	r1, r4
 80163a4:	4628      	mov	r0, r5
 80163a6:	f000 f887 	bl	80164b8 <_sbrk_r>
 80163aa:	1c43      	adds	r3, r0, #1
 80163ac:	d00a      	beq.n	80163c4 <sbrk_aligned+0x34>
 80163ae:	1cc4      	adds	r4, r0, #3
 80163b0:	f024 0403 	bic.w	r4, r4, #3
 80163b4:	42a0      	cmp	r0, r4
 80163b6:	d007      	beq.n	80163c8 <sbrk_aligned+0x38>
 80163b8:	1a21      	subs	r1, r4, r0
 80163ba:	4628      	mov	r0, r5
 80163bc:	f000 f87c 	bl	80164b8 <_sbrk_r>
 80163c0:	3001      	adds	r0, #1
 80163c2:	d101      	bne.n	80163c8 <sbrk_aligned+0x38>
 80163c4:	f04f 34ff 	mov.w	r4, #4294967295
 80163c8:	4620      	mov	r0, r4
 80163ca:	bd70      	pop	{r4, r5, r6, pc}
 80163cc:	20005300 	.word	0x20005300

080163d0 <_malloc_r>:
 80163d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163d4:	1ccd      	adds	r5, r1, #3
 80163d6:	f025 0503 	bic.w	r5, r5, #3
 80163da:	3508      	adds	r5, #8
 80163dc:	2d0c      	cmp	r5, #12
 80163de:	bf38      	it	cc
 80163e0:	250c      	movcc	r5, #12
 80163e2:	2d00      	cmp	r5, #0
 80163e4:	4607      	mov	r7, r0
 80163e6:	db01      	blt.n	80163ec <_malloc_r+0x1c>
 80163e8:	42a9      	cmp	r1, r5
 80163ea:	d905      	bls.n	80163f8 <_malloc_r+0x28>
 80163ec:	230c      	movs	r3, #12
 80163ee:	603b      	str	r3, [r7, #0]
 80163f0:	2600      	movs	r6, #0
 80163f2:	4630      	mov	r0, r6
 80163f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163f8:	4e2e      	ldr	r6, [pc, #184]	; (80164b4 <_malloc_r+0xe4>)
 80163fa:	f000 f907 	bl	801660c <__malloc_lock>
 80163fe:	6833      	ldr	r3, [r6, #0]
 8016400:	461c      	mov	r4, r3
 8016402:	bb34      	cbnz	r4, 8016452 <_malloc_r+0x82>
 8016404:	4629      	mov	r1, r5
 8016406:	4638      	mov	r0, r7
 8016408:	f7ff ffc2 	bl	8016390 <sbrk_aligned>
 801640c:	1c43      	adds	r3, r0, #1
 801640e:	4604      	mov	r4, r0
 8016410:	d14d      	bne.n	80164ae <_malloc_r+0xde>
 8016412:	6834      	ldr	r4, [r6, #0]
 8016414:	4626      	mov	r6, r4
 8016416:	2e00      	cmp	r6, #0
 8016418:	d140      	bne.n	801649c <_malloc_r+0xcc>
 801641a:	6823      	ldr	r3, [r4, #0]
 801641c:	4631      	mov	r1, r6
 801641e:	4638      	mov	r0, r7
 8016420:	eb04 0803 	add.w	r8, r4, r3
 8016424:	f000 f848 	bl	80164b8 <_sbrk_r>
 8016428:	4580      	cmp	r8, r0
 801642a:	d13a      	bne.n	80164a2 <_malloc_r+0xd2>
 801642c:	6821      	ldr	r1, [r4, #0]
 801642e:	3503      	adds	r5, #3
 8016430:	1a6d      	subs	r5, r5, r1
 8016432:	f025 0503 	bic.w	r5, r5, #3
 8016436:	3508      	adds	r5, #8
 8016438:	2d0c      	cmp	r5, #12
 801643a:	bf38      	it	cc
 801643c:	250c      	movcc	r5, #12
 801643e:	4629      	mov	r1, r5
 8016440:	4638      	mov	r0, r7
 8016442:	f7ff ffa5 	bl	8016390 <sbrk_aligned>
 8016446:	3001      	adds	r0, #1
 8016448:	d02b      	beq.n	80164a2 <_malloc_r+0xd2>
 801644a:	6823      	ldr	r3, [r4, #0]
 801644c:	442b      	add	r3, r5
 801644e:	6023      	str	r3, [r4, #0]
 8016450:	e00e      	b.n	8016470 <_malloc_r+0xa0>
 8016452:	6822      	ldr	r2, [r4, #0]
 8016454:	1b52      	subs	r2, r2, r5
 8016456:	d41e      	bmi.n	8016496 <_malloc_r+0xc6>
 8016458:	2a0b      	cmp	r2, #11
 801645a:	d916      	bls.n	801648a <_malloc_r+0xba>
 801645c:	1961      	adds	r1, r4, r5
 801645e:	42a3      	cmp	r3, r4
 8016460:	6025      	str	r5, [r4, #0]
 8016462:	bf18      	it	ne
 8016464:	6059      	strne	r1, [r3, #4]
 8016466:	6863      	ldr	r3, [r4, #4]
 8016468:	bf08      	it	eq
 801646a:	6031      	streq	r1, [r6, #0]
 801646c:	5162      	str	r2, [r4, r5]
 801646e:	604b      	str	r3, [r1, #4]
 8016470:	4638      	mov	r0, r7
 8016472:	f104 060b 	add.w	r6, r4, #11
 8016476:	f000 f8cf 	bl	8016618 <__malloc_unlock>
 801647a:	f026 0607 	bic.w	r6, r6, #7
 801647e:	1d23      	adds	r3, r4, #4
 8016480:	1af2      	subs	r2, r6, r3
 8016482:	d0b6      	beq.n	80163f2 <_malloc_r+0x22>
 8016484:	1b9b      	subs	r3, r3, r6
 8016486:	50a3      	str	r3, [r4, r2]
 8016488:	e7b3      	b.n	80163f2 <_malloc_r+0x22>
 801648a:	6862      	ldr	r2, [r4, #4]
 801648c:	42a3      	cmp	r3, r4
 801648e:	bf0c      	ite	eq
 8016490:	6032      	streq	r2, [r6, #0]
 8016492:	605a      	strne	r2, [r3, #4]
 8016494:	e7ec      	b.n	8016470 <_malloc_r+0xa0>
 8016496:	4623      	mov	r3, r4
 8016498:	6864      	ldr	r4, [r4, #4]
 801649a:	e7b2      	b.n	8016402 <_malloc_r+0x32>
 801649c:	4634      	mov	r4, r6
 801649e:	6876      	ldr	r6, [r6, #4]
 80164a0:	e7b9      	b.n	8016416 <_malloc_r+0x46>
 80164a2:	230c      	movs	r3, #12
 80164a4:	603b      	str	r3, [r7, #0]
 80164a6:	4638      	mov	r0, r7
 80164a8:	f000 f8b6 	bl	8016618 <__malloc_unlock>
 80164ac:	e7a1      	b.n	80163f2 <_malloc_r+0x22>
 80164ae:	6025      	str	r5, [r4, #0]
 80164b0:	e7de      	b.n	8016470 <_malloc_r+0xa0>
 80164b2:	bf00      	nop
 80164b4:	200052fc 	.word	0x200052fc

080164b8 <_sbrk_r>:
 80164b8:	b538      	push	{r3, r4, r5, lr}
 80164ba:	4d06      	ldr	r5, [pc, #24]	; (80164d4 <_sbrk_r+0x1c>)
 80164bc:	2300      	movs	r3, #0
 80164be:	4604      	mov	r4, r0
 80164c0:	4608      	mov	r0, r1
 80164c2:	602b      	str	r3, [r5, #0]
 80164c4:	f7ec f946 	bl	8002754 <_sbrk>
 80164c8:	1c43      	adds	r3, r0, #1
 80164ca:	d102      	bne.n	80164d2 <_sbrk_r+0x1a>
 80164cc:	682b      	ldr	r3, [r5, #0]
 80164ce:	b103      	cbz	r3, 80164d2 <_sbrk_r+0x1a>
 80164d0:	6023      	str	r3, [r4, #0]
 80164d2:	bd38      	pop	{r3, r4, r5, pc}
 80164d4:	20005304 	.word	0x20005304

080164d8 <__sread>:
 80164d8:	b510      	push	{r4, lr}
 80164da:	460c      	mov	r4, r1
 80164dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164e0:	f000 f8a0 	bl	8016624 <_read_r>
 80164e4:	2800      	cmp	r0, #0
 80164e6:	bfab      	itete	ge
 80164e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80164ea:	89a3      	ldrhlt	r3, [r4, #12]
 80164ec:	181b      	addge	r3, r3, r0
 80164ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80164f2:	bfac      	ite	ge
 80164f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80164f6:	81a3      	strhlt	r3, [r4, #12]
 80164f8:	bd10      	pop	{r4, pc}

080164fa <__swrite>:
 80164fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164fe:	461f      	mov	r7, r3
 8016500:	898b      	ldrh	r3, [r1, #12]
 8016502:	05db      	lsls	r3, r3, #23
 8016504:	4605      	mov	r5, r0
 8016506:	460c      	mov	r4, r1
 8016508:	4616      	mov	r6, r2
 801650a:	d505      	bpl.n	8016518 <__swrite+0x1e>
 801650c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016510:	2302      	movs	r3, #2
 8016512:	2200      	movs	r2, #0
 8016514:	f000 f868 	bl	80165e8 <_lseek_r>
 8016518:	89a3      	ldrh	r3, [r4, #12]
 801651a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801651e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016522:	81a3      	strh	r3, [r4, #12]
 8016524:	4632      	mov	r2, r6
 8016526:	463b      	mov	r3, r7
 8016528:	4628      	mov	r0, r5
 801652a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801652e:	f000 b817 	b.w	8016560 <_write_r>

08016532 <__sseek>:
 8016532:	b510      	push	{r4, lr}
 8016534:	460c      	mov	r4, r1
 8016536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801653a:	f000 f855 	bl	80165e8 <_lseek_r>
 801653e:	1c43      	adds	r3, r0, #1
 8016540:	89a3      	ldrh	r3, [r4, #12]
 8016542:	bf15      	itete	ne
 8016544:	6560      	strne	r0, [r4, #84]	; 0x54
 8016546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801654a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801654e:	81a3      	strheq	r3, [r4, #12]
 8016550:	bf18      	it	ne
 8016552:	81a3      	strhne	r3, [r4, #12]
 8016554:	bd10      	pop	{r4, pc}

08016556 <__sclose>:
 8016556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801655a:	f000 b813 	b.w	8016584 <_close_r>
	...

08016560 <_write_r>:
 8016560:	b538      	push	{r3, r4, r5, lr}
 8016562:	4d07      	ldr	r5, [pc, #28]	; (8016580 <_write_r+0x20>)
 8016564:	4604      	mov	r4, r0
 8016566:	4608      	mov	r0, r1
 8016568:	4611      	mov	r1, r2
 801656a:	2200      	movs	r2, #0
 801656c:	602a      	str	r2, [r5, #0]
 801656e:	461a      	mov	r2, r3
 8016570:	f7fb fe10 	bl	8012194 <_write>
 8016574:	1c43      	adds	r3, r0, #1
 8016576:	d102      	bne.n	801657e <_write_r+0x1e>
 8016578:	682b      	ldr	r3, [r5, #0]
 801657a:	b103      	cbz	r3, 801657e <_write_r+0x1e>
 801657c:	6023      	str	r3, [r4, #0]
 801657e:	bd38      	pop	{r3, r4, r5, pc}
 8016580:	20005304 	.word	0x20005304

08016584 <_close_r>:
 8016584:	b538      	push	{r3, r4, r5, lr}
 8016586:	4d06      	ldr	r5, [pc, #24]	; (80165a0 <_close_r+0x1c>)
 8016588:	2300      	movs	r3, #0
 801658a:	4604      	mov	r4, r0
 801658c:	4608      	mov	r0, r1
 801658e:	602b      	str	r3, [r5, #0]
 8016590:	f7ec f8ab 	bl	80026ea <_close>
 8016594:	1c43      	adds	r3, r0, #1
 8016596:	d102      	bne.n	801659e <_close_r+0x1a>
 8016598:	682b      	ldr	r3, [r5, #0]
 801659a:	b103      	cbz	r3, 801659e <_close_r+0x1a>
 801659c:	6023      	str	r3, [r4, #0]
 801659e:	bd38      	pop	{r3, r4, r5, pc}
 80165a0:	20005304 	.word	0x20005304

080165a4 <_fstat_r>:
 80165a4:	b538      	push	{r3, r4, r5, lr}
 80165a6:	4d07      	ldr	r5, [pc, #28]	; (80165c4 <_fstat_r+0x20>)
 80165a8:	2300      	movs	r3, #0
 80165aa:	4604      	mov	r4, r0
 80165ac:	4608      	mov	r0, r1
 80165ae:	4611      	mov	r1, r2
 80165b0:	602b      	str	r3, [r5, #0]
 80165b2:	f7ec f8a6 	bl	8002702 <_fstat>
 80165b6:	1c43      	adds	r3, r0, #1
 80165b8:	d102      	bne.n	80165c0 <_fstat_r+0x1c>
 80165ba:	682b      	ldr	r3, [r5, #0]
 80165bc:	b103      	cbz	r3, 80165c0 <_fstat_r+0x1c>
 80165be:	6023      	str	r3, [r4, #0]
 80165c0:	bd38      	pop	{r3, r4, r5, pc}
 80165c2:	bf00      	nop
 80165c4:	20005304 	.word	0x20005304

080165c8 <_isatty_r>:
 80165c8:	b538      	push	{r3, r4, r5, lr}
 80165ca:	4d06      	ldr	r5, [pc, #24]	; (80165e4 <_isatty_r+0x1c>)
 80165cc:	2300      	movs	r3, #0
 80165ce:	4604      	mov	r4, r0
 80165d0:	4608      	mov	r0, r1
 80165d2:	602b      	str	r3, [r5, #0]
 80165d4:	f7ec f8a5 	bl	8002722 <_isatty>
 80165d8:	1c43      	adds	r3, r0, #1
 80165da:	d102      	bne.n	80165e2 <_isatty_r+0x1a>
 80165dc:	682b      	ldr	r3, [r5, #0]
 80165de:	b103      	cbz	r3, 80165e2 <_isatty_r+0x1a>
 80165e0:	6023      	str	r3, [r4, #0]
 80165e2:	bd38      	pop	{r3, r4, r5, pc}
 80165e4:	20005304 	.word	0x20005304

080165e8 <_lseek_r>:
 80165e8:	b538      	push	{r3, r4, r5, lr}
 80165ea:	4d07      	ldr	r5, [pc, #28]	; (8016608 <_lseek_r+0x20>)
 80165ec:	4604      	mov	r4, r0
 80165ee:	4608      	mov	r0, r1
 80165f0:	4611      	mov	r1, r2
 80165f2:	2200      	movs	r2, #0
 80165f4:	602a      	str	r2, [r5, #0]
 80165f6:	461a      	mov	r2, r3
 80165f8:	f7ec f89e 	bl	8002738 <_lseek>
 80165fc:	1c43      	adds	r3, r0, #1
 80165fe:	d102      	bne.n	8016606 <_lseek_r+0x1e>
 8016600:	682b      	ldr	r3, [r5, #0]
 8016602:	b103      	cbz	r3, 8016606 <_lseek_r+0x1e>
 8016604:	6023      	str	r3, [r4, #0]
 8016606:	bd38      	pop	{r3, r4, r5, pc}
 8016608:	20005304 	.word	0x20005304

0801660c <__malloc_lock>:
 801660c:	4801      	ldr	r0, [pc, #4]	; (8016614 <__malloc_lock+0x8>)
 801660e:	f7ff be0b 	b.w	8016228 <__retarget_lock_acquire_recursive>
 8016612:	bf00      	nop
 8016614:	200052f8 	.word	0x200052f8

08016618 <__malloc_unlock>:
 8016618:	4801      	ldr	r0, [pc, #4]	; (8016620 <__malloc_unlock+0x8>)
 801661a:	f7ff be06 	b.w	801622a <__retarget_lock_release_recursive>
 801661e:	bf00      	nop
 8016620:	200052f8 	.word	0x200052f8

08016624 <_read_r>:
 8016624:	b538      	push	{r3, r4, r5, lr}
 8016626:	4d07      	ldr	r5, [pc, #28]	; (8016644 <_read_r+0x20>)
 8016628:	4604      	mov	r4, r0
 801662a:	4608      	mov	r0, r1
 801662c:	4611      	mov	r1, r2
 801662e:	2200      	movs	r2, #0
 8016630:	602a      	str	r2, [r5, #0]
 8016632:	461a      	mov	r2, r3
 8016634:	f7ec f83c 	bl	80026b0 <_read>
 8016638:	1c43      	adds	r3, r0, #1
 801663a:	d102      	bne.n	8016642 <_read_r+0x1e>
 801663c:	682b      	ldr	r3, [r5, #0]
 801663e:	b103      	cbz	r3, 8016642 <_read_r+0x1e>
 8016640:	6023      	str	r3, [r4, #0]
 8016642:	bd38      	pop	{r3, r4, r5, pc}
 8016644:	20005304 	.word	0x20005304

08016648 <_init>:
 8016648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801664a:	bf00      	nop
 801664c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801664e:	bc08      	pop	{r3}
 8016650:	469e      	mov	lr, r3
 8016652:	4770      	bx	lr

08016654 <_fini>:
 8016654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016656:	bf00      	nop
 8016658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801665a:	bc08      	pop	{r3}
 801665c:	469e      	mov	lr, r3
 801665e:	4770      	bx	lr
