
DingoPDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000178e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  08017a74  08017a74  00027a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801825c  0801825c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  0801825c  0801825c  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801825c  0801825c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801825c  0801825c  0002825c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018260  08018260  00028260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08018264  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005160  200001e4  08018448  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005344  08018448  00035344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003327a  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000720f  00000000  00000000  0006348e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002750  00000000  00000000  0006a6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023b8  00000000  00000000  0006cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a0a0  00000000  00000000  0006f1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038583  00000000  00000000  00099248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dab7f  00000000  00000000  000d17cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ac34a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9a0  00000000  00000000  001ac39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017a5c 	.word	0x08017a5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08017a5c 	.word	0x08017a5c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <EvaluateCANInput>:
 */

#include "can_input.h"

uint8_t EvaluateCANInput(CAN_RxHeaderTypeDef* stRxHeader, uint8_t nRxData[8], PdmConfig_CanInput_t *in, uint16_t* nResult)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	603b      	str	r3, [r7, #0]
  if(!in->nEnabled)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <EvaluateCANInput+0x1a>
    return 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e0a6      	b.n	8000bb4 <EvaluateCANInput+0x168>
  if(stRxHeader->StdId != in->nId)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	8852      	ldrh	r2, [r2, #2]
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d001      	beq.n	8000a76 <EvaluateCANInput+0x2a>
    return 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e09e      	b.n	8000bb4 <EvaluateCANInput+0x168>

  uint16_t nSelected;

  //8 bit
  if(in->nHighByte == 0)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	88db      	ldrh	r3, [r3, #6]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d107      	bne.n	8000a8e <EvaluateCANInput+0x42>
  {
    nSelected = nRxData[in->nLowByte];
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	889b      	ldrh	r3, [r3, #4]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	82fb      	strh	r3, [r7, #22]
 8000a8c:	e011      	b.n	8000ab2 <EvaluateCANInput+0x66>
  }
  else
  {
    nSelected = (nRxData[in->nHighByte] << 8) + nRxData[in->nLowByte];
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	88db      	ldrh	r3, [r3, #6]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4413      	add	r3, r2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	889b      	ldrh	r3, [r3, #4]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	440b      	add	r3, r1
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	4413      	add	r3, r2
 8000ab0:	82fb      	strh	r3, [r7, #22]
  }

  switch(in->eOperator)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7a1b      	ldrb	r3, [r3, #8]
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d87b      	bhi.n	8000bb2 <EvaluateCANInput+0x166>
 8000aba:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <EvaluateCANInput+0x74>)
 8000abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac0:	08000ad5 	.word	0x08000ad5
 8000ac4:	08000ae3 	.word	0x08000ae3
 8000ac8:	08000afd 	.word	0x08000afd
 8000acc:	08000b17 	.word	0x08000b17
 8000ad0:	08000b5d 	.word	0x08000b5d
  {
  case OPER_EQUAL:
    *nResult = nSelected & 0xFF;
 8000ad4:	8afb      	ldrh	r3, [r7, #22]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	801a      	strh	r2, [r3, #0]
    return 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e068      	b.n	8000bb4 <EvaluateCANInput+0x168>

  case OPER_GREATER_THAN:
    *nResult = nSelected > in->nOnVal;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	895b      	ldrh	r3, [r3, #10]
 8000ae6:	8afa      	ldrh	r2, [r7, #22]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	bf8c      	ite	hi
 8000aec:	2301      	movhi	r3, #1
 8000aee:	2300      	movls	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	801a      	strh	r2, [r3, #0]
    return 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e05b      	b.n	8000bb4 <EvaluateCANInput+0x168>

  case OPER_LESS_THAN:
    *nResult = nSelected < in->nOnVal;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	895b      	ldrh	r3, [r3, #10]
 8000b00:	8afa      	ldrh	r2, [r7, #22]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	bf34      	ite	cc
 8000b06:	2301      	movcc	r3, #1
 8000b08:	2300      	movcs	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	801a      	strh	r2, [r3, #0]
    return 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e04e      	b.n	8000bb4 <EvaluateCANInput+0x168>

  case OPER_BITWISE_AND:
    if (in->eMode == MODE_NUM)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	7b1b      	ldrb	r3, [r3, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d107      	bne.n	8000b2e <EvaluateCANInput+0xe2>
      *nResult = (nSelected & in->nOnVal);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	895a      	ldrh	r2, [r3, #10]
 8000b22:	8afb      	ldrh	r3, [r7, #22]
 8000b24:	4013      	ands	r3, r2
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	801a      	strh	r2, [r3, #0]
 8000b2c:	e014      	b.n	8000b58 <EvaluateCANInput+0x10c>
    else
      CheckPushbutton(&in->ePbConfig, in->eMode, ((nSelected & in->nOnVal) > 0), nResult, NO_DEBOUNCE);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f103 0010 	add.w	r0, r3, #16
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	7b19      	ldrb	r1, [r3, #12]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	895a      	ldrh	r2, [r3, #10]
 8000b3c:	8afb      	ldrh	r3, [r7, #22]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	bf14      	ite	ne
 8000b46:	2301      	movne	r3, #1
 8000b48:	2300      	moveq	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	2300      	movs	r3, #0
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	f007 f846 	bl	8007be4 <CheckPushbutton>
    return 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e02b      	b.n	8000bb4 <EvaluateCANInput+0x168>

  case OPER_BITWISE_NAND:
    if (in->eMode == MODE_NUM)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7b1b      	ldrb	r3, [r3, #12]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10f      	bne.n	8000b84 <EvaluateCANInput+0x138>
      *nResult = (nSelected & !in->nOnVal);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	895b      	ldrh	r3, [r3, #10]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf0c      	ite	eq
 8000b6c:	2301      	moveq	r3, #1
 8000b6e:	2300      	movne	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	801a      	strh	r2, [r3, #0]
 8000b82:	e014      	b.n	8000bae <EvaluateCANInput+0x162>
    else
      CheckPushbutton(&in->ePbConfig, in->eMode, !((nSelected & in->nOnVal) > 0), nResult, NO_DEBOUNCE);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f103 0010 	add.w	r0, r3, #16
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7b19      	ldrb	r1, [r3, #12]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	895a      	ldrh	r2, [r3, #10]
 8000b92:	8afb      	ldrh	r3, [r7, #22]
 8000b94:	4013      	ands	r3, r2
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bf0c      	ite	eq
 8000b9c:	2301      	moveq	r3, #1
 8000b9e:	2300      	movne	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f007 f81b 	bl	8007be4 <CheckPushbutton>
    return 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e000      	b.n	8000bb4 <EvaluateCANInput+0x168>
  }

  return 0;
 8000bb2:	2300      	movs	r3, #0

}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bc4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bc8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d013      	beq.n	8000bfc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000bd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bd8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000bdc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d00b      	beq.n	8000bfc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000be4:	e000      	b.n	8000be8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000be6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000be8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f9      	beq.n	8000be6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000bf2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <USBD_CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUSBD, USBD_TxBuffer, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	4905      	ldr	r1, [pc, #20]	; (8000c28 <USBD_CDC_Init+0x1c>)
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <USBD_CDC_Init+0x20>)
 8000c16:	f011 fe6c 	bl	80128f2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUSBD, USBD_RxBuffer);
 8000c1a:	4905      	ldr	r1, [pc, #20]	; (8000c30 <USBD_CDC_Init+0x24>)
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <USBD_CDC_Init+0x20>)
 8000c1e:	f011 fe82 	bl	8012926 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200018e8 	.word	0x200018e8
 8000c2c:	200020e8 	.word	0x200020e8
 8000c30:	200010e8 	.word	0x200010e8

08000c34 <USBD_CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_DeInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return (USBD_OK);
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <USBD_CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Control(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	4613      	mov	r3, r2
 8000c52:	80bb      	strh	r3, [r7, #4]
  switch(cmd)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b23      	cmp	r3, #35	; 0x23
 8000c58:	d866      	bhi.n	8000d28 <USBD_CDC_Control+0xe4>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <USBD_CDC_Control+0x1c>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000d29 	.word	0x08000d29
 8000c64:	08000d29 	.word	0x08000d29
 8000c68:	08000d29 	.word	0x08000d29
 8000c6c:	08000d29 	.word	0x08000d29
 8000c70:	08000d29 	.word	0x08000d29
 8000c74:	08000d29 	.word	0x08000d29
 8000c78:	08000d29 	.word	0x08000d29
 8000c7c:	08000d29 	.word	0x08000d29
 8000c80:	08000d29 	.word	0x08000d29
 8000c84:	08000d29 	.word	0x08000d29
 8000c88:	08000d29 	.word	0x08000d29
 8000c8c:	08000d29 	.word	0x08000d29
 8000c90:	08000d29 	.word	0x08000d29
 8000c94:	08000d29 	.word	0x08000d29
 8000c98:	08000d29 	.word	0x08000d29
 8000c9c:	08000d29 	.word	0x08000d29
 8000ca0:	08000d29 	.word	0x08000d29
 8000ca4:	08000d29 	.word	0x08000d29
 8000ca8:	08000d29 	.word	0x08000d29
 8000cac:	08000d29 	.word	0x08000d29
 8000cb0:	08000d29 	.word	0x08000d29
 8000cb4:	08000d29 	.word	0x08000d29
 8000cb8:	08000d29 	.word	0x08000d29
 8000cbc:	08000d29 	.word	0x08000d29
 8000cc0:	08000d29 	.word	0x08000d29
 8000cc4:	08000d29 	.word	0x08000d29
 8000cc8:	08000d29 	.word	0x08000d29
 8000ccc:	08000d29 	.word	0x08000d29
 8000cd0:	08000d29 	.word	0x08000d29
 8000cd4:	08000d29 	.word	0x08000d29
 8000cd8:	08000d29 	.word	0x08000d29
 8000cdc:	08000d29 	.word	0x08000d29
 8000ce0:	08000d29 	.word	0x08000d29
 8000ce4:	08000cf1 	.word	0x08000cf1
 8000ce8:	08000d29 	.word	0x08000d29
 8000cec:	08000d29 	.word	0x08000d29
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(115200);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(115200 >> 8);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	22c2      	movs	r2, #194	; 0xc2
 8000cfc:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(115200 >> 16);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3302      	adds	r3, #2
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(115200 >> 24);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	3303      	adds	r3, #3
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0; //Stop bits (1)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0; //Parity (none)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	3305      	adds	r3, #5
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8; //Number of bits (8)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	3306      	adds	r3, #6
 8000d22:	2208      	movs	r2, #8
 8000d24:	701a      	strb	r2, [r3, #0]
    break;
 8000d26:	e000      	b.n	8000d2a <USBD_CDC_Control+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000d28:	bf00      	nop
  }

  return (USBD_OK);
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <USBD_CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Receive(uint8_t* Buf, uint32_t *Len)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b090      	sub	sp, #64	; 0x40
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  MsgQueueRx_t stMsg;
  stMsg.eMsgSrc = USB_RX;
 8000d42:	2301      	movs	r3, #1
 8000d44:	733b      	strb	r3, [r7, #12]
  stMsg.nCRC = 0xFFFFFFFF;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  stMsg.nRxLen = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  for(uint8_t i=0; i<*Len; i++){
 8000d52:	2300      	movs	r3, #0
 8000d54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000d58:	e019      	b.n	8000d8e <USBD_CDC_Receive+0x56>
    if(i < 8){
 8000d5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d5e:	2b07      	cmp	r3, #7
 8000d60:	d810      	bhi.n	8000d84 <USBD_CDC_Receive+0x4c>
      stMsg.nRxData[i] = Buf[i];
 8000d62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	441a      	add	r2, r3
 8000d6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d6e:	7812      	ldrb	r2, [r2, #0]
 8000d70:	3340      	adds	r3, #64	; 0x40
 8000d72:	443b      	add	r3, r7
 8000d74:	f803 2c14 	strb.w	r2, [r3, #-20]
      stMsg.nRxLen++;
 8000d78:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  for(uint8_t i=0; i<*Len; i++){
 8000d84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000d8e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3df      	bcc.n	8000d5a <USBD_CDC_Receive+0x22>
    }
  }

  osMessageQueuePut(qMsgQueueRx, &stMsg, 0U, 0U);
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <USBD_CDC_Receive+0x8c>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f107 010c 	add.w	r1, r7, #12
 8000da2:	2300      	movs	r3, #0
 8000da4:	2200      	movs	r2, #0
 8000da6:	f013 f893 	bl	8013ed0 <osMessageQueuePut>

  USBD_CDC_SetRxBuffer(&hUSBD, &Buf[0]);
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <USBD_CDC_Receive+0x90>)
 8000dae:	f011 fdba 	bl	8012926 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUSBD);
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <USBD_CDC_Receive+0x90>)
 8000db4:	f011 fdfa 	bl	80129ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3740      	adds	r7, #64	; 0x40
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000ad4 	.word	0x20000ad4
 8000dc8:	200020e8 	.word	0x200020e8

08000dcc <USBD_CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t USBD_CDC_Transmit(uint8_t* Buf, uint16_t Len)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUSBD.pClassData;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <USBD_CDC_Transmit+0x48>)
 8000dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8000de2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <USBD_CDC_Transmit+0x26>
    return USBD_BUSY;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00b      	b.n	8000e0a <USBD_CDC_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUSBD, Buf, Len);
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	461a      	mov	r2, r3
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <USBD_CDC_Transmit+0x48>)
 8000dfa:	f011 fd7a 	bl	80128f2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUSBD);
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <USBD_CDC_Transmit+0x48>)
 8000e00:	f011 fda5 	bl	801294e <USBD_CDC_TransmitPacket>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
  return result;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200020e8 	.word	0x200020e8

08000e18 <HAL_CAN_RxFifo0MsgPendingCallback>:

//========================================================================
// CAN Receive Callback
//========================================================================
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &stCanRxHeader, nCanRxData) != HAL_OK)
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000e22:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e24:	2100      	movs	r1, #0
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f008 fff2 	bl	8009e10 <HAL_CAN_GetRxMessage>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000e32:	f002 fd23 	bl	800387c <Error_Handler>
  }

  //Store latest receive time
  //Use to determine connection status
  nLastCanUpdate = HAL_GetTick();
 8000e36:	f007 fcd3 	bl	80087e0 <HAL_GetTick>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000e3e:	6013      	str	r3, [r2, #0]

  MsgQueueRx_t stMsg;
  stMsg.eMsgSrc = CAN_RX;
 8000e40:	2300      	movs	r3, #0
 8000e42:	723b      	strb	r3, [r7, #8]
  stMsg.nRxLen = (uint8_t)stCanRxHeader.DLC;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  memcpy(&stMsg.stCanRxHeader, &stCanRxHeader, sizeof(stCanRxHeader));
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e50:	f107 040c 	add.w	r4, r7, #12
 8000e54:	461d      	mov	r5, r3
 8000e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  memcpy(&stMsg.nRxData, &nCanRxData, sizeof(nCanRxData));
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000e64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e6c:	e883 0003 	stmia.w	r3, {r0, r1}
  osMessageQueuePut(qMsgQueueRx, &stMsg, 0U, 0U);
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	f107 0108 	add.w	r1, r7, #8
 8000e78:	2300      	movs	r3, #0
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f013 f828 	bl	8013ed0 <osMessageQueuePut>

}
 8000e80:	bf00      	nop
 8000e82:	3738      	adds	r7, #56	; 0x38
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bdb0      	pop	{r4, r5, r7, pc}
 8000e88:	20000e7c 	.word	0x20000e7c
 8000e8c:	20000e58 	.word	0x20000e58
 8000e90:	20000e88 	.word	0x20000e88
 8000e94:	20000ad4 	.word	0x20000ad4

08000e98 <PdmMainTask>:
//========================================================================
//========================================================================
// MAIN
//========================================================================
//========================================================================
void PdmMainTask(osThreadId_t* thisThreadId, ADC_HandleTypeDef* hadc1, ADC_HandleTypeDef* hadc4, CAN_HandleTypeDef* hcan, RTC_HandleTypeDef* hrtc, CRC_HandleTypeDef* hcrc){
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b090      	sub	sp, #64	; 0x40
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	603b      	str	r3, [r7, #0]

  HAL_ADC_Start_DMA(hadc1, (uint32_t*) nAdc1Data, ADC_1_COUNT);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	499f      	ldr	r1, [pc, #636]	; (8001128 <PdmMainTask+0x290>)
 8000eaa:	68b8      	ldr	r0, [r7, #8]
 8000eac:	f007 fea2 	bl	8008bf4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(hadc4, (uint32_t*) nAdc4Data, ADC_4_COUNT);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	499e      	ldr	r1, [pc, #632]	; (800112c <PdmMainTask+0x294>)
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f007 fe9d 	bl	8008bf4 <HAL_ADC_Start_DMA>

  //Configure the CAN Filter
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
  sFilterConfig.FilterIdHigh = 0x0000;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterIdLow = 0x0000;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  sFilterConfig.FilterActivation = ENABLE;
 8000eda:	2301      	movs	r3, #1
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  sFilterConfig.SlaveStartFilterBank = 14;
 8000ede:	230e      	movs	r3, #14
 8000ee0:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f008 fda8 	bl	8009a3e <HAL_CAN_ConfigFilter>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <PdmMainTask+0x60>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000ef4:	f002 fcc2 	bl	800387c <Error_Handler>
  }

  //Start the CAN periphera
  if (HAL_CAN_Start(hcan) != HAL_OK)
 8000ef8:	6838      	ldr	r0, [r7, #0]
 8000efa:	f008 fe6a 	bl	8009bd2 <HAL_CAN_Start>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <PdmMainTask+0x70>
  {
    /* Start Error */
    Error_Handler();
 8000f04:	f002 fcba 	bl	800387c <Error_Handler>
  }

  //Activate CAN RX notification
  if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000f08:	2102      	movs	r1, #2
 8000f0a:	6838      	ldr	r0, [r7, #0]
 8000f0c:	f009 f892 	bl	800a034 <HAL_CAN_ActivateNotification>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <PdmMainTask+0x82>
  {
    /* Notification Error */
    Error_Handler();
 8000f16:	f002 fcb1 	bl	800387c <Error_Handler>
  }

  //Configure Transmission
  stCanTxHeader.StdId = 1620;
 8000f1a:	4b85      	ldr	r3, [pc, #532]	; (8001130 <PdmMainTask+0x298>)
 8000f1c:	f240 6254 	movw	r2, #1620	; 0x654
 8000f20:	601a      	str	r2, [r3, #0]
  stCanTxHeader.ExtId = 0;
 8000f22:	4b83      	ldr	r3, [pc, #524]	; (8001130 <PdmMainTask+0x298>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  stCanTxHeader.RTR = CAN_RTR_DATA;
 8000f28:	4b81      	ldr	r3, [pc, #516]	; (8001130 <PdmMainTask+0x298>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  stCanTxHeader.IDE = CAN_ID_STD;
 8000f2e:	4b80      	ldr	r3, [pc, #512]	; (8001130 <PdmMainTask+0x298>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  stCanTxHeader.DLC = 8;
 8000f34:	4b7e      	ldr	r3, [pc, #504]	; (8001130 <PdmMainTask+0x298>)
 8000f36:	2208      	movs	r2, #8
 8000f38:	611a      	str	r2, [r3, #16]
  stCanTxHeader.TransmitGlobalTime = DISABLE;
 8000f3a:	4b7d      	ldr	r3, [pc, #500]	; (8001130 <PdmMainTask+0x298>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	751a      	strb	r2, [r3, #20]


  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUSBD, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000f40:	2200      	movs	r2, #0
 8000f42:	497c      	ldr	r1, [pc, #496]	; (8001134 <PdmMainTask+0x29c>)
 8000f44:	487c      	ldr	r0, [pc, #496]	; (8001138 <PdmMainTask+0x2a0>)
 8000f46:	f011 fd5b 	bl	8012a00 <USBD_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <PdmMainTask+0xbc>
  {
    Error_Handler();
 8000f50:	f002 fc94 	bl	800387c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUSBD, &USBD_CDC) != USBD_OK)
 8000f54:	4979      	ldr	r1, [pc, #484]	; (800113c <PdmMainTask+0x2a4>)
 8000f56:	4878      	ldr	r0, [pc, #480]	; (8001138 <PdmMainTask+0x2a0>)
 8000f58:	f011 fd7d 	bl	8012a56 <USBD_RegisterClass>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <PdmMainTask+0xce>
  {
    Error_Handler();
 8000f62:	f002 fc8b 	bl	800387c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUSBD, &USBD_Interface_PDM) != USBD_OK)
 8000f66:	4976      	ldr	r1, [pc, #472]	; (8001140 <PdmMainTask+0x2a8>)
 8000f68:	4873      	ldr	r0, [pc, #460]	; (8001138 <PdmMainTask+0x2a0>)
 8000f6a:	f011 fcab 	bl	80128c4 <USBD_CDC_RegisterInterface>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <PdmMainTask+0xe0>
  {
    Error_Handler();
 8000f74:	f002 fc82 	bl	800387c <Error_Handler>
  }
  if (USBD_Start(&hUSBD) != USBD_OK)
 8000f78:	486f      	ldr	r0, [pc, #444]	; (8001138 <PdmMainTask+0x2a0>)
 8000f7a:	f011 fd86 	bl	8012a8a <USBD_Start>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <PdmMainTask+0xf0>
  {
    Error_Handler();
 8000f84:	f002 fc7a 	bl	800387c <Error_Handler>
    //=====================================================================================================
    // ADC channels
    // ADC1 = Vbat and device temperature
    // ADC4 = Battery sense
    //=====================================================================================================
    nBattSense = (uint16_t)(((float)nAdc4Data[0]) * 0.0519 - 11.3);
 8000f88:	4b68      	ldr	r3, [pc, #416]	; (800112c <PdmMainTask+0x294>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f96:	ee17 0a90 	vmov	r0, s15
 8000f9a:	f7ff fa7d 	bl	8000498 <__aeabi_f2d>
 8000f9e:	a35e      	add	r3, pc, #376	; (adr r3, 8001118 <PdmMainTask+0x280>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	f7ff fad0 	bl	8000548 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	a35b      	add	r3, pc, #364	; (adr r3, 8001120 <PdmMainTask+0x288>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff f90f 	bl	80001d8 <__aeabi_dsub>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff fcd3 	bl	800096c <__aeabi_d2uiz>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b5e      	ldr	r3, [pc, #376]	; (8001144 <PdmMainTask+0x2ac>)
 8000fcc:	801a      	strh	r2, [r3, #0]
    nStmTemp = (uint16_t)((80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8000fce:	4b5e      	ldr	r3, [pc, #376]	; (8001148 <PdmMainTask+0x2b0>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fda:	4b5c      	ldr	r3, [pc, #368]	; (800114c <PdmMainTask+0x2b4>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fea:	ee17 0a90 	vmov	r0, s15
 8000fee:	f7ff fa53 	bl	8000498 <__aeabi_f2d>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	f04f 0000 	mov.w	r0, #0
 8000ffa:	4955      	ldr	r1, [pc, #340]	; (8001150 <PdmMainTask+0x2b8>)
 8000ffc:	f7ff fbce 	bl	800079c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4614      	mov	r4, r2
 8001006:	461d      	mov	r5, r3
                          (((float)nAdc1Data[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0) * 10.0);
 8001008:	4b47      	ldr	r3, [pc, #284]	; (8001128 <PdmMainTask+0x290>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	b29b      	uxth	r3, r3
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001016:	4b4d      	ldr	r3, [pc, #308]	; (800114c <PdmMainTask+0x2b4>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001026:	ee17 0a90 	vmov	r0, s15
 800102a:	f7ff fa35 	bl	8000498 <__aeabi_f2d>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
    nStmTemp = (uint16_t)((80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8001032:	4620      	mov	r0, r4
 8001034:	4629      	mov	r1, r5
 8001036:	f7ff fa87 	bl	8000548 <__aeabi_dmul>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
                          (((float)nAdc1Data[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0) * 10.0);
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	4b43      	ldr	r3, [pc, #268]	; (8001154 <PdmMainTask+0x2bc>)
 8001048:	f7ff f8c8 	bl	80001dc <__adddf3>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b3f      	ldr	r3, [pc, #252]	; (8001158 <PdmMainTask+0x2c0>)
 800105a:	f7ff fa75 	bl	8000548 <__aeabi_dmul>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
    nStmTemp = (uint16_t)((80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f7ff fc81 	bl	800096c <__aeabi_d2uiz>
 800106a:	4603      	mov	r3, r0
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b3b      	ldr	r3, [pc, #236]	; (800115c <PdmMainTask+0x2c4>)
 8001070:	801a      	strh	r2, [r3, #0]

    //=====================================================================================================
    // CANBoard check connection
    //=====================================================================================================
    CANBoardCheckConnection(&stCANBoard_RX);
 8001072:	483b      	ldr	r0, [pc, #236]	; (8001160 <PdmMainTask+0x2c8>)
 8001074:	f005 fe96 	bl	8006da4 <CANBoardCheckConnection>

    //=====================================================================================================
    // USB Connection
    //=====================================================================================================
    if( (USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && !bUsbConnected){
 8001078:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <PdmMainTask+0x2cc>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00f      	beq.n	80010a4 <PdmMainTask+0x20c>
 8001084:	4b38      	ldr	r3, [pc, #224]	; (8001168 <PdmMainTask+0x2d0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	f083 0301 	eor.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d008      	beq.n	80010a4 <PdmMainTask+0x20c>
      USB_PULLUP_GPIO_Port->ODR |= USB_PULLUP_Pin;
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <PdmMainTask+0x2cc>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a33      	ldr	r2, [pc, #204]	; (8001164 <PdmMainTask+0x2cc>)
 8001098:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800109c:	6153      	str	r3, [r2, #20]
      bUsbConnected = true;
 800109e:	4b32      	ldr	r3, [pc, #200]	; (8001168 <PdmMainTask+0x2d0>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
    }

    if( !(USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && bUsbConnected){
 80010a4:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <PdmMainTask+0x2cc>)
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10c      	bne.n	80010ca <PdmMainTask+0x232>
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <PdmMainTask+0x2d0>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <PdmMainTask+0x232>
      USB_PULLUP_GPIO_Port->ODR &= ~USB_PULLUP_Pin;
 80010b8:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <PdmMainTask+0x2cc>)
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	4a29      	ldr	r2, [pc, #164]	; (8001164 <PdmMainTask+0x2cc>)
 80010be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010c2:	6153      	str	r3, [r2, #20]
      bUsbConnected = false;
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <PdmMainTask+0x2d0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    }

    nILTotal = 0;
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <PdmMainTask+0x2d4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	801a      	strh	r2, [r3, #0]
    for(int i=0;i<12;i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010d4:	e010      	b.n	80010f8 <PdmMainTask+0x260>
      nILTotal += pf[i].nIL;
 80010d6:	4a26      	ldr	r2, [pc, #152]	; (8001170 <PdmMainTask+0x2d8>)
 80010d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010da:	019b      	lsls	r3, r3, #6
 80010dc:	4413      	add	r3, r2
 80010de:	3328      	adds	r3, #40	; 0x28
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <PdmMainTask+0x2d4>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4413      	add	r3, r2
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <PdmMainTask+0x2d4>)
 80010f0:	801a      	strh	r2, [r3, #0]
    for(int i=0;i<12;i++)
 80010f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f4:	3301      	adds	r3, #1
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010fa:	2b0b      	cmp	r3, #11
 80010fc:	ddeb      	ble.n	80010d6 <PdmMainTask+0x23e>

#ifdef MEAS_HEAP_USE
    __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

    osDelay(MAIN_TASK_DELAY);
 80010fe:	2064      	movs	r0, #100	; 0x64
 8001100:	f012 fe32 	bl	8013d68 <osDelay>

    //Debug GPIO
    EXTRA3_GPIO_Port->ODR ^= EXTRA3_Pin;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <PdmMainTask+0x2cc>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <PdmMainTask+0x2cc>)
 800110a:	f083 0310 	eor.w	r3, r3, #16
 800110e:	6153      	str	r3, [r2, #20]
    nBattSense = (uint16_t)(((float)nAdc4Data[0]) * 0.0519 - 11.3);
 8001110:	e73a      	b.n	8000f88 <PdmMainTask+0xf0>
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	05532618 	.word	0x05532618
 800111c:	3faa92a3 	.word	0x3faa92a3
 8001120:	9999999a 	.word	0x9999999a
 8001124:	40269999 	.word	0x40269999
 8001128:	20000e18 	.word	0x20000e18
 800112c:	20000e1c 	.word	0x20000e1c
 8001130:	20000e40 	.word	0x20000e40
 8001134:	20000130 	.word	0x20000130
 8001138:	200020e8 	.word	0x200020e8
 800113c:	20000028 	.word	0x20000028
 8001140:	20000000 	.word	0x20000000
 8001144:	20000e1e 	.word	0x20000e1e
 8001148:	1ffff7c2 	.word	0x1ffff7c2
 800114c:	1ffff7b8 	.word	0x1ffff7b8
 8001150:	40540000 	.word	0x40540000
 8001154:	403e0000 	.word	0x403e0000
 8001158:	40240000 	.word	0x40240000
 800115c:	20000e20 	.word	0x20000e20
 8001160:	20000e8c 	.word	0x20000e8c
 8001164:	48000400 	.word	0x48000400
 8001168:	20000e0c 	.word	0x20000e0c
 800116c:	20000de4 	.word	0x20000de4
 8001170:	20000ae4 	.word	0x20000ae4

08001174 <InputLogic>:
  }
}

void InputLogic(){
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	e012      	b.n	80011a6 <InputLogic+0x32>
    EvaluateInput(&stPdmConfig.stInput[i], &nPdmInputs[i]);
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	1a9b      	subs	r3, r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	3308      	adds	r3, #8
 800118c:	4a48      	ldr	r2, [pc, #288]	; (80012b0 <InputLogic+0x13c>)
 800118e:	441a      	add	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4947      	ldr	r1, [pc, #284]	; (80012b4 <InputLogic+0x140>)
 8001196:	440b      	add	r3, r1
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f005 f8c1 	bl	8006322 <EvaluateInput>
  for(int i=0; i<PDM_NUM_INPUTS; i++)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	dde9      	ble.n	8001180 <InputLogic+0xc>

  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	e012      	b.n	80011d8 <InputLogic+0x64>
    EvaluateVirtInput(&stPdmConfig.stVirtualInput[i], &nVirtInputs[i]);
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	33b0      	adds	r3, #176	; 0xb0
 80011be:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <InputLogic+0x13c>)
 80011c0:	441a      	add	r2, r3
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	493c      	ldr	r1, [pc, #240]	; (80012b8 <InputLogic+0x144>)
 80011c8:	440b      	add	r3, r1
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f005 fc53 	bl	8006a78 <EvaluateVirtInput>
  for(int i=0; i<PDM_NUM_VIRT_INPUTS; i++)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	3301      	adds	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b13      	cmp	r3, #19
 80011dc:	dde9      	ble.n	80011b2 <InputLogic+0x3e>

  //Map profet state to integer for use as virtual input pointer
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	e01d      	b.n	8001220 <InputLogic+0xac>
    nOutputs[i] = pf[i].eState == ON;
 80011e4:	4a35      	ldr	r2, [pc, #212]	; (80012bc <InputLogic+0x148>)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	019b      	lsls	r3, r3, #6
 80011ea:	4413      	add	r3, r2
 80011ec:	3301      	adds	r3, #1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	bf0c      	ite	eq
 80011f6:	2301      	moveq	r3, #1
 80011f8:	2300      	movne	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	b299      	uxth	r1, r3
 80011fe:	4a30      	ldr	r2, [pc, #192]	; (80012c0 <InputLogic+0x14c>)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    EvaluateStarter(&stPdmConfig.stStarter, i, &nStarterDisable[i]);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	b2d9      	uxtb	r1, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4a2d      	ldr	r2, [pc, #180]	; (80012c4 <InputLogic+0x150>)
 8001210:	4413      	add	r3, r2
 8001212:	461a      	mov	r2, r3
 8001214:	482c      	ldr	r0, [pc, #176]	; (80012c8 <InputLogic+0x154>)
 8001216:	f005 f8a9 	bl	800636c <EvaluateStarter>
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b0b      	cmp	r3, #11
 8001224:	ddde      	ble.n	80011e4 <InputLogic+0x70>
  }

  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	e023      	b.n	8001274 <InputLogic+0x100>
      if( (stPdmConfig.stFlasher[0].nOutput != i) &&
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <InputLogic+0x13c>)
 800122e:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
 8001232:	461a      	mov	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <InputLogic+0xfa>
          (stPdmConfig.stFlasher[1].nOutput != i) &&
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <InputLogic+0x13c>)
 800123c:	f893 3535 	ldrb.w	r3, [r3, #1333]	; 0x535
 8001240:	461a      	mov	r2, r3
      if( (stPdmConfig.stFlasher[0].nOutput != i) &&
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	4293      	cmp	r3, r2
 8001246:	d012      	beq.n	800126e <InputLogic+0xfa>
          (stPdmConfig.stFlasher[2].nOutput != i) &&
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <InputLogic+0x13c>)
 800124a:	f893 354d 	ldrb.w	r3, [r3, #1357]	; 0x54d
 800124e:	461a      	mov	r2, r3
          (stPdmConfig.stFlasher[1].nOutput != i) &&
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4293      	cmp	r3, r2
 8001254:	d00b      	beq.n	800126e <InputLogic+0xfa>
          (stPdmConfig.stFlasher[3].nOutput != i))
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <InputLogic+0x13c>)
 8001258:	f893 3565 	ldrb.w	r3, [r3, #1381]	; 0x565
 800125c:	461a      	mov	r2, r3
          (stPdmConfig.stFlasher[2].nOutput != i) &&
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	4293      	cmp	r3, r2
 8001262:	d004      	beq.n	800126e <InputLogic+0xfa>
        nOutputFlasher[i] = 1;
 8001264:	4a19      	ldr	r2, [pc, #100]	; (80012cc <InputLogic+0x158>)
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2101      	movs	r1, #1
 800126a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++){
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3301      	adds	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b0b      	cmp	r3, #11
 8001278:	ddd8      	ble.n	800122c <InputLogic+0xb8>
  }
  for(int i=0; i<PDM_NUM_FLASHERS; i++){
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	e00f      	b.n	80012a0 <InputLogic+0x12c>
    EvaluateFlasher(&stPdmConfig.stFlasher[i], nOutputFlasher);
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <InputLogic+0x13c>)
 8001290:	4413      	add	r3, r2
 8001292:	490e      	ldr	r1, [pc, #56]	; (80012cc <InputLogic+0x158>)
 8001294:	4618      	mov	r0, r3
 8001296:	f001 fe13 	bl	8002ec0 <EvaluateFlasher>
  for(int i=0; i<PDM_NUM_FLASHERS; i++){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3301      	adds	r3, #1
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	ddec      	ble.n	8001280 <InputLogic+0x10c>
  }
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000200 	.word	0x20000200
 80012b4:	2000102c 	.word	0x2000102c
 80012b8:	20001074 	.word	0x20001074
 80012bc:	20000ae4 	.word	0x20000ae4
 80012c0:	2000109c 	.word	0x2000109c
 80012c4:	200010b4 	.word	0x200010b4
 80012c8:	20000770 	.word	0x20000770
 80012cc:	200010cc 	.word	0x200010cc

080012d0 <OutputLogic>:

void OutputLogic(){
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
  //Copy output logic to profet requested state
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	e039      	b.n	8001350 <OutputLogic+0x80>
  {
    if(eDevMode == DEVICE_AUTO){
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <OutputLogic+0x94>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d123      	bne.n	800132c <OutputLogic+0x5c>
      pf[i].eReqState = (ProfetStateTypeDef)(*stPdmConfig.stOutput[i].pInput && nStarterDisable[i] && nOutputFlasher[i]);
 80012e4:	4920      	ldr	r1, [pc, #128]	; (8001368 <OutputLogic+0x98>)
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	440b      	add	r3, r1
 80012f2:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00d      	beq.n	800131a <OutputLogic+0x4a>
 80012fe:	4a1b      	ldr	r2, [pc, #108]	; (800136c <OutputLogic+0x9c>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <OutputLogic+0x4a>
 800130a:	4a19      	ldr	r2, [pc, #100]	; (8001370 <OutputLogic+0xa0>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <OutputLogic+0x4a>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <OutputLogic+0x4c>
 800131a:	2300      	movs	r3, #0
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	4a15      	ldr	r2, [pc, #84]	; (8001374 <OutputLogic+0xa4>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	019b      	lsls	r3, r3, #6
 8001324:	4413      	add	r3, r2
 8001326:	3302      	adds	r3, #2
 8001328:	460a      	mov	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
    }
    if(eDevMode == DEVICE_MANUAL){
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <OutputLogic+0x94>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10a      	bne.n	800134a <OutputLogic+0x7a>
      pf[i].eReqState = (ProfetStateTypeDef)nManualOutputs[i];
 8001334:	4a10      	ldr	r2, [pc, #64]	; (8001378 <OutputLogic+0xa8>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	7819      	ldrb	r1, [r3, #0]
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <OutputLogic+0xa4>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	019b      	lsls	r3, r3, #6
 8001342:	4413      	add	r3, r2
 8001344:	3302      	adds	r3, #2
 8001346:	460a      	mov	r2, r1
 8001348:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<PDM_NUM_OUTPUTS; i++)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3301      	adds	r3, #1
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b0b      	cmp	r3, #11
 8001354:	ddc2      	ble.n	80012dc <OutputLogic+0xc>
    }
  }
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	20000ae0 	.word	0x20000ae0
 8001368:	20000200 	.word	0x20000200
 800136c:	200010b4 	.word	0x200010b4
 8001370:	200010cc 	.word	0x200010cc
 8001374:	20000ae4 	.word	0x20000ae4
 8001378:	200023ac 	.word	0x200023ac

0800137c <I2C1Task>:

void I2C1Task(osThreadId_t* thisThreadId, I2C_HandleTypeDef* hi2c){
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  //=====================================================================================================
  // MCP9808 Temperature Sensor Configuration
  //=====================================================================================================
  if(MCP9808_Init(hi2c, MCP9808_ADDRESS) != MCP9808_OK)
 8001386:	2118      	movs	r1, #24
 8001388:	6838      	ldr	r0, [r7, #0]
 800138a:	f005 fdc1 	bl	8006f10 <MCP9808_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b01      	cmp	r3, #1
 8001392:	d002      	beq.n	800139a <I2C1Task+0x1e>
    printf("MCP9808 Init FAIL\n");
 8001394:	4883      	ldr	r0, [pc, #524]	; (80015a4 <I2C1Task+0x228>)
 8001396:	f015 fed1 	bl	801713c <puts>

  MCP9808_SetResolution(hi2c, MCP9808_ADDRESS, MCP9808_RESOLUTION_0_5DEG);
 800139a:	2200      	movs	r2, #0
 800139c:	2118      	movs	r1, #24
 800139e:	6838      	ldr	r0, [r7, #0]
 80013a0:	f005 fe58 	bl	8007054 <MCP9808_SetResolution>

  if(MCP9808_SetLimit(hi2c, MCP9808_ADDRESS, MCP9808_REG_UPPER_TEMP, BOARD_TEMP_MAX) != MCP9808_OK)
 80013a4:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80015a8 <I2C1Task+0x22c>
 80013a8:	2202      	movs	r2, #2
 80013aa:	2118      	movs	r1, #24
 80013ac:	6838      	ldr	r0, [r7, #0]
 80013ae:	f005 fe65 	bl	800707c <MCP9808_SetLimit>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d002      	beq.n	80013be <I2C1Task+0x42>
    printf("MCP9808 Set Upper Limit Failed\n");
 80013b8:	487c      	ldr	r0, [pc, #496]	; (80015ac <I2C1Task+0x230>)
 80013ba:	f015 febf 	bl	801713c <puts>
  if(MCP9808_SetLimit(hi2c, MCP9808_ADDRESS, MCP9808_REG_LOWER_TEMP, BOARD_TEMP_MIN) != MCP9808_OK)
 80013be:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80015b0 <I2C1Task+0x234>
 80013c2:	2203      	movs	r2, #3
 80013c4:	2118      	movs	r1, #24
 80013c6:	6838      	ldr	r0, [r7, #0]
 80013c8:	f005 fe58 	bl	800707c <MCP9808_SetLimit>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d002      	beq.n	80013d8 <I2C1Task+0x5c>
    printf("MCP9808 Set Lower Limit Failed\n");
 80013d2:	4878      	ldr	r0, [pc, #480]	; (80015b4 <I2C1Task+0x238>)
 80013d4:	f015 feb2 	bl	801713c <puts>
  if(MCP9808_SetLimit(hi2c, MCP9808_ADDRESS, MCP9808_REG_CRIT_TEMP, BOARD_TEMP_CRIT) != MCP9808_OK)
 80013d8:	ed9f 0a77 	vldr	s0, [pc, #476]	; 80015b8 <I2C1Task+0x23c>
 80013dc:	2204      	movs	r2, #4
 80013de:	2118      	movs	r1, #24
 80013e0:	6838      	ldr	r0, [r7, #0]
 80013e2:	f005 fe4b 	bl	800707c <MCP9808_SetLimit>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d002      	beq.n	80013f2 <I2C1Task+0x76>
    printf("MCP9808 Set Critical Limit Failed\n");
 80013ec:	4873      	ldr	r0, [pc, #460]	; (80015bc <I2C1Task+0x240>)
 80013ee:	f015 fea5 	bl	801713c <puts>
  //Setup configuration
  //Enable alert pin
  //Lock Tupper/Tlower window settings
  //Lock Tcrit settings
  //Set Tupper/Tlower hysteresis to +1.5 deg C
  MCP9808_Write16(hi2c, MCP9808_ADDRESS, MCP9808_REG_CONFIG, (MCP9808_REG_CONFIG_ALERTCTRL | MCP9808_REG_CONFIG_WINLOCKED | MCP9808_REG_CONFIG_CRITLOCKED | MCP9808_REG_CONFIG_HYST_1_5));
 80013f2:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 80013f6:	2201      	movs	r2, #1
 80013f8:	2118      	movs	r1, #24
 80013fa:	6838      	ldr	r0, [r7, #0]
 80013fc:	f005 fef6 	bl	80071ec <MCP9808_Write16>

  //=====================================================================================================
  // PCA9555 Profet GPIO Configuration
  //=====================================================================================================
  //Set configuration registers (all to output)
  PCA9539_WriteReg16(hi2c, PCA9539_ADDRESS_BANK1, PCA9539_CMD_CONFIG_PORT0, 0x0000);
 8001400:	2300      	movs	r3, #0
 8001402:	2206      	movs	r2, #6
 8001404:	2174      	movs	r1, #116	; 0x74
 8001406:	6838      	ldr	r0, [r7, #0]
 8001408:	f005 ff84 	bl	8007314 <PCA9539_WriteReg16>

  //=====================================================================================================
  // ADS1x15 Analog In Configuration
  //=====================================================================================================
  stAdcPfBank1.deviceType = ADS1015;
 800140c:	4b6c      	ldr	r3, [pc, #432]	; (80015c0 <I2C1Task+0x244>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
  stAdcPfBank1.bitShift = 0;
 8001412:	4b6b      	ldr	r3, [pc, #428]	; (80015c0 <I2C1Task+0x244>)
 8001414:	2200      	movs	r2, #0
 8001416:	715a      	strb	r2, [r3, #5]
  stAdcPfBank1.gain = GAIN_ONE;
 8001418:	4b69      	ldr	r3, [pc, #420]	; (80015c0 <I2C1Task+0x244>)
 800141a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141e:	805a      	strh	r2, [r3, #2]
  stAdcPfBank1.dataRate = ADS1015_DATARATE_3300SPS;
 8001420:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <I2C1Task+0x244>)
 8001422:	22c0      	movs	r2, #192	; 0xc0
 8001424:	711a      	strb	r2, [r3, #4]
   //=====================================================================================================
   // Set Profet
   // DSEL to channel 1
   // Enable all DEN
   //=====================================================================================================
   pfGpioBank1 &= ~PF_BANK1_DSEL;
 8001426:	4b67      	ldr	r3, [pc, #412]	; (80015c4 <I2C1Task+0x248>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800142e:	b29a      	uxth	r2, r3
 8001430:	4b64      	ldr	r3, [pc, #400]	; (80015c4 <I2C1Task+0x248>)
 8001432:	801a      	strh	r2, [r3, #0]
   pfGpioBank1 |= PF_BANK1_DEN;
 8001434:	4b63      	ldr	r3, [pc, #396]	; (80015c4 <I2C1Task+0x248>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 800143c:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8001440:	b29a      	uxth	r2, r3
 8001442:	4b60      	ldr	r3, [pc, #384]	; (80015c4 <I2C1Task+0x248>)
 8001444:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 8001446:	4b5f      	ldr	r3, [pc, #380]	; (80015c4 <I2C1Task+0x248>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	2202      	movs	r2, #2
 800144c:	2174      	movs	r1, #116	; 0x74
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f005 ff60 	bl	8007314 <PCA9539_WriteReg16>

   //=====================================================================================================
   // ADS1115 Analog Input
   //=====================================================================================================
   for(int i = 0; i < 4; i++){
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e017      	b.n	800148a <I2C1Task+0x10e>
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, i);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4a58      	ldr	r2, [pc, #352]	; (80015c0 <I2C1Task+0x244>)
 8001460:	2148      	movs	r1, #72	; 0x48
 8001462:	6838      	ldr	r0, [r7, #0]
 8001464:	f005 fc00 	bl	8006c68 <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     osDelay(ADS1015_CONVERSIONDELAY);
 8001468:	2001      	movs	r0, #1
 800146a:	f012 fc7d 	bl	8013d68 <osDelay>

     //Read channel value
     nPfISBank1Raw[i] = ADS1x15_ReadADC(hi2c, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1);
 800146e:	4a54      	ldr	r2, [pc, #336]	; (80015c0 <I2C1Task+0x244>)
 8001470:	2148      	movs	r1, #72	; 0x48
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	f005 fc64 	bl	8006d40 <ADS1x15_ReadADC>
 8001478:	4603      	mov	r3, r0
 800147a:	4619      	mov	r1, r3
 800147c:	4a52      	ldr	r2, [pc, #328]	; (80015c8 <I2C1Task+0x24c>)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int i = 0; i < 4; i++){
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b03      	cmp	r3, #3
 800148e:	dde4      	ble.n	800145a <I2C1Task+0xde>
   }

   Profet_UpdateIS(&pf[0], nPfISBank1Raw[3]);
 8001490:	4b4d      	ldr	r3, [pc, #308]	; (80015c8 <I2C1Task+0x24c>)
 8001492:	88db      	ldrh	r3, [r3, #6]
 8001494:	4619      	mov	r1, r3
 8001496:	484d      	ldr	r0, [pc, #308]	; (80015cc <I2C1Task+0x250>)
 8001498:	f006 fae6 	bl	8007a68 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[1], nPfISBank1Raw[2]);
 800149c:	4b4a      	ldr	r3, [pc, #296]	; (80015c8 <I2C1Task+0x24c>)
 800149e:	889b      	ldrh	r3, [r3, #4]
 80014a0:	4619      	mov	r1, r3
 80014a2:	484b      	ldr	r0, [pc, #300]	; (80015d0 <I2C1Task+0x254>)
 80014a4:	f006 fae0 	bl	8007a68 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[2], nPfISBank1Raw[1]);
 80014a8:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <I2C1Task+0x24c>)
 80014aa:	885b      	ldrh	r3, [r3, #2]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4849      	ldr	r0, [pc, #292]	; (80015d4 <I2C1Task+0x258>)
 80014b0:	f006 fada 	bl	8007a68 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[4], nPfISBank1Raw[0]);
 80014b4:	4b44      	ldr	r3, [pc, #272]	; (80015c8 <I2C1Task+0x24c>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	4847      	ldr	r0, [pc, #284]	; (80015d8 <I2C1Task+0x25c>)
 80014bc:	f006 fad4 	bl	8007a68 <Profet_UpdateIS>

   //=====================================================================================================
   //Flip Profet DSEL to channel 2
   //=====================================================================================================
   pfGpioBank1 |= PF_BANK1_DSEL;
 80014c0:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <I2C1Task+0x248>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <I2C1Task+0x248>)
 80014cc:	801a      	strh	r2, [r3, #0]

   PCA9539_WriteReg16(hi2c, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <I2C1Task+0x248>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	2202      	movs	r2, #2
 80014d4:	2174      	movs	r1, #116	; 0x74
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f005 ff1c 	bl	8007314 <PCA9539_WriteReg16>

   for(int i = 0; i < 2; i++){
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	e017      	b.n	8001512 <I2C1Task+0x196>
     //Send channel register
     //Sets ADC multiplexer - must delay after for conversion
     ADS1x15_SendRegs(hi2c, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1, i);
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4a36      	ldr	r2, [pc, #216]	; (80015c0 <I2C1Task+0x244>)
 80014e8:	2148      	movs	r1, #72	; 0x48
 80014ea:	6838      	ldr	r0, [r7, #0]
 80014ec:	f005 fbbc 	bl	8006c68 <ADS1x15_SendRegs>

     //Delay for conversion
     //860 SPS = 1.16ms per conversion - delay 2ms
     osDelay(ADS1015_CONVERSIONDELAY);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f012 fc39 	bl	8013d68 <osDelay>

     //Read channel value
     nPfISBank1Raw[i] = ADS1x15_ReadADC(hi2c, ADS1015_ADDRESS_PF_BANK1, &stAdcPfBank1);
 80014f6:	4a32      	ldr	r2, [pc, #200]	; (80015c0 <I2C1Task+0x244>)
 80014f8:	2148      	movs	r1, #72	; 0x48
 80014fa:	6838      	ldr	r0, [r7, #0]
 80014fc:	f005 fc20 	bl	8006d40 <ADS1x15_ReadADC>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	4a30      	ldr	r2, [pc, #192]	; (80015c8 <I2C1Task+0x24c>)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int i = 0; i < 2; i++){
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	3301      	adds	r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	dde4      	ble.n	80014e2 <I2C1Task+0x166>
   }

   //=====================================================================================================
   // Scale to IS Values
   //=====================================================================================================
   Profet_UpdateIS(&pf[3], nPfISBank1Raw[1]);
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <I2C1Task+0x24c>)
 800151a:	885b      	ldrh	r3, [r3, #2]
 800151c:	4619      	mov	r1, r3
 800151e:	482f      	ldr	r0, [pc, #188]	; (80015dc <I2C1Task+0x260>)
 8001520:	f006 faa2 	bl	8007a68 <Profet_UpdateIS>
   Profet_UpdateIS(&pf[5], nPfISBank1Raw[0]);
 8001524:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <I2C1Task+0x24c>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	482d      	ldr	r0, [pc, #180]	; (80015e0 <I2C1Task+0x264>)
 800152c:	f006 fa9c 	bl	8007a68 <Profet_UpdateIS>
   // Profet I2C GPIO
   // PCA9555
   // PF1-6 Bank 1
   // PF7-12 Bank 2
   //=====================================================================================================
   InputLogic();
 8001530:	f7ff fe20 	bl	8001174 <InputLogic>
   OutputLogic();
 8001534:	f7ff fecc 	bl	80012d0 <OutputLogic>
   PCA9539_WriteReg16(hi2c, PCA9539_ADDRESS_BANK1, PCA9539_CMD_OUT_PORT0, pfGpioBank1);
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <I2C1Task+0x248>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	2202      	movs	r2, #2
 800153e:	2174      	movs	r1, #116	; 0x74
 8001540:	6838      	ldr	r0, [r7, #0]
 8001542:	f005 fee7 	bl	8007314 <PCA9539_WriteReg16>

   //=====================================================================================================
   // MCP9808 temperature sensor
   //=====================================================================================================
   fBoardTempC = MCP9808_ReadTempC(hi2c, MCP9808_ADDRESS);
 8001546:	2118      	movs	r1, #24
 8001548:	6838      	ldr	r0, [r7, #0]
 800154a:	f005 fd0d 	bl	8006f68 <MCP9808_ReadTempC>
 800154e:	eef0 7a40 	vmov.f32	s15, s0
 8001552:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <I2C1Task+0x268>)
 8001554:	edc3 7a00 	vstr	s15, [r3]
   fBoardTempF = MCP9808_ConvertToF(fBoardTempC);
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <I2C1Task+0x268>)
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	f005 fd43 	bl	8006fec <MCP9808_ConvertToF>
 8001566:	eef0 7a40 	vmov.f32	s15, s0
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <I2C1Task+0x26c>)
 800156c:	edc3 7a00 	vstr	s15, [r3]

   if(MCP9808_GetOvertemp()) printf("*******MCP9808 Overtemp Detected*******\n");
 8001570:	f005 fec4 	bl	80072fc <MCP9808_GetOvertemp>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <I2C1Task+0x204>
 800157a:	481c      	ldr	r0, [pc, #112]	; (80015ec <I2C1Task+0x270>)
 800157c:	f015 fdde 	bl	801713c <puts>
   if(MCP9808_GetCriticalTemp()) printf("*******MCP9808 CRITICAL Overtemp Detected*******\n");
 8001580:	f005 feb0 	bl	80072e4 <MCP9808_GetCriticalTemp>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <I2C1Task+0x214>
 800158a:	4819      	ldr	r0, [pc, #100]	; (80015f0 <I2C1Task+0x274>)
 800158c:	f015 fdd6 	bl	801713c <puts>

   //Debug GPIO
   EXTRA1_GPIO_Port->ODR ^= EXTRA1_Pin;
 8001590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800159a:	f083 0310 	eor.w	r3, r3, #16
 800159e:	6153      	str	r3, [r2, #20]
   pfGpioBank1 &= ~PF_BANK1_DSEL;
 80015a0:	e741      	b.n	8001426 <I2C1Task+0xaa>
 80015a2:	bf00      	nop
 80015a4:	08017a74 	.word	0x08017a74
 80015a8:	42480000 	.word	0x42480000
 80015ac:	08017a88 	.word	0x08017a88
 80015b0:	00000000 	.word	0x00000000
 80015b4:	08017aa8 	.word	0x08017aa8
 80015b8:	42a00000 	.word	0x42a00000
 80015bc:	08017ac8 	.word	0x08017ac8
 80015c0:	20000dfc 	.word	0x20000dfc
 80015c4:	20000de6 	.word	0x20000de6
 80015c8:	20000dec 	.word	0x20000dec
 80015cc:	20000ae4 	.word	0x20000ae4
 80015d0:	20000b24 	.word	0x20000b24
 80015d4:	20000b64 	.word	0x20000b64
 80015d8:	20000be4 	.word	0x20000be4
 80015dc:	20000ba4 	.word	0x20000ba4
 80015e0:	20000c24 	.word	0x20000c24
 80015e4:	20000e10 	.word	0x20000e10
 80015e8:	20000e14 	.word	0x20000e14
 80015ec:	08017aec 	.word	0x08017aec
 80015f0:	08017b14 	.word	0x08017b14

080015f4 <I2C2Task>:

   //osDelay(I2C_TASK_DELAY);
 }
}

void I2C2Task(osThreadId_t* thisThreadId, I2C_HandleTypeDef* hi2c){
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  //=====================================================================================================
  // PCA9555 Profet GPIO Configuration
  //=====================================================================================================
  //Set configuration registers (all to output)
  PCA9539_WriteReg16(hi2c, PCA9539_ADDRESS_BANK2, PCA9539_CMD_CONFIG_PORT0, 0x0000);
 80015fe:	2300      	movs	r3, #0
 8001600:	2206      	movs	r2, #6
 8001602:	2174      	movs	r1, #116	; 0x74
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f005 fe85 	bl	8007314 <PCA9539_WriteReg16>

  //=====================================================================================================
  // ADS1x15 Analog In Configuration
  //=====================================================================================================
  stAdcPfBank2.deviceType = ADS1015;
 800160a:	4ba2      	ldr	r3, [pc, #648]	; (8001894 <I2C2Task+0x2a0>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
  stAdcPfBank2.bitShift = 0;
 8001610:	4ba0      	ldr	r3, [pc, #640]	; (8001894 <I2C2Task+0x2a0>)
 8001612:	2200      	movs	r2, #0
 8001614:	715a      	strb	r2, [r3, #5]
  stAdcPfBank2.gain = GAIN_ONE;
 8001616:	4b9f      	ldr	r3, [pc, #636]	; (8001894 <I2C2Task+0x2a0>)
 8001618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161c:	805a      	strh	r2, [r3, #2]
  stAdcPfBank2.dataRate = ADS1015_DATARATE_3300SPS;
 800161e:	4b9d      	ldr	r3, [pc, #628]	; (8001894 <I2C2Task+0x2a0>)
 8001620:	22c0      	movs	r2, #192	; 0xc0
 8001622:	711a      	strb	r2, [r3, #4]

  //=====================================================================================================
  // PCA9635 LED Configuration
  //=====================================================================================================
  //Send configuration, set to blink/flasher
  PCA9635_Init(hi2c, PCA9635_ADDRESS, PCA9635_BLINK);
 8001624:	2201      	movs	r2, #1
 8001626:	2130      	movs	r1, #48	; 0x30
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	f005 fe9a 	bl	8007362 <PCA9635_Init>

  //Set flashing frequency
  PCA9635_SetGroupFreq(hi2c, PCA9635_ADDRESS, PCA9635_FLASH_FREQ);
 800162e:	2202      	movs	r2, #2
 8001630:	2130      	movs	r1, #48	; 0x30
 8001632:	6838      	ldr	r0, [r7, #0]
 8001634:	f005 ff06 	bl	8007444 <PCA9635_SetGroupFreq>

  //Set PWM duty cycle for each channel (overriden by group PWM)
  for(int i=0; i<16; i++){
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e009      	b.n	8001652 <I2C2Task+0x5e>
    PCA9635_SetPWM(hi2c, PCA9635_ADDRESS, i, 255);
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	23ff      	movs	r3, #255	; 0xff
 8001644:	2130      	movs	r1, #48	; 0x30
 8001646:	6838      	ldr	r0, [r7, #0]
 8001648:	f005 feba 	bl	80073c0 <PCA9635_SetPWM>
  for(int i=0; i<16; i++){
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	ddf2      	ble.n	800163e <I2C2Task+0x4a>
  }

  //Set flashing duty cycle
  PCA9635_SetGroupPWM(hi2c, PCA9635_ADDRESS, PCA9635_FLASH_DUTY_CYCLE); //Have to set individual brightness levels first
 8001658:	2280      	movs	r2, #128	; 0x80
 800165a:	2130      	movs	r1, #48	; 0x30
 800165c:	6838      	ldr	r0, [r7, #0]
 800165e:	f005 fed5 	bl	800740c <PCA9635_SetGroupPWM>

  //Start LED test sequence
  nLEDTestSeqIndex = 1;
 8001662:	4b8d      	ldr	r3, [pc, #564]	; (8001898 <I2C2Task+0x2a4>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
  nLEDTestSeqLastTime = HAL_GetTick();
 8001668:	f007 f8ba 	bl	80087e0 <HAL_GetTick>
 800166c:	4603      	mov	r3, r0
 800166e:	4a8b      	ldr	r2, [pc, #556]	; (800189c <I2C2Task+0x2a8>)
 8001670:	6013      	str	r3, [r2, #0]
    //=====================================================================================================
    // Set Profet
    // DSEL to channel 1
    // Enable all DEN
    //=====================================================================================================
    pfGpioBank2 &= ~PF_BANK2_DSEL;
 8001672:	4b8b      	ldr	r3, [pc, #556]	; (80018a0 <I2C2Task+0x2ac>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	f423 7308 	bic.w	r3, r3, #544	; 0x220
 800167a:	b29a      	uxth	r2, r3
 800167c:	4b88      	ldr	r3, [pc, #544]	; (80018a0 <I2C2Task+0x2ac>)
 800167e:	801a      	strh	r2, [r3, #0]
    pfGpioBank2 |= PF_BANK2_DEN;
 8001680:	4b87      	ldr	r3, [pc, #540]	; (80018a0 <I2C2Task+0x2ac>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
 8001688:	f043 0305 	orr.w	r3, r3, #5
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b84      	ldr	r3, [pc, #528]	; (80018a0 <I2C2Task+0x2ac>)
 8001690:	801a      	strh	r2, [r3, #0]

    PCA9539_WriteReg16(hi2c, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 8001692:	4b83      	ldr	r3, [pc, #524]	; (80018a0 <I2C2Task+0x2ac>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	2202      	movs	r2, #2
 8001698:	2174      	movs	r1, #116	; 0x74
 800169a:	6838      	ldr	r0, [r7, #0]
 800169c:	f005 fe3a 	bl	8007314 <PCA9539_WriteReg16>

    //=====================================================================================================
    // ADS1115 Analog Input
    //=====================================================================================================
    for(int i = 0; i < 4; i++){
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	e017      	b.n	80016d6 <I2C2Task+0xe2>
      //Send channel register
      //Sets ADC multiplexer - must delay after for conversion
      ADS1x15_SendRegs(hi2c, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, i);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	4a7a      	ldr	r2, [pc, #488]	; (8001894 <I2C2Task+0x2a0>)
 80016ac:	2148      	movs	r1, #72	; 0x48
 80016ae:	6838      	ldr	r0, [r7, #0]
 80016b0:	f005 fada 	bl	8006c68 <ADS1x15_SendRegs>

      //Delay for conversion
      //860 SPS = 1.16ms per conversion - delay 2ms
      osDelay(ADS1015_CONVERSIONDELAY);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f012 fb57 	bl	8013d68 <osDelay>

      //Read channel value
      nPfISBank2Raw[i] = ADS1x15_ReadADC(hi2c, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2);
 80016ba:	4a76      	ldr	r2, [pc, #472]	; (8001894 <I2C2Task+0x2a0>)
 80016bc:	2148      	movs	r1, #72	; 0x48
 80016be:	6838      	ldr	r0, [r7, #0]
 80016c0:	f005 fb3e 	bl	8006d40 <ADS1x15_ReadADC>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4619      	mov	r1, r3
 80016c8:	4a76      	ldr	r2, [pc, #472]	; (80018a4 <I2C2Task+0x2b0>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < 4; i++){
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	3301      	adds	r3, #1
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	dde4      	ble.n	80016a6 <I2C2Task+0xb2>
    }

    Profet_UpdateIS(&pf[6], nPfISBank2Raw[0]);
 80016dc:	4b71      	ldr	r3, [pc, #452]	; (80018a4 <I2C2Task+0x2b0>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	4871      	ldr	r0, [pc, #452]	; (80018a8 <I2C2Task+0x2b4>)
 80016e4:	f006 f9c0 	bl	8007a68 <Profet_UpdateIS>
    Profet_UpdateIS(&pf[7], nPfISBank2Raw[1]);
 80016e8:	4b6e      	ldr	r3, [pc, #440]	; (80018a4 <I2C2Task+0x2b0>)
 80016ea:	885b      	ldrh	r3, [r3, #2]
 80016ec:	4619      	mov	r1, r3
 80016ee:	486f      	ldr	r0, [pc, #444]	; (80018ac <I2C2Task+0x2b8>)
 80016f0:	f006 f9ba 	bl	8007a68 <Profet_UpdateIS>
    Profet_UpdateIS(&pf[9], nPfISBank2Raw[2]);
 80016f4:	4b6b      	ldr	r3, [pc, #428]	; (80018a4 <I2C2Task+0x2b0>)
 80016f6:	889b      	ldrh	r3, [r3, #4]
 80016f8:	4619      	mov	r1, r3
 80016fa:	486d      	ldr	r0, [pc, #436]	; (80018b0 <I2C2Task+0x2bc>)
 80016fc:	f006 f9b4 	bl	8007a68 <Profet_UpdateIS>
    Profet_UpdateIS(&pf[11], nPfISBank2Raw[3]);
 8001700:	4b68      	ldr	r3, [pc, #416]	; (80018a4 <I2C2Task+0x2b0>)
 8001702:	88db      	ldrh	r3, [r3, #6]
 8001704:	4619      	mov	r1, r3
 8001706:	486b      	ldr	r0, [pc, #428]	; (80018b4 <I2C2Task+0x2c0>)
 8001708:	f006 f9ae 	bl	8007a68 <Profet_UpdateIS>

    //=====================================================================================================
    //Flip Profet DSEL to channel 2
    //=====================================================================================================
    pfGpioBank2 |= PF_BANK2_DSEL;
 800170c:	4b64      	ldr	r3, [pc, #400]	; (80018a0 <I2C2Task+0x2ac>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	f443 7308 	orr.w	r3, r3, #544	; 0x220
 8001714:	b29a      	uxth	r2, r3
 8001716:	4b62      	ldr	r3, [pc, #392]	; (80018a0 <I2C2Task+0x2ac>)
 8001718:	801a      	strh	r2, [r3, #0]

    PCA9539_WriteReg16(hi2c, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 800171a:	4b61      	ldr	r3, [pc, #388]	; (80018a0 <I2C2Task+0x2ac>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	2202      	movs	r2, #2
 8001720:	2174      	movs	r1, #116	; 0x74
 8001722:	6838      	ldr	r0, [r7, #0]
 8001724:	f005 fdf6 	bl	8007314 <PCA9539_WriteReg16>

    for(int i = 0; i < 2; i++){
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e01a      	b.n	8001764 <I2C2Task+0x170>
      //Send channel register
      //Sets ADC multiplexer - must delay after for conversion
      ADS1x15_SendRegs(hi2c, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2, i+2);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3302      	adds	r3, #2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	4a57      	ldr	r2, [pc, #348]	; (8001894 <I2C2Task+0x2a0>)
 8001738:	2148      	movs	r1, #72	; 0x48
 800173a:	6838      	ldr	r0, [r7, #0]
 800173c:	f005 fa94 	bl	8006c68 <ADS1x15_SendRegs>

      //Delay for conversion
      //860 SPS = 1.16ms per conversion - delay 2ms
      osDelay(ADS1015_CONVERSIONDELAY);
 8001740:	2001      	movs	r0, #1
 8001742:	f012 fb11 	bl	8013d68 <osDelay>

      //Read channel value
      nPfISBank2Raw[i+2] = ADS1x15_ReadADC(hi2c, ADS1015_ADDRESS_PF_BANK2, &stAdcPfBank2);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1c9c      	adds	r4, r3, #2
 800174a:	4a52      	ldr	r2, [pc, #328]	; (8001894 <I2C2Task+0x2a0>)
 800174c:	2148      	movs	r1, #72	; 0x48
 800174e:	6838      	ldr	r0, [r7, #0]
 8001750:	f005 faf6 	bl	8006d40 <ADS1x15_ReadADC>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	4b52      	ldr	r3, [pc, #328]	; (80018a4 <I2C2Task+0x2b0>)
 800175a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    for(int i = 0; i < 2; i++){
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3301      	adds	r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b01      	cmp	r3, #1
 8001768:	dde1      	ble.n	800172e <I2C2Task+0x13a>
    }

    //=====================================================================================================
    // Scale to IS Values
    //=====================================================================================================
    Profet_UpdateIS(&pf[8], nPfISBank2Raw[2]);
 800176a:	4b4e      	ldr	r3, [pc, #312]	; (80018a4 <I2C2Task+0x2b0>)
 800176c:	889b      	ldrh	r3, [r3, #4]
 800176e:	4619      	mov	r1, r3
 8001770:	4851      	ldr	r0, [pc, #324]	; (80018b8 <I2C2Task+0x2c4>)
 8001772:	f006 f979 	bl	8007a68 <Profet_UpdateIS>
    Profet_UpdateIS(&pf[10], nPfISBank2Raw[3]);
 8001776:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <I2C2Task+0x2b0>)
 8001778:	88db      	ldrh	r3, [r3, #6]
 800177a:	4619      	mov	r1, r3
 800177c:	484f      	ldr	r0, [pc, #316]	; (80018bc <I2C2Task+0x2c8>)
 800177e:	f006 f973 	bl	8007a68 <Profet_UpdateIS>
    // Profet I2C GPIO
    // PCA9555
    // PF1-6 Bank 1
    // PF7-12 Bank 2
    //=====================================================================================================
    InputLogic();
 8001782:	f7ff fcf7 	bl	8001174 <InputLogic>
    OutputLogic();
 8001786:	f7ff fda3 	bl	80012d0 <OutputLogic>
    PCA9539_WriteReg16(hi2c, PCA9539_ADDRESS_BANK2, PCA9539_CMD_OUT_PORT0, pfGpioBank2);
 800178a:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <I2C2Task+0x2ac>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	2202      	movs	r2, #2
 8001790:	2174      	movs	r1, #116	; 0x74
 8001792:	6838      	ldr	r0, [r7, #0]
 8001794:	f005 fdbe 	bl	8007314 <PCA9539_WriteReg16>

    //=====================================================================================================
    // Status LEDs
    //=====================================================================================================
    if(nLEDTestSeqIndex > 0)
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <I2C2Task+0x2a4>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d02c      	beq.n	80017fa <I2C2Task+0x206>
    {
      nLEDTestSeqValues = (0x00000001 << ((nLEDTestSeqIndex-1)*2));
 80017a0:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <I2C2Task+0x2a4>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2201      	movs	r2, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <I2C2Task+0x2cc>)
 80017b2:	601a      	str	r2, [r3, #0]

      PCA9635_SetAllNum(hi2c, PCA9635_ADDRESS, nLEDTestSeqValues);
 80017b4:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <I2C2Task+0x2cc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	2130      	movs	r1, #48	; 0x30
 80017bc:	6838      	ldr	r0, [r7, #0]
 80017be:	f005 fe5d 	bl	800747c <PCA9635_SetAllNum>

      if((HAL_GetTick() - nLEDTestSeqLastTime) > LED_TEST_SEQ_DELAY)
 80017c2:	f007 f80d 	bl	80087e0 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	4b34      	ldr	r3, [pc, #208]	; (800189c <I2C2Task+0x2a8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b32      	cmp	r3, #50	; 0x32
 80017d0:	d90a      	bls.n	80017e8 <I2C2Task+0x1f4>
      {
        nLEDTestSeqLastTime = HAL_GetTick();
 80017d2:	f007 f805 	bl	80087e0 <HAL_GetTick>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a30      	ldr	r2, [pc, #192]	; (800189c <I2C2Task+0x2a8>)
 80017da:	6013      	str	r3, [r2, #0]
        nLEDTestSeqIndex++;
 80017dc:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <I2C2Task+0x2a4>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <I2C2Task+0x2a4>)
 80017e6:	701a      	strb	r2, [r3, #0]
      }

      //Last step
      if(nLEDTestSeqIndex > 16)
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <I2C2Task+0x2a4>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b10      	cmp	r3, #16
 80017ee:	f67f af40 	bls.w	8001672 <I2C2Task+0x7e>
        nLEDTestSeqIndex = 0;
 80017f2:	4b29      	ldr	r3, [pc, #164]	; (8001898 <I2C2Task+0x2a4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e73b      	b.n	8001672 <I2C2Task+0x7e>
    }
    else
    {
      for(int i=0; i<12; i++){
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	e00d      	b.n	800181c <I2C2Task+0x228>
        SetPfStatusLed(&eStatusLeds[i], &pf[i]);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4a30      	ldr	r2, [pc, #192]	; (80018c4 <I2C2Task+0x2d0>)
 8001804:	441a      	add	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	019b      	lsls	r3, r3, #6
 800180a:	492f      	ldr	r1, [pc, #188]	; (80018c8 <I2C2Task+0x2d4>)
 800180c:	440b      	add	r3, r1
 800180e:	4619      	mov	r1, r3
 8001810:	4610      	mov	r0, r2
 8001812:	f000 febf 	bl	8002594 <SetPfStatusLed>
      for(int i=0; i<12; i++){
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	3301      	adds	r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b0b      	cmp	r3, #11
 8001820:	ddee      	ble.n	8001800 <I2C2Task+0x20c>
      }
      eStatusLeds[12] = (eDevMode == DEVICE_AUTO) + ((eDevMode == DEVICE_MANUAL) * LED_FLASH);              //State
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <I2C2Task+0x2d8>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf0c      	ite	eq
 800182a:	2301      	moveq	r3, #1
 800182c:	2300      	movne	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <I2C2Task+0x2d8>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <I2C2Task+0x24a>
 800183a:	2303      	movs	r3, #3
 800183c:	e000      	b.n	8001840 <I2C2Task+0x24c>
 800183e:	2300      	movs	r3, #0
 8001840:	4413      	add	r3, r2
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <I2C2Task+0x2d0>)
 8001846:	731a      	strb	r2, [r3, #12]
      eStatusLeds[13] = bUsbConnected;   //USB
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <I2C2Task+0x2dc>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <I2C2Task+0x2d0>)
 8001850:	735a      	strb	r2, [r3, #13]
      eStatusLeds[14] = (HAL_GetTick() - nLastCanUpdate) < 1000;              //CAN
 8001852:	f006 ffc5 	bl	80087e0 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <I2C2Task+0x2e0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001862:	4293      	cmp	r3, r2
 8001864:	bf94      	ite	ls
 8001866:	2301      	movls	r3, #1
 8001868:	2300      	movhi	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <I2C2Task+0x2d0>)
 8001870:	739a      	strb	r2, [r3, #14]
      eStatusLeds[15] = (eDevState == DEVICE_ERROR);   //Fault
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <I2C2Task+0x2e4>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b03      	cmp	r3, #3
 8001878:	bf0c      	ite	eq
 800187a:	2301      	moveq	r3, #1
 800187c:	2300      	movne	r3, #0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <I2C2Task+0x2d0>)
 8001884:	73da      	strb	r2, [r3, #15]
      PCA9635_SetAll(hi2c, PCA9635_ADDRESS, eStatusLeds);
 8001886:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <I2C2Task+0x2d0>)
 8001888:	2130      	movs	r1, #48	; 0x30
 800188a:	6838      	ldr	r0, [r7, #0]
 800188c:	f005 fe1e 	bl	80074cc <PCA9635_SetAll>
    pfGpioBank2 &= ~PF_BANK2_DSEL;
 8001890:	e6ef      	b.n	8001672 <I2C2Task+0x7e>
 8001892:	bf00      	nop
 8001894:	20000e04 	.word	0x20000e04
 8001898:	20000e34 	.word	0x20000e34
 800189c:	20000e3c 	.word	0x20000e3c
 80018a0:	20000de8 	.word	0x20000de8
 80018a4:	20000df4 	.word	0x20000df4
 80018a8:	20000c64 	.word	0x20000c64
 80018ac:	20000ca4 	.word	0x20000ca4
 80018b0:	20000d24 	.word	0x20000d24
 80018b4:	20000da4 	.word	0x20000da4
 80018b8:	20000ce4 	.word	0x20000ce4
 80018bc:	20000d64 	.word	0x20000d64
 80018c0:	20000e38 	.word	0x20000e38
 80018c4:	20000e24 	.word	0x20000e24
 80018c8:	20000ae4 	.word	0x20000ae4
 80018cc:	20000ae0 	.word	0x20000ae0
 80018d0:	20000e0c 	.word	0x20000e0c
 80018d4:	20000e88 	.word	0x20000e88
 80018d8:	20000ae1 	.word	0x20000ae1

080018dc <ProfetSMTask>:
  }
}


void ProfetSMTask(osThreadId_t* thisThreadId, I2C_HandleTypeDef* hi2c2, RTC_HandleTypeDef* hrtc)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b0ab      	sub	sp, #172	; 0xac
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  Profet_Init();
 80018e8:	f000 fe9c 	bl	8002624 <Profet_Init>

  MsgQueueUsbTx_t stMsgUsbTx;
  MsgQueueCanTx_t stMsgCanTx;

  RTC_TimeTypeDef stTime = {0};
 80018ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef stDate = {0};
 80018fc:	2300      	movs	r3, #0
 80018fe:	653b      	str	r3, [r7, #80]	; 0x50

  uint8_t nSend;

  for(;;){
    for(int i=0; i<12; i++){
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001906:	e00c      	b.n	8001922 <ProfetSMTask+0x46>
      Profet_SM(&pf[i]);
 8001908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	4ab7      	ldr	r2, [pc, #732]	; (8001bec <ProfetSMTask+0x310>)
 8001910:	4413      	add	r3, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f006 f844 	bl	80079a0 <Profet_SM>
    for(int i=0; i<12; i++){
 8001918:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800191c:	3301      	adds	r3, #1
 800191e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001926:	2b0b      	cmp	r3, #11
 8001928:	ddee      	ble.n	8001908 <ProfetSMTask+0x2c>
    }
    WiperSM(&stWiper);
 800192a:	48b1      	ldr	r0, [pc, #708]	; (8001bf0 <ProfetSMTask+0x314>)
 800192c:	f006 fee4 	bl	80086f8 <WiperSM>
    MsgQueueRx_t stMsgRx;
    osStatus_t eStatus;

    nMsgCnt = osMessageQueueGetCount(qMsgQueueRx);
 8001930:	4bb0      	ldr	r3, [pc, #704]	; (8001bf4 <ProfetSMTask+0x318>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f012 fbb1 	bl	801409c <osMessageQueueGetCount>
 800193a:	4603      	mov	r3, r0
 800193c:	4aae      	ldr	r2, [pc, #696]	; (8001bf8 <ProfetSMTask+0x31c>)
 800193e:	6013      	str	r3, [r2, #0]
    if(nMsgCnt == 16)
      EXTRA2_GPIO_Port->ODR |= EXTRA2_Pin;
    else
      EXTRA2_GPIO_Port->ODR &= ~EXTRA2_Pin;
*/
    eStatus = osMessageQueueGet(qMsgQueueRx, &stMsgRx, NULL, 0U);
 8001940:	4bac      	ldr	r3, [pc, #688]	; (8001bf4 <ProfetSMTask+0x318>)
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	f107 0114 	add.w	r1, r7, #20
 8001948:	2300      	movs	r3, #0
 800194a:	2200      	movs	r2, #0
 800194c:	f012 fb34 	bl	8013fb8 <osMessageQueueGet>
 8001950:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    if(eStatus == osOK){
 8001954:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001958:	2b00      	cmp	r3, #0
 800195a:	f040 837a 	bne.w	8002052 <ProfetSMTask+0x776>
      if(stMsgRx.eMsgSrc == CAN_RX){
 800195e:	7d3b      	ldrb	r3, [r7, #20]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d126      	bne.n	80019b2 <ProfetSMTask+0xd6>
        for(int i=0; i<30; i++){
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800196a:	e01e      	b.n	80019aa <ProfetSMTask+0xce>
          EvaluateCANInput(&stMsgRx.stCanRxHeader, stMsgRx.nRxData, &stPdmConfig.stCanInput[i], &nCanInputs[i]);
 800196c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800197c:	4a9f      	ldr	r2, [pc, #636]	; (8001bfc <ProfetSMTask+0x320>)
 800197e:	4413      	add	r3, r2
 8001980:	1d1a      	adds	r2, r3, #4
 8001982:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	499d      	ldr	r1, [pc, #628]	; (8001c00 <ProfetSMTask+0x324>)
 800198a:	185c      	adds	r4, r3, r1
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	f103 0120 	add.w	r1, r3, #32
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	1d18      	adds	r0, r3, #4
 800199a:	4623      	mov	r3, r4
 800199c:	f7ff f856 	bl	8000a4c <EvaluateCANInput>
        for(int i=0; i<30; i++){
 80019a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019a4:	3301      	adds	r3, #1
 80019a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80019aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019ae:	2b1d      	cmp	r3, #29
 80019b0:	dddc      	ble.n	800196c <ProfetSMTask+0x90>
        }
      }
      if((stMsgRx.eMsgSrc == CAN_RX && stMsgRx.stCanRxHeader.StdId == stPdmConfig.stCanOutput.nBaseId + 21) || (stMsgRx.eMsgSrc == USB_RX)){
 80019b2:	7d3b      	ldrb	r3, [r7, #20]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d106      	bne.n	80019c6 <ProfetSMTask+0xea>
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	4a90      	ldr	r2, [pc, #576]	; (8001bfc <ProfetSMTask+0x320>)
 80019bc:	f8b2 28ce 	ldrh.w	r2, [r2, #2254]	; 0x8ce
 80019c0:	3215      	adds	r2, #21
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d003      	beq.n	80019ce <ProfetSMTask+0xf2>
 80019c6:	7d3b      	ldrb	r3, [r7, #20]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	f040 8342 	bne.w	8002052 <ProfetSMTask+0x776>
        EXTRA2_GPIO_Port->ODR ^= EXTRA2_Pin;
 80019ce:	4b8d      	ldr	r3, [pc, #564]	; (8001c04 <ProfetSMTask+0x328>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	4a8c      	ldr	r2, [pc, #560]	; (8001c04 <ProfetSMTask+0x328>)
 80019d4:	f083 0304 	eor.w	r3, r3, #4
 80019d8:	6153      	str	r3, [r2, #20]

        nSend = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

        switch((MsgQueueRxCmd_t)stMsgRx.nRxData[0]){
 80019e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019e4:	3b42      	subs	r3, #66	; 0x42
 80019e6:	2b12      	cmp	r3, #18
 80019e8:	f200 832b 	bhi.w	8002042 <ProfetSMTask+0x766>
 80019ec:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <ProfetSMTask+0x118>)
 80019ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f2:	bf00      	nop
 80019f4:	08001a41 	.word	0x08001a41
 80019f8:	08002043 	.word	0x08002043
 80019fc:	08002043 	.word	0x08002043
 8001a00:	08002043 	.word	0x08002043
 8001a04:	08002043 	.word	0x08002043
 8001a08:	08002043 	.word	0x08002043
 8001a0c:	08002043 	.word	0x08002043
 8001a10:	08002043 	.word	0x08002043
 8001a14:	08002043 	.word	0x08002043
 8001a18:	08002043 	.word	0x08002043
 8001a1c:	08002043 	.word	0x08002043
 8001a20:	08001af1 	.word	0x08001af1
 8001a24:	08002043 	.word	0x08002043
 8001a28:	08002043 	.word	0x08002043
 8001a2c:	08002043 	.word	0x08002043
 8001a30:	08001c19 	.word	0x08001c19
 8001a34:	08001e55 	.word	0x08001e55
 8001a38:	08002043 	.word	0x08002043
 8001a3c:	08001f2d 	.word	0x08001f2d

            //Burn Settings
            // 'B'
            case MSG_RX_BURN_SETTINGS:
              //Check special number sequence
              if(stMsgRx.nRxLen == 4){
 8001a40:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	f040 8306 	bne.w	8002056 <ProfetSMTask+0x77a>
                if((stMsgRx.nRxData[1] == 1) && (stMsgRx.nRxData[2] == 23) && (stMsgRx.nRxData[3] == 20)){
 8001a4a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	f040 8301 	bne.w	8002056 <ProfetSMTask+0x77a>
 8001a54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a58:	2b17      	cmp	r3, #23
 8001a5a:	f040 82fc 	bne.w	8002056 <ProfetSMTask+0x77a>
 8001a5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a62:	2b14      	cmp	r3, #20
 8001a64:	f040 82f7 	bne.w	8002056 <ProfetSMTask+0x77a>
                  //Write settings to FRAM
                  uint8_t nRet = PdmConfig_Write(hi2c2, MB85RC_ADDRESS, &stPdmConfig);
 8001a68:	4a64      	ldr	r2, [pc, #400]	; (8001bfc <ProfetSMTask+0x320>)
 8001a6a:	2150      	movs	r1, #80	; 0x50
 8001a6c:	68b8      	ldr	r0, [r7, #8]
 8001a6e:	f001 ff2c 	bl	80038ca <PdmConfig_Write>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

                  stMsgUsbTx.nTxLen = 2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                  stMsgCanTx.stTxHeader.DLC = 2;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	67bb      	str	r3, [r7, #120]	; 0x78

                  stMsgUsbTx.nTxData[0] = MSG_TX_BURN_SETTINGS;
 8001a82:	2362      	movs	r3, #98	; 0x62
 8001a84:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                  stMsgUsbTx.nTxData[1] = nRet;
 8001a88:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001a8c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
                  stMsgUsbTx.nTxData[2] = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                  stMsgUsbTx.nTxData[3] = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                  stMsgUsbTx.nTxData[4] = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
                  stMsgUsbTx.nTxData[5] = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
                  stMsgUsbTx.nTxData[6] = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                  stMsgUsbTx.nTxData[7] = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                  stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <ProfetSMTask+0x320>)
 8001ab6:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8001aba:	3314      	adds	r3, #20
 8001abc:	66bb      	str	r3, [r7, #104]	; 0x68

                  memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001abe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ac2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aca:	e883 0003 	stmia.w	r3, {r0, r1}

                  osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001ace:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <ProfetSMTask+0x32c>)
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f012 f9f9 	bl	8013ed0 <osMessageQueuePut>
                  osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001ade:	4b4b      	ldr	r3, [pc, #300]	; (8001c0c <ProfetSMTask+0x330>)
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f012 f9f1 	bl	8013ed0 <osMessageQueuePut>
                }
              }
            break;
 8001aee:	e2b2      	b.n	8002056 <ProfetSMTask+0x77a>

           //Set Mode
           // 'M'
           case MSG_RX_SET_MODE:
             if(stMsgRx.nRxLen == 2){
 8001af0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d133      	bne.n	8001b60 <ProfetSMTask+0x284>
               switch(eDevMode){
 8001af8:	4b45      	ldr	r3, [pc, #276]	; (8001c10 <ProfetSMTask+0x334>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <ProfetSMTask+0x22a>
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d01d      	beq.n	8001b40 <ProfetSMTask+0x264>
 8001b04:	e029      	b.n	8001b5a <ProfetSMTask+0x27e>
               case DEVICE_AUTO:
                 if(stMsgRx.nRxData[1] & 0x01){ //Manual sent
 8001b06:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d020      	beq.n	8001b54 <ProfetSMTask+0x278>
                   for(int i=0; i<12; i++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b18:	e00a      	b.n	8001b30 <ProfetSMTask+0x254>
                     nManualOutputs[i] = 0;
 8001b1a:	4a3e      	ldr	r2, [pc, #248]	; (8001c14 <ProfetSMTask+0x338>)
 8001b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b20:	4413      	add	r3, r2
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
                   for(int i=0; i<12; i++)
 8001b26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b34:	2b0b      	cmp	r3, #11
 8001b36:	ddf0      	ble.n	8001b1a <ProfetSMTask+0x23e>
                   eDevMode = DEVICE_MANUAL;
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <ProfetSMTask+0x334>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 8001b3e:	e009      	b.n	8001b54 <ProfetSMTask+0x278>

               case DEVICE_MANUAL:
                 if(!(stMsgRx.nRxData[1] & 0x01)){ //Auto sent
 8001b40:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d105      	bne.n	8001b58 <ProfetSMTask+0x27c>
                   eDevMode = DEVICE_AUTO;
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <ProfetSMTask+0x334>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 8001b52:	e001      	b.n	8001b58 <ProfetSMTask+0x27c>
                 break;
 8001b54:	bf00      	nop
 8001b56:	e000      	b.n	8001b5a <ProfetSMTask+0x27e>
                 break;
 8001b58:	bf00      	nop
               }
               nSend = 1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
             }

             if((stMsgRx.nRxLen == 1) || (nSend)){
 8001b60:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d004      	beq.n	8001b72 <ProfetSMTask+0x296>
 8001b68:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 8274 	beq.w	800205a <ProfetSMTask+0x77e>
               stMsgUsbTx.nTxLen = 2;
 8001b72:	2302      	movs	r3, #2
 8001b74:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
               stMsgCanTx.stTxHeader.DLC = 2;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	67bb      	str	r3, [r7, #120]	; 0x78

               stMsgUsbTx.nTxData[0] = MSG_TX_SET_MODE;
 8001b7c:	236d      	movs	r3, #109	; 0x6d
 8001b7e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgUsbTx.nTxData[1] = (uint8_t)eDevMode;
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <ProfetSMTask+0x334>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
               stMsgUsbTx.nTxData[2] = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
               stMsgUsbTx.nTxData[3] = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
               stMsgUsbTx.nTxData[4] = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
               stMsgUsbTx.nTxData[5] = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
               stMsgUsbTx.nTxData[6] = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
               stMsgUsbTx.nTxData[7] = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <ProfetSMTask+0x320>)
 8001bb0:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8001bb4:	3314      	adds	r3, #20
 8001bb6:	66bb      	str	r3, [r7, #104]	; 0x68

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001bb8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bbc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001bc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bc4:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <ProfetSMTask+0x32c>)
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f012 f97c 	bl	8013ed0 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <ProfetSMTask+0x330>)
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001be0:	2300      	movs	r3, #0
 8001be2:	2200      	movs	r2, #0
 8001be4:	f012 f974 	bl	8013ed0 <osMessageQueuePut>
             }
           break;
 8001be8:	e237      	b.n	800205a <ProfetSMTask+0x77e>
 8001bea:	bf00      	nop
 8001bec:	20000ae4 	.word	0x20000ae4
 8001bf0:	20000ec0 	.word	0x20000ec0
 8001bf4:	20000ad4 	.word	0x20000ad4
 8001bf8:	200010e4 	.word	0x200010e4
 8001bfc:	20000200 	.word	0x20000200
 8001c00:	20001038 	.word	0x20001038
 8001c04:	48000400 	.word	0x48000400
 8001c08:	20000ad8 	.word	0x20000ad8
 8001c0c:	20000adc 	.word	0x20000adc
 8001c10:	20000ae0 	.word	0x20000ae0
 8001c14:	200023ac 	.word	0x200023ac


           //Force Outputs
           // 'Q'
           case MSG_RX_FORCE_OUTPUTS:
             if(stMsgRx.nRxLen == 7){
 8001c18:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001c1c:	2b07      	cmp	r3, #7
 8001c1e:	d16b      	bne.n	8001cf8 <ProfetSMTask+0x41c>
               if(eDevMode == DEVICE_MANUAL){
 8001c20:	4b87      	ldr	r3, [pc, #540]	; (8001e40 <ProfetSMTask+0x564>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d167      	bne.n	8001cf8 <ProfetSMTask+0x41c>
                 nManualOutputs[0] = (stMsgRx.nRxData[1] & 0x01);
 8001c28:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b84      	ldr	r3, [pc, #528]	; (8001e44 <ProfetSMTask+0x568>)
 8001c34:	701a      	strb	r2, [r3, #0]
                 nManualOutputs[1] = (stMsgRx.nRxData[1] & 0x02) >> 1;
 8001c36:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c3a:	105b      	asrs	r3, r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b7f      	ldr	r3, [pc, #508]	; (8001e44 <ProfetSMTask+0x568>)
 8001c46:	705a      	strb	r2, [r3, #1]
                 nManualOutputs[2] = (stMsgRx.nRxData[1] & 0x04) >> 2;
 8001c48:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c4c:	109b      	asrs	r3, r3, #2
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b7b      	ldr	r3, [pc, #492]	; (8001e44 <ProfetSMTask+0x568>)
 8001c58:	709a      	strb	r2, [r3, #2]
                 nManualOutputs[3] = (stMsgRx.nRxData[1] & 0x08) >> 3;
 8001c5a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c5e:	10db      	asrs	r3, r3, #3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b76      	ldr	r3, [pc, #472]	; (8001e44 <ProfetSMTask+0x568>)
 8001c6a:	70da      	strb	r2, [r3, #3]
                 nManualOutputs[4] = (stMsgRx.nRxData[1] & 0x10) >> 4;
 8001c6c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c70:	111b      	asrs	r3, r3, #4
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <ProfetSMTask+0x568>)
 8001c7c:	711a      	strb	r2, [r3, #4]
                 nManualOutputs[5] = (stMsgRx.nRxData[1] & 0x20) >> 5;
 8001c7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c82:	115b      	asrs	r3, r3, #5
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b6d      	ldr	r3, [pc, #436]	; (8001e44 <ProfetSMTask+0x568>)
 8001c8e:	715a      	strb	r2, [r3, #5]
                 nManualOutputs[6] = (stMsgRx.nRxData[1] & 0x40) >> 6;
 8001c90:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c94:	119b      	asrs	r3, r3, #6
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4b69      	ldr	r3, [pc, #420]	; (8001e44 <ProfetSMTask+0x568>)
 8001ca0:	719a      	strb	r2, [r3, #6]
                 nManualOutputs[7] = (stMsgRx.nRxData[1] & 0x80) >> 7;
 8001ca2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ca6:	09db      	lsrs	r3, r3, #7
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b66      	ldr	r3, [pc, #408]	; (8001e44 <ProfetSMTask+0x568>)
 8001cac:	71da      	strb	r2, [r3, #7]
                 nManualOutputs[8] = (stMsgRx.nRxData[2] & 0x01);
 8001cae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b62      	ldr	r3, [pc, #392]	; (8001e44 <ProfetSMTask+0x568>)
 8001cba:	721a      	strb	r2, [r3, #8]
                 nManualOutputs[9] = (stMsgRx.nRxData[2] & 0x02) >> 1;
 8001cbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cc0:	105b      	asrs	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b5e      	ldr	r3, [pc, #376]	; (8001e44 <ProfetSMTask+0x568>)
 8001ccc:	725a      	strb	r2, [r3, #9]
                 nManualOutputs[10] = (stMsgRx.nRxData[2] & 0x04) >> 2;
 8001cce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cd2:	109b      	asrs	r3, r3, #2
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b59      	ldr	r3, [pc, #356]	; (8001e44 <ProfetSMTask+0x568>)
 8001cde:	729a      	strb	r2, [r3, #10]
                 nManualOutputs[11] = (stMsgRx.nRxData[2] & 0x08) >> 3;
 8001ce0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ce4:	10db      	asrs	r3, r3, #3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4b55      	ldr	r3, [pc, #340]	; (8001e44 <ProfetSMTask+0x568>)
 8001cf0:	72da      	strb	r2, [r3, #11]
                 nSend = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
               }
             }
             if((stMsgRx.nRxLen == 1) || (nSend)){
 8001cf8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d004      	beq.n	8001d0a <ProfetSMTask+0x42e>
 8001d00:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 81aa 	beq.w	800205e <ProfetSMTask+0x782>
               stMsgUsbTx.nTxLen = 7;
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
               stMsgCanTx.stTxHeader.DLC = 7;
 8001d10:	2307      	movs	r3, #7
 8001d12:	67bb      	str	r3, [r7, #120]	; 0x78

               stMsgUsbTx.nTxData[0] = MSG_TX_FORCE_OUTPUTS;
 8001d14:	2371      	movs	r3, #113	; 0x71
 8001d16:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8001d1a:	4b4a      	ldr	r3, [pc, #296]	; (8001e44 <ProfetSMTask+0x568>)
 8001d1c:	79db      	ldrb	r3, [r3, #7]
 8001d1e:	01db      	lsls	r3, r3, #7
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4b48      	ldr	r3, [pc, #288]	; (8001e44 <ProfetSMTask+0x568>)
 8001d24:	799b      	ldrb	r3, [r3, #6]
 8001d26:	019b      	lsls	r3, r3, #6
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <ProfetSMTask+0x568>)
 8001d36:	795b      	ldrb	r3, [r3, #5]
 8001d38:	015b      	lsls	r3, r3, #5
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8001d42:	4413      	add	r3, r2
 8001d44:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8001d46:	4b3f      	ldr	r3, [pc, #252]	; (8001e44 <ProfetSMTask+0x568>)
 8001d48:	791b      	ldrb	r3, [r3, #4]
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8001d58:	4b3a      	ldr	r3, [pc, #232]	; (8001e44 <ProfetSMTask+0x568>)
 8001d5a:	78db      	ldrb	r3, [r3, #3]
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	b2db      	uxtb	r3, r3
                                       ((nManualOutputs[5] & 0x01) << 5) + ((nManualOutputs[4] & 0x01) << 4) +
 8001d66:	4413      	add	r3, r2
 8001d68:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8001d6a:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <ProfetSMTask+0x568>)
 8001d6c:	789b      	ldrb	r3, [r3, #2]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[1] & 0x01) << 1) + (nManualOutputs[0] & 0x01);
 8001d7c:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <ProfetSMTask+0x568>)
 8001d7e:	785b      	ldrb	r3, [r3, #1]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	b2db      	uxtb	r3, r3
                                       ((nManualOutputs[3] & 0x01) << 3) + ((nManualOutputs[2] & 0x01) << 2) +
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[1] & 0x01) << 1) + (nManualOutputs[0] & 0x01);
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <ProfetSMTask+0x568>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[1] = ((nManualOutputs[7] & 0x01) << 7) + ((nManualOutputs[6] & 0x01) << 6) +
 8001d9c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <ProfetSMTask+0x568>)
 8001da2:	7adb      	ldrb	r3, [r3, #11]
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	b25b      	sxtb	r3, r3
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	b25a      	sxtb	r2, r3
 8001dae:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <ProfetSMTask+0x568>)
 8001db0:	7a9b      	ldrb	r3, [r3, #10]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	b25b      	sxtb	r3, r3
 8001dc0:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[9] & 0x01) << 1) + (nManualOutputs[8] & 0x01);
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <ProfetSMTask+0x568>)
 8001dc4:	7a5b      	ldrb	r3, [r3, #9]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b2da      	uxtb	r2, r3
                                       ((nManualOutputs[9] & 0x01) << 1) + (nManualOutputs[8] & 0x01);
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <ProfetSMTask+0x568>)
 8001dd6:	7a1b      	ldrb	r3, [r3, #8]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	b2db      	uxtb	r3, r3
               stMsgUsbTx.nTxData[2] = ((nManualOutputs[11] & 0x01) << 3) + ((nManualOutputs[10] & 0x01) << 2) +
 8001de2:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

               //TODO:Add manual output modes
               stMsgUsbTx.nTxData[3] = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
               stMsgUsbTx.nTxData[4] = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
               stMsgUsbTx.nTxData[5] = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
               stMsgUsbTx.nTxData[6] = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
               stMsgUsbTx.nTxData[7] = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001e04:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <ProfetSMTask+0x56c>)
 8001e06:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8001e0a:	3314      	adds	r3, #20
 8001e0c:	66bb      	str	r3, [r7, #104]	; 0x68

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001e0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e12:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e1a:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <ProfetSMTask+0x570>)
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001e26:	2300      	movs	r3, #0
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f012 f851 	bl	8013ed0 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <ProfetSMTask+0x574>)
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001e36:	2300      	movs	r3, #0
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f012 f849 	bl	8013ed0 <osMessageQueuePut>
             }
           break;
 8001e3e:	e10e      	b.n	800205e <ProfetSMTask+0x782>
 8001e40:	20000ae0 	.word	0x20000ae0
 8001e44:	200023ac 	.word	0x200023ac
 8001e48:	20000200 	.word	0x20000200
 8001e4c:	20000ad8 	.word	0x20000ad8
 8001e50:	20000adc 	.word	0x20000adc

           //Set Reporting
           // 'R'
           case MSG_RX_SET_REPORTING:
             if(stMsgRx.nRxLen == 3){
 8001e54:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d118      	bne.n	8001e8e <ProfetSMTask+0x5b2>
               nReportingOn = stMsgRx.nRxData[1] & 0x01;
 8001e5c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b8e      	ldr	r3, [pc, #568]	; (80020a0 <ProfetSMTask+0x7c4>)
 8001e68:	701a      	strb	r2, [r3, #0]
               nReportingDelay = stMsgRx.nRxData[2] * 100;
 8001e6a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	0092      	lsls	r2, r2, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	461a      	mov	r2, r3
 8001e78:	0091      	lsls	r1, r2, #2
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	4b87      	ldr	r3, [pc, #540]	; (80020a4 <ProfetSMTask+0x7c8>)
 8001e86:	801a      	strh	r2, [r3, #0]
               nSend = 1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
             }
             if((stMsgRx.nRxLen == 1) || (nSend)){
 8001e8e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d004      	beq.n	8001ea0 <ProfetSMTask+0x5c4>
 8001e96:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80e1 	beq.w	8002062 <ProfetSMTask+0x786>
               stMsgUsbTx.nTxLen = 3;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
               stMsgCanTx.stTxHeader.DLC = 3;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	67bb      	str	r3, [r7, #120]	; 0x78

               stMsgUsbTx.nTxData[0] = MSG_TX_SET_REPORTING;
 8001eaa:	2372      	movs	r3, #114	; 0x72
 8001eac:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
               stMsgUsbTx.nTxData[1] = (nReportingOn & 0x01);
 8001eb0:	4b7b      	ldr	r3, [pc, #492]	; (80020a0 <ProfetSMTask+0x7c4>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
               stMsgUsbTx.nTxData[2] = (uint8_t)(nReportingDelay / 100);
 8001ebe:	4b79      	ldr	r3, [pc, #484]	; (80020a4 <ProfetSMTask+0x7c8>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	4a79      	ldr	r2, [pc, #484]	; (80020a8 <ProfetSMTask+0x7cc>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
               stMsgUsbTx.nTxData[3] = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
               stMsgUsbTx.nTxData[4] = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
               stMsgUsbTx.nTxData[5] = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
               stMsgUsbTx.nTxData[6] = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
               stMsgUsbTx.nTxData[7] = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

               stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8001ef0:	4b6e      	ldr	r3, [pc, #440]	; (80020ac <ProfetSMTask+0x7d0>)
 8001ef2:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8001ef6:	3314      	adds	r3, #20
 8001ef8:	66bb      	str	r3, [r7, #104]	; 0x68

               memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8001efa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001efe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f06:	e883 0003 	stmia.w	r3, {r0, r1}

               osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8001f0a:	4b69      	ldr	r3, [pc, #420]	; (80020b0 <ProfetSMTask+0x7d4>)
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001f12:	2300      	movs	r3, #0
 8001f14:	2200      	movs	r2, #0
 8001f16:	f011 ffdb 	bl	8013ed0 <osMessageQueuePut>
               osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8001f1a:	4b66      	ldr	r3, [pc, #408]	; (80020b4 <ProfetSMTask+0x7d8>)
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001f22:	2300      	movs	r3, #0
 8001f24:	2200      	movs	r2, #0
 8001f26:	f011 ffd3 	bl	8013ed0 <osMessageQueuePut>
             }
           break;
 8001f2a:	e09a      	b.n	8002062 <ProfetSMTask+0x786>

           //Set Time
           // 'T'
           case MSG_RX_SET_TIME:
             if(stMsgRx.nRxLen == 7){
 8001f2c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001f30:	2b07      	cmp	r3, #7
 8001f32:	d12f      	bne.n	8001f94 <ProfetSMTask+0x6b8>
               stTime.Hours = stMsgRx.nRxData[1];
 8001f34:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f38:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
               stTime.Minutes = stMsgRx.nRxData[2];
 8001f3c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001f40:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
               stTime.Seconds = stMsgRx.nRxData[3];
 8001f44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f48:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
               stTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	663b      	str	r3, [r7, #96]	; 0x60
               stTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f50:	2300      	movs	r3, #0
 8001f52:	667b      	str	r3, [r7, #100]	; 0x64

               stDate.Year = stMsgRx.nRxData[4];
 8001f54:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001f58:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
               stDate.Month = stMsgRx.nRxData[5];
 8001f5c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001f60:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
               stDate.Date = stMsgRx.nRxData[6];
 8001f64:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001f68:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
               stDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

               HAL_RTC_SetTime(hrtc, &stTime, RTC_FORMAT_BCD);
 8001f72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f76:	2201      	movs	r2, #1
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f00d f98b 	bl	800f296 <HAL_RTC_SetTime>
               HAL_RTC_SetDate(hrtc, &stDate, RTC_FORMAT_BCD);
 8001f80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f84:	2201      	movs	r2, #1
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f00d fa9f 	bl	800f4cc <HAL_RTC_SetDate>
               nSend = 1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
             }

             if((stMsgRx.nRxLen == 1) || nSend){
 8001f94:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d003      	beq.n	8001fa4 <ProfetSMTask+0x6c8>
 8001f9c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d060      	beq.n	8002066 <ProfetSMTask+0x78a>
                 HAL_RTC_GetTime(hrtc, &stTime, RTC_FORMAT_BCD);
 8001fa4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4619      	mov	r1, r3
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f00d fa2f 	bl	800f410 <HAL_RTC_GetTime>
                 HAL_RTC_GetDate(hrtc, &stDate, RTC_FORMAT_BCD);
 8001fb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f00d fb2d 	bl	800f61a <HAL_RTC_GetDate>

                 stMsgUsbTx.nTxLen = 7;
 8001fc0:	2307      	movs	r3, #7
 8001fc2:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                 stMsgCanTx.stTxHeader.DLC = 7;
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	67bb      	str	r3, [r7, #120]	; 0x78

                 stMsgUsbTx.nTxData[0] = MSG_TX_SET_TIME;
 8001fca:	2374      	movs	r3, #116	; 0x74
 8001fcc:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                 stMsgUsbTx.nTxData[1] = stTime.Hours;
 8001fd0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001fd4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
                 stMsgUsbTx.nTxData[2] = stTime.Minutes;
 8001fd8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001fdc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                 stMsgUsbTx.nTxData[3] = stTime.Seconds;
 8001fe0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001fe4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                 stMsgUsbTx.nTxData[4] = stDate.Year;
 8001fe8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001fec:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
                 stMsgUsbTx.nTxData[5] = stDate.Month;
 8001ff0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001ff4:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
                 stMsgUsbTx.nTxData[6] = stDate.Date;
 8001ff8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001ffc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                 stMsgUsbTx.nTxData[7] = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                 stMsgCanTx.stTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 20;
 8002006:	4b29      	ldr	r3, [pc, #164]	; (80020ac <ProfetSMTask+0x7d0>)
 8002008:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 800200c:	3314      	adds	r3, #20
 800200e:	66bb      	str	r3, [r7, #104]	; 0x68

                 memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8002010:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002014:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002018:	e892 0003 	ldmia.w	r2, {r0, r1}
 800201c:	e883 0003 	stmia.w	r3, {r0, r1}

                 osMessageQueuePut(qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <ProfetSMTask+0x7d4>)
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002028:	2300      	movs	r3, #0
 800202a:	2200      	movs	r2, #0
 800202c:	f011 ff50 	bl	8013ed0 <osMessageQueuePut>
                 osMessageQueuePut(qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <ProfetSMTask+0x7d8>)
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002038:	2300      	movs	r3, #0
 800203a:	2200      	movs	r2, #0
 800203c:	f011 ff48 	bl	8013ed0 <osMessageQueuePut>
             }


             break;
 8002040:	e011      	b.n	8002066 <ProfetSMTask+0x78a>

           default:
             PdmConfig_Set(&stPdmConfig, &stMsgRx, &qMsgQueueUsbTx, &qMsgQueueCanTx);
 8002042:	f107 0114 	add.w	r1, r7, #20
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <ProfetSMTask+0x7d8>)
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <ProfetSMTask+0x7d4>)
 800204a:	4818      	ldr	r0, [pc, #96]	; (80020ac <ProfetSMTask+0x7d0>)
 800204c:	f001 fc5c 	bl	8003908 <PdmConfig_Set>
             break;
 8002050:	e00a      	b.n	8002068 <ProfetSMTask+0x78c>
        }
      }
 8002052:	bf00      	nop
 8002054:	e008      	b.n	8002068 <ProfetSMTask+0x78c>
            break;
 8002056:	bf00      	nop
 8002058:	e006      	b.n	8002068 <ProfetSMTask+0x78c>
           break;
 800205a:	bf00      	nop
 800205c:	e004      	b.n	8002068 <ProfetSMTask+0x78c>
           break;
 800205e:	bf00      	nop
 8002060:	e002      	b.n	8002068 <ProfetSMTask+0x78c>
           break;
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <ProfetSMTask+0x78c>
             break;
 8002066:	bf00      	nop
    }

    MsgQueueUsbTx_t stMsgTx;
    if(osMessageQueueGet(qMsgQueueUsbTx, &stMsgTx, NULL, 0U) == osOK){
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <ProfetSMTask+0x7d4>)
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002070:	2300      	movs	r3, #0
 8002072:	2200      	movs	r2, #0
 8002074:	f011 ffa0 	bl	8013fb8 <osMessageQueueGet>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10c      	bne.n	8002098 <ProfetSMTask+0x7bc>
      if(bUsbConnected){
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <ProfetSMTask+0x7dc>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d008      	beq.n	8002098 <ProfetSMTask+0x7bc>
        //memcpy(&nUsbMsgTx, &stMsgTx.nTxData, stMsgTx.nTxLen);
        //nUsbMsgTx[stMsgTx.nTxLen] = '\r';
        if(USBD_CDC_Transmit((uint8_t*)stMsgTx.nTxData, stMsgTx.nTxLen) != USBD_OK){
 8002086:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800208a:	b29a      	uxth	r2, r3
 800208c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fe9a 	bl	8000dcc <USBD_CDC_Transmit>

#ifdef MEAS_HEAP_USE
    __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

    osDelay(5);
 8002098:	2005      	movs	r0, #5
 800209a:	f011 fe65 	bl	8013d68 <osDelay>
  for(;;){
 800209e:	e42f      	b.n	8001900 <ProfetSMTask+0x24>
 80020a0:	200023b8 	.word	0x200023b8
 80020a4:	200023ba 	.word	0x200023ba
 80020a8:	51eb851f 	.word	0x51eb851f
 80020ac:	20000200 	.word	0x20000200
 80020b0:	20000ad8 	.word	0x20000ad8
 80020b4:	20000adc 	.word	0x20000adc
 80020b8:	20000e0c 	.word	0x20000e0c

080020bc <CanTxTask>:
  }

}

void CanTxTask(osThreadId_t* thisThreadId, CAN_HandleTypeDef* hcan)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  for(;;){
    if(stPdmConfig.stCanOutput.nEnabled &&
 80020c6:	4ba8      	ldr	r3, [pc, #672]	; (8002368 <CanTxTask+0x2ac>)
 80020c8:	f893 38cc 	ldrb.w	r3, [r3, #2252]	; 0x8cc
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 8253 	beq.w	8002578 <CanTxTask+0x4bc>
        (stPdmConfig.stCanOutput.nUpdateTime > 0) &&
 80020d2:	4ba5      	ldr	r3, [pc, #660]	; (8002368 <CanTxTask+0x2ac>)
 80020d4:	f8b3 38d0 	ldrh.w	r3, [r3, #2256]	; 0x8d0
    if(stPdmConfig.stCanOutput.nEnabled &&
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 824d 	beq.w	8002578 <CanTxTask+0x4bc>
        stPdmConfig.stCanOutput.nBaseId > 0 &&
 80020de:	4ba2      	ldr	r3, [pc, #648]	; (8002368 <CanTxTask+0x2ac>)
 80020e0:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
        (stPdmConfig.stCanOutput.nUpdateTime > 0) &&
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8247 	beq.w	8002578 <CanTxTask+0x4bc>
        stPdmConfig.stCanOutput.nBaseId < 2048){
 80020ea:	4b9f      	ldr	r3, [pc, #636]	; (8002368 <CanTxTask+0x2ac>)
 80020ec:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
        stPdmConfig.stCanOutput.nBaseId > 0 &&
 80020f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020f4:	f080 8240 	bcs.w	8002578 <CanTxTask+0x4bc>

      MsgQueueCanTx_t stMsgTx;
      osStatus_t stStatus;
      //Keep sending queued messages until empty
      do{
        stStatus = osMessageQueueGet(qMsgQueueCanTx, &stMsgTx, NULL, 0U);
 80020f8:	4b9c      	ldr	r3, [pc, #624]	; (800236c <CanTxTask+0x2b0>)
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	f107 010c 	add.w	r1, r7, #12
 8002100:	2300      	movs	r3, #0
 8002102:	2200      	movs	r2, #0
 8002104:	f011 ff58 	bl	8013fb8 <osMessageQueueGet>
 8002108:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(stStatus == osOK){
 800210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d11d      	bne.n	800214c <CanTxTask+0x90>
          stMsgTx.stTxHeader.ExtId = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
          stMsgTx.stTxHeader.IDE = CAN_ID_STD;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
          stMsgTx.stTxHeader.RTR = CAN_RTR_DATA;
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
          stMsgTx.stTxHeader.TransmitGlobalTime = DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3020 	strb.w	r3, [r7, #32]

          if(HAL_CAN_AddTxMessage(hcan, &stMsgTx.stTxHeader, stMsgTx.nTxData, &nCanTxMailbox) != HAL_OK){
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	f103 0218 	add.w	r2, r3, #24
 800212a:	f107 010c 	add.w	r1, r7, #12
 800212e:	4b90      	ldr	r3, [pc, #576]	; (8002370 <CanTxTask+0x2b4>)
 8002130:	6838      	ldr	r0, [r7, #0]
 8002132:	f007 fd92 	bl	8009c5a <HAL_CAN_AddTxMessage>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <CanTxTask+0x90>
            //Send failed - add back to queue
            osMessageQueuePut(qMsgQueueCanTx, &stMsgTx, 0U, 0U);
 800213c:	4b8b      	ldr	r3, [pc, #556]	; (800236c <CanTxTask+0x2b0>)
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	f107 010c 	add.w	r1, r7, #12
 8002144:	2300      	movs	r3, #0
 8002146:	2200      	movs	r2, #0
 8002148:	f011 fec2 	bl	8013ed0 <osMessageQueuePut>
          }
        }
      }while(stStatus == osOK);
 800214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0d2      	beq.n	80020f8 <CanTxTask+0x3c>


      //=======================================================
      //Build Msg 0 (Analog inputs 1-4)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 0;
 8002152:	4b85      	ldr	r3, [pc, #532]	; (8002368 <CanTxTask+0x2ac>)
 8002154:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8002158:	461a      	mov	r2, r3
 800215a:	4b86      	ldr	r3, [pc, #536]	; (8002374 <CanTxTask+0x2b8>)
 800215c:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 800215e:	4b85      	ldr	r3, [pc, #532]	; (8002374 <CanTxTask+0x2b8>)
 8002160:	2208      	movs	r2, #8
 8002162:	611a      	str	r2, [r3, #16]
      //nCanTxData[7] = nAiBank1Raw[3];

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8002164:	4b82      	ldr	r3, [pc, #520]	; (8002370 <CanTxTask+0x2b4>)
 8002166:	4a84      	ldr	r2, [pc, #528]	; (8002378 <CanTxTask+0x2bc>)
 8002168:	4982      	ldr	r1, [pc, #520]	; (8002374 <CanTxTask+0x2b8>)
 800216a:	6838      	ldr	r0, [r7, #0]
 800216c:	f007 fd75 	bl	8009c5a <HAL_CAN_AddTxMessage>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <CanTxTask+0xbe>
        Error_Handler();
 8002176:	f001 fb81 	bl	800387c <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 800217a:	2005      	movs	r0, #5
 800217c:	f011 fdf4 	bl	8013d68 <osDelay>

      //=======================================================
      //Build Msg 1 (Analog inputs 5-6)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 1;
 8002180:	4b79      	ldr	r3, [pc, #484]	; (8002368 <CanTxTask+0x2ac>)
 8002182:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8002186:	3301      	adds	r3, #1
 8002188:	461a      	mov	r2, r3
 800218a:	4b7a      	ldr	r3, [pc, #488]	; (8002374 <CanTxTask+0x2b8>)
 800218c:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 800218e:	4b79      	ldr	r3, [pc, #484]	; (8002374 <CanTxTask+0x2b8>)
 8002190:	2208      	movs	r2, #8
 8002192:	611a      	str	r2, [r3, #16]
      //nCanTxData[7] = 0;

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8002194:	4b76      	ldr	r3, [pc, #472]	; (8002370 <CanTxTask+0x2b4>)
 8002196:	4a78      	ldr	r2, [pc, #480]	; (8002378 <CanTxTask+0x2bc>)
 8002198:	4976      	ldr	r1, [pc, #472]	; (8002374 <CanTxTask+0x2b8>)
 800219a:	6838      	ldr	r0, [r7, #0]
 800219c:	f007 fd5d 	bl	8009c5a <HAL_CAN_AddTxMessage>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <CanTxTask+0xee>
        Error_Handler();
 80021a6:	f001 fb69 	bl	800387c <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 80021aa:	2005      	movs	r0, #5
 80021ac:	f011 fddc 	bl	8013d68 <osDelay>

      //=======================================================
      //Build Msg 2 (Device status)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 2;
 80021b0:	4b6d      	ldr	r3, [pc, #436]	; (8002368 <CanTxTask+0x2ac>)
 80021b2:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 80021b6:	3302      	adds	r3, #2
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b6e      	ldr	r3, [pc, #440]	; (8002374 <CanTxTask+0x2b8>)
 80021bc:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 80021be:	4b6d      	ldr	r3, [pc, #436]	; (8002374 <CanTxTask+0x2b8>)
 80021c0:	2208      	movs	r2, #8
 80021c2:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = eDevState;
 80021c4:	4b6d      	ldr	r3, [pc, #436]	; (800237c <CanTxTask+0x2c0>)
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	4b6b      	ldr	r3, [pc, #428]	; (8002378 <CanTxTask+0x2bc>)
 80021ca:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = 0;
 80021cc:	4b6a      	ldr	r3, [pc, #424]	; (8002378 <CanTxTask+0x2bc>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = nILTotal >> 8;
 80021d2:	4b6b      	ldr	r3, [pc, #428]	; (8002380 <CanTxTask+0x2c4>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b66      	ldr	r3, [pc, #408]	; (8002378 <CanTxTask+0x2bc>)
 80021e0:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = nILTotal;
 80021e2:	4b67      	ldr	r3, [pc, #412]	; (8002380 <CanTxTask+0x2c4>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4b63      	ldr	r3, [pc, #396]	; (8002378 <CanTxTask+0x2bc>)
 80021ec:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = nBattSense >> 8;
 80021ee:	4b65      	ldr	r3, [pc, #404]	; (8002384 <CanTxTask+0x2c8>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b5f      	ldr	r3, [pc, #380]	; (8002378 <CanTxTask+0x2bc>)
 80021fc:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = nBattSense;
 80021fe:	4b61      	ldr	r3, [pc, #388]	; (8002384 <CanTxTask+0x2c8>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b5c      	ldr	r3, [pc, #368]	; (8002378 <CanTxTask+0x2bc>)
 8002208:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = (uint16_t)fBoardTempC >> 8;
 800220a:	4b5f      	ldr	r3, [pc, #380]	; (8002388 <CanTxTask+0x2cc>)
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002214:	ee17 3a90 	vmov	r3, s15
 8002218:	b29b      	uxth	r3, r3
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	b29b      	uxth	r3, r3
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b55      	ldr	r3, [pc, #340]	; (8002378 <CanTxTask+0x2bc>)
 8002222:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = (uint16_t)fBoardTempC;
 8002224:	4b58      	ldr	r3, [pc, #352]	; (8002388 <CanTxTask+0x2cc>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800222e:	ee17 3a90 	vmov	r3, s15
 8002232:	b29b      	uxth	r3, r3
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b50      	ldr	r3, [pc, #320]	; (8002378 <CanTxTask+0x2bc>)
 8002238:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 800223a:	4b4d      	ldr	r3, [pc, #308]	; (8002370 <CanTxTask+0x2b4>)
 800223c:	4a4e      	ldr	r2, [pc, #312]	; (8002378 <CanTxTask+0x2bc>)
 800223e:	494d      	ldr	r1, [pc, #308]	; (8002374 <CanTxTask+0x2b8>)
 8002240:	6838      	ldr	r0, [r7, #0]
 8002242:	f007 fd0a 	bl	8009c5a <HAL_CAN_AddTxMessage>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <CanTxTask+0x194>
        Error_Handler();
 800224c:	f001 fb16 	bl	800387c <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8002250:	2005      	movs	r0, #5
 8002252:	f011 fd89 	bl	8013d68 <osDelay>

      //=======================================================
      //Build Msg 3 (Out 1-4 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 3;
 8002256:	4b44      	ldr	r3, [pc, #272]	; (8002368 <CanTxTask+0x2ac>)
 8002258:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 800225c:	3303      	adds	r3, #3
 800225e:	461a      	mov	r2, r3
 8002260:	4b44      	ldr	r3, [pc, #272]	; (8002374 <CanTxTask+0x2b8>)
 8002262:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8002264:	4b43      	ldr	r3, [pc, #268]	; (8002374 <CanTxTask+0x2b8>)
 8002266:	2208      	movs	r2, #8
 8002268:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[0].nIL >> 8;
 800226a:	4b48      	ldr	r3, [pc, #288]	; (800238c <CanTxTask+0x2d0>)
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	b29b      	uxth	r3, r3
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	b29b      	uxth	r3, r3
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4b40      	ldr	r3, [pc, #256]	; (8002378 <CanTxTask+0x2bc>)
 8002278:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[0].nIL;
 800227a:	4b44      	ldr	r3, [pc, #272]	; (800238c <CanTxTask+0x2d0>)
 800227c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227e:	b29b      	uxth	r3, r3
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b3d      	ldr	r3, [pc, #244]	; (8002378 <CanTxTask+0x2bc>)
 8002284:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[1].nIL >> 8;
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <CanTxTask+0x2d0>)
 8002288:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800228c:	b29b      	uxth	r3, r3
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	b29b      	uxth	r3, r3
 8002292:	b2da      	uxtb	r2, r3
 8002294:	4b38      	ldr	r3, [pc, #224]	; (8002378 <CanTxTask+0x2bc>)
 8002296:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[1].nIL;
 8002298:	4b3c      	ldr	r3, [pc, #240]	; (800238c <CanTxTask+0x2d0>)
 800229a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800229e:	b29b      	uxth	r3, r3
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b35      	ldr	r3, [pc, #212]	; (8002378 <CanTxTask+0x2bc>)
 80022a4:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[2].nIL >> 8;
 80022a6:	4b39      	ldr	r3, [pc, #228]	; (800238c <CanTxTask+0x2d0>)
 80022a8:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b30      	ldr	r3, [pc, #192]	; (8002378 <CanTxTask+0x2bc>)
 80022b6:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[2].nIL;
 80022b8:	4b34      	ldr	r3, [pc, #208]	; (800238c <CanTxTask+0x2d0>)
 80022ba:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80022be:	b29b      	uxth	r3, r3
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <CanTxTask+0x2bc>)
 80022c4:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[3].nIL >> 8;
 80022c6:	4b31      	ldr	r3, [pc, #196]	; (800238c <CanTxTask+0x2d0>)
 80022c8:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	4b28      	ldr	r3, [pc, #160]	; (8002378 <CanTxTask+0x2bc>)
 80022d6:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[3].nIL;
 80022d8:	4b2c      	ldr	r3, [pc, #176]	; (800238c <CanTxTask+0x2d0>)
 80022da:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80022de:	b29b      	uxth	r3, r3
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b25      	ldr	r3, [pc, #148]	; (8002378 <CanTxTask+0x2bc>)
 80022e4:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 80022e6:	4b22      	ldr	r3, [pc, #136]	; (8002370 <CanTxTask+0x2b4>)
 80022e8:	4a23      	ldr	r2, [pc, #140]	; (8002378 <CanTxTask+0x2bc>)
 80022ea:	4922      	ldr	r1, [pc, #136]	; (8002374 <CanTxTask+0x2b8>)
 80022ec:	6838      	ldr	r0, [r7, #0]
 80022ee:	f007 fcb4 	bl	8009c5a <HAL_CAN_AddTxMessage>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <CanTxTask+0x240>
        Error_Handler();
 80022f8:	f001 fac0 	bl	800387c <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 80022fc:	2005      	movs	r0, #5
 80022fe:	f011 fd33 	bl	8013d68 <osDelay>

      //=======================================================
      //Build Msg 4 (Out 5-8 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 4;
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <CanTxTask+0x2ac>)
 8002304:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8002308:	3304      	adds	r3, #4
 800230a:	461a      	mov	r2, r3
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <CanTxTask+0x2b8>)
 800230e:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <CanTxTask+0x2b8>)
 8002312:	2208      	movs	r2, #8
 8002314:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[4].nIL >> 8;
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <CanTxTask+0x2d0>)
 8002318:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800231c:	b29b      	uxth	r3, r3
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	b29b      	uxth	r3, r3
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <CanTxTask+0x2bc>)
 8002326:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[4].nIL;
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <CanTxTask+0x2d0>)
 800232a:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800232e:	b29b      	uxth	r3, r3
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <CanTxTask+0x2bc>)
 8002334:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[5].nIL >> 8;
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <CanTxTask+0x2d0>)
 8002338:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 800233c:	b29b      	uxth	r3, r3
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	b29b      	uxth	r3, r3
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <CanTxTask+0x2bc>)
 8002346:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[5].nIL;
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <CanTxTask+0x2d0>)
 800234a:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 800234e:	b29b      	uxth	r3, r3
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <CanTxTask+0x2bc>)
 8002354:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[6].nIL >> 8;
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <CanTxTask+0x2d0>)
 8002358:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800235c:	b29b      	uxth	r3, r3
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	b29b      	uxth	r3, r3
 8002362:	b2da      	uxtb	r2, r3
 8002364:	e014      	b.n	8002390 <CanTxTask+0x2d4>
 8002366:	bf00      	nop
 8002368:	20000200 	.word	0x20000200
 800236c:	20000adc 	.word	0x20000adc
 8002370:	20000e84 	.word	0x20000e84
 8002374:	20000e40 	.word	0x20000e40
 8002378:	20000e74 	.word	0x20000e74
 800237c:	20000ae1 	.word	0x20000ae1
 8002380:	20000de4 	.word	0x20000de4
 8002384:	20000e1e 	.word	0x20000e1e
 8002388:	20000e10 	.word	0x20000e10
 800238c:	20000ae4 	.word	0x20000ae4
 8002390:	4b7b      	ldr	r3, [pc, #492]	; (8002580 <CanTxTask+0x4c4>)
 8002392:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[6].nIL;
 8002394:	4b7b      	ldr	r3, [pc, #492]	; (8002584 <CanTxTask+0x4c8>)
 8002396:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800239a:	b29b      	uxth	r3, r3
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b78      	ldr	r3, [pc, #480]	; (8002580 <CanTxTask+0x4c4>)
 80023a0:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[7].nIL >> 8;
 80023a2:	4b78      	ldr	r3, [pc, #480]	; (8002584 <CanTxTask+0x4c8>)
 80023a4:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b73      	ldr	r3, [pc, #460]	; (8002580 <CanTxTask+0x4c4>)
 80023b2:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[7].nIL;
 80023b4:	4b73      	ldr	r3, [pc, #460]	; (8002584 <CanTxTask+0x4c8>)
 80023b6:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b70      	ldr	r3, [pc, #448]	; (8002580 <CanTxTask+0x4c4>)
 80023c0:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 80023c2:	4b71      	ldr	r3, [pc, #452]	; (8002588 <CanTxTask+0x4cc>)
 80023c4:	4a6e      	ldr	r2, [pc, #440]	; (8002580 <CanTxTask+0x4c4>)
 80023c6:	4971      	ldr	r1, [pc, #452]	; (800258c <CanTxTask+0x4d0>)
 80023c8:	6838      	ldr	r0, [r7, #0]
 80023ca:	f007 fc46 	bl	8009c5a <HAL_CAN_AddTxMessage>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <CanTxTask+0x31c>
        Error_Handler();
 80023d4:	f001 fa52 	bl	800387c <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 80023d8:	2005      	movs	r0, #5
 80023da:	f011 fcc5 	bl	8013d68 <osDelay>

      //=======================================================
      //Build Msg 5 (Out 9-12 Current)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 5;
 80023de:	4b6c      	ldr	r3, [pc, #432]	; (8002590 <CanTxTask+0x4d4>)
 80023e0:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 80023e4:	3305      	adds	r3, #5
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b68      	ldr	r3, [pc, #416]	; (800258c <CanTxTask+0x4d0>)
 80023ea:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 80023ec:	4b67      	ldr	r3, [pc, #412]	; (800258c <CanTxTask+0x4d0>)
 80023ee:	2208      	movs	r2, #8
 80023f0:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = pf[8].nIL >> 8;
 80023f2:	4b64      	ldr	r3, [pc, #400]	; (8002584 <CanTxTask+0x4c8>)
 80023f4:	f8b3 3228 	ldrh.w	r3, [r3, #552]	; 0x228
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	4b5f      	ldr	r3, [pc, #380]	; (8002580 <CanTxTask+0x4c4>)
 8002402:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = pf[8].nIL;
 8002404:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <CanTxTask+0x4c8>)
 8002406:	f8b3 3228 	ldrh.w	r3, [r3, #552]	; 0x228
 800240a:	b29b      	uxth	r3, r3
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4b5c      	ldr	r3, [pc, #368]	; (8002580 <CanTxTask+0x4c4>)
 8002410:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = pf[9].nIL >> 8;
 8002412:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <CanTxTask+0x4c8>)
 8002414:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8002418:	b29b      	uxth	r3, r3
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	b29b      	uxth	r3, r3
 800241e:	b2da      	uxtb	r2, r3
 8002420:	4b57      	ldr	r3, [pc, #348]	; (8002580 <CanTxTask+0x4c4>)
 8002422:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = pf[9].nIL;
 8002424:	4b57      	ldr	r3, [pc, #348]	; (8002584 <CanTxTask+0x4c8>)
 8002426:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 800242a:	b29b      	uxth	r3, r3
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b54      	ldr	r3, [pc, #336]	; (8002580 <CanTxTask+0x4c4>)
 8002430:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = pf[10].nIL >> 8;
 8002432:	4b54      	ldr	r3, [pc, #336]	; (8002584 <CanTxTask+0x4c8>)
 8002434:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8002438:	b29b      	uxth	r3, r3
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	b29b      	uxth	r3, r3
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b4f      	ldr	r3, [pc, #316]	; (8002580 <CanTxTask+0x4c4>)
 8002442:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = pf[10].nIL;
 8002444:	4b4f      	ldr	r3, [pc, #316]	; (8002584 <CanTxTask+0x4c8>)
 8002446:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 800244a:	b29b      	uxth	r3, r3
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <CanTxTask+0x4c4>)
 8002450:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = pf[11].nIL >> 8;
 8002452:	4b4c      	ldr	r3, [pc, #304]	; (8002584 <CanTxTask+0x4c8>)
 8002454:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002458:	b29b      	uxth	r3, r3
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	b29b      	uxth	r3, r3
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b47      	ldr	r3, [pc, #284]	; (8002580 <CanTxTask+0x4c4>)
 8002462:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = pf[11].nIL;
 8002464:	4b47      	ldr	r3, [pc, #284]	; (8002584 <CanTxTask+0x4c8>)
 8002466:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800246a:	b29b      	uxth	r3, r3
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b44      	ldr	r3, [pc, #272]	; (8002580 <CanTxTask+0x4c4>)
 8002470:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8002472:	4b45      	ldr	r3, [pc, #276]	; (8002588 <CanTxTask+0x4cc>)
 8002474:	4a42      	ldr	r2, [pc, #264]	; (8002580 <CanTxTask+0x4c4>)
 8002476:	4945      	ldr	r1, [pc, #276]	; (800258c <CanTxTask+0x4d0>)
 8002478:	6838      	ldr	r0, [r7, #0]
 800247a:	f007 fbee 	bl	8009c5a <HAL_CAN_AddTxMessage>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <CanTxTask+0x3cc>
        Error_Handler();
 8002484:	f001 f9fa 	bl	800387c <Error_Handler>
      }

      osDelay(CAN_TX_MSG_SPLIT);
 8002488:	2005      	movs	r0, #5
 800248a:	f011 fc6d 	bl	8013d68 <osDelay>

      //=======================================================
      //Build Msg 6 (Out 1-12 Status)
      //=======================================================
      stCanTxHeader.StdId = stPdmConfig.stCanOutput.nBaseId + 6;
 800248e:	4b40      	ldr	r3, [pc, #256]	; (8002590 <CanTxTask+0x4d4>)
 8002490:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8002494:	3306      	adds	r3, #6
 8002496:	461a      	mov	r2, r3
 8002498:	4b3c      	ldr	r3, [pc, #240]	; (800258c <CanTxTask+0x4d0>)
 800249a:	601a      	str	r2, [r3, #0]
      stCanTxHeader.DLC = 8; //Bytes to send
 800249c:	4b3b      	ldr	r3, [pc, #236]	; (800258c <CanTxTask+0x4d0>)
 800249e:	2208      	movs	r2, #8
 80024a0:	611a      	str	r2, [r3, #16]
      nCanTxData[0] = (pf[1].eState << 4) + pf[0].eState;
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <CanTxTask+0x4c8>)
 80024a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b35      	ldr	r3, [pc, #212]	; (8002584 <CanTxTask+0x4c8>)
 80024b0:	785b      	ldrb	r3, [r3, #1]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b31      	ldr	r3, [pc, #196]	; (8002580 <CanTxTask+0x4c4>)
 80024ba:	701a      	strb	r2, [r3, #0]
      nCanTxData[1] = (pf[3].eState << 4) + pf[2].eState;
 80024bc:	4b31      	ldr	r3, [pc, #196]	; (8002584 <CanTxTask+0x4c8>)
 80024be:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <CanTxTask+0x4c8>)
 80024ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <CanTxTask+0x4c4>)
 80024d6:	705a      	strb	r2, [r3, #1]
      nCanTxData[2] = (pf[5].eState << 4) + pf[4].eState;
 80024d8:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <CanTxTask+0x4c8>)
 80024da:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <CanTxTask+0x4c8>)
 80024e6:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b23      	ldr	r3, [pc, #140]	; (8002580 <CanTxTask+0x4c4>)
 80024f2:	709a      	strb	r2, [r3, #2]
      nCanTxData[3] = (pf[7].eState << 4) + pf[6].eState;
 80024f4:	4b23      	ldr	r3, [pc, #140]	; (8002584 <CanTxTask+0x4c8>)
 80024f6:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b20      	ldr	r3, [pc, #128]	; (8002584 <CanTxTask+0x4c8>)
 8002502:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4413      	add	r3, r2
 800250a:	b2da      	uxtb	r2, r3
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <CanTxTask+0x4c4>)
 800250e:	70da      	strb	r2, [r3, #3]
      nCanTxData[4] = (pf[9].eState << 4) + pf[8].eState;
 8002510:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <CanTxTask+0x4c8>)
 8002512:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8002516:	b2db      	uxtb	r3, r3
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <CanTxTask+0x4c8>)
 800251e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8002522:	b2db      	uxtb	r3, r3
 8002524:	4413      	add	r3, r2
 8002526:	b2da      	uxtb	r2, r3
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <CanTxTask+0x4c4>)
 800252a:	711a      	strb	r2, [r3, #4]
      nCanTxData[5] = (pf[11].eState << 4) + pf[10].eState;
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <CanTxTask+0x4c8>)
 800252e:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	b2da      	uxtb	r2, r3
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <CanTxTask+0x4c8>)
 800253a:	f893 3281 	ldrb.w	r3, [r3, #641]	; 0x281
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4413      	add	r3, r2
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <CanTxTask+0x4c4>)
 8002546:	715a      	strb	r2, [r3, #5]
      nCanTxData[6] = 0;
 8002548:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <CanTxTask+0x4c4>)
 800254a:	2200      	movs	r2, #0
 800254c:	719a      	strb	r2, [r3, #6]
      nCanTxData[7] = 0;
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <CanTxTask+0x4c4>)
 8002550:	2200      	movs	r2, #0
 8002552:	71da      	strb	r2, [r3, #7]

      //=======================================================
      //Send CAN msg
      //=======================================================
      if(HAL_CAN_AddTxMessage(hcan, &stCanTxHeader, nCanTxData, &nCanTxMailbox) != HAL_OK){
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <CanTxTask+0x4cc>)
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <CanTxTask+0x4c4>)
 8002558:	490c      	ldr	r1, [pc, #48]	; (800258c <CanTxTask+0x4d0>)
 800255a:	6838      	ldr	r0, [r7, #0]
 800255c:	f007 fb7d 	bl	8009c5a <HAL_CAN_AddTxMessage>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <CanTxTask+0x4ae>
        Error_Handler();
 8002566:	f001 f989 	bl	800387c <Error_Handler>

#ifdef MEAS_HEAP_USE
      __attribute__((unused)) uint32_t nThisThreadSpace = osThreadGetStackSpace(*thisThreadId);
#endif

      osDelay(stPdmConfig.stCanOutput.nUpdateTime);
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <CanTxTask+0x4d4>)
 800256c:	f8b3 38d0 	ldrh.w	r3, [r3, #2256]	; 0x8d0
 8002570:	4618      	mov	r0, r3
 8002572:	f011 fbf9 	bl	8013d68 <osDelay>
        stPdmConfig.stCanOutput.nBaseId < 2048){
 8002576:	e002      	b.n	800257e <CanTxTask+0x4c2>
    }
    else{
      osDelay(50);
 8002578:	2032      	movs	r0, #50	; 0x32
 800257a:	f011 fbf5 	bl	8013d68 <osDelay>
    if(stPdmConfig.stCanOutput.nEnabled &&
 800257e:	e5a2      	b.n	80020c6 <CanTxTask+0xa>
 8002580:	20000e74 	.word	0x20000e74
 8002584:	20000ae4 	.word	0x20000ae4
 8002588:	20000e84 	.word	0x20000e84
 800258c:	20000e40 	.word	0x20000e40
 8002590:	20000200 	.word	0x20000200

08002594 <SetPfStatusLed>:

  }
}

void SetPfStatusLed(PCA9635_LEDOnState_t *ledState, volatile ProfetTypeDef *profet)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  //0 = Off
  //1 = On
  //3 = Flash
  *ledState = (profet->eState == ON) +          //On
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	785b      	ldrb	r3, [r3, #1]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
              (profet->eState == IN_RUSH) +     //On
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	785b      	ldrb	r3, [r3, #1]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	bf0c      	ite	eq
 80025ba:	2301      	moveq	r3, #1
 80025bc:	2300      	movne	r3, #0
 80025be:	b2db      	uxtb	r3, r3
  *ledState = (profet->eState == ON) +          //On
 80025c0:	4413      	add	r3, r2
 80025c2:	b2db      	uxtb	r3, r3
              (profet->eState == OVERCURRENT)   * LED_FLASH +
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	7852      	ldrb	r2, [r2, #1]
 80025c8:	b2d2      	uxtb	r2, r2
              (profet->eState == IN_RUSH) +     //On
 80025ca:	2a04      	cmp	r2, #4
 80025cc:	d101      	bne.n	80025d2 <SetPfStatusLed+0x3e>
 80025ce:	2203      	movs	r2, #3
 80025d0:	e000      	b.n	80025d4 <SetPfStatusLed+0x40>
 80025d2:	2200      	movs	r2, #0
 80025d4:	4413      	add	r3, r2
 80025d6:	b2db      	uxtb	r3, r3
              (profet->eState == SHORT_CIRCUIT) * LED_FLASH +
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	7852      	ldrb	r2, [r2, #1]
 80025dc:	b2d2      	uxtb	r2, r2
              (profet->eState == OVERCURRENT)   * LED_FLASH +
 80025de:	2a03      	cmp	r2, #3
 80025e0:	d101      	bne.n	80025e6 <SetPfStatusLed+0x52>
 80025e2:	2203      	movs	r2, #3
 80025e4:	e000      	b.n	80025e8 <SetPfStatusLed+0x54>
 80025e6:	2200      	movs	r2, #0
 80025e8:	4413      	add	r3, r2
 80025ea:	b2db      	uxtb	r3, r3
              (profet->eState == SUSPENDED)     * LED_FLASH +
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	7852      	ldrb	r2, [r2, #1]
 80025f0:	b2d2      	uxtb	r2, r2
              (profet->eState == SHORT_CIRCUIT) * LED_FLASH +
 80025f2:	2a06      	cmp	r2, #6
 80025f4:	d101      	bne.n	80025fa <SetPfStatusLed+0x66>
 80025f6:	2203      	movs	r2, #3
 80025f8:	e000      	b.n	80025fc <SetPfStatusLed+0x68>
 80025fa:	2200      	movs	r2, #0
 80025fc:	4413      	add	r3, r2
 80025fe:	b2db      	uxtb	r3, r3
              (profet->eState == FAULT)         * LED_FLASH;
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	7852      	ldrb	r2, [r2, #1]
 8002604:	b2d2      	uxtb	r2, r2
              (profet->eState == SUSPENDED)     * LED_FLASH +
 8002606:	2a05      	cmp	r2, #5
 8002608:	d101      	bne.n	800260e <SetPfStatusLed+0x7a>
 800260a:	2203      	movs	r2, #3
 800260c:	e000      	b.n	8002610 <SetPfStatusLed+0x7c>
 800260e:	2200      	movs	r2, #0
 8002610:	4413      	add	r3, r2
 8002612:	b2da      	uxtb	r2, r3
  *ledState = (profet->eState == ON) +          //On
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	701a      	strb	r2, [r3, #0]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <Profet_Init>:

void Profet_Init(){
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  pf[0].eModel = BTS7002_1EPP;
 8002628:	4bbf      	ldr	r3, [pc, #764]	; (8002928 <Profet_Init+0x304>)
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
  pf[0].eState = OFF;
 800262e:	4bbe      	ldr	r3, [pc, #760]	; (8002928 <Profet_Init+0x304>)
 8002630:	2200      	movs	r2, #0
 8002632:	705a      	strb	r2, [r3, #1]
  pf[0].nNum = 0;
 8002634:	4bbc      	ldr	r3, [pc, #752]	; (8002928 <Profet_Init+0x304>)
 8002636:	2200      	movs	r2, #0
 8002638:	809a      	strh	r2, [r3, #4]
  pf[0].nIN_Port = &pfGpioBank1;
 800263a:	4bbb      	ldr	r3, [pc, #748]	; (8002928 <Profet_Init+0x304>)
 800263c:	4abb      	ldr	r2, [pc, #748]	; (800292c <Profet_Init+0x308>)
 800263e:	609a      	str	r2, [r3, #8]
  pf[0].nIN_Pin = 0x0080;
 8002640:	4bb9      	ldr	r3, [pc, #740]	; (8002928 <Profet_Init+0x304>)
 8002642:	2280      	movs	r2, #128	; 0x80
 8002644:	819a      	strh	r2, [r3, #12]
  pf[0].nDEN_Port = 0;
 8002646:	4bb8      	ldr	r3, [pc, #736]	; (8002928 <Profet_Init+0x304>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  pf[0].nDEN_Pin = 0;
 800264c:	4bb6      	ldr	r3, [pc, #728]	; (8002928 <Profet_Init+0x304>)
 800264e:	2200      	movs	r2, #0
 8002650:	829a      	strh	r2, [r3, #20]
  pf[0].nIL_Limit = 250; //25.0A;
 8002652:	4bb5      	ldr	r3, [pc, #724]	; (8002928 <Profet_Init+0x304>)
 8002654:	22fa      	movs	r2, #250	; 0xfa
 8002656:	839a      	strh	r2, [r3, #28]
  pf[0].nIL_InRush_Limit = 300; //30A
 8002658:	4bb3      	ldr	r3, [pc, #716]	; (8002928 <Profet_Init+0x304>)
 800265a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800265e:	83da      	strh	r2, [r3, #30]
  pf[0].nIL_InRush_Time = 2000; //ms
 8002660:	4bb1      	ldr	r3, [pc, #708]	; (8002928 <Profet_Init+0x304>)
 8002662:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002666:	841a      	strh	r2, [r3, #32]
  pf[0].nOC_ResetTime = 1000;
 8002668:	4baf      	ldr	r3, [pc, #700]	; (8002928 <Profet_Init+0x304>)
 800266a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800266e:	861a      	strh	r2, [r3, #48]	; 0x30
  pf[0].nOC_ResetLimit = 1;
 8002670:	4bad      	ldr	r3, [pc, #692]	; (8002928 <Profet_Init+0x304>)
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  pf[0].fKilis = 2.286;
 8002678:	4bab      	ldr	r3, [pc, #684]	; (8002928 <Profet_Init+0x304>)
 800267a:	4aad      	ldr	r2, [pc, #692]	; (8002930 <Profet_Init+0x30c>)
 800267c:	63da      	str	r2, [r3, #60]	; 0x3c

  pf[1].eModel = BTS7002_1EPP;
 800267e:	4baa      	ldr	r3, [pc, #680]	; (8002928 <Profet_Init+0x304>)
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pf[1].eState = OFF;
 8002686:	4ba8      	ldr	r3, [pc, #672]	; (8002928 <Profet_Init+0x304>)
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  pf[1].nNum = 1;
 800268e:	4ba6      	ldr	r3, [pc, #664]	; (8002928 <Profet_Init+0x304>)
 8002690:	2201      	movs	r2, #1
 8002692:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  pf[1].nIN_Port = &pfGpioBank1;
 8002696:	4ba4      	ldr	r3, [pc, #656]	; (8002928 <Profet_Init+0x304>)
 8002698:	4aa4      	ldr	r2, [pc, #656]	; (800292c <Profet_Init+0x308>)
 800269a:	649a      	str	r2, [r3, #72]	; 0x48
  pf[1].nIN_Pin = 0x0002;
 800269c:	4ba2      	ldr	r3, [pc, #648]	; (8002928 <Profet_Init+0x304>)
 800269e:	2202      	movs	r2, #2
 80026a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pf[1].nDEN_Port = 0;
 80026a4:	4ba0      	ldr	r3, [pc, #640]	; (8002928 <Profet_Init+0x304>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	651a      	str	r2, [r3, #80]	; 0x50
  pf[1].nDEN_Pin = 0;
 80026aa:	4b9f      	ldr	r3, [pc, #636]	; (8002928 <Profet_Init+0x304>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  pf[1].nIL_Limit = 150; //15.0A
 80026b2:	4b9d      	ldr	r3, [pc, #628]	; (8002928 <Profet_Init+0x304>)
 80026b4:	2296      	movs	r2, #150	; 0x96
 80026b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  pf[1].nIL_InRush_Limit = 300;
 80026ba:	4b9b      	ldr	r3, [pc, #620]	; (8002928 <Profet_Init+0x304>)
 80026bc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  pf[1].nIL_InRush_Time = 2000; //ms
 80026c4:	4b98      	ldr	r3, [pc, #608]	; (8002928 <Profet_Init+0x304>)
 80026c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pf[1].nOC_ResetTime = 1000;
 80026ce:	4b96      	ldr	r3, [pc, #600]	; (8002928 <Profet_Init+0x304>)
 80026d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026d4:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  pf[1].nOC_ResetLimit = 2;
 80026d8:	4b93      	ldr	r3, [pc, #588]	; (8002928 <Profet_Init+0x304>)
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  pf[1].fKilis = 2.286;
 80026e0:	4b91      	ldr	r3, [pc, #580]	; (8002928 <Profet_Init+0x304>)
 80026e2:	4a93      	ldr	r2, [pc, #588]	; (8002930 <Profet_Init+0x30c>)
 80026e4:	67da      	str	r2, [r3, #124]	; 0x7c

  pf[2].eModel = BTS7008_2EPA_CH1;
 80026e6:	4b90      	ldr	r3, [pc, #576]	; (8002928 <Profet_Init+0x304>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  pf[2].eState = OFF;
 80026ee:	4b8e      	ldr	r3, [pc, #568]	; (8002928 <Profet_Init+0x304>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  pf[2].nNum = 2;
 80026f6:	4b8c      	ldr	r3, [pc, #560]	; (8002928 <Profet_Init+0x304>)
 80026f8:	2202      	movs	r2, #2
 80026fa:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  pf[2].nIN_Port = &pfGpioBank1;
 80026fe:	4b8a      	ldr	r3, [pc, #552]	; (8002928 <Profet_Init+0x304>)
 8002700:	4a8a      	ldr	r2, [pc, #552]	; (800292c <Profet_Init+0x308>)
 8002702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  pf[2].nIN_Pin = 0x8000;
 8002706:	4b88      	ldr	r3, [pc, #544]	; (8002928 <Profet_Init+0x304>)
 8002708:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800270c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
  pf[2].nDEN_Port = 0;
 8002710:	4b85      	ldr	r3, [pc, #532]	; (8002928 <Profet_Init+0x304>)
 8002712:	2200      	movs	r2, #0
 8002714:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  pf[2].nDEN_Pin = 0;
 8002718:	4b83      	ldr	r3, [pc, #524]	; (8002928 <Profet_Init+0x304>)
 800271a:	2200      	movs	r2, #0
 800271c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
  pf[2].nIL_Limit = 80; //8A;
 8002720:	4b81      	ldr	r3, [pc, #516]	; (8002928 <Profet_Init+0x304>)
 8002722:	2250      	movs	r2, #80	; 0x50
 8002724:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
  pf[2].nIL_InRush_Limit = 160; //16A
 8002728:	4b7f      	ldr	r3, [pc, #508]	; (8002928 <Profet_Init+0x304>)
 800272a:	22a0      	movs	r2, #160	; 0xa0
 800272c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
  pf[2].nIL_InRush_Time = 2000; //ms
 8002730:	4b7d      	ldr	r3, [pc, #500]	; (8002928 <Profet_Init+0x304>)
 8002732:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002736:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
  pf[2].nOC_ResetTime = 1000;
 800273a:	4b7b      	ldr	r3, [pc, #492]	; (8002928 <Profet_Init+0x304>)
 800273c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002740:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  pf[2].nOC_ResetLimit = 3;
 8002744:	4b78      	ldr	r3, [pc, #480]	; (8002928 <Profet_Init+0x304>)
 8002746:	2203      	movs	r2, #3
 8002748:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
  pf[2].fKilis = 0.554;
 800274c:	4b76      	ldr	r3, [pc, #472]	; (8002928 <Profet_Init+0x304>)
 800274e:	4a79      	ldr	r2, [pc, #484]	; (8002934 <Profet_Init+0x310>)
 8002750:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  pf[3].eModel = BTS7008_2EPA_CH2;
 8002754:	4b74      	ldr	r3, [pc, #464]	; (8002928 <Profet_Init+0x304>)
 8002756:	2202      	movs	r2, #2
 8002758:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
  pf[3].eState = OFF;
 800275c:	4b72      	ldr	r3, [pc, #456]	; (8002928 <Profet_Init+0x304>)
 800275e:	2200      	movs	r2, #0
 8002760:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  pf[3].nNum = 3;
 8002764:	4b70      	ldr	r3, [pc, #448]	; (8002928 <Profet_Init+0x304>)
 8002766:	2203      	movs	r2, #3
 8002768:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
  pf[3].nIN_Port = &pfGpioBank1;
 800276c:	4b6e      	ldr	r3, [pc, #440]	; (8002928 <Profet_Init+0x304>)
 800276e:	4a6f      	ldr	r2, [pc, #444]	; (800292c <Profet_Init+0x308>)
 8002770:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  pf[3].nIN_Pin = 0x1000;
 8002774:	4b6c      	ldr	r3, [pc, #432]	; (8002928 <Profet_Init+0x304>)
 8002776:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800277a:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
  pf[3].nDEN_Port = 0;
 800277e:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <Profet_Init+0x304>)
 8002780:	2200      	movs	r2, #0
 8002782:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  pf[3].nDEN_Pin = 0;
 8002786:	4b68      	ldr	r3, [pc, #416]	; (8002928 <Profet_Init+0x304>)
 8002788:	2200      	movs	r2, #0
 800278a:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
  pf[3].nIL_Limit = 80;   //8A;
 800278e:	4b66      	ldr	r3, [pc, #408]	; (8002928 <Profet_Init+0x304>)
 8002790:	2250      	movs	r2, #80	; 0x50
 8002792:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
  pf[3].nIL_InRush_Limit = 160; //16A
 8002796:	4b64      	ldr	r3, [pc, #400]	; (8002928 <Profet_Init+0x304>)
 8002798:	22a0      	movs	r2, #160	; 0xa0
 800279a:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
  pf[3].nIL_InRush_Time = 2000; //ms
 800279e:	4b62      	ldr	r3, [pc, #392]	; (8002928 <Profet_Init+0x304>)
 80027a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80027a4:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
  pf[3].nOC_ResetTime = 1000;
 80027a8:	4b5f      	ldr	r3, [pc, #380]	; (8002928 <Profet_Init+0x304>)
 80027aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027ae:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
  pf[3].nOC_ResetLimit = 2;
 80027b2:	4b5d      	ldr	r3, [pc, #372]	; (8002928 <Profet_Init+0x304>)
 80027b4:	2202      	movs	r2, #2
 80027b6:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  pf[3].fKilis = 0.554;
 80027ba:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <Profet_Init+0x304>)
 80027bc:	4a5d      	ldr	r2, [pc, #372]	; (8002934 <Profet_Init+0x310>)
 80027be:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

  pf[4].eModel = BTS7008_2EPA_CH1;
 80027c2:	4b59      	ldr	r3, [pc, #356]	; (8002928 <Profet_Init+0x304>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  pf[4].eState = OFF;
 80027ca:	4b57      	ldr	r3, [pc, #348]	; (8002928 <Profet_Init+0x304>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  pf[4].nNum = 4;
 80027d2:	4b55      	ldr	r3, [pc, #340]	; (8002928 <Profet_Init+0x304>)
 80027d4:	2204      	movs	r2, #4
 80027d6:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  pf[4].nIN_Port = &pfGpioBank1;
 80027da:	4b53      	ldr	r3, [pc, #332]	; (8002928 <Profet_Init+0x304>)
 80027dc:	4a53      	ldr	r2, [pc, #332]	; (800292c <Profet_Init+0x308>)
 80027de:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pf[4].nIN_Pin = 0x0800;
 80027e2:	4b51      	ldr	r3, [pc, #324]	; (8002928 <Profet_Init+0x304>)
 80027e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027e8:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
  pf[4].nDEN_Port = 0;
 80027ec:	4b4e      	ldr	r3, [pc, #312]	; (8002928 <Profet_Init+0x304>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pf[4].nDEN_Pin = 0;
 80027f4:	4b4c      	ldr	r3, [pc, #304]	; (8002928 <Profet_Init+0x304>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
  pf[4].nIL_Limit = 80; //8A;
 80027fc:	4b4a      	ldr	r3, [pc, #296]	; (8002928 <Profet_Init+0x304>)
 80027fe:	2250      	movs	r2, #80	; 0x50
 8002800:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
  pf[4].nIL_InRush_Limit = 160; //16A
 8002804:	4b48      	ldr	r3, [pc, #288]	; (8002928 <Profet_Init+0x304>)
 8002806:	22a0      	movs	r2, #160	; 0xa0
 8002808:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
  pf[4].nIL_InRush_Time = 2000; //ms
 800280c:	4b46      	ldr	r3, [pc, #280]	; (8002928 <Profet_Init+0x304>)
 800280e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002812:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
  pf[4].nOC_ResetTime = 1000;
 8002816:	4b44      	ldr	r3, [pc, #272]	; (8002928 <Profet_Init+0x304>)
 8002818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800281c:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
  pf[4].nOC_ResetLimit = 2;
 8002820:	4b41      	ldr	r3, [pc, #260]	; (8002928 <Profet_Init+0x304>)
 8002822:	2202      	movs	r2, #2
 8002824:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
  pf[4].fKilis = 0.554;
 8002828:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <Profet_Init+0x304>)
 800282a:	4a42      	ldr	r2, [pc, #264]	; (8002934 <Profet_Init+0x310>)
 800282c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

  pf[5].eModel = BTS7008_2EPA_CH2;
 8002830:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <Profet_Init+0x304>)
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  pf[5].eState = OFF;
 8002838:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <Profet_Init+0x304>)
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
  pf[5].nNum = 5;
 8002840:	4b39      	ldr	r3, [pc, #228]	; (8002928 <Profet_Init+0x304>)
 8002842:	2205      	movs	r2, #5
 8002844:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
  pf[5].nIN_Port = &pfGpioBank1;
 8002848:	4b37      	ldr	r3, [pc, #220]	; (8002928 <Profet_Init+0x304>)
 800284a:	4a38      	ldr	r2, [pc, #224]	; (800292c <Profet_Init+0x308>)
 800284c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pf[5].nIN_Pin = 0x0100;
 8002850:	4b35      	ldr	r3, [pc, #212]	; (8002928 <Profet_Init+0x304>)
 8002852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002856:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
  pf[5].nDEN_Port = 0;
 800285a:	4b33      	ldr	r3, [pc, #204]	; (8002928 <Profet_Init+0x304>)
 800285c:	2200      	movs	r2, #0
 800285e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
  pf[5].nDEN_Pin = 0;
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <Profet_Init+0x304>)
 8002864:	2200      	movs	r2, #0
 8002866:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
  pf[5].nIL_Limit = 80; ///8A;
 800286a:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <Profet_Init+0x304>)
 800286c:	2250      	movs	r2, #80	; 0x50
 800286e:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
  pf[5].nIL_InRush_Limit = 160; //16A
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <Profet_Init+0x304>)
 8002874:	22a0      	movs	r2, #160	; 0xa0
 8002876:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
  pf[5].nIL_InRush_Time = 2000; //ms
 800287a:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <Profet_Init+0x304>)
 800287c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002880:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
  pf[5].nOC_ResetTime = 1000;
 8002884:	4b28      	ldr	r3, [pc, #160]	; (8002928 <Profet_Init+0x304>)
 8002886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800288a:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
  pf[5].nOC_ResetLimit = 2;
 800288e:	4b26      	ldr	r3, [pc, #152]	; (8002928 <Profet_Init+0x304>)
 8002890:	2202      	movs	r2, #2
 8002892:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
  pf[5].fKilis = 0.554;
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <Profet_Init+0x304>)
 8002898:	4a26      	ldr	r2, [pc, #152]	; (8002934 <Profet_Init+0x310>)
 800289a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

  pf[6].eModel = BTS7002_1EPP;
 800289e:	4b22      	ldr	r3, [pc, #136]	; (8002928 <Profet_Init+0x304>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
  pf[6].eState = OFF;
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <Profet_Init+0x304>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
  pf[6].nNum = 6;
 80028ae:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <Profet_Init+0x304>)
 80028b0:	2206      	movs	r2, #6
 80028b2:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
  pf[6].nIN_Port = &pfGpioBank2;
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <Profet_Init+0x304>)
 80028b8:	4a1f      	ldr	r2, [pc, #124]	; (8002938 <Profet_Init+0x314>)
 80028ba:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
  pf[6].nIN_Pin = 0x0002;
 80028be:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <Profet_Init+0x304>)
 80028c0:	2202      	movs	r2, #2
 80028c2:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pf[6].nDEN_Port = 0;
 80028c6:	4b18      	ldr	r3, [pc, #96]	; (8002928 <Profet_Init+0x304>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  pf[6].nDEN_Pin = 0;
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <Profet_Init+0x304>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
  pf[6].nIL_Limit = 150; //15A;
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <Profet_Init+0x304>)
 80028d8:	2296      	movs	r2, #150	; 0x96
 80028da:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
  pf[6].nIL_InRush_Limit = 300; //30A
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <Profet_Init+0x304>)
 80028e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028e4:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
  pf[6].nIL_InRush_Time = 2000; //ms
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <Profet_Init+0x304>)
 80028ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028ee:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
  pf[6].nOC_ResetTime = 1000;
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <Profet_Init+0x304>)
 80028f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028f8:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
  pf[6].nOC_ResetLimit = 2;
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <Profet_Init+0x304>)
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
  pf[6].fKilis = 2.286;
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <Profet_Init+0x304>)
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <Profet_Init+0x30c>)
 8002908:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

  pf[7].eModel = BTS7002_1EPP;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <Profet_Init+0x304>)
 800290e:	2200      	movs	r2, #0
 8002910:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
  pf[7].eState = OFF;
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <Profet_Init+0x304>)
 8002916:	2200      	movs	r2, #0
 8002918:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  pf[7].nNum = 7;
 800291c:	4b02      	ldr	r3, [pc, #8]	; (8002928 <Profet_Init+0x304>)
 800291e:	2207      	movs	r2, #7
 8002920:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  pf[7].nIN_Port = &pfGpioBank2;
 8002924:	4b00      	ldr	r3, [pc, #0]	; (8002928 <Profet_Init+0x304>)
 8002926:	e009      	b.n	800293c <Profet_Init+0x318>
 8002928:	20000ae4 	.word	0x20000ae4
 800292c:	20000de6 	.word	0x20000de6
 8002930:	40124dd3 	.word	0x40124dd3
 8002934:	3f0dd2f2 	.word	0x3f0dd2f2
 8002938:	20000de8 	.word	0x20000de8
 800293c:	4a84      	ldr	r2, [pc, #528]	; (8002b50 <Profet_Init+0x52c>)
 800293e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  pf[7].nIN_Pin = 0x0008;
 8002942:	4b84      	ldr	r3, [pc, #528]	; (8002b54 <Profet_Init+0x530>)
 8002944:	2208      	movs	r2, #8
 8002946:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
  pf[7].nDEN_Port = 0;
 800294a:	4b82      	ldr	r3, [pc, #520]	; (8002b54 <Profet_Init+0x530>)
 800294c:	2200      	movs	r2, #0
 800294e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
  pf[7].nDEN_Pin = 0;
 8002952:	4b80      	ldr	r3, [pc, #512]	; (8002b54 <Profet_Init+0x530>)
 8002954:	2200      	movs	r2, #0
 8002956:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
  pf[7].nIL_Limit = 150; //15A;
 800295a:	4b7e      	ldr	r3, [pc, #504]	; (8002b54 <Profet_Init+0x530>)
 800295c:	2296      	movs	r2, #150	; 0x96
 800295e:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
  pf[7].nIL_InRush_Limit = 300; //30A
 8002962:	4b7c      	ldr	r3, [pc, #496]	; (8002b54 <Profet_Init+0x530>)
 8002964:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002968:	f8a3 21de 	strh.w	r2, [r3, #478]	; 0x1de
  pf[7].nIL_InRush_Time = 2000; //ms
 800296c:	4b79      	ldr	r3, [pc, #484]	; (8002b54 <Profet_Init+0x530>)
 800296e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002972:	f8a3 21e0 	strh.w	r2, [r3, #480]	; 0x1e0
  pf[7].nOC_ResetTime = 1000;
 8002976:	4b77      	ldr	r3, [pc, #476]	; (8002b54 <Profet_Init+0x530>)
 8002978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800297c:	f8a3 21f0 	strh.w	r2, [r3, #496]	; 0x1f0
  pf[7].nOC_ResetLimit = 2;
 8002980:	4b74      	ldr	r3, [pc, #464]	; (8002b54 <Profet_Init+0x530>)
 8002982:	2202      	movs	r2, #2
 8002984:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
  pf[7].fKilis = 2.286;
 8002988:	4b72      	ldr	r3, [pc, #456]	; (8002b54 <Profet_Init+0x530>)
 800298a:	4a73      	ldr	r2, [pc, #460]	; (8002b58 <Profet_Init+0x534>)
 800298c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

  pf[8].eModel = BTS7008_2EPA_CH1;
 8002990:	4b70      	ldr	r3, [pc, #448]	; (8002b54 <Profet_Init+0x530>)
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  pf[8].eState = OFF;
 8002998:	4b6e      	ldr	r3, [pc, #440]	; (8002b54 <Profet_Init+0x530>)
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  pf[8].nNum = 8;
 80029a0:	4b6c      	ldr	r3, [pc, #432]	; (8002b54 <Profet_Init+0x530>)
 80029a2:	2208      	movs	r2, #8
 80029a4:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
  pf[8].nIN_Port = &pfGpioBank2;
 80029a8:	4b6a      	ldr	r3, [pc, #424]	; (8002b54 <Profet_Init+0x530>)
 80029aa:	4a69      	ldr	r2, [pc, #420]	; (8002b50 <Profet_Init+0x52c>)
 80029ac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  pf[8].nIN_Pin = 0x0010;
 80029b0:	4b68      	ldr	r3, [pc, #416]	; (8002b54 <Profet_Init+0x530>)
 80029b2:	2210      	movs	r2, #16
 80029b4:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
  pf[8].nDEN_Port = 0;
 80029b8:	4b66      	ldr	r3, [pc, #408]	; (8002b54 <Profet_Init+0x530>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  pf[8].nDEN_Pin = 0;
 80029c0:	4b64      	ldr	r3, [pc, #400]	; (8002b54 <Profet_Init+0x530>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
  pf[8].nIL_Limit = 80; //8A;
 80029c8:	4b62      	ldr	r3, [pc, #392]	; (8002b54 <Profet_Init+0x530>)
 80029ca:	2250      	movs	r2, #80	; 0x50
 80029cc:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
  pf[8].nIL_InRush_Limit = 160; //16A
 80029d0:	4b60      	ldr	r3, [pc, #384]	; (8002b54 <Profet_Init+0x530>)
 80029d2:	22a0      	movs	r2, #160	; 0xa0
 80029d4:	f8a3 221e 	strh.w	r2, [r3, #542]	; 0x21e
  pf[8].nIL_InRush_Time = 2000; //ms
 80029d8:	4b5e      	ldr	r3, [pc, #376]	; (8002b54 <Profet_Init+0x530>)
 80029da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80029de:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
  pf[8].nOC_ResetTime = 1000;
 80029e2:	4b5c      	ldr	r3, [pc, #368]	; (8002b54 <Profet_Init+0x530>)
 80029e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029e8:	f8a3 2230 	strh.w	r2, [r3, #560]	; 0x230
  pf[8].nOC_ResetLimit = 2;
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <Profet_Init+0x530>)
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
  pf[8].fKilis = 0.554;
 80029f4:	4b57      	ldr	r3, [pc, #348]	; (8002b54 <Profet_Init+0x530>)
 80029f6:	4a59      	ldr	r2, [pc, #356]	; (8002b5c <Profet_Init+0x538>)
 80029f8:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c

  pf[9].eModel = BTS7008_2EPA_CH2;
 80029fc:	4b55      	ldr	r3, [pc, #340]	; (8002b54 <Profet_Init+0x530>)
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
  pf[9].eState = OFF;
 8002a04:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <Profet_Init+0x530>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
  pf[9].nNum = 9;
 8002a0c:	4b51      	ldr	r3, [pc, #324]	; (8002b54 <Profet_Init+0x530>)
 8002a0e:	2209      	movs	r2, #9
 8002a10:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
  pf[9].nIN_Port = &pfGpioBank2;
 8002a14:	4b4f      	ldr	r3, [pc, #316]	; (8002b54 <Profet_Init+0x530>)
 8002a16:	4a4e      	ldr	r2, [pc, #312]	; (8002b50 <Profet_Init+0x52c>)
 8002a18:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
  pf[9].nIN_Pin = 0x0080;
 8002a1c:	4b4d      	ldr	r3, [pc, #308]	; (8002b54 <Profet_Init+0x530>)
 8002a1e:	2280      	movs	r2, #128	; 0x80
 8002a20:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
  pf[9].nDEN_Port = 0;
 8002a24:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <Profet_Init+0x530>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  pf[9].nDEN_Pin = 0;
 8002a2c:	4b49      	ldr	r3, [pc, #292]	; (8002b54 <Profet_Init+0x530>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
  pf[9].nIL_Limit = 80; //8A;
 8002a34:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <Profet_Init+0x530>)
 8002a36:	2250      	movs	r2, #80	; 0x50
 8002a38:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
  pf[9].nIL_InRush_Limit = 160; //16A
 8002a3c:	4b45      	ldr	r3, [pc, #276]	; (8002b54 <Profet_Init+0x530>)
 8002a3e:	22a0      	movs	r2, #160	; 0xa0
 8002a40:	f8a3 225e 	strh.w	r2, [r3, #606]	; 0x25e
  pf[9].nIL_InRush_Time = 2000; //ms
 8002a44:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <Profet_Init+0x530>)
 8002a46:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a4a:	f8a3 2260 	strh.w	r2, [r3, #608]	; 0x260
  pf[9].nOC_ResetTime = 1000;
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <Profet_Init+0x530>)
 8002a50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a54:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
  pf[9].nOC_ResetLimit = 2;
 8002a58:	4b3e      	ldr	r3, [pc, #248]	; (8002b54 <Profet_Init+0x530>)
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
  pf[9].fKilis = 0.554;
 8002a60:	4b3c      	ldr	r3, [pc, #240]	; (8002b54 <Profet_Init+0x530>)
 8002a62:	4a3e      	ldr	r2, [pc, #248]	; (8002b5c <Profet_Init+0x538>)
 8002a64:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  pf[10].eModel = BTS7008_2EPA_CH1;
 8002a68:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <Profet_Init+0x530>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
  pf[10].eState = OFF;
 8002a70:	4b38      	ldr	r3, [pc, #224]	; (8002b54 <Profet_Init+0x530>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
  pf[10].nNum = 10;
 8002a78:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <Profet_Init+0x530>)
 8002a7a:	220a      	movs	r2, #10
 8002a7c:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
  pf[10].nIN_Port = &pfGpioBank2;
 8002a80:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <Profet_Init+0x530>)
 8002a82:	4a33      	ldr	r2, [pc, #204]	; (8002b50 <Profet_Init+0x52c>)
 8002a84:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  pf[10].nIN_Pin = 0x0100;
 8002a88:	4b32      	ldr	r3, [pc, #200]	; (8002b54 <Profet_Init+0x530>)
 8002a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a8e:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
  pf[10].nDEN_Port = 0;
 8002a92:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <Profet_Init+0x530>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  pf[10].nDEN_Pin = 0;
 8002a9a:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <Profet_Init+0x530>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
  pf[10].nIL_Limit = 80; // 8A;
 8002aa2:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <Profet_Init+0x530>)
 8002aa4:	2250      	movs	r2, #80	; 0x50
 8002aa6:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
  pf[10].nIL_InRush_Limit = 160; //16A
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <Profet_Init+0x530>)
 8002aac:	22a0      	movs	r2, #160	; 0xa0
 8002aae:	f8a3 229e 	strh.w	r2, [r3, #670]	; 0x29e
  pf[10].nIL_InRush_Time = 2000; //ms
 8002ab2:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <Profet_Init+0x530>)
 8002ab4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002ab8:	f8a3 22a0 	strh.w	r2, [r3, #672]	; 0x2a0
  pf[10].nOC_ResetTime = 1000;
 8002abc:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <Profet_Init+0x530>)
 8002abe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ac2:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
  pf[10].nOC_ResetLimit = 2;
 8002ac6:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <Profet_Init+0x530>)
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
  pf[10].fKilis = 0.554;
 8002ace:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <Profet_Init+0x530>)
 8002ad0:	4a22      	ldr	r2, [pc, #136]	; (8002b5c <Profet_Init+0x538>)
 8002ad2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  pf[11].eModel = BTS7008_2EPA_CH2;
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <Profet_Init+0x530>)
 8002ad8:	2202      	movs	r2, #2
 8002ada:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
  pf[11].eState = OFF;
 8002ade:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <Profet_Init+0x530>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
  pf[11].nNum = 11;
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <Profet_Init+0x530>)
 8002ae8:	220b      	movs	r2, #11
 8002aea:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
  pf[11].nIN_Port = &pfGpioBank2;
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <Profet_Init+0x530>)
 8002af0:	4a17      	ldr	r2, [pc, #92]	; (8002b50 <Profet_Init+0x52c>)
 8002af2:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  pf[11].nIN_Pin = 0x0800;
 8002af6:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <Profet_Init+0x530>)
 8002af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002afc:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
  pf[11].nDEN_Port = 0;
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <Profet_Init+0x530>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  pf[11].nDEN_Pin = 0;
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <Profet_Init+0x530>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
  pf[11].nIL_Limit = 50; //8A
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <Profet_Init+0x530>)
 8002b12:	2232      	movs	r2, #50	; 0x32
 8002b14:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
  pf[11].nIL_InRush_Limit = 160; //16A
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <Profet_Init+0x530>)
 8002b1a:	22a0      	movs	r2, #160	; 0xa0
 8002b1c:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
  pf[11].nIL_InRush_Time = 2000; //ms
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <Profet_Init+0x530>)
 8002b22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b26:	f8a3 22e0 	strh.w	r2, [r3, #736]	; 0x2e0
  pf[11].nOC_ResetTime = 1000;
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <Profet_Init+0x530>)
 8002b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b30:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
  pf[11].nOC_ResetLimit = 2;
 8002b34:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <Profet_Init+0x530>)
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
  pf[11].fKilis = 0.554;
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <Profet_Init+0x530>)
 8002b3e:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <Profet_Init+0x538>)
 8002b40:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000de8 	.word	0x20000de8
 8002b54:	20000ae4 	.word	0x20000ae4
 8002b58:	40124dd3 	.word	0x40124dd3
 8002b5c:	3f0dd2f2 	.word	0x3f0dd2f2

08002b60 <_write>:


//Overwrite printf _write to send to ITM_SendChar
int _write(int file, char *ptr, int len){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  int i=0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
  for(i=0; i<len; i++){
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	e009      	b.n	8002b8a <_write+0x2a>
    ITM_SendChar((*ptr++));
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	60ba      	str	r2, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe f81c 	bl	8000bbc <ITM_SendChar>
  for(i=0; i<len; i++){
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3301      	adds	r3, #1
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	dbf1      	blt.n	8002b76 <_write+0x16>
  }
  return len;
 8002b92:	687b      	ldr	r3, [r7, #4]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <ReadPdmConfig>:

uint8_t ReadPdmConfig(I2C_HandleTypeDef* hi2c2)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	; 0x30
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  //PdmConfig_SetDefault(&stPdmConfig);
  //PdmConfig_Write(hi2c2, MB85RC_ADDRESS, &stPdmConfig);

  if(PdmConfig_Read(hi2c2, MB85RC_ADDRESS, &stPdmConfig) == 0){
 8002ba4:	4aa9      	ldr	r2, [pc, #676]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002ba6:	2150      	movs	r1, #80	; 0x50
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fe6f 	bl	800388c <PdmConfig_Read>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <ReadPdmConfig+0x1e>
    PdmConfig_SetDefault(&stPdmConfig);
 8002bb4:	48a5      	ldr	r0, [pc, #660]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002bb6:	f002 f9f5 	bl	8004fa4 <PdmConfig_SetDefault>
  }

  //Map the variable map first before using
  //ADS1x15 inputs
  for(int i=0; i<6; i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bbe:	e00b      	b.n	8002bd8 <ReadPdmConfig+0x3c>
    pVariableMap[i+1] = &nPdmInputs[i];
 8002bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc6:	0052      	lsls	r2, r2, #1
 8002bc8:	49a1      	ldr	r1, [pc, #644]	; (8002e50 <ReadPdmConfig+0x2b4>)
 8002bca:	440a      	add	r2, r1
 8002bcc:	49a1      	ldr	r1, [pc, #644]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<6; i++)
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	ddf0      	ble.n	8002bc0 <ReadPdmConfig+0x24>

  //CAN inputs
  for(int i=0; i<30; i++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be2:	e00b      	b.n	8002bfc <ReadPdmConfig+0x60>
    pVariableMap[i + 7] = &nCanInputs[i];
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	3307      	adds	r3, #7
 8002be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bea:	0052      	lsls	r2, r2, #1
 8002bec:	499a      	ldr	r1, [pc, #616]	; (8002e58 <ReadPdmConfig+0x2bc>)
 8002bee:	440a      	add	r2, r1
 8002bf0:	4998      	ldr	r1, [pc, #608]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<30; i++)
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	2b1d      	cmp	r3, #29
 8002c00:	ddf0      	ble.n	8002be4 <ReadPdmConfig+0x48>

  for(int i=0; i<20; i++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
 8002c06:	e00b      	b.n	8002c20 <ReadPdmConfig+0x84>
    pVariableMap[i + 37] = &nVirtInputs[i];
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	3325      	adds	r3, #37	; 0x25
 8002c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0e:	0052      	lsls	r2, r2, #1
 8002c10:	4992      	ldr	r1, [pc, #584]	; (8002e5c <ReadPdmConfig+0x2c0>)
 8002c12:	440a      	add	r2, r1
 8002c14:	498f      	ldr	r1, [pc, #572]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<20; i++)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	2b13      	cmp	r3, #19
 8002c24:	ddf0      	ble.n	8002c08 <ReadPdmConfig+0x6c>

  for(int i=0; i<12; i++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	623b      	str	r3, [r7, #32]
 8002c2a:	e00b      	b.n	8002c44 <ReadPdmConfig+0xa8>
  {
    pVariableMap[i + 57] = &nOutputs[i];
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	3339      	adds	r3, #57	; 0x39
 8002c30:	6a3a      	ldr	r2, [r7, #32]
 8002c32:	0052      	lsls	r2, r2, #1
 8002c34:	498a      	ldr	r1, [pc, #552]	; (8002e60 <ReadPdmConfig+0x2c4>)
 8002c36:	440a      	add	r2, r1
 8002c38:	4986      	ldr	r1, [pc, #536]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<12; i++)
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	3301      	adds	r3, #1
 8002c42:	623b      	str	r3, [r7, #32]
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	2b0b      	cmp	r3, #11
 8002c48:	ddf0      	ble.n	8002c2c <ReadPdmConfig+0x90>
  }

  pVariableMap[69] = &stWiper.nSlowOut;
 8002c4a:	4b82      	ldr	r3, [pc, #520]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002c4c:	4a85      	ldr	r2, [pc, #532]	; (8002e64 <ReadPdmConfig+0x2c8>)
 8002c4e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  pVariableMap[70] = &stWiper.nFastOut;
 8002c52:	4b80      	ldr	r3, [pc, #512]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002c54:	4a84      	ldr	r2, [pc, #528]	; (8002e68 <ReadPdmConfig+0x2cc>)
 8002c56:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118


  //Assign variable map values
  for(int i=0; i<12; i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	e01a      	b.n	8002c96 <ReadPdmConfig+0xfa>
  {
    stPdmConfig.stOutput[i].pInput = pVariableMap[stPdmConfig.stOutput[i].nInput];
 8002c60:	497a      	ldr	r1, [pc, #488]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	f203 33d1 	addw	r3, r3, #977	; 0x3d1
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b77      	ldr	r3, [pc, #476]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002c78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c7c:	4873      	ldr	r0, [pc, #460]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4403      	add	r3, r0
 8002c8a:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8002c8e:	6019      	str	r1, [r3, #0]
  for(int i=0; i<12; i++)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3301      	adds	r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	2b0b      	cmp	r3, #11
 8002c9a:	dde1      	ble.n	8002c60 <ReadPdmConfig+0xc4>
  //stPdmConfig.stInput[2].pInput = &nAiBank1Raw[2];
  //stPdmConfig.stInput[3].pInput = &nAiBank1Raw[3];
  //stPdmConfig.stInput[4].pInput = &nAiBank2Raw[0];
  //stPdmConfig.stInput[5].pInput = &nAiBank2Raw[1];

  for(int i=0; i<20; i++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	e044      	b.n	8002d2c <ReadPdmConfig+0x190>
  {
    stPdmConfig.stVirtualInput[i].pVar0 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar0];
 8002ca2:	496a      	ldr	r1, [pc, #424]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	33b2      	adds	r3, #178	; 0xb2
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b67      	ldr	r3, [pc, #412]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002cb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cbc:	4863      	ldr	r0, [pc, #396]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4403      	add	r3, r0
 8002cca:	33b4      	adds	r3, #180	; 0xb4
 8002ccc:	6019      	str	r1, [r3, #0]
    stPdmConfig.stVirtualInput[i].pVar1 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar1];
 8002cce:	495f      	ldr	r1, [pc, #380]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	33ba      	adds	r3, #186	; 0xba
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b5c      	ldr	r3, [pc, #368]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002ce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ce8:	4858      	ldr	r0, [pc, #352]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4403      	add	r3, r0
 8002cf6:	33bc      	adds	r3, #188	; 0xbc
 8002cf8:	6019      	str	r1, [r3, #0]
    stPdmConfig.stVirtualInput[i].pVar2 = pVariableMap[stPdmConfig.stVirtualInput[i].nVar2];
 8002cfa:	4954      	ldr	r1, [pc, #336]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	33c2      	adds	r3, #194	; 0xc2
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d14:	484d      	ldr	r0, [pc, #308]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4403      	add	r3, r0
 8002d22:	33c4      	adds	r3, #196	; 0xc4
 8002d24:	6019      	str	r1, [r3, #0]
  for(int i=0; i<20; i++)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	61bb      	str	r3, [r7, #24]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b13      	cmp	r3, #19
 8002d30:	ddb7      	ble.n	8002ca2 <ReadPdmConfig+0x106>
  }

  stWiper.eMode = stPdmConfig.stWiper.nMode;
 8002d32:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002d34:	f893 24f1 	ldrb.w	r2, [r3, #1265]	; 0x4f1
 8002d38:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <ReadPdmConfig+0x2d0>)
 8002d3a:	701a      	strb	r2, [r3, #0]
  stWiper.pSlowInput = pVariableMap[stPdmConfig.stWiper.nSlowInput];
 8002d3c:	4b43      	ldr	r3, [pc, #268]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002d3e:	f893 34f2 	ldrb.w	r3, [r3, #1266]	; 0x4f2
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b43      	ldr	r3, [pc, #268]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4a:	4a48      	ldr	r2, [pc, #288]	; (8002e6c <ReadPdmConfig+0x2d0>)
 8002d4c:	6253      	str	r3, [r2, #36]	; 0x24
  stWiper.pFastInput = pVariableMap[stPdmConfig.stWiper.nFastInput];
 8002d4e:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002d50:	f893 34f3 	ldrb.w	r3, [r3, #1267]	; 0x4f3
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b3f      	ldr	r3, [pc, #252]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5c:	4a43      	ldr	r2, [pc, #268]	; (8002e6c <ReadPdmConfig+0x2d0>)
 8002d5e:	6293      	str	r3, [r2, #40]	; 0x28
  stWiper.pInterInput = pVariableMap[stPdmConfig.stWiper.nInterInput];
 8002d60:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002d62:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b3a      	ldr	r3, [pc, #232]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6e:	4a3f      	ldr	r2, [pc, #252]	; (8002e6c <ReadPdmConfig+0x2d0>)
 8002d70:	62d3      	str	r3, [r2, #44]	; 0x2c
  stWiper.pSwipeInput = pVariableMap[stPdmConfig.stWiper.nSwipeInput];
 8002d72:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002d74:	f893 34f9 	ldrb.w	r3, [r3, #1273]	; 0x4f9
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d80:	4a3a      	ldr	r2, [pc, #232]	; (8002e6c <ReadPdmConfig+0x2d0>)
 8002d82:	6193      	str	r3, [r2, #24]
  stWiper.pOnSw = pVariableMap[stPdmConfig.stWiper.nOnInput];
 8002d84:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002d86:	f893 34f5 	ldrb.w	r3, [r3, #1269]	; 0x4f5
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d92:	4a36      	ldr	r2, [pc, #216]	; (8002e6c <ReadPdmConfig+0x2d0>)
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
  stWiper.pParkSw = pVariableMap[stPdmConfig.stWiper.nParkInput];
 8002d96:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002d98:	f893 34f7 	ldrb.w	r3, [r3, #1271]	; 0x4f7
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da4:	4a31      	ldr	r2, [pc, #196]	; (8002e6c <ReadPdmConfig+0x2d0>)
 8002da6:	6093      	str	r3, [r2, #8]
  stWiper.pSpeedInput = pVariableMap[stPdmConfig.stWiper.nSpeedInput];
 8002da8:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002daa:	f893 34f6 	ldrb.w	r3, [r3, #1270]	; 0x4f6
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db6:	4a2d      	ldr	r2, [pc, #180]	; (8002e6c <ReadPdmConfig+0x2d0>)
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
  stWiper.pWashInput = pVariableMap[stPdmConfig.stWiper.nWashInput];
 8002dba:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002dbc:	f893 34fa 	ldrb.w	r3, [r3, #1274]	; 0x4fa
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc8:	4a28      	ldr	r2, [pc, #160]	; (8002e6c <ReadPdmConfig+0x2d0>)
 8002dca:	61d3      	str	r3, [r2, #28]
  stWiper.nWashWipeCycles = stPdmConfig.stWiper.nWashWipeCycles;
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002dce:	f893 24fb 	ldrb.w	r2, [r3, #1275]	; 0x4fb
 8002dd2:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <ReadPdmConfig+0x2d0>)
 8002dd4:	f883 2020 	strb.w	r2, [r3, #32]
  for(int i=0; i<6; i++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e010      	b.n	8002e00 <ReadPdmConfig+0x264>
    stWiper.nInterDelays[i] = stPdmConfig.stWiper.nIntermitTime[i];
 8002dde:	4a1b      	ldr	r2, [pc, #108]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	8899      	ldrh	r1, [r3, #4]
 8002dec:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <ReadPdmConfig+0x2d0>)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	3304      	adds	r3, #4
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	460a      	mov	r2, r1
 8002df8:	809a      	strh	r2, [r3, #4]
  for(int i=0; i<6; i++)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	ddeb      	ble.n	8002dde <ReadPdmConfig+0x242>
  for(int i=0; i<8; i++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	e00e      	b.n	8002e2a <ReadPdmConfig+0x28e>
    stWiper.eSpeedMap[i] = (WiperSpeed_t)stPdmConfig.stWiper.nSpeedMap[i];
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4413      	add	r3, r2
 8002e12:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8002e16:	7819      	ldrb	r1, [r3, #0]
 8002e18:	4a14      	ldr	r2, [pc, #80]	; (8002e6c <ReadPdmConfig+0x2d0>)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3334      	adds	r3, #52	; 0x34
 8002e20:	460a      	mov	r2, r1
 8002e22:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<8; i++)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	3301      	adds	r3, #1
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b07      	cmp	r3, #7
 8002e2e:	dded      	ble.n	8002e0c <ReadPdmConfig+0x270>

  stPdmConfig.stStarter.pInput = pVariableMap[stPdmConfig.stStarter.nInput];
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002e32:	f893 3571 	ldrb.w	r3, [r3, #1393]	; 0x571
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <ReadPdmConfig+0x2b8>)
 8002e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e3e:	4a03      	ldr	r2, [pc, #12]	; (8002e4c <ReadPdmConfig+0x2b0>)
 8002e40:	f8c2 3574 	str.w	r3, [r2, #1396]	; 0x574

  for(int i=0; i<4; i++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e02d      	b.n	8002ea6 <ReadPdmConfig+0x30a>
 8002e4a:	bf00      	nop
 8002e4c:	20000200 	.word	0x20000200
 8002e50:	2000102c 	.word	0x2000102c
 8002e54:	20000f10 	.word	0x20000f10
 8002e58:	20001038 	.word	0x20001038
 8002e5c:	20001074 	.word	0x20001074
 8002e60:	2000109c 	.word	0x2000109c
 8002e64:	20000ec2 	.word	0x20000ec2
 8002e68:	20000ec4 	.word	0x20000ec4
 8002e6c:	20000ec0 	.word	0x20000ec0
    stPdmConfig.stFlasher[i].pInput = pVariableMap[stPdmConfig.stFlasher[i].nInput];
 8002e70:	4911      	ldr	r1, [pc, #68]	; (8002eb8 <ReadPdmConfig+0x31c>)
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	f203 5311 	addw	r3, r3, #1297	; 0x511
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <ReadPdmConfig+0x320>)
 8002e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e8c:	480a      	ldr	r0, [pc, #40]	; (8002eb8 <ReadPdmConfig+0x31c>)
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4403      	add	r3, r0
 8002e9a:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8002e9e:	6019      	str	r1, [r3, #0]
  for(int i=0; i<4; i++)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	dde1      	ble.n	8002e70 <ReadPdmConfig+0x2d4>


  return PDM_OK;
 8002eac:	2301      	movs	r3, #1
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3730      	adds	r7, #48	; 0x30
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000200 	.word	0x20000200
 8002ebc:	20000f10 	.word	0x20000f10

08002ec0 <EvaluateFlasher>:
 */

#include "flasher.h"

void EvaluateFlasher(PdmConfig_Flasher_t *pFlasher, uint16_t pResult[12])
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  if(!pFlasher->nEnabled){
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d107      	bne.n	8002ee2 <EvaluateFlasher+0x22>
    pResult[pFlasher->nOutput] = 1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	7b5b      	ldrb	r3, [r3, #13]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	2201      	movs	r2, #1
 8002ede:	801a      	strh	r2, [r3, #0]
    return;
 8002ee0:	e048      	b.n	8002f74 <EvaluateFlasher+0xb4>
  }
  if(!*pFlasher->pInput){
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <EvaluateFlasher+0x3c>
    pResult[pFlasher->nOutput] = 1;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	7b5b      	ldrb	r3, [r3, #13]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	801a      	strh	r2, [r3, #0]
    return;
 8002efa:	e03b      	b.n	8002f74 <EvaluateFlasher+0xb4>
  }

  if((pResult[pFlasher->nOutput] == 0) && ((HAL_GetTick() - pFlasher->nTimeOff) > pFlasher->nFlashOffTime)){
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7b5b      	ldrb	r3, [r3, #13]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	4413      	add	r3, r2
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d115      	bne.n	8002f38 <EvaluateFlasher+0x78>
 8002f0c:	f005 fc68 	bl	80087e0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	8952      	ldrh	r2, [r2, #10]
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d90b      	bls.n	8002f38 <EvaluateFlasher+0x78>
    pResult[pFlasher->nOutput] = 1;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7b5b      	ldrb	r3, [r3, #13]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	4413      	add	r3, r2
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	801a      	strh	r2, [r3, #0]
    pFlasher->nTimeOn = HAL_GetTick();
 8002f2e:	f005 fc57 	bl	80087e0 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	615a      	str	r2, [r3, #20]
  }
  if((pResult[pFlasher->nOutput] == 1) && ((HAL_GetTick() - pFlasher->nTimeOn) > pFlasher->nFlashOnTime)){
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7b5b      	ldrb	r3, [r3, #13]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	4413      	add	r3, r2
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d115      	bne.n	8002f74 <EvaluateFlasher+0xb4>
 8002f48:	f005 fc4a 	bl	80087e0 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	8912      	ldrh	r2, [r2, #8]
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d90b      	bls.n	8002f74 <EvaluateFlasher+0xb4>
    pResult[pFlasher->nOutput] = 0;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7b5b      	ldrb	r3, [r3, #13]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	4413      	add	r3, r2
 8002f66:	2200      	movs	r2, #0
 8002f68:	801a      	strh	r2, [r3, #0]
    pFlasher->nTimeOff = HAL_GetTick();
 8002f6a:	f005 fc39 	bl	80087e0 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	611a      	str	r2, [r3, #16]
  }

}
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f80:	f005 fc04 	bl	800878c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f84:	f000 f8b8 	bl	80030f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f88:	f000 fb6a 	bl	8003660 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f8c:	f000 fb36 	bl	80035fc <MX_DMA_Init>
  MX_ADC4_Init();
 8002f90:	f000 f99a 	bl	80032c8 <MX_ADC4_Init>
  MX_CAN_Init();
 8002f94:	f000 f9f6 	bl	8003384 <MX_CAN_Init>
  MX_I2C2_Init();
 8002f98:	f000 fa8c 	bl	80034b4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002f9c:	f000 faf0 	bl	8003580 <MX_SPI1_Init>
  MX_RTC_Init();
 8002fa0:	f000 fac8 	bl	8003534 <MX_RTC_Init>
  MX_I2C1_Init();
 8002fa4:	f000 fa46 	bl	8003434 <MX_I2C1_Init>
  MX_CRC_Init();
 8002fa8:	f000 fa22 	bl	80033f0 <MX_CRC_Init>
  MX_ADC1_Init();
 8002fac:	f000 f91c 	bl	80031e8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002fb0:	f010 fdc8 	bl	8013b44 <osKernelInitialize>
  //if(osTimerStart(KickIWDGHandle, 1300) != osOK)
  //  Error_Handler();
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  qMsgQueueRx = osMessageQueueNew(MSGQUEUE_RX_SIZE, sizeof(MsgQueueRx_t), NULL);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2130      	movs	r1, #48	; 0x30
 8002fb8:	2010      	movs	r0, #16
 8002fba:	f010 ff03 	bl	8013dc4 <osMessageQueueNew>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <main+0x130>)
 8002fc2:	6013      	str	r3, [r2, #0]
  if(qMsgQueueRx == NULL){
 8002fc4:	4b39      	ldr	r3, [pc, #228]	; (80030ac <main+0x130>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <main+0x54>
    //TODO: Message queue not created
    Error_Handler();
 8002fcc:	f000 fc56 	bl	800387c <Error_Handler>
  }

  qMsgQueueUsbTx = osMessageQueueNew(MSGQUEUE_TX_SIZE, sizeof(MsgQueueUsbTx_t), NULL);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2109      	movs	r1, #9
 8002fd4:	2010      	movs	r0, #16
 8002fd6:	f010 fef5 	bl	8013dc4 <osMessageQueueNew>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4a34      	ldr	r2, [pc, #208]	; (80030b0 <main+0x134>)
 8002fde:	6013      	str	r3, [r2, #0]
  if(qMsgQueueUsbTx == NULL){
 8002fe0:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <main+0x134>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <main+0x70>
    //TODO: Message queue not created
    Error_Handler();
 8002fe8:	f000 fc48 	bl	800387c <Error_Handler>
  }

  qMsgQueueCanTx = osMessageQueueNew(MSGQUEUE_TX_SIZE, sizeof(MsgQueueCanTx_t), NULL);
 8002fec:	2200      	movs	r2, #0
 8002fee:	2120      	movs	r1, #32
 8002ff0:	2010      	movs	r0, #16
 8002ff2:	f010 fee7 	bl	8013dc4 <osMessageQueueNew>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	4a2e      	ldr	r2, [pc, #184]	; (80030b4 <main+0x138>)
 8002ffa:	6013      	str	r3, [r2, #0]
  if(qMsgQueueCanTx == NULL){
 8002ffc:	4b2d      	ldr	r3, [pc, #180]	; (80030b4 <main+0x138>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <main+0x8c>
    //TODO: Message queue not created
    Error_Handler();
 8003004:	f000 fc3a 	bl	800387c <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003008:	4a2b      	ldr	r2, [pc, #172]	; (80030b8 <main+0x13c>)
 800300a:	2100      	movs	r1, #0
 800300c:	482b      	ldr	r0, [pc, #172]	; (80030bc <main+0x140>)
 800300e:	f010 fe01 	bl	8013c14 <osThreadNew>
 8003012:	4603      	mov	r3, r0
 8003014:	4a2a      	ldr	r2, [pc, #168]	; (80030c0 <main+0x144>)
 8003016:	6013      	str	r3, [r2, #0]

  /* creation of i2cTask */
  i2c1TaskHandle = osThreadNew(StartI2C1Task, NULL, &i2c1Task_attributes);
 8003018:	4a2a      	ldr	r2, [pc, #168]	; (80030c4 <main+0x148>)
 800301a:	2100      	movs	r1, #0
 800301c:	482a      	ldr	r0, [pc, #168]	; (80030c8 <main+0x14c>)
 800301e:	f010 fdf9 	bl	8013c14 <osThreadNew>
 8003022:	4603      	mov	r3, r0
 8003024:	4a29      	ldr	r2, [pc, #164]	; (80030cc <main+0x150>)
 8003026:	6013      	str	r3, [r2, #0]

  /* creation of i2cTask */
  i2c2TaskHandle = osThreadNew(StartI2C2Task, NULL, &i2c2Task_attributes);
 8003028:	4a29      	ldr	r2, [pc, #164]	; (80030d0 <main+0x154>)
 800302a:	2100      	movs	r1, #0
 800302c:	4829      	ldr	r0, [pc, #164]	; (80030d4 <main+0x158>)
 800302e:	f010 fdf1 	bl	8013c14 <osThreadNew>
 8003032:	4603      	mov	r3, r0
 8003034:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <main+0x15c>)
 8003036:	6013      	str	r3, [r2, #0]

  /* creation of profetSMTask */
  profetSMTaskHandle = osThreadNew(StartProfetSMTask, NULL, &profetSMTask_attributes);
 8003038:	4a28      	ldr	r2, [pc, #160]	; (80030dc <main+0x160>)
 800303a:	2100      	movs	r1, #0
 800303c:	4828      	ldr	r0, [pc, #160]	; (80030e0 <main+0x164>)
 800303e:	f010 fde9 	bl	8013c14 <osThreadNew>
 8003042:	4603      	mov	r3, r0
 8003044:	4a27      	ldr	r2, [pc, #156]	; (80030e4 <main+0x168>)
 8003046:	6013      	str	r3, [r2, #0]

  /* creation of canTxTask */
  canTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &canTxTask_attributes);
 8003048:	4a27      	ldr	r2, [pc, #156]	; (80030e8 <main+0x16c>)
 800304a:	2100      	movs	r1, #0
 800304c:	4827      	ldr	r0, [pc, #156]	; (80030ec <main+0x170>)
 800304e:	f010 fde1 	bl	8013c14 <osThreadNew>
 8003052:	4603      	mov	r3, r0
 8003054:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <main+0x174>)
 8003056:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if(defaultTaskHandle == 0x0)
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <main+0x144>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <main+0xe8>
    Error_Handler();
 8003060:	f000 fc0c 	bl	800387c <Error_Handler>

  if(i2c1TaskHandle == 0x0)
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <main+0x150>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <main+0xf4>
    Error_Handler();
 800306c:	f000 fc06 	bl	800387c <Error_Handler>

  if(i2c2TaskHandle == 0x0)
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <main+0x15c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <main+0x100>
      Error_Handler();
 8003078:	f000 fc00 	bl	800387c <Error_Handler>

  if(profetSMTaskHandle == 0x0)
 800307c:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <main+0x168>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <main+0x10c>
    Error_Handler();
 8003084:	f000 fbfa 	bl	800387c <Error_Handler>

  if(canTxTaskHandle == 0x0)
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <main+0x174>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <main+0x118>
    Error_Handler();
 8003090:	f000 fbf4 	bl	800387c <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  if(ReadPdmConfig(&hi2c2) != PDM_OK)
 8003094:	4817      	ldr	r0, [pc, #92]	; (80030f4 <main+0x178>)
 8003096:	f7ff fd81 	bl	8002b9c <ReadPdmConfig>
 800309a:	4603      	mov	r3, r0
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <main+0x128>
    Error_Handler();
 80030a0:	f000 fbec 	bl	800387c <Error_Handler>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80030a4:	f010 fd82 	bl	8013bac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80030a8:	e7fe      	b.n	80030a8 <main+0x12c>
 80030aa:	bf00      	nop
 80030ac:	20000ad4 	.word	0x20000ad4
 80030b0:	20000ad8 	.word	0x20000ad8
 80030b4:	20000adc 	.word	0x20000adc
 80030b8:	08017bf4 	.word	0x08017bf4
 80030bc:	08003795 	.word	0x08003795
 80030c0:	2000264c 	.word	0x2000264c
 80030c4:	08017c18 	.word	0x08017c18
 80030c8:	080037d1 	.word	0x080037d1
 80030cc:	20002650 	.word	0x20002650
 80030d0:	08017c3c 	.word	0x08017c3c
 80030d4:	080037f1 	.word	0x080037f1
 80030d8:	20002654 	.word	0x20002654
 80030dc:	08017c60 	.word	0x08017c60
 80030e0:	08003811 	.word	0x08003811
 80030e4:	20002658 	.word	0x20002658
 80030e8:	08017c84 	.word	0x08017c84
 80030ec:	08003839 	.word	0x08003839
 80030f0:	2000265c 	.word	0x2000265c
 80030f4:	2000257c 	.word	0x2000257c

080030f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b09e      	sub	sp, #120	; 0x78
 80030fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003102:	2228      	movs	r2, #40	; 0x28
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f013 ffa2 	bl	8017050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800310c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800311c:	463b      	mov	r3, r7
 800311e:	223c      	movs	r2, #60	; 0x3c
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f013 ff94 	bl	8017050 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003128:	f00a fbae 	bl	800d888 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800312c:	4b2c      	ldr	r3, [pc, #176]	; (80031e0 <SystemClock_Config+0xe8>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a2b      	ldr	r2, [pc, #172]	; (80031e0 <SystemClock_Config+0xe8>)
 8003132:	f023 0318 	bic.w	r3, r3, #24
 8003136:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8003138:	230d      	movs	r3, #13
 800313a:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800313c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003140:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003142:	2300      	movs	r3, #0
 8003144:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003146:	2301      	movs	r3, #1
 8003148:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800314a:	2301      	movs	r3, #1
 800314c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800314e:	2301      	movs	r3, #1
 8003150:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003152:	2302      	movs	r3, #2
 8003154:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800315a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800315c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003160:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003162:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003166:	4618      	mov	r0, r3
 8003168:	f00a fb9e 	bl	800d8a8 <HAL_RCC_OscConfig>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8003172:	f000 fb83 	bl	800387c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003176:	230f      	movs	r3, #15
 8003178:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800317a:	2302      	movs	r3, #2
 800317c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800317e:	2300      	movs	r3, #0
 8003180:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003186:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003188:	2300      	movs	r3, #0
 800318a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800318c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003190:	2102      	movs	r1, #2
 8003192:	4618      	mov	r0, r3
 8003194:	f00b fbc6 	bl	800e924 <HAL_RCC_ClockConfig>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800319e:	f000 fb6d 	bl	800387c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <SystemClock_Config+0xec>)
 80031a4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_RTC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80031a6:	2310      	movs	r3, #16
 80031a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80031aa:	2320      	movs	r3, #32
 80031ac:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80031ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80031b4:	2300      	movs	r3, #0
 80031b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031b8:	463b      	mov	r3, r7
 80031ba:	4618      	mov	r0, r3
 80031bc:	f00b fe2a 	bl	800ee14 <HAL_RCCEx_PeriphCLKConfig>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80031c6:	f000 fb59 	bl	800387c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80031ca:	2200      	movs	r2, #0
 80031cc:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80031d0:	2000      	movs	r0, #0
 80031d2:	f00b fd23 	bl	800ec1c <HAL_RCC_MCOConfig>
}
 80031d6:	bf00      	nop
 80031d8:	3778      	adds	r7, #120	; 0x78
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	00030060 	.word	0x00030060

080031e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80031ee:	f107 031c 	add.w	r3, r7, #28
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80031fa:	1d3b      	adds	r3, r7, #4
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
 8003208:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800320a:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <MX_ADC1_Init+0xdc>)
 800320c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003210:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003212:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <MX_ADC1_Init+0xdc>)
 8003214:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003218:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800321a:	4b2a      	ldr	r3, [pc, #168]	; (80032c4 <MX_ADC1_Init+0xdc>)
 800321c:	2200      	movs	r2, #0
 800321e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <MX_ADC1_Init+0xdc>)
 8003222:	2200      	movs	r2, #0
 8003224:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003226:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <MX_ADC1_Init+0xdc>)
 8003228:	2201      	movs	r2, #1
 800322a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800322c:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <MX_ADC1_Init+0xdc>)
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003234:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <MX_ADC1_Init+0xdc>)
 8003236:	2200      	movs	r2, #0
 8003238:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800323a:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <MX_ADC1_Init+0xdc>)
 800323c:	2201      	movs	r2, #1
 800323e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003240:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <MX_ADC1_Init+0xdc>)
 8003242:	2200      	movs	r2, #0
 8003244:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003246:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <MX_ADC1_Init+0xdc>)
 8003248:	2201      	movs	r2, #1
 800324a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <MX_ADC1_Init+0xdc>)
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003254:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <MX_ADC1_Init+0xdc>)
 8003256:	2204      	movs	r2, #4
 8003258:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800325a:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <MX_ADC1_Init+0xdc>)
 800325c:	2200      	movs	r2, #0
 800325e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003260:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <MX_ADC1_Init+0xdc>)
 8003262:	2200      	movs	r2, #0
 8003264:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003266:	4817      	ldr	r0, [pc, #92]	; (80032c4 <MX_ADC1_Init+0xdc>)
 8003268:	f005 fae4 	bl	8008834 <HAL_ADC_Init>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003272:	f000 fb03 	bl	800387c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800327a:	f107 031c 	add.w	r3, r7, #28
 800327e:	4619      	mov	r1, r3
 8003280:	4810      	ldr	r0, [pc, #64]	; (80032c4 <MX_ADC1_Init+0xdc>)
 8003282:	f006 f8bf 	bl	8009404 <HAL_ADCEx_MultiModeConfigChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800328c:	f000 faf6 	bl	800387c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003290:	2310      	movs	r3, #16
 8003292:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003294:	2301      	movs	r3, #1
 8003296:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800329c:	2307      	movs	r3, #7
 800329e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	4619      	mov	r1, r3
 80032ac:	4805      	ldr	r0, [pc, #20]	; (80032c4 <MX_ADC1_Init+0xdc>)
 80032ae:	f005 fdbd 	bl	8008e2c <HAL_ADC_ConfigChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80032b8:	f000 fae0 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032bc:	bf00      	nop
 80032be:	3728      	adds	r7, #40	; 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	200023bc 	.word	0x200023bc

080032c8 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032ce:	463b      	mov	r3, r7
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
 80032dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80032de:	4b27      	ldr	r3, [pc, #156]	; (800337c <MX_ADC4_Init+0xb4>)
 80032e0:	4a27      	ldr	r2, [pc, #156]	; (8003380 <MX_ADC4_Init+0xb8>)
 80032e2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032e4:	4b25      	ldr	r3, [pc, #148]	; (800337c <MX_ADC4_Init+0xb4>)
 80032e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80032ea:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80032ec:	4b23      	ldr	r3, [pc, #140]	; (800337c <MX_ADC4_Init+0xb4>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80032f2:	4b22      	ldr	r3, [pc, #136]	; (800337c <MX_ADC4_Init+0xb4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80032f8:	4b20      	ldr	r3, [pc, #128]	; (800337c <MX_ADC4_Init+0xb4>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80032fe:	4b1f      	ldr	r3, [pc, #124]	; (800337c <MX_ADC4_Init+0xb4>)
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003306:	4b1d      	ldr	r3, [pc, #116]	; (800337c <MX_ADC4_Init+0xb4>)
 8003308:	2200      	movs	r2, #0
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <MX_ADC4_Init+0xb4>)
 800330e:	2201      	movs	r2, #1
 8003310:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <MX_ADC4_Init+0xb4>)
 8003314:	2200      	movs	r2, #0
 8003316:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8003318:	4b18      	ldr	r3, [pc, #96]	; (800337c <MX_ADC4_Init+0xb4>)
 800331a:	2201      	movs	r2, #1
 800331c:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800331e:	4b17      	ldr	r3, [pc, #92]	; (800337c <MX_ADC4_Init+0xb4>)
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <MX_ADC4_Init+0xb4>)
 8003328:	2204      	movs	r2, #4
 800332a:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800332c:	4b13      	ldr	r3, [pc, #76]	; (800337c <MX_ADC4_Init+0xb4>)
 800332e:	2200      	movs	r2, #0
 8003330:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003332:	4b12      	ldr	r3, [pc, #72]	; (800337c <MX_ADC4_Init+0xb4>)
 8003334:	2200      	movs	r2, #0
 8003336:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8003338:	4810      	ldr	r0, [pc, #64]	; (800337c <MX_ADC4_Init+0xb4>)
 800333a:	f005 fa7b 	bl	8008834 <HAL_ADC_Init>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 8003344:	f000 fa9a 	bl	800387c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003348:	2303      	movs	r3, #3
 800334a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800334c:	2301      	movs	r3, #1
 800334e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8003354:	2307      	movs	r3, #7
 8003356:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8003360:	463b      	mov	r3, r7
 8003362:	4619      	mov	r1, r3
 8003364:	4805      	ldr	r0, [pc, #20]	; (800337c <MX_ADC4_Init+0xb4>)
 8003366:	f005 fd61 	bl	8008e2c <HAL_ADC_ConfigChannel>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 8003370:	f000 fa84 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8003374:	bf00      	nop
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	2000240c 	.word	0x2000240c
 8003380:	50000500 	.word	0x50000500

08003384 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <MX_CAN_Init+0x64>)
 800338a:	4a18      	ldr	r2, [pc, #96]	; (80033ec <MX_CAN_Init+0x68>)
 800338c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <MX_CAN_Init+0x64>)
 8003390:	2204      	movs	r2, #4
 8003392:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003394:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <MX_CAN_Init+0x64>)
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800339a:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <MX_CAN_Init+0x64>)
 800339c:	2200      	movs	r2, #0
 800339e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <MX_CAN_Init+0x64>)
 80033a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80033a6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <MX_CAN_Init+0x64>)
 80033aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80033b0:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <MX_CAN_Init+0x64>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <MX_CAN_Init+0x64>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <MX_CAN_Init+0x64>)
 80033be:	2200      	movs	r2, #0
 80033c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <MX_CAN_Init+0x64>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <MX_CAN_Init+0x64>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <MX_CAN_Init+0x64>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80033d4:	4804      	ldr	r0, [pc, #16]	; (80033e8 <MX_CAN_Init+0x64>)
 80033d6:	f006 fa37 	bl	8009848 <HAL_CAN_Init>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80033e0:	f000 fa4c 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	200024e4 	.word	0x200024e4
 80033ec:	40006400 	.word	0x40006400

080033f0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <MX_CRC_Init+0x3c>)
 80033f6:	4a0e      	ldr	r2, [pc, #56]	; (8003430 <MX_CRC_Init+0x40>)
 80033f8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <MX_CRC_Init+0x3c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003400:	4b0a      	ldr	r3, [pc, #40]	; (800342c <MX_CRC_Init+0x3c>)
 8003402:	2200      	movs	r2, #0
 8003404:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <MX_CRC_Init+0x3c>)
 8003408:	2220      	movs	r2, #32
 800340a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <MX_CRC_Init+0x3c>)
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <MX_CRC_Init+0x3c>)
 8003414:	2201      	movs	r2, #1
 8003416:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003418:	4804      	ldr	r0, [pc, #16]	; (800342c <MX_CRC_Init+0x3c>)
 800341a:	f007 f943 	bl	800a6a4 <HAL_CRC_Init>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003424:	f000 fa2a 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}
 800342c:	2000250c 	.word	0x2000250c
 8003430:	40023000 	.word	0x40023000

08003434 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <MX_I2C1_Init+0x74>)
 800343a:	4a1c      	ldr	r2, [pc, #112]	; (80034ac <MX_I2C1_Init+0x78>)
 800343c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <MX_I2C1_Init+0x74>)
 8003440:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <MX_I2C1_Init+0x7c>)
 8003442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003444:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <MX_I2C1_Init+0x74>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800344a:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <MX_I2C1_Init+0x74>)
 800344c:	2201      	movs	r2, #1
 800344e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003450:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <MX_I2C1_Init+0x74>)
 8003452:	2200      	movs	r2, #0
 8003454:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003456:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <MX_I2C1_Init+0x74>)
 8003458:	2200      	movs	r2, #0
 800345a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <MX_I2C1_Init+0x74>)
 800345e:	2200      	movs	r2, #0
 8003460:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <MX_I2C1_Init+0x74>)
 8003464:	2200      	movs	r2, #0
 8003466:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <MX_I2C1_Init+0x74>)
 800346a:	2200      	movs	r2, #0
 800346c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800346e:	480e      	ldr	r0, [pc, #56]	; (80034a8 <MX_I2C1_Init+0x74>)
 8003470:	f007 fd48 	bl	800af04 <HAL_I2C_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800347a:	f000 f9ff 	bl	800387c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800347e:	2100      	movs	r1, #0
 8003480:	4809      	ldr	r0, [pc, #36]	; (80034a8 <MX_I2C1_Init+0x74>)
 8003482:	f008 fc7f 	bl	800bd84 <HAL_I2CEx_ConfigAnalogFilter>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800348c:	f000 f9f6 	bl	800387c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003490:	2100      	movs	r1, #0
 8003492:	4805      	ldr	r0, [pc, #20]	; (80034a8 <MX_I2C1_Init+0x74>)
 8003494:	f008 fcc1 	bl	800be1a <HAL_I2CEx_ConfigDigitalFilter>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800349e:	f000 f9ed 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20002530 	.word	0x20002530
 80034ac:	40005400 	.word	0x40005400
 80034b0:	00702681 	.word	0x00702681

080034b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <MX_I2C2_Init+0x74>)
 80034ba:	4a1c      	ldr	r2, [pc, #112]	; (800352c <MX_I2C2_Init+0x78>)
 80034bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702681;
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <MX_I2C2_Init+0x74>)
 80034c0:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <MX_I2C2_Init+0x7c>)
 80034c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80034c4:	4b18      	ldr	r3, [pc, #96]	; (8003528 <MX_I2C2_Init+0x74>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034ca:	4b17      	ldr	r3, [pc, #92]	; (8003528 <MX_I2C2_Init+0x74>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034d0:	4b15      	ldr	r3, [pc, #84]	; (8003528 <MX_I2C2_Init+0x74>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80034d6:	4b14      	ldr	r3, [pc, #80]	; (8003528 <MX_I2C2_Init+0x74>)
 80034d8:	2200      	movs	r2, #0
 80034da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034dc:	4b12      	ldr	r3, [pc, #72]	; (8003528 <MX_I2C2_Init+0x74>)
 80034de:	2200      	movs	r2, #0
 80034e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034e2:	4b11      	ldr	r3, [pc, #68]	; (8003528 <MX_I2C2_Init+0x74>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <MX_I2C2_Init+0x74>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80034ee:	480e      	ldr	r0, [pc, #56]	; (8003528 <MX_I2C2_Init+0x74>)
 80034f0:	f007 fd08 	bl	800af04 <HAL_I2C_Init>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80034fa:	f000 f9bf 	bl	800387c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034fe:	2100      	movs	r1, #0
 8003500:	4809      	ldr	r0, [pc, #36]	; (8003528 <MX_I2C2_Init+0x74>)
 8003502:	f008 fc3f 	bl	800bd84 <HAL_I2CEx_ConfigAnalogFilter>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800350c:	f000 f9b6 	bl	800387c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003510:	2100      	movs	r1, #0
 8003512:	4805      	ldr	r0, [pc, #20]	; (8003528 <MX_I2C2_Init+0x74>)
 8003514:	f008 fc81 	bl	800be1a <HAL_I2CEx_ConfigDigitalFilter>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800351e:	f000 f9ad 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	2000257c 	.word	0x2000257c
 800352c:	40005800 	.word	0x40005800
 8003530:	00702681 	.word	0x00702681

08003534 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003538:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <MX_RTC_Init+0x44>)
 800353a:	4a10      	ldr	r2, [pc, #64]	; (800357c <MX_RTC_Init+0x48>)
 800353c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800353e:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <MX_RTC_Init+0x44>)
 8003540:	2200      	movs	r2, #0
 8003542:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <MX_RTC_Init+0x44>)
 8003546:	227f      	movs	r2, #127	; 0x7f
 8003548:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800354a:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <MX_RTC_Init+0x44>)
 800354c:	22ff      	movs	r2, #255	; 0xff
 800354e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <MX_RTC_Init+0x44>)
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003556:	4b08      	ldr	r3, [pc, #32]	; (8003578 <MX_RTC_Init+0x44>)
 8003558:	2200      	movs	r2, #0
 800355a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <MX_RTC_Init+0x44>)
 800355e:	2200      	movs	r2, #0
 8003560:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003562:	4805      	ldr	r0, [pc, #20]	; (8003578 <MX_RTC_Init+0x44>)
 8003564:	f00b fe06 	bl	800f174 <HAL_RTC_Init>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800356e:	f000 f985 	bl	800387c <Error_Handler>
  /* USER CODE END Check_RTC_BKUP */
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	200025c8 	.word	0x200025c8
 800357c:	40002800 	.word	0x40002800

08003580 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <MX_SPI1_Init+0x74>)
 8003586:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <MX_SPI1_Init+0x78>)
 8003588:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800358a:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <MX_SPI1_Init+0x74>)
 800358c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003590:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <MX_SPI1_Init+0x74>)
 8003594:	2200      	movs	r2, #0
 8003596:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <MX_SPI1_Init+0x74>)
 800359a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800359e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035b6:	2208      	movs	r2, #8
 80035b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035ba:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035bc:	2200      	movs	r2, #0
 80035be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035ce:	2207      	movs	r2, #7
 80035d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035da:	2208      	movs	r2, #8
 80035dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035de:	4805      	ldr	r0, [pc, #20]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035e0:	f00c f8fa 	bl	800f7d8 <HAL_SPI_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80035ea:	f000 f947 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200025e8 	.word	0x200025e8
 80035f8:	40013000 	.word	0x40013000

080035fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003602:	4b16      	ldr	r3, [pc, #88]	; (800365c <MX_DMA_Init+0x60>)
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	4a15      	ldr	r2, [pc, #84]	; (800365c <MX_DMA_Init+0x60>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6153      	str	r3, [r2, #20]
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <MX_DMA_Init+0x60>)
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	607b      	str	r3, [r7, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <MX_DMA_Init+0x60>)
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	4a0f      	ldr	r2, [pc, #60]	; (800365c <MX_DMA_Init+0x60>)
 8003620:	f043 0302 	orr.w	r3, r3, #2
 8003624:	6153      	str	r3, [r2, #20]
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <MX_DMA_Init+0x60>)
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	2105      	movs	r1, #5
 8003636:	200b      	movs	r0, #11
 8003638:	f007 f80a 	bl	800a650 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800363c:	200b      	movs	r0, #11
 800363e:	f007 f823 	bl	800a688 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8003642:	2200      	movs	r2, #0
 8003644:	2105      	movs	r1, #5
 8003646:	2039      	movs	r0, #57	; 0x39
 8003648:	f007 f802 	bl	800a650 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800364c:	2039      	movs	r0, #57	; 0x39
 800364e:	f007 f81b 	bl	800a688 <HAL_NVIC_EnableIRQ>

}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000

08003660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003666:	f107 0314 	add.w	r3, r7, #20
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	60da      	str	r2, [r3, #12]
 8003674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003676:	4b45      	ldr	r3, [pc, #276]	; (800378c <MX_GPIO_Init+0x12c>)
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	4a44      	ldr	r2, [pc, #272]	; (800378c <MX_GPIO_Init+0x12c>)
 800367c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003680:	6153      	str	r3, [r2, #20]
 8003682:	4b42      	ldr	r3, [pc, #264]	; (800378c <MX_GPIO_Init+0x12c>)
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800368e:	4b3f      	ldr	r3, [pc, #252]	; (800378c <MX_GPIO_Init+0x12c>)
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	4a3e      	ldr	r2, [pc, #248]	; (800378c <MX_GPIO_Init+0x12c>)
 8003694:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003698:	6153      	str	r3, [r2, #20]
 800369a:	4b3c      	ldr	r3, [pc, #240]	; (800378c <MX_GPIO_Init+0x12c>)
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	4b39      	ldr	r3, [pc, #228]	; (800378c <MX_GPIO_Init+0x12c>)
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	4a38      	ldr	r2, [pc, #224]	; (800378c <MX_GPIO_Init+0x12c>)
 80036ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b0:	6153      	str	r3, [r2, #20]
 80036b2:	4b36      	ldr	r3, [pc, #216]	; (800378c <MX_GPIO_Init+0x12c>)
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036be:	4b33      	ldr	r3, [pc, #204]	; (800378c <MX_GPIO_Init+0x12c>)
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	4a32      	ldr	r2, [pc, #200]	; (800378c <MX_GPIO_Init+0x12c>)
 80036c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c8:	6153      	str	r3, [r2, #20]
 80036ca:	4b30      	ldr	r3, [pc, #192]	; (800378c <MX_GPIO_Init+0x12c>)
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXTRA1_GPIO_Port, EXTRA1_Pin, GPIO_PIN_RESET);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2110      	movs	r1, #16
 80036da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036de:	f007 fbf9 	bl	800aed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EXTRA2_Pin|USB_PULLUP_Pin|EXTRA3_Pin, GPIO_PIN_RESET);
 80036e2:	2200      	movs	r2, #0
 80036e4:	f640 0114 	movw	r1, #2068	; 0x814
 80036e8:	4829      	ldr	r0, [pc, #164]	; (8003790 <MX_GPIO_Init+0x130>)
 80036ea:	f007 fbf3 	bl	800aed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTRA1_Pin */
  GPIO_InitStruct.Pin = EXTRA1_Pin;
 80036ee:	2310      	movs	r3, #16
 80036f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f2:	2301      	movs	r3, #1
 80036f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036f6:	2302      	movs	r3, #2
 80036f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fa:	2300      	movs	r3, #0
 80036fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRA1_GPIO_Port, &GPIO_InitStruct);
 80036fe:	f107 0314 	add.w	r3, r7, #20
 8003702:	4619      	mov	r1, r3
 8003704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003708:	f007 fa6a 	bl	800abe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTRA2_Pin EXTRA3_Pin */
  GPIO_InitStruct.Pin = EXTRA2_Pin|EXTRA3_Pin;
 800370c:	2314      	movs	r3, #20
 800370e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003710:	2301      	movs	r3, #1
 8003712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003714:	2302      	movs	r3, #2
 8003716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003718:	2300      	movs	r3, #0
 800371a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	4619      	mov	r1, r3
 8003722:	481b      	ldr	r0, [pc, #108]	; (8003790 <MX_GPIO_Init+0x130>)
 8003724:	f007 fa5c 	bl	800abe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800372c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003736:	f107 0314 	add.w	r3, r7, #20
 800373a:	4619      	mov	r1, r3
 800373c:	4814      	ldr	r0, [pc, #80]	; (8003790 <MX_GPIO_Init+0x130>)
 800373e:	f007 fa4f 	bl	800abe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PULLUP_Pin */
  GPIO_InitStruct.Pin = USB_PULLUP_Pin;
 8003742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003748:	2301      	movs	r3, #1
 800374a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003750:	2300      	movs	r3, #0
 8003752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PULLUP_GPIO_Port, &GPIO_InitStruct);
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	4619      	mov	r1, r3
 800375a:	480d      	ldr	r0, [pc, #52]	; (8003790 <MX_GPIO_Init+0x130>)
 800375c:	f007 fa40 	bl	800abe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	2302      	movs	r3, #2
 8003768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003776:	f107 0314 	add.w	r3, r7, #20
 800377a:	4619      	mov	r1, r3
 800377c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003780:	f007 fa2e 	bl	800abe0 <HAL_GPIO_Init>

}
 8003784:	bf00      	nop
 8003786:	3728      	adds	r7, #40	; 0x28
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000
 8003790:	48000400 	.word	0x48000400

08003794 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  PdmMainTask(&defaultTaskHandle, &hadc1, &hadc4, &hcan, &hrtc, &hcrc);
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <StartDefaultTask+0x24>)
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <StartDefaultTask+0x28>)
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <StartDefaultTask+0x2c>)
 80037a6:	4a07      	ldr	r2, [pc, #28]	; (80037c4 <StartDefaultTask+0x30>)
 80037a8:	4907      	ldr	r1, [pc, #28]	; (80037c8 <StartDefaultTask+0x34>)
 80037aa:	4808      	ldr	r0, [pc, #32]	; (80037cc <StartDefaultTask+0x38>)
 80037ac:	f7fd fb74 	bl	8000e98 <PdmMainTask>
  /* USER CODE END 5 */
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	2000250c 	.word	0x2000250c
 80037bc:	200025c8 	.word	0x200025c8
 80037c0:	200024e4 	.word	0x200024e4
 80037c4:	2000240c 	.word	0x2000240c
 80037c8:	200023bc 	.word	0x200023bc
 80037cc:	2000264c 	.word	0x2000264c

080037d0 <StartI2C1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CTask */
void StartI2C1Task(void *argument)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CTask */
  I2C1Task(&i2c1TaskHandle, &hi2c1);
 80037d8:	4903      	ldr	r1, [pc, #12]	; (80037e8 <StartI2C1Task+0x18>)
 80037da:	4804      	ldr	r0, [pc, #16]	; (80037ec <StartI2C1Task+0x1c>)
 80037dc:	f7fd fdce 	bl	800137c <I2C1Task>
  /* USER CODE END StartI2CTask */
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20002530 	.word	0x20002530
 80037ec:	20002650 	.word	0x20002650

080037f0 <StartI2C2Task>:

void StartI2C2Task(void *argument)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CTask */
  I2C2Task(&i2c2TaskHandle, &hi2c2);
 80037f8:	4903      	ldr	r1, [pc, #12]	; (8003808 <StartI2C2Task+0x18>)
 80037fa:	4804      	ldr	r0, [pc, #16]	; (800380c <StartI2C2Task+0x1c>)
 80037fc:	f7fd fefa 	bl	80015f4 <I2C2Task>
  /* USER CODE END StartI2CTask */
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	2000257c 	.word	0x2000257c
 800380c:	20002654 	.word	0x20002654

08003810 <StartProfetSMTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProfetSMTask */
void StartProfetSMTask(void *argument)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProfetSMTask */
  ProfetSMTask(&profetSMTaskHandle, &hi2c2, &hrtc);
 8003818:	4a04      	ldr	r2, [pc, #16]	; (800382c <StartProfetSMTask+0x1c>)
 800381a:	4905      	ldr	r1, [pc, #20]	; (8003830 <StartProfetSMTask+0x20>)
 800381c:	4805      	ldr	r0, [pc, #20]	; (8003834 <StartProfetSMTask+0x24>)
 800381e:	f7fe f85d 	bl	80018dc <ProfetSMTask>
  /* USER CODE END StartProfetSMTask */
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200025c8 	.word	0x200025c8
 8003830:	2000257c 	.word	0x2000257c
 8003834:	20002658 	.word	0x20002658

08003838 <StartCanTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanTxTask */
void StartCanTxTask(void *argument)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanTxTask */
  /* Infinite loop */
  CanTxTask(&canTxTaskHandle, &hcan);
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <StartCanTxTask+0x18>)
 8003842:	4804      	ldr	r0, [pc, #16]	; (8003854 <StartCanTxTask+0x1c>)
 8003844:	f7fe fc3a 	bl	80020bc <CanTxTask>
  /* USER CODE END StartCanTxTask */
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	200024e4 	.word	0x200024e4
 8003854:	2000265c 	.word	0x2000265c

08003858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a04      	ldr	r2, [pc, #16]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d101      	bne.n	800386e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800386a:	f004 ffa5 	bl	80087b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40001000 	.word	0x40001000

0800387c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __NOP();
 8003880:	bf00      	nop
  /* USER CODE END Error_Handler_Debug */
}
 8003882:	bf00      	nop
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <PdmConfig_Read>:
static uint8_t nOutNum;
static uint8_t nVirtInNum;
static uint8_t nFlasherNum;
static uint8_t nCanInputNum;

uint8_t PdmConfig_Read(I2C_HandleTypeDef* hi2c, uint8_t nAddr, PdmConfig_t* pConfig){
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	460b      	mov	r3, r1
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	72fb      	strb	r3, [r7, #11]
  //Verifty that FRAM is communicating
  if(MB85RC_CheckId(hi2c, nAddr) != MB85RC_OK){
 800389a:	7afb      	ldrb	r3, [r7, #11]
 800389c:	4619      	mov	r1, r3
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f003 fade 	bl	8006e60 <MB85RC_CheckId>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d001      	beq.n	80038ae <PdmConfig_Read+0x22>
      return 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e009      	b.n	80038c2 <PdmConfig_Read+0x36>
  }

  //Takes approx. 60ms to read entire struct
  MB85RC_Read(hi2c, nAddr, 0x0, (uint8_t*)pConfig, sizeof(*pConfig));
 80038ae:	7af9      	ldrb	r1, [r7, #11]
 80038b0:	f640 03d4 	movw	r3, #2260	; 0x8d4
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f003 faee 	bl	8006e9c <MB85RC_Read>

  return 1;
 80038c0:	2301      	movs	r3, #1
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <PdmConfig_Write>:

uint8_t PdmConfig_Write(I2C_HandleTypeDef* hi2c, uint8_t nAddr, PdmConfig_t* pConfig){
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af02      	add	r7, sp, #8
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	460b      	mov	r3, r1
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	72fb      	strb	r3, [r7, #11]
  //Verifty that FRAM is communicating
  if(MB85RC_CheckId(hi2c, nAddr) != MB85RC_OK){
 80038d8:	7afb      	ldrb	r3, [r7, #11]
 80038da:	4619      	mov	r1, r3
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f003 fabf 	bl	8006e60 <MB85RC_CheckId>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d001      	beq.n	80038ec <PdmConfig_Write+0x22>
      return 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e009      	b.n	8003900 <PdmConfig_Write+0x36>
  }

  MB85RC_Write(hi2c, nAddr, 0x0, (uint8_t*)pConfig, sizeof(*pConfig));
 80038ec:	7af9      	ldrb	r1, [r7, #11]
 80038ee:	f640 03d4 	movw	r3, #2260	; 0x8d4
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f003 faec 	bl	8006ed6 <MB85RC_Write>

  return 1;
 80038fe:	2301      	movs	r3, #1
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <PdmConfig_Set>:

uint8_t PdmConfig_Set(PdmConfig_t* pConfig, MsgQueueRx_t* stMsgRx, osMessageQueueId_t* qMsgQueueUsbTx, osMessageQueueId_t* qMsgQueueCanTx){
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]

  nSend = 0;
 8003916:	4b6a      	ldr	r3, [pc, #424]	; (8003ac0 <PdmConfig_Set+0x1b8>)
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]

  switch((MsgQueueRxCmd_t)stMsgRx->nRxData[0]){
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003922:	3b43      	subs	r3, #67	; 0x43
 8003924:	2b16      	cmp	r3, #22
 8003926:	f201 82f2 	bhi.w	8004f0e <PdmConfig_Set+0x1606>
 800392a:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <PdmConfig_Set+0x28>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	0800398d 	.word	0x0800398d
 8003934:	080049c1 	.word	0x080049c1
 8003938:	08004f0f 	.word	0x08004f0f
 800393c:	08004f0f 	.word	0x08004f0f
 8003940:	08004f0f 	.word	0x08004f0f
 8003944:	08004755 	.word	0x08004755
 8003948:	08003ad1 	.word	0x08003ad1
 800394c:	08004f0f 	.word	0x08004f0f
 8003950:	08004f0f 	.word	0x08004f0f
 8003954:	08003ab3 	.word	0x08003ab3
 8003958:	08004f0f 	.word	0x08004f0f
 800395c:	08004c35 	.word	0x08004c35
 8003960:	08003c69 	.word	0x08003c69
 8003964:	0800440d 	.word	0x0800440d
 8003968:	08004f0f 	.word	0x08004f0f
 800396c:	08004f0f 	.word	0x08004f0f
 8003970:	08004f0f 	.word	0x08004f0f
 8003974:	08004f0f 	.word	0x08004f0f
 8003978:	08003f75 	.word	0x08003f75
 800397c:	08004ec1 	.word	0x08004ec1
 8003980:	0800429f 	.word	0x0800429f
 8003984:	08004f0f 	.word	0x08004f0f
 8003988:	080045af 	.word	0x080045af

    //Set CAN Settings
    // 'C'
    case MSG_RX_SET_CAN:
      if(stMsgRx->nRxLen == 5){
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003992:	2b05      	cmp	r3, #5
 8003994:	d13c      	bne.n	8003a10 <PdmConfig_Set+0x108>

        pConfig->stDevConfig.nCanEnabled = stMsgRx->nRxData[1] & 0x01;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	705a      	strb	r2, [r3, #1]
        pConfig->stCanOutput.nEnabled = (stMsgRx->nRxData[1] & 0x02) >> 1;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039ac:	105b      	asrs	r3, r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
        pConfig->stDevConfig.nCanSpeed = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	709a      	strb	r2, [r3, #2]

        pConfig->stCanOutput.nBaseId = (stMsgRx->nRxData[2] << 8) + stMsgRx->nRxData[3];
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80039dc:	b29b      	uxth	r3, r3
 80039de:	4413      	add	r3, r2
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8a3 28ce 	strh.w	r2, [r3, #2254]	; 0x8ce
        pConfig->stCanOutput.nUpdateTime = stMsgRx->nRxData[4] * 100;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	461a      	mov	r2, r3
 80039f8:	0091      	lsls	r1, r2, #2
 80039fa:	461a      	mov	r2, r3
 80039fc:	460b      	mov	r3, r1
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8a3 28d0 	strh.w	r2, [r3, #2256]	; 0x8d0
        nSend = 1;
 8003a0a:	4b2d      	ldr	r3, [pc, #180]	; (8003ac0 <PdmConfig_Set+0x1b8>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
      }

      if((stMsgRx->nRxLen == 1) || (nSend)){
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d004      	beq.n	8003a24 <PdmConfig_Set+0x11c>
 8003a1a:	4b29      	ldr	r3, [pc, #164]	; (8003ac0 <PdmConfig_Set+0x1b8>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f001 8277 	beq.w	8004f12 <PdmConfig_Set+0x160a>
        stMsgUsbTx.nTxLen = 5;
 8003a24:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <PdmConfig_Set+0x1bc>)
 8003a26:	2205      	movs	r2, #5
 8003a28:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 8003a2a:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <PdmConfig_Set+0x1c0>)
 8003a2c:	2205      	movs	r2, #5
 8003a2e:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_CAN;
 8003a30:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <PdmConfig_Set+0x1bc>)
 8003a32:	2263      	movs	r2, #99	; 0x63
 8003a34:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stDevConfig.nCanSpeed & 0x0F) << 4) + ((pConfig->stCanOutput.nEnabled & 0x01) << 1) + (pConfig->stDevConfig.nCanEnabled & 0x01);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	789b      	ldrb	r3, [r3, #2]
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 38cc 	ldrb.w	r3, [r3, #2252]	; 0x8cc
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	785b      	ldrb	r3, [r3, #1]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <PdmConfig_Set+0x1bc>)
 8003a62:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)((pConfig->stCanOutput.nBaseId & 0xFF00) >> 8);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <PdmConfig_Set+0x1bc>)
 8003a72:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stCanOutput.nBaseId & 0x00FF);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <PdmConfig_Set+0x1bc>)
 8003a7e:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)((pConfig->stCanOutput.nUpdateTime) / 100);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f8b3 38d0 	ldrh.w	r3, [r3, #2256]	; 0x8d0
 8003a86:	4a11      	ldr	r2, [pc, #68]	; (8003acc <PdmConfig_Set+0x1c4>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <PdmConfig_Set+0x1bc>)
 8003a94:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <PdmConfig_Set+0x1bc>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <PdmConfig_Set+0x1bc>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <PdmConfig_Set+0x1bc>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <PdmConfig_Set+0x1b8>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
      }
    break;
 8003aae:	f001 ba30 	b.w	8004f12 <PdmConfig_Set+0x160a>
    // 'L'
    case MSG_RX_SET_LOGGING:
      if(stMsgRx->nRxLen == 3){
        //TODO:Send response
      }
      if((stMsgRx->nRxLen == 1) || (nSend)){
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ab8:	2b01      	cmp	r3, #1

      }
    break;
 8003aba:	f001 ba48 	b.w	8004f4e <PdmConfig_Set+0x1646>
 8003abe:	bf00      	nop
 8003ac0:	2000268c 	.word	0x2000268c
 8003ac4:	20002660 	.word	0x20002660
 8003ac8:	2000266c 	.word	0x2000266c
 8003acc:	51eb851f 	.word	0x51eb851f

    //Set Input Settings
    // 'I'
    case MSG_RX_SET_INPUTS:
      if(stMsgRx->nRxLen == 3){
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d14e      	bne.n	8003b78 <PdmConfig_Set+0x270>
        nInNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	4b5b      	ldr	r3, [pc, #364]	; (8003c54 <PdmConfig_Set+0x34c>)
 8003ae6:	701a      	strb	r2, [r3, #0]
        if(nInNum < PDM_NUM_INPUTS){
 8003ae8:	4b5a      	ldr	r3, [pc, #360]	; (8003c54 <PdmConfig_Set+0x34c>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b05      	cmp	r3, #5
 8003aee:	d843      	bhi.n	8003b78 <PdmConfig_Set+0x270>
          pConfig->stInput[nInNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003af6:	4a57      	ldr	r2, [pc, #348]	; (8003c54 <PdmConfig_Set+0x34c>)
 8003af8:	7812      	ldrb	r2, [r2, #0]
 8003afa:	4611      	mov	r1, r2
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	b2d8      	uxtb	r0, r3
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	460b      	mov	r3, r1
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	1a5b      	subs	r3, r3, r1
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3308      	adds	r3, #8
 8003b10:	4602      	mov	r2, r0
 8003b12:	701a      	strb	r2, [r3, #0]
          pConfig->stInput[nInNum].eMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b1a:	105b      	asrs	r3, r3, #1
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	4a4d      	ldr	r2, [pc, #308]	; (8003c54 <PdmConfig_Set+0x34c>)
 8003b20:	7812      	ldrb	r2, [r2, #0]
 8003b22:	4611      	mov	r1, r2
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	b2d8      	uxtb	r0, r3
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	1a5b      	subs	r3, r3, r1
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	3310      	adds	r3, #16
 8003b38:	4602      	mov	r2, r0
 8003b3a:	701a      	strb	r2, [r3, #0]
          //TODO:Include binary on level on V3 PCB
          //pConfig->stInput[nInNum].nOnLevel = (stMsgRx->nRxData[1] & 0x08) >> 3;
          pConfig->stInput[nInNum].nDebounceTime = stMsgRx->nRxData[2] * 100;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	4b43      	ldr	r3, [pc, #268]	; (8003c54 <PdmConfig_Set+0x34c>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	0092      	lsls	r2, r2, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	461a      	mov	r2, r3
 8003b54:	0090      	lsls	r0, r2, #2
 8003b56:	461a      	mov	r2, r3
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	b298      	uxth	r0, r3
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	460b      	mov	r3, r1
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	1a5b      	subs	r3, r3, r1
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3322      	adds	r3, #34	; 0x22
 8003b6e:	4602      	mov	r2, r0
 8003b70:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 8003b72:	4b39      	ldr	r3, [pc, #228]	; (8003c58 <PdmConfig_Set+0x350>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d10d      	bne.n	8003b9e <PdmConfig_Set+0x296>
        nInNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <PdmConfig_Set+0x34c>)
 8003b8e:	701a      	strb	r2, [r3, #0]
        if(nInNum < PDM_NUM_INPUTS){
 8003b90:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <PdmConfig_Set+0x34c>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d802      	bhi.n	8003b9e <PdmConfig_Set+0x296>
          nSend = 1;
 8003b98:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <PdmConfig_Set+0x350>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8003b9e:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <PdmConfig_Set+0x350>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f001 81b7 	beq.w	8004f16 <PdmConfig_Set+0x160e>
        stMsgUsbTx.nTxLen = 3;
 8003ba8:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <PdmConfig_Set+0x354>)
 8003baa:	2203      	movs	r2, #3
 8003bac:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 3;
 8003bae:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <PdmConfig_Set+0x358>)
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_INPUTS;
 8003bb4:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <PdmConfig_Set+0x354>)
 8003bb6:	2269      	movs	r2, #105	; 0x69
 8003bb8:	701a      	strb	r2, [r3, #0]
        //TODO:Add binary On Level on V3 PCB
        stMsgUsbTx.nTxData[1] = ((nInNum & 0x0F) << 4) + ((pConfig->stInput[nInNum].eMode & 0x03) << 2) + (pConfig->stInput[nInNum].nEnabled & 0x01);
 8003bba:	4b26      	ldr	r3, [pc, #152]	; (8003c54 <PdmConfig_Set+0x34c>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <PdmConfig_Set+0x34c>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	68f9      	ldr	r1, [r7, #12]
 8003bca:	4603      	mov	r3, r0
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	1a1b      	subs	r3, r3, r0
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3310      	adds	r3, #16
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <PdmConfig_Set+0x34c>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	68f9      	ldr	r1, [r7, #12]
 8003bee:	4603      	mov	r3, r0
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	1a1b      	subs	r3, r3, r0
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <PdmConfig_Set+0x354>)
 8003c08:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)(pConfig->stInput[nInNum].nDebounceTime / 100);
 8003c0a:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <PdmConfig_Set+0x34c>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	460b      	mov	r3, r1
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	1a5b      	subs	r3, r3, r1
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3322      	adds	r3, #34	; 0x22
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	4a10      	ldr	r2, [pc, #64]	; (8003c64 <PdmConfig_Set+0x35c>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <PdmConfig_Set+0x354>)
 8003c2e:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = 0;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <PdmConfig_Set+0x354>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = 0;
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <PdmConfig_Set+0x354>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8003c3c:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <PdmConfig_Set+0x354>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <PdmConfig_Set+0x354>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8003c48:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <PdmConfig_Set+0x354>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	71da      	strb	r2, [r3, #7]
      }

    break;
 8003c4e:	f001 b962 	b.w	8004f16 <PdmConfig_Set+0x160e>
 8003c52:	bf00      	nop
 8003c54:	2000268d 	.word	0x2000268d
 8003c58:	2000268c 	.word	0x2000268c
 8003c5c:	20002660 	.word	0x20002660
 8003c60:	2000266c 	.word	0x2000266c
 8003c64:	51eb851f 	.word	0x51eb851f

    //Set Output Settings
    // 'O'
    case MSG_RX_SET_OUTPUTS:
      if(stMsgRx->nRxLen == 8){
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	f040 80bb 	bne.w	8003dea <PdmConfig_Set+0x4e2>
        nOutNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	4bb7      	ldr	r3, [pc, #732]	; (8003f5c <PdmConfig_Set+0x654>)
 8003c80:	701a      	strb	r2, [r3, #0]
        if(nOutNum < PDM_NUM_OUTPUTS){
 8003c82:	4bb6      	ldr	r3, [pc, #728]	; (8003f5c <PdmConfig_Set+0x654>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b0b      	cmp	r3, #11
 8003c88:	f200 80af 	bhi.w	8003dea <PdmConfig_Set+0x4e2>
          pConfig->stOutput[nOutNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c92:	4ab2      	ldr	r2, [pc, #712]	; (8003f5c <PdmConfig_Set+0x654>)
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	4611      	mov	r1, r2
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	b2d8      	uxtb	r0, r3
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	440b      	add	r3, r1
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003cae:	4602      	mov	r2, r0
 8003cb0:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInput = stMsgRx->nRxData[2];
 8003cb2:	4baa      	ldr	r3, [pc, #680]	; (8003f5c <PdmConfig_Set+0x654>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	440b      	add	r3, r1
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	f203 33d1 	addw	r3, r3, #977	; 0x3d1
 8003cce:	4602      	mov	r2, r0
 8003cd0:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nCurrentLimit = stMsgRx->nRxData[3] / 10;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003cd8:	4aa1      	ldr	r2, [pc, #644]	; (8003f60 <PdmConfig_Set+0x658>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	08db      	lsrs	r3, r3, #3
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	4b9e      	ldr	r3, [pc, #632]	; (8003f5c <PdmConfig_Set+0x654>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	b290      	uxth	r0, r2
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	460b      	mov	r3, r1
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	440b      	add	r3, r1
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f203 33da 	addw	r3, r3, #986	; 0x3da
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].eResetMode = (stMsgRx->nRxData[4] & 0x0F);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d04:	4a95      	ldr	r2, [pc, #596]	; (8003f5c <PdmConfig_Set+0x654>)
 8003d06:	7812      	ldrb	r2, [r2, #0]
 8003d08:	4611      	mov	r1, r2
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	b2d8      	uxtb	r0, r3
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	460b      	mov	r3, r1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	440b      	add	r3, r1
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003d20:	4602      	mov	r2, r0
 8003d22:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nResetLimit = (stMsgRx->nRxData[4] & 0xF0) >> 4;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d2a:	4a8c      	ldr	r2, [pc, #560]	; (8003f5c <PdmConfig_Set+0x654>)
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	4611      	mov	r1, r2
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	b2d8      	uxtb	r0, r3
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	460b      	mov	r3, r1
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	440b      	add	r3, r1
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8003d44:	4602      	mov	r2, r0
 8003d46:	701a      	strb	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nResetTime = stMsgRx->nRxData[5] * 100;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	4b82      	ldr	r3, [pc, #520]	; (8003f5c <PdmConfig_Set+0x654>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	4619      	mov	r1, r3
 8003d56:	4613      	mov	r3, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	0092      	lsls	r2, r2, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	461a      	mov	r2, r3
 8003d60:	0090      	lsls	r0, r2, #2
 8003d62:	461a      	mov	r2, r3
 8003d64:	4603      	mov	r3, r0
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	b298      	uxth	r0, r3
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	440b      	add	r3, r1
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	f203 33e2 	addw	r3, r3, #994	; 0x3e2
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInrushLimit = stMsgRx->nRxData[6] / 10;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003d86:	4a76      	ldr	r2, [pc, #472]	; (8003f60 <PdmConfig_Set+0x658>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	08db      	lsrs	r3, r3, #3
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	4b72      	ldr	r3, [pc, #456]	; (8003f5c <PdmConfig_Set+0x654>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	4619      	mov	r1, r3
 8003d96:	b290      	uxth	r0, r2
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	440b      	add	r3, r1
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8003da8:	4602      	mov	r2, r0
 8003daa:	801a      	strh	r2, [r3, #0]
          pConfig->stOutput[nOutNum].nInrushTime = stMsgRx->nRxData[7] * 100;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	4b69      	ldr	r3, [pc, #420]	; (8003f5c <PdmConfig_Set+0x654>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	4619      	mov	r1, r3
 8003dba:	4613      	mov	r3, r2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	0092      	lsls	r2, r2, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	0090      	lsls	r0, r2, #2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	b298      	uxth	r0, r3
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	440b      	add	r3, r1
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	f203 33de 	addw	r3, r3, #990	; 0x3de
 8003de0:	4602      	mov	r2, r0
 8003de2:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 8003de4:	4b5f      	ldr	r3, [pc, #380]	; (8003f64 <PdmConfig_Set+0x65c>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d10d      	bne.n	8003e10 <PdmConfig_Set+0x508>
        nOutNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dfa:	091b      	lsrs	r3, r3, #4
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	4b57      	ldr	r3, [pc, #348]	; (8003f5c <PdmConfig_Set+0x654>)
 8003e00:	701a      	strb	r2, [r3, #0]
        if(nOutNum < PDM_NUM_OUTPUTS){
 8003e02:	4b56      	ldr	r3, [pc, #344]	; (8003f5c <PdmConfig_Set+0x654>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b0b      	cmp	r3, #11
 8003e08:	d802      	bhi.n	8003e10 <PdmConfig_Set+0x508>
          nSend = 1;
 8003e0a:	4b56      	ldr	r3, [pc, #344]	; (8003f64 <PdmConfig_Set+0x65c>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8003e10:	4b54      	ldr	r3, [pc, #336]	; (8003f64 <PdmConfig_Set+0x65c>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f001 8080 	beq.w	8004f1a <PdmConfig_Set+0x1612>
        stMsgUsbTx.nTxLen = 8;
 8003e1a:	4b53      	ldr	r3, [pc, #332]	; (8003f68 <PdmConfig_Set+0x660>)
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 8;
 8003e20:	4b52      	ldr	r3, [pc, #328]	; (8003f6c <PdmConfig_Set+0x664>)
 8003e22:	2208      	movs	r2, #8
 8003e24:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_OUTPUTS;
 8003e26:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <PdmConfig_Set+0x660>)
 8003e28:	226f      	movs	r2, #111	; 0x6f
 8003e2a:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((nOutNum & 0x0F) << 4) + (pConfig->stOutput[nOutNum].nEnabled & 0x01);
 8003e2c:	4b4b      	ldr	r3, [pc, #300]	; (8003f5c <PdmConfig_Set+0x654>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	4b49      	ldr	r3, [pc, #292]	; (8003f5c <PdmConfig_Set+0x654>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	68f9      	ldr	r1, [r7, #12]
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4403      	add	r3, r0
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	440b      	add	r3, r1
 8003e46:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	4b44      	ldr	r3, [pc, #272]	; (8003f68 <PdmConfig_Set+0x660>)
 8003e58:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stOutput[nOutNum].nInput;
 8003e5a:	4b40      	ldr	r3, [pc, #256]	; (8003f5c <PdmConfig_Set+0x654>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	460b      	mov	r3, r1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	440b      	add	r3, r1
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f203 33d1 	addw	r3, r3, #977	; 0x3d1
 8003e70:	781a      	ldrb	r2, [r3, #0]
 8003e72:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <PdmConfig_Set+0x660>)
 8003e74:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stOutput[nOutNum].nCurrentLimit * 10);
 8003e76:	4b39      	ldr	r3, [pc, #228]	; (8003f5c <PdmConfig_Set+0x654>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	440b      	add	r3, r1
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4413      	add	r3, r2
 8003e88:	f203 33da 	addw	r3, r3, #986	; 0x3da
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	0092      	lsls	r2, r2, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <PdmConfig_Set+0x660>)
 8003e9c:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stOutput[nOutNum].nResetLimit & 0x0F) << 4) + (pConfig->stOutput[nOutNum].eResetMode & 0x0F);
 8003e9e:	4b2f      	ldr	r3, [pc, #188]	; (8003f5c <PdmConfig_Set+0x654>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	440b      	add	r3, r1
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <PdmConfig_Set+0x654>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	68f9      	ldr	r1, [r7, #12]
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4403      	add	r3, r0
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	4413      	add	r3, r2
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <PdmConfig_Set+0x660>)
 8003ede:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stOutput[nOutNum].nResetTime / 100);
 8003ee0:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <PdmConfig_Set+0x654>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	440b      	add	r3, r1
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f203 33e2 	addw	r3, r3, #994	; 0x3e2
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <PdmConfig_Set+0x668>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <PdmConfig_Set+0x660>)
 8003f06:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stOutput[nOutNum].nInrushLimit * 10);
 8003f08:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <PdmConfig_Set+0x654>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	460b      	mov	r3, r1
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	440b      	add	r3, r1
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	0092      	lsls	r2, r2, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <PdmConfig_Set+0x660>)
 8003f2e:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = (uint8_t)(pConfig->stOutput[nOutNum].nInrushTime / 100);
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <PdmConfig_Set+0x654>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	4619      	mov	r1, r3
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	440b      	add	r3, r1
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4413      	add	r3, r2
 8003f42:	f203 33de 	addw	r3, r3, #990	; 0x3de
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <PdmConfig_Set+0x668>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <PdmConfig_Set+0x660>)
 8003f56:	71da      	strb	r2, [r3, #7]
      }
    break;
 8003f58:	f000 bfdf 	b.w	8004f1a <PdmConfig_Set+0x1612>
 8003f5c:	2000268e 	.word	0x2000268e
 8003f60:	cccccccd 	.word	0xcccccccd
 8003f64:	2000268c 	.word	0x2000268c
 8003f68:	20002660 	.word	0x20002660
 8003f6c:	2000266c 	.word	0x2000266c
 8003f70:	51eb851f 	.word	0x51eb851f

    //Set Virtual Input Settings
    // 'U'
    case MSG_RX_SET_VIRTUAL_INPUTS:
      if(stMsgRx->nRxLen == 7){
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f7a:	2b07      	cmp	r3, #7
 8003f7c:	f040 80bf 	bne.w	80040fe <PdmConfig_Set+0x7f6>
        nVirtInNum = (stMsgRx->nRxData[2]);
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003f86:	4bbb      	ldr	r3, [pc, #748]	; (8004274 <PdmConfig_Set+0x96c>)
 8003f88:	701a      	strb	r2, [r3, #0]
        if(nVirtInNum < PDM_NUM_VIRT_INPUTS){
 8003f8a:	4bba      	ldr	r3, [pc, #744]	; (8004274 <PdmConfig_Set+0x96c>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b13      	cmp	r3, #19
 8003f90:	f200 80b5 	bhi.w	80040fe <PdmConfig_Set+0x7f6>
          pConfig->stVirtualInput[nVirtInNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f9a:	4ab6      	ldr	r2, [pc, #728]	; (8004274 <PdmConfig_Set+0x96c>)
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	b2d8      	uxtb	r0, r3
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	33b0      	adds	r3, #176	; 0xb0
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot0 = (stMsgRx->nRxData[1] & 0x02) >> 1;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fbe:	105b      	asrs	r3, r3, #1
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	4aac      	ldr	r2, [pc, #688]	; (8004274 <PdmConfig_Set+0x96c>)
 8003fc4:	7812      	ldrb	r2, [r2, #0]
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	b2d8      	uxtb	r0, r3
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	33b1      	adds	r3, #177	; 0xb1
 8003fdc:	4602      	mov	r2, r0
 8003fde:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot1 = (stMsgRx->nRxData[1] & 0x04) >> 2;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fe6:	109b      	asrs	r3, r3, #2
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	4aa2      	ldr	r2, [pc, #648]	; (8004274 <PdmConfig_Set+0x96c>)
 8003fec:	7812      	ldrb	r2, [r2, #0]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	b2d8      	uxtb	r0, r3
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	33b9      	adds	r3, #185	; 0xb9
 8004004:	4602      	mov	r2, r0
 8004006:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nNot2 = (stMsgRx->nRxData[1] & 0x08) >> 3;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800400e:	10db      	asrs	r3, r3, #3
 8004010:	b2db      	uxtb	r3, r3
 8004012:	4a98      	ldr	r2, [pc, #608]	; (8004274 <PdmConfig_Set+0x96c>)
 8004014:	7812      	ldrb	r2, [r2, #0]
 8004016:	4611      	mov	r1, r2
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	b2d8      	uxtb	r0, r3
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	460b      	mov	r3, r1
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	33c1      	adds	r3, #193	; 0xc1
 800402c:	4602      	mov	r2, r0
 800402e:	701a      	strb	r2, [r3, #0]

          pConfig->stVirtualInput[nVirtInNum].nVar0 = stMsgRx->nRxData[3];
 8004030:	4b90      	ldr	r3, [pc, #576]	; (8004274 <PdmConfig_Set+0x96c>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	4619      	mov	r1, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	460b      	mov	r3, r1
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	33b2      	adds	r3, #178	; 0xb2
 800404a:	4602      	mov	r2, r0
 800404c:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nVar1 = stMsgRx->nRxData[4];
 800404e:	4b89      	ldr	r3, [pc, #548]	; (8004274 <PdmConfig_Set+0x96c>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	4619      	mov	r1, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	460b      	mov	r3, r1
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	33ba      	adds	r3, #186	; 0xba
 8004068:	4602      	mov	r2, r0
 800406a:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].nVar2 = stMsgRx->nRxData[5];
 800406c:	4b81      	ldr	r3, [pc, #516]	; (8004274 <PdmConfig_Set+0x96c>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	4619      	mov	r1, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	460b      	mov	r3, r1
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	33c2      	adds	r3, #194	; 0xc2
 8004086:	4602      	mov	r2, r0
 8004088:	701a      	strb	r2, [r3, #0]

          pConfig->stVirtualInput[nVirtInNum].eCond0 = (stMsgRx->nRxData[6] & 0x03);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004090:	4a78      	ldr	r2, [pc, #480]	; (8004274 <PdmConfig_Set+0x96c>)
 8004092:	7812      	ldrb	r2, [r2, #0]
 8004094:	4611      	mov	r1, r2
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	b2d8      	uxtb	r0, r3
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	460b      	mov	r3, r1
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	33b8      	adds	r3, #184	; 0xb8
 80040aa:	4602      	mov	r2, r0
 80040ac:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].eCond1 = (stMsgRx->nRxData[6] & 0x0C) >> 2;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80040b4:	109b      	asrs	r3, r3, #2
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	4a6e      	ldr	r2, [pc, #440]	; (8004274 <PdmConfig_Set+0x96c>)
 80040ba:	7812      	ldrb	r2, [r2, #0]
 80040bc:	4611      	mov	r1, r2
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	b2d8      	uxtb	r0, r3
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	460b      	mov	r3, r1
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	33c0      	adds	r3, #192	; 0xc0
 80040d2:	4602      	mov	r2, r0
 80040d4:	701a      	strb	r2, [r3, #0]
          pConfig->stVirtualInput[nVirtInNum].eMode = (stMsgRx->nRxData[6] & 0xC0) >> 6;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80040dc:	4a65      	ldr	r2, [pc, #404]	; (8004274 <PdmConfig_Set+0x96c>)
 80040de:	7812      	ldrb	r2, [r2, #0]
 80040e0:	4611      	mov	r1, r2
 80040e2:	099b      	lsrs	r3, r3, #6
 80040e4:	b2d8      	uxtb	r0, r3
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	460b      	mov	r3, r1
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	33c8      	adds	r3, #200	; 0xc8
 80040f4:	4602      	mov	r2, r0
 80040f6:	701a      	strb	r2, [r3, #0]
          nSend = 1;
 80040f8:	4b5f      	ldr	r3, [pc, #380]	; (8004278 <PdmConfig_Set+0x970>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004104:	2b02      	cmp	r3, #2
 8004106:	d10b      	bne.n	8004120 <PdmConfig_Set+0x818>
        nVirtInNum = (stMsgRx->nRxData[1]);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800410e:	4b59      	ldr	r3, [pc, #356]	; (8004274 <PdmConfig_Set+0x96c>)
 8004110:	701a      	strb	r2, [r3, #0]
        if(nVirtInNum < PDM_NUM_VIRT_INPUTS){
 8004112:	4b58      	ldr	r3, [pc, #352]	; (8004274 <PdmConfig_Set+0x96c>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b13      	cmp	r3, #19
 8004118:	d802      	bhi.n	8004120 <PdmConfig_Set+0x818>
          nSend = 1;
 800411a:	4b57      	ldr	r3, [pc, #348]	; (8004278 <PdmConfig_Set+0x970>)
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 8004120:	4b55      	ldr	r3, [pc, #340]	; (8004278 <PdmConfig_Set+0x970>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8703 	beq.w	8004f30 <PdmConfig_Set+0x1628>
        stMsgUsbTx.nTxLen = 7;
 800412a:	4b54      	ldr	r3, [pc, #336]	; (800427c <PdmConfig_Set+0x974>)
 800412c:	2207      	movs	r2, #7
 800412e:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 8004130:	4b53      	ldr	r3, [pc, #332]	; (8004280 <PdmConfig_Set+0x978>)
 8004132:	2207      	movs	r2, #7
 8004134:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_VIRTUAL_INPUTS;
 8004136:	4b51      	ldr	r3, [pc, #324]	; (800427c <PdmConfig_Set+0x974>)
 8004138:	2275      	movs	r2, #117	; 0x75
 800413a:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 800413c:	4b4d      	ldr	r3, [pc, #308]	; (8004274 <PdmConfig_Set+0x96c>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	4619      	mov	r1, r3
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	460b      	mov	r3, r1
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4413      	add	r3, r2
 800414e:	33c1      	adds	r3, #193	; 0xc1
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	b25b      	sxtb	r3, r3
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	b25a      	sxtb	r2, r3
 800415c:	4b45      	ldr	r3, [pc, #276]	; (8004274 <PdmConfig_Set+0x96c>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	68f9      	ldr	r1, [r7, #12]
 8004164:	4603      	mov	r3, r0
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4403      	add	r3, r0
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	440b      	add	r3, r1
 800416e:	33b9      	adds	r3, #185	; 0xb9
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	b25b      	sxtb	r3, r3
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	b25b      	sxtb	r3, r3
 800417c:	4313      	orrs	r3, r2
 800417e:	b25b      	sxtb	r3, r3
 8004180:	b2da      	uxtb	r2, r3
                                ((pConfig->stVirtualInput[nVirtInNum].nNot0 & 0x01) << 1) + (pConfig->stVirtualInput[nVirtInNum].nEnabled & 0x01);
 8004182:	4b3c      	ldr	r3, [pc, #240]	; (8004274 <PdmConfig_Set+0x96c>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	68f9      	ldr	r1, [r7, #12]
 800418a:	4603      	mov	r3, r0
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4403      	add	r3, r0
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	440b      	add	r3, r1
 8004194:	33b1      	adds	r3, #177	; 0xb1
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 80041a2:	4413      	add	r3, r2
 80041a4:	b2da      	uxtb	r2, r3
                                ((pConfig->stVirtualInput[nVirtInNum].nNot0 & 0x01) << 1) + (pConfig->stVirtualInput[nVirtInNum].nEnabled & 0x01);
 80041a6:	4b33      	ldr	r3, [pc, #204]	; (8004274 <PdmConfig_Set+0x96c>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	68f9      	ldr	r1, [r7, #12]
 80041ae:	4603      	mov	r3, r0
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4403      	add	r3, r0
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	440b      	add	r3, r1
 80041b8:	33b0      	adds	r3, #176	; 0xb0
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stVirtualInput[nVirtInNum].nNot2 & 0x01) << 3) + ((pConfig->stVirtualInput[nVirtInNum].nNot1 & 0x01) << 2) +
 80041c6:	4b2d      	ldr	r3, [pc, #180]	; (800427c <PdmConfig_Set+0x974>)
 80041c8:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = nVirtInNum;
 80041ca:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <PdmConfig_Set+0x96c>)
 80041cc:	781a      	ldrb	r2, [r3, #0]
 80041ce:	4b2b      	ldr	r3, [pc, #172]	; (800427c <PdmConfig_Set+0x974>)
 80041d0:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stVirtualInput[nVirtInNum].nVar0;
 80041d2:	4b28      	ldr	r3, [pc, #160]	; (8004274 <PdmConfig_Set+0x96c>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	4619      	mov	r1, r3
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	460b      	mov	r3, r1
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4413      	add	r3, r2
 80041e4:	33b2      	adds	r3, #178	; 0xb2
 80041e6:	781a      	ldrb	r2, [r3, #0]
 80041e8:	4b24      	ldr	r3, [pc, #144]	; (800427c <PdmConfig_Set+0x974>)
 80041ea:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = pConfig->stVirtualInput[nVirtInNum].nVar1;
 80041ec:	4b21      	ldr	r3, [pc, #132]	; (8004274 <PdmConfig_Set+0x96c>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	4619      	mov	r1, r3
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	460b      	mov	r3, r1
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4413      	add	r3, r2
 80041fe:	33ba      	adds	r3, #186	; 0xba
 8004200:	781a      	ldrb	r2, [r3, #0]
 8004202:	4b1e      	ldr	r3, [pc, #120]	; (800427c <PdmConfig_Set+0x974>)
 8004204:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = pConfig->stVirtualInput[nVirtInNum].nVar2;
 8004206:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <PdmConfig_Set+0x96c>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	4619      	mov	r1, r3
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	460b      	mov	r3, r1
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	33c2      	adds	r3, #194	; 0xc2
 800421a:	781a      	ldrb	r2, [r3, #0]
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <PdmConfig_Set+0x974>)
 800421e:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = ((pConfig->stVirtualInput[nVirtInNum].eMode & 0x0F) << 4) + ((pConfig->stVirtualInput[nVirtInNum].eCond0 & 0x03) << 2) +
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <PdmConfig_Set+0x96c>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	4619      	mov	r1, r3
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	460b      	mov	r3, r1
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	33c8      	adds	r3, #200	; 0xc8
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <PdmConfig_Set+0x96c>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	68f9      	ldr	r1, [r7, #12]
 8004242:	4603      	mov	r3, r0
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4403      	add	r3, r0
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	440b      	add	r3, r1
 800424c:	33b8      	adds	r3, #184	; 0xb8
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	b2db      	uxtb	r3, r3
 800425a:	4413      	add	r3, r2
 800425c:	b2da      	uxtb	r2, r3
                                (pConfig->stVirtualInput[nVirtInNum].eCond1 & 0x03);
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <PdmConfig_Set+0x96c>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	68f9      	ldr	r1, [r7, #12]
 8004266:	4603      	mov	r3, r0
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4403      	add	r3, r0
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	440b      	add	r3, r1
 8004270:	33c0      	adds	r3, #192	; 0xc0
 8004272:	e007      	b.n	8004284 <PdmConfig_Set+0x97c>
 8004274:	2000268f 	.word	0x2000268f
 8004278:	2000268c 	.word	0x2000268c
 800427c:	20002660 	.word	0x20002660
 8004280:	2000266c 	.word	0x2000266c
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[6] = ((pConfig->stVirtualInput[nVirtInNum].eMode & 0x0F) << 4) + ((pConfig->stVirtualInput[nVirtInNum].eCond0 & 0x03) << 2) +
 800428c:	4413      	add	r3, r2
 800428e:	b2da      	uxtb	r2, r3
 8004290:	4b5b      	ldr	r3, [pc, #364]	; (8004400 <PdmConfig_Set+0xaf8>)
 8004292:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004294:	4b5a      	ldr	r3, [pc, #360]	; (8004400 <PdmConfig_Set+0xaf8>)
 8004296:	2200      	movs	r2, #0
 8004298:	71da      	strb	r2, [r3, #7]
      }
    break;
 800429a:	f000 be49 	b.w	8004f30 <PdmConfig_Set+0x1628>

    //Set Wiper Settings
    // 'W'
    case MSG_RX_SET_WIPER:
      if(stMsgRx->nRxLen == 8){
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d152      	bne.n	800434e <PdmConfig_Set+0xa46>
        pConfig->stWiper.nEnabled = (stMsgRx->nRxData[1] & 0x01);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
        pConfig->stWiper.nMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042c0:	105b      	asrs	r3, r3, #1
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
        pConfig->stWiper.nParkStopLevel = (stMsgRx->nRxData[1] & 0x08) >> 3;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042d6:	10db      	asrs	r3, r3, #3
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
        pConfig->stWiper.nWashWipeCycles = (stMsgRx->nRxData[1] * 0xF0) >> 4;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042ec:	461a      	mov	r2, r3
 80042ee:	4613      	mov	r3, r2
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	111b      	asrs	r3, r3, #4
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb

        pConfig->stWiper.nSlowInput = stMsgRx->nRxData[2];
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2

        pConfig->stWiper.nFastInput = stMsgRx->nRxData[3];
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3

        pConfig->stWiper.nInterInput = stMsgRx->nRxData[4];
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

        pConfig->stWiper.nOnInput = stMsgRx->nRxData[5];
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f883 24f5 	strb.w	r2, [r3, #1269]	; 0x4f5

        pConfig->stWiper.nParkInput = stMsgRx->nRxData[6];
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7

        pConfig->stWiper.nWashInput = stMsgRx->nRxData[7];
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
        nSend = 1;
 8004348:	4b2e      	ldr	r3, [pc, #184]	; (8004404 <PdmConfig_Set+0xafc>)
 800434a:	2201      	movs	r2, #1
 800434c:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004354:	2b01      	cmp	r3, #1
 8004356:	d004      	beq.n	8004362 <PdmConfig_Set+0xa5a>
 8004358:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <PdmConfig_Set+0xafc>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 85e9 	beq.w	8004f34 <PdmConfig_Set+0x162c>
        stMsgUsbTx.nTxLen = 8;
 8004362:	4b27      	ldr	r3, [pc, #156]	; (8004400 <PdmConfig_Set+0xaf8>)
 8004364:	2208      	movs	r2, #8
 8004366:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 8;
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <PdmConfig_Set+0xb00>)
 800436a:	2208      	movs	r2, #8
 800436c:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER;
 800436e:	4b24      	ldr	r3, [pc, #144]	; (8004400 <PdmConfig_Set+0xaf8>)
 8004370:	2277      	movs	r2, #119	; 0x77
 8004372:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 34fb 	ldrb.w	r3, [r3, #1275]	; 0x4fb
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	b2da      	uxtb	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 34f8 	ldrb.w	r3, [r3, #1272]	; 0x4f8
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	b2db      	uxtb	r3, r3
 800438e:	4413      	add	r3, r2
 8004390:	b2da      	uxtb	r2, r3
                                ((pConfig->stWiper.nMode & 0x03) << 2) + (pConfig->stWiper.nEnabled & 0x01);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 34f1 	ldrb.w	r3, [r3, #1265]	; 0x4f1
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 80043a2:	4413      	add	r3, r2
 80043a4:	b2da      	uxtb	r2, r3
                                ((pConfig->stWiper.nMode & 0x03) << 2) + (pConfig->stWiper.nEnabled & 0x01);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 34f0 	ldrb.w	r3, [r3, #1264]	; 0x4f0
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	4413      	add	r3, r2
 80043b4:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[1] = ((pConfig->stWiper.nWashWipeCycles & 0x0F) << 4) + ((pConfig->stWiper.nParkStopLevel & 0x01) << 3) +
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <PdmConfig_Set+0xaf8>)
 80043b8:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stWiper.nSlowInput;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 24f2 	ldrb.w	r2, [r3, #1266]	; 0x4f2
 80043c0:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <PdmConfig_Set+0xaf8>)
 80043c2:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stWiper.nFastInput;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 24f3 	ldrb.w	r2, [r3, #1267]	; 0x4f3
 80043ca:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <PdmConfig_Set+0xaf8>)
 80043cc:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = pConfig->stWiper.nInterInput;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 24f4 	ldrb.w	r2, [r3, #1268]	; 0x4f4
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <PdmConfig_Set+0xaf8>)
 80043d6:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = pConfig->stWiper.nOnInput;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 24f5 	ldrb.w	r2, [r3, #1269]	; 0x4f5
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <PdmConfig_Set+0xaf8>)
 80043e0:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = pConfig->stWiper.nParkInput;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 24f7 	ldrb.w	r2, [r3, #1271]	; 0x4f7
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <PdmConfig_Set+0xaf8>)
 80043ea:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = pConfig->stWiper.nWashInput;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f893 24fa 	ldrb.w	r2, [r3, #1274]	; 0x4fa
 80043f2:	4b03      	ldr	r3, [pc, #12]	; (8004400 <PdmConfig_Set+0xaf8>)
 80043f4:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 80043f6:	4b03      	ldr	r3, [pc, #12]	; (8004404 <PdmConfig_Set+0xafc>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
      }
    break;
 80043fc:	f000 bd9a 	b.w	8004f34 <PdmConfig_Set+0x162c>
 8004400:	20002660 	.word	0x20002660
 8004404:	2000268c 	.word	0x2000268c
 8004408:	2000266c 	.word	0x2000266c

    //Set Wiper Speed Settings
    // 'P'
    case MSG_RX_SET_WIPER_SPEED:
      if(stMsgRx->nRxLen == 7){
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004412:	2b07      	cmp	r3, #7
 8004414:	d16a      	bne.n	80044ec <PdmConfig_Set+0xbe4>
        pConfig->stWiper.nSwipeInput = stMsgRx->nRxData[1];
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9

        pConfig->stWiper.nSpeedInput = stMsgRx->nRxData[2];
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6

        pConfig->stWiper.nSpeedMap[0] = (stMsgRx->nRxData[3] * 0x0F);
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004434:	461a      	mov	r2, r3
 8004436:	0112      	lsls	r2, r2, #4
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	b2da      	uxtb	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
        pConfig->stWiper.nSpeedMap[1] = (stMsgRx->nRxData[3] * 0xF0) >> 4;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004448:	461a      	mov	r2, r3
 800444a:	4613      	mov	r3, r2
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	1a9b      	subs	r3, r3, r2
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	111b      	asrs	r3, r3, #4
 8004454:	b2da      	uxtb	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f883 24fd 	strb.w	r2, [r3, #1277]	; 0x4fd

        pConfig->stWiper.nSpeedMap[2] = (stMsgRx->nRxData[4] * 0x0F);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004462:	461a      	mov	r2, r3
 8004464:	0112      	lsls	r2, r2, #4
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	b2da      	uxtb	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
        pConfig->stWiper.nSpeedMap[3] = (stMsgRx->nRxData[4] * 0xF0) >> 4;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004476:	461a      	mov	r2, r3
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	111b      	asrs	r3, r3, #4
 8004482:	b2da      	uxtb	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff

        pConfig->stWiper.nSpeedMap[4] = (stMsgRx->nRxData[5] * 0x0F);
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004490:	461a      	mov	r2, r3
 8004492:	0112      	lsls	r2, r2, #4
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	b2da      	uxtb	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
        pConfig->stWiper.nSpeedMap[5] = (stMsgRx->nRxData[5] * 0xF0) >> 4;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044a4:	461a      	mov	r2, r3
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	111b      	asrs	r3, r3, #4
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501

        pConfig->stWiper.nSpeedMap[6] = (stMsgRx->nRxData[6] * 0x0F);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80044be:	461a      	mov	r2, r3
 80044c0:	0112      	lsls	r2, r2, #4
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
        pConfig->stWiper.nSpeedMap[7] = (stMsgRx->nRxData[6] * 0xF0) >> 4;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80044d2:	461a      	mov	r2, r3
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	111b      	asrs	r3, r3, #4
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
        nSend = 1;
 80044e6:	4b97      	ldr	r3, [pc, #604]	; (8004744 <PdmConfig_Set+0xe3c>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d004      	beq.n	8004500 <PdmConfig_Set+0xbf8>
 80044f6:	4b93      	ldr	r3, [pc, #588]	; (8004744 <PdmConfig_Set+0xe3c>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 851c 	beq.w	8004f38 <PdmConfig_Set+0x1630>
        stMsgUsbTx.nTxLen = 7;
 8004500:	4b91      	ldr	r3, [pc, #580]	; (8004748 <PdmConfig_Set+0xe40>)
 8004502:	2207      	movs	r2, #7
 8004504:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 8004506:	4b91      	ldr	r3, [pc, #580]	; (800474c <PdmConfig_Set+0xe44>)
 8004508:	2207      	movs	r2, #7
 800450a:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER_SPEED;
 800450c:	4b8e      	ldr	r3, [pc, #568]	; (8004748 <PdmConfig_Set+0xe40>)
 800450e:	2270      	movs	r2, #112	; 0x70
 8004510:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = pConfig->stWiper.nSwipeInput;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 24f9 	ldrb.w	r2, [r3, #1273]	; 0x4f9
 8004518:	4b8b      	ldr	r3, [pc, #556]	; (8004748 <PdmConfig_Set+0xe40>)
 800451a:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stWiper.nSpeedInput;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 24f6 	ldrb.w	r2, [r3, #1270]	; 0x4f6
 8004522:	4b89      	ldr	r3, [pc, #548]	; (8004748 <PdmConfig_Set+0xe40>)
 8004524:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = ((pConfig->stWiper.nSpeedMap[1] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[0] & 0x0F);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 34fd 	ldrb.w	r3, [r3, #1277]	; 0x4fd
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	b2da      	uxtb	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 34fc 	ldrb.w	r3, [r3, #1276]	; 0x4fc
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	b2db      	uxtb	r3, r3
 800453c:	4413      	add	r3, r2
 800453e:	b2da      	uxtb	r2, r3
 8004540:	4b81      	ldr	r3, [pc, #516]	; (8004748 <PdmConfig_Set+0xe40>)
 8004542:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stWiper.nSpeedMap[3] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[2] & 0x0F);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 34ff 	ldrb.w	r3, [r3, #1279]	; 0x4ff
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 34fe 	ldrb.w	r3, [r3, #1278]	; 0x4fe
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	b2db      	uxtb	r3, r3
 800455a:	4413      	add	r3, r2
 800455c:	b2da      	uxtb	r2, r3
 800455e:	4b7a      	ldr	r3, [pc, #488]	; (8004748 <PdmConfig_Set+0xe40>)
 8004560:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = ((pConfig->stWiper.nSpeedMap[5] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[4] & 0x0F);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 3501 	ldrb.w	r3, [r3, #1281]	; 0x501
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	b2da      	uxtb	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	b2db      	uxtb	r3, r3
 8004578:	4413      	add	r3, r2
 800457a:	b2da      	uxtb	r2, r3
 800457c:	4b72      	ldr	r3, [pc, #456]	; (8004748 <PdmConfig_Set+0xe40>)
 800457e:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = ((pConfig->stWiper.nSpeedMap[7] & 0x0F) << 4) + (pConfig->stWiper.nSpeedMap[6] & 0x0F);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 3503 	ldrb.w	r3, [r3, #1283]	; 0x503
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	b2da      	uxtb	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 3502 	ldrb.w	r3, [r3, #1282]	; 0x502
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	b2db      	uxtb	r3, r3
 8004596:	4413      	add	r3, r2
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4b6b      	ldr	r3, [pc, #428]	; (8004748 <PdmConfig_Set+0xe40>)
 800459c:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 800459e:	4b6a      	ldr	r3, [pc, #424]	; (8004748 <PdmConfig_Set+0xe40>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 80045a4:	4b67      	ldr	r3, [pc, #412]	; (8004744 <PdmConfig_Set+0xe3c>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	701a      	strb	r2, [r3, #0]
      }
    break;
 80045aa:	f000 bcc5 	b.w	8004f38 <PdmConfig_Set+0x1630>

    //Set Wiper Intermit Delays Settings
    // 'Y'
    case MSG_RX_SET_WIPER_DELAYS:
      if(stMsgRx->nRxLen == 7){
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045b4:	2b07      	cmp	r3, #7
 80045b6:	d168      	bne.n	800468a <PdmConfig_Set+0xd82>
        pConfig->stWiper.nIntermitTime[0] = stMsgRx->nRxData[1] * 100;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045be:	b29b      	uxth	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	0092      	lsls	r2, r2, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	461a      	mov	r2, r3
 80045c8:	0091      	lsls	r1, r2, #2
 80045ca:	461a      	mov	r2, r3
 80045cc:	460b      	mov	r3, r1
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8a3 2504 	strh.w	r2, [r3, #1284]	; 0x504
        pConfig->stWiper.nIntermitTime[1] = stMsgRx->nRxData[2] * 100;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	0092      	lsls	r2, r2, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	461a      	mov	r2, r3
 80045ea:	0091      	lsls	r1, r2, #2
 80045ec:	461a      	mov	r2, r3
 80045ee:	460b      	mov	r3, r1
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8a3 2506 	strh.w	r2, [r3, #1286]	; 0x506
        pConfig->stWiper.nIntermitTime[2] = stMsgRx->nRxData[3] * 100;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004602:	b29b      	uxth	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	0092      	lsls	r2, r2, #2
 8004608:	4413      	add	r3, r2
 800460a:	461a      	mov	r2, r3
 800460c:	0091      	lsls	r1, r2, #2
 800460e:	461a      	mov	r2, r3
 8004610:	460b      	mov	r3, r1
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f8a3 2508 	strh.w	r2, [r3, #1288]	; 0x508
        pConfig->stWiper.nIntermitTime[3] = stMsgRx->nRxData[4] * 100;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004624:	b29b      	uxth	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	0092      	lsls	r2, r2, #2
 800462a:	4413      	add	r3, r2
 800462c:	461a      	mov	r2, r3
 800462e:	0091      	lsls	r1, r2, #2
 8004630:	461a      	mov	r2, r3
 8004632:	460b      	mov	r3, r1
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8a3 250a 	strh.w	r2, [r3, #1290]	; 0x50a
        pConfig->stWiper.nIntermitTime[4] = stMsgRx->nRxData[5] * 100;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004646:	b29b      	uxth	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	0092      	lsls	r2, r2, #2
 800464c:	4413      	add	r3, r2
 800464e:	461a      	mov	r2, r3
 8004650:	0091      	lsls	r1, r2, #2
 8004652:	461a      	mov	r2, r3
 8004654:	460b      	mov	r3, r1
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
        pConfig->stWiper.nIntermitTime[5] = stMsgRx->nRxData[6] * 100;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004668:	b29b      	uxth	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	0092      	lsls	r2, r2, #2
 800466e:	4413      	add	r3, r2
 8004670:	461a      	mov	r2, r3
 8004672:	0091      	lsls	r1, r2, #2
 8004674:	461a      	mov	r2, r3
 8004676:	460b      	mov	r3, r1
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8a3 250e 	strh.w	r2, [r3, #1294]	; 0x50e
        nSend = 1;
 8004684:	4b2f      	ldr	r3, [pc, #188]	; (8004744 <PdmConfig_Set+0xe3c>)
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
      }
      if((stMsgRx->nRxLen == 1) || nSend){
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004690:	2b01      	cmp	r3, #1
 8004692:	d004      	beq.n	800469e <PdmConfig_Set+0xd96>
 8004694:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <PdmConfig_Set+0xe3c>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 844f 	beq.w	8004f3c <PdmConfig_Set+0x1634>
        stMsgUsbTx.nTxLen = 7;
 800469e:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <PdmConfig_Set+0xe40>)
 80046a0:	2207      	movs	r2, #7
 80046a2:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 7;
 80046a4:	4b29      	ldr	r3, [pc, #164]	; (800474c <PdmConfig_Set+0xe44>)
 80046a6:	2207      	movs	r2, #7
 80046a8:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_WIPER_DELAYS;
 80046aa:	4b27      	ldr	r3, [pc, #156]	; (8004748 <PdmConfig_Set+0xe40>)
 80046ac:	2279      	movs	r2, #121	; 0x79
 80046ae:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (uint8_t)(pConfig->stWiper.nIntermitTime[0] / 100);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8b3 3504 	ldrh.w	r3, [r3, #1284]	; 0x504
 80046b6:	4a26      	ldr	r2, [pc, #152]	; (8004750 <PdmConfig_Set+0xe48>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	b29b      	uxth	r3, r3
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b21      	ldr	r3, [pc, #132]	; (8004748 <PdmConfig_Set+0xe40>)
 80046c4:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)(pConfig->stWiper.nIntermitTime[1] / 100);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8b3 3506 	ldrh.w	r3, [r3, #1286]	; 0x506
 80046cc:	4a20      	ldr	r2, [pc, #128]	; (8004750 <PdmConfig_Set+0xe48>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <PdmConfig_Set+0xe40>)
 80046da:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stWiper.nIntermitTime[2] / 100);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8b3 3508 	ldrh.w	r3, [r3, #1288]	; 0x508
 80046e2:	4a1b      	ldr	r2, [pc, #108]	; (8004750 <PdmConfig_Set+0xe48>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	4b16      	ldr	r3, [pc, #88]	; (8004748 <PdmConfig_Set+0xe40>)
 80046f0:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stWiper.nIntermitTime[3] / 100);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8b3 350a 	ldrh.w	r3, [r3, #1290]	; 0x50a
 80046f8:	4a15      	ldr	r2, [pc, #84]	; (8004750 <PdmConfig_Set+0xe48>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	b29b      	uxth	r3, r3
 8004702:	b2da      	uxtb	r2, r3
 8004704:	4b10      	ldr	r3, [pc, #64]	; (8004748 <PdmConfig_Set+0xe40>)
 8004706:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stWiper.nIntermitTime[4] / 100);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f8b3 350c 	ldrh.w	r3, [r3, #1292]	; 0x50c
 800470e:	4a10      	ldr	r2, [pc, #64]	; (8004750 <PdmConfig_Set+0xe48>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	b29b      	uxth	r3, r3
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <PdmConfig_Set+0xe40>)
 800471c:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stWiper.nIntermitTime[5] / 100);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8b3 350e 	ldrh.w	r3, [r3, #1294]	; 0x50e
 8004724:	4a0a      	ldr	r2, [pc, #40]	; (8004750 <PdmConfig_Set+0xe48>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	b29b      	uxth	r3, r3
 800472e:	b2da      	uxtb	r2, r3
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <PdmConfig_Set+0xe40>)
 8004732:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004734:	4b04      	ldr	r3, [pc, #16]	; (8004748 <PdmConfig_Set+0xe40>)
 8004736:	2200      	movs	r2, #0
 8004738:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 800473a:	4b02      	ldr	r3, [pc, #8]	; (8004744 <PdmConfig_Set+0xe3c>)
 800473c:	2201      	movs	r2, #1
 800473e:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004740:	e3fc      	b.n	8004f3c <PdmConfig_Set+0x1634>
 8004742:	bf00      	nop
 8004744:	2000268c 	.word	0x2000268c
 8004748:	20002660 	.word	0x20002660
 800474c:	2000266c 	.word	0x2000266c
 8004750:	51eb851f 	.word	0x51eb851f

    //Set Flasher Settings
    // 'H'
    case MSG_RX_SET_FLASHER:
      if(stMsgRx->nRxLen == 6){
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800475a:	2b06      	cmp	r3, #6
 800475c:	f040 808f 	bne.w	800487e <PdmConfig_Set+0xf76>
        nFlasherNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	b2da      	uxtb	r2, r3
 800476a:	4b90      	ldr	r3, [pc, #576]	; (80049ac <PdmConfig_Set+0x10a4>)
 800476c:	701a      	strb	r2, [r3, #0]
        if(nFlasherNum < PDM_NUM_FLASHERS){
 800476e:	4b8f      	ldr	r3, [pc, #572]	; (80049ac <PdmConfig_Set+0x10a4>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b03      	cmp	r3, #3
 8004774:	f200 8083 	bhi.w	800487e <PdmConfig_Set+0xf76>
          pConfig->stFlasher[nFlasherNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800477e:	4a8b      	ldr	r2, [pc, #556]	; (80049ac <PdmConfig_Set+0x10a4>)
 8004780:	7812      	ldrb	r2, [r2, #0]
 8004782:	4611      	mov	r1, r2
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	b2d8      	uxtb	r0, r3
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	460b      	mov	r3, r1
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	440b      	add	r3, r1
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800479a:	4602      	mov	r2, r0
 800479c:	701a      	strb	r2, [r3, #0]
          pConfig->stFlasher[nFlasherNum].nSingleCycle = (stMsgRx->nRxData[1] & 0x02) >> 1;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047a4:	105b      	asrs	r3, r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	4a80      	ldr	r2, [pc, #512]	; (80049ac <PdmConfig_Set+0x10a4>)
 80047aa:	7812      	ldrb	r2, [r2, #0]
 80047ac:	4611      	mov	r1, r2
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	b2d8      	uxtb	r0, r3
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	460b      	mov	r3, r1
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	440b      	add	r3, r1
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4413      	add	r3, r2
 80047c0:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80047c4:	4602      	mov	r2, r0
 80047c6:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nInput = stMsgRx->nRxData[2];
 80047c8:	4b78      	ldr	r3, [pc, #480]	; (80049ac <PdmConfig_Set+0x10a4>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	4619      	mov	r1, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	460b      	mov	r3, r1
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	440b      	add	r3, r1
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4413      	add	r3, r2
 80047e0:	f203 5311 	addw	r3, r3, #1297	; 0x511
 80047e4:	4602      	mov	r2, r0
 80047e6:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nOutput = stMsgRx->nRxData[3];
 80047e8:	4b70      	ldr	r3, [pc, #448]	; (80049ac <PdmConfig_Set+0x10a4>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	4619      	mov	r1, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	460b      	mov	r3, r1
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	440b      	add	r3, r1
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4413      	add	r3, r2
 8004800:	f203 531d 	addw	r3, r3, #1309	; 0x51d
 8004804:	4602      	mov	r2, r0
 8004806:	701a      	strb	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nFlashOnTime = stMsgRx->nRxData[4] * 100;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800480e:	b29a      	uxth	r2, r3
 8004810:	4b66      	ldr	r3, [pc, #408]	; (80049ac <PdmConfig_Set+0x10a4>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	4619      	mov	r1, r3
 8004816:	4613      	mov	r3, r2
 8004818:	461a      	mov	r2, r3
 800481a:	0092      	lsls	r2, r2, #2
 800481c:	4413      	add	r3, r2
 800481e:	461a      	mov	r2, r3
 8004820:	0090      	lsls	r0, r2, #2
 8004822:	461a      	mov	r2, r3
 8004824:	4603      	mov	r3, r0
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	b298      	uxth	r0, r3
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	460b      	mov	r3, r1
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	440b      	add	r3, r1
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	4413      	add	r3, r2
 8004838:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 800483c:	4602      	mov	r2, r0
 800483e:	801a      	strh	r2, [r3, #0]

          pConfig->stFlasher[nFlasherNum].nFlashOffTime = stMsgRx->nRxData[5] * 100;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004846:	b29a      	uxth	r2, r3
 8004848:	4b58      	ldr	r3, [pc, #352]	; (80049ac <PdmConfig_Set+0x10a4>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	4619      	mov	r1, r3
 800484e:	4613      	mov	r3, r2
 8004850:	461a      	mov	r2, r3
 8004852:	0092      	lsls	r2, r2, #2
 8004854:	4413      	add	r3, r2
 8004856:	461a      	mov	r2, r3
 8004858:	0090      	lsls	r0, r2, #2
 800485a:	461a      	mov	r2, r3
 800485c:	4603      	mov	r3, r0
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	b298      	uxth	r0, r3
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	460b      	mov	r3, r1
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	440b      	add	r3, r1
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	f203 531a 	addw	r3, r3, #1306	; 0x51a
 8004874:	4602      	mov	r2, r0
 8004876:	801a      	strh	r2, [r3, #0]
          nSend = 1;
 8004878:	4b4d      	ldr	r3, [pc, #308]	; (80049b0 <PdmConfig_Set+0x10a8>)
 800487a:	2201      	movs	r2, #1
 800487c:	701a      	strb	r2, [r3, #0]
        }
      }

      if(stMsgRx->nRxLen == 2){
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004884:	2b02      	cmp	r3, #2
 8004886:	d10d      	bne.n	80048a4 <PdmConfig_Set+0xf9c>
        nFlasherNum = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	b2da      	uxtb	r2, r3
 8004892:	4b46      	ldr	r3, [pc, #280]	; (80049ac <PdmConfig_Set+0x10a4>)
 8004894:	701a      	strb	r2, [r3, #0]
        if(nFlasherNum < PDM_NUM_FLASHERS){
 8004896:	4b45      	ldr	r3, [pc, #276]	; (80049ac <PdmConfig_Set+0x10a4>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b03      	cmp	r3, #3
 800489c:	d802      	bhi.n	80048a4 <PdmConfig_Set+0xf9c>
          nSend = 1;
 800489e:	4b44      	ldr	r3, [pc, #272]	; (80049b0 <PdmConfig_Set+0x10a8>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]
        }
      }

      if(nSend){
 80048a4:	4b42      	ldr	r3, [pc, #264]	; (80049b0 <PdmConfig_Set+0x10a8>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 8349 	beq.w	8004f40 <PdmConfig_Set+0x1638>
        stMsgUsbTx.nTxLen = 6;
 80048ae:	4b41      	ldr	r3, [pc, #260]	; (80049b4 <PdmConfig_Set+0x10ac>)
 80048b0:	2206      	movs	r2, #6
 80048b2:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 6;
 80048b4:	4b40      	ldr	r3, [pc, #256]	; (80049b8 <PdmConfig_Set+0x10b0>)
 80048b6:	2206      	movs	r2, #6
 80048b8:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_FLASHER;
 80048ba:	4b3e      	ldr	r3, [pc, #248]	; (80049b4 <PdmConfig_Set+0x10ac>)
 80048bc:	2268      	movs	r2, #104	; 0x68
 80048be:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = ((nFlasherNum & 0x0F) << 4) + ((pConfig->stFlasher[nFlasherNum].nSingleCycle & 0x01) << 1) +
 80048c0:	4b3a      	ldr	r3, [pc, #232]	; (80049ac <PdmConfig_Set+0x10a4>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	4b38      	ldr	r3, [pc, #224]	; (80049ac <PdmConfig_Set+0x10a4>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	4603      	mov	r3, r0
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	4403      	add	r3, r0
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	440b      	add	r3, r1
 80048da:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	4413      	add	r3, r2
 80048ec:	b2da      	uxtb	r2, r3
                                (pConfig->stFlasher[nFlasherNum].nEnabled & 0x01);
 80048ee:	4b2f      	ldr	r3, [pc, #188]	; (80049ac <PdmConfig_Set+0x10a4>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	68f9      	ldr	r1, [r7, #12]
 80048f6:	4603      	mov	r3, r0
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	4403      	add	r3, r0
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	440b      	add	r3, r1
 8004900:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[1] = ((nFlasherNum & 0x0F) << 4) + ((pConfig->stFlasher[nFlasherNum].nSingleCycle & 0x01) << 1) +
 800490c:	4413      	add	r3, r2
 800490e:	b2da      	uxtb	r2, r3
 8004910:	4b28      	ldr	r3, [pc, #160]	; (80049b4 <PdmConfig_Set+0x10ac>)
 8004912:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stFlasher[nFlasherNum].nInput;
 8004914:	4b25      	ldr	r3, [pc, #148]	; (80049ac <PdmConfig_Set+0x10a4>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	4619      	mov	r1, r3
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	460b      	mov	r3, r1
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	440b      	add	r3, r1
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4413      	add	r3, r2
 8004926:	f203 5311 	addw	r3, r3, #1297	; 0x511
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	4b21      	ldr	r3, [pc, #132]	; (80049b4 <PdmConfig_Set+0x10ac>)
 800492e:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = pConfig->stFlasher[nFlasherNum].nOutput;
 8004930:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <PdmConfig_Set+0x10a4>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	4619      	mov	r1, r3
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	460b      	mov	r3, r1
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	440b      	add	r3, r1
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4413      	add	r3, r2
 8004942:	f203 531d 	addw	r3, r3, #1309	; 0x51d
 8004946:	781a      	ldrb	r2, [r3, #0]
 8004948:	4b1a      	ldr	r3, [pc, #104]	; (80049b4 <PdmConfig_Set+0x10ac>)
 800494a:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stFlasher[nFlasherNum].nFlashOnTime / 100);
 800494c:	4b17      	ldr	r3, [pc, #92]	; (80049ac <PdmConfig_Set+0x10a4>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	4619      	mov	r1, r3
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	460b      	mov	r3, r1
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	440b      	add	r3, r1
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	4a15      	ldr	r2, [pc, #84]	; (80049bc <PdmConfig_Set+0x10b4>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	b29b      	uxth	r3, r3
 800496e:	b2da      	uxtb	r2, r3
 8004970:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <PdmConfig_Set+0x10ac>)
 8004972:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = (uint8_t)(pConfig->stFlasher[nFlasherNum].nFlashOffTime / 100);
 8004974:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <PdmConfig_Set+0x10a4>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	4619      	mov	r1, r3
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	460b      	mov	r3, r1
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	440b      	add	r3, r1
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4413      	add	r3, r2
 8004986:	f203 531a 	addw	r3, r3, #1306	; 0x51a
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	4a0b      	ldr	r2, [pc, #44]	; (80049bc <PdmConfig_Set+0x10b4>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	b29b      	uxth	r3, r3
 8004996:	b2da      	uxtb	r2, r3
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <PdmConfig_Set+0x10ac>)
 800499a:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <PdmConfig_Set+0x10ac>)
 800499e:	2200      	movs	r2, #0
 80049a0:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 80049a2:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <PdmConfig_Set+0x10ac>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	71da      	strb	r2, [r3, #7]
      }
    break;
 80049a8:	e2ca      	b.n	8004f40 <PdmConfig_Set+0x1638>
 80049aa:	bf00      	nop
 80049ac:	20002690 	.word	0x20002690
 80049b0:	2000268c 	.word	0x2000268c
 80049b4:	20002660 	.word	0x20002660
 80049b8:	2000266c 	.word	0x2000266c
 80049bc:	51eb851f 	.word	0x51eb851f

    //Set Starter Disable Settings
    // 'D'
    case MSG_RX_SET_STARTER:
      if(stMsgRx->nRxLen == 5){
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c6:	2b05      	cmp	r3, #5
 80049c8:	f040 808f 	bne.w	8004aea <PdmConfig_Set+0x11e2>
        pConfig->stStarter.nEnabled = (stMsgRx->nRxData[1] & 0x01);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570

        pConfig->stStarter.nInput = stMsgRx->nRxData[2];
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571

        pConfig->stStarter.nDisableOut[0] = (stMsgRx->nRxData[3] & 0x01);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
        pConfig->stStarter.nDisableOut[1] = (stMsgRx->nRxData[3] & 0x02) >> 1;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004a02:	105b      	asrs	r3, r3, #1
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
        pConfig->stStarter.nDisableOut[2] = (stMsgRx->nRxData[3] & 0x04) >> 2;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004a18:	109b      	asrs	r3, r3, #2
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
        pConfig->stStarter.nDisableOut[3] = (stMsgRx->nRxData[3] & 0x08) >> 3;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004a2e:	10db      	asrs	r3, r3, #3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
        pConfig->stStarter.nDisableOut[4] = (stMsgRx->nRxData[3] & 0x10) >> 4;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004a44:	111b      	asrs	r3, r3, #4
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
        pConfig->stStarter.nDisableOut[5] = (stMsgRx->nRxData[3] & 0x20) >> 5;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004a5a:	115b      	asrs	r3, r3, #5
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
        pConfig->stStarter.nDisableOut[6] = (stMsgRx->nRxData[3] & 0x40) >> 6;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004a70:	119b      	asrs	r3, r3, #6
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
        pConfig->stStarter.nDisableOut[7] = (stMsgRx->nRxData[3] & 0x80) >> 7;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004a86:	09db      	lsrs	r3, r3, #7
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f

        pConfig->stStarter.nDisableOut[8] = (stMsgRx->nRxData[4] & 0x01);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
        pConfig->stStarter.nDisableOut[9] = (stMsgRx->nRxData[4] & 0x02) >> 1;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004aa8:	105b      	asrs	r3, r3, #1
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
        pConfig->stStarter.nDisableOut[10] = (stMsgRx->nRxData[4] & 0x04) >> 2;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004abe:	109b      	asrs	r3, r3, #2
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
        pConfig->stStarter.nDisableOut[11] = (stMsgRx->nRxData[4] & 0x08) >> 3;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ad4:	10db      	asrs	r3, r3, #3
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
        nSend = 1;
 8004ae4:	4b50      	ldr	r3, [pc, #320]	; (8004c28 <PdmConfig_Set+0x1320>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	701a      	strb	r2, [r3, #0]
      }

      if((stMsgRx->nRxLen == 1) || nSend){
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d004      	beq.n	8004afe <PdmConfig_Set+0x11f6>
 8004af4:	4b4c      	ldr	r3, [pc, #304]	; (8004c28 <PdmConfig_Set+0x1320>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8223 	beq.w	8004f44 <PdmConfig_Set+0x163c>
        stMsgUsbTx.nTxLen = 5;
 8004afe:	4b4b      	ldr	r3, [pc, #300]	; (8004c2c <PdmConfig_Set+0x1324>)
 8004b00:	2205      	movs	r2, #5
 8004b02:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 8004b04:	4b4a      	ldr	r3, [pc, #296]	; (8004c30 <PdmConfig_Set+0x1328>)
 8004b06:	2205      	movs	r2, #5
 8004b08:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_SET_STARTER;
 8004b0a:	4b48      	ldr	r3, [pc, #288]	; (8004c2c <PdmConfig_Set+0x1324>)
 8004b0c:	2264      	movs	r2, #100	; 0x64
 8004b0e:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (pConfig->stStarter.nEnabled & 0x01);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 3570 	ldrb.w	r3, [r3, #1392]	; 0x570
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	4b43      	ldr	r3, [pc, #268]	; (8004c2c <PdmConfig_Set+0x1324>)
 8004b1e:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = pConfig->stStarter.nInput;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 2571 	ldrb.w	r2, [r3, #1393]	; 0x571
 8004b26:	4b41      	ldr	r3, [pc, #260]	; (8004c2c <PdmConfig_Set+0x1324>)
 8004b28:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 357f 	ldrb.w	r3, [r3, #1407]	; 0x57f
 8004b30:	01db      	lsls	r3, r3, #7
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 357e 	ldrb.w	r3, [r3, #1406]	; 0x57e
 8004b3a:	019b      	lsls	r3, r3, #6
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 357d 	ldrb.w	r3, [r3, #1405]	; 0x57d
 8004b4e:	015b      	lsls	r3, r3, #5
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 8004b58:	4413      	add	r3, r2
 8004b5a:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 357b 	ldrb.w	r3, [r3, #1403]	; 0x57b
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	b2db      	uxtb	r3, r3
                                ((pConfig->stStarter.nDisableOut[5] & 0x01) << 5) + ((pConfig->stStarter.nDisableOut[4] & 0x01) << 4) +
 8004b80:	4413      	add	r3, r2
 8004b82:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 357a 	ldrb.w	r3, [r3, #1402]	; 0x57a
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	4413      	add	r3, r2
 8004b96:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[1] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[0] & 0x01);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 3579 	ldrb.w	r3, [r3, #1401]	; 0x579
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	b2db      	uxtb	r3, r3
                                ((pConfig->stStarter.nDisableOut[3] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[2] & 0x01) << 2) +
 8004ba8:	4413      	add	r3, r2
 8004baa:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[1] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[0] & 0x01);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3578 	ldrb.w	r3, [r3, #1400]	; 0x578
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	4413      	add	r3, r2
 8004bba:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[3] = ((pConfig->stStarter.nDisableOut[7] & 0x01) << 7) + ((pConfig->stStarter.nDisableOut[6] & 0x01) << 6) +
 8004bbc:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <PdmConfig_Set+0x1324>)
 8004bbe:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3583 	ldrb.w	r3, [r3, #1411]	; 0x583
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	b25b      	sxtb	r3, r3
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	b25a      	sxtb	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 3582 	ldrb.w	r3, [r3, #1410]	; 0x582
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	b25b      	sxtb	r3, r3
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	b25b      	sxtb	r3, r3
 8004be0:	4313      	orrs	r3, r2
 8004be2:	b25b      	sxtb	r3, r3
 8004be4:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[9] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[8] & 0x01);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 3581 	ldrb.w	r3, [r3, #1409]	; 0x581
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	b2db      	uxtb	r3, r3
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8004bf6:	4413      	add	r3, r2
 8004bf8:	b2da      	uxtb	r2, r3
                                ((pConfig->stStarter.nDisableOut[9] & 0x01) << 1) + (pConfig->stStarter.nDisableOut[8] & 0x01);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 3580 	ldrb.w	r3, [r3, #1408]	; 0x580
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	4413      	add	r3, r2
 8004c08:	b2da      	uxtb	r2, r3
        stMsgUsbTx.nTxData[4] = ((pConfig->stStarter.nDisableOut[11] & 0x01) << 3) + ((pConfig->stStarter.nDisableOut[10] & 0x01) << 2) +
 8004c0a:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <PdmConfig_Set+0x1324>)
 8004c0c:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <PdmConfig_Set+0x1324>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <PdmConfig_Set+0x1324>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004c1a:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <PdmConfig_Set+0x1324>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	71da      	strb	r2, [r3, #7]
        nSend = 1;
 8004c20:	4b01      	ldr	r3, [pc, #4]	; (8004c28 <PdmConfig_Set+0x1320>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004c26:	e18d      	b.n	8004f44 <PdmConfig_Set+0x163c>
 8004c28:	2000268c 	.word	0x2000268c
 8004c2c:	20002660 	.word	0x20002660
 8004c30:	2000266c 	.word	0x2000266c

    //Set CAN Input Settings
    // 'N'
    case MSG_RX_SET_CAN_INPUTS:
       if(stMsgRx->nRxLen == 7){
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c3a:	2b07      	cmp	r3, #7
 8004c3c:	f040 8097 	bne.w	8004d6e <PdmConfig_Set+0x1466>
         nCanInputNum = (stMsgRx->nRxData[2]);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004c46:	4bb6      	ldr	r3, [pc, #728]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004c48:	701a      	strb	r2, [r3, #0]
         if(nCanInputNum < PDM_NUM_CAN_INPUTS){
 8004c4a:	4bb5      	ldr	r3, [pc, #724]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b1d      	cmp	r3, #29
 8004c50:	f200 808d 	bhi.w	8004d6e <PdmConfig_Set+0x1466>
           pConfig->stCanInput[nCanInputNum].nEnabled = (stMsgRx->nRxData[1] & 0x01);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c5a:	4ab1      	ldr	r2, [pc, #708]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	4611      	mov	r1, r2
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	b2d8      	uxtb	r0, r3
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	1a5b      	subs	r3, r3, r1
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8004c76:	4602      	mov	r2, r0
 8004c78:	701a      	strb	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].eMode = (stMsgRx->nRxData[1] & 0x06) >> 1;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c80:	105b      	asrs	r3, r3, #1
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	4aa6      	ldr	r2, [pc, #664]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004c86:	7812      	ldrb	r2, [r2, #0]
 8004c88:	4611      	mov	r1, r2
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	b2d8      	uxtb	r0, r3
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	460b      	mov	r3, r1
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	1a5b      	subs	r3, r3, r1
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	701a      	strb	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].eOperator = (stMsgRx->nRxData[1] & 0xF0) >> 4;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004caa:	4a9d      	ldr	r2, [pc, #628]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004cac:	7812      	ldrb	r2, [r2, #0]
 8004cae:	4611      	mov	r1, r2
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	b2d8      	uxtb	r0, r3
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	1a5b      	subs	r3, r3, r1
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	701a      	strb	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nId = (stMsgRx->nRxData[3] << 8) + stMsgRx->nRxData[4];
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	4990      	ldr	r1, [pc, #576]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004cde:	7809      	ldrb	r1, [r1, #0]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	b298      	uxth	r0, r3
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	1a5b      	subs	r3, r3, r1
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	f203 5386 	addw	r3, r3, #1414	; 0x586
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	801a      	strh	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nLowByte = (stMsgRx->nRxData[5] & 0x0F);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	4a87      	ldr	r2, [pc, #540]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004d02:	7812      	ldrb	r2, [r2, #0]
 8004d04:	4611      	mov	r1, r2
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	b298      	uxth	r0, r3
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	1a5b      	subs	r3, r3, r1
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	801a      	strh	r2, [r3, #0]
           pConfig->stCanInput[nCanInputNum].nHighByte = (stMsgRx->nRxData[5] & 0xF0) >> 4;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d26:	091b      	lsrs	r3, r3, #4
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	4b7d      	ldr	r3, [pc, #500]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	b290      	uxth	r0, r2
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	460b      	mov	r3, r1
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	1a5b      	subs	r3, r3, r1
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f203 538a 	addw	r3, r3, #1418	; 0x58a
 8004d42:	4602      	mov	r2, r0
 8004d44:	801a      	strh	r2, [r3, #0]

           pConfig->stCanInput[nCanInputNum].nOnVal = stMsgRx->nRxData[6];
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004d4c:	4b74      	ldr	r3, [pc, #464]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	4619      	mov	r1, r3
 8004d52:	b290      	uxth	r0, r2
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	460b      	mov	r3, r1
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	1a5b      	subs	r3, r3, r1
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8004d64:	4602      	mov	r2, r0
 8004d66:	801a      	strh	r2, [r3, #0]

           nSend = 1;
 8004d68:	4b6e      	ldr	r3, [pc, #440]	; (8004f24 <PdmConfig_Set+0x161c>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
         }
       }

       if(stMsgRx->nRxLen == 2){
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d10b      	bne.n	8004d90 <PdmConfig_Set+0x1488>
          nCanInputNum = (stMsgRx->nRxData[1]);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004d7e:	4b68      	ldr	r3, [pc, #416]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004d80:	701a      	strb	r2, [r3, #0]
          if(nCanInputNum < PDM_NUM_CAN_INPUTS){
 8004d82:	4b67      	ldr	r3, [pc, #412]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b1d      	cmp	r3, #29
 8004d88:	d802      	bhi.n	8004d90 <PdmConfig_Set+0x1488>
            nSend = 1;
 8004d8a:	4b66      	ldr	r3, [pc, #408]	; (8004f24 <PdmConfig_Set+0x161c>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	701a      	strb	r2, [r3, #0]
          }
       }

       if(nSend){
 8004d90:	4b64      	ldr	r3, [pc, #400]	; (8004f24 <PdmConfig_Set+0x161c>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80d7 	beq.w	8004f48 <PdmConfig_Set+0x1640>
         stMsgUsbTx.nTxLen = 7;
 8004d9a:	4b63      	ldr	r3, [pc, #396]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004d9c:	2207      	movs	r2, #7
 8004d9e:	721a      	strb	r2, [r3, #8]
         stMsgCanTx.stTxHeader.DLC = 7;
 8004da0:	4b62      	ldr	r3, [pc, #392]	; (8004f2c <PdmConfig_Set+0x1624>)
 8004da2:	2207      	movs	r2, #7
 8004da4:	611a      	str	r2, [r3, #16]

         stMsgUsbTx.nTxData[0] = MSG_TX_SET_CAN_INPUTS;
 8004da6:	4b60      	ldr	r3, [pc, #384]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004da8:	226e      	movs	r2, #110	; 0x6e
 8004daa:	701a      	strb	r2, [r3, #0]
         stMsgUsbTx.nTxData[1] = ((pConfig->stCanInput[nCanInputNum].eOperator & 0x0F) << 4) + ((pConfig->stCanInput[nCanInputNum].eMode & 0x03) << 1) +
 8004dac:	4b5c      	ldr	r3, [pc, #368]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	4619      	mov	r1, r3
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	460b      	mov	r3, r1
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	1a5b      	subs	r3, r3, r1
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	4b55      	ldr	r3, [pc, #340]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	68f9      	ldr	r1, [r7, #12]
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	1a1b      	subs	r3, r3, r0
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f003 0306 	and.w	r3, r3, #6
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	b2da      	uxtb	r2, r3
                                 (pConfig->stCanInput[nCanInputNum].nEnabled & 0x01);
 8004dee:	4b4c      	ldr	r3, [pc, #304]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	68f9      	ldr	r1, [r7, #12]
 8004df6:	4603      	mov	r3, r0
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	1a1b      	subs	r3, r3, r0
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	440b      	add	r3, r1
 8004e00:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	b2db      	uxtb	r3, r3
         stMsgUsbTx.nTxData[1] = ((pConfig->stCanInput[nCanInputNum].eOperator & 0x0F) << 4) + ((pConfig->stCanInput[nCanInputNum].eMode & 0x03) << 1) +
 8004e0c:	4413      	add	r3, r2
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	4b45      	ldr	r3, [pc, #276]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004e12:	705a      	strb	r2, [r3, #1]
         stMsgUsbTx.nTxData[2] = nCanInputNum;
 8004e14:	4b42      	ldr	r3, [pc, #264]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004e16:	781a      	ldrb	r2, [r3, #0]
 8004e18:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004e1a:	709a      	strb	r2, [r3, #2]
         stMsgUsbTx.nTxData[3] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nId >> 8);
 8004e1c:	4b40      	ldr	r3, [pc, #256]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	4619      	mov	r1, r3
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	460b      	mov	r3, r1
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	1a5b      	subs	r3, r3, r1
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f203 5386 	addw	r3, r3, #1414	; 0x586
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	0a1b      	lsrs	r3, r3, #8
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	4b3b      	ldr	r3, [pc, #236]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004e3c:	70da      	strb	r2, [r3, #3]
         stMsgUsbTx.nTxData[4] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nId & 0xFF);
 8004e3e:	4b38      	ldr	r3, [pc, #224]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	4619      	mov	r1, r3
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	460b      	mov	r3, r1
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	1a5b      	subs	r3, r3, r1
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	f203 5386 	addw	r3, r3, #1414	; 0x586
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	4b33      	ldr	r3, [pc, #204]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004e5a:	711a      	strb	r2, [r3, #4]
         stMsgUsbTx.nTxData[5] = ((pConfig->stCanInput[nCanInputNum].nHighByte & 0xF) << 4) + (pConfig->stCanInput[nCanInputNum].nLowByte & 0xF);
 8004e5c:	4b30      	ldr	r3, [pc, #192]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	4619      	mov	r1, r3
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	460b      	mov	r3, r1
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	1a5b      	subs	r3, r3, r1
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f203 538a 	addw	r3, r3, #1418	; 0x58a
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	68f9      	ldr	r1, [r7, #12]
 8004e80:	4603      	mov	r3, r0
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	1a1b      	subs	r3, r3, r0
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	4413      	add	r3, r2
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004e9e:	715a      	strb	r2, [r3, #5]
         stMsgUsbTx.nTxData[6] = (uint8_t)(pConfig->stCanInput[nCanInputNum].nOnVal);
 8004ea0:	4b1f      	ldr	r3, [pc, #124]	; (8004f20 <PdmConfig_Set+0x1618>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	1a5b      	subs	r3, r3, r1
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004ebc:	719a      	strb	r2, [r3, #6]
       }
    break;
 8004ebe:	e043      	b.n	8004f48 <PdmConfig_Set+0x1640>

    //Get Version
    // 'V'
    case MSG_RX_GET_VERSION:
      if(stMsgRx->nRxLen == 1){
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d140      	bne.n	8004f4c <PdmConfig_Set+0x1644>
        nSend = 1;
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <PdmConfig_Set+0x161c>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxLen = 5;
 8004ed0:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004ed2:	2205      	movs	r2, #5
 8004ed4:	721a      	strb	r2, [r3, #8]
        stMsgCanTx.stTxHeader.DLC = 5;
 8004ed6:	4b15      	ldr	r3, [pc, #84]	; (8004f2c <PdmConfig_Set+0x1624>)
 8004ed8:	2205      	movs	r2, #5
 8004eda:	611a      	str	r2, [r3, #16]

        stMsgUsbTx.nTxData[0] = MSG_TX_GET_VERSION;
 8004edc:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004ede:	2276      	movs	r2, #118	; 0x76
 8004ee0:	701a      	strb	r2, [r3, #0]
        stMsgUsbTx.nTxData[1] = (uint8_t)PDM_MAJOR_VERSION;
 8004ee2:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	705a      	strb	r2, [r3, #1]
        stMsgUsbTx.nTxData[2] = (uint8_t)PDM_MINOR_VERSION;
 8004ee8:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	709a      	strb	r2, [r3, #2]
        stMsgUsbTx.nTxData[3] = (uint8_t)(PDM_BUILD >> 8);
 8004eee:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	70da      	strb	r2, [r3, #3]
        stMsgUsbTx.nTxData[4] = (uint8_t)(PDM_BUILD & 0xFF);
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	711a      	strb	r2, [r3, #4]
        stMsgUsbTx.nTxData[5] = 0;
 8004efa:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	715a      	strb	r2, [r3, #5]
        stMsgUsbTx.nTxData[6] = 0;
 8004f00:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	719a      	strb	r2, [r3, #6]
        stMsgUsbTx.nTxData[7] = 0;
 8004f06:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <PdmConfig_Set+0x1620>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	71da      	strb	r2, [r3, #7]
      }
    break;
 8004f0c:	e01e      	b.n	8004f4c <PdmConfig_Set+0x1644>

    default:
      return 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e03e      	b.n	8004f90 <PdmConfig_Set+0x1688>
    break;
 8004f12:	bf00      	nop
 8004f14:	e01b      	b.n	8004f4e <PdmConfig_Set+0x1646>
    break;
 8004f16:	bf00      	nop
 8004f18:	e019      	b.n	8004f4e <PdmConfig_Set+0x1646>
    break;
 8004f1a:	bf00      	nop
 8004f1c:	e017      	b.n	8004f4e <PdmConfig_Set+0x1646>
 8004f1e:	bf00      	nop
 8004f20:	20002691 	.word	0x20002691
 8004f24:	2000268c 	.word	0x2000268c
 8004f28:	20002660 	.word	0x20002660
 8004f2c:	2000266c 	.word	0x2000266c
    break;
 8004f30:	bf00      	nop
 8004f32:	e00c      	b.n	8004f4e <PdmConfig_Set+0x1646>
    break;
 8004f34:	bf00      	nop
 8004f36:	e00a      	b.n	8004f4e <PdmConfig_Set+0x1646>
    break;
 8004f38:	bf00      	nop
 8004f3a:	e008      	b.n	8004f4e <PdmConfig_Set+0x1646>
    break;
 8004f3c:	bf00      	nop
 8004f3e:	e006      	b.n	8004f4e <PdmConfig_Set+0x1646>
    break;
 8004f40:	bf00      	nop
 8004f42:	e004      	b.n	8004f4e <PdmConfig_Set+0x1646>
    break;
 8004f44:	bf00      	nop
 8004f46:	e002      	b.n	8004f4e <PdmConfig_Set+0x1646>
    break;
 8004f48:	bf00      	nop
 8004f4a:	e000      	b.n	8004f4e <PdmConfig_Set+0x1646>
    break;
 8004f4c:	bf00      	nop
    }

  if(nSend){
 8004f4e:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <PdmConfig_Set+0x1690>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01b      	beq.n	8004f8e <PdmConfig_Set+0x1686>
    stMsgCanTx.stTxHeader.StdId = pConfig->stCanOutput.nBaseId + 20;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	461a      	mov	r2, r3
 8004f60:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <PdmConfig_Set+0x1694>)
 8004f62:	601a      	str	r2, [r3, #0]

    memcpy(&stMsgCanTx.nTxData, &stMsgUsbTx.nTxData, sizeof(stMsgCanTx.nTxData));
 8004f64:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <PdmConfig_Set+0x1694>)
 8004f66:	4a0e      	ldr	r2, [pc, #56]	; (8004fa0 <PdmConfig_Set+0x1698>)
 8004f68:	3318      	adds	r3, #24
 8004f6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f6e:	e883 0003 	stmia.w	r3, {r0, r1}

    osMessageQueuePut(*qMsgQueueUsbTx, &stMsgUsbTx, 0U, 0U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	2300      	movs	r3, #0
 8004f78:	2200      	movs	r2, #0
 8004f7a:	4909      	ldr	r1, [pc, #36]	; (8004fa0 <PdmConfig_Set+0x1698>)
 8004f7c:	f00e ffa8 	bl	8013ed0 <osMessageQueuePut>
    osMessageQueuePut(*qMsgQueueCanTx, &stMsgCanTx, 0U, 0U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	2300      	movs	r3, #0
 8004f86:	2200      	movs	r2, #0
 8004f88:	4904      	ldr	r1, [pc, #16]	; (8004f9c <PdmConfig_Set+0x1694>)
 8004f8a:	f00e ffa1 	bl	8013ed0 <osMessageQueuePut>
  }

  return 1;
 8004f8e:	2301      	movs	r3, #1

}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	2000268c 	.word	0x2000268c
 8004f9c:	2000266c 	.word	0x2000266c
 8004fa0:	20002660 	.word	0x20002660

08004fa4 <PdmConfig_SetDefault>:

void PdmConfig_SetDefault(PdmConfig_t* pConfig){
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  //Device Configuration
  pConfig->stDevConfig.nVersion = 2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	701a      	strb	r2, [r3, #0]
  pConfig->stDevConfig.nCanEnabled = 1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	705a      	strb	r2, [r3, #1]
  pConfig->stDevConfig.nCanSpeed = 6;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2206      	movs	r2, #6
 8004fbc:	709a      	strb	r2, [r3, #2]

  //Logging
  pConfig->stLogging.nUpdateTime = 1000;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fc4:	809a      	strh	r2, [r3, #4]

  //Inputs
  pConfig->stInput[0].nEnabled = 1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	721a      	strb	r2, [r3, #8]
  pConfig->stInput[0].eMode = MODE_MOMENTARY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	741a      	strb	r2, [r3, #16]
  pConfig->stInput[0].nOnLevel = 10000;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fd8:	841a      	strh	r2, [r3, #32]
  pConfig->stInput[0].nDebounceTime = 20;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2214      	movs	r2, #20
 8004fde:	845a      	strh	r2, [r3, #34]	; 0x22

  pConfig->stInput[1].nEnabled = 1;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pConfig->stInput[1].eMode = MODE_MOMENTARY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pConfig->stInput[1].nOnLevel = 16383;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8004ff6:	879a      	strh	r2, [r3, #60]	; 0x3c
  pConfig->stInput[1].nDebounceTime = 20;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2214      	movs	r2, #20
 8004ffc:	87da      	strh	r2, [r3, #62]	; 0x3e

  pConfig->stInput[2].nEnabled = 1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pConfig->stInput[2].eMode = MODE_MOMENTARY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  pConfig->stInput[2].nOnLevel = 16383;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8005014:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  pConfig->stInput[2].nDebounceTime = 20;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2214      	movs	r2, #20
 800501c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  pConfig->stInput[3].nEnabled = 1;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  pConfig->stInput[3].eMode = MODE_MOMENTARY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  pConfig->stInput[3].nOnLevel = 10000;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f242 7210 	movw	r2, #10000	; 0x2710
 8005036:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  pConfig->stInput[3].nDebounceTime = 20;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2214      	movs	r2, #20
 800503e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

  pConfig->stInput[4].nEnabled = 1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  pConfig->stInput[4].eMode = MODE_MOMENTARY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  pConfig->stInput[4].nOnLevel = 16383;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8005058:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  pConfig->stInput[4].nDebounceTime = 20;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2214      	movs	r2, #20
 8005060:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92

  pConfig->stInput[5].nEnabled = 1;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  pConfig->stInput[5].eMode = MODE_MOMENTARY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  pConfig->stInput[5].nOnLevel = 16383;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800507a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  pConfig->stInput[5].nDebounceTime = 20;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2214      	movs	r2, #20
 8005082:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

  //Outputs
  pConfig->stOutput[0].nEnabled = 1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
  pConfig->stOutput[0].nInput = 4;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2204      	movs	r2, #4
 8005092:	f883 23d1 	strb.w	r2, [r3, #977]	; 0x3d1
  pConfig->stOutput[0].nTriggerLevel = 0;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
  pConfig->stOutput[0].nCurrentLimit = 0;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8a3 23da 	strh.w	r2, [r3, #986]	; 0x3da
  pConfig->stOutput[0].nInrushLimit = 0;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
  pConfig->stOutput[0].nInrushTime = 0;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8a3 23de 	strh.w	r2, [r3, #990]	; 0x3de
  pConfig->stOutput[0].eResetMode = RESET_ENDLESS;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
  pConfig->stOutput[0].nResetTime = 0;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8a3 23e2 	strh.w	r2, [r3, #994]	; 0x3e2
  pConfig->stOutput[0].nResetLimit = 0;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4

  pConfig->stOutput[1].nEnabled = 1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  pConfig->stOutput[1].nInput = 3;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2203      	movs	r2, #3
 80050da:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
  pConfig->stOutput[1].nTriggerLevel = 0;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
  pConfig->stOutput[1].nCurrentLimit = 0;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f8a3 23f2 	strh.w	r2, [r3, #1010]	; 0x3f2
  pConfig->stOutput[1].nInrushLimit = 0;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
  pConfig->stOutput[1].nInrushTime = 0;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6
  pConfig->stOutput[1].eResetMode = RESET_ENDLESS;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
  pConfig->stOutput[1].nResetTime = 0;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f8a3 23fa 	strh.w	r2, [r3, #1018]	; 0x3fa
  pConfig->stOutput[1].nResetLimit = 0;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc

  pConfig->stOutput[2].nEnabled = 1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  pConfig->stOutput[2].nInput = 2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
  pConfig->stOutput[2].nTriggerLevel = 0;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
  pConfig->stOutput[2].nCurrentLimit = 0;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
  pConfig->stOutput[2].nInrushLimit = 0;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
  pConfig->stOutput[2].nInrushTime = 0;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
  pConfig->stOutput[2].eResetMode = RESET_ENDLESS;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  pConfig->stOutput[2].nResetTime = 0;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
  pConfig->stOutput[2].nResetLimit = 0;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  pConfig->stOutput[3].nEnabled = 1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  pConfig->stOutput[3].nInput = 8;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2208      	movs	r2, #8
 800516a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  pConfig->stOutput[3].nTriggerLevel = 0;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  pConfig->stOutput[3].nCurrentLimit = 0;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f8a3 2422 	strh.w	r2, [r3, #1058]	; 0x422
  pConfig->stOutput[3].nInrushLimit = 0;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
  pConfig->stOutput[3].nInrushTime = 0;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
  pConfig->stOutput[3].eResetMode = RESET_ENDLESS;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2202      	movs	r2, #2
 8005192:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  pConfig->stOutput[3].nResetTime = 0;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f8a3 242a 	strh.w	r2, [r3, #1066]	; 0x42a
  pConfig->stOutput[3].nResetLimit = 0;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

  pConfig->stOutput[4].nEnabled = 1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
  pConfig->stOutput[4].nInput = 9;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2209      	movs	r2, #9
 80051b2:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
  pConfig->stOutput[4].nTriggerLevel = 0;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
  pConfig->stOutput[4].nCurrentLimit = 0;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f8a3 243a 	strh.w	r2, [r3, #1082]	; 0x43a
  pConfig->stOutput[4].nInrushLimit = 0;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
  pConfig->stOutput[4].nInrushTime = 0;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f8a3 243e 	strh.w	r2, [r3, #1086]	; 0x43e
  pConfig->stOutput[4].eResetMode = RESET_ENDLESS;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2202      	movs	r2, #2
 80051da:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
  pConfig->stOutput[4].nResetTime = 0;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8a3 2442 	strh.w	r2, [r3, #1090]	; 0x442
  pConfig->stOutput[4].nResetLimit = 0;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

  pConfig->stOutput[5].nEnabled = 1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
  pConfig->stOutput[5].nInput = 37;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2225      	movs	r2, #37	; 0x25
 80051fa:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
  pConfig->stOutput[5].nTriggerLevel = 0;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
  pConfig->stOutput[5].nCurrentLimit = 0;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f8a3 2452 	strh.w	r2, [r3, #1106]	; 0x452
  pConfig->stOutput[5].nInrushLimit = 0;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
  pConfig->stOutput[5].nInrushTime = 0;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
  pConfig->stOutput[5].eResetMode = RESET_ENDLESS;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2202      	movs	r2, #2
 8005222:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
  pConfig->stOutput[5].nResetTime = 0;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
  pConfig->stOutput[5].nResetLimit = 0;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c

  pConfig->stOutput[6].nEnabled = 1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  pConfig->stOutput[6].nInput = 38;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2226      	movs	r2, #38	; 0x26
 8005242:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
  pConfig->stOutput[6].nTriggerLevel = 0;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
  pConfig->stOutput[6].nCurrentLimit = 0;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f8a3 246a 	strh.w	r2, [r3, #1130]	; 0x46a
  pConfig->stOutput[6].nInrushLimit = 0;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
  pConfig->stOutput[6].nInrushTime = 0;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f8a3 246e 	strh.w	r2, [r3, #1134]	; 0x46e
  pConfig->stOutput[6].eResetMode = RESET_ENDLESS;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
  pConfig->stOutput[6].nResetTime = 0;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f8a3 2472 	strh.w	r2, [r3, #1138]	; 0x472
  pConfig->stOutput[6].nResetLimit = 0;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474

  pConfig->stOutput[7].nEnabled = 1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
  pConfig->stOutput[7].nInput = 12;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	220c      	movs	r2, #12
 800528a:	f883 2479 	strb.w	r2, [r3, #1145]	; 0x479
  pConfig->stOutput[7].nTriggerLevel = 0;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
  pConfig->stOutput[7].nCurrentLimit = 0;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f8a3 2482 	strh.w	r2, [r3, #1154]	; 0x482
  pConfig->stOutput[7].nInrushLimit = 0;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
  pConfig->stOutput[7].nInrushTime = 0;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8a3 2486 	strh.w	r2, [r3, #1158]	; 0x486
  pConfig->stOutput[7].eResetMode = RESET_ENDLESS;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
  pConfig->stOutput[7].nResetTime = 0;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8a3 248a 	strh.w	r2, [r3, #1162]	; 0x48a
  pConfig->stOutput[7].nResetLimit = 0;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c

  pConfig->stOutput[8].nEnabled = 1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
  pConfig->stOutput[8].nInput = 13;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	220d      	movs	r2, #13
 80052d2:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
  pConfig->stOutput[8].nTriggerLevel = 0;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
  pConfig->stOutput[8].nCurrentLimit = 0;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8a3 249a 	strh.w	r2, [r3, #1178]	; 0x49a
  pConfig->stOutput[8].nInrushLimit = 0;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
  pConfig->stOutput[8].nInrushTime = 0;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8a3 249e 	strh.w	r2, [r3, #1182]	; 0x49e
  pConfig->stOutput[8].eResetMode = RESET_ENDLESS;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2202      	movs	r2, #2
 80052fa:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
  pConfig->stOutput[8].nResetTime = 0;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f8a3 24a2 	strh.w	r2, [r3, #1186]	; 0x4a2
  pConfig->stOutput[8].nResetLimit = 0;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 24a4 	strb.w	r2, [r3, #1188]	; 0x4a4

  pConfig->stOutput[9].nEnabled = 1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
  pConfig->stOutput[9].nInput = 14;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	220e      	movs	r2, #14
 800531a:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
  pConfig->stOutput[9].nTriggerLevel = 0;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
  pConfig->stOutput[9].nCurrentLimit = 0;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f8a3 24b2 	strh.w	r2, [r3, #1202]	; 0x4b2
  pConfig->stOutput[9].nInrushLimit = 0;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
  pConfig->stOutput[9].nInrushTime = 0;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
  pConfig->stOutput[9].eResetMode = RESET_ENDLESS;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
  pConfig->stOutput[9].nResetTime = 0;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
  pConfig->stOutput[9].nResetLimit = 0;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  pConfig->stOutput[10].nEnabled = 1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
  pConfig->stOutput[10].nInput = 69;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2245      	movs	r2, #69	; 0x45
 8005362:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
  pConfig->stOutput[10].nTriggerLevel = 0;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
  pConfig->stOutput[10].nCurrentLimit = 0;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f8a3 24ca 	strh.w	r2, [r3, #1226]	; 0x4ca
  pConfig->stOutput[10].nInrushLimit = 0;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
  pConfig->stOutput[10].nInrushTime = 0;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f8a3 24ce 	strh.w	r2, [r3, #1230]	; 0x4ce
  pConfig->stOutput[10].eResetMode = RESET_ENDLESS;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
  pConfig->stOutput[10].nResetTime = 0;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f8a3 24d2 	strh.w	r2, [r3, #1234]	; 0x4d2
  pConfig->stOutput[10].nResetLimit = 0;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4

  pConfig->stOutput[11].nEnabled = 1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
  pConfig->stOutput[11].nInput = 70;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2246      	movs	r2, #70	; 0x46
 80053aa:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
  pConfig->stOutput[11].nTriggerLevel = 0;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
  pConfig->stOutput[11].nCurrentLimit = 0;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8a3 24e2 	strh.w	r2, [r3, #1250]	; 0x4e2
  pConfig->stOutput[11].nInrushLimit = 0;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8a3 24e4 	strh.w	r2, [r3, #1252]	; 0x4e4
  pConfig->stOutput[11].nInrushTime = 0;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f8a3 24e6 	strh.w	r2, [r3, #1254]	; 0x4e6
  pConfig->stOutput[11].eResetMode = RESET_ENDLESS;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
  pConfig->stOutput[11].nResetTime = 0;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f8a3 24ea 	strh.w	r2, [r3, #1258]	; 0x4ea
  pConfig->stOutput[11].nResetLimit = 0;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec

  //Virtual Inputs
  pConfig->stVirtualInput[0].nEnabled = 1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  pConfig->stVirtualInput[0].nNot0 = 0;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  pConfig->stVirtualInput[0].nVar0 = 10;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	220a      	movs	r2, #10
 80053fa:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  pConfig->stVirtualInput[0].eCond0 = COND_AND;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
  pConfig->stVirtualInput[0].nNot1 = 1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
  pConfig->stVirtualInput[0].nVar1 = 63;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	223f      	movs	r2, #63	; 0x3f
 8005412:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
  pConfig->stVirtualInput[0].eCond1 = COND_OR;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
  pConfig->stVirtualInput[0].nNot2 = 0;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  pConfig->stVirtualInput[0].nVar2 = 0;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
  pConfig->stVirtualInput[0].eMode = MODE_LATCHING;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2202      	movs	r2, #2
 8005432:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

  pConfig->stVirtualInput[1].nEnabled = 1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
  pConfig->stVirtualInput[1].nNot0 = 0;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
  pConfig->stVirtualInput[1].nVar0 = 11;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	220b      	movs	r2, #11
 800544a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
  pConfig->stVirtualInput[1].eCond0 = COND_AND;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  pConfig->stVirtualInput[1].nNot1 = 1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  pConfig->stVirtualInput[1].nVar1 = 62;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	223e      	movs	r2, #62	; 0x3e
 8005462:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
  pConfig->stVirtualInput[1].eCond1 = COND_OR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
  pConfig->stVirtualInput[1].nNot2 = 0;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
  pConfig->stVirtualInput[1].nVar2 = 0;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
  pConfig->stVirtualInput[1].eMode = MODE_LATCHING;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2202      	movs	r2, #2
 8005482:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

  pConfig->stVirtualInput[2].nEnabled = 0;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  pConfig->stVirtualInput[2].nNot0 = 0;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  pConfig->stVirtualInput[2].nVar0 = 0;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  pConfig->stVirtualInput[2].eCond0 = COND_AND;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
  pConfig->stVirtualInput[2].nNot1 = 0;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
  pConfig->stVirtualInput[2].nVar1 = 0;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
  pConfig->stVirtualInput[2].eCond1 = COND_OR;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
  pConfig->stVirtualInput[2].nNot2 = 0;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  pConfig->stVirtualInput[2].nVar2 = 0;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pConfig->stVirtualInput[2].eMode = MODE_MOMENTARY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

  pConfig->stVirtualInput[3].nEnabled = 0;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
  pConfig->stVirtualInput[3].nNot0 = 0;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
  pConfig->stVirtualInput[3].nVar0 = 0;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
  pConfig->stVirtualInput[3].eCond0 = COND_AND;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  pConfig->stVirtualInput[3].nNot1 = 0;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
  pConfig->stVirtualInput[3].nVar1 = 0;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
  pConfig->stVirtualInput[3].eCond1 = COND_OR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
  pConfig->stVirtualInput[3].nNot2 = 0;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
  pConfig->stVirtualInput[3].nVar2 = 0;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
  pConfig->stVirtualInput[3].eMode = MODE_MOMENTARY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

  pConfig->stVirtualInput[4].nEnabled = 0;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  pConfig->stVirtualInput[4].nNot0 = 0;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  pConfig->stVirtualInput[4].nVar0 = 0;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
  pConfig->stVirtualInput[4].eCond0 = COND_AND;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  pConfig->stVirtualInput[4].nNot1 = 0;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
  pConfig->stVirtualInput[4].nVar1 = 0;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
  pConfig->stVirtualInput[4].eCond1 = COND_OR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  pConfig->stVirtualInput[4].nNot2 = 0;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
  pConfig->stVirtualInput[4].nVar2 = 0;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
  pConfig->stVirtualInput[4].eMode = MODE_MOMENTARY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168

  pConfig->stVirtualInput[5].nEnabled = 0;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
  pConfig->stVirtualInput[5].nNot0 = 0;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
  pConfig->stVirtualInput[5].nVar0 = 0;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
  pConfig->stVirtualInput[5].eCond0 = COND_AND;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
  pConfig->stVirtualInput[5].nNot1 = 0;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
  pConfig->stVirtualInput[5].nVar1 = 0;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
  pConfig->stVirtualInput[5].eCond1 = COND_OR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
  pConfig->stVirtualInput[5].nNot2 = 0;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  pConfig->stVirtualInput[5].nVar2 = 0;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  pConfig->stVirtualInput[5].eMode = MODE_MOMENTARY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190

  pConfig->stVirtualInput[6].nEnabled = 0;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
  pConfig->stVirtualInput[6].nNot0 = 0;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
  pConfig->stVirtualInput[6].nVar0 = 0;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
  pConfig->stVirtualInput[6].eCond0 = COND_AND;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
  pConfig->stVirtualInput[6].nNot1 = 0;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
  pConfig->stVirtualInput[6].nVar1 = 0;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
  pConfig->stVirtualInput[6].eCond1 = COND_OR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
  pConfig->stVirtualInput[6].nNot2 = 0;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
  pConfig->stVirtualInput[6].nVar2 = 0;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
  pConfig->stVirtualInput[6].eMode = MODE_MOMENTARY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8

  pConfig->stVirtualInput[7].nEnabled = 0;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
  pConfig->stVirtualInput[7].nNot0 = 0;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
  pConfig->stVirtualInput[7].nVar0 = 0;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
  pConfig->stVirtualInput[7].eCond0 = COND_AND;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  pConfig->stVirtualInput[7].nNot1 = 0;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
  pConfig->stVirtualInput[7].nVar1 = 0;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
  pConfig->stVirtualInput[7].eCond1 = COND_OR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
  pConfig->stVirtualInput[7].nNot2 = 0;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
  pConfig->stVirtualInput[7].nVar2 = 0;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
  pConfig->stVirtualInput[7].eMode = MODE_MOMENTARY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0

  pConfig->stVirtualInput[8].nEnabled = 0;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
  pConfig->stVirtualInput[8].nNot0 = 0;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
  pConfig->stVirtualInput[8].nVar0 = 0;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
  pConfig->stVirtualInput[8].eCond0 = COND_AND;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  pConfig->stVirtualInput[8].nNot1 = 0;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
  pConfig->stVirtualInput[8].nVar1 = 0;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
  pConfig->stVirtualInput[8].eCond1 = COND_OR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  pConfig->stVirtualInput[8].nNot2 = 0;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  pConfig->stVirtualInput[8].nVar2 = 0;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
  pConfig->stVirtualInput[8].eMode = MODE_MOMENTARY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208

  pConfig->stVirtualInput[9].nEnabled = 0;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
  pConfig->stVirtualInput[9].nNot0 = 0;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
  pConfig->stVirtualInput[9].nVar0 = 0;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
  pConfig->stVirtualInput[9].eCond0 = COND_AND;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
  pConfig->stVirtualInput[9].nNot1 = 0;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
  pConfig->stVirtualInput[9].nVar1 = 0;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
  pConfig->stVirtualInput[9].eCond1 = COND_OR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  pConfig->stVirtualInput[9].nNot2 = 0;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  pConfig->stVirtualInput[9].nVar2 = 0;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
  pConfig->stVirtualInput[9].eMode = MODE_MOMENTARY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230

  pConfig->stVirtualInput[10].nEnabled = 0;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
  pConfig->stVirtualInput[10].nNot0 = 0;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
  pConfig->stVirtualInput[10].nVar0 = 0;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
  pConfig->stVirtualInput[10].eCond0 = COND_AND;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
  pConfig->stVirtualInput[10].nNot1 = 0;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
  pConfig->stVirtualInput[10].nVar1 = 0;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
  pConfig->stVirtualInput[10].eCond1 = COND_OR;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
  pConfig->stVirtualInput[10].nNot2 = 0;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
  pConfig->stVirtualInput[10].nVar2 = 0;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
  pConfig->stVirtualInput[10].eMode = MODE_MOMENTARY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258

  pConfig->stVirtualInput[11].nEnabled = 0;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
  pConfig->stVirtualInput[11].nNot0 = 0;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
  pConfig->stVirtualInput[11].nVar0 = 0;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
  pConfig->stVirtualInput[11].eCond0 = COND_AND;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
  pConfig->stVirtualInput[11].nNot1 = 0;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
  pConfig->stVirtualInput[11].nVar1 = 0;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
  pConfig->stVirtualInput[11].eCond1 = COND_OR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
  pConfig->stVirtualInput[11].nNot2 = 0;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
  pConfig->stVirtualInput[11].nVar2 = 0;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
  pConfig->stVirtualInput[11].eMode = MODE_MOMENTARY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280

  pConfig->stVirtualInput[12].nEnabled = 0;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  pConfig->stVirtualInput[12].nNot0 = 0;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  pConfig->stVirtualInput[12].nVar0 = 0;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
  pConfig->stVirtualInput[12].eCond0 = COND_AND;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
  pConfig->stVirtualInput[12].nNot1 = 0;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
  pConfig->stVirtualInput[12].nVar1 = 0;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
  pConfig->stVirtualInput[12].eCond1 = COND_OR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
  pConfig->stVirtualInput[12].nNot2 = 0;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
  pConfig->stVirtualInput[12].nVar2 = 0;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
  pConfig->stVirtualInput[12].eMode = MODE_MOMENTARY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  pConfig->stVirtualInput[13].nEnabled = 0;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  pConfig->stVirtualInput[13].nNot0 = 0;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
  pConfig->stVirtualInput[13].nVar0 = 0;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
  pConfig->stVirtualInput[13].eCond0 = COND_AND;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
  pConfig->stVirtualInput[13].nNot1 = 0;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
  pConfig->stVirtualInput[13].nVar1 = 0;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
  pConfig->stVirtualInput[13].eCond1 = COND_OR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
  pConfig->stVirtualInput[13].nNot2 = 0;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
  pConfig->stVirtualInput[13].nVar2 = 0;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
  pConfig->stVirtualInput[13].eMode = MODE_MOMENTARY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0

  pConfig->stVirtualInput[14].nEnabled = 0;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
  pConfig->stVirtualInput[14].nNot0 = 0;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
  pConfig->stVirtualInput[14].nVar0 = 0;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
  pConfig->stVirtualInput[14].eCond0 = COND_AND;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
  pConfig->stVirtualInput[14].nNot1 = 0;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
  pConfig->stVirtualInput[14].nVar1 = 0;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
  pConfig->stVirtualInput[14].eCond1 = COND_OR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
  pConfig->stVirtualInput[14].nNot2 = 0;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
  pConfig->stVirtualInput[14].nVar2 = 0;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
  pConfig->stVirtualInput[14].eMode = MODE_MOMENTARY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  pConfig->stVirtualInput[15].nEnabled = 0;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  pConfig->stVirtualInput[15].nNot0 = 0;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
  pConfig->stVirtualInput[15].nVar0 = 0;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  pConfig->stVirtualInput[15].eCond0 = COND_AND;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  pConfig->stVirtualInput[15].nNot1 = 0;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  pConfig->stVirtualInput[15].nVar1 = 0;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  pConfig->stVirtualInput[15].eCond1 = COND_OR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  pConfig->stVirtualInput[15].nNot2 = 0;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  pConfig->stVirtualInput[15].nVar2 = 0;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
  pConfig->stVirtualInput[15].eMode = MODE_MOMENTARY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  pConfig->stVirtualInput[16].nEnabled = 0;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
  pConfig->stVirtualInput[16].nNot0 = 0;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
  pConfig->stVirtualInput[16].nVar0 = 0;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
  pConfig->stVirtualInput[16].eCond0 = COND_AND;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  pConfig->stVirtualInput[16].nNot1 = 0;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
  pConfig->stVirtualInput[16].nVar1 = 0;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
  pConfig->stVirtualInput[16].eCond1 = COND_OR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
  pConfig->stVirtualInput[16].nNot2 = 0;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
  pConfig->stVirtualInput[16].nVar2 = 0;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
  pConfig->stVirtualInput[16].eMode = MODE_MOMENTARY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348

  pConfig->stVirtualInput[17].nEnabled = 0;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
  pConfig->stVirtualInput[17].nNot0 = 0;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359
  pConfig->stVirtualInput[17].nVar0 = 0;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
  pConfig->stVirtualInput[17].eCond0 = COND_AND;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
  pConfig->stVirtualInput[17].nNot1 = 0;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2361 	strb.w	r2, [r3, #865]	; 0x361
  pConfig->stVirtualInput[17].nVar1 = 0;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
  pConfig->stVirtualInput[17].eCond1 = COND_OR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
  pConfig->stVirtualInput[17].nNot2 = 0;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
  pConfig->stVirtualInput[17].nVar2 = 0;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
  pConfig->stVirtualInput[17].eMode = MODE_MOMENTARY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

  pConfig->stVirtualInput[18].nEnabled = 0;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  pConfig->stVirtualInput[18].nNot0 = 0;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
  pConfig->stVirtualInput[18].nVar0 = 0;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2382 	strb.w	r2, [r3, #898]	; 0x382
  pConfig->stVirtualInput[18].eCond0 = COND_AND;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
  pConfig->stVirtualInput[18].nNot1 = 0;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
  pConfig->stVirtualInput[18].nVar1 = 0;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
  pConfig->stVirtualInput[18].eCond1 = COND_OR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
  pConfig->stVirtualInput[18].nNot2 = 0;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
  pConfig->stVirtualInput[18].nVar2 = 0;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
  pConfig->stVirtualInput[18].eMode = MODE_MOMENTARY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

  pConfig->stVirtualInput[19].nEnabled = 0;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
  pConfig->stVirtualInput[19].nNot0 = 0;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
  pConfig->stVirtualInput[19].nVar0 = 0;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
  pConfig->stVirtualInput[19].eCond0 = COND_AND;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
  pConfig->stVirtualInput[19].nNot1 = 0;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
  pConfig->stVirtualInput[19].nVar1 = 0;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 23b2 	strb.w	r2, [r3, #946]	; 0x3b2
  pConfig->stVirtualInput[19].eCond1 = COND_OR;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  pConfig->stVirtualInput[19].nNot2 = 0;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  pConfig->stVirtualInput[19].nVar2 = 0;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
  pConfig->stVirtualInput[19].eMode = MODE_MOMENTARY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  //Wiper
  pConfig->stWiper.nEnabled = 1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
  pConfig->stWiper.nMode = 2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
  pConfig->stWiper.nSlowInput = 0;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
  pConfig->stWiper.nFastInput = 0;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3
  pConfig->stWiper.nInterInput = 0;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  pConfig->stWiper.nOnInput = 15;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	220f      	movs	r2, #15
 8005a52:	f883 24f5 	strb.w	r2, [r3, #1269]	; 0x4f5
  pConfig->stWiper.nSpeedInput = 7;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2207      	movs	r2, #7
 8005a5a:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6
  pConfig->stWiper.nParkInput = 1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
  pConfig->stWiper.nParkStopLevel = 0;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
  pConfig->stWiper.nSwipeInput = 4;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2204      	movs	r2, #4
 8005a72:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
  pConfig->stWiper.nWashInput = 14;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	220e      	movs	r2, #14
 8005a7a:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
  pConfig->stWiper.nWashWipeCycles = 2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2202      	movs	r2, #2
 8005a82:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
  pConfig->stWiper.nSpeedMap[0] = 3;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2203      	movs	r2, #3
 8005a8a:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
  pConfig->stWiper.nSpeedMap[1] = 4;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2204      	movs	r2, #4
 8005a92:	f883 24fd 	strb.w	r2, [r3, #1277]	; 0x4fd
  pConfig->stWiper.nSpeedMap[2] = 5;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2205      	movs	r2, #5
 8005a9a:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
  pConfig->stWiper.nSpeedMap[3] = 6;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2206      	movs	r2, #6
 8005aa2:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
  pConfig->stWiper.nSpeedMap[4] = 7;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2207      	movs	r2, #7
 8005aaa:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  pConfig->stWiper.nSpeedMap[5] = 8;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
  pConfig->stWiper.nSpeedMap[6] = 1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
  pConfig->stWiper.nSpeedMap[7] = 2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
  pConfig->stWiper.nIntermitTime[0] = 1000;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005acc:	f8a3 2504 	strh.w	r2, [r3, #1284]	; 0x504
  pConfig->stWiper.nIntermitTime[1] = 2000;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005ad6:	f8a3 2506 	strh.w	r2, [r3, #1286]	; 0x506
  pConfig->stWiper.nIntermitTime[2] = 3000;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005ae0:	f8a3 2508 	strh.w	r2, [r3, #1288]	; 0x508
  pConfig->stWiper.nIntermitTime[3] = 4000;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8005aea:	f8a3 250a 	strh.w	r2, [r3, #1290]	; 0x50a
  pConfig->stWiper.nIntermitTime[4] = 5000;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af4:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
  pConfig->stWiper.nIntermitTime[5] = 6000;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f241 7270 	movw	r2, #6000	; 0x1770
 8005afe:	f8a3 250e 	strh.w	r2, [r3, #1294]	; 0x50e

  //Flasher
  pConfig->stFlasher[0].nEnabled = 1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
  pConfig->stFlasher[0].nInput = 37;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2225      	movs	r2, #37	; 0x25
 8005b0e:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
  pConfig->stFlasher[0].nFlashOnTime = 500;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005b18:	f8a3 2518 	strh.w	r2, [r3, #1304]	; 0x518
  pConfig->stFlasher[0].nFlashOffTime = 500;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005b22:	f8a3 251a 	strh.w	r2, [r3, #1306]	; 0x51a
  pConfig->stFlasher[0].nSingleCycle = 0;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
  pConfig->stFlasher[0].nOutput = 5;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2205      	movs	r2, #5
 8005b32:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d

  pConfig->stFlasher[1].nEnabled = 1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528
  pConfig->stFlasher[1].nInput = 38;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2226      	movs	r2, #38	; 0x26
 8005b42:	f883 2529 	strb.w	r2, [r3, #1321]	; 0x529
  pConfig->stFlasher[1].nFlashOnTime = 500;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005b4c:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
  pConfig->stFlasher[1].nFlashOffTime = 500;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005b56:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
  pConfig->stFlasher[1].nSingleCycle = 0;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534
  pConfig->stFlasher[1].nOutput = 6;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2206      	movs	r2, #6
 8005b66:	f883 2535 	strb.w	r2, [r3, #1333]	; 0x535

  pConfig->stFlasher[2].nEnabled = 0;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
  pConfig->stFlasher[2].nInput = 0;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
  pConfig->stFlasher[2].nFlashOnTime = 0;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
  pConfig->stFlasher[2].nFlashOffTime = 0;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
  pConfig->stFlasher[2].nSingleCycle = 0;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 254c 	strb.w	r2, [r3, #1356]	; 0x54c
  pConfig->stFlasher[2].nOutput = 0;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 254d 	strb.w	r2, [r3, #1357]	; 0x54d

  pConfig->stFlasher[3].nEnabled = 0;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
  pConfig->stFlasher[3].nInput = 0;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2559 	strb.w	r2, [r3, #1369]	; 0x559
  pConfig->stFlasher[3].nFlashOnTime = 0;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8a3 2560 	strh.w	r2, [r3, #1376]	; 0x560
  pConfig->stFlasher[3].nFlashOffTime = 0;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8a3 2562 	strh.w	r2, [r3, #1378]	; 0x562
  pConfig->stFlasher[3].nSingleCycle = 0;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2564 	strb.w	r2, [r3, #1380]	; 0x564
  pConfig->stFlasher[3].nOutput = 0;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2565 	strb.w	r2, [r3, #1381]	; 0x565

  //Starter
  pConfig->stStarter.nEnabled = 1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
  pConfig->stStarter.nInput = 8;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2208      	movs	r2, #8
 8005bd6:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
  pConfig->stStarter.nDisableOut[0] = 0;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
  pConfig->stStarter.nDisableOut[1] = 1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
  pConfig->stStarter.nDisableOut[2] = 0;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
  pConfig->stStarter.nDisableOut[3] = 0;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
  pConfig->stStarter.nDisableOut[4] = 0;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
  pConfig->stStarter.nDisableOut[5] = 0;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
  pConfig->stStarter.nDisableOut[6] = 0;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
  pConfig->stStarter.nDisableOut[7] = 0;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f
  pConfig->stStarter.nDisableOut[8] = 0;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
  pConfig->stStarter.nDisableOut[9] = 0;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
  pConfig->stStarter.nDisableOut[10] = 0;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
  pConfig->stStarter.nDisableOut[11] = 0;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583

  //CAN Input
  pConfig->stCanInput[0].nEnabled = 1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
  pConfig->stCanInput[0].nId = 1602;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f240 6242 	movw	r2, #1602	; 0x642
 8005c48:	f8a3 2586 	strh.w	r2, [r3, #1414]	; 0x586
  pConfig->stCanInput[0].nLowByte = 0;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8a3 2588 	strh.w	r2, [r3, #1416]	; 0x588
  pConfig->stCanInput[0].nHighByte = 0;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8a3 258a 	strh.w	r2, [r3, #1418]	; 0x58a
  pConfig->stCanInput[0].eOperator = OPER_BITWISE_AND;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2203      	movs	r2, #3
 8005c60:	f883 258c 	strb.w	r2, [r3, #1420]	; 0x58c
  pConfig->stCanInput[0].nOnVal = 0xF;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	220f      	movs	r2, #15
 8005c68:	f8a3 258e 	strh.w	r2, [r3, #1422]	; 0x58e
  pConfig->stCanInput[0].eMode = MODE_NUM;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590

  pConfig->stCanInput[1].nEnabled = 1;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
  pConfig->stCanInput[1].nId = 1602;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f240 6242 	movw	r2, #1602	; 0x642
 8005c82:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
  pConfig->stCanInput[1].nLowByte = 4;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2204      	movs	r2, #4
 8005c8a:	f8a3 25a4 	strh.w	r2, [r3, #1444]	; 0x5a4
  pConfig->stCanInput[1].nHighByte = 0;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f8a3 25a6 	strh.w	r2, [r3, #1446]	; 0x5a6
  pConfig->stCanInput[1].eOperator = OPER_BITWISE_AND;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2203      	movs	r2, #3
 8005c9a:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
  pConfig->stCanInput[1].nOnVal = 0x1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f8a3 25aa 	strh.w	r2, [r3, #1450]	; 0x5aa
  pConfig->stCanInput[1].eMode = MODE_MOMENTARY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac

  pConfig->stCanInput[2].nEnabled = 1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 25bc 	strb.w	r2, [r3, #1468]	; 0x5bc
  pConfig->stCanInput[2].nId = 1602;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f240 6242 	movw	r2, #1602	; 0x642
 8005cbc:	f8a3 25be 	strh.w	r2, [r3, #1470]	; 0x5be
  pConfig->stCanInput[2].nLowByte = 4;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2204      	movs	r2, #4
 8005cc4:	f8a3 25c0 	strh.w	r2, [r3, #1472]	; 0x5c0
  pConfig->stCanInput[2].nHighByte = 0;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8a3 25c2 	strh.w	r2, [r3, #1474]	; 0x5c2
  pConfig->stCanInput[2].eOperator = OPER_BITWISE_AND;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2203      	movs	r2, #3
 8005cd4:	f883 25c4 	strb.w	r2, [r3, #1476]	; 0x5c4
  pConfig->stCanInput[2].nOnVal = 0x2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f8a3 25c6 	strh.w	r2, [r3, #1478]	; 0x5c6
  pConfig->stCanInput[2].eMode = MODE_MOMENTARY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 25c8 	strb.w	r2, [r3, #1480]	; 0x5c8

  pConfig->stCanInput[3].nEnabled = 1;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
  pConfig->stCanInput[3].nId = 1602;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f240 6242 	movw	r2, #1602	; 0x642
 8005cf6:	f8a3 25da 	strh.w	r2, [r3, #1498]	; 0x5da
  pConfig->stCanInput[3].nLowByte = 4;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	f8a3 25dc 	strh.w	r2, [r3, #1500]	; 0x5dc
  pConfig->stCanInput[3].nHighByte = 0;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8a3 25de 	strh.w	r2, [r3, #1502]	; 0x5de
  pConfig->stCanInput[3].eOperator = OPER_BITWISE_AND;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2203      	movs	r2, #3
 8005d0e:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
  pConfig->stCanInput[3].nOnVal = 0x4;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2204      	movs	r2, #4
 8005d16:	f8a3 25e2 	strh.w	r2, [r3, #1506]	; 0x5e2
  pConfig->stCanInput[3].eMode = MODE_MOMENTARY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 25e4 	strb.w	r2, [r3, #1508]	; 0x5e4

  pConfig->stCanInput[4].nEnabled = 1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 25f4 	strb.w	r2, [r3, #1524]	; 0x5f4
  pConfig->stCanInput[4].nId = 1602;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f240 6242 	movw	r2, #1602	; 0x642
 8005d30:	f8a3 25f6 	strh.w	r2, [r3, #1526]	; 0x5f6
  pConfig->stCanInput[4].nLowByte = 4;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2204      	movs	r2, #4
 8005d38:	f8a3 25f8 	strh.w	r2, [r3, #1528]	; 0x5f8
  pConfig->stCanInput[4].nHighByte = 0;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8a3 25fa 	strh.w	r2, [r3, #1530]	; 0x5fa
  pConfig->stCanInput[4].eOperator = OPER_BITWISE_AND;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2203      	movs	r2, #3
 8005d48:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
  pConfig->stCanInput[4].nOnVal = 0x8;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2208      	movs	r2, #8
 8005d50:	f8a3 25fe 	strh.w	r2, [r3, #1534]	; 0x5fe
  pConfig->stCanInput[4].eMode = MODE_MOMENTARY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600

  pConfig->stCanInput[5].nEnabled = 1;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610
  pConfig->stCanInput[5].nId = 1602;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f240 6242 	movw	r2, #1602	; 0x642
 8005d6a:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
  pConfig->stCanInput[5].nLowByte = 4;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2204      	movs	r2, #4
 8005d72:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
  pConfig->stCanInput[5].nHighByte = 0;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8a3 2616 	strh.w	r2, [r3, #1558]	; 0x616
  pConfig->stCanInput[5].eOperator = OPER_BITWISE_AND;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2203      	movs	r2, #3
 8005d82:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
  pConfig->stCanInput[5].nOnVal = 0x10;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2210      	movs	r2, #16
 8005d8a:	f8a3 261a 	strh.w	r2, [r3, #1562]	; 0x61a
  pConfig->stCanInput[5].eMode = MODE_LATCHING;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2202      	movs	r2, #2
 8005d92:	f883 261c 	strb.w	r2, [r3, #1564]	; 0x61c

  pConfig->stCanInput[6].nEnabled = 1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
  pConfig->stCanInput[6].nId = 1602;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f240 6242 	movw	r2, #1602	; 0x642
 8005da4:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
  pConfig->stCanInput[6].nLowByte = 4;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2204      	movs	r2, #4
 8005dac:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
  pConfig->stCanInput[6].nHighByte = 0;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8a3 2632 	strh.w	r2, [r3, #1586]	; 0x632
  pConfig->stCanInput[6].eOperator = OPER_BITWISE_AND;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2203      	movs	r2, #3
 8005dbc:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
  pConfig->stCanInput[6].nOnVal = 0x20;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
  pConfig->stCanInput[6].eMode = MODE_LATCHING;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

  pConfig->stCanInput[7].nEnabled = 1;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2648 	strb.w	r2, [r3, #1608]	; 0x648
  pConfig->stCanInput[7].nId = 1602;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f240 6242 	movw	r2, #1602	; 0x642
 8005dde:	f8a3 264a 	strh.w	r2, [r3, #1610]	; 0x64a
  pConfig->stCanInput[7].nLowByte = 4;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2204      	movs	r2, #4
 8005de6:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
  pConfig->stCanInput[7].nHighByte = 0;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
  pConfig->stCanInput[7].eOperator = OPER_BITWISE_AND;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2203      	movs	r2, #3
 8005df6:	f883 2650 	strb.w	r2, [r3, #1616]	; 0x650
  pConfig->stCanInput[7].nOnVal = 0x40;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2240      	movs	r2, #64	; 0x40
 8005dfe:	f8a3 2652 	strh.w	r2, [r3, #1618]	; 0x652
  pConfig->stCanInput[7].eMode = MODE_MOMENTARY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654

  pConfig->stCanInput[8].nEnabled = 1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2664 	strb.w	r2, [r3, #1636]	; 0x664
  pConfig->stCanInput[8].nId = 1602;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f240 6242 	movw	r2, #1602	; 0x642
 8005e18:	f8a3 2666 	strh.w	r2, [r3, #1638]	; 0x666
  pConfig->stCanInput[8].nLowByte = 4;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2204      	movs	r2, #4
 8005e20:	f8a3 2668 	strh.w	r2, [r3, #1640]	; 0x668
  pConfig->stCanInput[8].nHighByte = 0;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8a3 266a 	strh.w	r2, [r3, #1642]	; 0x66a
  pConfig->stCanInput[8].eOperator = OPER_BITWISE_AND;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2203      	movs	r2, #3
 8005e30:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
  pConfig->stCanInput[8].nOnVal = 0x80;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2280      	movs	r2, #128	; 0x80
 8005e38:	f8a3 266e 	strh.w	r2, [r3, #1646]	; 0x66e
  pConfig->stCanInput[8].eMode = MODE_LATCHING;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670

  pConfig->stCanInput[9].nEnabled = 1;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
  pConfig->stCanInput[9].nId = 1620;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f240 6254 	movw	r2, #1620	; 0x654
 8005e52:	f8a3 2682 	strh.w	r2, [r3, #1666]	; 0x682
  pConfig->stCanInput[9].nLowByte = 4;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2204      	movs	r2, #4
 8005e5a:	f8a3 2684 	strh.w	r2, [r3, #1668]	; 0x684
  pConfig->stCanInput[9].nHighByte = 5;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2205      	movs	r2, #5
 8005e62:	f8a3 2686 	strh.w	r2, [r3, #1670]	; 0x686
  pConfig->stCanInput[9].eOperator = OPER_EQUAL;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
  pConfig->stCanInput[9].nOnVal = 1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f8a3 268a 	strh.w	r2, [r3, #1674]	; 0x68a
  pConfig->stCanInput[9].eMode = MODE_NUM;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c

  pConfig->stCanInput[10].nEnabled = 1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
  pConfig->stCanInput[10].nId = 1620;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f240 6254 	movw	r2, #1620	; 0x654
 8005e8c:	f8a3 269e 	strh.w	r2, [r3, #1694]	; 0x69e
  pConfig->stCanInput[10].nLowByte = 2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f8a3 26a0 	strh.w	r2, [r3, #1696]	; 0x6a0
  pConfig->stCanInput[10].nHighByte = 3;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2203      	movs	r2, #3
 8005e9c:	f8a3 26a2 	strh.w	r2, [r3, #1698]	; 0x6a2
  pConfig->stCanInput[10].eOperator = OPER_EQUAL;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
  pConfig->stCanInput[10].nOnVal = 1;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f8a3 26a6 	strh.w	r2, [r3, #1702]	; 0x6a6
  pConfig->stCanInput[10].eMode = MODE_NUM;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8

  pConfig->stCanInput[11].nEnabled = 1;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
  pConfig->stCanInput[11].nId = 1620;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f240 6254 	movw	r2, #1620	; 0x654
 8005ec6:	f8a3 26ba 	strh.w	r2, [r3, #1722]	; 0x6ba
  pConfig->stCanInput[11].nLowByte = 0;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8a3 26bc 	strh.w	r2, [r3, #1724]	; 0x6bc
  pConfig->stCanInput[11].nHighByte = 1;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f8a3 26be 	strh.w	r2, [r3, #1726]	; 0x6be
  pConfig->stCanInput[11].eOperator = OPER_EQUAL;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 26c0 	strb.w	r2, [r3, #1728]	; 0x6c0
  pConfig->stCanInput[11].nOnVal = 1;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f8a3 26c2 	strh.w	r2, [r3, #1730]	; 0x6c2
  pConfig->stCanInput[11].eMode = MODE_NUM;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4

  pConfig->stCanInput[12].nEnabled = 1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4
  pConfig->stCanInput[12].nId = 1620;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f240 6254 	movw	r2, #1620	; 0x654
 8005f00:	f8a3 26d6 	strh.w	r2, [r3, #1750]	; 0x6d6
  pConfig->stCanInput[12].nLowByte = 6;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2206      	movs	r2, #6
 8005f08:	f8a3 26d8 	strh.w	r2, [r3, #1752]	; 0x6d8
  pConfig->stCanInput[12].nHighByte = 7;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2207      	movs	r2, #7
 8005f10:	f8a3 26da 	strh.w	r2, [r3, #1754]	; 0x6da
  pConfig->stCanInput[12].eOperator = OPER_EQUAL;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
  pConfig->stCanInput[12].nOnVal = 1;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f8a3 26de 	strh.w	r2, [r3, #1758]	; 0x6de
  pConfig->stCanInput[12].eMode = MODE_NUM;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0

  pConfig->stCanInput[13].nEnabled = 1;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 26f0 	strb.w	r2, [r3, #1776]	; 0x6f0
  pConfig->stCanInput[13].nId = 1621;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f240 6255 	movw	r2, #1621	; 0x655
 8005f3a:	f8a3 26f2 	strh.w	r2, [r3, #1778]	; 0x6f2
  pConfig->stCanInput[13].nLowByte = 0;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8a3 26f4 	strh.w	r2, [r3, #1780]	; 0x6f4
  pConfig->stCanInput[13].nHighByte = 1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f8a3 26f6 	strh.w	r2, [r3, #1782]	; 0x6f6
  pConfig->stCanInput[13].eOperator = OPER_EQUAL;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
  pConfig->stCanInput[13].nOnVal = 1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f8a3 26fa 	strh.w	r2, [r3, #1786]	; 0x6fa
  pConfig->stCanInput[13].eMode = MODE_NUM;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc

  pConfig->stCanInput[14].nEnabled = 1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
  pConfig->stCanInput[14].nId = 1621;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f240 6255 	movw	r2, #1621	; 0x655
 8005f74:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
  pConfig->stCanInput[14].nLowByte = 2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
  pConfig->stCanInput[14].nHighByte = 3;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2203      	movs	r2, #3
 8005f84:	f8a3 2712 	strh.w	r2, [r3, #1810]	; 0x712
  pConfig->stCanInput[14].eOperator = OPER_EQUAL;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
  pConfig->stCanInput[14].nOnVal = 1;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f8a3 2716 	strh.w	r2, [r3, #1814]	; 0x716
  pConfig->stCanInput[14].eMode = MODE_NUM;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718

  pConfig->stCanInput[15].nEnabled = 1;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728
  pConfig->stCanInput[15].nId = 1622;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f240 6256 	movw	r2, #1622	; 0x656
 8005fae:	f8a3 272a 	strh.w	r2, [r3, #1834]	; 0x72a
  pConfig->stCanInput[15].nLowByte = 0;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8a3 272c 	strh.w	r2, [r3, #1836]	; 0x72c
  pConfig->stCanInput[15].nHighByte = 0;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8a3 272e 	strh.w	r2, [r3, #1838]	; 0x72e
  pConfig->stCanInput[15].eOperator = OPER_BITWISE_AND;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
  pConfig->stCanInput[15].nOnVal = 0x01;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f8a3 2732 	strh.w	r2, [r3, #1842]	; 0x732
  pConfig->stCanInput[15].eMode = MODE_MOMENTARY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2734 	strb.w	r2, [r3, #1844]	; 0x734

  pConfig->stCanInput[16].nEnabled = 1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2744 	strb.w	r2, [r3, #1860]	; 0x744
  pConfig->stCanInput[16].nId = 1622;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f240 6256 	movw	r2, #1622	; 0x656
 8005fe8:	f8a3 2746 	strh.w	r2, [r3, #1862]	; 0x746
  pConfig->stCanInput[16].nLowByte = 0;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8a3 2748 	strh.w	r2, [r3, #1864]	; 0x748
  pConfig->stCanInput[16].nHighByte = 0;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8a3 274a 	strh.w	r2, [r3, #1866]	; 0x74a
  pConfig->stCanInput[16].eOperator = OPER_BITWISE_AND;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2203      	movs	r2, #3
 8006000:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
  pConfig->stCanInput[16].nOnVal = 0x02;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f8a3 274e 	strh.w	r2, [r3, #1870]	; 0x74e
  pConfig->stCanInput[16].eMode = MODE_MOMENTARY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750

  pConfig->stCanInput[17].nEnabled = 1;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
  pConfig->stCanInput[17].nId = 1622;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f240 6256 	movw	r2, #1622	; 0x656
 8006022:	f8a3 2762 	strh.w	r2, [r3, #1890]	; 0x762
  pConfig->stCanInput[17].nLowByte = 0;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f8a3 2764 	strh.w	r2, [r3, #1892]	; 0x764
  pConfig->stCanInput[17].nHighByte = 0;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f8a3 2766 	strh.w	r2, [r3, #1894]	; 0x766
  pConfig->stCanInput[17].eOperator = OPER_BITWISE_AND;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2203      	movs	r2, #3
 800603a:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
  pConfig->stCanInput[17].nOnVal = 0x04;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2204      	movs	r2, #4
 8006042:	f8a3 276a 	strh.w	r2, [r3, #1898]	; 0x76a
  pConfig->stCanInput[17].eMode = MODE_MOMENTARY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c

  pConfig->stCanInput[18].nEnabled = 1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 277c 	strb.w	r2, [r3, #1916]	; 0x77c
  pConfig->stCanInput[18].nId = 1622;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f240 6256 	movw	r2, #1622	; 0x656
 800605c:	f8a3 277e 	strh.w	r2, [r3, #1918]	; 0x77e
  pConfig->stCanInput[18].nLowByte = 0;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f8a3 2780 	strh.w	r2, [r3, #1920]	; 0x780
  pConfig->stCanInput[18].nHighByte = 0;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f8a3 2782 	strh.w	r2, [r3, #1922]	; 0x782
  pConfig->stCanInput[18].eOperator = OPER_BITWISE_AND;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2203      	movs	r2, #3
 8006074:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
  pConfig->stCanInput[18].nOnVal = 0x08;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2208      	movs	r2, #8
 800607c:	f8a3 2786 	strh.w	r2, [r3, #1926]	; 0x786
  pConfig->stCanInput[18].eMode = MODE_MOMENTARY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788

  pConfig->stCanInput[19].nEnabled = 1;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798
  pConfig->stCanInput[19].nId = 1622;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f240 6256 	movw	r2, #1622	; 0x656
 8006096:	f8a3 279a 	strh.w	r2, [r3, #1946]	; 0x79a
  pConfig->stCanInput[19].nLowByte = 0;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f8a3 279c 	strh.w	r2, [r3, #1948]	; 0x79c
  pConfig->stCanInput[19].nHighByte = 0;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8a3 279e 	strh.w	r2, [r3, #1950]	; 0x79e
  pConfig->stCanInput[19].eOperator = OPER_BITWISE_AND;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2203      	movs	r2, #3
 80060ae:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
  pConfig->stCanInput[19].nOnVal = 0x10;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2210      	movs	r2, #16
 80060b6:	f8a3 27a2 	strh.w	r2, [r3, #1954]	; 0x7a2
  pConfig->stCanInput[19].eMode = MODE_MOMENTARY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 27a4 	strb.w	r2, [r3, #1956]	; 0x7a4

  pConfig->stCanInput[20].nEnabled = 1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 27b4 	strb.w	r2, [r3, #1972]	; 0x7b4
  pConfig->stCanInput[20].nId = 1622;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f240 6256 	movw	r2, #1622	; 0x656
 80060d0:	f8a3 27b6 	strh.w	r2, [r3, #1974]	; 0x7b6
  pConfig->stCanInput[20].nLowByte = 0;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8a3 27b8 	strh.w	r2, [r3, #1976]	; 0x7b8
  pConfig->stCanInput[20].nHighByte = 0;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8a3 27ba 	strh.w	r2, [r3, #1978]	; 0x7ba
  pConfig->stCanInput[20].eOperator = OPER_BITWISE_AND;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2203      	movs	r2, #3
 80060e8:	f883 27bc 	strb.w	r2, [r3, #1980]	; 0x7bc
  pConfig->stCanInput[20].nOnVal = 0x20;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f8a3 27be 	strh.w	r2, [r3, #1982]	; 0x7be
  pConfig->stCanInput[20].eMode = MODE_MOMENTARY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 27c0 	strb.w	r2, [r3, #1984]	; 0x7c0

  pConfig->stCanInput[21].nEnabled = 1;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
  pConfig->stCanInput[21].nId = 1622;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f240 6256 	movw	r2, #1622	; 0x656
 800610a:	f8a3 27d2 	strh.w	r2, [r3, #2002]	; 0x7d2
  pConfig->stCanInput[21].nLowByte = 0;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f8a3 27d4 	strh.w	r2, [r3, #2004]	; 0x7d4
  pConfig->stCanInput[21].nHighByte = 0;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f8a3 27d6 	strh.w	r2, [r3, #2006]	; 0x7d6
  pConfig->stCanInput[21].eOperator = OPER_BITWISE_AND;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2203      	movs	r2, #3
 8006122:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
  pConfig->stCanInput[21].nOnVal = 0x40;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2240      	movs	r2, #64	; 0x40
 800612a:	f8a3 27da 	strh.w	r2, [r3, #2010]	; 0x7da
  pConfig->stCanInput[21].eMode = MODE_MOMENTARY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc

  pConfig->stCanInput[22].nEnabled = 1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
  pConfig->stCanInput[22].nId = 1622;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f240 6256 	movw	r2, #1622	; 0x656
 8006144:	f8a3 27ee 	strh.w	r2, [r3, #2030]	; 0x7ee
  pConfig->stCanInput[22].nLowByte = 0;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f8a3 27f0 	strh.w	r2, [r3, #2032]	; 0x7f0
  pConfig->stCanInput[22].nHighByte = 0;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f8a3 27f2 	strh.w	r2, [r3, #2034]	; 0x7f2
  pConfig->stCanInput[22].eOperator = OPER_BITWISE_AND;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2203      	movs	r2, #3
 800615c:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
  pConfig->stCanInput[22].nOnVal = 0x80;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2280      	movs	r2, #128	; 0x80
 8006164:	f8a3 27f6 	strh.w	r2, [r3, #2038]	; 0x7f6
  pConfig->stCanInput[22].eMode = MODE_MOMENTARY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8

  pConfig->stCanInput[23].nEnabled = 1;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
  pConfig->stCanInput[23].nId = 1622;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f240 6256 	movw	r2, #1622	; 0x656
 800617e:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
  pConfig->stCanInput[23].nLowByte = 1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f8a3 280c 	strh.w	r2, [r3, #2060]	; 0x80c
  pConfig->stCanInput[23].nHighByte = 0;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f8a3 280e 	strh.w	r2, [r3, #2062]	; 0x80e
  pConfig->stCanInput[23].eOperator = OPER_BITWISE_AND;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2203      	movs	r2, #3
 8006196:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
  pConfig->stCanInput[23].nOnVal = 0x01;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
  pConfig->stCanInput[23].eMode = MODE_MOMENTARY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814

  pConfig->stCanInput[24].nEnabled = 1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
  pConfig->stCanInput[24].nId = 1622;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f240 6256 	movw	r2, #1622	; 0x656
 80061b8:	f8a3 2826 	strh.w	r2, [r3, #2086]	; 0x826
  pConfig->stCanInput[24].nLowByte = 1;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f8a3 2828 	strh.w	r2, [r3, #2088]	; 0x828
  pConfig->stCanInput[24].nHighByte = 0;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8a3 282a 	strh.w	r2, [r3, #2090]	; 0x82a
  pConfig->stCanInput[24].eOperator = OPER_BITWISE_AND;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2203      	movs	r2, #3
 80061d0:	f883 282c 	strb.w	r2, [r3, #2092]	; 0x82c
  pConfig->stCanInput[24].nOnVal = 0x02;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f8a3 282e 	strh.w	r2, [r3, #2094]	; 0x82e
  pConfig->stCanInput[24].eMode = MODE_MOMENTARY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2830 	strb.w	r2, [r3, #2096]	; 0x830

  pConfig->stCanInput[25].nEnabled = 0;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
  pConfig->stCanInput[25].nId = 0;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8a3 2842 	strh.w	r2, [r3, #2114]	; 0x842
  pConfig->stCanInput[25].nLowByte = 0;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8a3 2844 	strh.w	r2, [r3, #2116]	; 0x844
  pConfig->stCanInput[25].nHighByte = 0;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8a3 2846 	strh.w	r2, [r3, #2118]	; 0x846
  pConfig->stCanInput[25].eOperator = OPER_EQUAL;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
  pConfig->stCanInput[25].nOnVal = 0;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f8a3 284a 	strh.w	r2, [r3, #2122]	; 0x84a
  pConfig->stCanInput[25].eMode = MODE_MOMENTARY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 284c 	strb.w	r2, [r3, #2124]	; 0x84c

  pConfig->stCanInput[26].nEnabled = 0;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 285c 	strb.w	r2, [r3, #2140]	; 0x85c
  pConfig->stCanInput[26].nId = 0;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f8a3 285e 	strh.w	r2, [r3, #2142]	; 0x85e
  pConfig->stCanInput[26].nLowByte = 0;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f8a3 2860 	strh.w	r2, [r3, #2144]	; 0x860
  pConfig->stCanInput[26].nHighByte = 0;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f8a3 2862 	strh.w	r2, [r3, #2146]	; 0x862
  pConfig->stCanInput[26].eOperator = OPER_EQUAL;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
  pConfig->stCanInput[26].nOnVal = 0;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f8a3 2866 	strh.w	r2, [r3, #2150]	; 0x866
  pConfig->stCanInput[26].eMode = MODE_MOMENTARY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868

  pConfig->stCanInput[27].nEnabled = 0;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
  pConfig->stCanInput[27].nId = 0;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f8a3 287a 	strh.w	r2, [r3, #2170]	; 0x87a
  pConfig->stCanInput[27].nLowByte = 0;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8a3 287c 	strh.w	r2, [r3, #2172]	; 0x87c
  pConfig->stCanInput[27].nHighByte = 0;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f8a3 287e 	strh.w	r2, [r3, #2174]	; 0x87e
  pConfig->stCanInput[27].eOperator = OPER_EQUAL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
  pConfig->stCanInput[27].nOnVal = 0;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f8a3 2882 	strh.w	r2, [r3, #2178]	; 0x882
  pConfig->stCanInput[27].eMode = MODE_MOMENTARY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884

  pConfig->stCanInput[28].nEnabled = 0;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
  pConfig->stCanInput[28].nId = 0;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f8a3 2896 	strh.w	r2, [r3, #2198]	; 0x896
  pConfig->stCanInput[28].nLowByte = 0;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8a3 2898 	strh.w	r2, [r3, #2200]	; 0x898
  pConfig->stCanInput[28].nHighByte = 0;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8a3 289a 	strh.w	r2, [r3, #2202]	; 0x89a
  pConfig->stCanInput[28].eOperator = OPER_EQUAL;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
  pConfig->stCanInput[28].nOnVal = 0;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8a3 289e 	strh.w	r2, [r3, #2206]	; 0x89e
  pConfig->stCanInput[28].eMode = MODE_MOMENTARY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0

  pConfig->stCanInput[29].nEnabled = 0;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 28b0 	strb.w	r2, [r3, #2224]	; 0x8b0
  pConfig->stCanInput[29].nId = 0;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8a3 28b2 	strh.w	r2, [r3, #2226]	; 0x8b2
  pConfig->stCanInput[29].nLowByte = 0;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8a3 28b4 	strh.w	r2, [r3, #2228]	; 0x8b4
  pConfig->stCanInput[29].nHighByte = 0;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8a3 28b6 	strh.w	r2, [r3, #2230]	; 0x8b6
  pConfig->stCanInput[29].eOperator = OPER_EQUAL;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
  pConfig->stCanInput[29].nOnVal = 0;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8a3 28ba 	strh.w	r2, [r3, #2234]	; 0x8ba
  pConfig->stCanInput[29].eMode = MODE_MOMENTARY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc

  //CAN Output
  pConfig->stCanOutput.nEnabled = 1;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
  pConfig->stCanOutput.nBaseId = 2000;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800630a:	f8a3 28ce 	strh.w	r2, [r3, #2254]	; 0x8ce
  pConfig->stCanOutput.nUpdateTime = 50;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2232      	movs	r2, #50	; 0x32
 8006312:	f8a3 28d0 	strh.w	r2, [r3, #2256]	; 0x8d0
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <EvaluateInput>:
 */

#include "pdm_input.h"

void EvaluateInput(PdmConfig_Input_t *pIn, uint16_t* pResult)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b086      	sub	sp, #24
 8006326:	af02      	add	r7, sp, #8
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	6039      	str	r1, [r7, #0]
  if(!pIn->nEnabled)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d017      	beq.n	8006364 <EvaluateInput+0x42>
    return;

  uint16_t nLogicResult;

  nLogicResult = *pIn->pInput > pIn->nOnLevel;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	881a      	ldrh	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	8b1b      	ldrh	r3, [r3, #24]
 800633e:	429a      	cmp	r2, r3
 8006340:	bf8c      	ite	hi
 8006342:	2301      	movhi	r3, #1
 8006344:	2300      	movls	r3, #0
 8006346:	b2db      	uxtb	r3, r3
 8006348:	81fb      	strh	r3, [r7, #14]

  CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nLogicResult, pResult, pIn->nDebounceTime);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f103 000c 	add.w	r0, r3, #12
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	7a19      	ldrb	r1, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	8b5b      	ldrh	r3, [r3, #26]
 8006358:	89fa      	ldrh	r2, [r7, #14]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	f001 fc41 	bl	8007be4 <CheckPushbutton>
 8006362:	e000      	b.n	8006366 <EvaluateInput+0x44>
    return;
 8006364:	bf00      	nop
}
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <EvaluateStarter>:
 */

#include "starter.h"

void EvaluateStarter(PdmConfig_Starter_t *pStarter, uint8_t nIndex, uint16_t* pResult)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	460b      	mov	r3, r1
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	72fb      	strb	r3, [r7, #11]
    if(!pStarter->nEnabled)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d103      	bne.n	800638a <EvaluateStarter+0x1e>
      *pResult = 1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	801a      	strh	r2, [r3, #0]
    else
      *pResult = !(pStarter->nDisableOut[nIndex] && *pStarter->pInput);
}
 8006388:	e010      	b.n	80063ac <EvaluateStarter+0x40>
      *pResult = !(pStarter->nDisableOut[nIndex] && *pStarter->pInput);
 800638a:	7afb      	ldrb	r3, [r7, #11]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4413      	add	r3, r2
 8006390:	7a1b      	ldrb	r3, [r3, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d004      	beq.n	80063a0 <EvaluateStarter+0x34>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <EvaluateStarter+0x38>
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <EvaluateStarter+0x3a>
 80063a4:	2300      	movs	r3, #0
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	801a      	strh	r2, [r3, #0]
}
 80063ac:	bf00      	nop
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063be:	4b11      	ldr	r3, [pc, #68]	; (8006404 <HAL_MspInit+0x4c>)
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	4a10      	ldr	r2, [pc, #64]	; (8006404 <HAL_MspInit+0x4c>)
 80063c4:	f043 0301 	orr.w	r3, r3, #1
 80063c8:	6193      	str	r3, [r2, #24]
 80063ca:	4b0e      	ldr	r3, [pc, #56]	; (8006404 <HAL_MspInit+0x4c>)
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	607b      	str	r3, [r7, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063d6:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <HAL_MspInit+0x4c>)
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	4a0a      	ldr	r2, [pc, #40]	; (8006404 <HAL_MspInit+0x4c>)
 80063dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063e0:	61d3      	str	r3, [r2, #28]
 80063e2:	4b08      	ldr	r3, [pc, #32]	; (8006404 <HAL_MspInit+0x4c>)
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80063ee:	2200      	movs	r2, #0
 80063f0:	210f      	movs	r1, #15
 80063f2:	f06f 0001 	mvn.w	r0, #1
 80063f6:	f004 f92b 	bl	800a650 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	40021000 	.word	0x40021000

08006408 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	; 0x28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006410:	f107 0314 	add.w	r3, r7, #20
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	609a      	str	r2, [r3, #8]
 800641c:	60da      	str	r2, [r3, #12]
 800641e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006428:	d134      	bne.n	8006494 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800642a:	4b45      	ldr	r3, [pc, #276]	; (8006540 <HAL_ADC_MspInit+0x138>)
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	4a44      	ldr	r2, [pc, #272]	; (8006540 <HAL_ADC_MspInit+0x138>)
 8006430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006434:	6153      	str	r3, [r2, #20]
 8006436:	4b42      	ldr	r3, [pc, #264]	; (8006540 <HAL_ADC_MspInit+0x138>)
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	693b      	ldr	r3, [r7, #16]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006442:	4b40      	ldr	r3, [pc, #256]	; (8006544 <HAL_ADC_MspInit+0x13c>)
 8006444:	4a40      	ldr	r2, [pc, #256]	; (8006548 <HAL_ADC_MspInit+0x140>)
 8006446:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006448:	4b3e      	ldr	r3, [pc, #248]	; (8006544 <HAL_ADC_MspInit+0x13c>)
 800644a:	2200      	movs	r2, #0
 800644c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800644e:	4b3d      	ldr	r3, [pc, #244]	; (8006544 <HAL_ADC_MspInit+0x13c>)
 8006450:	2200      	movs	r2, #0
 8006452:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006454:	4b3b      	ldr	r3, [pc, #236]	; (8006544 <HAL_ADC_MspInit+0x13c>)
 8006456:	2280      	movs	r2, #128	; 0x80
 8006458:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800645a:	4b3a      	ldr	r3, [pc, #232]	; (8006544 <HAL_ADC_MspInit+0x13c>)
 800645c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006460:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006462:	4b38      	ldr	r3, [pc, #224]	; (8006544 <HAL_ADC_MspInit+0x13c>)
 8006464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006468:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800646a:	4b36      	ldr	r3, [pc, #216]	; (8006544 <HAL_ADC_MspInit+0x13c>)
 800646c:	2220      	movs	r2, #32
 800646e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006470:	4b34      	ldr	r3, [pc, #208]	; (8006544 <HAL_ADC_MspInit+0x13c>)
 8006472:	2200      	movs	r2, #0
 8006474:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006476:	4833      	ldr	r0, [pc, #204]	; (8006544 <HAL_ADC_MspInit+0x13c>)
 8006478:	f004 f9fe 	bl	800a878 <HAL_DMA_Init>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8006482:	f7fd f9fb 	bl	800387c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2e      	ldr	r2, [pc, #184]	; (8006544 <HAL_ADC_MspInit+0x13c>)
 800648a:	639a      	str	r2, [r3, #56]	; 0x38
 800648c:	4a2d      	ldr	r2, [pc, #180]	; (8006544 <HAL_ADC_MspInit+0x13c>)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8006492:	e051      	b.n	8006538 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC4)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a2c      	ldr	r2, [pc, #176]	; (800654c <HAL_ADC_MspInit+0x144>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d14c      	bne.n	8006538 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800649e:	4b28      	ldr	r3, [pc, #160]	; (8006540 <HAL_ADC_MspInit+0x138>)
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	4a27      	ldr	r2, [pc, #156]	; (8006540 <HAL_ADC_MspInit+0x138>)
 80064a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064a8:	6153      	str	r3, [r2, #20]
 80064aa:	4b25      	ldr	r3, [pc, #148]	; (8006540 <HAL_ADC_MspInit+0x138>)
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064b6:	4b22      	ldr	r3, [pc, #136]	; (8006540 <HAL_ADC_MspInit+0x138>)
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	4a21      	ldr	r2, [pc, #132]	; (8006540 <HAL_ADC_MspInit+0x138>)
 80064bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064c0:	6153      	str	r3, [r2, #20]
 80064c2:	4b1f      	ldr	r3, [pc, #124]	; (8006540 <HAL_ADC_MspInit+0x138>)
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ca:	60bb      	str	r3, [r7, #8]
 80064cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BATT_SENSE_Pin;
 80064ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064d4:	2303      	movs	r3, #3
 80064d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d8:	2300      	movs	r3, #0
 80064da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_SENSE_GPIO_Port, &GPIO_InitStruct);
 80064dc:	f107 0314 	add.w	r3, r7, #20
 80064e0:	4619      	mov	r1, r3
 80064e2:	481b      	ldr	r0, [pc, #108]	; (8006550 <HAL_ADC_MspInit+0x148>)
 80064e4:	f004 fb7c 	bl	800abe0 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 80064e8:	4b1a      	ldr	r3, [pc, #104]	; (8006554 <HAL_ADC_MspInit+0x14c>)
 80064ea:	4a1b      	ldr	r2, [pc, #108]	; (8006558 <HAL_ADC_MspInit+0x150>)
 80064ec:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064ee:	4b19      	ldr	r3, [pc, #100]	; (8006554 <HAL_ADC_MspInit+0x14c>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80064f4:	4b17      	ldr	r3, [pc, #92]	; (8006554 <HAL_ADC_MspInit+0x14c>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80064fa:	4b16      	ldr	r3, [pc, #88]	; (8006554 <HAL_ADC_MspInit+0x14c>)
 80064fc:	2280      	movs	r2, #128	; 0x80
 80064fe:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006500:	4b14      	ldr	r3, [pc, #80]	; (8006554 <HAL_ADC_MspInit+0x14c>)
 8006502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006506:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006508:	4b12      	ldr	r3, [pc, #72]	; (8006554 <HAL_ADC_MspInit+0x14c>)
 800650a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800650e:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8006510:	4b10      	ldr	r3, [pc, #64]	; (8006554 <HAL_ADC_MspInit+0x14c>)
 8006512:	2220      	movs	r2, #32
 8006514:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8006516:	4b0f      	ldr	r3, [pc, #60]	; (8006554 <HAL_ADC_MspInit+0x14c>)
 8006518:	2200      	movs	r2, #0
 800651a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800651c:	480d      	ldr	r0, [pc, #52]	; (8006554 <HAL_ADC_MspInit+0x14c>)
 800651e:	f004 f9ab 	bl	800a878 <HAL_DMA_Init>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <HAL_ADC_MspInit+0x124>
      Error_Handler();
 8006528:	f7fd f9a8 	bl	800387c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a09      	ldr	r2, [pc, #36]	; (8006554 <HAL_ADC_MspInit+0x14c>)
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
 8006532:	4a08      	ldr	r2, [pc, #32]	; (8006554 <HAL_ADC_MspInit+0x14c>)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6253      	str	r3, [r2, #36]	; 0x24
}
 8006538:	bf00      	nop
 800653a:	3728      	adds	r7, #40	; 0x28
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40021000 	.word	0x40021000
 8006544:	2000245c 	.word	0x2000245c
 8006548:	40020008 	.word	0x40020008
 800654c:	50000500 	.word	0x50000500
 8006550:	48000400 	.word	0x48000400
 8006554:	200024a0 	.word	0x200024a0
 8006558:	4002041c 	.word	0x4002041c

0800655c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08a      	sub	sp, #40	; 0x28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006564:	f107 0314 	add.w	r3, r7, #20
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	605a      	str	r2, [r3, #4]
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	60da      	str	r2, [r3, #12]
 8006572:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a1b      	ldr	r2, [pc, #108]	; (80065e8 <HAL_CAN_MspInit+0x8c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d130      	bne.n	80065e0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800657e:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <HAL_CAN_MspInit+0x90>)
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	4a1a      	ldr	r2, [pc, #104]	; (80065ec <HAL_CAN_MspInit+0x90>)
 8006584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006588:	61d3      	str	r3, [r2, #28]
 800658a:	4b18      	ldr	r3, [pc, #96]	; (80065ec <HAL_CAN_MspInit+0x90>)
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006596:	4b15      	ldr	r3, [pc, #84]	; (80065ec <HAL_CAN_MspInit+0x90>)
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	4a14      	ldr	r2, [pc, #80]	; (80065ec <HAL_CAN_MspInit+0x90>)
 800659c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065a0:	6153      	str	r3, [r2, #20]
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <HAL_CAN_MspInit+0x90>)
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80065ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80065b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065b4:	2302      	movs	r3, #2
 80065b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b8:	2300      	movs	r3, #0
 80065ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065bc:	2303      	movs	r3, #3
 80065be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80065c0:	2309      	movs	r3, #9
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065c4:	f107 0314 	add.w	r3, r7, #20
 80065c8:	4619      	mov	r1, r3
 80065ca:	4809      	ldr	r0, [pc, #36]	; (80065f0 <HAL_CAN_MspInit+0x94>)
 80065cc:	f004 fb08 	bl	800abe0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 80065d0:	2200      	movs	r2, #0
 80065d2:	2105      	movs	r1, #5
 80065d4:	2014      	movs	r0, #20
 80065d6:	f004 f83b 	bl	800a650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80065da:	2014      	movs	r0, #20
 80065dc:	f004 f854 	bl	800a688 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80065e0:	bf00      	nop
 80065e2:	3728      	adds	r7, #40	; 0x28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40006400 	.word	0x40006400
 80065ec:	40021000 	.word	0x40021000
 80065f0:	48000400 	.word	0x48000400

080065f4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a0a      	ldr	r2, [pc, #40]	; (800662c <HAL_CRC_MspInit+0x38>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d10b      	bne.n	800661e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006606:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <HAL_CRC_MspInit+0x3c>)
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	4a09      	ldr	r2, [pc, #36]	; (8006630 <HAL_CRC_MspInit+0x3c>)
 800660c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006610:	6153      	str	r3, [r2, #20]
 8006612:	4b07      	ldr	r3, [pc, #28]	; (8006630 <HAL_CRC_MspInit+0x3c>)
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40023000 	.word	0x40023000
 8006630:	40021000 	.word	0x40021000

08006634 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08c      	sub	sp, #48	; 0x30
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800663c:	f107 031c 	add.w	r3, r7, #28
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	605a      	str	r2, [r3, #4]
 8006646:	609a      	str	r2, [r3, #8]
 8006648:	60da      	str	r2, [r3, #12]
 800664a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a2f      	ldr	r2, [pc, #188]	; (8006710 <HAL_I2C_MspInit+0xdc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d128      	bne.n	80066a8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006656:	4b2f      	ldr	r3, [pc, #188]	; (8006714 <HAL_I2C_MspInit+0xe0>)
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	4a2e      	ldr	r2, [pc, #184]	; (8006714 <HAL_I2C_MspInit+0xe0>)
 800665c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006660:	6153      	str	r3, [r2, #20]
 8006662:	4b2c      	ldr	r3, [pc, #176]	; (8006714 <HAL_I2C_MspInit+0xe0>)
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800666a:	61bb      	str	r3, [r7, #24]
 800666c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800666e:	23c0      	movs	r3, #192	; 0xc0
 8006670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006672:	2312      	movs	r3, #18
 8006674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006676:	2301      	movs	r3, #1
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800667a:	2303      	movs	r3, #3
 800667c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800667e:	2304      	movs	r3, #4
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006682:	f107 031c 	add.w	r3, r7, #28
 8006686:	4619      	mov	r1, r3
 8006688:	4823      	ldr	r0, [pc, #140]	; (8006718 <HAL_I2C_MspInit+0xe4>)
 800668a:	f004 faa9 	bl	800abe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800668e:	4b21      	ldr	r3, [pc, #132]	; (8006714 <HAL_I2C_MspInit+0xe0>)
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	4a20      	ldr	r2, [pc, #128]	; (8006714 <HAL_I2C_MspInit+0xe0>)
 8006694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006698:	61d3      	str	r3, [r2, #28]
 800669a:	4b1e      	ldr	r3, [pc, #120]	; (8006714 <HAL_I2C_MspInit+0xe0>)
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80066a6:	e02e      	b.n	8006706 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a1b      	ldr	r2, [pc, #108]	; (800671c <HAL_I2C_MspInit+0xe8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d129      	bne.n	8006706 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066b2:	4b18      	ldr	r3, [pc, #96]	; (8006714 <HAL_I2C_MspInit+0xe0>)
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	4a17      	ldr	r2, [pc, #92]	; (8006714 <HAL_I2C_MspInit+0xe0>)
 80066b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066bc:	6153      	str	r3, [r2, #20]
 80066be:	4b15      	ldr	r3, [pc, #84]	; (8006714 <HAL_I2C_MspInit+0xe0>)
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80066ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80066ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80066d0:	2312      	movs	r3, #18
 80066d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066d4:	2301      	movs	r3, #1
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80066d8:	2303      	movs	r3, #3
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80066dc:	2304      	movs	r3, #4
 80066de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066e0:	f107 031c 	add.w	r3, r7, #28
 80066e4:	4619      	mov	r1, r3
 80066e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066ea:	f004 fa79 	bl	800abe0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80066ee:	4b09      	ldr	r3, [pc, #36]	; (8006714 <HAL_I2C_MspInit+0xe0>)
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	4a08      	ldr	r2, [pc, #32]	; (8006714 <HAL_I2C_MspInit+0xe0>)
 80066f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066f8:	61d3      	str	r3, [r2, #28]
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <HAL_I2C_MspInit+0xe0>)
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
}
 8006706:	bf00      	nop
 8006708:	3730      	adds	r7, #48	; 0x30
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	40005400 	.word	0x40005400
 8006714:	40021000 	.word	0x40021000
 8006718:	48000400 	.word	0x48000400
 800671c:	40005800 	.word	0x40005800

08006720 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a0d      	ldr	r2, [pc, #52]	; (8006764 <HAL_RTC_MspInit+0x44>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d111      	bne.n	8006756 <HAL_RTC_MspInit+0x36>
 8006732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006736:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	fa93 f3a3 	rbit	r3, r3
 800673e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006740:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006742:	fab3 f383 	clz	r3, r3
 8006746:	b2db      	uxtb	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	4b07      	ldr	r3, [pc, #28]	; (8006768 <HAL_RTC_MspInit+0x48>)
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	461a      	mov	r2, r3
 8006752:	2301      	movs	r3, #1
 8006754:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40002800 	.word	0x40002800
 8006768:	10908100 	.word	0x10908100

0800676c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08a      	sub	sp, #40	; 0x28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006774:	f107 0314 	add.w	r3, r7, #20
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	605a      	str	r2, [r3, #4]
 800677e:	609a      	str	r2, [r3, #8]
 8006780:	60da      	str	r2, [r3, #12]
 8006782:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <HAL_SPI_MspInit+0x7c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d128      	bne.n	80067e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800678e:	4b17      	ldr	r3, [pc, #92]	; (80067ec <HAL_SPI_MspInit+0x80>)
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	4a16      	ldr	r2, [pc, #88]	; (80067ec <HAL_SPI_MspInit+0x80>)
 8006794:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006798:	6193      	str	r3, [r2, #24]
 800679a:	4b14      	ldr	r3, [pc, #80]	; (80067ec <HAL_SPI_MspInit+0x80>)
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067a6:	4b11      	ldr	r3, [pc, #68]	; (80067ec <HAL_SPI_MspInit+0x80>)
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	4a10      	ldr	r2, [pc, #64]	; (80067ec <HAL_SPI_MspInit+0x80>)
 80067ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b0:	6153      	str	r3, [r2, #20]
 80067b2:	4b0e      	ldr	r3, [pc, #56]	; (80067ec <HAL_SPI_MspInit+0x80>)
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80067be:	23e0      	movs	r3, #224	; 0xe0
 80067c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067c2:	2302      	movs	r3, #2
 80067c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80067ca:	2303      	movs	r3, #3
 80067cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80067ce:	2305      	movs	r3, #5
 80067d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067d2:	f107 0314 	add.w	r3, r7, #20
 80067d6:	4619      	mov	r1, r3
 80067d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067dc:	f004 fa00 	bl	800abe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80067e0:	bf00      	nop
 80067e2:	3728      	adds	r7, #40	; 0x28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40013000 	.word	0x40013000
 80067ec:	40021000 	.word	0x40021000

080067f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08c      	sub	sp, #48	; 0x30
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80067fc:	2300      	movs	r3, #0
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006800:	2200      	movs	r2, #0
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	2036      	movs	r0, #54	; 0x36
 8006806:	f003 ff23 	bl	800a650 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800680a:	2036      	movs	r0, #54	; 0x36
 800680c:	f003 ff3c 	bl	800a688 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006810:	4b1f      	ldr	r3, [pc, #124]	; (8006890 <HAL_InitTick+0xa0>)
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	4a1e      	ldr	r2, [pc, #120]	; (8006890 <HAL_InitTick+0xa0>)
 8006816:	f043 0310 	orr.w	r3, r3, #16
 800681a:	61d3      	str	r3, [r2, #28]
 800681c:	4b1c      	ldr	r3, [pc, #112]	; (8006890 <HAL_InitTick+0xa0>)
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006828:	f107 0210 	add.w	r2, r7, #16
 800682c:	f107 0314 	add.w	r3, r7, #20
 8006830:	4611      	mov	r1, r2
 8006832:	4618      	mov	r0, r3
 8006834:	f008 fabc 	bl	800edb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006838:	f008 fa98 	bl	800ed6c <HAL_RCC_GetPCLK1Freq>
 800683c:	4603      	mov	r3, r0
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	4a13      	ldr	r2, [pc, #76]	; (8006894 <HAL_InitTick+0xa4>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	0c9b      	lsrs	r3, r3, #18
 800684c:	3b01      	subs	r3, #1
 800684e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006850:	4b11      	ldr	r3, [pc, #68]	; (8006898 <HAL_InitTick+0xa8>)
 8006852:	4a12      	ldr	r2, [pc, #72]	; (800689c <HAL_InitTick+0xac>)
 8006854:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006856:	4b10      	ldr	r3, [pc, #64]	; (8006898 <HAL_InitTick+0xa8>)
 8006858:	f240 32e7 	movw	r2, #999	; 0x3e7
 800685c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800685e:	4a0e      	ldr	r2, [pc, #56]	; (8006898 <HAL_InitTick+0xa8>)
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006864:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <HAL_InitTick+0xa8>)
 8006866:	2200      	movs	r2, #0
 8006868:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800686a:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <HAL_InitTick+0xa8>)
 800686c:	2200      	movs	r2, #0
 800686e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006870:	4809      	ldr	r0, [pc, #36]	; (8006898 <HAL_InitTick+0xa8>)
 8006872:	f009 f85c 	bl	800f92e <HAL_TIM_Base_Init>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d104      	bne.n	8006886 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800687c:	4806      	ldr	r0, [pc, #24]	; (8006898 <HAL_InitTick+0xa8>)
 800687e:	f009 f8b7 	bl	800f9f0 <HAL_TIM_Base_Start_IT>
 8006882:	4603      	mov	r3, r0
 8006884:	e000      	b.n	8006888 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
}
 8006888:	4618      	mov	r0, r3
 800688a:	3730      	adds	r7, #48	; 0x30
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40021000 	.word	0x40021000
 8006894:	431bde83 	.word	0x431bde83
 8006898:	20002694 	.word	0x20002694
 800689c:	40001000 	.word	0x40001000

080068a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  __NOP();
 80068a4:	bf00      	nop
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80068a6:	bf00      	nop
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80068b4:	e7fe      	b.n	80068b4 <HardFault_Handler+0x4>

080068b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068b6:	b480      	push	{r7}
 80068b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80068ba:	e7fe      	b.n	80068ba <MemManage_Handler+0x4>

080068bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80068c0:	e7fe      	b.n	80068c0 <BusFault_Handler+0x4>

080068c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80068c2:	b480      	push	{r7}
 80068c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068c6:	e7fe      	b.n	80068c6 <UsageFault_Handler+0x4>

080068c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068cc:	bf00      	nop
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80068dc:	4802      	ldr	r0, [pc, #8]	; (80068e8 <DMA1_Channel1_IRQHandler+0x10>)
 80068de:	f004 f871 	bl	800a9c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80068e2:	bf00      	nop
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	2000245c 	.word	0x2000245c

080068ec <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80068f0:	4802      	ldr	r0, [pc, #8]	; (80068fc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80068f2:	f003 fbc5 	bl	800a080 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80068f6:	bf00      	nop
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	200024e4 	.word	0x200024e4

08006900 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006904:	4802      	ldr	r0, [pc, #8]	; (8006910 <TIM6_DAC_IRQHandler+0x10>)
 8006906:	f009 f8dd 	bl	800fac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800690a:	bf00      	nop
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20002694 	.word	0x20002694

08006914 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8006918:	4802      	ldr	r0, [pc, #8]	; (8006924 <DMA2_Channel2_IRQHandler+0x10>)
 800691a:	f004 f853 	bl	800a9c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800691e:	bf00      	nop
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	200024a0 	.word	0x200024a0

08006928 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800692c:	4802      	ldr	r0, [pc, #8]	; (8006938 <USB_LP_IRQHandler+0x10>)
 800692e:	f005 fbc4 	bl	800c0ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8006932:	bf00      	nop
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20004e28 	.word	0x20004e28

0800693c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006948:	2300      	movs	r3, #0
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	e00a      	b.n	8006964 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800694e:	f3af 8000 	nop.w
 8006952:	4601      	mov	r1, r0
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	60ba      	str	r2, [r7, #8]
 800695a:	b2ca      	uxtb	r2, r1
 800695c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	3301      	adds	r3, #1
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	429a      	cmp	r2, r3
 800696a:	dbf0      	blt.n	800694e <_read+0x12>
	}

return len;
 800696c:	687b      	ldr	r3, [r7, #4]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <_close>:
	}
	return len;
}

int _close(int file)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
	return -1;
 800697e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006982:	4618      	mov	r0, r3
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800699e:	605a      	str	r2, [r3, #4]
	return 0;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <_isatty>:

int _isatty(int file)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
	return 1;
 80069b6:	2301      	movs	r3, #1
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
	return 0;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
	...

080069e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80069e8:	4a14      	ldr	r2, [pc, #80]	; (8006a3c <_sbrk+0x5c>)
 80069ea:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <_sbrk+0x60>)
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80069f4:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <_sbrk+0x64>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80069fc:	4b11      	ldr	r3, [pc, #68]	; (8006a44 <_sbrk+0x64>)
 80069fe:	4a12      	ldr	r2, [pc, #72]	; (8006a48 <_sbrk+0x68>)
 8006a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a02:	4b10      	ldr	r3, [pc, #64]	; (8006a44 <_sbrk+0x64>)
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4413      	add	r3, r2
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d207      	bcs.n	8006a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a10:	f010 fae6 	bl	8016fe0 <__errno>
 8006a14:	4603      	mov	r3, r0
 8006a16:	220c      	movs	r2, #12
 8006a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1e:	e009      	b.n	8006a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a20:	4b08      	ldr	r3, [pc, #32]	; (8006a44 <_sbrk+0x64>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a26:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <_sbrk+0x64>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	4a05      	ldr	r2, [pc, #20]	; (8006a44 <_sbrk+0x64>)
 8006a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a32:	68fb      	ldr	r3, [r7, #12]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	2000a000 	.word	0x2000a000
 8006a40:	00000400 	.word	0x00000400
 8006a44:	200026e0 	.word	0x200026e0
 8006a48:	20005348 	.word	0x20005348

08006a4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a50:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <SystemInit+0x28>)
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a56:	4a07      	ldr	r2, [pc, #28]	; (8006a74 <SystemInit+0x28>)
 8006a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a60:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <SystemInit+0x28>)
 8006a62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a66:	609a      	str	r2, [r3, #8]
#endif
}
 8006a68:	bf00      	nop
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	e000ed00 	.word	0xe000ed00

08006a78 <EvaluateVirtInput>:
 */

#include "virtual_input.h"

void EvaluateVirtInput(PdmConfig_VirtualInput_t *pIn, uint16_t* pResult)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  if(!pIn->nEnabled)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 80be 	beq.w	8006c08 <EvaluateVirtInput+0x190>
    return;
  if((pIn->pVar0 == 0) || (pIn->pVar1 == 0))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80bb 	beq.w	8006c0c <EvaluateVirtInput+0x194>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 80b6 	beq.w	8006c0c <EvaluateVirtInput+0x194>
    return;

  uint8_t nResult0, nResult1, nResult2, nResultSec0;

  nResult0 = *pIn->pVar0;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	73fb      	strb	r3, [r7, #15]
  if(pIn->nNot0)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d006      	beq.n	8006abe <EvaluateVirtInput+0x46>
    nResult0 = !nResult0;
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bf0c      	ite	eq
 8006ab6:	2301      	moveq	r3, #1
 8006ab8:	2300      	movne	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	73fb      	strb	r3, [r7, #15]

  nResult1 = *pIn->pVar1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	73bb      	strb	r3, [r7, #14]
  if(pIn->nNot1)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	7a5b      	ldrb	r3, [r3, #9]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d006      	beq.n	8006adc <EvaluateVirtInput+0x64>
    nResult1 = !nResult1;
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bf0c      	ite	eq
 8006ad4:	2301      	moveq	r3, #1
 8006ad6:	2300      	movne	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	73bb      	strb	r3, [r7, #14]

  switch(pIn->eCond0)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	7a1b      	ldrb	r3, [r3, #8]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d01c      	beq.n	8006b1e <EvaluateVirtInput+0xa6>
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	dc25      	bgt.n	8006b34 <EvaluateVirtInput+0xbc>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <EvaluateVirtInput+0x7a>
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d00b      	beq.n	8006b08 <EvaluateVirtInput+0x90>
 8006af0:	e020      	b.n	8006b34 <EvaluateVirtInput+0xbc>
  {
  case COND_AND:
    nResultSec0 = nResult0 && nResult1;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <EvaluateVirtInput+0x8a>
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <EvaluateVirtInput+0x8a>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e000      	b.n	8006b04 <EvaluateVirtInput+0x8c>
 8006b02:	2300      	movs	r3, #0
 8006b04:	733b      	strb	r3, [r7, #12]
    break;
 8006b06:	e015      	b.n	8006b34 <EvaluateVirtInput+0xbc>
  case COND_OR:
    nResultSec0 = nResult0 || nResult1;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d102      	bne.n	8006b14 <EvaluateVirtInput+0x9c>
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <EvaluateVirtInput+0xa0>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e000      	b.n	8006b1a <EvaluateVirtInput+0xa2>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	733b      	strb	r3, [r7, #12]
    break;
 8006b1c:	e00a      	b.n	8006b34 <EvaluateVirtInput+0xbc>
  case COND_NOR:
    nResultSec0 = !nResult0 || !nResult1;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <EvaluateVirtInput+0xb2>
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <EvaluateVirtInput+0xb6>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <EvaluateVirtInput+0xb8>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	733b      	strb	r3, [r7, #12]
    break;
 8006b32:	bf00      	nop
  }

  //Only 2 conditions
  if(pIn->nVar2 == 0)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	7c9b      	ldrb	r3, [r3, #18]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10c      	bne.n	8006b56 <EvaluateVirtInput+0xde>
  {
    CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0, pResult, NO_DEBOUNCE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f103 001c 	add.w	r0, r3, #28
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	7e19      	ldrb	r1, [r3, #24]
 8006b46:	7b3b      	ldrb	r3, [r7, #12]
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	f001 f848 	bl	8007be4 <CheckPushbutton>
    return;
 8006b54:	e05b      	b.n	8006c0e <EvaluateVirtInput+0x196>
  }
  else
  {
    nResult2 = *pIn->pVar2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	737b      	strb	r3, [r7, #13]
    if(pIn->nNot2)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	7c5b      	ldrb	r3, [r3, #17]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d006      	beq.n	8006b74 <EvaluateVirtInput+0xfc>
      nResult2 = !nResult2;
 8006b66:	7b7b      	ldrb	r3, [r7, #13]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	bf0c      	ite	eq
 8006b6c:	2301      	moveq	r3, #1
 8006b6e:	2300      	movne	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	737b      	strb	r3, [r7, #13]

    switch(pIn->eCond0)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	7a1b      	ldrb	r3, [r3, #8]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d030      	beq.n	8006bde <EvaluateVirtInput+0x166>
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	dc46      	bgt.n	8006c0e <EvaluateVirtInput+0x196>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <EvaluateVirtInput+0x112>
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d015      	beq.n	8006bb4 <EvaluateVirtInput+0x13c>
 8006b88:	e041      	b.n	8006c0e <EvaluateVirtInput+0x196>
    {
    case COND_AND:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0 && nResult2, pResult, NO_DEBOUNCE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f103 001c 	add.w	r0, r3, #28
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	7e19      	ldrb	r1, [r3, #24]
 8006b94:	7b3b      	ldrb	r3, [r7, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d004      	beq.n	8006ba4 <EvaluateVirtInput+0x12c>
 8006b9a:	7b7b      	ldrb	r3, [r7, #13]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <EvaluateVirtInput+0x12c>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <EvaluateVirtInput+0x12e>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	2300      	movs	r3, #0
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	f001 f819 	bl	8007be4 <CheckPushbutton>
      return;
 8006bb2:	e02c      	b.n	8006c0e <EvaluateVirtInput+0x196>
    case COND_OR:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, nResultSec0 || nResult2, pResult, NO_DEBOUNCE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f103 001c 	add.w	r0, r3, #28
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	7e19      	ldrb	r1, [r3, #24]
 8006bbe:	7b3b      	ldrb	r3, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <EvaluateVirtInput+0x152>
 8006bc4:	7b7b      	ldrb	r3, [r7, #13]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <EvaluateVirtInput+0x156>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <EvaluateVirtInput+0x158>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	f001 f804 	bl	8007be4 <CheckPushbutton>
      return;
 8006bdc:	e017      	b.n	8006c0e <EvaluateVirtInput+0x196>
    case COND_NOR:
      CheckPushbutton(&pIn->ePbConfig, pIn->eMode, !nResultSec0 || !nResult2, pResult, NO_DEBOUNCE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f103 001c 	add.w	r0, r3, #28
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7e19      	ldrb	r1, [r3, #24]
 8006be8:	7b3b      	ldrb	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <EvaluateVirtInput+0x17c>
 8006bee:	7b7b      	ldrb	r3, [r7, #13]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <EvaluateVirtInput+0x180>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e000      	b.n	8006bfa <EvaluateVirtInput+0x182>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	f000 ffef 	bl	8007be4 <CheckPushbutton>
      return;
 8006c06:	e002      	b.n	8006c0e <EvaluateVirtInput+0x196>
    return;
 8006c08:	bf00      	nop
 8006c0a:	e000      	b.n	8006c0e <EvaluateVirtInput+0x196>
    return;
 8006c0c:	bf00      	nop
    }
  }

}
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006c18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006c1a:	e003      	b.n	8006c24 <LoopCopyDataInit>

08006c1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006c1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006c20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006c22:	3104      	adds	r1, #4

08006c24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006c24:	480b      	ldr	r0, [pc, #44]	; (8006c54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006c26:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006c28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006c2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006c2c:	d3f6      	bcc.n	8006c1c <CopyDataInit>
	ldr	r2, =_sbss
 8006c2e:	4a0b      	ldr	r2, [pc, #44]	; (8006c5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8006c30:	e002      	b.n	8006c38 <LoopFillZerobss>

08006c32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006c32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006c34:	f842 3b04 	str.w	r3, [r2], #4

08006c38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006c38:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <LoopForever+0x16>)
	cmp	r2, r3
 8006c3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006c3c:	d3f9      	bcc.n	8006c32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006c3e:	f7ff ff05 	bl	8006a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c42:	f010 f9d3 	bl	8016fec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006c46:	f7fc f999 	bl	8002f7c <main>

08006c4a <LoopForever>:

LoopForever:
    b LoopForever
 8006c4a:	e7fe      	b.n	8006c4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006c4c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8006c50:	08018264 	.word	0x08018264
	ldr	r0, =_sdata
 8006c54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006c58:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8006c5c:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8006c60:	20005344 	.word	0x20005344

08006c64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006c64:	e7fe      	b.n	8006c64 <ADC1_2_IRQHandler>
	...

08006c68 <ADS1x15_SendRegs>:
 */

#include "ads1x15.h"

void ADS1x15_SendRegs(I2C_HandleTypeDef* hi2c, uint16_t addr, ads1x15Settings_t *settings, uint8_t channel)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	607a      	str	r2, [r7, #4]
 8006c72:	461a      	mov	r2, r3
 8006c74:	460b      	mov	r3, r1
 8006c76:	817b      	strh	r3, [r7, #10]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	727b      	strb	r3, [r7, #9]
	if(channel > 3) return;
 8006c7c:	7a7b      	ldrb	r3, [r7, #9]
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d859      	bhi.n	8006d36 <ADS1x15_SendRegs+0xce>

	uint16_t config =
 8006c82:	f240 1303 	movw	r3, #259	; 0x103
 8006c86:	82fb      	strh	r3, [r7, #22]
				ADS1015_REG_CONFIG_CLAT_NONLAT |  // Non-latching (default val)
				ADS1015_REG_CONFIG_CPOL_ACTVLOW | // Alert/Rdy active low   (default val)
				ADS1015_REG_CONFIG_CMODE_TRAD |   // Traditional comparator (default val)
				ADS1015_REG_CONFIG_MODE_SINGLE;

	config |= settings->dataRate;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	791b      	ldrb	r3, [r3, #4]
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	8afb      	ldrh	r3, [r7, #22]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	82fb      	strh	r3, [r7, #22]
	config |= settings->gain;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	885a      	ldrh	r2, [r3, #2]
 8006c98:	8afb      	ldrh	r3, [r7, #22]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	82fb      	strh	r3, [r7, #22]

	switch(channel){
 8006c9e:	7a7b      	ldrb	r3, [r7, #9]
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d81f      	bhi.n	8006ce4 <ADS1x15_SendRegs+0x7c>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <ADS1x15_SendRegs+0x44>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006cc7 	.word	0x08006cc7
 8006cb4:	08006cd1 	.word	0x08006cd1
 8006cb8:	08006cdb 	.word	0x08006cdb
	case (0):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8006cbc:	8afb      	ldrh	r3, [r7, #22]
 8006cbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cc2:	82fb      	strh	r3, [r7, #22]
		break;
 8006cc4:	e00e      	b.n	8006ce4 <ADS1x15_SendRegs+0x7c>
	case (1):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8006cc6:	8afb      	ldrh	r3, [r7, #22]
 8006cc8:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8006ccc:	82fb      	strh	r3, [r7, #22]
		break;
 8006cce:	e009      	b.n	8006ce4 <ADS1x15_SendRegs+0x7c>
	case (2):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8006cd0:	8afb      	ldrh	r3, [r7, #22]
 8006cd2:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8006cd6:	82fb      	strh	r3, [r7, #22]
		break;
 8006cd8:	e004      	b.n	8006ce4 <ADS1x15_SendRegs+0x7c>
	case (3):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8006cda:	8afb      	ldrh	r3, [r7, #22]
 8006cdc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006ce0:	82fb      	strh	r3, [r7, #22]
		break;
 8006ce2:	bf00      	nop
	}

	config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8006ce4:	8afb      	ldrh	r3, [r7, #22]
 8006ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cee:	82fb      	strh	r3, [r7, #22]

	uint8_t writeVals[3];

	writeVals[0] = ADS1015_REG_POINTER_CONFIG;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	743b      	strb	r3, [r7, #16]
	writeVals[1] = config >> 8;
 8006cf4:	8afb      	ldrh	r3, [r7, #22]
 8006cf6:	0a1b      	lsrs	r3, r3, #8
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	747b      	strb	r3, [r7, #17]
	writeVals[2] = config & 0xFF;
 8006cfe:	8afb      	ldrh	r3, [r7, #22]
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	74bb      	strb	r3, [r7, #18]

	HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, 100);
 8006d04:	897b      	ldrh	r3, [r7, #10]
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	b299      	uxth	r1, r3
 8006d0a:	f107 0210 	add.w	r2, r7, #16
 8006d0e:	2364      	movs	r3, #100	; 0x64
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	2303      	movs	r3, #3
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f004 f985 	bl	800b024 <HAL_I2C_Master_Transmit>

	//Send convert register
	writeVals[0] = ADS1015_REG_POINTER_CONVERT;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	743b      	strb	r3, [r7, #16]

  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, 100);
 8006d1e:	897b      	ldrh	r3, [r7, #10]
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	b299      	uxth	r1, r3
 8006d24:	f107 0210 	add.w	r2, r7, #16
 8006d28:	2364      	movs	r3, #100	; 0x64
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f004 f978 	bl	800b024 <HAL_I2C_Master_Transmit>
 8006d34:	e000      	b.n	8006d38 <ADS1x15_SendRegs+0xd0>
	if(channel > 3) return;
 8006d36:	bf00      	nop
}
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop

08006d40 <ADS1x15_ReadADC>:

uint16_t ADS1x15_ReadADC(I2C_HandleTypeDef* hi2c, uint16_t addr, ads1x15Settings_t *settings)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	817b      	strh	r3, [r7, #10]
  //Read received values
	uint8_t readVals[2];

	//Msg received - comms OK
	settings->commsOk = 1;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	719a      	strb	r2, [r3, #6]

	HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 2, 100);
 8006d54:	897b      	ldrh	r3, [r7, #10]
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	b299      	uxth	r1, r3
 8006d5a:	f107 0214 	add.w	r2, r7, #20
 8006d5e:	2364      	movs	r3, #100	; 0x64
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	2302      	movs	r3, #2
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f004 fa51 	bl	800b20c <HAL_I2C_Master_Receive>

	uint16_t valRead = (readVals[0] << 8 | readVals[1]) >> settings->bitShift;
 8006d6a:	7d3b      	ldrb	r3, [r7, #20]
 8006d6c:	021b      	lsls	r3, r3, #8
 8006d6e:	7d7a      	ldrb	r2, [r7, #21]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	7952      	ldrb	r2, [r2, #5]
 8006d76:	4113      	asrs	r3, r2
 8006d78:	82fb      	strh	r3, [r7, #22]

	if (settings->deviceType == ADS1115) {
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <ADS1x15_ReadADC+0x46>
	  return valRead;
 8006d82:	8afb      	ldrh	r3, [r7, #22]
 8006d84:	e00a      	b.n	8006d9c <ADS1x15_ReadADC+0x5c>
  }
	else {
    // Shift 12-bit results right 4 bits for the ADS1015,
    // making sure we keep the sign bit intact
    if (valRead > 0x07FF) {
 8006d86:	8afb      	ldrh	r3, [r7, #22]
 8006d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d8c:	d305      	bcc.n	8006d9a <ADS1x15_ReadADC+0x5a>
      // negative number - extend the sign to 16th bit
      valRead |= 0xF000;
 8006d8e:	8afb      	ldrh	r3, [r7, #22]
 8006d90:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8006d94:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8006d98:	82fb      	strh	r3, [r7, #22]
    }
    return valRead;
 8006d9a:	8afb      	ldrh	r3, [r7, #22]
  }
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <CANBoardCheckConnection>:
  rx->nHeartbeat = msg[7];
  rx->nLastHeartbeatTime = HAL_GetTick();
}

void CANBoardCheckConnection(volatile CANBoard_RX_t* rx)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  if( (rx->nHeartbeat == rx->nLastHeartbeat) &&
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d10c      	bne.n	8006dda <CANBoardCheckConnection+0x36>
      ((HAL_GetTick() - rx->nLastHeartbeatTime) > (CANBOARD_TX_DELAY * 4)))
 8006dc0:	f001 fd0e 	bl	80087e0 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	1ad3      	subs	r3, r2, r3
  if( (rx->nHeartbeat == rx->nLastHeartbeat) &&
 8006dcc:	2bc8      	cmp	r3, #200	; 0xc8
 8006dce:	d904      	bls.n	8006dda <CANBoardCheckConnection+0x36>
  {
    rx->nConnected = 0;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006dd8:	e003      	b.n	8006de2 <CANBoardCheckConnection+0x3e>
  }
  else
  {
    rx->nConnected = 1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }
  rx->nLastHeartbeat = rx->nHeartbeat;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <MB85RC_GetId>:
 */

#include "mb85rc.h"

void MB85RC_GetId(I2C_HandleTypeDef* hi2c, uint8_t nAddr, uint16_t* nManufId, uint16_t* nProdId)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	; 0x28
 8006dfc:	af04      	add	r7, sp, #16
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	607a      	str	r2, [r7, #4]
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	460b      	mov	r3, r1
 8006e06:	72fb      	strb	r3, [r7, #11]
  uint8_t nReadVals[3];

  HAL_I2C_Mem_Read(hi2c, MB85RC_SLAVE_ID, nAddr << 1, I2C_MEMADD_SIZE_8BIT, &nReadVals[0], 3, 100);
 8006e08:	7afb      	ldrb	r3, [r7, #11]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	2364      	movs	r3, #100	; 0x64
 8006e12:	9302      	str	r3, [sp, #8]
 8006e14:	2303      	movs	r3, #3
 8006e16:	9301      	str	r3, [sp, #4]
 8006e18:	f107 0314 	add.w	r3, r7, #20
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	2301      	movs	r3, #1
 8006e20:	21f8      	movs	r1, #248	; 0xf8
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f004 fbfc 	bl	800b620 <HAL_I2C_Mem_Read>

  *nManufId = (nReadVals[0] << 4) + (nReadVals[1] >> 4);
 8006e28:	7d3b      	ldrb	r3, [r7, #20]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	7d7b      	ldrb	r3, [r7, #21]
 8006e32:	091b      	lsrs	r3, r3, #4
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	4413      	add	r3, r2
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	801a      	strh	r2, [r3, #0]
  *nProdId = ((nReadVals[1] & 0x0F) << 8) + nReadVals[2];
 8006e40:	7d7b      	ldrb	r3, [r7, #21]
 8006e42:	021b      	lsls	r3, r3, #8
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	7dbb      	ldrb	r3, [r7, #22]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	4413      	add	r3, r2
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	801a      	strh	r2, [r3, #0]
}
 8006e58:	bf00      	nop
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <MB85RC_CheckId>:

uint8_t MB85RC_CheckId(I2C_HandleTypeDef* hi2c, uint8_t nAddr)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
  uint16_t nManufId, nProdId;

  MB85RC_GetId(hi2c, nAddr, &nManufId, &nProdId);
 8006e6c:	f107 030c 	add.w	r3, r7, #12
 8006e70:	f107 020e 	add.w	r2, r7, #14
 8006e74:	78f9      	ldrb	r1, [r7, #3]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7ff ffbe 	bl	8006df8 <MB85RC_GetId>

  if(nManufId != MB85RC_MANUF_ID)
 8006e7c:	89fb      	ldrh	r3, [r7, #14]
 8006e7e:	2b0a      	cmp	r3, #10
 8006e80:	d001      	beq.n	8006e86 <MB85RC_CheckId+0x26>
    return 0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	e006      	b.n	8006e94 <MB85RC_CheckId+0x34>
  if(nProdId != MB85RC_PROD_ID)
 8006e86:	89bb      	ldrh	r3, [r7, #12]
 8006e88:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 8006e8c:	d001      	beq.n	8006e92 <MB85RC_CheckId+0x32>
    return 0;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e000      	b.n	8006e94 <MB85RC_CheckId+0x34>

  return 1;
 8006e92:	2301      	movs	r3, #1
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <MB85RC_Read>:

void MB85RC_Read(I2C_HandleTypeDef* hi2c, uint8_t nAddr, uint16_t nMemAddr, uint8_t* pData, uint16_t nByteLen)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af04      	add	r7, sp, #16
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	607b      	str	r3, [r7, #4]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	72fb      	strb	r3, [r7, #11]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(hi2c, nAddr << 1, (uint16_t)nMemAddr, I2C_MEMADD_SIZE_16BIT, pData, nByteLen, HAL_MAX_DELAY);
 8006eae:	7afb      	ldrb	r3, [r7, #11]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	b299      	uxth	r1, r3
 8006eb6:	893a      	ldrh	r2, [r7, #8]
 8006eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ebc:	9302      	str	r3, [sp, #8]
 8006ebe:	8b3b      	ldrh	r3, [r7, #24]
 8006ec0:	9301      	str	r3, [sp, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f004 fba9 	bl	800b620 <HAL_I2C_Mem_Read>
}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <MB85RC_Write>:

void MB85RC_Write(I2C_HandleTypeDef* hi2c, uint8_t nAddr, uint16_t nMemAddr, uint8_t* nMemVals, uint16_t nByteLen)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b088      	sub	sp, #32
 8006eda:	af04      	add	r7, sp, #16
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	607b      	str	r3, [r7, #4]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	72fb      	strb	r3, [r7, #11]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(hi2c, nAddr << 1, (uint16_t)nMemAddr, I2C_MEMADD_SIZE_16BIT, nMemVals, nByteLen, HAL_MAX_DELAY);
 8006ee8:	7afb      	ldrb	r3, [r7, #11]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	b299      	uxth	r1, r3
 8006ef0:	893a      	ldrh	r2, [r7, #8]
 8006ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef6:	9302      	str	r3, [sp, #8]
 8006ef8:	8b3b      	ldrh	r3, [r7, #24]
 8006efa:	9301      	str	r3, [sp, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	2302      	movs	r3, #2
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f004 fa78 	bl	800b3f8 <HAL_I2C_Mem_Write>
}
 8006f08:	bf00      	nop
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <MCP9808_Init>:
#include "mcp9808.h"

uint8_t MCP9808_Overtemp, MCP9808_Undertemp, MCP9808_CriticalTemp;

uint8_t MCP9808_Init(I2C_HandleTypeDef* hi2c, uint16_t addr)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	807b      	strh	r3, [r7, #2]
  if(MCP9808_Read16(hi2c, addr, MCP9808_REG_MANUF_ID) != 0x0054)
 8006f1c:	887b      	ldrh	r3, [r7, #2]
 8006f1e:	2206      	movs	r2, #6
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f989 	bl	800723a <MCP9808_Read16>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b54      	cmp	r3, #84	; 0x54
 8006f2c:	d001      	beq.n	8006f32 <MCP9808_Init+0x22>
    return 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e015      	b.n	8006f5e <MCP9808_Init+0x4e>
  if(MCP9808_Read16(hi2c, addr, MCP9808_REG_DEVICE_ID) != 0x0400)
 8006f32:	887b      	ldrh	r3, [r7, #2]
 8006f34:	2207      	movs	r2, #7
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f97e 	bl	800723a <MCP9808_Read16>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f44:	d001      	beq.n	8006f4a <MCP9808_Init+0x3a>
    return 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e009      	b.n	8006f5e <MCP9808_Init+0x4e>
  //B6 = 0 (Tupper Tlower window unlocked)
  //B7 = 0 (Tcrit unlocked)
  //B8 = 0 (continous conversion)
  //B9-10 = 01 (Tupper Tlower hysterisis +1.5 deg C)
  //B11-15 = 00000 (not used)
  uint16_t config = (MCP9808_REG_CONFIG_ALERTCTRL | MCP9808_REG_CONFIG_HYST_1_5);
 8006f4a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f4e:	81fb      	strh	r3, [r7, #14]
  MCP9808_Write16(hi2c, addr, MCP9808_REG_CONFIG, config);
 8006f50:	89fb      	ldrh	r3, [r7, #14]
 8006f52:	8879      	ldrh	r1, [r7, #2]
 8006f54:	2201      	movs	r2, #1
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f948 	bl	80071ec <MCP9808_Write16>
  return 1;
 8006f5c:	2301      	movs	r3, #1
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <MCP9808_ReadTempC>:

float MCP9808_ReadTempC(I2C_HandleTypeDef* hi2c, uint16_t addr)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	807b      	strh	r3, [r7, #2]
  float temp = 0.0;
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
  uint16_t t = MCP9808_Read16(hi2c, addr, MCP9808_REG_AMBIENT_TEMP);
 8006f7a:	887b      	ldrh	r3, [r7, #2]
 8006f7c:	2205      	movs	r2, #5
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f95a 	bl	800723a <MCP9808_Read16>
 8006f86:	4603      	mov	r3, r0
 8006f88:	817b      	strh	r3, [r7, #10]

  MCP9808_MapLimitBits(t);
 8006f8a:	897b      	ldrh	r3, [r7, #10]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 f905 	bl	800719c <MCP9808_MapLimitBits>

  if (t != 0xFFFF) {
 8006f92:	897b      	ldrh	r3, [r7, #10]
 8006f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d01d      	beq.n	8006fd8 <MCP9808_ReadTempC+0x70>
    temp = t & 0x0FFF;
 8006f9c:	897b      	ldrh	r3, [r7, #10]
 8006f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006faa:	edc7 7a03 	vstr	s15, [r7, #12]
    temp /= 16.0;
 8006fae:	ed97 7a03 	vldr	s14, [r7, #12]
 8006fb2:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8006fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006fba:	edc7 7a03 	vstr	s15, [r7, #12]
    if (t & 0x1000)
 8006fbe:	897b      	ldrh	r3, [r7, #10]
 8006fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d007      	beq.n	8006fd8 <MCP9808_ReadTempC+0x70>
      temp -= 256;
 8006fc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fcc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006fe8 <MCP9808_ReadTempC+0x80>
 8006fd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fd4:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  return temp;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	ee07 3a90 	vmov	s15, r3
}
 8006fde:	eeb0 0a67 	vmov.f32	s0, s15
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	43800000 	.word	0x43800000

08006fec <MCP9808_ConvertToF>:
  }

  return temp;
}

float MCP9808_ConvertToF(float degC){
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	ed87 0a01 	vstr	s0, [r7, #4]
  return degC * 9.0 / 5.0 + 32;
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7f9 fa4e 	bl	8000498 <__aeabi_f2d>
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	4b11      	ldr	r3, [pc, #68]	; (8007048 <MCP9808_ConvertToF+0x5c>)
 8007002:	f7f9 faa1 	bl	8000548 <__aeabi_dmul>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4610      	mov	r0, r2
 800700c:	4619      	mov	r1, r3
 800700e:	f04f 0200 	mov.w	r2, #0
 8007012:	4b0e      	ldr	r3, [pc, #56]	; (800704c <MCP9808_ConvertToF+0x60>)
 8007014:	f7f9 fbc2 	bl	800079c <__aeabi_ddiv>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4610      	mov	r0, r2
 800701e:	4619      	mov	r1, r3
 8007020:	f04f 0200 	mov.w	r2, #0
 8007024:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <MCP9808_ConvertToF+0x64>)
 8007026:	f7f9 f8d9 	bl	80001dc <__adddf3>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4610      	mov	r0, r2
 8007030:	4619      	mov	r1, r3
 8007032:	f7f9 fcbb 	bl	80009ac <__aeabi_d2f>
 8007036:	4603      	mov	r3, r0
 8007038:	ee07 3a90 	vmov	s15, r3
}
 800703c:	eeb0 0a67 	vmov.f32	s0, s15
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	40220000 	.word	0x40220000
 800704c:	40140000 	.word	0x40140000
 8007050:	40400000 	.word	0x40400000

08007054 <MCP9808_SetResolution>:
{
  return MCP9808_Read8(hi2c, addr, MCP9808_REG_RESOLUTION);
}

void MCP9808_SetResolution(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t val)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	807b      	strh	r3, [r7, #2]
 8007060:	4613      	mov	r3, r2
 8007062:	707b      	strb	r3, [r7, #1]
  MCP9808_Write8(hi2c, addr, MCP9808_REG_RESOLUTION, val);
 8007064:	787b      	ldrb	r3, [r7, #1]
 8007066:	b29b      	uxth	r3, r3
 8007068:	8879      	ldrh	r1, [r7, #2]
 800706a:	2208      	movs	r2, #8
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f916 	bl	800729e <MCP9808_Write8>
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <MCP9808_SetLimit>:
  conf_shutdown = conf_register & ~MCP9808_REG_CONFIG_SHUTDOWN;
  MCP9808_Write16(hi2c, addr, MCP9808_REG_CONFIG, conf_shutdown);
}

uint8_t MCP9808_SetLimit(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, float val)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	460b      	mov	r3, r1
 8007086:	ed87 0a01 	vstr	s0, [r7, #4]
 800708a:	817b      	strh	r3, [r7, #10]
 800708c:	4613      	mov	r3, r2
 800708e:	727b      	strb	r3, [r7, #9]
  uint16_t newVal = val * 16.0;
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7f9 fa01 	bl	8000498 <__aeabi_f2d>
 8007096:	f04f 0200 	mov.w	r2, #0
 800709a:	4b23      	ldr	r3, [pc, #140]	; (8007128 <MCP9808_SetLimit+0xac>)
 800709c:	f7f9 fa54 	bl	8000548 <__aeabi_dmul>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4610      	mov	r0, r2
 80070a6:	4619      	mov	r1, r3
 80070a8:	f7f9 fc60 	bl	800096c <__aeabi_d2uiz>
 80070ac:	4603      	mov	r3, r0
 80070ae:	82fb      	strh	r3, [r7, #22]
  if(val < 0)
 80070b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80070b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070bc:	d503      	bpl.n	80070c6 <MCP9808_SetLimit+0x4a>
    newVal += 256;
 80070be:	8afb      	ldrh	r3, [r7, #22]
 80070c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80070c4:	82fb      	strh	r3, [r7, #22]
  MCP9808_Write16(hi2c, addr, reg, val * 16.0);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7f9 f9e6 	bl	8000498 <__aeabi_f2d>
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	4b15      	ldr	r3, [pc, #84]	; (8007128 <MCP9808_SetLimit+0xac>)
 80070d2:	f7f9 fa39 	bl	8000548 <__aeabi_dmul>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4610      	mov	r0, r2
 80070dc:	4619      	mov	r1, r3
 80070de:	f7f9 fc45 	bl	800096c <__aeabi_d2uiz>
 80070e2:	4603      	mov	r3, r0
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	7a7a      	ldrb	r2, [r7, #9]
 80070e8:	8979      	ldrh	r1, [r7, #10]
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 f87e 	bl	80071ec <MCP9808_Write16>

  float temp = MCP9808_RawToTemp(MCP9808_Read16(hi2c, addr, reg));
 80070f0:	7a7a      	ldrb	r2, [r7, #9]
 80070f2:	897b      	ldrh	r3, [r7, #10]
 80070f4:	4619      	mov	r1, r3
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f89f 	bl	800723a <MCP9808_Read16>
 80070fc:	4603      	mov	r3, r0
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 f814 	bl	800712c <MCP9808_RawToTemp>
 8007104:	ed87 0a04 	vstr	s0, [r7, #16]

  if(val == temp)
 8007108:	ed97 7a01 	vldr	s14, [r7, #4]
 800710c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007110:	eeb4 7a67 	vcmp.f32	s14, s15
 8007114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007118:	d101      	bne.n	800711e <MCP9808_SetLimit+0xa2>
    return 1;
 800711a:	2301      	movs	r3, #1
 800711c:	e000      	b.n	8007120 <MCP9808_SetLimit+0xa4>
  return 0;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40300000 	.word	0x40300000

0800712c <MCP9808_RawToTemp>:

float MCP9808_RawToTemp(uint16_t raw)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	80fb      	strh	r3, [r7, #6]
  float temp = 0.0;
 8007136:	f04f 0300 	mov.w	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]
  if (raw != 0xFFFF) {
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007142:	4293      	cmp	r3, r2
 8007144:	d01d      	beq.n	8007182 <MCP9808_RawToTemp+0x56>
    temp = raw & 0x0FFF;
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800714c:	ee07 3a90 	vmov	s15, r3
 8007150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007154:	edc7 7a03 	vstr	s15, [r7, #12]
    temp /= 16.0;
 8007158:	ed97 7a03 	vldr	s14, [r7, #12]
 800715c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8007160:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007164:	edc7 7a03 	vstr	s15, [r7, #12]
    if (raw & 0x1000)
 8007168:	88fb      	ldrh	r3, [r7, #6]
 800716a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d007      	beq.n	8007182 <MCP9808_RawToTemp+0x56>
      temp -= 256;
 8007172:	edd7 7a03 	vldr	s15, [r7, #12]
 8007176:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8007198 <MCP9808_RawToTemp+0x6c>
 800717a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800717e:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  return temp;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	ee07 3a90 	vmov	s15, r3
}
 8007188:	eeb0 0a67 	vmov.f32	s0, s15
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	43800000 	.word	0x43800000

0800719c <MCP9808_MapLimitBits>:

void MCP9808_MapLimitBits(uint16_t raw)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	80fb      	strh	r3, [r7, #6]
  MCP9808_Overtemp     = (raw & MCP9808_REG_OVERTEMP) >> MCP9808_POS_OVERTEMP;
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	139b      	asrs	r3, r3, #14
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <MCP9808_MapLimitBits+0x44>)
 80071b4:	701a      	strb	r2, [r3, #0]
  MCP9808_Undertemp    = (raw & MCP9808_REG_UNDERTEMP) >> MCP9808_POS_UNDERTEMP;
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	135b      	asrs	r3, r3, #13
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	4b08      	ldr	r3, [pc, #32]	; (80071e4 <MCP9808_MapLimitBits+0x48>)
 80071c4:	701a      	strb	r2, [r3, #0]
  MCP9808_CriticalTemp = (raw & MCP9808_REG_CRITICALTEMP) >> MCP9808_POS_CRITICALTEMP;
 80071c6:	88fb      	ldrh	r3, [r7, #6]
 80071c8:	0bdb      	lsrs	r3, r3, #15
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <MCP9808_MapLimitBits+0x4c>)
 80071d0:	701a      	strb	r2, [r3, #0]
}
 80071d2:	bf00      	nop
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	200026e4 	.word	0x200026e4
 80071e4:	200026e5 	.word	0x200026e5
 80071e8:	200026e6 	.word	0x200026e6

080071ec <MCP9808_Write16>:

void MCP9808_Write16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val){
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	4608      	mov	r0, r1
 80071f6:	4611      	mov	r1, r2
 80071f8:	461a      	mov	r2, r3
 80071fa:	4603      	mov	r3, r0
 80071fc:	817b      	strh	r3, [r7, #10]
 80071fe:	460b      	mov	r3, r1
 8007200:	727b      	strb	r3, [r7, #9]
 8007202:	4613      	mov	r3, r2
 8007204:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[3];

  writeVals[0] = reg;
 8007206:	7a7b      	ldrb	r3, [r7, #9]
 8007208:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val >> 8;
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	0a1b      	lsrs	r3, r3, #8
 800720e:	b29b      	uxth	r3, r3
 8007210:	b2db      	uxtb	r3, r3
 8007212:	757b      	strb	r3, [r7, #21]
  writeVals[2] = val & 0xFF;
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	75bb      	strb	r3, [r7, #22]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, HAL_MAX_DELAY);
 800721a:	897b      	ldrh	r3, [r7, #10]
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	b299      	uxth	r1, r3
 8007220:	f107 0214 	add.w	r2, r7, #20
 8007224:	f04f 33ff 	mov.w	r3, #4294967295
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	2303      	movs	r3, #3
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f003 fef9 	bl	800b024 <HAL_I2C_Master_Transmit>
}
 8007232:	bf00      	nop
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <MCP9808_Read16>:
uint16_t MCP9808_Read16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b086      	sub	sp, #24
 800723e:	af02      	add	r7, sp, #8
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	460b      	mov	r3, r1
 8007244:	807b      	strh	r3, [r7, #2]
 8007246:	4613      	mov	r3, r2
 8007248:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[1];
  uint8_t readVals[2];
  uint16_t val = 0xFFFF;
 800724a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800724e:	81fb      	strh	r3, [r7, #14]

  writeVals[0] = reg;
 8007250:	787b      	ldrb	r3, [r7, #1]
 8007252:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 1, HAL_MAX_DELAY);
 8007254:	887b      	ldrh	r3, [r7, #2]
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	b299      	uxth	r1, r3
 800725a:	f107 020c 	add.w	r2, r7, #12
 800725e:	f04f 33ff 	mov.w	r3, #4294967295
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	2301      	movs	r3, #1
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f003 fedc 	bl	800b024 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Receive(hi2c, addr << 1, readVals, 2, HAL_MAX_DELAY);
 800726c:	887b      	ldrh	r3, [r7, #2]
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	b299      	uxth	r1, r3
 8007272:	f107 0208 	add.w	r2, r7, #8
 8007276:	f04f 33ff 	mov.w	r3, #4294967295
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	2302      	movs	r3, #2
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f003 ffc4 	bl	800b20c <HAL_I2C_Master_Receive>

  val = (readVals[0] << 8 | readVals[1]);
 8007284:	7a3b      	ldrb	r3, [r7, #8]
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	b21a      	sxth	r2, r3
 800728a:	7a7b      	ldrb	r3, [r7, #9]
 800728c:	b21b      	sxth	r3, r3
 800728e:	4313      	orrs	r3, r2
 8007290:	b21b      	sxth	r3, r3
 8007292:	81fb      	strh	r3, [r7, #14]

  return val;
 8007294:	89fb      	ldrh	r3, [r7, #14]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <MCP9808_Write8>:

void MCP9808_Write8(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b088      	sub	sp, #32
 80072a2:	af02      	add	r7, sp, #8
 80072a4:	60f8      	str	r0, [r7, #12]
 80072a6:	4608      	mov	r0, r1
 80072a8:	4611      	mov	r1, r2
 80072aa:	461a      	mov	r2, r3
 80072ac:	4603      	mov	r3, r0
 80072ae:	817b      	strh	r3, [r7, #10]
 80072b0:	460b      	mov	r3, r1
 80072b2:	727b      	strb	r3, [r7, #9]
 80072b4:	4613      	mov	r3, r2
 80072b6:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[2];

  writeVals[0] = reg;
 80072b8:	7a7b      	ldrb	r3, [r7, #9]
 80072ba:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val;
 80072bc:	88fb      	ldrh	r3, [r7, #6]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	757b      	strb	r3, [r7, #21]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, HAL_MAX_DELAY);
 80072c2:	897b      	ldrh	r3, [r7, #10]
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	b299      	uxth	r1, r3
 80072c8:	f107 0214 	add.w	r2, r7, #20
 80072cc:	f04f 33ff 	mov.w	r3, #4294967295
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	2302      	movs	r3, #2
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f003 fea5 	bl	800b024 <HAL_I2C_Master_Transmit>
}
 80072da:	bf00      	nop
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <MCP9808_GetCriticalTemp>:

  return val;
}

uint8_t MCP9808_GetCriticalTemp()
{
 80072e4:	b480      	push	{r7}
 80072e6:	af00      	add	r7, sp, #0
  return MCP9808_CriticalTemp;
 80072e8:	4b03      	ldr	r3, [pc, #12]	; (80072f8 <MCP9808_GetCriticalTemp+0x14>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	200026e6 	.word	0x200026e6

080072fc <MCP9808_GetOvertemp>:

uint8_t MCP9808_GetOvertemp()
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
  return MCP9808_Overtemp;
 8007300:	4b03      	ldr	r3, [pc, #12]	; (8007310 <MCP9808_GetOvertemp+0x14>)
 8007302:	781b      	ldrb	r3, [r3, #0]
}
 8007304:	4618      	mov	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	200026e4 	.word	0x200026e4

08007314 <PCA9539_WriteReg16>:

  return val;
}

void PCA9539_WriteReg16(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t reg, uint16_t val)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af02      	add	r7, sp, #8
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	4608      	mov	r0, r1
 800731e:	4611      	mov	r1, r2
 8007320:	461a      	mov	r2, r3
 8007322:	4603      	mov	r3, r0
 8007324:	817b      	strh	r3, [r7, #10]
 8007326:	460b      	mov	r3, r1
 8007328:	727b      	strb	r3, [r7, #9]
 800732a:	4613      	mov	r3, r2
 800732c:	80fb      	strh	r3, [r7, #6]
  uint8_t writeVals[3];

  writeVals[0] = reg;
 800732e:	7a7b      	ldrb	r3, [r7, #9]
 8007330:	753b      	strb	r3, [r7, #20]
  writeVals[1] = val & 0xFF;
 8007332:	88fb      	ldrh	r3, [r7, #6]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	757b      	strb	r3, [r7, #21]
  writeVals[2] = val >> 8;
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	0a1b      	lsrs	r3, r3, #8
 800733c:	b29b      	uxth	r3, r3
 800733e:	b2db      	uxtb	r3, r3
 8007340:	75bb      	strb	r3, [r7, #22]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 3, HAL_MAX_DELAY);
 8007342:	897b      	ldrh	r3, [r7, #10]
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	b299      	uxth	r1, r3
 8007348:	f107 0214 	add.w	r2, r7, #20
 800734c:	f04f 33ff 	mov.w	r3, #4294967295
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	2303      	movs	r3, #3
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f003 fe65 	bl	800b024 <HAL_I2C_Master_Transmit>
}
 800735a:	bf00      	nop
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <PCA9635_Init>:


#include <pca9635.h>

void PCA9635_Init(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t blinking)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b086      	sub	sp, #24
 8007366:	af02      	add	r7, sp, #8
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	460b      	mov	r3, r1
 800736c:	807b      	strh	r3, [r7, #2]
 800736e:	4613      	mov	r3, r2
 8007370:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];

  writeVals[0] = PCA9635_REG_MODE1;
 8007372:	2300      	movs	r3, #0
 8007374:	733b      	strb	r3, [r7, #12]
  writeVals[1] = (PCA9635_MODE1_ALLCALL | PCA9635_MODE1_AI2); //Auto increment all registers
 8007376:	2381      	movs	r3, #129	; 0x81
 8007378:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, HAL_MAX_DELAY);
 800737a:	887b      	ldrh	r3, [r7, #2]
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	b299      	uxth	r1, r3
 8007380:	f107 020c 	add.w	r2, r7, #12
 8007384:	f04f 33ff 	mov.w	r3, #4294967295
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	2302      	movs	r3, #2
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f003 fe49 	bl	800b024 <HAL_I2C_Master_Transmit>

  if(blinking > 0){
 8007392:	787b      	ldrb	r3, [r7, #1]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00f      	beq.n	80073b8 <PCA9635_Init+0x56>
    writeVals[0] = PCA9635_REG_MODE2;
 8007398:	2301      	movs	r3, #1
 800739a:	733b      	strb	r3, [r7, #12]
    writeVals[1] = (PCA9635_MODE2_OUTNE | PCA9635_MODE2_OUTDRV | PCA9635_MODE2_DMBLNK);
 800739c:	2325      	movs	r3, #37	; 0x25
 800739e:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, HAL_MAX_DELAY);
 80073a0:	887b      	ldrh	r3, [r7, #2]
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	b299      	uxth	r1, r3
 80073a6:	f107 020c 	add.w	r2, r7, #12
 80073aa:	f04f 33ff 	mov.w	r3, #4294967295
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	2302      	movs	r3, #2
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f003 fe36 	bl	800b024 <HAL_I2C_Master_Transmit>
  }
}
 80073b8:	bf00      	nop
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <PCA9635_SetPWM>:

void PCA9635_SetPWM(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t channel, uint8_t value)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	4608      	mov	r0, r1
 80073ca:	4611      	mov	r1, r2
 80073cc:	461a      	mov	r2, r3
 80073ce:	4603      	mov	r3, r0
 80073d0:	807b      	strh	r3, [r7, #2]
 80073d2:	460b      	mov	r3, r1
 80073d4:	707b      	strb	r3, [r7, #1]
 80073d6:	4613      	mov	r3, r2
 80073d8:	703b      	strb	r3, [r7, #0]
  uint8_t writeVals[2];

  if((channel >= 0) && (channel < 16)){
 80073da:	787b      	ldrb	r3, [r7, #1]
 80073dc:	2b0f      	cmp	r3, #15
 80073de:	d811      	bhi.n	8007404 <PCA9635_SetPWM+0x44>
    writeVals[0] = PCA9635_REG_PWM(channel);
 80073e0:	787b      	ldrb	r3, [r7, #1]
 80073e2:	3302      	adds	r3, #2
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	733b      	strb	r3, [r7, #12]
    writeVals[1] = value;
 80073e8:	783b      	ldrb	r3, [r7, #0]
 80073ea:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, HAL_MAX_DELAY);
 80073ec:	887b      	ldrh	r3, [r7, #2]
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	b299      	uxth	r1, r3
 80073f2:	f107 020c 	add.w	r2, r7, #12
 80073f6:	f04f 33ff 	mov.w	r3, #4294967295
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	2302      	movs	r3, #2
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f003 fe10 	bl	800b024 <HAL_I2C_Master_Transmit>
  }
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <PCA9635_SetGroupPWM>:

void PCA9635_SetGroupPWM(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t value)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af02      	add	r7, sp, #8
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	807b      	strh	r3, [r7, #2]
 8007418:	4613      	mov	r3, r2
 800741a:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];
  writeVals[0] = PCA9635_REG_GRPPWM;
 800741c:	2312      	movs	r3, #18
 800741e:	733b      	strb	r3, [r7, #12]
  writeVals[1] = value;
 8007420:	787b      	ldrb	r3, [r7, #1]
 8007422:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, HAL_MAX_DELAY);
 8007424:	887b      	ldrh	r3, [r7, #2]
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	b299      	uxth	r1, r3
 800742a:	f107 020c 	add.w	r2, r7, #12
 800742e:	f04f 33ff 	mov.w	r3, #4294967295
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	2302      	movs	r3, #2
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f003 fdf4 	bl	800b024 <HAL_I2C_Master_Transmit>
}
 800743c:	bf00      	nop
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <PCA9635_SetGroupFreq>:

void PCA9635_SetGroupFreq(I2C_HandleTypeDef* hi2c, uint16_t addr, uint8_t value)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af02      	add	r7, sp, #8
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	807b      	strh	r3, [r7, #2]
 8007450:	4613      	mov	r3, r2
 8007452:	707b      	strb	r3, [r7, #1]
  uint8_t writeVals[2];
  writeVals[0] = PCA9635_REG_GRPFREQ;
 8007454:	2313      	movs	r3, #19
 8007456:	733b      	strb	r3, [r7, #12]
  writeVals[1] = value;
 8007458:	787b      	ldrb	r3, [r7, #1]
 800745a:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 2, HAL_MAX_DELAY);
 800745c:	887b      	ldrh	r3, [r7, #2]
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	b299      	uxth	r1, r3
 8007462:	f107 020c 	add.w	r2, r7, #12
 8007466:	f04f 33ff 	mov.w	r3, #4294967295
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	2302      	movs	r3, #2
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f003 fdd8 	bl	800b024 <HAL_I2C_Master_Transmit>
}
 8007474:	bf00      	nop
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <PCA9635_SetAllNum>:

void PCA9635_SetAllNum(I2C_HandleTypeDef* hi2c, uint16_t addr, uint32_t values)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af02      	add	r7, sp, #8
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	460b      	mov	r3, r1
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	817b      	strh	r3, [r7, #10]
  uint8_t writeVals[5];
  writeVals[0] = (PCA9635_REG_LEDOUT_BASE | PCA9635_REG_AI_ALL);
 800748a:	2394      	movs	r3, #148	; 0x94
 800748c:	743b      	strb	r3, [r7, #16]
  writeVals[1] = values & 0xFF;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	747b      	strb	r3, [r7, #17]
  writeVals[2] = (values >> 8) ;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	0a1b      	lsrs	r3, r3, #8
 8007498:	b2db      	uxtb	r3, r3
 800749a:	74bb      	strb	r3, [r7, #18]
  writeVals[3] = (values >> 16);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	0c1b      	lsrs	r3, r3, #16
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	74fb      	strb	r3, [r7, #19]
  writeVals[4] = (values >> 24);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	0e1b      	lsrs	r3, r3, #24
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 5, HAL_MAX_DELAY);
 80074ac:	897b      	ldrh	r3, [r7, #10]
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	b299      	uxth	r1, r3
 80074b2:	f107 0210 	add.w	r2, r7, #16
 80074b6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	2305      	movs	r3, #5
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f003 fdb0 	bl	800b024 <HAL_I2C_Master_Transmit>
}
 80074c4:	bf00      	nop
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <PCA9635_SetAll>:

void PCA9635_SetAll(I2C_HandleTypeDef* hi2c, uint16_t addr, PCA9635_LEDOnState_t state[16])
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	460b      	mov	r3, r1
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	817b      	strh	r3, [r7, #10]
  uint8_t writeVals[5];
  writeVals[0] = (PCA9635_REG_LEDOUT_BASE | PCA9635_REG_AI_ALL);
 80074da:	2394      	movs	r3, #148	; 0x94
 80074dc:	743b      	strb	r3, [r7, #16]
  writeVals[1] = state[0] + (state[1] << 2) + (state[2] << 4) + (state[3] << 6);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	781a      	ldrb	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3301      	adds	r3, #1
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	4413      	add	r3, r2
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3302      	adds	r3, #2
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	4413      	add	r3, r2
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3303      	adds	r3, #3
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	019b      	lsls	r3, r3, #6
 8007506:	b2db      	uxtb	r3, r3
 8007508:	4413      	add	r3, r2
 800750a:	b2db      	uxtb	r3, r3
 800750c:	747b      	strb	r3, [r7, #17]
  writeVals[2] = state[4] + (state[5] << 2) + (state[6] << 4) + (state[7] << 6);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3304      	adds	r3, #4
 8007512:	781a      	ldrb	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3305      	adds	r3, #5
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	b2db      	uxtb	r3, r3
 800751e:	4413      	add	r3, r2
 8007520:	b2da      	uxtb	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3306      	adds	r3, #6
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	b2db      	uxtb	r3, r3
 800752c:	4413      	add	r3, r2
 800752e:	b2da      	uxtb	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3307      	adds	r3, #7
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	019b      	lsls	r3, r3, #6
 8007538:	b2db      	uxtb	r3, r3
 800753a:	4413      	add	r3, r2
 800753c:	b2db      	uxtb	r3, r3
 800753e:	74bb      	strb	r3, [r7, #18]
  writeVals[3] = state[8] + (state[9] << 2) + (state[10] << 4) + (state[11] << 6);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3308      	adds	r3, #8
 8007544:	781a      	ldrb	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3309      	adds	r3, #9
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	b2db      	uxtb	r3, r3
 8007550:	4413      	add	r3, r2
 8007552:	b2da      	uxtb	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	330a      	adds	r3, #10
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	011b      	lsls	r3, r3, #4
 800755c:	b2db      	uxtb	r3, r3
 800755e:	4413      	add	r3, r2
 8007560:	b2da      	uxtb	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	330b      	adds	r3, #11
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	019b      	lsls	r3, r3, #6
 800756a:	b2db      	uxtb	r3, r3
 800756c:	4413      	add	r3, r2
 800756e:	b2db      	uxtb	r3, r3
 8007570:	74fb      	strb	r3, [r7, #19]
  writeVals[4] = state[12] + (state[13] << 2) + (state[14] << 4) + (state[15] << 6);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	330c      	adds	r3, #12
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	330d      	adds	r3, #13
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	b2db      	uxtb	r3, r3
 8007582:	4413      	add	r3, r2
 8007584:	b2da      	uxtb	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	330e      	adds	r3, #14
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	b2db      	uxtb	r3, r3
 8007590:	4413      	add	r3, r2
 8007592:	b2da      	uxtb	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	330f      	adds	r3, #15
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	019b      	lsls	r3, r3, #6
 800759c:	b2db      	uxtb	r3, r3
 800759e:	4413      	add	r3, r2
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Master_Transmit(hi2c, addr << 1, writeVals, 5, HAL_MAX_DELAY);
 80075a4:	897b      	ldrh	r3, [r7, #10]
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	b299      	uxth	r1, r3
 80075aa:	f107 0210 	add.w	r2, r7, #16
 80075ae:	f04f 33ff 	mov.w	r3, #4294967295
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	2305      	movs	r3, #5
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f003 fd34 	bl	800b024 <HAL_I2C_Master_Transmit>
}
 80075bc:	bf00      	nop
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <TurningOff>:

#include "profet.h"

//Transient state
static void TurningOff(volatile ProfetTypeDef *profet)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	899b      	ldrh	r3, [r3, #12]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	43da      	mvns	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	8819      	ldrh	r1, [r3, #0]
 80075da:	b209      	sxth	r1, r1
 80075dc:	b212      	sxth	r2, r2
 80075de:	400a      	ands	r2, r1
 80075e0:	b212      	sxth	r2, r2
 80075e2:	b292      	uxth	r2, r2
 80075e4:	801a      	strh	r2, [r3, #0]
  profet->eState = OFF;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	705a      	strb	r2, [r3, #1]
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <Off>:

static void Off(volatile ProfetTypeDef *profet)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  profet->cState = 'O';
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	224f      	movs	r2, #79	; 0x4f
 8007604:	70da      	strb	r2, [r3, #3]

  //Short circuit to battery check
  //TODO: Collapsing field will trigger this
  if (profet->nIL > 0.1) {
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    //profet->eState = SHORT_CIRCUITING;
  }

  //Check for turn on
  if (profet->eReqState == ON) {
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	789b      	ldrb	r3, [r3, #2]
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b01      	cmp	r3, #1
 8007612:	d102      	bne.n	800761a <Off+0x22>
    profet->eState = TURNING_ON;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2208      	movs	r2, #8
 8007618:	705a      	strb	r2, [r3, #1]
  }
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <InRushing>:

//Transient state
static void InRushing(volatile ProfetTypeDef *profet)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port |= profet->nIN_Pin;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	899b      	ldrh	r3, [r3, #12]
 8007632:	b299      	uxth	r1, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	881a      	ldrh	r2, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	b292      	uxth	r2, r2
 800763e:	801a      	strh	r2, [r3, #0]
  profet->nIL_On_Time = HAL_GetTick();
 8007640:	f001 f8ce 	bl	80087e0 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	625a      	str	r2, [r3, #36]	; 0x24
  profet->eState  = IN_RUSH;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2202      	movs	r2, #2
 800764e:	705a      	strb	r2, [r3, #1]
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <InRush>:

static void InRush(volatile ProfetTypeDef *profet)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  if (profet->nIL > profet->nIL_InRush_Limit) {
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007664:	b29a      	uxth	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	8bdb      	ldrh	r3, [r3, #30]
 800766a:	b29b      	uxth	r3, r3
 800766c:	429a      	cmp	r2, r3
 800766e:	d902      	bls.n	8007676 <InRush+0x1e>
    profet->eState = OVERCURRENTING;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	220b      	movs	r2, #11
 8007674:	705a      	strb	r2, [r3, #1]
  }
  if((HAL_GetTick() - profet->nIL_On_Time) > profet->nIL_InRush_Time){
 8007676:	f001 f8b3 	bl	80087e0 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	8c12      	ldrh	r2, [r2, #32]
 8007686:	b292      	uxth	r2, r2
 8007688:	4293      	cmp	r3, r2
 800768a:	d902      	bls.n	8007692 <InRush+0x3a>
    profet->eState = TURNING_ON;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2208      	movs	r2, #8
 8007690:	705a      	strb	r2, [r3, #1]
  }
  //Check for turn off
  if (profet->eReqState == OFF) {
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	789b      	ldrb	r3, [r3, #2]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d102      	bne.n	80076a2 <InRush+0x4a>
    profet->eState = TURNING_OFF;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2207      	movs	r2, #7
 80076a0:	705a      	strb	r2, [r3, #1]
  }
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <TurningOn>:

//Transient state
static void TurningOn(volatile ProfetTypeDef *profet)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port |= profet->nIN_Pin;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	899b      	ldrh	r3, [r3, #12]
 80076b6:	b299      	uxth	r1, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	881a      	ldrh	r2, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	b292      	uxth	r2, r2
 80076c2:	801a      	strh	r2, [r3, #0]
  profet->eState = ON;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	705a      	strb	r2, [r3, #1]
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <On>:

static void On(volatile ProfetTypeDef *profet)
{
 80076d6:	b590      	push	{r4, r7, lr}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  profet->cState = '|';
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	227c      	movs	r2, #124	; 0x7c
 80076e2:	70da      	strb	r2, [r3, #3]

  //TODO: Dead short vs open load
  //Dead short will register no current
  //How to differentiate between open load?
  if (profet->nIL == 0) {
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  }

  //Check for fault (device overcurrent/overtemp/short)
  //IL will be very high
  //TODO: Calculate value from datasheet
  if (profet->nIS_Avg > 30000) {
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	8adb      	ldrh	r3, [r3, #22]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f247 5230 	movw	r2, #30000	; 0x7530
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d902      	bls.n	80076fc <On+0x26>
    profet->eState = FAULTING;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	220c      	movs	r2, #12
 80076fa:	705a      	strb	r2, [r3, #1]
  }

  //Check for turn off
  if (profet->eReqState == OFF) {
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	789b      	ldrb	r3, [r3, #2]
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d102      	bne.n	800770c <On+0x36>
    profet->eState = TURNING_OFF;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2207      	movs	r2, #7
 800770a:	705a      	strb	r2, [r3, #1]
  }

  if ((profet->nIL > profet->nIL_Limit) && (profet->nOC_Detected == 0)){
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	8b9b      	ldrh	r3, [r3, #28]
 8007716:	b29b      	uxth	r3, r3
 8007718:	429a      	cmp	r2, r3
 800771a:	d90e      	bls.n	800773a <On+0x64>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d108      	bne.n	800773a <On+0x64>
    profet->nIL_On_Time = HAL_GetTick();
 8007728:	f001 f85a 	bl	80087e0 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	625a      	str	r2, [r3, #36]	; 0x24
    profet->nOC_Detected = 1;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }

  if ((profet->nIL < profet->nIL_Limit) && (profet->nOC_Detected > 0)){
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773e:	b29a      	uxth	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	8b9b      	ldrh	r3, [r3, #28]
 8007744:	b29b      	uxth	r3, r3
 8007746:	429a      	cmp	r2, r3
 8007748:	d209      	bcs.n	800775e <On+0x88>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <On+0x88>
    profet->nOC_Detected = 0;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }

  if(profet->nOC_Detected > 0){
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d017      	beq.n	800779a <On+0xc4>
    if((HAL_GetTick() - profet->nIL_On_Time) > GetTripTime(profet->eModel, profet->nIL, profet->nIL_Limit)){
 800776a:	f001 f839 	bl	80087e0 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	1ad4      	subs	r4, r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	b2d8      	uxtb	r0, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007780:	b299      	uxth	r1, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	8b9b      	ldrh	r3, [r3, #28]
 8007786:	b29b      	uxth	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	f000 f9b1 	bl	8007af0 <GetTripTime>
 800778e:	4603      	mov	r3, r0
 8007790:	429c      	cmp	r4, r3
 8007792:	d902      	bls.n	800779a <On+0xc4>
      profet->eState = OVERCURRENTING;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	220b      	movs	r2, #11
 8007798:	705a      	strb	r2, [r3, #1]
    }
  }
}
 800779a:	bf00      	nop
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd90      	pop	{r4, r7, pc}

080077a2 <Overcurrenting>:

//Transient state
static void Overcurrenting(volatile ProfetTypeDef *profet)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  profet->nValStore = profet->nIL;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	859a      	strh	r2, [r3, #44]	; 0x2c
  *profet->nIN_Port &= ~profet->nIN_Pin;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	899b      	ldrh	r3, [r3, #12]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	43da      	mvns	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	8819      	ldrh	r1, [r3, #0]
 80077c2:	b209      	sxth	r1, r1
 80077c4:	b212      	sxth	r2, r2
 80077c6:	400a      	ands	r2, r1
 80077c8:	b212      	sxth	r2, r2
 80077ca:	b292      	uxth	r2, r2
 80077cc:	801a      	strh	r2, [r3, #0]
  profet->nOC_TriggerTime = HAL_GetTick();
 80077ce:	f001 f807 	bl	80087e0 <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	635a      	str	r2, [r3, #52]	; 0x34
  profet->nOC_ResetCount++;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	3301      	adds	r3, #1
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  profet->eState = OVERCURRENT;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2204      	movs	r2, #4
 80077ee:	705a      	strb	r2, [r3, #1]
}
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <Overcurrent>:

static void Overcurrent(volatile ProfetTypeDef *profet)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  profet->cState = 'C';
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2243      	movs	r2, #67	; 0x43
 8007804:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	899b      	ldrh	r3, [r3, #12]
 800780a:	b29b      	uxth	r3, r3
 800780c:	43da      	mvns	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	8819      	ldrh	r1, [r3, #0]
 8007814:	b209      	sxth	r1, r1
 8007816:	b212      	sxth	r2, r2
 8007818:	400a      	ands	r2, r1
 800781a:	b212      	sxth	r2, r2
 800781c:	b292      	uxth	r2, r2
 800781e:	801a      	strh	r2, [r3, #0]
  if(profet->nOC_ResetCount <= profet->nOC_ResetLimit){
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007826:	b2da      	uxtb	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800782e:	b2db      	uxtb	r3, r3
 8007830:	429a      	cmp	r2, r3
 8007832:	d80e      	bhi.n	8007852 <Overcurrent+0x5a>
    if((HAL_GetTick() - profet->nOC_TriggerTime) > profet->nOC_ResetTime){
 8007834:	f000 ffd4 	bl	80087e0 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8007844:	b292      	uxth	r2, r2
 8007846:	4293      	cmp	r3, r2
 8007848:	d906      	bls.n	8007858 <Overcurrent+0x60>
      profet->eState = IN_RUSHING;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2209      	movs	r2, #9
 800784e:	705a      	strb	r2, [r3, #1]
 8007850:	e002      	b.n	8007858 <Overcurrent+0x60>
    }
  }
  else{
    profet->eState = SUSPENDING;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	220d      	movs	r2, #13
 8007856:	705a      	strb	r2, [r3, #1]
  }

  //Check for turn off
  if (profet->eReqState == OFF) {
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	789b      	ldrb	r3, [r3, #2]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <Overcurrent+0x78>
    profet->nOC_ResetCount = 0;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    profet->eState = TURNING_OFF;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2207      	movs	r2, #7
 800786e:	705a      	strb	r2, [r3, #1]
  }
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <ShortCircuiting>:

//Transient state
static void ShortCircuiting(volatile ProfetTypeDef *profet)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  profet->nValStore = profet->nIL;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007884:	b29a      	uxth	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	859a      	strh	r2, [r3, #44]	; 0x2c
  profet->eState = SHORT_CIRCUIT;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2203      	movs	r2, #3
 800788e:	705a      	strb	r2, [r3, #1]
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <ShortCircuit>:

static void ShortCircuit(volatile ProfetTypeDef *profet)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  profet->cState = 'S';
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2253      	movs	r2, #83	; 0x53
 80078a8:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	899b      	ldrh	r3, [r3, #12]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	43da      	mvns	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	8819      	ldrh	r1, [r3, #0]
 80078b8:	b209      	sxth	r1, r1
 80078ba:	b212      	sxth	r2, r2
 80078bc:	400a      	ands	r2, r1
 80078be:	b212      	sxth	r2, r2
 80078c0:	b292      	uxth	r2, r2
 80078c2:	801a      	strh	r2, [r3, #0]
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <Suspending>:

//Transient state
static void Suspending(volatile ProfetTypeDef *profet)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	899b      	ldrh	r3, [r3, #12]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	43da      	mvns	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	8819      	ldrh	r1, [r3, #0]
 80078e6:	b209      	sxth	r1, r1
 80078e8:	b212      	sxth	r2, r2
 80078ea:	400a      	ands	r2, r1
 80078ec:	b212      	sxth	r2, r2
 80078ee:	b292      	uxth	r2, r2
 80078f0:	801a      	strh	r2, [r3, #0]
  profet->eState = SUSPENDED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2206      	movs	r2, #6
 80078f6:	705a      	strb	r2, [r3, #1]
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <Suspended>:

static void Suspended(volatile ProfetTypeDef *profet)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  profet->cState = 'X';
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2258      	movs	r2, #88	; 0x58
 8007910:	70da      	strb	r2, [r3, #3]
  //TODO: replace with a reset
  if (profet->eReqState == OFF){
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	789b      	ldrb	r3, [r3, #2]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d106      	bne.n	800792a <Suspended+0x26>
    profet->nOC_ResetCount = 0;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    profet->eState = TURNING_OFF;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2207      	movs	r2, #7
 8007928:	705a      	strb	r2, [r3, #1]
  }
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <Faulting>:

//Transient state
static void Faulting(volatile ProfetTypeDef *profet)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	899b      	ldrh	r3, [r3, #12]
 8007942:	b29b      	uxth	r3, r3
 8007944:	43da      	mvns	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	8819      	ldrh	r1, [r3, #0]
 800794c:	b209      	sxth	r1, r1
 800794e:	b212      	sxth	r2, r2
 8007950:	400a      	ands	r2, r1
 8007952:	b212      	sxth	r2, r2
 8007954:	b292      	uxth	r2, r2
 8007956:	801a      	strh	r2, [r3, #0]
  profet->eState = FAULT;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2205      	movs	r2, #5
 800795c:	705a      	strb	r2, [r3, #1]
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <Fault>:

static void Fault(volatile ProfetTypeDef *profet)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  profet->cState = 'F';
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2246      	movs	r2, #70	; 0x46
 8007976:	70da      	strb	r2, [r3, #3]
  *profet->nIN_Port &= ~profet->nIN_Pin;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	899b      	ldrh	r3, [r3, #12]
 800797c:	b29b      	uxth	r3, r3
 800797e:	43da      	mvns	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	8819      	ldrh	r1, [r3, #0]
 8007986:	b209      	sxth	r1, r1
 8007988:	b212      	sxth	r2, r2
 800798a:	400a      	ands	r2, r1
 800798c:	b212      	sxth	r2, r2
 800798e:	b292      	uxth	r2, r2
 8007990:	801a      	strh	r2, [r3, #0]
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
	...

080079a0 <Profet_SM>:

void Profet_SM(volatile ProfetTypeDef *profet) {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]

  switch (profet->eState) {
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	785b      	ldrb	r3, [r3, #1]
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b0d      	cmp	r3, #13
 80079b0:	d856      	bhi.n	8007a60 <Profet_SM+0xc0>
 80079b2:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <Profet_SM+0x18>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079f9 	.word	0x080079f9
 80079bc:	08007a19 	.word	0x08007a19
 80079c0:	08007a09 	.word	0x08007a09
 80079c4:	08007a29 	.word	0x08007a29
 80079c8:	08007a39 	.word	0x08007a39
 80079cc:	08007a49 	.word	0x08007a49
 80079d0:	08007a59 	.word	0x08007a59
 80079d4:	080079f1 	.word	0x080079f1
 80079d8:	08007a11 	.word	0x08007a11
 80079dc:	08007a01 	.word	0x08007a01
 80079e0:	08007a21 	.word	0x08007a21
 80079e4:	08007a31 	.word	0x08007a31
 80079e8:	08007a41 	.word	0x08007a41
 80079ec:	08007a51 	.word	0x08007a51
  case TURNING_OFF:
    TurningOff(profet);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7ff fde7 	bl	80075c4 <TurningOff>
    break;
 80079f6:	e033      	b.n	8007a60 <Profet_SM+0xc0>

  case OFF:
    Off(profet);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff fdfd 	bl	80075f8 <Off>
    break;
 80079fe:	e02f      	b.n	8007a60 <Profet_SM+0xc0>

  case IN_RUSHING:
    InRushing(profet);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff fe10 	bl	8007626 <InRushing>
    break;
 8007a06:	e02b      	b.n	8007a60 <Profet_SM+0xc0>

  case IN_RUSH:
    InRush(profet);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff fe25 	bl	8007658 <InRush>
    break;
 8007a0e:	e027      	b.n	8007a60 <Profet_SM+0xc0>

  case TURNING_ON:
    TurningOn(profet);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff fe4a 	bl	80076aa <TurningOn>
    break;
 8007a16:	e023      	b.n	8007a60 <Profet_SM+0xc0>

  case ON:
    On(profet);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff fe5c 	bl	80076d6 <On>
    break;
 8007a1e:	e01f      	b.n	8007a60 <Profet_SM+0xc0>

  case SHORT_CIRCUITING:
    ShortCircuiting(profet);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff ff29 	bl	8007878 <ShortCircuiting>
    break;
 8007a26:	e01b      	b.n	8007a60 <Profet_SM+0xc0>

  case SHORT_CIRCUIT:
    ShortCircuit(profet);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff ff37 	bl	800789c <ShortCircuit>
    break;
 8007a2e:	e017      	b.n	8007a60 <Profet_SM+0xc0>

  case OVERCURRENTING:
    Overcurrenting(profet);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff feb6 	bl	80077a2 <Overcurrenting>
    break;
 8007a36:	e013      	b.n	8007a60 <Profet_SM+0xc0>

  case OVERCURRENT:
    Overcurrent(profet);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff fedd 	bl	80077f8 <Overcurrent>
    break;
 8007a3e:	e00f      	b.n	8007a60 <Profet_SM+0xc0>

  case FAULTING:
    Faulting(profet);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff ff78 	bl	8007936 <Faulting>
    break;
 8007a46:	e00b      	b.n	8007a60 <Profet_SM+0xc0>

  case FAULT:
    Fault(profet);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff ff8e 	bl	800796a <Fault>
    break;
 8007a4e:	e007      	b.n	8007a60 <Profet_SM+0xc0>

  case SUSPENDING:
    Suspending(profet);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff ff3d 	bl	80078d0 <Suspending>
    break;
 8007a56:	e003      	b.n	8007a60 <Profet_SM+0xc0>

  case SUSPENDED:
    Suspended(profet);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff ff53 	bl	8007904 <Suspended>
    break;
 8007a5e:	bf00      	nop

  }
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <Profet_UpdateIS>:

void Profet_UpdateIS(volatile ProfetTypeDef *profet, uint16_t newVal)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	807b      	strh	r3, [r7, #2]
  //Moving average without array or dividing
  //Store the new val, incase we need a non-filtered val elsewhere
  profet->nIS = newVal;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	887a      	ldrh	r2, [r7, #2]
 8007a78:	855a      	strh	r2, [r3, #42]	; 0x2a
  //Add new value to old sum
  profet->nIS_Sum += profet->nIS;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	441a      	add	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	619a      	str	r2, [r3, #24]
  //Shift sum by 1 which is equal to dividing by 2
  profet->nIS_Avg = profet->nIS_Sum >> 1;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	085b      	lsrs	r3, r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	82da      	strh	r2, [r3, #22]
  //Remove the average from the sum, otherwise sum always goes up never down
  profet->nIS_Sum -= profet->nIS_Avg;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	8adb      	ldrh	r3, [r3, #22]
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	1a9a      	subs	r2, r3, r2
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	619a      	str	r2, [r3, #24]

  //Convert IS to IL (actual current)
  profet->nIL = (uint16_t)(((float)profet->nIS_Avg * profet->fKilis) / 100.0);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	8adb      	ldrh	r3, [r3, #22]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	ee07 3a90 	vmov	s15, r3
 8007ab0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8007aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007abe:	ee17 0a90 	vmov	r0, s15
 8007ac2:	f7f8 fce9 	bl	8000498 <__aeabi_f2d>
 8007ac6:	f04f 0200 	mov.w	r2, #0
 8007aca:	4b08      	ldr	r3, [pc, #32]	; (8007aec <Profet_UpdateIS+0x84>)
 8007acc:	f7f8 fe66 	bl	800079c <__aeabi_ddiv>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	f7f8 ff48 	bl	800096c <__aeabi_d2uiz>
 8007adc:	4603      	mov	r3, r0
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	40590000 	.word	0x40590000

08007af0 <GetTripTime>:

uint32_t GetTripTime(ProfetModelTypeDef eModel, uint16_t nIL, uint16_t nMaxIL)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	71fb      	strb	r3, [r7, #7]
 8007afa:	460b      	mov	r3, r1
 8007afc:	80bb      	strh	r3, [r7, #4]
 8007afe:	4613      	mov	r3, r2
 8007b00:	807b      	strh	r3, [r7, #2]
  //Multiply by 10 to include first decimal point
  // 25A / 5A = 5
  // 5 * 10 = 50 nOCMult
  //Subtract 10 to start at index 0
  // nOCMult = 40
  uint8_t nOCMult = (uint8_t)(((float)nIL / (float)nMaxIL) * 10.0);
 8007b02:	88bb      	ldrh	r3, [r7, #4]
 8007b04:	ee07 3a90 	vmov	s15, r3
 8007b08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b0c:	887b      	ldrh	r3, [r7, #2]
 8007b0e:	ee07 3a90 	vmov	s15, r3
 8007b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007b1a:	ee16 0a90 	vmov	r0, s13
 8007b1e:	f7f8 fcbb 	bl	8000498 <__aeabi_f2d>
 8007b22:	f04f 0200 	mov.w	r2, #0
 8007b26:	4b2b      	ldr	r3, [pc, #172]	; (8007bd4 <GetTripTime+0xe4>)
 8007b28:	f7f8 fd0e 	bl	8000548 <__aeabi_dmul>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4610      	mov	r0, r2
 8007b32:	4619      	mov	r1, r3
 8007b34:	f7f8 ff1a 	bl	800096c <__aeabi_d2uiz>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	75fb      	strb	r3, [r7, #23]
  nOCMult -= 10; //Subtract 10 to start at index 0
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	3b0a      	subs	r3, #10
 8007b40:	75fb      	strb	r3, [r7, #23]

  if(nOCMult < 0)
    nOCMult = 0;
  if(nOCMult > 91)
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	2b5b      	cmp	r3, #91	; 0x5b
 8007b46:	d901      	bls.n	8007b4c <GetTripTime+0x5c>
    nOCMult = 91;
 8007b48:	235b      	movs	r3, #91	; 0x5b
 8007b4a:	75fb      	strb	r3, [r7, #23]
      0x0273U,0x0260U,0x024EU,0x023DU,0x022DU,0x021DU,0x020EU,0x0200U,0x01F2U,0x01E5U,0x01D8U,
      0x01CBU,0x01C0U,0x01B4U,0x01A9U,0x019EU,0x0194U,0x018AU,0x0181U,0x0177U,0x016EU,0x0166U,
      0x015DU,0x0155U,0x014EU
  };

  uint16_t nTripTimeRaw = fTripTimeLookupTable[nOCMult];
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	4a22      	ldr	r2, [pc, #136]	; (8007bd8 <GetTripTime+0xe8>)
 8007b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b54:	81fb      	strh	r3, [r7, #14]
       0.93,0.94,0.95,0.96,0.97,0.98,0.99,1,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,
       1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.2,1.21,1.22,1.23,1.24,
       1.25,1.26,1.27,1.28,1.29,1.3,1.31,1.32,1.33,1.34,1.35,1.36,1.37,1.38,1.39,1.40
   };

  uint32_t nTripTime = 0;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60bb      	str	r3, [r7, #8]
  float fTripTimeMult = 0.0;
 8007b5a:	f04f 0300 	mov.w	r3, #0
 8007b5e:	613b      	str	r3, [r7, #16]

  switch(eModel){
 8007b60:	79fb      	ldrb	r3, [r7, #7]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <GetTripTime+0x82>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	db21      	blt.n	8007bae <GetTripTime+0xbe>
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d81e      	bhi.n	8007bae <GetTripTime+0xbe>
 8007b70:	e00e      	b.n	8007b90 <GetTripTime+0xa0>
  case BTS7002_1EPP:
    if(nMaxIL < 200)
 8007b72:	887b      	ldrh	r3, [r7, #2]
 8007b74:	2bc7      	cmp	r3, #199	; 0xc7
 8007b76:	d806      	bhi.n	8007b86 <GetTripTime+0x96>
      fTripTimeMult = fTripTimeMult_7002[nMaxIL];
 8007b78:	887b      	ldrh	r3, [r7, #2]
 8007b7a:	4a18      	ldr	r2, [pc, #96]	; (8007bdc <GetTripTime+0xec>)
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	613b      	str	r3, [r7, #16]
    else
      fTripTimeMult = fTripTimeMult_7002[199];
    break;
 8007b84:	e013      	b.n	8007bae <GetTripTime+0xbe>
      fTripTimeMult = fTripTimeMult_7002[199];
 8007b86:	4b15      	ldr	r3, [pc, #84]	; (8007bdc <GetTripTime+0xec>)
 8007b88:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 8007b8c:	613b      	str	r3, [r7, #16]
    break;
 8007b8e:	e00e      	b.n	8007bae <GetTripTime+0xbe>

  case BTS7008_2EPA_CH1:
  case BTS7008_2EPA_CH2:
    if(nMaxIL < 80)
 8007b90:	887b      	ldrh	r3, [r7, #2]
 8007b92:	2b4f      	cmp	r3, #79	; 0x4f
 8007b94:	d806      	bhi.n	8007ba4 <GetTripTime+0xb4>
      fTripTimeMult = fTripTimeMult_7008[nMaxIL];
 8007b96:	887b      	ldrh	r3, [r7, #2]
 8007b98:	4a11      	ldr	r2, [pc, #68]	; (8007be0 <GetTripTime+0xf0>)
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	613b      	str	r3, [r7, #16]
    else
      fTripTimeMult = fTripTimeMult_7008[79];
    break;
 8007ba2:	e003      	b.n	8007bac <GetTripTime+0xbc>
      fTripTimeMult = fTripTimeMult_7008[79];
 8007ba4:	4b0e      	ldr	r3, [pc, #56]	; (8007be0 <GetTripTime+0xf0>)
 8007ba6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8007baa:	613b      	str	r3, [r7, #16]
    break;
 8007bac:	bf00      	nop
  }

  nTripTime = (uint32_t)(nTripTimeRaw * fTripTimeMult);
 8007bae:	89fb      	ldrh	r3, [r7, #14]
 8007bb0:	ee07 3a90 	vmov	s15, r3
 8007bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007bb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8007bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc4:	ee17 3a90 	vmov	r3, s15
 8007bc8:	60bb      	str	r3, [r7, #8]

  return nTripTime;
 8007bca:	68bb      	ldr	r3, [r7, #8]

}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40240000 	.word	0x40240000
 8007bd8:	08017cc0 	.word	0x08017cc0
 8007bdc:	08017d78 	.word	0x08017d78
 8007be0:	08018098 	.word	0x08018098

08007be4 <CheckPushbutton>:
 */

#include "pushbutton.h"

void CheckPushbutton(PushbuttonConfig_t* pb, PushbuttonMode_t mode, uint16_t nInput, uint16_t* nOutput, uint16_t nDebounceTime)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	607b      	str	r3, [r7, #4]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	72fb      	strb	r3, [r7, #11]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	813b      	strh	r3, [r7, #8]
  //=======================================================
  //Debounce and latch logic
  //=======================================================

  if(mode == MODE_MOMENTARY)
 8007bf6:	7afb      	ldrb	r3, [r7, #11]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d132      	bne.n	8007c62 <CheckPushbutton+0x7e>
  {
    //Check for button change
    //Store trigger time
    if(nInput != pb->nLastState)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	893a      	ldrh	r2, [r7, #8]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d015      	beq.n	8007c34 <CheckPushbutton+0x50>
    {
      if(    ((nInput == 1) && (*nOutput == 0)) //Rising
 8007c08:	893b      	ldrh	r3, [r7, #8]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d103      	bne.n	8007c16 <CheckPushbutton+0x32>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d006      	beq.n	8007c24 <CheckPushbutton+0x40>
          || ((nInput == 0) && (*nOutput == 1))) //Falling
 8007c16:	893b      	ldrh	r3, [r7, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <CheckPushbutton+0x50>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d107      	bne.n	8007c34 <CheckPushbutton+0x50>
      {
        pb->nLastTrigTime = HAL_GetTick();
 8007c24:	f000 fddc 	bl	80087e0 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	605a      	str	r2, [r3, #4]
        pb->nCheckTime = 1;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	721a      	strb	r2, [r3, #8]
      }
    }

    pb->nLastState = nInput;
 8007c34:	893b      	ldrh	r3, [r7, #8]
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	701a      	strb	r2, [r3, #0]

    if((pb->nCheckTime > 0) && ((HAL_GetTick() - pb->nLastTrigTime) > nDebounceTime))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	7a1b      	ldrb	r3, [r3, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00e      	beq.n	8007c62 <CheckPushbutton+0x7e>
 8007c44:	f000 fdcc 	bl	80087e0 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	8b3b      	ldrh	r3, [r7, #24]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d905      	bls.n	8007c62 <CheckPushbutton+0x7e>
    {
      pb->nCheckTime = 0;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	721a      	strb	r2, [r3, #8]
      *nOutput = nInput;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	893a      	ldrh	r2, [r7, #8]
 8007c60:	801a      	strh	r2, [r3, #0]
    }

    //Don't change output
  }

  if(mode == MODE_LATCHING)
 8007c62:	7afb      	ldrb	r3, [r7, #11]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d12e      	bne.n	8007cc6 <CheckPushbutton+0xe2>
  {
    //Check for rising trigger
    //Store trigger time
    if((nInput != pb->nLastState) && (nInput == 1))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	893a      	ldrh	r2, [r7, #8]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d00a      	beq.n	8007c8a <CheckPushbutton+0xa6>
 8007c74:	893b      	ldrh	r3, [r7, #8]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d107      	bne.n	8007c8a <CheckPushbutton+0xa6>
    {
      pb->nLastTrigTime = HAL_GetTick();
 8007c7a:	f000 fdb1 	bl	80087e0 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	605a      	str	r2, [r3, #4]
      pb->nCheckTime = 1;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2201      	movs	r2, #1
 8007c88:	721a      	strb	r2, [r3, #8]
    }

    pb->nLastState = nInput;
 8007c8a:	893b      	ldrh	r3, [r7, #8]
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	701a      	strb	r2, [r3, #0]

    if((pb->nCheckTime > 0) && ((HAL_GetTick() - pb->nLastTrigTime) > nDebounceTime))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	7a1b      	ldrb	r3, [r3, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d015      	beq.n	8007cc6 <CheckPushbutton+0xe2>
 8007c9a:	f000 fda1 	bl	80087e0 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	1ad2      	subs	r2, r2, r3
 8007ca6:	8b3b      	ldrh	r3, [r7, #24]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d90c      	bls.n	8007cc6 <CheckPushbutton+0xe2>
    {
      pb->nCheckTime = 0;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	721a      	strb	r2, [r3, #8]
      *nOutput = !*nOutput;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bf0c      	ite	eq
 8007cba:	2301      	moveq	r3, #1
 8007cbc:	2300      	movne	r3, #0
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <Parked>:
 */

#include "wipers.h"

static void Parked(Wiper_t* wiper)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  //Set motor to off
  wiper->nSlowOut = 0;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	805a      	strh	r2, [r3, #2]
  wiper->nFastOut = 0;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	809a      	strh	r2, [r3, #4]

  switch(wiper->eMode){
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d070      	beq.n	8007dce <Parked+0xfe>
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	f300 80b4 	bgt.w	8007e5a <Parked+0x18a>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <Parked+0x2c>
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d02c      	beq.n	8007d54 <Parked+0x84>
 8007cfa:	e0ae      	b.n	8007e5a <Parked+0x18a>
  case MODE_DIG_IN:
    if(*wiper->pInterInput){
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d008      	beq.n	8007d18 <Parked+0x48>
      wiper->nSlowOut = 1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	809a      	strh	r2, [r3, #4]
      wiper->eState = INTER_ON;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2205      	movs	r2, #5
 8007d16:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pSlowInput){
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <Parked+0x64>
      wiper->nSlowOut = 1;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2202      	movs	r2, #2
 8007d32:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pFastInput){
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 8088 	beq.w	8007e50 <Parked+0x180>
      wiper->nSlowOut = 1;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2203      	movs	r2, #3
 8007d50:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007d52:	e07d      	b.n	8007e50 <Parked+0x180>

  case MODE_INT_IN:
    //Set on based on selected speed
    switch(wiper->eSelectedSpeed)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	d87a      	bhi.n	8007e54 <Parked+0x184>
 8007d5e:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <Parked+0x94>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007d89 	.word	0x08007d89
 8007d68:	08007d91 	.word	0x08007d91
 8007d6c:	08007da5 	.word	0x08007da5
 8007d70:	08007db9 	.word	0x08007db9
 8007d74:	08007db9 	.word	0x08007db9
 8007d78:	08007db9 	.word	0x08007db9
 8007d7c:	08007db9 	.word	0x08007db9
 8007d80:	08007db9 	.word	0x08007db9
 8007d84:	08007db9 	.word	0x08007db9
    {
    case PARK:
      wiper->eState = PARKING;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	705a      	strb	r2, [r3, #1]
      break;
 8007d8e:	e01d      	b.n	8007dcc <Parked+0xfc>

    case SLOW:
      wiper->nSlowOut = 1;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	705a      	strb	r2, [r3, #1]
      break;
 8007da2:	e013      	b.n	8007dcc <Parked+0xfc>

    case FAST:
      wiper->nSlowOut = 1;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2203      	movs	r2, #3
 8007db4:	705a      	strb	r2, [r3, #1]
      break;
 8007db6:	e009      	b.n	8007dcc <Parked+0xfc>

    case INTER_1 ... INTER_6:
      wiper->nSlowOut = 1;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	809a      	strh	r2, [r3, #4]
      wiper->eState = INTER_ON;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2205      	movs	r2, #5
 8007dc8:	705a      	strb	r2, [r3, #1]
      break;
 8007dca:	bf00      	nop
    }
    break;
 8007dcc:	e042      	b.n	8007e54 <Parked+0x184>

  case MODE_MIX_IN:
    //Switched on
    if(*wiper->pOnSw){
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d037      	beq.n	8007e48 <Parked+0x178>
      //Set on based on selected speed
      switch(wiper->eSelectedSpeed)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	d83a      	bhi.n	8007e58 <Parked+0x188>
 8007de2:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <Parked+0x118>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007e4d 	.word	0x08007e4d
 8007dec:	08007e0d 	.word	0x08007e0d
 8007df0:	08007e21 	.word	0x08007e21
 8007df4:	08007e35 	.word	0x08007e35
 8007df8:	08007e35 	.word	0x08007e35
 8007dfc:	08007e35 	.word	0x08007e35
 8007e00:	08007e35 	.word	0x08007e35
 8007e04:	08007e35 	.word	0x08007e35
 8007e08:	08007e35 	.word	0x08007e35
      case PARK:
        //Do nothing
        break;

      case SLOW:
        wiper->nSlowOut = 1;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	805a      	strh	r2, [r3, #2]
        wiper->nFastOut = 0;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	809a      	strh	r2, [r3, #4]
        wiper->eState = SLOW_ON;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	705a      	strb	r2, [r3, #1]
        break;
 8007e1e:	e016      	b.n	8007e4e <Parked+0x17e>

      case FAST:
        wiper->nSlowOut = 1;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	805a      	strh	r2, [r3, #2]
        wiper->nFastOut = 1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	809a      	strh	r2, [r3, #4]
        wiper->eState = FAST_ON;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2203      	movs	r2, #3
 8007e30:	705a      	strb	r2, [r3, #1]
        break;
 8007e32:	e00c      	b.n	8007e4e <Parked+0x17e>

      case INTER_1 ... INTER_6:
        wiper->nSlowOut = 1;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	805a      	strh	r2, [r3, #2]
        wiper->nFastOut = 0;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	809a      	strh	r2, [r3, #4]
        wiper->eState = INTER_ON;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2205      	movs	r2, #5
 8007e44:	705a      	strb	r2, [r3, #1]
        break;
 8007e46:	e002      	b.n	8007e4e <Parked+0x17e>
      }
    }
 8007e48:	bf00      	nop
 8007e4a:	e005      	b.n	8007e58 <Parked+0x188>
        break;
 8007e4c:	bf00      	nop
    break;
 8007e4e:	e003      	b.n	8007e58 <Parked+0x188>
    break;
 8007e50:	bf00      	nop
 8007e52:	e002      	b.n	8007e5a <Parked+0x18a>
    break;
 8007e54:	bf00      	nop
 8007e56:	e000      	b.n	8007e5a <Parked+0x18a>
    break;
 8007e58:	bf00      	nop
  }

  if(*wiper->pWashInput){
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d006      	beq.n	8007e72 <Parked+0x1a2>
     wiper->eStatePreWash = PARKED;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
     wiper->eState = WASH;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2206      	movs	r2, #6
 8007e70:	705a      	strb	r2, [r3, #1]
  }

  if(*wiper->pSwipeInput){
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <Parked+0x1b2>
    wiper->eState = SWIPE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2207      	movs	r2, #7
 8007e80:	705a      	strb	r2, [r3, #1]
  }

}
 8007e82:	bf00      	nop
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop

08007e90 <Parking>:

static void Parking(Wiper_t* wiper)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  //Set to last state in case park is missed
  switch(wiper->eLastState)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007e9e:	2b07      	cmp	r3, #7
 8007ea0:	d835      	bhi.n	8007f0e <Parking+0x7e>
 8007ea2:	a201      	add	r2, pc, #4	; (adr r2, 8007ea8 <Parking+0x18>)
 8007ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea8:	08007f0f 	.word	0x08007f0f
 8007eac:	08007f0f 	.word	0x08007f0f
 8007eb0:	08007ec9 	.word	0x08007ec9
 8007eb4:	08007ed7 	.word	0x08007ed7
 8007eb8:	08007f0f 	.word	0x08007f0f
 8007ebc:	08007ee5 	.word	0x08007ee5
 8007ec0:	08007ef3 	.word	0x08007ef3
 8007ec4:	08007f01 	.word	0x08007f01
    break;
  case PARKING:
    //Do nothing
    break;
  case SLOW_ON:
    wiper->nSlowOut = 1;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	809a      	strh	r2, [r3, #4]
    break;
 8007ed4:	e01b      	b.n	8007f0e <Parking+0x7e>
  case FAST_ON:
    wiper->nSlowOut = 1;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 1;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	809a      	strh	r2, [r3, #4]
    break;
 8007ee2:	e014      	b.n	8007f0e <Parking+0x7e>
  case INTER_ON:
    wiper->nSlowOut = 1;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	809a      	strh	r2, [r3, #4]
    break;
 8007ef0:	e00d      	b.n	8007f0e <Parking+0x7e>
  case INTER_PAUSE:
    //Do nothing
    break;
  case WASH:
    wiper->nSlowOut = 1;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	809a      	strh	r2, [r3, #4]
    break;
 8007efe:	e006      	b.n	8007f0e <Parking+0x7e>
  case SWIPE:
    wiper->nSlowOut = 1;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	809a      	strh	r2, [r3, #4]
    break;
 8007f0c:	bf00      	nop
  }

  //Park detected - stop motor
  if(!(*wiper->pParkSw))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d108      	bne.n	8007f2a <Parking+0x9a>
  {
    wiper->nSlowOut = 0;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	809a      	strh	r2, [r3, #4]
    wiper->eState = PARKED;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	705a      	strb	r2, [r3, #1]
  }

  //Wash turned on
  if(*wiper->pWashInput)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d006      	beq.n	8007f42 <Parking+0xb2>
  {
    wiper->eStatePreWash = PARKING;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    wiper->eState = WASH;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2206      	movs	r2, #6
 8007f40:	705a      	strb	r2, [r3, #1]
  }
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop

08007f50 <SlowOn>:

static void SlowOn(Wiper_t* wiper)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  wiper->eLastState = wiper->eState;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	785a      	ldrb	r2, [r3, #1]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  //Set motor to slow speed
  wiper->nSlowOut = 1;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	805a      	strh	r2, [r3, #2]
  wiper->nFastOut = 0;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	809a      	strh	r2, [r3, #4]

  switch(wiper->eMode){
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d054      	beq.n	8008020 <SlowOn+0xd0>
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	f300 8089 	bgt.w	800808e <SlowOn+0x13e>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <SlowOn+0x36>
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d01f      	beq.n	8007fc4 <SlowOn+0x74>
 8007f84:	e083      	b.n	800808e <SlowOn+0x13e>
  case MODE_DIG_IN:
    if(!(*wiper->pSlowInput))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d102      	bne.n	8007f96 <SlowOn+0x46>
      wiper->eState = PARKING;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	705a      	strb	r2, [r3, #1]

    if(*wiper->pInterInput){
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <SlowOn+0x56>
      wiper->eState = INTER_ON;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2205      	movs	r2, #5
 8007fa4:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pFastInput){
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d069      	beq.n	8008084 <SlowOn+0x134>
      wiper->nSlowOut = 1;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2203      	movs	r2, #3
 8007fc0:	705a      	strb	r2, [r3, #1]
    }

    break;
 8007fc2:	e05f      	b.n	8008084 <SlowOn+0x134>

  case MODE_INT_IN:
    //Speed changed
    switch(wiper->eSelectedSpeed)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d85c      	bhi.n	8008088 <SlowOn+0x138>
 8007fce:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <SlowOn+0x84>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08007ff9 	.word	0x08007ff9
 8007fd8:	0800801d 	.word	0x0800801d
 8007fdc:	08008001 	.word	0x08008001
 8007fe0:	08008015 	.word	0x08008015
 8007fe4:	08008015 	.word	0x08008015
 8007fe8:	08008015 	.word	0x08008015
 8007fec:	08008015 	.word	0x08008015
 8007ff0:	08008015 	.word	0x08008015
 8007ff4:	08008015 	.word	0x08008015
    {
    case PARK:
      wiper->eState = PARKING;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	705a      	strb	r2, [r3, #1]
      break;
 8007ffe:	e00e      	b.n	800801e <SlowOn+0xce>
    case SLOW:
      //Do nothing
      break;

    case FAST:
      wiper->nSlowOut = 1;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2203      	movs	r2, #3
 8008010:	705a      	strb	r2, [r3, #1]
      break;
 8008012:	e004      	b.n	800801e <SlowOn+0xce>

    case INTER_1 ... INTER_6:
      wiper->eState = INTER_ON;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2205      	movs	r2, #5
 8008018:	705a      	strb	r2, [r3, #1]
      break;
 800801a:	e000      	b.n	800801e <SlowOn+0xce>
      break;
 800801c:	bf00      	nop
    }
    break;
 800801e:	e033      	b.n	8008088 <SlowOn+0x138>

  case MODE_MIX_IN:
    //Wipers turned off - park
    if(!(*wiper->pOnSw))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <SlowOn+0xe0>
    {
      wiper->eState = PARKING;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	705a      	strb	r2, [r3, #1]
    }

    //Speed changed
    switch(wiper->eSelectedSpeed)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008036:	2b08      	cmp	r3, #8
 8008038:	d828      	bhi.n	800808c <SlowOn+0x13c>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <SlowOn+0xf0>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008081 	.word	0x08008081
 8008044:	08008081 	.word	0x08008081
 8008048:	08008065 	.word	0x08008065
 800804c:	08008079 	.word	0x08008079
 8008050:	08008079 	.word	0x08008079
 8008054:	08008079 	.word	0x08008079
 8008058:	08008079 	.word	0x08008079
 800805c:	08008079 	.word	0x08008079
 8008060:	08008079 	.word	0x08008079
    case SLOW:
      //Do nothing
      break;

    case FAST:
      wiper->nSlowOut = 1;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2203      	movs	r2, #3
 8008074:	705a      	strb	r2, [r3, #1]
      break;
 8008076:	e004      	b.n	8008082 <SlowOn+0x132>

    case INTER_1 ... INTER_6:
      wiper->eState = INTER_ON;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2205      	movs	r2, #5
 800807c:	705a      	strb	r2, [r3, #1]
      break;
 800807e:	e000      	b.n	8008082 <SlowOn+0x132>
      break;
 8008080:	bf00      	nop
    }
    break;
 8008082:	e003      	b.n	800808c <SlowOn+0x13c>
    break;
 8008084:	bf00      	nop
 8008086:	e002      	b.n	800808e <SlowOn+0x13e>
    break;
 8008088:	bf00      	nop
 800808a:	e000      	b.n	800808e <SlowOn+0x13e>
    break;
 800808c:	bf00      	nop
  }

  //Wash turned on
  if(*wiper->pWashInput)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d006      	beq.n	80080a6 <SlowOn+0x156>
  {
    wiper->eStatePreWash = INTER_PAUSE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2204      	movs	r2, #4
 800809c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    wiper->eState = WASH;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2206      	movs	r2, #6
 80080a4:	705a      	strb	r2, [r3, #1]
  }

}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop

080080b4 <FastOn>:

static void FastOn(Wiper_t* wiper)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  wiper->eLastState = wiper->eState;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	785a      	ldrb	r2, [r3, #1]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  //Set motor to fast speed
  wiper->nSlowOut = 1;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	805a      	strh	r2, [r3, #2]
  wiper->nFastOut = 1;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	809a      	strh	r2, [r3, #4]

  switch(wiper->eMode){
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d054      	beq.n	8008184 <FastOn+0xd0>
 80080da:	2b02      	cmp	r3, #2
 80080dc:	f300 8089 	bgt.w	80081f2 <FastOn+0x13e>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <FastOn+0x36>
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d01f      	beq.n	8008128 <FastOn+0x74>
 80080e8:	e083      	b.n	80081f2 <FastOn+0x13e>
  case MODE_DIG_IN:
    if(!(*wiper->pFastInput))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <FastOn+0x46>
      wiper->eState = PARKING;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	705a      	strb	r2, [r3, #1]

    if(*wiper->pInterInput){
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <FastOn+0x56>
      wiper->eState = INTER_ON;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2205      	movs	r2, #5
 8008108:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pSlowInput){
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d069      	beq.n	80081e8 <FastOn+0x134>
      wiper->nSlowOut = 1;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	705a      	strb	r2, [r3, #1]
    }
    break;
 8008126:	e05f      	b.n	80081e8 <FastOn+0x134>

  case MODE_INT_IN:
    //Speed changed
    switch(wiper->eSelectedSpeed)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800812e:	2b08      	cmp	r3, #8
 8008130:	d85c      	bhi.n	80081ec <FastOn+0x138>
 8008132:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <FastOn+0x84>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	0800815d 	.word	0x0800815d
 800813c:	08008165 	.word	0x08008165
 8008140:	08008181 	.word	0x08008181
 8008144:	08008179 	.word	0x08008179
 8008148:	08008179 	.word	0x08008179
 800814c:	08008179 	.word	0x08008179
 8008150:	08008179 	.word	0x08008179
 8008154:	08008179 	.word	0x08008179
 8008158:	08008179 	.word	0x08008179
    {
    case PARK:
      wiper->eState = PARKING;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	705a      	strb	r2, [r3, #1]
      break;
 8008162:	e00e      	b.n	8008182 <FastOn+0xce>

    case SLOW:
      wiper->nSlowOut = 1;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	705a      	strb	r2, [r3, #1]
      break;
 8008176:	e004      	b.n	8008182 <FastOn+0xce>
    case FAST:
      //Do nothing
      break;

    case INTER_1 ... INTER_6:
      wiper->eState = INTER_ON;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2205      	movs	r2, #5
 800817c:	705a      	strb	r2, [r3, #1]
      break;
 800817e:	e000      	b.n	8008182 <FastOn+0xce>
      break;
 8008180:	bf00      	nop
    }
    break;
 8008182:	e033      	b.n	80081ec <FastOn+0x138>

  case MODE_MIX_IN:
    //Wipers turned off - park
    if(!(*wiper->pOnSw))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d102      	bne.n	8008194 <FastOn+0xe0>
    {
      wiper->eState = PARKING;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	705a      	strb	r2, [r3, #1]
    }

    //Speed changed
    switch(wiper->eSelectedSpeed)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800819a:	2b08      	cmp	r3, #8
 800819c:	d828      	bhi.n	80081f0 <FastOn+0x13c>
 800819e:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <FastOn+0xf0>)
 80081a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a4:	080081e5 	.word	0x080081e5
 80081a8:	080081c9 	.word	0x080081c9
 80081ac:	080081e5 	.word	0x080081e5
 80081b0:	080081dd 	.word	0x080081dd
 80081b4:	080081dd 	.word	0x080081dd
 80081b8:	080081dd 	.word	0x080081dd
 80081bc:	080081dd 	.word	0x080081dd
 80081c0:	080081dd 	.word	0x080081dd
 80081c4:	080081dd 	.word	0x080081dd
    {
    case PARK:
      //Do nothing
      break;
    case SLOW:
      wiper->nSlowOut = 1;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	705a      	strb	r2, [r3, #1]
      break;
 80081da:	e004      	b.n	80081e6 <FastOn+0x132>
    case FAST:
      //Do nothing
      break;

    case INTER_1 ... INTER_6:
      wiper->eState = INTER_ON;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2205      	movs	r2, #5
 80081e0:	705a      	strb	r2, [r3, #1]
      break;
 80081e2:	e000      	b.n	80081e6 <FastOn+0x132>
      break;
 80081e4:	bf00      	nop
    }
    break;
 80081e6:	e003      	b.n	80081f0 <FastOn+0x13c>
    break;
 80081e8:	bf00      	nop
 80081ea:	e002      	b.n	80081f2 <FastOn+0x13e>
    break;
 80081ec:	bf00      	nop
 80081ee:	e000      	b.n	80081f2 <FastOn+0x13e>
    break;
 80081f0:	bf00      	nop
  }

  //Wash turned on
  if(*wiper->pWashInput)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d006      	beq.n	800820a <FastOn+0x156>
  {
    wiper->eStatePreWash = INTER_PAUSE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2204      	movs	r2, #4
 8008200:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    wiper->eState = WASH;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2206      	movs	r2, #6
 8008208:	705a      	strb	r2, [r3, #1]
  }
}
 800820a:	bf00      	nop
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop

08008218 <InterOn>:

static void InterOn(Wiper_t* wiper)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  wiper->eLastState = wiper->eState;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	785a      	ldrb	r2, [r3, #1]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  //Set motor to slow speed
  wiper->nSlowOut = 1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	805a      	strh	r2, [r3, #2]
  wiper->nFastOut = 0;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	809a      	strh	r2, [r3, #4]

  switch(wiper->eMode){
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d060      	beq.n	8008300 <InterOn+0xe8>
 800823e:	2b02      	cmp	r3, #2
 8008240:	f300 809b 	bgt.w	800837a <InterOn+0x162>
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <InterOn+0x36>
 8008248:	2b01      	cmp	r3, #1
 800824a:	d025      	beq.n	8008298 <InterOn+0x80>
 800824c:	e095      	b.n	800837a <InterOn+0x162>
  case MODE_DIG_IN:
    if(!(*wiper->pInterInput)){
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d102      	bne.n	800825e <InterOn+0x46>
      wiper->eState = PARKING;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pSlowInput){
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d008      	beq.n	800827a <InterOn+0x62>
      wiper->nSlowOut = 1;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pFastInput){
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d075      	beq.n	8008370 <InterOn+0x158>
      wiper->nSlowOut = 1;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2203      	movs	r2, #3
 8008294:	705a      	strb	r2, [r3, #1]
    }

    break;
 8008296:	e06b      	b.n	8008370 <InterOn+0x158>

  case MODE_INT_IN:
    //Speed changed
    switch(wiper->eSelectedSpeed)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d868      	bhi.n	8008374 <InterOn+0x15c>
 80082a2:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <InterOn+0x90>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082cd 	.word	0x080082cd
 80082ac:	080082d5 	.word	0x080082d5
 80082b0:	080082e9 	.word	0x080082e9
 80082b4:	080082fd 	.word	0x080082fd
 80082b8:	080082fd 	.word	0x080082fd
 80082bc:	080082fd 	.word	0x080082fd
 80082c0:	080082fd 	.word	0x080082fd
 80082c4:	080082fd 	.word	0x080082fd
 80082c8:	080082fd 	.word	0x080082fd
    {
    case PARK:
      wiper->eState = PARKING;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	705a      	strb	r2, [r3, #1]
      break;
 80082d2:	e014      	b.n	80082fe <InterOn+0xe6>

    case SLOW:
      wiper->nSlowOut = 1;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2202      	movs	r2, #2
 80082e4:	705a      	strb	r2, [r3, #1]
      break;
 80082e6:	e00a      	b.n	80082fe <InterOn+0xe6>

    case FAST:
      wiper->nSlowOut = 1;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2203      	movs	r2, #3
 80082f8:	705a      	strb	r2, [r3, #1]
      break;
 80082fa:	e000      	b.n	80082fe <InterOn+0xe6>

    case INTER_1 ... INTER_6:
      //Do nothing
      break;
 80082fc:	bf00      	nop
    }
    break;
 80082fe:	e039      	b.n	8008374 <InterOn+0x15c>

  case MODE_MIX_IN:
    //Wipers turned off - park
    if(!(*wiper->pOnSw))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d102      	bne.n	8008310 <InterOn+0xf8>
    {
      wiper->eState = PARKING;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	705a      	strb	r2, [r3, #1]
    }

    //Speed changed
    switch(wiper->eSelectedSpeed)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008316:	2b08      	cmp	r3, #8
 8008318:	d82e      	bhi.n	8008378 <InterOn+0x160>
 800831a:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <InterOn+0x108>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	0800836d 	.word	0x0800836d
 8008324:	08008345 	.word	0x08008345
 8008328:	08008359 	.word	0x08008359
 800832c:	0800836d 	.word	0x0800836d
 8008330:	0800836d 	.word	0x0800836d
 8008334:	0800836d 	.word	0x0800836d
 8008338:	0800836d 	.word	0x0800836d
 800833c:	0800836d 	.word	0x0800836d
 8008340:	0800836d 	.word	0x0800836d
    {
    case PARK:
      //Do nothing
      break;
    case SLOW:
      wiper->nSlowOut = 1;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	705a      	strb	r2, [r3, #1]
      break;
 8008356:	e00a      	b.n	800836e <InterOn+0x156>

    case FAST:
      wiper->nSlowOut = 1;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2203      	movs	r2, #3
 8008368:	705a      	strb	r2, [r3, #1]
      break;
 800836a:	e000      	b.n	800836e <InterOn+0x156>
      break;
 800836c:	bf00      	nop

    case INTER_1 ... INTER_6:
      //Do nothing
      break;
    }
    break;
 800836e:	e003      	b.n	8008378 <InterOn+0x160>
    break;
 8008370:	bf00      	nop
 8008372:	e002      	b.n	800837a <InterOn+0x162>
    break;
 8008374:	bf00      	nop
 8008376:	e000      	b.n	800837a <InterOn+0x162>
    break;
 8008378:	bf00      	nop
  }

  //Park detected
  //Stop motor
  //Save time - pause for set time
  if(!(*wiper->pParkSw))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10d      	bne.n	80083a0 <InterOn+0x188>
  {
    wiper->nSlowOut = 0;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	809a      	strh	r2, [r3, #4]
    wiper->nInterPauseStartTime = HAL_GetTick();
 8008390:	f000 fa26 	bl	80087e0 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	645a      	str	r2, [r3, #68]	; 0x44
    wiper->eState = INTER_PAUSE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2204      	movs	r2, #4
 800839e:	705a      	strb	r2, [r3, #1]
  }

  //Wash turned on
  if(*wiper->pWashInput)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	69db      	ldr	r3, [r3, #28]
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d006      	beq.n	80083b8 <InterOn+0x1a0>
  {
    wiper->eStatePreWash = INTER_ON;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2205      	movs	r2, #5
 80083ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    wiper->eState = WASH;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2206      	movs	r2, #6
 80083b6:	705a      	strb	r2, [r3, #1]
  }
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <InterPause>:

static void InterPause(Wiper_t* wiper)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  wiper->eLastState = wiper->eState;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	785a      	ldrb	r2, [r3, #1]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  //Stop motor
  wiper->nSlowOut = 0;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	805a      	strh	r2, [r3, #2]
  wiper->nFastOut = 0;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	809a      	strh	r2, [r3, #4]

  switch(wiper->eMode){
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d060      	beq.n	80084a8 <InterPause+0xe8>
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	f300 809b 	bgt.w	8008522 <InterPause+0x162>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <InterPause+0x36>
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d025      	beq.n	8008440 <InterPause+0x80>
 80083f4:	e095      	b.n	8008522 <InterPause+0x162>
  case MODE_DIG_IN:
    if(!(*wiper->pInterInput)){
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d102      	bne.n	8008406 <InterPause+0x46>
      wiper->eState = PARKING;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pSlowInput){
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d008      	beq.n	8008422 <InterPause+0x62>
      wiper->nSlowOut = 1;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2202      	movs	r2, #2
 8008420:	705a      	strb	r2, [r3, #1]
    }

    if(*wiper->pFastInput){
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d075      	beq.n	8008518 <InterPause+0x158>
      wiper->nSlowOut = 1;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2203      	movs	r2, #3
 800843c:	705a      	strb	r2, [r3, #1]
    }

    break;
 800843e:	e06b      	b.n	8008518 <InterPause+0x158>

  case MODE_INT_IN:
    //Speed changed
    switch(wiper->eSelectedSpeed)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008446:	2b08      	cmp	r3, #8
 8008448:	d868      	bhi.n	800851c <InterPause+0x15c>
 800844a:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <InterPause+0x90>)
 800844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008450:	08008475 	.word	0x08008475
 8008454:	0800847d 	.word	0x0800847d
 8008458:	08008491 	.word	0x08008491
 800845c:	080084a5 	.word	0x080084a5
 8008460:	080084a5 	.word	0x080084a5
 8008464:	080084a5 	.word	0x080084a5
 8008468:	080084a5 	.word	0x080084a5
 800846c:	080084a5 	.word	0x080084a5
 8008470:	080084a5 	.word	0x080084a5
    {
    case PARK:
      wiper->eState = PARKING;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	705a      	strb	r2, [r3, #1]
      break;
 800847a:	e014      	b.n	80084a6 <InterPause+0xe6>

    case SLOW:
      wiper->nSlowOut = 1;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	705a      	strb	r2, [r3, #1]
      break;
 800848e:	e00a      	b.n	80084a6 <InterPause+0xe6>

    case FAST:
      wiper->nSlowOut = 1;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2203      	movs	r2, #3
 80084a0:	705a      	strb	r2, [r3, #1]
      break;
 80084a2:	e000      	b.n	80084a6 <InterPause+0xe6>

    case INTER_1 ... INTER_6:
      //Do nothing
      break;
 80084a4:	bf00      	nop
    }
    break;
 80084a6:	e039      	b.n	800851c <InterPause+0x15c>

  case MODE_MIX_IN:
    //Wipers turned off - park (should already be parked)
    if(!(*wiper->pOnSw))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d102      	bne.n	80084b8 <InterPause+0xf8>
    {
      wiper->eState = PARKING;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	705a      	strb	r2, [r3, #1]
    }

    //Speed changed
    switch(wiper->eSelectedSpeed)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084be:	2b08      	cmp	r3, #8
 80084c0:	d82e      	bhi.n	8008520 <InterPause+0x160>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <InterPause+0x108>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	08008515 	.word	0x08008515
 80084cc:	080084ed 	.word	0x080084ed
 80084d0:	08008501 	.word	0x08008501
 80084d4:	08008515 	.word	0x08008515
 80084d8:	08008515 	.word	0x08008515
 80084dc:	08008515 	.word	0x08008515
 80084e0:	08008515 	.word	0x08008515
 80084e4:	08008515 	.word	0x08008515
 80084e8:	08008515 	.word	0x08008515
    {
    case PARK:
      //Do nothing
      break;
    case SLOW:
      wiper->nSlowOut = 1;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 0;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	809a      	strh	r2, [r3, #4]
      wiper->eState = SLOW_ON;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	705a      	strb	r2, [r3, #1]
      break;
 80084fe:	e00a      	b.n	8008516 <InterPause+0x156>

    case FAST:
      wiper->nSlowOut = 1;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	805a      	strh	r2, [r3, #2]
      wiper->nFastOut = 1;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	809a      	strh	r2, [r3, #4]
      wiper->eState = FAST_ON;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2203      	movs	r2, #3
 8008510:	705a      	strb	r2, [r3, #1]
      break;
 8008512:	e000      	b.n	8008516 <InterPause+0x156>
      break;
 8008514:	bf00      	nop

    case INTER_1 ... INTER_6:
      //Do nothing
      break;
    }
    break;
 8008516:	e003      	b.n	8008520 <InterPause+0x160>
    break;
 8008518:	bf00      	nop
 800851a:	e002      	b.n	8008522 <InterPause+0x162>
    break;
 800851c:	bf00      	nop
 800851e:	e000      	b.n	8008522 <InterPause+0x162>
    break;
 8008520:	bf00      	nop
  }

  //Copy inter delay to local variable
  uint16_t nDelay;
  switch(wiper->eSelectedSpeed)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008528:	2b08      	cmp	r3, #8
 800852a:	d82d      	bhi.n	8008588 <InterPause+0x1c8>
 800852c:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <InterPause+0x174>)
 800852e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008532:	bf00      	nop
 8008534:	08008589 	.word	0x08008589
 8008538:	08008589 	.word	0x08008589
 800853c:	08008589 	.word	0x08008589
 8008540:	08008559 	.word	0x08008559
 8008544:	08008561 	.word	0x08008561
 8008548:	08008569 	.word	0x08008569
 800854c:	08008571 	.word	0x08008571
 8008550:	08008579 	.word	0x08008579
 8008554:	08008581 	.word	0x08008581
    break;
  case FAST:
    //Do nothing
    break;
  case INTER_1:
    nDelay = wiper->nInterDelays[0];
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	899b      	ldrh	r3, [r3, #12]
 800855c:	81fb      	strh	r3, [r7, #14]
    break;
 800855e:	e013      	b.n	8008588 <InterPause+0x1c8>
  case INTER_2:
    nDelay = wiper->nInterDelays[1];
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	89db      	ldrh	r3, [r3, #14]
 8008564:	81fb      	strh	r3, [r7, #14]
    break;
 8008566:	e00f      	b.n	8008588 <InterPause+0x1c8>
  case INTER_3:
    nDelay = wiper->nInterDelays[2];
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	8a1b      	ldrh	r3, [r3, #16]
 800856c:	81fb      	strh	r3, [r7, #14]
    break;
 800856e:	e00b      	b.n	8008588 <InterPause+0x1c8>
  case INTER_4:
    nDelay = wiper->nInterDelays[3];
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	8a5b      	ldrh	r3, [r3, #18]
 8008574:	81fb      	strh	r3, [r7, #14]
    break;
 8008576:	e007      	b.n	8008588 <InterPause+0x1c8>
  case INTER_5:
    nDelay = wiper->nInterDelays[4];
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	8a9b      	ldrh	r3, [r3, #20]
 800857c:	81fb      	strh	r3, [r7, #14]
    break;
 800857e:	e003      	b.n	8008588 <InterPause+0x1c8>
  case INTER_6:
    nDelay = wiper->nInterDelays[5];
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	8adb      	ldrh	r3, [r3, #22]
 8008584:	81fb      	strh	r3, [r7, #14]
    break;
 8008586:	bf00      	nop
  }

  //Pause for inter delay
  if((HAL_GetTick() - wiper->nInterPauseStartTime) > nDelay)
 8008588:	f000 f92a 	bl	80087e0 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008592:	1ad2      	subs	r2, r2, r3
 8008594:	89fb      	ldrh	r3, [r7, #14]
 8008596:	429a      	cmp	r2, r3
 8008598:	d908      	bls.n	80085ac <InterPause+0x1ec>
  {
    wiper->nSlowOut = 1;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	809a      	strh	r2, [r3, #4]
    wiper->eState = INTER_ON;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2205      	movs	r2, #5
 80085aa:	705a      	strb	r2, [r3, #1]
  }

  //Wash turned on
  if(*wiper->pWashInput)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d006      	beq.n	80085c4 <InterPause+0x204>
  {
    wiper->eStatePreWash = INTER_PAUSE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2204      	movs	r2, #4
 80085ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    wiper->eState = WASH;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2206      	movs	r2, #6
 80085c2:	705a      	strb	r2, [r3, #1]
  }

}
 80085c4:	bf00      	nop
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <Wash>:

static void Wash(Wiper_t* wiper)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  wiper->eLastState = wiper->eState;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	785a      	ldrb	r2, [r3, #1]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  if(wiper->eStatePreWash == FAST_ON){
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d106      	bne.n	80085f6 <Wash+0x2a>
    wiper->nSlowOut = 1;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 1;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	809a      	strh	r2, [r3, #4]
 80085f4:	e005      	b.n	8008602 <Wash+0x36>
  }else{
    wiper->nSlowOut = 1;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	805a      	strh	r2, [r3, #2]
    wiper->nFastOut = 0;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	809a      	strh	r2, [r3, #4]
  }

  if(*wiper->pWashInput){
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <Wash+0x4a>
    wiper->nWashWipeCount = 0;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8008614:	e046      	b.n	80086a4 <Wash+0xd8>
  }
  else{
    if(!(*wiper->pParkSw) && (*wiper->pParkSw != wiper->nLastParkSw))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	881b      	ldrh	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10f      	bne.n	8008640 <Wash+0x74>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	881a      	ldrh	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800862c:	429a      	cmp	r2, r3
 800862e:	d007      	beq.n	8008640 <Wash+0x74>
    {
      wiper->nWashWipeCount++;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008636:	3301      	adds	r3, #1
 8008638:	b2da      	uxtb	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    if(wiper->nWashWipeCount >= wiper->nWashWipeCycles){
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800864c:	429a      	cmp	r2, r3
 800864e:	d329      	bcc.n	80086a4 <Wash+0xd8>
      if(wiper->eStatePreWash == PARKED || wiper->eStatePreWash == PARKING)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008656:	2b00      	cmp	r3, #0
 8008658:	d004      	beq.n	8008664 <Wash+0x98>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008660:	2b01      	cmp	r3, #1
 8008662:	d102      	bne.n	800866a <Wash+0x9e>
        wiper->eState = PARKING;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	705a      	strb	r2, [r3, #1]
      if(wiper->eStatePreWash == INTER_PAUSE || wiper->eStatePreWash == INTER_ON)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008670:	2b04      	cmp	r3, #4
 8008672:	d004      	beq.n	800867e <Wash+0xb2>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800867a:	2b05      	cmp	r3, #5
 800867c:	d102      	bne.n	8008684 <Wash+0xb8>
        wiper->eState = INTER_ON;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2205      	movs	r2, #5
 8008682:	705a      	strb	r2, [r3, #1]
      if(wiper->eStatePreWash == SLOW_ON)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800868a:	2b02      	cmp	r3, #2
 800868c:	d102      	bne.n	8008694 <Wash+0xc8>
        wiper->eState = SLOW_ON;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2202      	movs	r2, #2
 8008692:	705a      	strb	r2, [r3, #1]
      if(wiper->eStatePreWash == FAST_ON)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800869a:	2b03      	cmp	r3, #3
 800869c:	d102      	bne.n	80086a4 <Wash+0xd8>
        wiper->eState = FAST_ON;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2203      	movs	r2, #3
 80086a2:	705a      	strb	r2, [r3, #1]
    }
  }
  wiper->nLastParkSw = *wiper->pParkSw;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	881a      	ldrh	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <Swipe>:

static void Swipe(Wiper_t* wiper)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  wiper->eLastState = wiper->eState;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	785a      	ldrb	r2, [r3, #1]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  //Swipe fast
  wiper->nSlowOut = 1;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	805a      	strh	r2, [r3, #2]
  wiper->nFastOut = 1;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	809a      	strh	r2, [r3, #4]

  //Park switch high
  //Moved past park position
  if(*wiper->pParkSw){
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <Swipe+0x2e>
    wiper->eState = PARKING;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	705a      	strb	r2, [r3, #1]
  }


}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
	...

080086f8 <WiperSM>:

void WiperSM(Wiper_t* wiper)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  wiper->eSelectedSpeed = wiper->eSpeedMap[*wiper->pSpeedInput];
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4413      	add	r3, r2
 800870c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch(wiper->eState)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	785b      	ldrb	r3, [r3, #1]
 800871a:	2b07      	cmp	r3, #7
 800871c:	d832      	bhi.n	8008784 <WiperSM+0x8c>
 800871e:	a201      	add	r2, pc, #4	; (adr r2, 8008724 <WiperSM+0x2c>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	08008745 	.word	0x08008745
 8008728:	0800874d 	.word	0x0800874d
 800872c:	08008755 	.word	0x08008755
 8008730:	0800875d 	.word	0x0800875d
 8008734:	0800876d 	.word	0x0800876d
 8008738:	08008765 	.word	0x08008765
 800873c:	08008775 	.word	0x08008775
 8008740:	0800877d 	.word	0x0800877d
  {
  case PARKED:
    Parked(wiper);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff fac3 	bl	8007cd0 <Parked>
    break;
 800874a:	e01b      	b.n	8008784 <WiperSM+0x8c>

  case PARKING:
    Parking(wiper);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff fb9f 	bl	8007e90 <Parking>
    break;
 8008752:	e017      	b.n	8008784 <WiperSM+0x8c>

  case SLOW_ON:
    SlowOn(wiper);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7ff fbfb 	bl	8007f50 <SlowOn>
    break;
 800875a:	e013      	b.n	8008784 <WiperSM+0x8c>

  case FAST_ON:
    FastOn(wiper);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff fca9 	bl	80080b4 <FastOn>
    break;
 8008762:	e00f      	b.n	8008784 <WiperSM+0x8c>

  case INTER_ON:
    InterOn(wiper);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff fd57 	bl	8008218 <InterOn>
    break;
 800876a:	e00b      	b.n	8008784 <WiperSM+0x8c>

  case INTER_PAUSE:
    InterPause(wiper);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff fe27 	bl	80083c0 <InterPause>
    break;
 8008772:	e007      	b.n	8008784 <WiperSM+0x8c>

  case WASH:
    Wash(wiper);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7ff ff29 	bl	80085cc <Wash>
    break;
 800877a:	e003      	b.n	8008784 <WiperSM+0x8c>

  case SWIPE:
    Swipe(wiper);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7ff ff9d 	bl	80086bc <Swipe>
    break;
 8008782:	bf00      	nop
  }
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008790:	4b08      	ldr	r3, [pc, #32]	; (80087b4 <HAL_Init+0x28>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a07      	ldr	r2, [pc, #28]	; (80087b4 <HAL_Init+0x28>)
 8008796:	f043 0310 	orr.w	r3, r3, #16
 800879a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800879c:	2003      	movs	r0, #3
 800879e:	f001 ff4c 	bl	800a63a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80087a2:	2000      	movs	r0, #0
 80087a4:	f7fe f824 	bl	80067f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80087a8:	f7fd fe06 	bl	80063b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	40022000 	.word	0x40022000

080087b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087b8:	b480      	push	{r7}
 80087ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <HAL_IncTick+0x20>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	4b06      	ldr	r3, [pc, #24]	; (80087dc <HAL_IncTick+0x24>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4413      	add	r3, r2
 80087c8:	4a04      	ldr	r2, [pc, #16]	; (80087dc <HAL_IncTick+0x24>)
 80087ca:	6013      	str	r3, [r2, #0]
}
 80087cc:	bf00      	nop
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	20000018 	.word	0x20000018
 80087dc:	200026e8 	.word	0x200026e8

080087e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80087e4:	4b03      	ldr	r3, [pc, #12]	; (80087f4 <HAL_GetTick+0x14>)
 80087e6:	681b      	ldr	r3, [r3, #0]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	200026e8 	.word	0x200026e8

080087f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b09a      	sub	sp, #104	; 0x68
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e1c9      	b.n	8008be8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	f003 0310 	and.w	r3, r3, #16
 8008862:	2b00      	cmp	r3, #0
 8008864:	d176      	bne.n	8008954 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	2b00      	cmp	r3, #0
 800886c:	d152      	bne.n	8008914 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7fd fdbd 	bl	8006408 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d13b      	bne.n	8008914 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 ff6d 	bl	800977c <ADC_Disable>
 80088a2:	4603      	mov	r3, r0
 80088a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ac:	f003 0310 	and.w	r3, r3, #16
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d12f      	bne.n	8008914 <HAL_ADC_Init+0xe0>
 80088b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d12b      	bne.n	8008914 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80088c4:	f023 0302 	bic.w	r3, r3, #2
 80088c8:	f043 0202 	orr.w	r2, r3, #2
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689a      	ldr	r2, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80088de:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689a      	ldr	r2, [r3, #8]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80088ee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80088f0:	4b86      	ldr	r3, [pc, #536]	; (8008b0c <HAL_ADC_Init+0x2d8>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a86      	ldr	r2, [pc, #536]	; (8008b10 <HAL_ADC_Init+0x2dc>)
 80088f6:	fba2 2303 	umull	r2, r3, r2, r3
 80088fa:	0c9a      	lsrs	r2, r3, #18
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008906:	e002      	b.n	800890e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	3b01      	subs	r3, #1
 800890c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1f9      	bne.n	8008908 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d007      	beq.n	8008932 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800892c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008930:	d110      	bne.n	8008954 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008936:	f023 0312 	bic.w	r3, r3, #18
 800893a:	f043 0210 	orr.w	r2, r3, #16
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008946:	f043 0201 	orr.w	r2, r3, #1
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	f003 0310 	and.w	r3, r3, #16
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 8136 	bne.w	8008bce <HAL_ADC_Init+0x39a>
 8008962:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008966:	2b00      	cmp	r3, #0
 8008968:	f040 8131 	bne.w	8008bce <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8008976:	2b00      	cmp	r3, #0
 8008978:	f040 8129 	bne.w	8008bce <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008980:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008984:	f043 0202 	orr.w	r2, r3, #2
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008994:	d004      	beq.n	80089a0 <HAL_ADC_Init+0x16c>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a5e      	ldr	r2, [pc, #376]	; (8008b14 <HAL_ADC_Init+0x2e0>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d101      	bne.n	80089a4 <HAL_ADC_Init+0x170>
 80089a0:	4b5d      	ldr	r3, [pc, #372]	; (8008b18 <HAL_ADC_Init+0x2e4>)
 80089a2:	e000      	b.n	80089a6 <HAL_ADC_Init+0x172>
 80089a4:	4b5d      	ldr	r3, [pc, #372]	; (8008b1c <HAL_ADC_Init+0x2e8>)
 80089a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089b0:	d102      	bne.n	80089b8 <HAL_ADC_Init+0x184>
 80089b2:	4b58      	ldr	r3, [pc, #352]	; (8008b14 <HAL_ADC_Init+0x2e0>)
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	e01a      	b.n	80089ee <HAL_ADC_Init+0x1ba>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a55      	ldr	r2, [pc, #340]	; (8008b14 <HAL_ADC_Init+0x2e0>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d103      	bne.n	80089ca <HAL_ADC_Init+0x196>
 80089c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	e011      	b.n	80089ee <HAL_ADC_Init+0x1ba>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a54      	ldr	r2, [pc, #336]	; (8008b20 <HAL_ADC_Init+0x2ec>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d102      	bne.n	80089da <HAL_ADC_Init+0x1a6>
 80089d4:	4b53      	ldr	r3, [pc, #332]	; (8008b24 <HAL_ADC_Init+0x2f0>)
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	e009      	b.n	80089ee <HAL_ADC_Init+0x1ba>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a51      	ldr	r2, [pc, #324]	; (8008b24 <HAL_ADC_Init+0x2f0>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d102      	bne.n	80089ea <HAL_ADC_Init+0x1b6>
 80089e4:	4b4e      	ldr	r3, [pc, #312]	; (8008b20 <HAL_ADC_Init+0x2ec>)
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	e001      	b.n	80089ee <HAL_ADC_Init+0x1ba>
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f003 0303 	and.w	r3, r3, #3
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d108      	bne.n	8008a0e <HAL_ADC_Init+0x1da>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d101      	bne.n	8008a0e <HAL_ADC_Init+0x1da>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <HAL_ADC_Init+0x1dc>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d11c      	bne.n	8008a4e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8008a14:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d010      	beq.n	8008a3c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f003 0303 	and.w	r3, r3, #3
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d107      	bne.n	8008a36 <HAL_ADC_Init+0x202>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d101      	bne.n	8008a36 <HAL_ADC_Init+0x202>
 8008a32:	2301      	movs	r3, #1
 8008a34:	e000      	b.n	8008a38 <HAL_ADC_Init+0x204>
 8008a36:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d108      	bne.n	8008a4e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8008a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a4c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	7e5b      	ldrb	r3, [r3, #25]
 8008a52:	035b      	lsls	r3, r3, #13
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a58:	2a01      	cmp	r2, #1
 8008a5a:	d002      	beq.n	8008a62 <HAL_ADC_Init+0x22e>
 8008a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008a60:	e000      	b.n	8008a64 <HAL_ADC_Init+0x230>
 8008a62:	2200      	movs	r2, #0
 8008a64:	431a      	orrs	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a74:	4313      	orrs	r3, r2
 8008a76:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d11b      	bne.n	8008aba <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	7e5b      	ldrb	r3, [r3, #25]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d109      	bne.n	8008a9e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	045a      	lsls	r2, r3, #17
 8008a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a94:	4313      	orrs	r3, r2
 8008a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a9a:	663b      	str	r3, [r7, #96]	; 0x60
 8008a9c:	e00d      	b.n	8008aba <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008aa6:	f043 0220 	orr.w	r2, r3, #32
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab2:	f043 0201 	orr.w	r2, r3, #1
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d03a      	beq.n	8008b38 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a16      	ldr	r2, [pc, #88]	; (8008b20 <HAL_ADC_Init+0x2ec>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d004      	beq.n	8008ad6 <HAL_ADC_Init+0x2a2>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a14      	ldr	r2, [pc, #80]	; (8008b24 <HAL_ADC_Init+0x2f0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d128      	bne.n	8008b28 <HAL_ADC_Init+0x2f4>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ada:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8008ade:	d012      	beq.n	8008b06 <HAL_ADC_Init+0x2d2>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ae8:	d00a      	beq.n	8008b00 <HAL_ADC_Init+0x2cc>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aee:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8008af2:	d002      	beq.n	8008afa <HAL_ADC_Init+0x2c6>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af8:	e018      	b.n	8008b2c <HAL_ADC_Init+0x2f8>
 8008afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008afe:	e015      	b.n	8008b2c <HAL_ADC_Init+0x2f8>
 8008b00:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8008b04:	e012      	b.n	8008b2c <HAL_ADC_Init+0x2f8>
 8008b06:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8008b0a:	e00f      	b.n	8008b2c <HAL_ADC_Init+0x2f8>
 8008b0c:	20000010 	.word	0x20000010
 8008b10:	431bde83 	.word	0x431bde83
 8008b14:	50000100 	.word	0x50000100
 8008b18:	50000300 	.word	0x50000300
 8008b1c:	50000700 	.word	0x50000700
 8008b20:	50000400 	.word	0x50000400
 8008b24:	50000500 	.word	0x50000500
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008b30:	4313      	orrs	r3, r2
 8008b32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b34:	4313      	orrs	r3, r2
 8008b36:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f003 030c 	and.w	r3, r3, #12
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d114      	bne.n	8008b70 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	6812      	ldr	r2, [r2, #0]
 8008b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b54:	f023 0302 	bic.w	r3, r3, #2
 8008b58:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	7e1b      	ldrb	r3, [r3, #24]
 8008b5e:	039a      	lsls	r2, r3, #14
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	4b1e      	ldr	r3, [pc, #120]	; (8008bf0 <HAL_ADC_Init+0x3bc>)
 8008b78:	4013      	ands	r3, r2
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	6812      	ldr	r2, [r2, #0]
 8008b7e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008b80:	430b      	orrs	r3, r1
 8008b82:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d10c      	bne.n	8008ba6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b92:	f023 010f 	bic.w	r1, r3, #15
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	1e5a      	subs	r2, r3, #1
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ba4:	e007      	b.n	8008bb6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f022 020f 	bic.w	r2, r2, #15
 8008bb4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc0:	f023 0303 	bic.w	r3, r3, #3
 8008bc4:	f043 0201 	orr.w	r2, r3, #1
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	641a      	str	r2, [r3, #64]	; 0x40
 8008bcc:	e00a      	b.n	8008be4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd2:	f023 0312 	bic.w	r3, r3, #18
 8008bd6:	f043 0210 	orr.w	r2, r3, #16
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8008bde:	2301      	movs	r3, #1
 8008be0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8008be4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3768      	adds	r7, #104	; 0x68
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	fff0c007 	.word	0xfff0c007

08008bf4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f040 80f7 	bne.w	8008e02 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d101      	bne.n	8008c22 <HAL_ADC_Start_DMA+0x2e>
 8008c1e:	2302      	movs	r3, #2
 8008c20:	e0f2      	b.n	8008e08 <HAL_ADC_Start_DMA+0x214>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c32:	d004      	beq.n	8008c3e <HAL_ADC_Start_DMA+0x4a>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a75      	ldr	r2, [pc, #468]	; (8008e10 <HAL_ADC_Start_DMA+0x21c>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d109      	bne.n	8008c52 <HAL_ADC_Start_DMA+0x5e>
 8008c3e:	4b75      	ldr	r3, [pc, #468]	; (8008e14 <HAL_ADC_Start_DMA+0x220>)
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f003 031f 	and.w	r3, r3, #31
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	bf0c      	ite	eq
 8008c4a:	2301      	moveq	r3, #1
 8008c4c:	2300      	movne	r3, #0
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	e008      	b.n	8008c64 <HAL_ADC_Start_DMA+0x70>
 8008c52:	4b71      	ldr	r3, [pc, #452]	; (8008e18 <HAL_ADC_Start_DMA+0x224>)
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 031f 	and.w	r3, r3, #31
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	bf0c      	ite	eq
 8008c5e:	2301      	moveq	r3, #1
 8008c60:	2300      	movne	r3, #0
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f000 80c5 	beq.w	8008df4 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 fd22 	bl	80096b4 <ADC_Enable>
 8008c70:	4603      	mov	r3, r0
 8008c72:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f040 80b7 	bne.w	8008dea <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008c84:	f023 0301 	bic.w	r3, r3, #1
 8008c88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c98:	d004      	beq.n	8008ca4 <HAL_ADC_Start_DMA+0xb0>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a5c      	ldr	r2, [pc, #368]	; (8008e10 <HAL_ADC_Start_DMA+0x21c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d106      	bne.n	8008cb2 <HAL_ADC_Start_DMA+0xbe>
 8008ca4:	4b5b      	ldr	r3, [pc, #364]	; (8008e14 <HAL_ADC_Start_DMA+0x220>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f003 031f 	and.w	r3, r3, #31
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d010      	beq.n	8008cd2 <HAL_ADC_Start_DMA+0xde>
 8008cb0:	e005      	b.n	8008cbe <HAL_ADC_Start_DMA+0xca>
 8008cb2:	4b59      	ldr	r3, [pc, #356]	; (8008e18 <HAL_ADC_Start_DMA+0x224>)
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f003 031f 	and.w	r3, r3, #31
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d009      	beq.n	8008cd2 <HAL_ADC_Start_DMA+0xde>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cc6:	d004      	beq.n	8008cd2 <HAL_ADC_Start_DMA+0xde>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a53      	ldr	r2, [pc, #332]	; (8008e1c <HAL_ADC_Start_DMA+0x228>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d115      	bne.n	8008cfe <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d036      	beq.n	8008d5a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008cf4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8008cfc:	e02d      	b.n	8008d5a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d12:	d004      	beq.n	8008d1e <HAL_ADC_Start_DMA+0x12a>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a3d      	ldr	r2, [pc, #244]	; (8008e10 <HAL_ADC_Start_DMA+0x21c>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d10a      	bne.n	8008d34 <HAL_ADC_Start_DMA+0x140>
 8008d1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	bf14      	ite	ne
 8008d2c:	2301      	movne	r3, #1
 8008d2e:	2300      	moveq	r3, #0
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	e008      	b.n	8008d46 <HAL_ADC_Start_DMA+0x152>
 8008d34:	4b39      	ldr	r3, [pc, #228]	; (8008e1c <HAL_ADC_Start_DMA+0x228>)
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	bf14      	ite	ne
 8008d40:	2301      	movne	r3, #1
 8008d42:	2300      	moveq	r3, #0
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d007      	beq.n	8008d5a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008d52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d66:	d106      	bne.n	8008d76 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6c:	f023 0206 	bic.w	r2, r3, #6
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	645a      	str	r2, [r3, #68]	; 0x44
 8008d74:	e002      	b.n	8008d7c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d88:	4a25      	ldr	r2, [pc, #148]	; (8008e20 <HAL_ADC_Start_DMA+0x22c>)
 8008d8a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d90:	4a24      	ldr	r2, [pc, #144]	; (8008e24 <HAL_ADC_Start_DMA+0x230>)
 8008d92:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d98:	4a23      	ldr	r2, [pc, #140]	; (8008e28 <HAL_ADC_Start_DMA+0x234>)
 8008d9a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	221c      	movs	r2, #28
 8008da2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f042 0210 	orr.w	r2, r2, #16
 8008db2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68da      	ldr	r2, [r3, #12]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f042 0201 	orr.w	r2, r2, #1
 8008dc2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3340      	adds	r3, #64	; 0x40
 8008dce:	4619      	mov	r1, r3
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f001 fd97 	bl	800a906 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689a      	ldr	r2, [r3, #8]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0204 	orr.w	r2, r2, #4
 8008de6:	609a      	str	r2, [r3, #8]
 8008de8:	e00d      	b.n	8008e06 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008df2:	e008      	b.n	8008e06 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008e00:	e001      	b.n	8008e06 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008e02:	2302      	movs	r3, #2
 8008e04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3718      	adds	r7, #24
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	50000100 	.word	0x50000100
 8008e14:	50000300 	.word	0x50000300
 8008e18:	50000700 	.word	0x50000700
 8008e1c:	50000400 	.word	0x50000400
 8008e20:	080095e9 	.word	0x080095e9
 8008e24:	08009663 	.word	0x08009663
 8008e28:	0800967f 	.word	0x0800967f

08008e2c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b09b      	sub	sp, #108	; 0x6c
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d101      	bne.n	8008e4e <HAL_ADC_ConfigChannel+0x22>
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	e2ca      	b.n	80093e4 <HAL_ADC_ConfigChannel+0x5b8>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f040 82ae 	bne.w	80093c2 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2b04      	cmp	r3, #4
 8008e6c:	d81c      	bhi.n	8008ea8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	4413      	add	r3, r2
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	461a      	mov	r2, r3
 8008e82:	231f      	movs	r3, #31
 8008e84:	4093      	lsls	r3, r2
 8008e86:	43db      	mvns	r3, r3
 8008e88:	4019      	ands	r1, r3
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	6818      	ldr	r0, [r3, #0]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	4613      	mov	r3, r2
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	4413      	add	r3, r2
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8008ea6:	e063      	b.n	8008f70 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	2b09      	cmp	r3, #9
 8008eae:	d81e      	bhi.n	8008eee <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	4413      	add	r3, r2
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	3b1e      	subs	r3, #30
 8008ec4:	221f      	movs	r2, #31
 8008ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eca:	43db      	mvns	r3, r3
 8008ecc:	4019      	ands	r1, r3
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	4413      	add	r3, r2
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	3b1e      	subs	r3, #30
 8008ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	635a      	str	r2, [r3, #52]	; 0x34
 8008eec:	e040      	b.n	8008f70 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	2b0e      	cmp	r3, #14
 8008ef4:	d81e      	bhi.n	8008f34 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	4613      	mov	r3, r2
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	4413      	add	r3, r2
 8008f06:	005b      	lsls	r3, r3, #1
 8008f08:	3b3c      	subs	r3, #60	; 0x3c
 8008f0a:	221f      	movs	r2, #31
 8008f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f10:	43db      	mvns	r3, r3
 8008f12:	4019      	ands	r1, r3
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	4413      	add	r3, r2
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	3b3c      	subs	r3, #60	; 0x3c
 8008f26:	fa00 f203 	lsl.w	r2, r0, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	430a      	orrs	r2, r1
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38
 8008f32:	e01d      	b.n	8008f70 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	4413      	add	r3, r2
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	3b5a      	subs	r3, #90	; 0x5a
 8008f48:	221f      	movs	r2, #31
 8008f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4e:	43db      	mvns	r3, r3
 8008f50:	4019      	ands	r1, r3
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	685a      	ldr	r2, [r3, #4]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	4413      	add	r3, r2
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	3b5a      	subs	r3, #90	; 0x5a
 8008f64:	fa00 f203 	lsl.w	r2, r0, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f003 030c 	and.w	r3, r3, #12
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f040 80e5 	bne.w	800914a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b09      	cmp	r3, #9
 8008f86:	d91c      	bls.n	8008fc2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6999      	ldr	r1, [r3, #24]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	4613      	mov	r3, r2
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	4413      	add	r3, r2
 8008f98:	3b1e      	subs	r3, #30
 8008f9a:	2207      	movs	r2, #7
 8008f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa0:	43db      	mvns	r3, r3
 8008fa2:	4019      	ands	r1, r3
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	6898      	ldr	r0, [r3, #8]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	4613      	mov	r3, r2
 8008fae:	005b      	lsls	r3, r3, #1
 8008fb0:	4413      	add	r3, r2
 8008fb2:	3b1e      	subs	r3, #30
 8008fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	619a      	str	r2, [r3, #24]
 8008fc0:	e019      	b.n	8008ff6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6959      	ldr	r1, [r3, #20]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	4413      	add	r3, r2
 8008fd2:	2207      	movs	r2, #7
 8008fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd8:	43db      	mvns	r3, r3
 8008fda:	4019      	ands	r1, r3
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	6898      	ldr	r0, [r3, #8]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	4413      	add	r3, r2
 8008fea:	fa00 f203 	lsl.w	r2, r0, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	695a      	ldr	r2, [r3, #20]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	08db      	lsrs	r3, r3, #3
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	fa02 f303 	lsl.w	r3, r2, r3
 800900c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	3b01      	subs	r3, #1
 8009014:	2b03      	cmp	r3, #3
 8009016:	d84f      	bhi.n	80090b8 <HAL_ADC_ConfigChannel+0x28c>
 8009018:	a201      	add	r2, pc, #4	; (adr r2, 8009020 <HAL_ADC_ConfigChannel+0x1f4>)
 800901a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901e:	bf00      	nop
 8009020:	08009031 	.word	0x08009031
 8009024:	08009053 	.word	0x08009053
 8009028:	08009075 	.word	0x08009075
 800902c:	08009097 	.word	0x08009097
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009036:	4b9a      	ldr	r3, [pc, #616]	; (80092a0 <HAL_ADC_ConfigChannel+0x474>)
 8009038:	4013      	ands	r3, r2
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	6812      	ldr	r2, [r2, #0]
 800903e:	0691      	lsls	r1, r2, #26
 8009040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009042:	430a      	orrs	r2, r1
 8009044:	431a      	orrs	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800904e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8009050:	e07e      	b.n	8009150 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009058:	4b91      	ldr	r3, [pc, #580]	; (80092a0 <HAL_ADC_ConfigChannel+0x474>)
 800905a:	4013      	ands	r3, r2
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	6812      	ldr	r2, [r2, #0]
 8009060:	0691      	lsls	r1, r2, #26
 8009062:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009064:	430a      	orrs	r2, r1
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009070:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8009072:	e06d      	b.n	8009150 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800907a:	4b89      	ldr	r3, [pc, #548]	; (80092a0 <HAL_ADC_ConfigChannel+0x474>)
 800907c:	4013      	ands	r3, r2
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	6812      	ldr	r2, [r2, #0]
 8009082:	0691      	lsls	r1, r2, #26
 8009084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009086:	430a      	orrs	r2, r1
 8009088:	431a      	orrs	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009092:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8009094:	e05c      	b.n	8009150 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800909c:	4b80      	ldr	r3, [pc, #512]	; (80092a0 <HAL_ADC_ConfigChannel+0x474>)
 800909e:	4013      	ands	r3, r2
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	6812      	ldr	r2, [r2, #0]
 80090a4:	0691      	lsls	r1, r2, #26
 80090a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090a8:	430a      	orrs	r2, r1
 80090aa:	431a      	orrs	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80090b4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80090b6:	e04b      	b.n	8009150 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	069b      	lsls	r3, r3, #26
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d107      	bne.n	80090dc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80090da:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	069b      	lsls	r3, r3, #26
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d107      	bne.n	8009100 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80090fe:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009106:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	069b      	lsls	r3, r3, #26
 8009110:	429a      	cmp	r2, r3
 8009112:	d107      	bne.n	8009124 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009122:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800912a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	069b      	lsls	r3, r3, #26
 8009134:	429a      	cmp	r2, r3
 8009136:	d10a      	bne.n	800914e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009146:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8009148:	e001      	b.n	800914e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800914a:	bf00      	nop
 800914c:	e000      	b.n	8009150 <HAL_ADC_ConfigChannel+0x324>
      break;
 800914e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f003 0303 	and.w	r3, r3, #3
 800915a:	2b01      	cmp	r3, #1
 800915c:	d108      	bne.n	8009170 <HAL_ADC_ConfigChannel+0x344>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b01      	cmp	r3, #1
 800916a:	d101      	bne.n	8009170 <HAL_ADC_ConfigChannel+0x344>
 800916c:	2301      	movs	r3, #1
 800916e:	e000      	b.n	8009172 <HAL_ADC_ConfigChannel+0x346>
 8009170:	2300      	movs	r3, #0
 8009172:	2b00      	cmp	r3, #0
 8009174:	f040 8130 	bne.w	80093d8 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d00f      	beq.n	80091a0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2201      	movs	r2, #1
 800918e:	fa02 f303 	lsl.w	r3, r2, r3
 8009192:	43da      	mvns	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	400a      	ands	r2, r1
 800919a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800919e:	e049      	b.n	8009234 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2201      	movs	r2, #1
 80091ae:	409a      	lsls	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b09      	cmp	r3, #9
 80091c0:	d91c      	bls.n	80091fc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6999      	ldr	r1, [r3, #24]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	4613      	mov	r3, r2
 80091ce:	005b      	lsls	r3, r3, #1
 80091d0:	4413      	add	r3, r2
 80091d2:	3b1b      	subs	r3, #27
 80091d4:	2207      	movs	r2, #7
 80091d6:	fa02 f303 	lsl.w	r3, r2, r3
 80091da:	43db      	mvns	r3, r3
 80091dc:	4019      	ands	r1, r3
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	6898      	ldr	r0, [r3, #8]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	4613      	mov	r3, r2
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	4413      	add	r3, r2
 80091ec:	3b1b      	subs	r3, #27
 80091ee:	fa00 f203 	lsl.w	r2, r0, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	619a      	str	r2, [r3, #24]
 80091fa:	e01b      	b.n	8009234 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6959      	ldr	r1, [r3, #20]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	4613      	mov	r3, r2
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	4413      	add	r3, r2
 800920e:	2207      	movs	r2, #7
 8009210:	fa02 f303 	lsl.w	r3, r2, r3
 8009214:	43db      	mvns	r3, r3
 8009216:	4019      	ands	r1, r3
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	6898      	ldr	r0, [r3, #8]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	4613      	mov	r3, r2
 8009224:	005b      	lsls	r3, r3, #1
 8009226:	4413      	add	r3, r2
 8009228:	fa00 f203 	lsl.w	r2, r0, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	430a      	orrs	r2, r1
 8009232:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800923c:	d004      	beq.n	8009248 <HAL_ADC_ConfigChannel+0x41c>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a18      	ldr	r2, [pc, #96]	; (80092a4 <HAL_ADC_ConfigChannel+0x478>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d101      	bne.n	800924c <HAL_ADC_ConfigChannel+0x420>
 8009248:	4b17      	ldr	r3, [pc, #92]	; (80092a8 <HAL_ADC_ConfigChannel+0x47c>)
 800924a:	e000      	b.n	800924e <HAL_ADC_ConfigChannel+0x422>
 800924c:	4b17      	ldr	r3, [pc, #92]	; (80092ac <HAL_ADC_ConfigChannel+0x480>)
 800924e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b10      	cmp	r3, #16
 8009256:	d105      	bne.n	8009264 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8009258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8009260:	2b00      	cmp	r3, #0
 8009262:	d015      	beq.n	8009290 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8009268:	2b11      	cmp	r3, #17
 800926a:	d105      	bne.n	8009278 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800926c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00b      	beq.n	8009290 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800927c:	2b12      	cmp	r3, #18
 800927e:	f040 80ab 	bne.w	80093d8 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8009282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800928a:	2b00      	cmp	r3, #0
 800928c:	f040 80a4 	bne.w	80093d8 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009298:	d10a      	bne.n	80092b0 <HAL_ADC_ConfigChannel+0x484>
 800929a:	4b02      	ldr	r3, [pc, #8]	; (80092a4 <HAL_ADC_ConfigChannel+0x478>)
 800929c:	60fb      	str	r3, [r7, #12]
 800929e:	e022      	b.n	80092e6 <HAL_ADC_ConfigChannel+0x4ba>
 80092a0:	83fff000 	.word	0x83fff000
 80092a4:	50000100 	.word	0x50000100
 80092a8:	50000300 	.word	0x50000300
 80092ac:	50000700 	.word	0x50000700
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a4e      	ldr	r2, [pc, #312]	; (80093f0 <HAL_ADC_ConfigChannel+0x5c4>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d103      	bne.n	80092c2 <HAL_ADC_ConfigChannel+0x496>
 80092ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80092be:	60fb      	str	r3, [r7, #12]
 80092c0:	e011      	b.n	80092e6 <HAL_ADC_ConfigChannel+0x4ba>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a4b      	ldr	r2, [pc, #300]	; (80093f4 <HAL_ADC_ConfigChannel+0x5c8>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d102      	bne.n	80092d2 <HAL_ADC_ConfigChannel+0x4a6>
 80092cc:	4b4a      	ldr	r3, [pc, #296]	; (80093f8 <HAL_ADC_ConfigChannel+0x5cc>)
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	e009      	b.n	80092e6 <HAL_ADC_ConfigChannel+0x4ba>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a48      	ldr	r2, [pc, #288]	; (80093f8 <HAL_ADC_ConfigChannel+0x5cc>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d102      	bne.n	80092e2 <HAL_ADC_ConfigChannel+0x4b6>
 80092dc:	4b45      	ldr	r3, [pc, #276]	; (80093f4 <HAL_ADC_ConfigChannel+0x5c8>)
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	e001      	b.n	80092e6 <HAL_ADC_ConfigChannel+0x4ba>
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f003 0303 	and.w	r3, r3, #3
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d108      	bne.n	8009306 <HAL_ADC_ConfigChannel+0x4da>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d101      	bne.n	8009306 <HAL_ADC_ConfigChannel+0x4da>
 8009302:	2301      	movs	r3, #1
 8009304:	e000      	b.n	8009308 <HAL_ADC_ConfigChannel+0x4dc>
 8009306:	2300      	movs	r3, #0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d150      	bne.n	80093ae <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800930c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800930e:	2b00      	cmp	r3, #0
 8009310:	d010      	beq.n	8009334 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	2b01      	cmp	r3, #1
 800931c:	d107      	bne.n	800932e <HAL_ADC_ConfigChannel+0x502>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	2b01      	cmp	r3, #1
 8009328:	d101      	bne.n	800932e <HAL_ADC_ConfigChannel+0x502>
 800932a:	2301      	movs	r3, #1
 800932c:	e000      	b.n	8009330 <HAL_ADC_ConfigChannel+0x504>
 800932e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8009330:	2b00      	cmp	r3, #0
 8009332:	d13c      	bne.n	80093ae <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b10      	cmp	r3, #16
 800933a:	d11d      	bne.n	8009378 <HAL_ADC_ConfigChannel+0x54c>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009344:	d118      	bne.n	8009378 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8009346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800934e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009350:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009352:	4b2a      	ldr	r3, [pc, #168]	; (80093fc <HAL_ADC_ConfigChannel+0x5d0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a2a      	ldr	r2, [pc, #168]	; (8009400 <HAL_ADC_ConfigChannel+0x5d4>)
 8009358:	fba2 2303 	umull	r2, r3, r2, r3
 800935c:	0c9a      	lsrs	r2, r3, #18
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8009368:	e002      	b.n	8009370 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	3b01      	subs	r3, #1
 800936e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1f9      	bne.n	800936a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8009376:	e02e      	b.n	80093d6 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b11      	cmp	r3, #17
 800937e:	d10b      	bne.n	8009398 <HAL_ADC_ConfigChannel+0x56c>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009388:	d106      	bne.n	8009398 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800938a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8009392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009394:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8009396:	e01e      	b.n	80093d6 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b12      	cmp	r3, #18
 800939e:	d11a      	bne.n	80093d6 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80093a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80093a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093aa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80093ac:	e013      	b.n	80093d6 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b2:	f043 0220 	orr.w	r2, r3, #32
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80093c0:	e00a      	b.n	80093d8 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c6:	f043 0220 	orr.w	r2, r3, #32
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80093d4:	e000      	b.n	80093d8 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80093d6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80093e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	376c      	adds	r7, #108	; 0x6c
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	50000100 	.word	0x50000100
 80093f4:	50000400 	.word	0x50000400
 80093f8:	50000500 	.word	0x50000500
 80093fc:	20000010 	.word	0x20000010
 8009400:	431bde83 	.word	0x431bde83

08009404 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8009404:	b480      	push	{r7}
 8009406:	b099      	sub	sp, #100	; 0x64
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800941c:	d102      	bne.n	8009424 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800941e:	4b6d      	ldr	r3, [pc, #436]	; (80095d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8009420:	60bb      	str	r3, [r7, #8]
 8009422:	e01a      	b.n	800945a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a6a      	ldr	r2, [pc, #424]	; (80095d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d103      	bne.n	8009436 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800942e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009432:	60bb      	str	r3, [r7, #8]
 8009434:	e011      	b.n	800945a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a67      	ldr	r2, [pc, #412]	; (80095d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d102      	bne.n	8009446 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009440:	4b66      	ldr	r3, [pc, #408]	; (80095dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8009442:	60bb      	str	r3, [r7, #8]
 8009444:	e009      	b.n	800945a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a64      	ldr	r2, [pc, #400]	; (80095dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d102      	bne.n	8009456 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8009450:	4b61      	ldr	r3, [pc, #388]	; (80095d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8009452:	60bb      	str	r3, [r7, #8]
 8009454:	e001      	b.n	800945a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8009456:	2300      	movs	r3, #0
 8009458:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e0b0      	b.n	80095c6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800946a:	2b01      	cmp	r3, #1
 800946c:	d101      	bne.n	8009472 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800946e:	2302      	movs	r3, #2
 8009470:	e0a9      	b.n	80095c6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b00      	cmp	r3, #0
 8009486:	f040 808d 	bne.w	80095a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	f040 8086 	bne.w	80095a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094a0:	d004      	beq.n	80094ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a4b      	ldr	r2, [pc, #300]	; (80095d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d101      	bne.n	80094b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80094ac:	4b4c      	ldr	r3, [pc, #304]	; (80095e0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80094ae:	e000      	b.n	80094b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80094b0:	4b4c      	ldr	r3, [pc, #304]	; (80095e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80094b2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d040      	beq.n	800953e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80094bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	6859      	ldr	r1, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094ce:	035b      	lsls	r3, r3, #13
 80094d0:	430b      	orrs	r3, r1
 80094d2:	431a      	orrs	r2, r3
 80094d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094d6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f003 0303 	and.w	r3, r3, #3
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d108      	bne.n	80094f8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 0301 	and.w	r3, r3, #1
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d101      	bne.n	80094f8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80094f4:	2301      	movs	r3, #1
 80094f6:	e000      	b.n	80094fa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80094f8:	2300      	movs	r3, #0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d15c      	bne.n	80095b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f003 0303 	and.w	r3, r3, #3
 8009506:	2b01      	cmp	r3, #1
 8009508:	d107      	bne.n	800951a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b01      	cmp	r3, #1
 8009514:	d101      	bne.n	800951a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8009516:	2301      	movs	r3, #1
 8009518:	e000      	b.n	800951c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800951a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800951c:	2b00      	cmp	r3, #0
 800951e:	d14b      	bne.n	80095b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8009520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009528:	f023 030f 	bic.w	r3, r3, #15
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	6811      	ldr	r1, [r2, #0]
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	6892      	ldr	r2, [r2, #8]
 8009534:	430a      	orrs	r2, r1
 8009536:	431a      	orrs	r2, r3
 8009538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800953a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800953c:	e03c      	b.n	80095b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800953e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009548:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f003 0303 	and.w	r3, r3, #3
 8009554:	2b01      	cmp	r3, #1
 8009556:	d108      	bne.n	800956a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	2b01      	cmp	r3, #1
 8009564:	d101      	bne.n	800956a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8009566:	2301      	movs	r3, #1
 8009568:	e000      	b.n	800956c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800956a:	2300      	movs	r3, #0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d123      	bne.n	80095b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f003 0303 	and.w	r3, r3, #3
 8009578:	2b01      	cmp	r3, #1
 800957a:	d107      	bne.n	800958c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	2b01      	cmp	r3, #1
 8009586:	d101      	bne.n	800958c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8009588:	2301      	movs	r3, #1
 800958a:	e000      	b.n	800958e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800958c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800958e:	2b00      	cmp	r3, #0
 8009590:	d112      	bne.n	80095b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8009592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800959a:	f023 030f 	bic.w	r3, r3, #15
 800959e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095a0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80095a2:	e009      	b.n	80095b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a8:	f043 0220 	orr.w	r2, r3, #32
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80095b6:	e000      	b.n	80095ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80095b8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80095c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80095c6:	4618      	mov	r0, r3
 80095c8:	3764      	adds	r7, #100	; 0x64
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	50000100 	.word	0x50000100
 80095d8:	50000400 	.word	0x50000400
 80095dc:	50000500 	.word	0x50000500
 80095e0:	50000300 	.word	0x50000300
 80095e4:	50000700 	.word	0x50000700

080095e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d126      	bne.n	8009650 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009618:	2b00      	cmp	r3, #0
 800961a:	d115      	bne.n	8009648 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8009620:	2b00      	cmp	r3, #0
 8009622:	d111      	bne.n	8009648 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009628:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d105      	bne.n	8009648 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009640:	f043 0201 	orr.w	r2, r3, #1
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7ff f8d5 	bl	80087f8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800964e:	e004      	b.n	800965a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	4798      	blx	r3
}
 800965a:	bf00      	nop
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff f8cb 	bl	800880c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b084      	sub	sp, #16
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009690:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800969c:	f043 0204 	orr.w	r2, r3, #4
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f7ff f8bb 	bl	8008820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80096aa:	bf00      	nop
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
	...

080096b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	f003 0303 	and.w	r3, r3, #3
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d108      	bne.n	80096e0 <ADC_Enable+0x2c>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d101      	bne.n	80096e0 <ADC_Enable+0x2c>
 80096dc:	2301      	movs	r3, #1
 80096de:	e000      	b.n	80096e2 <ADC_Enable+0x2e>
 80096e0:	2300      	movs	r3, #0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d143      	bne.n	800976e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	4b22      	ldr	r3, [pc, #136]	; (8009778 <ADC_Enable+0xc4>)
 80096ee:	4013      	ands	r3, r2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00d      	beq.n	8009710 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f8:	f043 0210 	orr.w	r2, r3, #16
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009704:	f043 0201 	orr.w	r2, r3, #1
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e02f      	b.n	8009770 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f042 0201 	orr.w	r2, r2, #1
 800971e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8009720:	f7ff f85e 	bl	80087e0 <HAL_GetTick>
 8009724:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009726:	e01b      	b.n	8009760 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009728:	f7ff f85a 	bl	80087e0 <HAL_GetTick>
 800972c:	4602      	mov	r2, r0
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	2b02      	cmp	r3, #2
 8009734:	d914      	bls.n	8009760 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	2b01      	cmp	r3, #1
 8009742:	d00d      	beq.n	8009760 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009748:	f043 0210 	orr.w	r2, r3, #16
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009754:	f043 0201 	orr.w	r2, r3, #1
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e007      	b.n	8009770 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	2b01      	cmp	r3, #1
 800976c:	d1dc      	bne.n	8009728 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	8000003f 	.word	0x8000003f

0800977c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009784:	2300      	movs	r3, #0
 8009786:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	f003 0303 	and.w	r3, r3, #3
 8009792:	2b01      	cmp	r3, #1
 8009794:	d108      	bne.n	80097a8 <ADC_Disable+0x2c>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d101      	bne.n	80097a8 <ADC_Disable+0x2c>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e000      	b.n	80097aa <ADC_Disable+0x2e>
 80097a8:	2300      	movs	r3, #0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d047      	beq.n	800983e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f003 030d 	and.w	r3, r3, #13
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d10f      	bne.n	80097dc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	689a      	ldr	r2, [r3, #8]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f042 0202 	orr.w	r2, r2, #2
 80097ca:	609a      	str	r2, [r3, #8]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2203      	movs	r2, #3
 80097d2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80097d4:	f7ff f804 	bl	80087e0 <HAL_GetTick>
 80097d8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80097da:	e029      	b.n	8009830 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e0:	f043 0210 	orr.w	r2, r3, #16
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ec:	f043 0201 	orr.w	r2, r3, #1
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e023      	b.n	8009840 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80097f8:	f7fe fff2 	bl	80087e0 <HAL_GetTick>
 80097fc:	4602      	mov	r2, r0
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	2b02      	cmp	r3, #2
 8009804:	d914      	bls.n	8009830 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	2b01      	cmp	r3, #1
 8009812:	d10d      	bne.n	8009830 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009818:	f043 0210 	orr.w	r2, r3, #16
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009824:	f043 0201 	orr.w	r2, r3, #1
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e007      	b.n	8009840 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b01      	cmp	r3, #1
 800983c:	d0dc      	beq.n	80097f8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e0ed      	b.n	8009a36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d102      	bne.n	800986c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7fc fe78 	bl	800655c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f042 0201 	orr.w	r2, r2, #1
 800987a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800987c:	f7fe ffb0 	bl	80087e0 <HAL_GetTick>
 8009880:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009882:	e012      	b.n	80098aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009884:	f7fe ffac 	bl	80087e0 <HAL_GetTick>
 8009888:	4602      	mov	r2, r0
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	2b0a      	cmp	r3, #10
 8009890:	d90b      	bls.n	80098aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2205      	movs	r2, #5
 80098a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e0c5      	b.n	8009a36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0e5      	beq.n	8009884 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f022 0202 	bic.w	r2, r2, #2
 80098c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80098c8:	f7fe ff8a 	bl	80087e0 <HAL_GetTick>
 80098cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80098ce:	e012      	b.n	80098f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80098d0:	f7fe ff86 	bl	80087e0 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	2b0a      	cmp	r3, #10
 80098dc:	d90b      	bls.n	80098f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2205      	movs	r2, #5
 80098ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e09f      	b.n	8009a36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1e5      	bne.n	80098d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	7e1b      	ldrb	r3, [r3, #24]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d108      	bne.n	800991e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	e007      	b.n	800992e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800992c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7e5b      	ldrb	r3, [r3, #25]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d108      	bne.n	8009948 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	e007      	b.n	8009958 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009956:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7e9b      	ldrb	r3, [r3, #26]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d108      	bne.n	8009972 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f042 0220 	orr.w	r2, r2, #32
 800996e:	601a      	str	r2, [r3, #0]
 8009970:	e007      	b.n	8009982 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f022 0220 	bic.w	r2, r2, #32
 8009980:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	7edb      	ldrb	r3, [r3, #27]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d108      	bne.n	800999c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 0210 	bic.w	r2, r2, #16
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	e007      	b.n	80099ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f042 0210 	orr.w	r2, r2, #16
 80099aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	7f1b      	ldrb	r3, [r3, #28]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d108      	bne.n	80099c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f042 0208 	orr.w	r2, r2, #8
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	e007      	b.n	80099d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f022 0208 	bic.w	r2, r2, #8
 80099d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	7f5b      	ldrb	r3, [r3, #29]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d108      	bne.n	80099f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f042 0204 	orr.w	r2, r2, #4
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	e007      	b.n	8009a00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 0204 	bic.w	r2, r2, #4
 80099fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689a      	ldr	r2, [r3, #8]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	ea42 0103 	orr.w	r1, r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	1e5a      	subs	r2, r3, #1
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b087      	sub	sp, #28
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a54:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009a56:	7cfb      	ldrb	r3, [r7, #19]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d003      	beq.n	8009a64 <HAL_CAN_ConfigFilter+0x26>
 8009a5c:	7cfb      	ldrb	r3, [r7, #19]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	f040 80aa 	bne.w	8009bb8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a6a:	f043 0201 	orr.w	r2, r3, #1
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	f003 031f 	and.w	r3, r3, #31
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a82:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	43db      	mvns	r3, r3
 8009a8e:	401a      	ands	r2, r3
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	69db      	ldr	r3, [r3, #28]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d123      	bne.n	8009ae6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	43db      	mvns	r3, r3
 8009aa8:	401a      	ands	r2, r3
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009ac0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	3248      	adds	r2, #72	; 0x48
 8009ac6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009ada:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009adc:	6979      	ldr	r1, [r7, #20]
 8009ade:	3348      	adds	r3, #72	; 0x48
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	440b      	add	r3, r1
 8009ae4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	69db      	ldr	r3, [r3, #28]
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d122      	bne.n	8009b34 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	431a      	orrs	r2, r3
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009b0e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	3248      	adds	r2, #72	; 0x48
 8009b14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009b28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009b2a:	6979      	ldr	r1, [r7, #20]
 8009b2c:	3348      	adds	r3, #72	; 0x48
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	440b      	add	r3, r1
 8009b32:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d109      	bne.n	8009b50 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	43db      	mvns	r3, r3
 8009b46:	401a      	ands	r2, r3
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009b4e:	e007      	b.n	8009b60 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	431a      	orrs	r2, r3
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d109      	bne.n	8009b7c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	43db      	mvns	r3, r3
 8009b72:	401a      	ands	r2, r3
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009b7a:	e007      	b.n	8009b8c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	431a      	orrs	r2, r3
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	6a1b      	ldr	r3, [r3, #32]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d107      	bne.n	8009ba4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	431a      	orrs	r2, r3
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009baa:	f023 0201 	bic.w	r2, r3, #1
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	e006      	b.n	8009bc6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
  }
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d12e      	bne.n	8009c44 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2202      	movs	r2, #2
 8009bea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f022 0201 	bic.w	r2, r2, #1
 8009bfc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009bfe:	f7fe fdef 	bl	80087e0 <HAL_GetTick>
 8009c02:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009c04:	e012      	b.n	8009c2c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009c06:	f7fe fdeb 	bl	80087e0 <HAL_GetTick>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	2b0a      	cmp	r3, #10
 8009c12:	d90b      	bls.n	8009c2c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2205      	movs	r2, #5
 8009c24:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e012      	b.n	8009c52 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1e5      	bne.n	8009c06 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009c40:	2300      	movs	r3, #0
 8009c42:	e006      	b.n	8009c52 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
  }
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b089      	sub	sp, #36	; 0x24
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
 8009c66:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009c78:	7ffb      	ldrb	r3, [r7, #31]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d003      	beq.n	8009c86 <HAL_CAN_AddTxMessage+0x2c>
 8009c7e:	7ffb      	ldrb	r3, [r7, #31]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	f040 80b8 	bne.w	8009df6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10a      	bne.n	8009ca6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d105      	bne.n	8009ca6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 80a0 	beq.w	8009de6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	0e1b      	lsrs	r3, r3, #24
 8009caa:	f003 0303 	and.w	r3, r3, #3
 8009cae:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d907      	bls.n	8009cc6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e09e      	b.n	8009e04 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	409a      	lsls	r2, r3
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10d      	bne.n	8009cf4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009ce2:	68f9      	ldr	r1, [r7, #12]
 8009ce4:	6809      	ldr	r1, [r1, #0]
 8009ce6:	431a      	orrs	r2, r3
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	3318      	adds	r3, #24
 8009cec:	011b      	lsls	r3, r3, #4
 8009cee:	440b      	add	r3, r1
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	e00f      	b.n	8009d14 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009cfe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009d04:	68f9      	ldr	r1, [r7, #12]
 8009d06:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009d08:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	3318      	adds	r3, #24
 8009d0e:	011b      	lsls	r3, r3, #4
 8009d10:	440b      	add	r3, r1
 8009d12:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6819      	ldr	r1, [r3, #0]
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	691a      	ldr	r2, [r3, #16]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	3318      	adds	r3, #24
 8009d20:	011b      	lsls	r3, r3, #4
 8009d22:	440b      	add	r3, r1
 8009d24:	3304      	adds	r3, #4
 8009d26:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	7d1b      	ldrb	r3, [r3, #20]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d111      	bne.n	8009d54 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	3318      	adds	r3, #24
 8009d38:	011b      	lsls	r3, r3, #4
 8009d3a:	4413      	add	r3, r2
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	6811      	ldr	r1, [r2, #0]
 8009d44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	3318      	adds	r3, #24
 8009d4c:	011b      	lsls	r3, r3, #4
 8009d4e:	440b      	add	r3, r1
 8009d50:	3304      	adds	r3, #4
 8009d52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3307      	adds	r3, #7
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	061a      	lsls	r2, r3, #24
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	3306      	adds	r3, #6
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	041b      	lsls	r3, r3, #16
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3305      	adds	r3, #5
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	021b      	lsls	r3, r3, #8
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	3204      	adds	r2, #4
 8009d74:	7812      	ldrb	r2, [r2, #0]
 8009d76:	4610      	mov	r0, r2
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	6811      	ldr	r1, [r2, #0]
 8009d7c:	ea43 0200 	orr.w	r2, r3, r0
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	011b      	lsls	r3, r3, #4
 8009d84:	440b      	add	r3, r1
 8009d86:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8009d8a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3303      	adds	r3, #3
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	061a      	lsls	r2, r3, #24
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	3302      	adds	r3, #2
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	041b      	lsls	r3, r3, #16
 8009d9c:	431a      	orrs	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	3301      	adds	r3, #1
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	021b      	lsls	r3, r3, #8
 8009da6:	4313      	orrs	r3, r2
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	7812      	ldrb	r2, [r2, #0]
 8009dac:	4610      	mov	r0, r2
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	6811      	ldr	r1, [r2, #0]
 8009db2:	ea43 0200 	orr.w	r2, r3, r0
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	440b      	add	r3, r1
 8009dbc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009dc0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	3318      	adds	r3, #24
 8009dca:	011b      	lsls	r3, r3, #4
 8009dcc:	4413      	add	r3, r2
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	6811      	ldr	r1, [r2, #0]
 8009dd4:	f043 0201 	orr.w	r2, r3, #1
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	3318      	adds	r3, #24
 8009ddc:	011b      	lsls	r3, r3, #4
 8009dde:	440b      	add	r3, r1
 8009de0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e00e      	b.n	8009e04 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e006      	b.n	8009e04 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
  }
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3724      	adds	r7, #36	; 0x24
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009e10:	b480      	push	{r7}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
 8009e1c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e24:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d003      	beq.n	8009e34 <HAL_CAN_GetRxMessage+0x24>
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	f040 80f3 	bne.w	800a01a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10e      	bne.n	8009e58 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	f003 0303 	and.w	r3, r3, #3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d116      	bne.n	8009e76 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e0e7      	b.n	800a028 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	f003 0303 	and.w	r3, r3, #3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d107      	bne.n	8009e76 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e0d8      	b.n	800a028 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	331b      	adds	r3, #27
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	4413      	add	r3, r2
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 0204 	and.w	r2, r3, #4
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10c      	bne.n	8009eae <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	331b      	adds	r3, #27
 8009e9c:	011b      	lsls	r3, r3, #4
 8009e9e:	4413      	add	r3, r2
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	0d5b      	lsrs	r3, r3, #21
 8009ea4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	e00b      	b.n	8009ec6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	331b      	adds	r3, #27
 8009eb6:	011b      	lsls	r3, r3, #4
 8009eb8:	4413      	add	r3, r2
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	08db      	lsrs	r3, r3, #3
 8009ebe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	331b      	adds	r3, #27
 8009ece:	011b      	lsls	r3, r3, #4
 8009ed0:	4413      	add	r3, r2
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0202 	and.w	r2, r3, #2
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	331b      	adds	r3, #27
 8009ee4:	011b      	lsls	r3, r3, #4
 8009ee6:	4413      	add	r3, r2
 8009ee8:	3304      	adds	r3, #4
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 020f 	and.w	r2, r3, #15
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	331b      	adds	r3, #27
 8009efc:	011b      	lsls	r3, r3, #4
 8009efe:	4413      	add	r3, r2
 8009f00:	3304      	adds	r3, #4
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	0a1b      	lsrs	r3, r3, #8
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	331b      	adds	r3, #27
 8009f14:	011b      	lsls	r3, r3, #4
 8009f16:	4413      	add	r3, r2
 8009f18:	3304      	adds	r3, #4
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	0c1b      	lsrs	r3, r3, #16
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	011b      	lsls	r3, r3, #4
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	011b      	lsls	r3, r3, #4
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	0a1a      	lsrs	r2, r3, #8
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	b2d2      	uxtb	r2, r2
 8009f52:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	011b      	lsls	r3, r3, #4
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	0c1a      	lsrs	r2, r3, #16
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	3302      	adds	r3, #2
 8009f6a:	b2d2      	uxtb	r2, r2
 8009f6c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	011b      	lsls	r3, r3, #4
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	0e1a      	lsrs	r2, r3, #24
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	3303      	adds	r3, #3
 8009f84:	b2d2      	uxtb	r2, r2
 8009f86:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	3304      	adds	r3, #4
 8009f9c:	b2d2      	uxtb	r2, r2
 8009f9e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	011b      	lsls	r3, r3, #4
 8009fa8:	4413      	add	r3, r2
 8009faa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	0a1a      	lsrs	r2, r3, #8
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	3305      	adds	r3, #5
 8009fb6:	b2d2      	uxtb	r2, r2
 8009fb8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	011b      	lsls	r3, r3, #4
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	0c1a      	lsrs	r2, r3, #16
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	3306      	adds	r3, #6
 8009fd0:	b2d2      	uxtb	r2, r2
 8009fd2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	011b      	lsls	r3, r3, #4
 8009fdc:	4413      	add	r3, r2
 8009fde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	0e1a      	lsrs	r2, r3, #24
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	3307      	adds	r3, #7
 8009fea:	b2d2      	uxtb	r2, r2
 8009fec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d108      	bne.n	800a006 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68da      	ldr	r2, [r3, #12]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f042 0220 	orr.w	r2, r2, #32
 800a002:	60da      	str	r2, [r3, #12]
 800a004:	e007      	b.n	800a016 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	691a      	ldr	r2, [r3, #16]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f042 0220 	orr.w	r2, r2, #32
 800a014:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	e006      	b.n	800a028 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a026:	2301      	movs	r3, #1
  }
}
 800a028:	4618      	mov	r0, r3
 800a02a:	371c      	adds	r7, #28
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a044:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800a046:	7bfb      	ldrb	r3, [r7, #15]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d002      	beq.n	800a052 <HAL_CAN_ActivateNotification+0x1e>
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d109      	bne.n	800a066 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6959      	ldr	r1, [r3, #20]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	e006      	b.n	800a074 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
  }
}
 800a074:	4618      	mov	r0, r3
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08a      	sub	sp, #40	; 0x28
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800a088:	2300      	movs	r3, #0
 800a08a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	f003 0301 	and.w	r3, r3, #1
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d07c      	beq.n	800a1c0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	f003 0301 	and.w	r3, r3, #1
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d023      	beq.n	800a118 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	f003 0302 	and.w	r3, r3, #2
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f983 	bl	800a3ee <HAL_CAN_TxMailbox0CompleteCallback>
 800a0e8:	e016      	b.n	800a118 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	f003 0304 	and.w	r3, r3, #4
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d004      	beq.n	800a0fe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a0fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a0fc:	e00c      	b.n	800a118 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	f003 0308 	and.w	r3, r3, #8
 800a104:	2b00      	cmp	r3, #0
 800a106:	d004      	beq.n	800a112 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a10e:	627b      	str	r3, [r7, #36]	; 0x24
 800a110:	e002      	b.n	800a118 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f989 	bl	800a42a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d024      	beq.n	800a16c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a12a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f963 	bl	800a402 <HAL_CAN_TxMailbox1CompleteCallback>
 800a13c:	e016      	b.n	800a16c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a144:	2b00      	cmp	r3, #0
 800a146:	d004      	beq.n	800a152 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a14e:	627b      	str	r3, [r7, #36]	; 0x24
 800a150:	e00c      	b.n	800a16c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d004      	beq.n	800a166 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a162:	627b      	str	r3, [r7, #36]	; 0x24
 800a164:	e002      	b.n	800a16c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f969 	bl	800a43e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a172:	2b00      	cmp	r3, #0
 800a174:	d024      	beq.n	800a1c0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a17e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a186:	2b00      	cmp	r3, #0
 800a188:	d003      	beq.n	800a192 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f943 	bl	800a416 <HAL_CAN_TxMailbox2CompleteCallback>
 800a190:	e016      	b.n	800a1c0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d004      	beq.n	800a1a6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a1a4:	e00c      	b.n	800a1c0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d004      	beq.n	800a1ba <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a1b8:	e002      	b.n	800a1c0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f949 	bl	800a452 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	f003 0308 	and.w	r3, r3, #8
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00c      	beq.n	800a1e4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	f003 0310 	and.w	r3, r3, #16
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2210      	movs	r2, #16
 800a1e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
 800a1e6:	f003 0304 	and.w	r3, r3, #4
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00b      	beq.n	800a206 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f003 0308 	and.w	r3, r3, #8
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d006      	beq.n	800a206 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2208      	movs	r2, #8
 800a1fe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f930 	bl	800a466 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	f003 0302 	and.w	r3, r3, #2
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d009      	beq.n	800a224 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d002      	beq.n	800a224 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7f6 fdfa 	bl	8000e18 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00c      	beq.n	800a248 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f003 0310 	and.w	r3, r3, #16
 800a234:	2b00      	cmp	r3, #0
 800a236:	d007      	beq.n	800a248 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a23e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2210      	movs	r2, #16
 800a246:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800a248:	6a3b      	ldr	r3, [r7, #32]
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00b      	beq.n	800a26a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f003 0308 	and.w	r3, r3, #8
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d006      	beq.n	800a26a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2208      	movs	r2, #8
 800a262:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 f912 	bl	800a48e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	f003 0310 	and.w	r3, r3, #16
 800a270:	2b00      	cmp	r3, #0
 800a272:	d009      	beq.n	800a288 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	f003 0303 	and.w	r3, r3, #3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d002      	beq.n	800a288 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f8f9 	bl	800a47a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800a288:	6a3b      	ldr	r3, [r7, #32]
 800a28a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00b      	beq.n	800a2aa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	f003 0310 	and.w	r3, r3, #16
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d006      	beq.n	800a2aa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2210      	movs	r2, #16
 800a2a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f8fc 	bl	800a4a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00b      	beq.n	800a2cc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	f003 0308 	and.w	r3, r3, #8
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d006      	beq.n	800a2cc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2208      	movs	r2, #8
 800a2c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f8f5 	bl	800a4b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d07b      	beq.n	800a3ce <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	f003 0304 	and.w	r3, r3, #4
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d072      	beq.n	800a3c6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d008      	beq.n	800a2fc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d003      	beq.n	800a2fc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	f043 0301 	orr.w	r3, r3, #1
 800a2fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a2fc:	6a3b      	ldr	r3, [r7, #32]
 800a2fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a302:	2b00      	cmp	r3, #0
 800a304:	d008      	beq.n	800a318 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d003      	beq.n	800a318 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a312:	f043 0302 	orr.w	r3, r3, #2
 800a316:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d008      	beq.n	800a334 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d003      	beq.n	800a334 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	f043 0304 	orr.w	r3, r3, #4
 800a332:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a334:	6a3b      	ldr	r3, [r7, #32]
 800a336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d043      	beq.n	800a3c6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a344:	2b00      	cmp	r3, #0
 800a346:	d03e      	beq.n	800a3c6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a34e:	2b60      	cmp	r3, #96	; 0x60
 800a350:	d02b      	beq.n	800a3aa <HAL_CAN_IRQHandler+0x32a>
 800a352:	2b60      	cmp	r3, #96	; 0x60
 800a354:	d82e      	bhi.n	800a3b4 <HAL_CAN_IRQHandler+0x334>
 800a356:	2b50      	cmp	r3, #80	; 0x50
 800a358:	d022      	beq.n	800a3a0 <HAL_CAN_IRQHandler+0x320>
 800a35a:	2b50      	cmp	r3, #80	; 0x50
 800a35c:	d82a      	bhi.n	800a3b4 <HAL_CAN_IRQHandler+0x334>
 800a35e:	2b40      	cmp	r3, #64	; 0x40
 800a360:	d019      	beq.n	800a396 <HAL_CAN_IRQHandler+0x316>
 800a362:	2b40      	cmp	r3, #64	; 0x40
 800a364:	d826      	bhi.n	800a3b4 <HAL_CAN_IRQHandler+0x334>
 800a366:	2b30      	cmp	r3, #48	; 0x30
 800a368:	d010      	beq.n	800a38c <HAL_CAN_IRQHandler+0x30c>
 800a36a:	2b30      	cmp	r3, #48	; 0x30
 800a36c:	d822      	bhi.n	800a3b4 <HAL_CAN_IRQHandler+0x334>
 800a36e:	2b10      	cmp	r3, #16
 800a370:	d002      	beq.n	800a378 <HAL_CAN_IRQHandler+0x2f8>
 800a372:	2b20      	cmp	r3, #32
 800a374:	d005      	beq.n	800a382 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800a376:	e01d      	b.n	800a3b4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	f043 0308 	orr.w	r3, r3, #8
 800a37e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a380:	e019      	b.n	800a3b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	f043 0310 	orr.w	r3, r3, #16
 800a388:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a38a:	e014      	b.n	800a3b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	f043 0320 	orr.w	r3, r3, #32
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a394:	e00f      	b.n	800a3b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a39c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a39e:	e00a      	b.n	800a3b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a3a8:	e005      	b.n	800a3b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a3b2:	e000      	b.n	800a3b6 <HAL_CAN_IRQHandler+0x336>
            break;
 800a3b4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	699a      	ldr	r2, [r3, #24]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a3c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2204      	movs	r2, #4
 800a3cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d008      	beq.n	800a3e6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	431a      	orrs	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f872 	bl	800a4ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a3e6:	bf00      	nop
 800a3e8:	3728      	adds	r7, #40	; 0x28
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b083      	sub	sp, #12
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800a3f6:	bf00      	nop
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a402:	b480      	push	{r7}
 800a404:	b083      	sub	sp, #12
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800a40a:	bf00      	nop
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800a41e:	bf00      	nop
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b083      	sub	sp, #12
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a432:	bf00      	nop
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a446:	bf00      	nop
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a45a:	bf00      	nop
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a4aa:	bf00      	nop
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a4be:	bf00      	nop
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b083      	sub	sp, #12
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a4d2:	bf00      	nop
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
	...

0800a4e0 <__NVIC_SetPriorityGrouping>:
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f003 0307 	and.w	r3, r3, #7
 800a4ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a4f0:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <__NVIC_SetPriorityGrouping+0x44>)
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a50c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a512:	4a04      	ldr	r2, [pc, #16]	; (800a524 <__NVIC_SetPriorityGrouping+0x44>)
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	60d3      	str	r3, [r2, #12]
}
 800a518:	bf00      	nop
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	e000ed00 	.word	0xe000ed00

0800a528 <__NVIC_GetPriorityGrouping>:
{
 800a528:	b480      	push	{r7}
 800a52a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a52c:	4b04      	ldr	r3, [pc, #16]	; (800a540 <__NVIC_GetPriorityGrouping+0x18>)
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	0a1b      	lsrs	r3, r3, #8
 800a532:	f003 0307 	and.w	r3, r3, #7
}
 800a536:	4618      	mov	r0, r3
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	e000ed00 	.word	0xe000ed00

0800a544 <__NVIC_EnableIRQ>:
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a54e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a552:	2b00      	cmp	r3, #0
 800a554:	db0b      	blt.n	800a56e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a556:	79fb      	ldrb	r3, [r7, #7]
 800a558:	f003 021f 	and.w	r2, r3, #31
 800a55c:	4907      	ldr	r1, [pc, #28]	; (800a57c <__NVIC_EnableIRQ+0x38>)
 800a55e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a562:	095b      	lsrs	r3, r3, #5
 800a564:	2001      	movs	r0, #1
 800a566:	fa00 f202 	lsl.w	r2, r0, r2
 800a56a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a56e:	bf00      	nop
 800a570:	370c      	adds	r7, #12
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	e000e100 	.word	0xe000e100

0800a580 <__NVIC_SetPriority>:
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	4603      	mov	r3, r0
 800a588:	6039      	str	r1, [r7, #0]
 800a58a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a58c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a590:	2b00      	cmp	r3, #0
 800a592:	db0a      	blt.n	800a5aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	b2da      	uxtb	r2, r3
 800a598:	490c      	ldr	r1, [pc, #48]	; (800a5cc <__NVIC_SetPriority+0x4c>)
 800a59a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a59e:	0112      	lsls	r2, r2, #4
 800a5a0:	b2d2      	uxtb	r2, r2
 800a5a2:	440b      	add	r3, r1
 800a5a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a5a8:	e00a      	b.n	800a5c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	4908      	ldr	r1, [pc, #32]	; (800a5d0 <__NVIC_SetPriority+0x50>)
 800a5b0:	79fb      	ldrb	r3, [r7, #7]
 800a5b2:	f003 030f 	and.w	r3, r3, #15
 800a5b6:	3b04      	subs	r3, #4
 800a5b8:	0112      	lsls	r2, r2, #4
 800a5ba:	b2d2      	uxtb	r2, r2
 800a5bc:	440b      	add	r3, r1
 800a5be:	761a      	strb	r2, [r3, #24]
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	e000e100 	.word	0xe000e100
 800a5d0:	e000ed00 	.word	0xe000ed00

0800a5d4 <NVIC_EncodePriority>:
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b089      	sub	sp, #36	; 0x24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	f1c3 0307 	rsb	r3, r3, #7
 800a5ee:	2b04      	cmp	r3, #4
 800a5f0:	bf28      	it	cs
 800a5f2:	2304      	movcs	r3, #4
 800a5f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	2b06      	cmp	r3, #6
 800a5fc:	d902      	bls.n	800a604 <NVIC_EncodePriority+0x30>
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	3b03      	subs	r3, #3
 800a602:	e000      	b.n	800a606 <NVIC_EncodePriority+0x32>
 800a604:	2300      	movs	r3, #0
 800a606:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a608:	f04f 32ff 	mov.w	r2, #4294967295
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	fa02 f303 	lsl.w	r3, r2, r3
 800a612:	43da      	mvns	r2, r3
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	401a      	ands	r2, r3
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a61c:	f04f 31ff 	mov.w	r1, #4294967295
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	fa01 f303 	lsl.w	r3, r1, r3
 800a626:	43d9      	mvns	r1, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a62c:	4313      	orrs	r3, r2
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3724      	adds	r7, #36	; 0x24
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b082      	sub	sp, #8
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f7ff ff4c 	bl	800a4e0 <__NVIC_SetPriorityGrouping>
}
 800a648:	bf00      	nop
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
 800a656:	4603      	mov	r3, r0
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a65e:	2300      	movs	r3, #0
 800a660:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a662:	f7ff ff61 	bl	800a528 <__NVIC_GetPriorityGrouping>
 800a666:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	68b9      	ldr	r1, [r7, #8]
 800a66c:	6978      	ldr	r0, [r7, #20]
 800a66e:	f7ff ffb1 	bl	800a5d4 <NVIC_EncodePriority>
 800a672:	4602      	mov	r2, r0
 800a674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a678:	4611      	mov	r1, r2
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff ff80 	bl	800a580 <__NVIC_SetPriority>
}
 800a680:	bf00      	nop
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	4603      	mov	r3, r0
 800a690:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a696:	4618      	mov	r0, r3
 800a698:	f7ff ff54 	bl	800a544 <__NVIC_EnableIRQ>
}
 800a69c:	bf00      	nop
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e054      	b.n	800a760 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	7f5b      	ldrb	r3, [r3, #29]
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d105      	bne.n	800a6cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7fb ff94 	bl	80065f4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	791b      	ldrb	r3, [r3, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10c      	bne.n	800a6f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a22      	ldr	r2, [pc, #136]	; (800a768 <HAL_CRC_Init+0xc4>)
 800a6e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	689a      	ldr	r2, [r3, #8]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f022 0218 	bic.w	r2, r2, #24
 800a6f0:	609a      	str	r2, [r3, #8]
 800a6f2:	e00c      	b.n	800a70e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6899      	ldr	r1, [r3, #8]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f834 	bl	800a76c <HAL_CRCEx_Polynomial_Set>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e028      	b.n	800a760 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	795b      	ldrb	r3, [r3, #5]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d105      	bne.n	800a722 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f04f 32ff 	mov.w	r2, #4294967295
 800a71e:	611a      	str	r2, [r3, #16]
 800a720:	e004      	b.n	800a72c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	6912      	ldr	r2, [r2, #16]
 800a72a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	695a      	ldr	r2, [r3, #20]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	430a      	orrs	r2, r1
 800a740:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	699a      	ldr	r2, [r3, #24]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	430a      	orrs	r2, r1
 800a756:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	04c11db7 	.word	0x04c11db7

0800a76c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a77c:	231f      	movs	r3, #31
 800a77e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a780:	bf00      	nop
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	1e5a      	subs	r2, r3, #1
 800a786:	613a      	str	r2, [r7, #16]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d009      	beq.n	800a7a0 <HAL_CRCEx_Polynomial_Set+0x34>
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	f003 031f 	and.w	r3, r3, #31
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	fa22 f303 	lsr.w	r3, r2, r3
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d0f0      	beq.n	800a782 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b18      	cmp	r3, #24
 800a7a4:	d846      	bhi.n	800a834 <HAL_CRCEx_Polynomial_Set+0xc8>
 800a7a6:	a201      	add	r2, pc, #4	; (adr r2, 800a7ac <HAL_CRCEx_Polynomial_Set+0x40>)
 800a7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ac:	0800a83b 	.word	0x0800a83b
 800a7b0:	0800a835 	.word	0x0800a835
 800a7b4:	0800a835 	.word	0x0800a835
 800a7b8:	0800a835 	.word	0x0800a835
 800a7bc:	0800a835 	.word	0x0800a835
 800a7c0:	0800a835 	.word	0x0800a835
 800a7c4:	0800a835 	.word	0x0800a835
 800a7c8:	0800a835 	.word	0x0800a835
 800a7cc:	0800a829 	.word	0x0800a829
 800a7d0:	0800a835 	.word	0x0800a835
 800a7d4:	0800a835 	.word	0x0800a835
 800a7d8:	0800a835 	.word	0x0800a835
 800a7dc:	0800a835 	.word	0x0800a835
 800a7e0:	0800a835 	.word	0x0800a835
 800a7e4:	0800a835 	.word	0x0800a835
 800a7e8:	0800a835 	.word	0x0800a835
 800a7ec:	0800a81d 	.word	0x0800a81d
 800a7f0:	0800a835 	.word	0x0800a835
 800a7f4:	0800a835 	.word	0x0800a835
 800a7f8:	0800a835 	.word	0x0800a835
 800a7fc:	0800a835 	.word	0x0800a835
 800a800:	0800a835 	.word	0x0800a835
 800a804:	0800a835 	.word	0x0800a835
 800a808:	0800a835 	.word	0x0800a835
 800a80c:	0800a811 	.word	0x0800a811
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	2b06      	cmp	r3, #6
 800a814:	d913      	bls.n	800a83e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a81a:	e010      	b.n	800a83e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	2b07      	cmp	r3, #7
 800a820:	d90f      	bls.n	800a842 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a826:	e00c      	b.n	800a842 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	2b0f      	cmp	r3, #15
 800a82c:	d90b      	bls.n	800a846 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a832:	e008      	b.n	800a846 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	75fb      	strb	r3, [r7, #23]
      break;
 800a838:	e006      	b.n	800a848 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a83a:	bf00      	nop
 800a83c:	e004      	b.n	800a848 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a83e:	bf00      	nop
 800a840:	e002      	b.n	800a848 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a842:	bf00      	nop
 800a844:	e000      	b.n	800a848 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a846:	bf00      	nop
  }
  if (status == HAL_OK)
 800a848:	7dfb      	ldrb	r3, [r7, #23]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10d      	bne.n	800a86a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68ba      	ldr	r2, [r7, #8]
 800a854:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	f023 0118 	bic.w	r1, r3, #24
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	430a      	orrs	r2, r1
 800a868:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800a86a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	371c      	adds	r7, #28
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a880:	2300      	movs	r3, #0
 800a882:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d101      	bne.n	800a88e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e037      	b.n	800a8fe <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2202      	movs	r2, #2
 800a892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a8a4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a8a8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800a8b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a8be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a8ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	69db      	ldr	r3, [r3, #28]
 800a8d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f941 	bl	800ab68 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
}  
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b086      	sub	sp, #24
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	60f8      	str	r0, [r7, #12]
 800a90e:	60b9      	str	r1, [r7, #8]
 800a910:	607a      	str	r2, [r7, #4]
 800a912:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d101      	bne.n	800a926 <HAL_DMA_Start_IT+0x20>
 800a922:	2302      	movs	r3, #2
 800a924:	e04a      	b.n	800a9bc <HAL_DMA_Start_IT+0xb6>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a934:	2b01      	cmp	r3, #1
 800a936:	d13a      	bne.n	800a9ae <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2202      	movs	r2, #2
 800a93c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2200      	movs	r2, #0
 800a944:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f022 0201 	bic.w	r2, r2, #1
 800a954:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	68b9      	ldr	r1, [r7, #8]
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 f8d4 	bl	800ab0a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a966:	2b00      	cmp	r3, #0
 800a968:	d008      	beq.n	800a97c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f042 020e 	orr.w	r2, r2, #14
 800a978:	601a      	str	r2, [r3, #0]
 800a97a:	e00f      	b.n	800a99c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f042 020a 	orr.w	r2, r2, #10
 800a98a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f022 0204 	bic.w	r2, r2, #4
 800a99a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f042 0201 	orr.w	r2, r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]
 800a9ac:	e005      	b.n	800a9ba <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
} 
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e0:	2204      	movs	r2, #4
 800a9e2:	409a      	lsls	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d024      	beq.n	800aa36 <HAL_DMA_IRQHandler+0x72>
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	f003 0304 	and.w	r3, r3, #4
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d01f      	beq.n	800aa36 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 0320 	and.w	r3, r3, #32
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d107      	bne.n	800aa14 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f022 0204 	bic.w	r2, r2, #4
 800aa12:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa1c:	2104      	movs	r1, #4
 800aa1e:	fa01 f202 	lsl.w	r2, r1, r2
 800aa22:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d06a      	beq.n	800ab02 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800aa34:	e065      	b.n	800ab02 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	409a      	lsls	r2, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4013      	ands	r3, r2
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d02c      	beq.n	800aaa0 <HAL_DMA_IRQHandler+0xdc>
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	f003 0302 	and.w	r3, r3, #2
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d027      	beq.n	800aaa0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 0320 	and.w	r3, r3, #32
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10b      	bne.n	800aa76 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f022 020a 	bic.w	r2, r2, #10
 800aa6c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2201      	movs	r2, #1
 800aa72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa7e:	2102      	movs	r1, #2
 800aa80:	fa01 f202 	lsl.w	r2, r1, r2
 800aa84:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d035      	beq.n	800ab02 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800aa9e:	e030      	b.n	800ab02 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa4:	2208      	movs	r2, #8
 800aaa6:	409a      	lsls	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4013      	ands	r3, r2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d028      	beq.n	800ab02 <HAL_DMA_IRQHandler+0x13e>
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	f003 0308 	and.w	r3, r3, #8
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d023      	beq.n	800ab02 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f022 020e 	bic.w	r2, r2, #14
 800aac8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad2:	2101      	movs	r1, #1
 800aad4:	fa01 f202 	lsl.w	r2, r1, r2
 800aad8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d004      	beq.n	800ab02 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	4798      	blx	r3
    }
  }
}  
 800ab00:	e7ff      	b.n	800ab02 <HAL_DMA_IRQHandler+0x13e>
 800ab02:	bf00      	nop
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b085      	sub	sp, #20
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	60f8      	str	r0, [r7, #12]
 800ab12:	60b9      	str	r1, [r7, #8]
 800ab14:	607a      	str	r2, [r7, #4]
 800ab16:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab20:	2101      	movs	r1, #1
 800ab22:	fa01 f202 	lsl.w	r2, r1, r2
 800ab26:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	683a      	ldr	r2, [r7, #0]
 800ab2e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	2b10      	cmp	r3, #16
 800ab36:	d108      	bne.n	800ab4a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ab48:	e007      	b.n	800ab5a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	60da      	str	r2, [r3, #12]
}
 800ab5a:	bf00      	nop
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
	...

0800ab68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	461a      	mov	r2, r3
 800ab76:	4b14      	ldr	r3, [pc, #80]	; (800abc8 <DMA_CalcBaseAndBitshift+0x60>)
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d80f      	bhi.n	800ab9c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	461a      	mov	r2, r3
 800ab82:	4b12      	ldr	r3, [pc, #72]	; (800abcc <DMA_CalcBaseAndBitshift+0x64>)
 800ab84:	4413      	add	r3, r2
 800ab86:	4a12      	ldr	r2, [pc, #72]	; (800abd0 <DMA_CalcBaseAndBitshift+0x68>)
 800ab88:	fba2 2303 	umull	r2, r3, r2, r3
 800ab8c:	091b      	lsrs	r3, r3, #4
 800ab8e:	009a      	lsls	r2, r3, #2
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a0f      	ldr	r2, [pc, #60]	; (800abd4 <DMA_CalcBaseAndBitshift+0x6c>)
 800ab98:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800ab9a:	e00e      	b.n	800abba <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	461a      	mov	r2, r3
 800aba2:	4b0d      	ldr	r3, [pc, #52]	; (800abd8 <DMA_CalcBaseAndBitshift+0x70>)
 800aba4:	4413      	add	r3, r2
 800aba6:	4a0a      	ldr	r2, [pc, #40]	; (800abd0 <DMA_CalcBaseAndBitshift+0x68>)
 800aba8:	fba2 2303 	umull	r2, r3, r2, r3
 800abac:	091b      	lsrs	r3, r3, #4
 800abae:	009a      	lsls	r2, r3, #2
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a09      	ldr	r2, [pc, #36]	; (800abdc <DMA_CalcBaseAndBitshift+0x74>)
 800abb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800abba:	bf00      	nop
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	40020407 	.word	0x40020407
 800abcc:	bffdfff8 	.word	0xbffdfff8
 800abd0:	cccccccd 	.word	0xcccccccd
 800abd4:	40020000 	.word	0x40020000
 800abd8:	bffdfbf8 	.word	0xbffdfbf8
 800abdc:	40020400 	.word	0x40020400

0800abe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b087      	sub	sp, #28
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800abea:	2300      	movs	r3, #0
 800abec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800abee:	e154      	b.n	800ae9a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	2101      	movs	r1, #1
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	fa01 f303 	lsl.w	r3, r1, r3
 800abfc:	4013      	ands	r3, r2
 800abfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f000 8146 	beq.w	800ae94 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	f003 0303 	and.w	r3, r3, #3
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d005      	beq.n	800ac20 <HAL_GPIO_Init+0x40>
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	f003 0303 	and.w	r3, r3, #3
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	d130      	bne.n	800ac82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	2203      	movs	r2, #3
 800ac2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac30:	43db      	mvns	r3, r3
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	4013      	ands	r3, r2
 800ac36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	68da      	ldr	r2, [r3, #12]
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	005b      	lsls	r3, r3, #1
 800ac40:	fa02 f303 	lsl.w	r3, r2, r3
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ac56:	2201      	movs	r2, #1
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac5e:	43db      	mvns	r3, r3
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	4013      	ands	r3, r2
 800ac64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	091b      	lsrs	r3, r3, #4
 800ac6c:	f003 0201 	and.w	r2, r3, #1
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	fa02 f303 	lsl.w	r3, r2, r3
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	f003 0303 	and.w	r3, r3, #3
 800ac8a:	2b03      	cmp	r3, #3
 800ac8c:	d017      	beq.n	800acbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	2203      	movs	r2, #3
 800ac9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac9e:	43db      	mvns	r3, r3
 800aca0:	693a      	ldr	r2, [r7, #16]
 800aca2:	4013      	ands	r3, r2
 800aca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	689a      	ldr	r2, [r3, #8]
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	005b      	lsls	r3, r3, #1
 800acae:	fa02 f303 	lsl.w	r3, r2, r3
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	f003 0303 	and.w	r3, r3, #3
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d123      	bne.n	800ad12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	08da      	lsrs	r2, r3, #3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	3208      	adds	r2, #8
 800acd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	f003 0307 	and.w	r3, r3, #7
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	220f      	movs	r2, #15
 800ace2:	fa02 f303 	lsl.w	r3, r2, r3
 800ace6:	43db      	mvns	r3, r3
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	4013      	ands	r3, r2
 800acec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	691a      	ldr	r2, [r3, #16]
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f003 0307 	and.w	r3, r3, #7
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	fa02 f303 	lsl.w	r3, r2, r3
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	08da      	lsrs	r2, r3, #3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	3208      	adds	r2, #8
 800ad0c:	6939      	ldr	r1, [r7, #16]
 800ad0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	005b      	lsls	r3, r3, #1
 800ad1c:	2203      	movs	r2, #3
 800ad1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad22:	43db      	mvns	r3, r3
 800ad24:	693a      	ldr	r2, [r7, #16]
 800ad26:	4013      	ands	r3, r2
 800ad28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	f003 0203 	and.w	r2, r3, #3
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	005b      	lsls	r3, r3, #1
 800ad36:	fa02 f303 	lsl.w	r3, r2, r3
 800ad3a:	693a      	ldr	r2, [r7, #16]
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	693a      	ldr	r2, [r7, #16]
 800ad44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f000 80a0 	beq.w	800ae94 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad54:	4b58      	ldr	r3, [pc, #352]	; (800aeb8 <HAL_GPIO_Init+0x2d8>)
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	4a57      	ldr	r2, [pc, #348]	; (800aeb8 <HAL_GPIO_Init+0x2d8>)
 800ad5a:	f043 0301 	orr.w	r3, r3, #1
 800ad5e:	6193      	str	r3, [r2, #24]
 800ad60:	4b55      	ldr	r3, [pc, #340]	; (800aeb8 <HAL_GPIO_Init+0x2d8>)
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	f003 0301 	and.w	r3, r3, #1
 800ad68:	60bb      	str	r3, [r7, #8]
 800ad6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ad6c:	4a53      	ldr	r2, [pc, #332]	; (800aebc <HAL_GPIO_Init+0x2dc>)
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	089b      	lsrs	r3, r3, #2
 800ad72:	3302      	adds	r3, #2
 800ad74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f003 0303 	and.w	r3, r3, #3
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	220f      	movs	r2, #15
 800ad84:	fa02 f303 	lsl.w	r3, r2, r3
 800ad88:	43db      	mvns	r3, r3
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ad96:	d019      	beq.n	800adcc <HAL_GPIO_Init+0x1ec>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a49      	ldr	r2, [pc, #292]	; (800aec0 <HAL_GPIO_Init+0x2e0>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d013      	beq.n	800adc8 <HAL_GPIO_Init+0x1e8>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a48      	ldr	r2, [pc, #288]	; (800aec4 <HAL_GPIO_Init+0x2e4>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d00d      	beq.n	800adc4 <HAL_GPIO_Init+0x1e4>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a47      	ldr	r2, [pc, #284]	; (800aec8 <HAL_GPIO_Init+0x2e8>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d007      	beq.n	800adc0 <HAL_GPIO_Init+0x1e0>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4a46      	ldr	r2, [pc, #280]	; (800aecc <HAL_GPIO_Init+0x2ec>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d101      	bne.n	800adbc <HAL_GPIO_Init+0x1dc>
 800adb8:	2304      	movs	r3, #4
 800adba:	e008      	b.n	800adce <HAL_GPIO_Init+0x1ee>
 800adbc:	2305      	movs	r3, #5
 800adbe:	e006      	b.n	800adce <HAL_GPIO_Init+0x1ee>
 800adc0:	2303      	movs	r3, #3
 800adc2:	e004      	b.n	800adce <HAL_GPIO_Init+0x1ee>
 800adc4:	2302      	movs	r3, #2
 800adc6:	e002      	b.n	800adce <HAL_GPIO_Init+0x1ee>
 800adc8:	2301      	movs	r3, #1
 800adca:	e000      	b.n	800adce <HAL_GPIO_Init+0x1ee>
 800adcc:	2300      	movs	r3, #0
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	f002 0203 	and.w	r2, r2, #3
 800add4:	0092      	lsls	r2, r2, #2
 800add6:	4093      	lsls	r3, r2
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	4313      	orrs	r3, r2
 800addc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800adde:	4937      	ldr	r1, [pc, #220]	; (800aebc <HAL_GPIO_Init+0x2dc>)
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	089b      	lsrs	r3, r3, #2
 800ade4:	3302      	adds	r3, #2
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800adec:	4b38      	ldr	r3, [pc, #224]	; (800aed0 <HAL_GPIO_Init+0x2f0>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	43db      	mvns	r3, r3
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	4013      	ands	r3, r2
 800adfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d003      	beq.n	800ae10 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800ae10:	4a2f      	ldr	r2, [pc, #188]	; (800aed0 <HAL_GPIO_Init+0x2f0>)
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ae16:	4b2e      	ldr	r3, [pc, #184]	; (800aed0 <HAL_GPIO_Init+0x2f0>)
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	43db      	mvns	r3, r3
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	4013      	ands	r3, r2
 800ae24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d003      	beq.n	800ae3a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800ae32:	693a      	ldr	r2, [r7, #16]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800ae3a:	4a25      	ldr	r2, [pc, #148]	; (800aed0 <HAL_GPIO_Init+0x2f0>)
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ae40:	4b23      	ldr	r3, [pc, #140]	; (800aed0 <HAL_GPIO_Init+0x2f0>)
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	43db      	mvns	r3, r3
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d003      	beq.n	800ae64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800ae64:	4a1a      	ldr	r2, [pc, #104]	; (800aed0 <HAL_GPIO_Init+0x2f0>)
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ae6a:	4b19      	ldr	r3, [pc, #100]	; (800aed0 <HAL_GPIO_Init+0x2f0>)
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	43db      	mvns	r3, r3
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	4013      	ands	r3, r2
 800ae78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800ae8e:	4a10      	ldr	r2, [pc, #64]	; (800aed0 <HAL_GPIO_Init+0x2f0>)
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	3301      	adds	r3, #1
 800ae98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	fa22 f303 	lsr.w	r3, r2, r3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f47f aea3 	bne.w	800abf0 <HAL_GPIO_Init+0x10>
  }
}
 800aeaa:	bf00      	nop
 800aeac:	bf00      	nop
 800aeae:	371c      	adds	r7, #28
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr
 800aeb8:	40021000 	.word	0x40021000
 800aebc:	40010000 	.word	0x40010000
 800aec0:	48000400 	.word	0x48000400
 800aec4:	48000800 	.word	0x48000800
 800aec8:	48000c00 	.word	0x48000c00
 800aecc:	48001000 	.word	0x48001000
 800aed0:	40010400 	.word	0x40010400

0800aed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	807b      	strh	r3, [r7, #2]
 800aee0:	4613      	mov	r3, r2
 800aee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aee4:	787b      	ldrb	r3, [r7, #1]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d003      	beq.n	800aef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800aeea:	887a      	ldrh	r2, [r7, #2]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800aef0:	e002      	b.n	800aef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800aef2:	887a      	ldrh	r2, [r7, #2]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800aef8:	bf00      	nop
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d101      	bne.n	800af16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	e081      	b.n	800b01a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d106      	bne.n	800af30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7fb fb82 	bl	8006634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2224      	movs	r2, #36	; 0x24
 800af34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f022 0201 	bic.w	r2, r2, #1
 800af46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800af54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	689a      	ldr	r2, [r3, #8]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d107      	bne.n	800af7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	689a      	ldr	r2, [r3, #8]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af7a:	609a      	str	r2, [r3, #8]
 800af7c:	e006      	b.n	800af8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	689a      	ldr	r2, [r3, #8]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800af8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	2b02      	cmp	r3, #2
 800af92:	d104      	bne.n	800af9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	6812      	ldr	r2, [r2, #0]
 800afa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800afac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68da      	ldr	r2, [r3, #12]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800afc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	691a      	ldr	r2, [r3, #16]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	430a      	orrs	r2, r1
 800afda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	69d9      	ldr	r1, [r3, #28]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a1a      	ldr	r2, [r3, #32]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	430a      	orrs	r2, r1
 800afea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f042 0201 	orr.w	r2, r2, #1
 800affa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2220      	movs	r2, #32
 800b006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3708      	adds	r7, #8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
	...

0800b024 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b088      	sub	sp, #32
 800b028:	af02      	add	r7, sp, #8
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	607a      	str	r2, [r7, #4]
 800b02e:	461a      	mov	r2, r3
 800b030:	460b      	mov	r3, r1
 800b032:	817b      	strh	r3, [r7, #10]
 800b034:	4613      	mov	r3, r2
 800b036:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b20      	cmp	r3, #32
 800b042:	f040 80da 	bne.w	800b1fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d101      	bne.n	800b054 <HAL_I2C_Master_Transmit+0x30>
 800b050:	2302      	movs	r3, #2
 800b052:	e0d3      	b.n	800b1fc <HAL_I2C_Master_Transmit+0x1d8>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b05c:	f7fd fbc0 	bl	80087e0 <HAL_GetTick>
 800b060:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	2319      	movs	r3, #25
 800b068:	2201      	movs	r2, #1
 800b06a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f000 fcbc 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d001      	beq.n	800b07e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e0be      	b.n	800b1fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2221      	movs	r2, #33	; 0x21
 800b082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2210      	movs	r2, #16
 800b08a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	893a      	ldrh	r2, [r7, #8]
 800b09e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	2bff      	cmp	r3, #255	; 0xff
 800b0ae:	d90e      	bls.n	800b0ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	22ff      	movs	r2, #255	; 0xff
 800b0b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	8979      	ldrh	r1, [r7, #10]
 800b0be:	4b51      	ldr	r3, [pc, #324]	; (800b204 <HAL_I2C_Master_Transmit+0x1e0>)
 800b0c0:	9300      	str	r3, [sp, #0]
 800b0c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f000 fe2e 	bl	800bd28 <I2C_TransferConfig>
 800b0cc:	e06c      	b.n	800b1a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0dc:	b2da      	uxtb	r2, r3
 800b0de:	8979      	ldrh	r1, [r7, #10]
 800b0e0:	4b48      	ldr	r3, [pc, #288]	; (800b204 <HAL_I2C_Master_Transmit+0x1e0>)
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f000 fe1d 	bl	800bd28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800b0ee:	e05b      	b.n	800b1a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	6a39      	ldr	r1, [r7, #32]
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f000 fcb9 	bl	800ba6c <I2C_WaitOnTXISFlagUntilTimeout>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	e07b      	b.n	800b1fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b108:	781a      	ldrb	r2, [r3, #0]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b11e:	b29b      	uxth	r3, r3
 800b120:	3b01      	subs	r3, #1
 800b122:	b29a      	uxth	r2, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b12c:	3b01      	subs	r3, #1
 800b12e:	b29a      	uxth	r2, r3
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b138:	b29b      	uxth	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d034      	beq.n	800b1a8 <HAL_I2C_Master_Transmit+0x184>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b142:	2b00      	cmp	r3, #0
 800b144:	d130      	bne.n	800b1a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	6a3b      	ldr	r3, [r7, #32]
 800b14c:	2200      	movs	r2, #0
 800b14e:	2180      	movs	r1, #128	; 0x80
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f000 fc4b 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e04d      	b.n	800b1fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b164:	b29b      	uxth	r3, r3
 800b166:	2bff      	cmp	r3, #255	; 0xff
 800b168:	d90e      	bls.n	800b188 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	22ff      	movs	r2, #255	; 0xff
 800b16e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b174:	b2da      	uxtb	r2, r3
 800b176:	8979      	ldrh	r1, [r7, #10]
 800b178:	2300      	movs	r3, #0
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f000 fdd1 	bl	800bd28 <I2C_TransferConfig>
 800b186:	e00f      	b.n	800b1a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b196:	b2da      	uxtb	r2, r3
 800b198:	8979      	ldrh	r1, [r7, #10]
 800b19a:	2300      	movs	r3, #0
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f000 fdc0 	bl	800bd28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d19e      	bne.n	800b0f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	6a39      	ldr	r1, [r7, #32]
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 fc98 	bl	800baec <I2C_WaitOnSTOPFlagUntilTimeout>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e01a      	b.n	800b1fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2220      	movs	r2, #32
 800b1cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	6859      	ldr	r1, [r3, #4]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	4b0b      	ldr	r3, [pc, #44]	; (800b208 <HAL_I2C_Master_Transmit+0x1e4>)
 800b1da:	400b      	ands	r3, r1
 800b1dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2220      	movs	r2, #32
 800b1e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	e000      	b.n	800b1fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b1fa:	2302      	movs	r3, #2
  }
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3718      	adds	r7, #24
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	80002000 	.word	0x80002000
 800b208:	fe00e800 	.word	0xfe00e800

0800b20c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b088      	sub	sp, #32
 800b210:	af02      	add	r7, sp, #8
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	607a      	str	r2, [r7, #4]
 800b216:	461a      	mov	r2, r3
 800b218:	460b      	mov	r3, r1
 800b21a:	817b      	strh	r3, [r7, #10]
 800b21c:	4613      	mov	r3, r2
 800b21e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b226:	b2db      	uxtb	r3, r3
 800b228:	2b20      	cmp	r3, #32
 800b22a:	f040 80db 	bne.w	800b3e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b234:	2b01      	cmp	r3, #1
 800b236:	d101      	bne.n	800b23c <HAL_I2C_Master_Receive+0x30>
 800b238:	2302      	movs	r3, #2
 800b23a:	e0d4      	b.n	800b3e6 <HAL_I2C_Master_Receive+0x1da>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b244:	f7fd facc 	bl	80087e0 <HAL_GetTick>
 800b248:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	2319      	movs	r3, #25
 800b250:	2201      	movs	r2, #1
 800b252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f000 fbc8 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	e0bf      	b.n	800b3e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2222      	movs	r2, #34	; 0x22
 800b26a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2210      	movs	r2, #16
 800b272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	893a      	ldrh	r2, [r7, #8]
 800b286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b292:	b29b      	uxth	r3, r3
 800b294:	2bff      	cmp	r3, #255	; 0xff
 800b296:	d90e      	bls.n	800b2b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	22ff      	movs	r2, #255	; 0xff
 800b29c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2a2:	b2da      	uxtb	r2, r3
 800b2a4:	8979      	ldrh	r1, [r7, #10]
 800b2a6:	4b52      	ldr	r3, [pc, #328]	; (800b3f0 <HAL_I2C_Master_Receive+0x1e4>)
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f000 fd3a 	bl	800bd28 <I2C_TransferConfig>
 800b2b4:	e06d      	b.n	800b392 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	8979      	ldrh	r1, [r7, #10]
 800b2c8:	4b49      	ldr	r3, [pc, #292]	; (800b3f0 <HAL_I2C_Master_Receive+0x1e4>)
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f000 fd29 	bl	800bd28 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800b2d6:	e05c      	b.n	800b392 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	6a39      	ldr	r1, [r7, #32]
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f000 fc41 	bl	800bb64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e07c      	b.n	800b3e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f6:	b2d2      	uxtb	r2, r2
 800b2f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fe:	1c5a      	adds	r2, r3, #1
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b308:	3b01      	subs	r3, #1
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b314:	b29b      	uxth	r3, r3
 800b316:	3b01      	subs	r3, #1
 800b318:	b29a      	uxth	r2, r3
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b322:	b29b      	uxth	r3, r3
 800b324:	2b00      	cmp	r3, #0
 800b326:	d034      	beq.n	800b392 <HAL_I2C_Master_Receive+0x186>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d130      	bne.n	800b392 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	2200      	movs	r2, #0
 800b338:	2180      	movs	r1, #128	; 0x80
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f000 fb56 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e04d      	b.n	800b3e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b34e:	b29b      	uxth	r3, r3
 800b350:	2bff      	cmp	r3, #255	; 0xff
 800b352:	d90e      	bls.n	800b372 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	22ff      	movs	r2, #255	; 0xff
 800b358:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	8979      	ldrh	r1, [r7, #10]
 800b362:	2300      	movs	r3, #0
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f000 fcdc 	bl	800bd28 <I2C_TransferConfig>
 800b370:	e00f      	b.n	800b392 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b376:	b29a      	uxth	r2, r3
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b380:	b2da      	uxtb	r2, r3
 800b382:	8979      	ldrh	r1, [r7, #10]
 800b384:	2300      	movs	r3, #0
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f000 fccb 	bl	800bd28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b396:	b29b      	uxth	r3, r3
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d19d      	bne.n	800b2d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	6a39      	ldr	r1, [r7, #32]
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f000 fba3 	bl	800baec <I2C_WaitOnSTOPFlagUntilTimeout>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e01a      	b.n	800b3e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2220      	movs	r2, #32
 800b3b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	6859      	ldr	r1, [r3, #4]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	4b0c      	ldr	r3, [pc, #48]	; (800b3f4 <HAL_I2C_Master_Receive+0x1e8>)
 800b3c4:	400b      	ands	r3, r1
 800b3c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2220      	movs	r2, #32
 800b3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	e000      	b.n	800b3e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b3e4:	2302      	movs	r3, #2
  }
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3718      	adds	r7, #24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	80002400 	.word	0x80002400
 800b3f4:	fe00e800 	.word	0xfe00e800

0800b3f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b088      	sub	sp, #32
 800b3fc:	af02      	add	r7, sp, #8
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	4608      	mov	r0, r1
 800b402:	4611      	mov	r1, r2
 800b404:	461a      	mov	r2, r3
 800b406:	4603      	mov	r3, r0
 800b408:	817b      	strh	r3, [r7, #10]
 800b40a:	460b      	mov	r3, r1
 800b40c:	813b      	strh	r3, [r7, #8]
 800b40e:	4613      	mov	r3, r2
 800b410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	2b20      	cmp	r3, #32
 800b41c:	f040 80f9 	bne.w	800b612 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b420:	6a3b      	ldr	r3, [r7, #32]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d002      	beq.n	800b42c <HAL_I2C_Mem_Write+0x34>
 800b426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d105      	bne.n	800b438 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b432:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e0ed      	b.n	800b614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d101      	bne.n	800b446 <HAL_I2C_Mem_Write+0x4e>
 800b442:	2302      	movs	r3, #2
 800b444:	e0e6      	b.n	800b614 <HAL_I2C_Mem_Write+0x21c>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2201      	movs	r2, #1
 800b44a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b44e:	f7fd f9c7 	bl	80087e0 <HAL_GetTick>
 800b452:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	2319      	movs	r3, #25
 800b45a:	2201      	movs	r2, #1
 800b45c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f000 fac3 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d001      	beq.n	800b470 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e0d1      	b.n	800b614 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2221      	movs	r2, #33	; 0x21
 800b474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2240      	movs	r2, #64	; 0x40
 800b47c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6a3a      	ldr	r2, [r7, #32]
 800b48a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b498:	88f8      	ldrh	r0, [r7, #6]
 800b49a:	893a      	ldrh	r2, [r7, #8]
 800b49c:	8979      	ldrh	r1, [r7, #10]
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	9301      	str	r3, [sp, #4]
 800b4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 f9d3 	bl	800b854 <I2C_RequestMemoryWrite>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d005      	beq.n	800b4c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e0a9      	b.n	800b614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	2bff      	cmp	r3, #255	; 0xff
 800b4c8:	d90e      	bls.n	800b4e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	22ff      	movs	r2, #255	; 0xff
 800b4ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	8979      	ldrh	r1, [r7, #10]
 800b4d8:	2300      	movs	r3, #0
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f000 fc21 	bl	800bd28 <I2C_TransferConfig>
 800b4e6:	e00f      	b.n	800b508 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	8979      	ldrh	r1, [r7, #10]
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f000 fc10 	bl	800bd28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b508:	697a      	ldr	r2, [r7, #20]
 800b50a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f000 faad 	bl	800ba6c <I2C_WaitOnTXISFlagUntilTimeout>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d001      	beq.n	800b51c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e07b      	b.n	800b614 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b520:	781a      	ldrb	r2, [r3, #0]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	1c5a      	adds	r2, r3, #1
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b536:	b29b      	uxth	r3, r3
 800b538:	3b01      	subs	r3, #1
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b544:	3b01      	subs	r3, #1
 800b546:	b29a      	uxth	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b550:	b29b      	uxth	r3, r3
 800b552:	2b00      	cmp	r3, #0
 800b554:	d034      	beq.n	800b5c0 <HAL_I2C_Mem_Write+0x1c8>
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d130      	bne.n	800b5c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b564:	2200      	movs	r2, #0
 800b566:	2180      	movs	r1, #128	; 0x80
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f000 fa3f 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d001      	beq.n	800b578 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	e04d      	b.n	800b614 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	2bff      	cmp	r3, #255	; 0xff
 800b580:	d90e      	bls.n	800b5a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	22ff      	movs	r2, #255	; 0xff
 800b586:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	8979      	ldrh	r1, [r7, #10]
 800b590:	2300      	movs	r3, #0
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 fbc5 	bl	800bd28 <I2C_TransferConfig>
 800b59e:	e00f      	b.n	800b5c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ae:	b2da      	uxtb	r2, r3
 800b5b0:	8979      	ldrh	r1, [r7, #10]
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f000 fbb4 	bl	800bd28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d19e      	bne.n	800b508 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f000 fa8c 	bl	800baec <I2C_WaitOnSTOPFlagUntilTimeout>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e01a      	b.n	800b614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2220      	movs	r2, #32
 800b5e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	6859      	ldr	r1, [r3, #4]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	4b0a      	ldr	r3, [pc, #40]	; (800b61c <HAL_I2C_Mem_Write+0x224>)
 800b5f2:	400b      	ands	r3, r1
 800b5f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2220      	movs	r2, #32
 800b5fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	e000      	b.n	800b614 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b612:	2302      	movs	r3, #2
  }
}
 800b614:	4618      	mov	r0, r3
 800b616:	3718      	adds	r7, #24
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	fe00e800 	.word	0xfe00e800

0800b620 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b088      	sub	sp, #32
 800b624:	af02      	add	r7, sp, #8
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	4608      	mov	r0, r1
 800b62a:	4611      	mov	r1, r2
 800b62c:	461a      	mov	r2, r3
 800b62e:	4603      	mov	r3, r0
 800b630:	817b      	strh	r3, [r7, #10]
 800b632:	460b      	mov	r3, r1
 800b634:	813b      	strh	r3, [r7, #8]
 800b636:	4613      	mov	r3, r2
 800b638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b640:	b2db      	uxtb	r3, r3
 800b642:	2b20      	cmp	r3, #32
 800b644:	f040 80fd 	bne.w	800b842 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b648:	6a3b      	ldr	r3, [r7, #32]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <HAL_I2C_Mem_Read+0x34>
 800b64e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b650:	2b00      	cmp	r3, #0
 800b652:	d105      	bne.n	800b660 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b65a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	e0f1      	b.n	800b844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b666:	2b01      	cmp	r3, #1
 800b668:	d101      	bne.n	800b66e <HAL_I2C_Mem_Read+0x4e>
 800b66a:	2302      	movs	r3, #2
 800b66c:	e0ea      	b.n	800b844 <HAL_I2C_Mem_Read+0x224>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2201      	movs	r2, #1
 800b672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b676:	f7fd f8b3 	bl	80087e0 <HAL_GetTick>
 800b67a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	2319      	movs	r3, #25
 800b682:	2201      	movs	r2, #1
 800b684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f000 f9af 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d001      	beq.n	800b698 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	e0d5      	b.n	800b844 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2222      	movs	r2, #34	; 0x22
 800b69c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2240      	movs	r2, #64	; 0x40
 800b6a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6a3a      	ldr	r2, [r7, #32]
 800b6b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b6b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b6c0:	88f8      	ldrh	r0, [r7, #6]
 800b6c2:	893a      	ldrh	r2, [r7, #8]
 800b6c4:	8979      	ldrh	r1, [r7, #10]
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	9301      	str	r3, [sp, #4]
 800b6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f000 f913 	bl	800b8fc <I2C_RequestMemoryRead>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d005      	beq.n	800b6e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	e0ad      	b.n	800b844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	2bff      	cmp	r3, #255	; 0xff
 800b6f0:	d90e      	bls.n	800b710 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	22ff      	movs	r2, #255	; 0xff
 800b6f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	8979      	ldrh	r1, [r7, #10]
 800b700:	4b52      	ldr	r3, [pc, #328]	; (800b84c <HAL_I2C_Mem_Read+0x22c>)
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f000 fb0d 	bl	800bd28 <I2C_TransferConfig>
 800b70e:	e00f      	b.n	800b730 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b714:	b29a      	uxth	r2, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b71e:	b2da      	uxtb	r2, r3
 800b720:	8979      	ldrh	r1, [r7, #10]
 800b722:	4b4a      	ldr	r3, [pc, #296]	; (800b84c <HAL_I2C_Mem_Read+0x22c>)
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f000 fafc 	bl	800bd28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	2200      	movs	r2, #0
 800b738:	2104      	movs	r1, #4
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f000 f956 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e07c      	b.n	800b844 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b754:	b2d2      	uxtb	r2, r2
 800b756:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	1c5a      	adds	r2, r3, #1
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b766:	3b01      	subs	r3, #1
 800b768:	b29a      	uxth	r2, r3
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b772:	b29b      	uxth	r3, r3
 800b774:	3b01      	subs	r3, #1
 800b776:	b29a      	uxth	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b780:	b29b      	uxth	r3, r3
 800b782:	2b00      	cmp	r3, #0
 800b784:	d034      	beq.n	800b7f0 <HAL_I2C_Mem_Read+0x1d0>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d130      	bne.n	800b7f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	9300      	str	r3, [sp, #0]
 800b792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b794:	2200      	movs	r2, #0
 800b796:	2180      	movs	r1, #128	; 0x80
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f000 f927 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e04d      	b.n	800b844 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	2bff      	cmp	r3, #255	; 0xff
 800b7b0:	d90e      	bls.n	800b7d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	22ff      	movs	r2, #255	; 0xff
 800b7b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	8979      	ldrh	r1, [r7, #10]
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f000 faad 	bl	800bd28 <I2C_TransferConfig>
 800b7ce:	e00f      	b.n	800b7f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	8979      	ldrh	r1, [r7, #10]
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	f000 fa9c 	bl	800bd28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d19a      	bne.n	800b730 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7fa:	697a      	ldr	r2, [r7, #20]
 800b7fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f000 f974 	bl	800baec <I2C_WaitOnSTOPFlagUntilTimeout>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d001      	beq.n	800b80e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	e01a      	b.n	800b844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2220      	movs	r2, #32
 800b814:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6859      	ldr	r1, [r3, #4]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <HAL_I2C_Mem_Read+0x230>)
 800b822:	400b      	ands	r3, r1
 800b824:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2220      	movs	r2, #32
 800b82a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2200      	movs	r2, #0
 800b832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b83e:	2300      	movs	r3, #0
 800b840:	e000      	b.n	800b844 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b842:	2302      	movs	r3, #2
  }
}
 800b844:	4618      	mov	r0, r3
 800b846:	3718      	adds	r7, #24
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	80002400 	.word	0x80002400
 800b850:	fe00e800 	.word	0xfe00e800

0800b854 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af02      	add	r7, sp, #8
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	4608      	mov	r0, r1
 800b85e:	4611      	mov	r1, r2
 800b860:	461a      	mov	r2, r3
 800b862:	4603      	mov	r3, r0
 800b864:	817b      	strh	r3, [r7, #10]
 800b866:	460b      	mov	r3, r1
 800b868:	813b      	strh	r3, [r7, #8]
 800b86a:	4613      	mov	r3, r2
 800b86c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b86e:	88fb      	ldrh	r3, [r7, #6]
 800b870:	b2da      	uxtb	r2, r3
 800b872:	8979      	ldrh	r1, [r7, #10]
 800b874:	4b20      	ldr	r3, [pc, #128]	; (800b8f8 <I2C_RequestMemoryWrite+0xa4>)
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f000 fa53 	bl	800bd28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b882:	69fa      	ldr	r2, [r7, #28]
 800b884:	69b9      	ldr	r1, [r7, #24]
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f000 f8f0 	bl	800ba6c <I2C_WaitOnTXISFlagUntilTimeout>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	e02c      	b.n	800b8f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b896:	88fb      	ldrh	r3, [r7, #6]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d105      	bne.n	800b8a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b89c:	893b      	ldrh	r3, [r7, #8]
 800b89e:	b2da      	uxtb	r2, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	629a      	str	r2, [r3, #40]	; 0x28
 800b8a6:	e015      	b.n	800b8d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b8a8:	893b      	ldrh	r3, [r7, #8]
 800b8aa:	0a1b      	lsrs	r3, r3, #8
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8b6:	69fa      	ldr	r2, [r7, #28]
 800b8b8:	69b9      	ldr	r1, [r7, #24]
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f000 f8d6 	bl	800ba6c <I2C_WaitOnTXISFlagUntilTimeout>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e012      	b.n	800b8f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b8ca:	893b      	ldrh	r3, [r7, #8]
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	2180      	movs	r1, #128	; 0x80
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f000 f884 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e000      	b.n	800b8f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3710      	adds	r7, #16
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	80002000 	.word	0x80002000

0800b8fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b086      	sub	sp, #24
 800b900:	af02      	add	r7, sp, #8
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	4608      	mov	r0, r1
 800b906:	4611      	mov	r1, r2
 800b908:	461a      	mov	r2, r3
 800b90a:	4603      	mov	r3, r0
 800b90c:	817b      	strh	r3, [r7, #10]
 800b90e:	460b      	mov	r3, r1
 800b910:	813b      	strh	r3, [r7, #8]
 800b912:	4613      	mov	r3, r2
 800b914:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b916:	88fb      	ldrh	r3, [r7, #6]
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	8979      	ldrh	r1, [r7, #10]
 800b91c:	4b20      	ldr	r3, [pc, #128]	; (800b9a0 <I2C_RequestMemoryRead+0xa4>)
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	2300      	movs	r3, #0
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f000 fa00 	bl	800bd28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b928:	69fa      	ldr	r2, [r7, #28]
 800b92a:	69b9      	ldr	r1, [r7, #24]
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f000 f89d 	bl	800ba6c <I2C_WaitOnTXISFlagUntilTimeout>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d001      	beq.n	800b93c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	e02c      	b.n	800b996 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b93c:	88fb      	ldrh	r3, [r7, #6]
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d105      	bne.n	800b94e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b942:	893b      	ldrh	r3, [r7, #8]
 800b944:	b2da      	uxtb	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	629a      	str	r2, [r3, #40]	; 0x28
 800b94c:	e015      	b.n	800b97a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b94e:	893b      	ldrh	r3, [r7, #8]
 800b950:	0a1b      	lsrs	r3, r3, #8
 800b952:	b29b      	uxth	r3, r3
 800b954:	b2da      	uxtb	r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b95c:	69fa      	ldr	r2, [r7, #28]
 800b95e:	69b9      	ldr	r1, [r7, #24]
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f000 f883 	bl	800ba6c <I2C_WaitOnTXISFlagUntilTimeout>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d001      	beq.n	800b970 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	e012      	b.n	800b996 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b970:	893b      	ldrh	r3, [r7, #8]
 800b972:	b2da      	uxtb	r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	2200      	movs	r2, #0
 800b982:	2140      	movs	r1, #64	; 0x40
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 f831 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d001      	beq.n	800b994 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e000      	b.n	800b996 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	80002000 	.word	0x80002000

0800b9a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	699b      	ldr	r3, [r3, #24]
 800b9b2:	f003 0302 	and.w	r3, r3, #2
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d103      	bne.n	800b9c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	f003 0301 	and.w	r3, r3, #1
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d007      	beq.n	800b9e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	699a      	ldr	r2, [r3, #24]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f042 0201 	orr.w	r2, r2, #1
 800b9de:	619a      	str	r2, [r3, #24]
  }
}
 800b9e0:	bf00      	nop
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9fc:	e022      	b.n	800ba44 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba04:	d01e      	beq.n	800ba44 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba06:	f7fc feeb 	bl	80087e0 <HAL_GetTick>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	683a      	ldr	r2, [r7, #0]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d302      	bcc.n	800ba1c <I2C_WaitOnFlagUntilTimeout+0x30>
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d113      	bne.n	800ba44 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba20:	f043 0220 	orr.w	r2, r3, #32
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2220      	movs	r2, #32
 800ba2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	e00f      	b.n	800ba64 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	699a      	ldr	r2, [r3, #24]
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	4013      	ands	r3, r2
 800ba4e:	68ba      	ldr	r2, [r7, #8]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	bf0c      	ite	eq
 800ba54:	2301      	moveq	r3, #1
 800ba56:	2300      	movne	r3, #0
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	79fb      	ldrb	r3, [r7, #7]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d0cd      	beq.n	800b9fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ba78:	e02c      	b.n	800bad4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	68b9      	ldr	r1, [r7, #8]
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f000 f8dc 	bl	800bc3c <I2C_IsAcknowledgeFailed>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d001      	beq.n	800ba8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e02a      	b.n	800bae4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba94:	d01e      	beq.n	800bad4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba96:	f7fc fea3 	bl	80087e0 <HAL_GetTick>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	1ad3      	subs	r3, r2, r3
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d302      	bcc.n	800baac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d113      	bne.n	800bad4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bab0:	f043 0220 	orr.w	r2, r3, #32
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2220      	movs	r2, #32
 800babc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	e007      	b.n	800bae4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	699b      	ldr	r3, [r3, #24]
 800bada:	f003 0302 	and.w	r3, r3, #2
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d1cb      	bne.n	800ba7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800baf8:	e028      	b.n	800bb4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	68b9      	ldr	r1, [r7, #8]
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f000 f89c 	bl	800bc3c <I2C_IsAcknowledgeFailed>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d001      	beq.n	800bb0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e026      	b.n	800bb5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb0e:	f7fc fe67 	bl	80087e0 <HAL_GetTick>
 800bb12:	4602      	mov	r2, r0
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d302      	bcc.n	800bb24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d113      	bne.n	800bb4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb28:	f043 0220 	orr.w	r2, r3, #32
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2220      	movs	r2, #32
 800bb34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e007      	b.n	800bb5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	f003 0320 	and.w	r3, r3, #32
 800bb56:	2b20      	cmp	r3, #32
 800bb58:	d1cf      	bne.n	800bafa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bb70:	e055      	b.n	800bc1e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	68b9      	ldr	r1, [r7, #8]
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	f000 f860 	bl	800bc3c <I2C_IsAcknowledgeFailed>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	e053      	b.n	800bc2e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	699b      	ldr	r3, [r3, #24]
 800bb8c:	f003 0320 	and.w	r3, r3, #32
 800bb90:	2b20      	cmp	r3, #32
 800bb92:	d129      	bne.n	800bbe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	f003 0304 	and.w	r3, r3, #4
 800bb9e:	2b04      	cmp	r3, #4
 800bba0:	d105      	bne.n	800bbae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	e03f      	b.n	800bc2e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2220      	movs	r2, #32
 800bbb4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	6859      	ldr	r1, [r3, #4]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	4b1d      	ldr	r3, [pc, #116]	; (800bc38 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800bbc2:	400b      	ands	r3, r1
 800bbc4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2220      	movs	r2, #32
 800bbd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e022      	b.n	800bc2e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbe8:	f7fc fdfa 	bl	80087e0 <HAL_GetTick>
 800bbec:	4602      	mov	r2, r0
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d302      	bcc.n	800bbfe <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d10f      	bne.n	800bc1e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc02:	f043 0220 	orr.w	r2, r3, #32
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2220      	movs	r2, #32
 800bc0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e007      	b.n	800bc2e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	699b      	ldr	r3, [r3, #24]
 800bc24:	f003 0304 	and.w	r3, r3, #4
 800bc28:	2b04      	cmp	r3, #4
 800bc2a:	d1a2      	bne.n	800bb72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	fe00e800 	.word	0xfe00e800

0800bc3c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	699b      	ldr	r3, [r3, #24]
 800bc4e:	f003 0310 	and.w	r3, r3, #16
 800bc52:	2b10      	cmp	r3, #16
 800bc54:	d161      	bne.n	800bd1a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc64:	d02b      	beq.n	800bcbe <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc74:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc76:	e022      	b.n	800bcbe <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc7e:	d01e      	beq.n	800bcbe <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc80:	f7fc fdae 	bl	80087e0 <HAL_GetTick>
 800bc84:	4602      	mov	r2, r0
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	1ad3      	subs	r3, r2, r3
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d302      	bcc.n	800bc96 <I2C_IsAcknowledgeFailed+0x5a>
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d113      	bne.n	800bcbe <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc9a:	f043 0220 	orr.w	r2, r3, #32
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2220      	movs	r2, #32
 800bca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e02e      	b.n	800bd1c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	699b      	ldr	r3, [r3, #24]
 800bcc4:	f003 0320 	and.w	r3, r3, #32
 800bcc8:	2b20      	cmp	r3, #32
 800bcca:	d1d5      	bne.n	800bc78 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2210      	movs	r2, #16
 800bcd2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2220      	movs	r2, #32
 800bcda:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f7ff fe61 	bl	800b9a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	6859      	ldr	r1, [r3, #4]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	4b0d      	ldr	r3, [pc, #52]	; (800bd24 <I2C_IsAcknowledgeFailed+0xe8>)
 800bcee:	400b      	ands	r3, r1
 800bcf0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcf6:	f043 0204 	orr.w	r2, r3, #4
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2220      	movs	r2, #32
 800bd02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	e000      	b.n	800bd1c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	fe00e800 	.word	0xfe00e800

0800bd28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	607b      	str	r3, [r7, #4]
 800bd32:	460b      	mov	r3, r1
 800bd34:	817b      	strh	r3, [r7, #10]
 800bd36:	4613      	mov	r3, r2
 800bd38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	685a      	ldr	r2, [r3, #4]
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	0d5b      	lsrs	r3, r3, #21
 800bd44:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bd48:	4b0d      	ldr	r3, [pc, #52]	; (800bd80 <I2C_TransferConfig+0x58>)
 800bd4a:	430b      	orrs	r3, r1
 800bd4c:	43db      	mvns	r3, r3
 800bd4e:	ea02 0103 	and.w	r1, r2, r3
 800bd52:	897b      	ldrh	r3, [r7, #10]
 800bd54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bd58:	7a7b      	ldrb	r3, [r7, #9]
 800bd5a:	041b      	lsls	r3, r3, #16
 800bd5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd60:	431a      	orrs	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	431a      	orrs	r2, r3
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	431a      	orrs	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	430a      	orrs	r2, r1
 800bd70:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800bd72:	bf00      	nop
 800bd74:	3714      	adds	r7, #20
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	03ff63ff 	.word	0x03ff63ff

0800bd84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b20      	cmp	r3, #32
 800bd98:	d138      	bne.n	800be0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d101      	bne.n	800bda8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bda4:	2302      	movs	r3, #2
 800bda6:	e032      	b.n	800be0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2224      	movs	r2, #36	; 0x24
 800bdb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f022 0201 	bic.w	r2, r2, #1
 800bdc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bdd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	6819      	ldr	r1, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	430a      	orrs	r2, r1
 800bde6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f042 0201 	orr.w	r2, r2, #1
 800bdf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2220      	movs	r2, #32
 800bdfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800be08:	2300      	movs	r3, #0
 800be0a:	e000      	b.n	800be0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800be0c:	2302      	movs	r3, #2
  }
}
 800be0e:	4618      	mov	r0, r3
 800be10:	370c      	adds	r7, #12
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800be1a:	b480      	push	{r7}
 800be1c:	b085      	sub	sp, #20
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	2b20      	cmp	r3, #32
 800be2e:	d139      	bne.n	800bea4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be36:	2b01      	cmp	r3, #1
 800be38:	d101      	bne.n	800be3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800be3a:	2302      	movs	r3, #2
 800be3c:	e033      	b.n	800bea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2201      	movs	r2, #1
 800be42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2224      	movs	r2, #36	; 0x24
 800be4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f022 0201 	bic.w	r2, r2, #1
 800be5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800be6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	021b      	lsls	r3, r3, #8
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	4313      	orrs	r3, r2
 800be76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f042 0201 	orr.w	r2, r2, #1
 800be8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2220      	movs	r2, #32
 800be94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	e000      	b.n	800bea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bea4:	2302      	movs	r3, #2
  }
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3714      	adds	r7, #20
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800beb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beb4:	b08b      	sub	sp, #44	; 0x2c
 800beb6:	af06      	add	r7, sp, #24
 800beb8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e0d0      	b.n	800c066 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b00      	cmp	r3, #0
 800bece:	d106      	bne.n	800bede <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f00a fda3 	bl	8016a24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2203      	movs	r2, #3
 800bee2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4618      	mov	r0, r3
 800beec:	f003 fff7 	bl	800fede <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bef0:	2300      	movs	r3, #0
 800bef2:	73fb      	strb	r3, [r7, #15]
 800bef4:	e04c      	b.n	800bf90 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bef6:	7bfb      	ldrb	r3, [r7, #15]
 800bef8:	6879      	ldr	r1, [r7, #4]
 800befa:	1c5a      	adds	r2, r3, #1
 800befc:	4613      	mov	r3, r2
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4413      	add	r3, r2
 800bf02:	00db      	lsls	r3, r3, #3
 800bf04:	440b      	add	r3, r1
 800bf06:	3301      	adds	r3, #1
 800bf08:	2201      	movs	r2, #1
 800bf0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bf0c:	7bfb      	ldrb	r3, [r7, #15]
 800bf0e:	6879      	ldr	r1, [r7, #4]
 800bf10:	1c5a      	adds	r2, r3, #1
 800bf12:	4613      	mov	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	00db      	lsls	r3, r3, #3
 800bf1a:	440b      	add	r3, r1
 800bf1c:	7bfa      	ldrb	r2, [r7, #15]
 800bf1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bf20:	7bfa      	ldrb	r2, [r7, #15]
 800bf22:	7bfb      	ldrb	r3, [r7, #15]
 800bf24:	b298      	uxth	r0, r3
 800bf26:	6879      	ldr	r1, [r7, #4]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	00db      	lsls	r3, r3, #3
 800bf30:	440b      	add	r3, r1
 800bf32:	3336      	adds	r3, #54	; 0x36
 800bf34:	4602      	mov	r2, r0
 800bf36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bf38:	7bfb      	ldrb	r3, [r7, #15]
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	1c5a      	adds	r2, r3, #1
 800bf3e:	4613      	mov	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4413      	add	r3, r2
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	440b      	add	r3, r1
 800bf48:	3303      	adds	r3, #3
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bf4e:	7bfa      	ldrb	r2, [r7, #15]
 800bf50:	6879      	ldr	r1, [r7, #4]
 800bf52:	4613      	mov	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4413      	add	r3, r2
 800bf58:	00db      	lsls	r3, r3, #3
 800bf5a:	440b      	add	r3, r1
 800bf5c:	3338      	adds	r3, #56	; 0x38
 800bf5e:	2200      	movs	r2, #0
 800bf60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bf62:	7bfa      	ldrb	r2, [r7, #15]
 800bf64:	6879      	ldr	r1, [r7, #4]
 800bf66:	4613      	mov	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	00db      	lsls	r3, r3, #3
 800bf6e:	440b      	add	r3, r1
 800bf70:	333c      	adds	r3, #60	; 0x3c
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bf76:	7bfa      	ldrb	r2, [r7, #15]
 800bf78:	6879      	ldr	r1, [r7, #4]
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	4413      	add	r3, r2
 800bf80:	00db      	lsls	r3, r3, #3
 800bf82:	440b      	add	r3, r1
 800bf84:	3340      	adds	r3, #64	; 0x40
 800bf86:	2200      	movs	r2, #0
 800bf88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf8a:	7bfb      	ldrb	r3, [r7, #15]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	73fb      	strb	r3, [r7, #15]
 800bf90:	7bfa      	ldrb	r2, [r7, #15]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d3ad      	bcc.n	800bef6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	73fb      	strb	r3, [r7, #15]
 800bf9e:	e044      	b.n	800c02a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bfa0:	7bfa      	ldrb	r2, [r7, #15]
 800bfa2:	6879      	ldr	r1, [r7, #4]
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	4413      	add	r3, r2
 800bfaa:	00db      	lsls	r3, r3, #3
 800bfac:	440b      	add	r3, r1
 800bfae:	f203 1369 	addw	r3, r3, #361	; 0x169
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bfb6:	7bfa      	ldrb	r2, [r7, #15]
 800bfb8:	6879      	ldr	r1, [r7, #4]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	4413      	add	r3, r2
 800bfc0:	00db      	lsls	r3, r3, #3
 800bfc2:	440b      	add	r3, r1
 800bfc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bfc8:	7bfa      	ldrb	r2, [r7, #15]
 800bfca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bfcc:	7bfa      	ldrb	r2, [r7, #15]
 800bfce:	6879      	ldr	r1, [r7, #4]
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	4413      	add	r3, r2
 800bfd6:	00db      	lsls	r3, r3, #3
 800bfd8:	440b      	add	r3, r1
 800bfda:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800bfde:	2200      	movs	r2, #0
 800bfe0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bfe2:	7bfa      	ldrb	r2, [r7, #15]
 800bfe4:	6879      	ldr	r1, [r7, #4]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	4413      	add	r3, r2
 800bfec:	00db      	lsls	r3, r3, #3
 800bfee:	440b      	add	r3, r1
 800bff0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800bff4:	2200      	movs	r2, #0
 800bff6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bff8:	7bfa      	ldrb	r2, [r7, #15]
 800bffa:	6879      	ldr	r1, [r7, #4]
 800bffc:	4613      	mov	r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	00db      	lsls	r3, r3, #3
 800c004:	440b      	add	r3, r1
 800c006:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c00a:	2200      	movs	r2, #0
 800c00c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c00e:	7bfa      	ldrb	r2, [r7, #15]
 800c010:	6879      	ldr	r1, [r7, #4]
 800c012:	4613      	mov	r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	4413      	add	r3, r2
 800c018:	00db      	lsls	r3, r3, #3
 800c01a:	440b      	add	r3, r1
 800c01c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800c020:	2200      	movs	r2, #0
 800c022:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	3301      	adds	r3, #1
 800c028:	73fb      	strb	r3, [r7, #15]
 800c02a:	7bfa      	ldrb	r2, [r7, #15]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	429a      	cmp	r2, r3
 800c032:	d3b5      	bcc.n	800bfa0 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	603b      	str	r3, [r7, #0]
 800c03a:	687e      	ldr	r6, [r7, #4]
 800c03c:	466d      	mov	r5, sp
 800c03e:	f106 0410 	add.w	r4, r6, #16
 800c042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c046:	6823      	ldr	r3, [r4, #0]
 800c048:	602b      	str	r3, [r5, #0]
 800c04a:	1d33      	adds	r3, r6, #4
 800c04c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c04e:	6838      	ldr	r0, [r7, #0]
 800c050:	f003 ff60 	bl	800ff14 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3714      	adds	r7, #20
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c06e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b082      	sub	sp, #8
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d101      	bne.n	800c084 <HAL_PCD_Start+0x16>
 800c080:	2302      	movs	r3, #2
 800c082:	e016      	b.n	800c0b2 <HAL_PCD_Start+0x44>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4618      	mov	r0, r3
 800c092:	f003 ff0d 	bl	800feb0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800c096:	2101      	movs	r1, #1
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f00a ff69 	bl	8016f70 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f006 f922 	bl	80122ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b082      	sub	sp, #8
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f006 f91b 	bl	8012302 <USB_ReadInterrupts>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0d6:	d102      	bne.n	800c0de <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 faf6 	bl	800c6ca <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f006 f90d 	bl	8012302 <USB_ReadInterrupts>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0f2:	d112      	bne.n	800c11a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c0fc:	b29a      	uxth	r2, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c106:	b292      	uxth	r2, r2
 800c108:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f00a fd32 	bl	8016b76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800c112:	2100      	movs	r1, #0
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 f8c7 	bl	800c2a8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4618      	mov	r0, r3
 800c120:	f006 f8ef 	bl	8012302 <USB_ReadInterrupts>
 800c124:	4603      	mov	r3, r0
 800c126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c12a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c12e:	d10b      	bne.n	800c148 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c138:	b29a      	uxth	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c142:	b292      	uxth	r2, r2
 800c144:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4618      	mov	r0, r3
 800c14e:	f006 f8d8 	bl	8012302 <USB_ReadInterrupts>
 800c152:	4603      	mov	r3, r0
 800c154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c15c:	d10b      	bne.n	800c176 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c166:	b29a      	uxth	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c170:	b292      	uxth	r2, r2
 800c172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f006 f8c1 	bl	8012302 <USB_ReadInterrupts>
 800c180:	4603      	mov	r3, r0
 800c182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c18a:	d126      	bne.n	800c1da <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c194:	b29a      	uxth	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f022 0204 	bic.w	r2, r2, #4
 800c19e:	b292      	uxth	r2, r2
 800c1a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f022 0208 	bic.w	r2, r2, #8
 800c1b6:	b292      	uxth	r2, r2
 800c1b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f00a fd13 	bl	8016be8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c1d4:	b292      	uxth	r2, r2
 800c1d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f006 f88f 	bl	8012302 <USB_ReadInterrupts>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1ee:	d126      	bne.n	800c23e <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f042 0208 	orr.w	r2, r2, #8
 800c202:	b292      	uxth	r2, r2
 800c204:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c210:	b29a      	uxth	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c21a:	b292      	uxth	r2, r2
 800c21c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c228:	b29a      	uxth	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f042 0204 	orr.w	r2, r2, #4
 800c232:	b292      	uxth	r2, r2
 800c234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f00a fcbb 	bl	8016bb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4618      	mov	r0, r3
 800c244:	f006 f85d 	bl	8012302 <USB_ReadInterrupts>
 800c248:	4603      	mov	r3, r0
 800c24a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c24e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c252:	d10e      	bne.n	800c272 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c266:	b292      	uxth	r2, r2
 800c268:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f00a fc74 	bl	8016b5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4618      	mov	r0, r3
 800c278:	f006 f843 	bl	8012302 <USB_ReadInterrupts>
 800c27c:	4603      	mov	r3, r0
 800c27e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c286:	d10b      	bne.n	800c2a0 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c290:	b29a      	uxth	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c29a:	b292      	uxth	r2, r2
 800c29c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d101      	bne.n	800c2c2 <HAL_PCD_SetAddress+0x1a>
 800c2be:	2302      	movs	r3, #2
 800c2c0:	e013      	b.n	800c2ea <HAL_PCD_SetAddress+0x42>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	78fa      	ldrb	r2, [r7, #3]
 800c2ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	78fa      	ldrb	r2, [r7, #3]
 800c2d8:	4611      	mov	r1, r2
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f005 fff2 	bl	80122c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	4608      	mov	r0, r1
 800c2fc:	4611      	mov	r1, r2
 800c2fe:	461a      	mov	r2, r3
 800c300:	4603      	mov	r3, r0
 800c302:	70fb      	strb	r3, [r7, #3]
 800c304:	460b      	mov	r3, r1
 800c306:	803b      	strh	r3, [r7, #0]
 800c308:	4613      	mov	r3, r2
 800c30a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c30c:	2300      	movs	r3, #0
 800c30e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c314:	2b00      	cmp	r3, #0
 800c316:	da0e      	bge.n	800c336 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c318:	78fb      	ldrb	r3, [r7, #3]
 800c31a:	f003 0307 	and.w	r3, r3, #7
 800c31e:	1c5a      	adds	r2, r3, #1
 800c320:	4613      	mov	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	4413      	add	r3, r2
 800c32c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2201      	movs	r2, #1
 800c332:	705a      	strb	r2, [r3, #1]
 800c334:	e00e      	b.n	800c354 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c336:	78fb      	ldrb	r3, [r7, #3]
 800c338:	f003 0207 	and.w	r2, r3, #7
 800c33c:	4613      	mov	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4413      	add	r3, r2
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	4413      	add	r3, r2
 800c34c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c354:	78fb      	ldrb	r3, [r7, #3]
 800c356:	f003 0307 	and.w	r3, r3, #7
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c360:	883a      	ldrh	r2, [r7, #0]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	78ba      	ldrb	r2, [r7, #2]
 800c36a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	785b      	ldrb	r3, [r3, #1]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d004      	beq.n	800c37e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	b29a      	uxth	r2, r3
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c37e:	78bb      	ldrb	r3, [r7, #2]
 800c380:	2b02      	cmp	r3, #2
 800c382:	d102      	bne.n	800c38a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2200      	movs	r2, #0
 800c388:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c390:	2b01      	cmp	r3, #1
 800c392:	d101      	bne.n	800c398 <HAL_PCD_EP_Open+0xa6>
 800c394:	2302      	movs	r3, #2
 800c396:	e00e      	b.n	800c3b6 <HAL_PCD_EP_Open+0xc4>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	68f9      	ldr	r1, [r7, #12]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f003 fdd6 	bl	800ff58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800c3b4:	7afb      	ldrb	r3, [r7, #11]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b084      	sub	sp, #16
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c3ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	da0e      	bge.n	800c3f0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c3d2:	78fb      	ldrb	r3, [r7, #3]
 800c3d4:	f003 0307 	and.w	r3, r3, #7
 800c3d8:	1c5a      	adds	r2, r3, #1
 800c3da:	4613      	mov	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	00db      	lsls	r3, r3, #3
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	705a      	strb	r2, [r3, #1]
 800c3ee:	e00e      	b.n	800c40e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	f003 0207 	and.w	r2, r3, #7
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	4413      	add	r3, r2
 800c406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2200      	movs	r2, #0
 800c40c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c40e:	78fb      	ldrb	r3, [r7, #3]
 800c410:	f003 0307 	and.w	r3, r3, #7
 800c414:	b2da      	uxtb	r2, r3
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c420:	2b01      	cmp	r3, #1
 800c422:	d101      	bne.n	800c428 <HAL_PCD_EP_Close+0x6a>
 800c424:	2302      	movs	r3, #2
 800c426:	e00e      	b.n	800c446 <HAL_PCD_EP_Close+0x88>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68f9      	ldr	r1, [r7, #12]
 800c436:	4618      	mov	r0, r3
 800c438:	f004 f922 	bl	8010680 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b086      	sub	sp, #24
 800c452:	af00      	add	r7, sp, #0
 800c454:	60f8      	str	r0, [r7, #12]
 800c456:	607a      	str	r2, [r7, #4]
 800c458:	603b      	str	r3, [r7, #0]
 800c45a:	460b      	mov	r3, r1
 800c45c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c45e:	7afb      	ldrb	r3, [r7, #11]
 800c460:	f003 0207 	and.w	r2, r3, #7
 800c464:	4613      	mov	r3, r2
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	4413      	add	r3, r2
 800c46a:	00db      	lsls	r3, r3, #3
 800c46c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	4413      	add	r3, r2
 800c474:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	683a      	ldr	r2, [r7, #0]
 800c480:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	2200      	movs	r2, #0
 800c486:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	2200      	movs	r2, #0
 800c48c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c48e:	7afb      	ldrb	r3, [r7, #11]
 800c490:	f003 0307 	and.w	r3, r3, #7
 800c494:	b2da      	uxtb	r2, r3
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c49a:	7afb      	ldrb	r3, [r7, #11]
 800c49c:	f003 0307 	and.w	r3, r3, #7
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d106      	bne.n	800c4b2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6979      	ldr	r1, [r7, #20]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f004 fad5 	bl	8010a5a <USB_EPStartXfer>
 800c4b0:	e005      	b.n	800c4be <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	6979      	ldr	r1, [r7, #20]
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f004 face 	bl	8010a5a <USB_EPStartXfer>
  }

  return HAL_OK;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3718      	adds	r7, #24
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c4d4:	78fb      	ldrb	r3, [r7, #3]
 800c4d6:	f003 0207 	and.w	r2, r3, #7
 800c4da:	6879      	ldr	r1, [r7, #4]
 800c4dc:	4613      	mov	r3, r2
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	4413      	add	r3, r2
 800c4e2:	00db      	lsls	r3, r3, #3
 800c4e4:	440b      	add	r3, r1
 800c4e6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c4ea:	681b      	ldr	r3, [r3, #0]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b086      	sub	sp, #24
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	607a      	str	r2, [r7, #4]
 800c502:	603b      	str	r3, [r7, #0]
 800c504:	460b      	mov	r3, r1
 800c506:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c508:	7afb      	ldrb	r3, [r7, #11]
 800c50a:	f003 0307 	and.w	r3, r3, #7
 800c50e:	1c5a      	adds	r2, r3, #1
 800c510:	4613      	mov	r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	4413      	add	r3, r2
 800c516:	00db      	lsls	r3, r3, #3
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	4413      	add	r3, r2
 800c51c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	2201      	movs	r2, #1
 800c52e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	683a      	ldr	r2, [r7, #0]
 800c536:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	2200      	movs	r2, #0
 800c53c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	2201      	movs	r2, #1
 800c542:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c544:	7afb      	ldrb	r3, [r7, #11]
 800c546:	f003 0307 	and.w	r3, r3, #7
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c550:	7afb      	ldrb	r3, [r7, #11]
 800c552:	f003 0307 	and.w	r3, r3, #7
 800c556:	2b00      	cmp	r3, #0
 800c558:	d106      	bne.n	800c568 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	6979      	ldr	r1, [r7, #20]
 800c560:	4618      	mov	r0, r3
 800c562:	f004 fa7a 	bl	8010a5a <USB_EPStartXfer>
 800c566:	e005      	b.n	800c574 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	6979      	ldr	r1, [r7, #20]
 800c56e:	4618      	mov	r0, r3
 800c570:	f004 fa73 	bl	8010a5a <USB_EPStartXfer>
  }

  return HAL_OK;
 800c574:	2300      	movs	r3, #0
}
 800c576:	4618      	mov	r0, r3
 800c578:	3718      	adds	r7, #24
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}

0800c57e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c57e:	b580      	push	{r7, lr}
 800c580:	b084      	sub	sp, #16
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
 800c586:	460b      	mov	r3, r1
 800c588:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c58a:	78fb      	ldrb	r3, [r7, #3]
 800c58c:	f003 0207 	and.w	r2, r3, #7
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	429a      	cmp	r2, r3
 800c596:	d901      	bls.n	800c59c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	e03e      	b.n	800c61a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c59c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	da0e      	bge.n	800c5c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c5a4:	78fb      	ldrb	r3, [r7, #3]
 800c5a6:	f003 0307 	and.w	r3, r3, #7
 800c5aa:	1c5a      	adds	r2, r3, #1
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	00db      	lsls	r3, r3, #3
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	705a      	strb	r2, [r3, #1]
 800c5c0:	e00c      	b.n	800c5dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c5c2:	78fa      	ldrb	r2, [r7, #3]
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	00db      	lsls	r3, r3, #3
 800c5cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c5e2:	78fb      	ldrb	r3, [r7, #3]
 800c5e4:	f003 0307 	and.w	r3, r3, #7
 800c5e8:	b2da      	uxtb	r2, r3
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d101      	bne.n	800c5fc <HAL_PCD_EP_SetStall+0x7e>
 800c5f8:	2302      	movs	r3, #2
 800c5fa:	e00e      	b.n	800c61a <HAL_PCD_EP_SetStall+0x9c>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68f9      	ldr	r1, [r7, #12]
 800c60a:	4618      	mov	r0, r3
 800c60c:	f005 fd5b 	bl	80120c6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	460b      	mov	r3, r1
 800c62c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c62e:	78fb      	ldrb	r3, [r7, #3]
 800c630:	f003 020f 	and.w	r2, r3, #15
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d901      	bls.n	800c640 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c63c:	2301      	movs	r3, #1
 800c63e:	e040      	b.n	800c6c2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c644:	2b00      	cmp	r3, #0
 800c646:	da0e      	bge.n	800c666 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c648:	78fb      	ldrb	r3, [r7, #3]
 800c64a:	f003 0307 	and.w	r3, r3, #7
 800c64e:	1c5a      	adds	r2, r3, #1
 800c650:	4613      	mov	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4413      	add	r3, r2
 800c656:	00db      	lsls	r3, r3, #3
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	4413      	add	r3, r2
 800c65c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2201      	movs	r2, #1
 800c662:	705a      	strb	r2, [r3, #1]
 800c664:	e00e      	b.n	800c684 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c666:	78fb      	ldrb	r3, [r7, #3]
 800c668:	f003 0207 	and.w	r2, r3, #7
 800c66c:	4613      	mov	r3, r2
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	4413      	add	r3, r2
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	4413      	add	r3, r2
 800c67c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2200      	movs	r2, #0
 800c682:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2200      	movs	r2, #0
 800c688:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c68a:	78fb      	ldrb	r3, [r7, #3]
 800c68c:	f003 0307 	and.w	r3, r3, #7
 800c690:	b2da      	uxtb	r2, r3
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d101      	bne.n	800c6a4 <HAL_PCD_EP_ClrStall+0x82>
 800c6a0:	2302      	movs	r3, #2
 800c6a2:	e00e      	b.n	800c6c2 <HAL_PCD_EP_ClrStall+0xa0>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	68f9      	ldr	r1, [r7, #12]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f005 fd58 	bl	8012168 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b096      	sub	sp, #88	; 0x58
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c6d2:	e3a9      	b.n	800ce28 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c6dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800c6e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	f003 030f 	and.w	r3, r3, #15
 800c6ea:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800c6ee:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f040 8164 	bne.w	800c9c0 <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800c6f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c6fc:	f003 0310 	and.w	r3, r3, #16
 800c700:	2b00      	cmp	r3, #0
 800c702:	d152      	bne.n	800c7aa <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800c710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c714:	81fb      	strh	r3, [r7, #14]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	89fb      	ldrh	r3, [r7, #14]
 800c71c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c724:	b29b      	uxth	r3, r3
 800c726:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	3328      	adds	r3, #40	; 0x28
 800c72c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c736:	b29b      	uxth	r3, r3
 800c738:	461a      	mov	r2, r3
 800c73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	4413      	add	r3, r2
 800c742:	3302      	adds	r3, #2
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	6812      	ldr	r2, [r2, #0]
 800c74a:	4413      	add	r3, r2
 800c74c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c750:	881b      	ldrh	r3, [r3, #0]
 800c752:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c758:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800c75a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c75c:	695a      	ldr	r2, [r3, #20]
 800c75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c760:	69db      	ldr	r3, [r3, #28]
 800c762:	441a      	add	r2, r3
 800c764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c766:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800c768:	2100      	movs	r1, #0
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f00a f9db 	bl	8016b26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c776:	b2db      	uxtb	r3, r3
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f000 8355 	beq.w	800ce28 <PCD_EP_ISR_Handler+0x75e>
 800c77e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c780:	699b      	ldr	r3, [r3, #24]
 800c782:	2b00      	cmp	r3, #0
 800c784:	f040 8350 	bne.w	800ce28 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c794:	b2da      	uxtb	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	b292      	uxth	r2, r2
 800c79c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c7a8:	e33e      	b.n	800ce28 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c7b0:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800c7bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c7c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d034      	beq.n	800c832 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	4413      	add	r3, r2
 800c7dc:	3306      	adds	r3, #6
 800c7de:	005b      	lsls	r3, r3, #1
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	6812      	ldr	r2, [r2, #0]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7ea:	881b      	ldrh	r3, [r3, #0]
 800c7ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c7f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7f2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6818      	ldr	r0, [r3, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800c7fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c800:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800c802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c804:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c806:	b29b      	uxth	r3, r3
 800c808:	f005 fdd1 	bl	80123ae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	881b      	ldrh	r3, [r3, #0]
 800c812:	b29a      	uxth	r2, r3
 800c814:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c818:	4013      	ands	r3, r2
 800c81a:	823b      	strh	r3, [r7, #16]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	8a3a      	ldrh	r2, [r7, #16]
 800c822:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c826:	b292      	uxth	r2, r2
 800c828:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f00a f94e 	bl	8016acc <HAL_PCD_SetupStageCallback>
 800c830:	e2fa      	b.n	800ce28 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c832:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800c836:	2b00      	cmp	r3, #0
 800c838:	f280 82f6 	bge.w	800ce28 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	881b      	ldrh	r3, [r3, #0]
 800c842:	b29a      	uxth	r2, r3
 800c844:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c848:	4013      	ands	r3, r2
 800c84a:	83fb      	strh	r3, [r7, #30]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	8bfa      	ldrh	r2, [r7, #30]
 800c852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c856:	b292      	uxth	r2, r2
 800c858:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c862:	b29b      	uxth	r3, r3
 800c864:	461a      	mov	r2, r3
 800c866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	00db      	lsls	r3, r3, #3
 800c86c:	4413      	add	r3, r2
 800c86e:	3306      	adds	r3, #6
 800c870:	005b      	lsls	r3, r3, #1
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	6812      	ldr	r2, [r2, #0]
 800c876:	4413      	add	r3, r2
 800c878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c87c:	881b      	ldrh	r3, [r3, #0]
 800c87e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c884:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800c886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c888:	69db      	ldr	r3, [r3, #28]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d019      	beq.n	800c8c2 <PCD_EP_ISR_Handler+0x1f8>
 800c88e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c890:	695b      	ldr	r3, [r3, #20]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d015      	beq.n	800c8c2 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6818      	ldr	r0, [r3, #0]
 800c89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c89c:	6959      	ldr	r1, [r3, #20]
 800c89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8a0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800c8a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8a4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	f005 fd81 	bl	80123ae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800c8ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ae:	695a      	ldr	r2, [r3, #20]
 800c8b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8b2:	69db      	ldr	r3, [r3, #28]
 800c8b4:	441a      	add	r2, r3
 800c8b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8b8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f00a f917 	bl	8016af0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	881b      	ldrh	r3, [r3, #0]
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f040 82aa 	bne.w	800ce28 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	61bb      	str	r3, [r7, #24]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	61bb      	str	r3, [r7, #24]
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c8f2:	617b      	str	r3, [r7, #20]
 800c8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f6:	691b      	ldr	r3, [r3, #16]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d112      	bne.n	800c922 <PCD_EP_ISR_Handler+0x258>
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	881b      	ldrh	r3, [r3, #0]
 800c900:	b29b      	uxth	r3, r3
 800c902:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c906:	b29a      	uxth	r2, r3
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	801a      	strh	r2, [r3, #0]
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	881b      	ldrh	r3, [r3, #0]
 800c910:	b29b      	uxth	r3, r3
 800c912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	801a      	strh	r2, [r3, #0]
 800c920:	e02f      	b.n	800c982 <PCD_EP_ISR_Handler+0x2b8>
 800c922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	2b3e      	cmp	r3, #62	; 0x3e
 800c928:	d813      	bhi.n	800c952 <PCD_EP_ISR_Handler+0x288>
 800c92a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	085b      	lsrs	r3, r3, #1
 800c930:	647b      	str	r3, [r7, #68]	; 0x44
 800c932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	f003 0301 	and.w	r3, r3, #1
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d002      	beq.n	800c944 <PCD_EP_ISR_Handler+0x27a>
 800c93e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c940:	3301      	adds	r3, #1
 800c942:	647b      	str	r3, [r7, #68]	; 0x44
 800c944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c946:	b29b      	uxth	r3, r3
 800c948:	029b      	lsls	r3, r3, #10
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	801a      	strh	r2, [r3, #0]
 800c950:	e017      	b.n	800c982 <PCD_EP_ISR_Handler+0x2b8>
 800c952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	095b      	lsrs	r3, r3, #5
 800c958:	647b      	str	r3, [r7, #68]	; 0x44
 800c95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	f003 031f 	and.w	r3, r3, #31
 800c962:	2b00      	cmp	r3, #0
 800c964:	d102      	bne.n	800c96c <PCD_EP_ISR_Handler+0x2a2>
 800c966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c968:	3b01      	subs	r3, #1
 800c96a:	647b      	str	r3, [r7, #68]	; 0x44
 800c96c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c96e:	b29b      	uxth	r3, r3
 800c970:	029b      	lsls	r3, r3, #10
 800c972:	b29b      	uxth	r3, r3
 800c974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	b29b      	uxth	r3, r3
 800c98a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c98e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c992:	827b      	strh	r3, [r7, #18]
 800c994:	8a7b      	ldrh	r3, [r7, #18]
 800c996:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c99a:	827b      	strh	r3, [r7, #18]
 800c99c:	8a7b      	ldrh	r3, [r7, #18]
 800c99e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c9a2:	827b      	strh	r3, [r7, #18]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	8a7b      	ldrh	r3, [r7, #18]
 800c9aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	8013      	strh	r3, [r2, #0]
 800c9be:	e233      	b.n	800ce28 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	4413      	add	r3, r2
 800c9ce:	881b      	ldrh	r3, [r3, #0]
 800c9d0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c9d4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	f280 80fc 	bge.w	800cbd6 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	881b      	ldrh	r3, [r3, #0]
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c9f4:	4013      	ands	r3, r2
 800c9f6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4413      	add	r3, r2
 800ca08:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800ca0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ca10:	b292      	uxth	r2, r2
 800ca12:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ca14:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800ca18:	4613      	mov	r3, r2
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	4413      	add	r3, r2
 800ca1e:	00db      	lsls	r3, r3, #3
 800ca20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	4413      	add	r3, r2
 800ca28:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ca2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca2c:	7b1b      	ldrb	r3, [r3, #12]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d125      	bne.n	800ca7e <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	00db      	lsls	r3, r3, #3
 800ca44:	4413      	add	r3, r2
 800ca46:	3306      	adds	r3, #6
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	6812      	ldr	r2, [r2, #0]
 800ca4e:	4413      	add	r3, r2
 800ca50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca54:	881b      	ldrh	r3, [r3, #0]
 800ca56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800ca5e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f000 8092 	beq.w	800cb8c <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6818      	ldr	r0, [r3, #0]
 800ca6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca6e:	6959      	ldr	r1, [r3, #20]
 800ca70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca72:	88da      	ldrh	r2, [r3, #6]
 800ca74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ca78:	f005 fc99 	bl	80123ae <USB_ReadPMA>
 800ca7c:	e086      	b.n	800cb8c <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ca7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca80:	78db      	ldrb	r3, [r3, #3]
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	d10a      	bne.n	800ca9c <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ca86:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 f9d8 	bl	800ce44 <HAL_PCD_EP_DB_Receive>
 800ca94:	4603      	mov	r3, r0
 800ca96:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ca9a:	e077      	b.n	800cb8c <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	461a      	mov	r2, r3
 800caa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4413      	add	r3, r2
 800caaa:	881b      	ldrh	r3, [r3, #0]
 800caac:	b29b      	uxth	r3, r3
 800caae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cab6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	461a      	mov	r2, r3
 800cac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	441a      	add	r2, r3
 800cac8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cacc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cadc:	b29b      	uxth	r3, r3
 800cade:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	461a      	mov	r2, r3
 800cae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4413      	add	r3, r2
 800caee:	881b      	ldrh	r3, [r3, #0]
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d024      	beq.n	800cb44 <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	461a      	mov	r2, r3
 800cb06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	00db      	lsls	r3, r3, #3
 800cb0c:	4413      	add	r3, r2
 800cb0e:	3302      	adds	r3, #2
 800cb10:	005b      	lsls	r3, r3, #1
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	6812      	ldr	r2, [r2, #0]
 800cb16:	4413      	add	r3, r2
 800cb18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb1c:	881b      	ldrh	r3, [r3, #0]
 800cb1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb22:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800cb26:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d02e      	beq.n	800cb8c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6818      	ldr	r0, [r3, #0]
 800cb32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb34:	6959      	ldr	r1, [r3, #20]
 800cb36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb38:	891a      	ldrh	r2, [r3, #8]
 800cb3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cb3e:	f005 fc36 	bl	80123ae <USB_ReadPMA>
 800cb42:	e023      	b.n	800cb8c <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	461a      	mov	r2, r3
 800cb50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	00db      	lsls	r3, r3, #3
 800cb56:	4413      	add	r3, r2
 800cb58:	3306      	adds	r3, #6
 800cb5a:	005b      	lsls	r3, r3, #1
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	6812      	ldr	r2, [r2, #0]
 800cb60:	4413      	add	r3, r2
 800cb62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb66:	881b      	ldrh	r3, [r3, #0]
 800cb68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb6c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800cb70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d009      	beq.n	800cb8c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6818      	ldr	r0, [r3, #0]
 800cb7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb7e:	6959      	ldr	r1, [r3, #20]
 800cb80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb82:	895a      	ldrh	r2, [r3, #10]
 800cb84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cb88:	f005 fc11 	bl	80123ae <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800cb8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb8e:	69da      	ldr	r2, [r3, #28]
 800cb90:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cb94:	441a      	add	r2, r3
 800cb96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb98:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800cb9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb9c:	695a      	ldr	r2, [r3, #20]
 800cb9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cba2:	441a      	add	r2, r3
 800cba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cba6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800cba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbaa:	699b      	ldr	r3, [r3, #24]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d005      	beq.n	800cbbc <PCD_EP_ISR_Handler+0x4f2>
 800cbb0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800cbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d206      	bcs.n	800cbca <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800cbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f009 ff94 	bl	8016af0 <HAL_PCD_DataOutStageCallback>
 800cbc8:	e005      	b.n	800cbd6 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f003 ff42 	bl	8010a5a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800cbd6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800cbda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f000 8122 	beq.w	800ce28 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 800cbe4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800cbe8:	1c5a      	adds	r2, r3, #1
 800cbea:	4613      	mov	r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	4413      	add	r3, r2
 800cbf0:	00db      	lsls	r3, r3, #3
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	4413      	add	r3, r2
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800cc0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	441a      	add	r2, r3
 800cc24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cc28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800cc34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc36:	78db      	ldrb	r3, [r3, #3]
 800cc38:	2b02      	cmp	r3, #2
 800cc3a:	f000 809d 	beq.w	800cd78 <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 800cc3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc40:	2200      	movs	r2, #0
 800cc42:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800cc44:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800cc48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d046      	beq.n	800ccde <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cc50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc52:	785b      	ldrb	r3, [r3, #1]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d126      	bne.n	800cca6 <PCD_EP_ISR_Handler+0x5dc>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	461a      	mov	r2, r3
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6c:	4413      	add	r3, r2
 800cc6e:	627b      	str	r3, [r7, #36]	; 0x24
 800cc70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	011a      	lsls	r2, r3, #4
 800cc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc78:	4413      	add	r3, r2
 800cc7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cc7e:	623b      	str	r3, [r7, #32]
 800cc80:	6a3b      	ldr	r3, [r7, #32]
 800cc82:	881b      	ldrh	r3, [r3, #0]
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	6a3b      	ldr	r3, [r7, #32]
 800cc8e:	801a      	strh	r2, [r3, #0]
 800cc90:	6a3b      	ldr	r3, [r7, #32]
 800cc92:	881b      	ldrh	r3, [r3, #0]
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc9e:	b29a      	uxth	r2, r3
 800cca0:	6a3b      	ldr	r3, [r7, #32]
 800cca2:	801a      	strh	r2, [r3, #0]
 800cca4:	e061      	b.n	800cd6a <PCD_EP_ISR_Handler+0x6a0>
 800cca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cca8:	785b      	ldrb	r3, [r3, #1]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d15d      	bne.n	800cd6a <PCD_EP_ISR_Handler+0x6a0>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc2:	4413      	add	r3, r2
 800ccc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	011a      	lsls	r2, r3, #4
 800cccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccce:	4413      	add	r3, r2
 800ccd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ccd4:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd8:	2200      	movs	r2, #0
 800ccda:	801a      	strh	r2, [r3, #0]
 800ccdc:	e045      	b.n	800cd6a <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cce6:	785b      	ldrb	r3, [r3, #1]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d126      	bne.n	800cd3a <PCD_EP_ISR_Handler+0x670>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	637b      	str	r3, [r7, #52]	; 0x34
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd00:	4413      	add	r3, r2
 800cd02:	637b      	str	r3, [r7, #52]	; 0x34
 800cd04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	011a      	lsls	r2, r3, #4
 800cd0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd0c:	4413      	add	r3, r2
 800cd0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cd12:	633b      	str	r3, [r7, #48]	; 0x30
 800cd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd16:	881b      	ldrh	r3, [r3, #0]
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd22:	801a      	strh	r2, [r3, #0]
 800cd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd36:	801a      	strh	r2, [r3, #0]
 800cd38:	e017      	b.n	800cd6a <PCD_EP_ISR_Handler+0x6a0>
 800cd3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd3c:	785b      	ldrb	r3, [r3, #1]
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d113      	bne.n	800cd6a <PCD_EP_ISR_Handler+0x6a0>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd50:	4413      	add	r3, r2
 800cd52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	011a      	lsls	r2, r3, #4
 800cd5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd5c:	4413      	add	r3, r2
 800cd5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cd62:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd66:	2200      	movs	r2, #0
 800cd68:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cd6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	4619      	mov	r1, r3
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f009 fed8 	bl	8016b26 <HAL_PCD_DataInStageCallback>
 800cd76:	e057      	b.n	800ce28 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800cd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd7a:	78db      	ldrb	r3, [r3, #3]
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d14c      	bne.n	800ce1a <PCD_EP_ISR_Handler+0x750>
 800cd80:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800cd84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d146      	bne.n	800ce1a <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	461a      	mov	r2, r3
 800cd98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	00db      	lsls	r3, r3, #3
 800cd9e:	4413      	add	r3, r2
 800cda0:	3302      	adds	r3, #2
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	6812      	ldr	r2, [r2, #0]
 800cda8:	4413      	add	r3, r2
 800cdaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdae:	881b      	ldrh	r3, [r3, #0]
 800cdb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cdb4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 800cdb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdba:	699a      	ldr	r2, [r3, #24]
 800cdbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d907      	bls.n	800cdd4 <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 800cdc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdc6:	699a      	ldr	r2, [r3, #24]
 800cdc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cdcc:	1ad2      	subs	r2, r2, r3
 800cdce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdd0:	619a      	str	r2, [r3, #24]
 800cdd2:	e002      	b.n	800cdda <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 800cdd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800cdda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cddc:	699b      	ldr	r3, [r3, #24]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d106      	bne.n	800cdf0 <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cde2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	4619      	mov	r1, r3
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f009 fe9c 	bl	8016b26 <HAL_PCD_DataInStageCallback>
 800cdee:	e01b      	b.n	800ce28 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800cdf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdf2:	695a      	ldr	r2, [r3, #20]
 800cdf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cdf8:	441a      	add	r2, r3
 800cdfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdfc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800cdfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce00:	69da      	ldr	r2, [r3, #28]
 800ce02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ce06:	441a      	add	r2, r3
 800ce08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce0a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ce12:	4618      	mov	r0, r3
 800ce14:	f003 fe21 	bl	8010a5a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800ce18:	e006      	b.n	800ce28 <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800ce1a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ce1e:	461a      	mov	r2, r3
 800ce20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f91b 	bl	800d05e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	b21b      	sxth	r3, r3
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f6ff ac4d 	blt.w	800c6d4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3758      	adds	r7, #88	; 0x58
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b088      	sub	sp, #32
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	4613      	mov	r3, r2
 800ce50:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ce52:	88fb      	ldrh	r3, [r7, #6]
 800ce54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d07e      	beq.n	800cf5a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	461a      	mov	r2, r3
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	00db      	lsls	r3, r3, #3
 800ce6e:	4413      	add	r3, r2
 800ce70:	3302      	adds	r3, #2
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	6812      	ldr	r2, [r2, #0]
 800ce78:	4413      	add	r3, r2
 800ce7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce7e:	881b      	ldrh	r3, [r3, #0]
 800ce80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce84:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	699a      	ldr	r2, [r3, #24]
 800ce8a:	8b7b      	ldrh	r3, [r7, #26]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d306      	bcc.n	800ce9e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	699a      	ldr	r2, [r3, #24]
 800ce94:	8b7b      	ldrh	r3, [r7, #26]
 800ce96:	1ad2      	subs	r2, r2, r3
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	619a      	str	r2, [r3, #24]
 800ce9c:	e002      	b.n	800cea4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	2200      	movs	r2, #0
 800cea2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	699b      	ldr	r3, [r3, #24]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d123      	bne.n	800cef4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	881b      	ldrh	r3, [r3, #0]
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cec6:	833b      	strh	r3, [r7, #24]
 800cec8:	8b3b      	ldrh	r3, [r7, #24]
 800ceca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cece:	833b      	strh	r3, [r7, #24]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	461a      	mov	r2, r3
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	441a      	add	r2, r3
 800cede:	8b3b      	ldrh	r3, [r7, #24]
 800cee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ceec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800cef4:	88fb      	ldrh	r3, [r7, #6]
 800cef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d01f      	beq.n	800cf3e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	4413      	add	r3, r2
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf18:	82fb      	strh	r3, [r7, #22]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	441a      	add	r2, r3
 800cf28:	8afb      	ldrh	r3, [r7, #22]
 800cf2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800cf3e:	8b7b      	ldrh	r3, [r7, #26]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f000 8087 	beq.w	800d054 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	6818      	ldr	r0, [r3, #0]
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	6959      	ldr	r1, [r3, #20]
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	891a      	ldrh	r2, [r3, #8]
 800cf52:	8b7b      	ldrh	r3, [r7, #26]
 800cf54:	f005 fa2b 	bl	80123ae <USB_ReadPMA>
 800cf58:	e07c      	b.n	800d054 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	461a      	mov	r2, r3
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	00db      	lsls	r3, r3, #3
 800cf6c:	4413      	add	r3, r2
 800cf6e:	3306      	adds	r3, #6
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	6812      	ldr	r2, [r2, #0]
 800cf76:	4413      	add	r3, r2
 800cf78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf7c:	881b      	ldrh	r3, [r3, #0]
 800cf7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf82:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	699a      	ldr	r2, [r3, #24]
 800cf88:	8b7b      	ldrh	r3, [r7, #26]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d306      	bcc.n	800cf9c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	699a      	ldr	r2, [r3, #24]
 800cf92:	8b7b      	ldrh	r3, [r7, #26]
 800cf94:	1ad2      	subs	r2, r2, r3
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	619a      	str	r2, [r3, #24]
 800cf9a:	e002      	b.n	800cfa2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	699b      	ldr	r3, [r3, #24]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d123      	bne.n	800cff2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	4413      	add	r3, r2
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cfc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfc4:	83fb      	strh	r3, [r7, #30]
 800cfc6:	8bfb      	ldrh	r3, [r7, #30]
 800cfc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cfcc:	83fb      	strh	r3, [r7, #30]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	441a      	add	r2, r3
 800cfdc:	8bfb      	ldrh	r3, [r7, #30]
 800cfde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800cff2:	88fb      	ldrh	r3, [r7, #6]
 800cff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d11f      	bne.n	800d03c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	461a      	mov	r2, r3
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	4413      	add	r3, r2
 800d00a:	881b      	ldrh	r3, [r3, #0]
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d016:	83bb      	strh	r3, [r7, #28]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	461a      	mov	r2, r3
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	441a      	add	r2, r3
 800d026:	8bbb      	ldrh	r3, [r7, #28]
 800d028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d02c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d034:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d038:	b29b      	uxth	r3, r3
 800d03a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800d03c:	8b7b      	ldrh	r3, [r7, #26]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d008      	beq.n	800d054 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6818      	ldr	r0, [r3, #0]
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	6959      	ldr	r1, [r3, #20]
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	895a      	ldrh	r2, [r3, #10]
 800d04e:	8b7b      	ldrh	r3, [r7, #26]
 800d050:	f005 f9ad 	bl	80123ae <USB_ReadPMA>
    }
  }

  return count;
 800d054:	8b7b      	ldrh	r3, [r7, #26]
}
 800d056:	4618      	mov	r0, r3
 800d058:	3720      	adds	r7, #32
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b0a2      	sub	sp, #136	; 0x88
 800d062:	af00      	add	r7, sp, #0
 800d064:	60f8      	str	r0, [r7, #12]
 800d066:	60b9      	str	r1, [r7, #8]
 800d068:	4613      	mov	r3, r2
 800d06a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d06c:	88fb      	ldrh	r3, [r7, #6]
 800d06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d072:	2b00      	cmp	r3, #0
 800d074:	f000 81c7 	beq.w	800d406 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d080:	b29b      	uxth	r3, r3
 800d082:	461a      	mov	r2, r3
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	00db      	lsls	r3, r3, #3
 800d08a:	4413      	add	r3, r2
 800d08c:	3302      	adds	r3, #2
 800d08e:	005b      	lsls	r3, r3, #1
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	6812      	ldr	r2, [r2, #0]
 800d094:	4413      	add	r3, r2
 800d096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d09a:	881b      	ldrh	r3, [r3, #0]
 800d09c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d0a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	699a      	ldr	r2, [r3, #24]
 800d0a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d907      	bls.n	800d0c0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	699a      	ldr	r2, [r3, #24]
 800d0b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d0b8:	1ad2      	subs	r2, r2, r3
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	619a      	str	r2, [r3, #24]
 800d0be:	e002      	b.n	800d0c6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	699b      	ldr	r3, [r3, #24]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	f040 80b9 	bne.w	800d242 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	785b      	ldrb	r3, [r3, #1]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d126      	bne.n	800d126 <HAL_PCD_EP_DB_Transmit+0xc8>
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ec:	4413      	add	r3, r2
 800d0ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	011a      	lsls	r2, r3, #4
 800d0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f8:	4413      	add	r3, r2
 800d0fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d0fe:	627b      	str	r3, [r7, #36]	; 0x24
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	881b      	ldrh	r3, [r3, #0]
 800d104:	b29b      	uxth	r3, r3
 800d106:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10e:	801a      	strh	r2, [r3, #0]
 800d110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d112:	881b      	ldrh	r3, [r3, #0]
 800d114:	b29b      	uxth	r3, r3
 800d116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d11a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d11e:	b29a      	uxth	r2, r3
 800d120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d122:	801a      	strh	r2, [r3, #0]
 800d124:	e01a      	b.n	800d15c <HAL_PCD_EP_DB_Transmit+0xfe>
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	785b      	ldrb	r3, [r3, #1]
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d116      	bne.n	800d15c <HAL_PCD_EP_DB_Transmit+0xfe>
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	633b      	str	r3, [r7, #48]	; 0x30
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	461a      	mov	r2, r3
 800d140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d142:	4413      	add	r3, r2
 800d144:	633b      	str	r3, [r7, #48]	; 0x30
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	011a      	lsls	r2, r3, #4
 800d14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14e:	4413      	add	r3, r2
 800d150:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d154:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d158:	2200      	movs	r2, #0
 800d15a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	623b      	str	r3, [r7, #32]
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	785b      	ldrb	r3, [r3, #1]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d126      	bne.n	800d1b8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	61bb      	str	r3, [r7, #24]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d178:	b29b      	uxth	r3, r3
 800d17a:	461a      	mov	r2, r3
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	4413      	add	r3, r2
 800d180:	61bb      	str	r3, [r7, #24]
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	011a      	lsls	r2, r3, #4
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	4413      	add	r3, r2
 800d18c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d190:	617b      	str	r3, [r7, #20]
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	881b      	ldrh	r3, [r3, #0]
 800d196:	b29b      	uxth	r3, r3
 800d198:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d19c:	b29a      	uxth	r2, r3
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	801a      	strh	r2, [r3, #0]
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	881b      	ldrh	r3, [r3, #0]
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	801a      	strh	r2, [r3, #0]
 800d1b6:	e017      	b.n	800d1e8 <HAL_PCD_EP_DB_Transmit+0x18a>
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	785b      	ldrb	r3, [r3, #1]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d113      	bne.n	800d1e8 <HAL_PCD_EP_DB_Transmit+0x18a>
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	6a3b      	ldr	r3, [r7, #32]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	623b      	str	r3, [r7, #32]
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	011a      	lsls	r2, r3, #4
 800d1d8:	6a3b      	ldr	r3, [r7, #32]
 800d1da:	4413      	add	r3, r2
 800d1dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d1e0:	61fb      	str	r3, [r7, #28]
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f009 fc99 	bl	8016b26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d1f4:	88fb      	ldrh	r3, [r7, #6]
 800d1f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f000 82d4 	beq.w	800d7a8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	461a      	mov	r2, r3
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	881b      	ldrh	r3, [r3, #0]
 800d210:	b29b      	uxth	r3, r3
 800d212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d21a:	827b      	strh	r3, [r7, #18]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	461a      	mov	r2, r3
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	441a      	add	r2, r3
 800d22a:	8a7b      	ldrh	r3, [r7, #18]
 800d22c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	8013      	strh	r3, [r2, #0]
 800d240:	e2b2      	b.n	800d7a8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d242:	88fb      	ldrh	r3, [r7, #6]
 800d244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d021      	beq.n	800d290 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	461a      	mov	r2, r3
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	4413      	add	r3, r2
 800d25a:	881b      	ldrh	r3, [r3, #0]
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d266:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	461a      	mov	r2, r3
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	441a      	add	r2, r3
 800d278:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d27c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d296:	2b01      	cmp	r3, #1
 800d298:	f040 8286 	bne.w	800d7a8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	695a      	ldr	r2, [r3, #20]
 800d2a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d2a4:	441a      	add	r2, r3
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	69da      	ldr	r2, [r3, #28]
 800d2ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d2b2:	441a      	add	r2, r3
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	6a1a      	ldr	r2, [r3, #32]
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	691b      	ldr	r3, [r3, #16]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d309      	bcc.n	800d2d8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	6a1a      	ldr	r2, [r3, #32]
 800d2ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2d0:	1ad2      	subs	r2, r2, r3
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	621a      	str	r2, [r3, #32]
 800d2d6:	e015      	b.n	800d304 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	6a1b      	ldr	r3, [r3, #32]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d107      	bne.n	800d2f0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800d2e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d2e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d2ee:	e009      	b.n	800d304 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	6a1b      	ldr	r3, [r3, #32]
 800d2fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	2200      	movs	r2, #0
 800d302:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	785b      	ldrb	r3, [r3, #1]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d155      	bne.n	800d3b8 <HAL_PCD_EP_DB_Transmit+0x35a>
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	63bb      	str	r3, [r7, #56]	; 0x38
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	461a      	mov	r2, r3
 800d31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d320:	4413      	add	r3, r2
 800d322:	63bb      	str	r3, [r7, #56]	; 0x38
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	011a      	lsls	r2, r3, #4
 800d32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32c:	4413      	add	r3, r2
 800d32e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d332:	637b      	str	r3, [r7, #52]	; 0x34
 800d334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d336:	2b00      	cmp	r3, #0
 800d338:	d112      	bne.n	800d360 <HAL_PCD_EP_DB_Transmit+0x302>
 800d33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d33c:	881b      	ldrh	r3, [r3, #0]
 800d33e:	b29b      	uxth	r3, r3
 800d340:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d344:	b29a      	uxth	r2, r3
 800d346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d348:	801a      	strh	r2, [r3, #0]
 800d34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d34c:	881b      	ldrh	r3, [r3, #0]
 800d34e:	b29b      	uxth	r3, r3
 800d350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d358:	b29a      	uxth	r2, r3
 800d35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35c:	801a      	strh	r2, [r3, #0]
 800d35e:	e047      	b.n	800d3f0 <HAL_PCD_EP_DB_Transmit+0x392>
 800d360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d362:	2b3e      	cmp	r3, #62	; 0x3e
 800d364:	d811      	bhi.n	800d38a <HAL_PCD_EP_DB_Transmit+0x32c>
 800d366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d368:	085b      	lsrs	r3, r3, #1
 800d36a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d36e:	f003 0301 	and.w	r3, r3, #1
 800d372:	2b00      	cmp	r3, #0
 800d374:	d002      	beq.n	800d37c <HAL_PCD_EP_DB_Transmit+0x31e>
 800d376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d378:	3301      	adds	r3, #1
 800d37a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d37c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d37e:	b29b      	uxth	r3, r3
 800d380:	029b      	lsls	r3, r3, #10
 800d382:	b29a      	uxth	r2, r3
 800d384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d386:	801a      	strh	r2, [r3, #0]
 800d388:	e032      	b.n	800d3f0 <HAL_PCD_EP_DB_Transmit+0x392>
 800d38a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d38c:	095b      	lsrs	r3, r3, #5
 800d38e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d392:	f003 031f 	and.w	r3, r3, #31
 800d396:	2b00      	cmp	r3, #0
 800d398:	d102      	bne.n	800d3a0 <HAL_PCD_EP_DB_Transmit+0x342>
 800d39a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d39c:	3b01      	subs	r3, #1
 800d39e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	029b      	lsls	r3, r3, #10
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b4:	801a      	strh	r2, [r3, #0]
 800d3b6:	e01b      	b.n	800d3f0 <HAL_PCD_EP_DB_Transmit+0x392>
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	785b      	ldrb	r3, [r3, #1]
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d117      	bne.n	800d3f0 <HAL_PCD_EP_DB_Transmit+0x392>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	643b      	str	r3, [r7, #64]	; 0x40
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3d4:	4413      	add	r3, r2
 800d3d6:	643b      	str	r3, [r7, #64]	; 0x40
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	011a      	lsls	r2, r3, #4
 800d3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3e0:	4413      	add	r3, r2
 800d3e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6818      	ldr	r0, [r3, #0]
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	6959      	ldr	r1, [r3, #20]
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	891a      	ldrh	r2, [r3, #8]
 800d3fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	f004 ff8f 	bl	8012322 <USB_WritePMA>
 800d404:	e1d0      	b.n	800d7a8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d40e:	b29b      	uxth	r3, r3
 800d410:	461a      	mov	r2, r3
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	00db      	lsls	r3, r3, #3
 800d418:	4413      	add	r3, r2
 800d41a:	3306      	adds	r3, #6
 800d41c:	005b      	lsls	r3, r3, #1
 800d41e:	68fa      	ldr	r2, [r7, #12]
 800d420:	6812      	ldr	r2, [r2, #0]
 800d422:	4413      	add	r3, r2
 800d424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d428:	881b      	ldrh	r3, [r3, #0]
 800d42a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d42e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	699a      	ldr	r2, [r3, #24]
 800d436:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d307      	bcc.n	800d44e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	699a      	ldr	r2, [r3, #24]
 800d442:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d446:	1ad2      	subs	r2, r2, r3
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	619a      	str	r2, [r3, #24]
 800d44c:	e002      	b.n	800d454 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	2200      	movs	r2, #0
 800d452:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	699b      	ldr	r3, [r3, #24]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f040 80c4 	bne.w	800d5e6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	785b      	ldrb	r3, [r3, #1]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d126      	bne.n	800d4b4 <HAL_PCD_EP_DB_Transmit+0x456>
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d474:	b29b      	uxth	r3, r3
 800d476:	461a      	mov	r2, r3
 800d478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d47a:	4413      	add	r3, r2
 800d47c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	011a      	lsls	r2, r3, #4
 800d484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d486:	4413      	add	r3, r2
 800d488:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d48c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d48e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d490:	881b      	ldrh	r3, [r3, #0]
 800d492:	b29b      	uxth	r3, r3
 800d494:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d498:	b29a      	uxth	r2, r3
 800d49a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d49c:	801a      	strh	r2, [r3, #0]
 800d49e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4a0:	881b      	ldrh	r3, [r3, #0]
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4ac:	b29a      	uxth	r2, r3
 800d4ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4b0:	801a      	strh	r2, [r3, #0]
 800d4b2:	e01a      	b.n	800d4ea <HAL_PCD_EP_DB_Transmit+0x48c>
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	785b      	ldrb	r3, [r3, #1]
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d116      	bne.n	800d4ea <HAL_PCD_EP_DB_Transmit+0x48c>
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	677b      	str	r3, [r7, #116]	; 0x74
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4d0:	4413      	add	r3, r2
 800d4d2:	677b      	str	r3, [r7, #116]	; 0x74
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	011a      	lsls	r2, r3, #4
 800d4da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4dc:	4413      	add	r3, r2
 800d4de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d4e2:	673b      	str	r3, [r7, #112]	; 0x70
 800d4e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	67bb      	str	r3, [r7, #120]	; 0x78
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	785b      	ldrb	r3, [r3, #1]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d12f      	bne.n	800d558 <HAL_PCD_EP_DB_Transmit+0x4fa>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d508:	b29b      	uxth	r3, r3
 800d50a:	461a      	mov	r2, r3
 800d50c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d510:	4413      	add	r3, r2
 800d512:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	011a      	lsls	r2, r3, #4
 800d51c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d520:	4413      	add	r3, r2
 800d522:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d526:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d52a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d52e:	881b      	ldrh	r3, [r3, #0]
 800d530:	b29b      	uxth	r3, r3
 800d532:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d536:	b29a      	uxth	r2, r3
 800d538:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d53c:	801a      	strh	r2, [r3, #0]
 800d53e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d542:	881b      	ldrh	r3, [r3, #0]
 800d544:	b29b      	uxth	r3, r3
 800d546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d54a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d54e:	b29a      	uxth	r2, r3
 800d550:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d554:	801a      	strh	r2, [r3, #0]
 800d556:	e017      	b.n	800d588 <HAL_PCD_EP_DB_Transmit+0x52a>
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	785b      	ldrb	r3, [r3, #1]
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d113      	bne.n	800d588 <HAL_PCD_EP_DB_Transmit+0x52a>
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d568:	b29b      	uxth	r3, r3
 800d56a:	461a      	mov	r2, r3
 800d56c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d56e:	4413      	add	r3, r2
 800d570:	67bb      	str	r3, [r7, #120]	; 0x78
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	011a      	lsls	r2, r3, #4
 800d578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d57a:	4413      	add	r3, r2
 800d57c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d580:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d582:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d584:	2200      	movs	r2, #0
 800d586:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	4619      	mov	r1, r3
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f009 fac9 	bl	8016b26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d594:	88fb      	ldrh	r3, [r7, #6]
 800d596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f040 8104 	bne.w	800d7a8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	4413      	add	r3, r2
 800d5ae:	881b      	ldrh	r3, [r3, #0]
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	441a      	add	r2, r3
 800d5cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d5d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	8013      	strh	r3, [r2, #0]
 800d5e4:	e0e0      	b.n	800d7a8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d5e6:	88fb      	ldrh	r3, [r7, #6]
 800d5e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d121      	bne.n	800d634 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	4413      	add	r3, r2
 800d5fe:	881b      	ldrh	r3, [r3, #0]
 800d600:	b29b      	uxth	r3, r3
 800d602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d60a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	461a      	mov	r2, r3
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	441a      	add	r2, r3
 800d61c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d62c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d630:	b29b      	uxth	r3, r3
 800d632:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	f040 80b4 	bne.w	800d7a8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	695a      	ldr	r2, [r3, #20]
 800d644:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d648:	441a      	add	r2, r3
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	69da      	ldr	r2, [r3, #28]
 800d652:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d656:	441a      	add	r2, r3
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	6a1a      	ldr	r2, [r3, #32]
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	691b      	ldr	r3, [r3, #16]
 800d664:	429a      	cmp	r2, r3
 800d666:	d309      	bcc.n	800d67c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	6a1a      	ldr	r2, [r3, #32]
 800d672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d674:	1ad2      	subs	r2, r2, r3
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	621a      	str	r2, [r3, #32]
 800d67a:	e015      	b.n	800d6a8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	6a1b      	ldr	r3, [r3, #32]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d107      	bne.n	800d694 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800d684:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d688:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d692:	e009      	b.n	800d6a8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	6a1b      	ldr	r3, [r3, #32]
 800d698:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	2200      	movs	r2, #0
 800d69e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	667b      	str	r3, [r7, #100]	; 0x64
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	785b      	ldrb	r3, [r3, #1]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d155      	bne.n	800d762 <HAL_PCD_EP_DB_Transmit+0x704>
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6ca:	4413      	add	r3, r2
 800d6cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	011a      	lsls	r2, r3, #4
 800d6d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6d6:	4413      	add	r3, r2
 800d6d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d6dc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d6de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d112      	bne.n	800d70a <HAL_PCD_EP_DB_Transmit+0x6ac>
 800d6e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6e6:	881b      	ldrh	r3, [r3, #0]
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d6ee:	b29a      	uxth	r2, r3
 800d6f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6f2:	801a      	strh	r2, [r3, #0]
 800d6f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6f6:	881b      	ldrh	r3, [r3, #0]
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d702:	b29a      	uxth	r2, r3
 800d704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d706:	801a      	strh	r2, [r3, #0]
 800d708:	e044      	b.n	800d794 <HAL_PCD_EP_DB_Transmit+0x736>
 800d70a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d70c:	2b3e      	cmp	r3, #62	; 0x3e
 800d70e:	d811      	bhi.n	800d734 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800d710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d712:	085b      	lsrs	r3, r3, #1
 800d714:	657b      	str	r3, [r7, #84]	; 0x54
 800d716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d718:	f003 0301 	and.w	r3, r3, #1
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800d720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d722:	3301      	adds	r3, #1
 800d724:	657b      	str	r3, [r7, #84]	; 0x54
 800d726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d728:	b29b      	uxth	r3, r3
 800d72a:	029b      	lsls	r3, r3, #10
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d730:	801a      	strh	r2, [r3, #0]
 800d732:	e02f      	b.n	800d794 <HAL_PCD_EP_DB_Transmit+0x736>
 800d734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d736:	095b      	lsrs	r3, r3, #5
 800d738:	657b      	str	r3, [r7, #84]	; 0x54
 800d73a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d73c:	f003 031f 	and.w	r3, r3, #31
 800d740:	2b00      	cmp	r3, #0
 800d742:	d102      	bne.n	800d74a <HAL_PCD_EP_DB_Transmit+0x6ec>
 800d744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d746:	3b01      	subs	r3, #1
 800d748:	657b      	str	r3, [r7, #84]	; 0x54
 800d74a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	029b      	lsls	r3, r3, #10
 800d750:	b29b      	uxth	r3, r3
 800d752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d75e:	801a      	strh	r2, [r3, #0]
 800d760:	e018      	b.n	800d794 <HAL_PCD_EP_DB_Transmit+0x736>
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	785b      	ldrb	r3, [r3, #1]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d114      	bne.n	800d794 <HAL_PCD_EP_DB_Transmit+0x736>
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d772:	b29b      	uxth	r3, r3
 800d774:	461a      	mov	r2, r3
 800d776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d778:	4413      	add	r3, r2
 800d77a:	667b      	str	r3, [r7, #100]	; 0x64
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	011a      	lsls	r2, r3, #4
 800d782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d784:	4413      	add	r3, r2
 800d786:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d78a:	663b      	str	r3, [r7, #96]	; 0x60
 800d78c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d78e:	b29a      	uxth	r2, r3
 800d790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d792:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6818      	ldr	r0, [r3, #0]
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	6959      	ldr	r1, [r3, #20]
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	895a      	ldrh	r2, [r3, #10]
 800d7a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	f004 fdbd 	bl	8012322 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	4413      	add	r3, r2
 800d7b6:	881b      	ldrh	r3, [r3, #0]
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7c2:	823b      	strh	r3, [r7, #16]
 800d7c4:	8a3b      	ldrh	r3, [r7, #16]
 800d7c6:	f083 0310 	eor.w	r3, r3, #16
 800d7ca:	823b      	strh	r3, [r7, #16]
 800d7cc:	8a3b      	ldrh	r3, [r7, #16]
 800d7ce:	f083 0320 	eor.w	r3, r3, #32
 800d7d2:	823b      	strh	r3, [r7, #16]
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	461a      	mov	r2, r3
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	441a      	add	r2, r3
 800d7e2:	8a3b      	ldrh	r3, [r7, #16]
 800d7e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3788      	adds	r7, #136	; 0x88
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800d802:	b480      	push	{r7}
 800d804:	b087      	sub	sp, #28
 800d806:	af00      	add	r7, sp, #0
 800d808:	60f8      	str	r0, [r7, #12]
 800d80a:	607b      	str	r3, [r7, #4]
 800d80c:	460b      	mov	r3, r1
 800d80e:	817b      	strh	r3, [r7, #10]
 800d810:	4613      	mov	r3, r2
 800d812:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800d814:	897b      	ldrh	r3, [r7, #10]
 800d816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00b      	beq.n	800d838 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d820:	897b      	ldrh	r3, [r7, #10]
 800d822:	f003 0307 	and.w	r3, r3, #7
 800d826:	1c5a      	adds	r2, r3, #1
 800d828:	4613      	mov	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4413      	add	r3, r2
 800d82e:	00db      	lsls	r3, r3, #3
 800d830:	68fa      	ldr	r2, [r7, #12]
 800d832:	4413      	add	r3, r2
 800d834:	617b      	str	r3, [r7, #20]
 800d836:	e009      	b.n	800d84c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d838:	897a      	ldrh	r2, [r7, #10]
 800d83a:	4613      	mov	r3, r2
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4413      	add	r3, r2
 800d840:	00db      	lsls	r3, r3, #3
 800d842:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	4413      	add	r3, r2
 800d84a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800d84c:	893b      	ldrh	r3, [r7, #8]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d107      	bne.n	800d862 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	2200      	movs	r2, #0
 800d856:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	80da      	strh	r2, [r3, #6]
 800d860:	e00b      	b.n	800d87a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	2201      	movs	r2, #1
 800d866:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	0c1b      	lsrs	r3, r3, #16
 800d874:	b29a      	uxth	r2, r3
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800d87a:	2300      	movs	r3, #0
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	371c      	adds	r7, #28
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d888:	b480      	push	{r7}
 800d88a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 800d88c:	4b05      	ldr	r3, [pc, #20]	; (800d8a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a04      	ldr	r2, [pc, #16]	; (800d8a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d896:	6013      	str	r3, [r2, #0]
}
 800d898:	bf00      	nop
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	40007000 	.word	0x40007000

0800d8a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d8b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d8b8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d8ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d8be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d102      	bne.n	800d8ce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	f001 b823 	b.w	800e914 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d8ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d8d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f003 0301 	and.w	r3, r3, #1
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f000 817d 	beq.w	800dbde <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800d8e4:	4bbc      	ldr	r3, [pc, #752]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	f003 030c 	and.w	r3, r3, #12
 800d8ec:	2b04      	cmp	r3, #4
 800d8ee:	d00c      	beq.n	800d90a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800d8f0:	4bb9      	ldr	r3, [pc, #740]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	f003 030c 	and.w	r3, r3, #12
 800d8f8:	2b08      	cmp	r3, #8
 800d8fa:	d15c      	bne.n	800d9b6 <HAL_RCC_OscConfig+0x10e>
 800d8fc:	4bb6      	ldr	r3, [pc, #728]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d908:	d155      	bne.n	800d9b6 <HAL_RCC_OscConfig+0x10e>
 800d90a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d90e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d912:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d916:	fa93 f3a3 	rbit	r3, r3
 800d91a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800d91e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d922:	fab3 f383 	clz	r3, r3
 800d926:	b2db      	uxtb	r3, r3
 800d928:	095b      	lsrs	r3, r3, #5
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	f043 0301 	orr.w	r3, r3, #1
 800d930:	b2db      	uxtb	r3, r3
 800d932:	2b01      	cmp	r3, #1
 800d934:	d102      	bne.n	800d93c <HAL_RCC_OscConfig+0x94>
 800d936:	4ba8      	ldr	r3, [pc, #672]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	e015      	b.n	800d968 <HAL_RCC_OscConfig+0xc0>
 800d93c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d940:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d944:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800d948:	fa93 f3a3 	rbit	r3, r3
 800d94c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800d950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d954:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800d958:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d95c:	fa93 f3a3 	rbit	r3, r3
 800d960:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800d964:	4b9c      	ldr	r3, [pc, #624]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800d966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d968:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d96c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800d970:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800d974:	fa92 f2a2 	rbit	r2, r2
 800d978:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800d97c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800d980:	fab2 f282 	clz	r2, r2
 800d984:	b2d2      	uxtb	r2, r2
 800d986:	f042 0220 	orr.w	r2, r2, #32
 800d98a:	b2d2      	uxtb	r2, r2
 800d98c:	f002 021f 	and.w	r2, r2, #31
 800d990:	2101      	movs	r1, #1
 800d992:	fa01 f202 	lsl.w	r2, r1, r2
 800d996:	4013      	ands	r3, r2
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f000 811f 	beq.w	800dbdc <HAL_RCC_OscConfig+0x334>
 800d99e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d9a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f040 8116 	bne.w	800dbdc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	f000 bfaf 	b.w	800e914 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d9b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d9ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9c6:	d106      	bne.n	800d9d6 <HAL_RCC_OscConfig+0x12e>
 800d9c8:	4b83      	ldr	r3, [pc, #524]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a82      	ldr	r2, [pc, #520]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800d9ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9d2:	6013      	str	r3, [r2, #0]
 800d9d4:	e036      	b.n	800da44 <HAL_RCC_OscConfig+0x19c>
 800d9d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d9da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d10c      	bne.n	800da00 <HAL_RCC_OscConfig+0x158>
 800d9e6:	4b7c      	ldr	r3, [pc, #496]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a7b      	ldr	r2, [pc, #492]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800d9ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d9f0:	6013      	str	r3, [r2, #0]
 800d9f2:	4b79      	ldr	r3, [pc, #484]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a78      	ldr	r2, [pc, #480]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800d9f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d9fc:	6013      	str	r3, [r2, #0]
 800d9fe:	e021      	b.n	800da44 <HAL_RCC_OscConfig+0x19c>
 800da00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800da04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800da10:	d10c      	bne.n	800da2c <HAL_RCC_OscConfig+0x184>
 800da12:	4b71      	ldr	r3, [pc, #452]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a70      	ldr	r2, [pc, #448]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800da18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800da1c:	6013      	str	r3, [r2, #0]
 800da1e:	4b6e      	ldr	r3, [pc, #440]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a6d      	ldr	r2, [pc, #436]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800da24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da28:	6013      	str	r3, [r2, #0]
 800da2a:	e00b      	b.n	800da44 <HAL_RCC_OscConfig+0x19c>
 800da2c:	4b6a      	ldr	r3, [pc, #424]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a69      	ldr	r2, [pc, #420]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800da32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da36:	6013      	str	r3, [r2, #0]
 800da38:	4b67      	ldr	r3, [pc, #412]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a66      	ldr	r2, [pc, #408]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800da3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800da42:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800da44:	4b64      	ldr	r3, [pc, #400]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800da46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da48:	f023 020f 	bic.w	r2, r3, #15
 800da4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800da50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	495f      	ldr	r1, [pc, #380]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800da5a:	4313      	orrs	r3, r2
 800da5c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800da5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800da62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d059      	beq.n	800db22 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da6e:	f7fa feb7 	bl	80087e0 <HAL_GetTick>
 800da72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800da76:	e00a      	b.n	800da8e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800da78:	f7fa feb2 	bl	80087e0 <HAL_GetTick>
 800da7c:	4602      	mov	r2, r0
 800da7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	2b64      	cmp	r3, #100	; 0x64
 800da86:	d902      	bls.n	800da8e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800da88:	2303      	movs	r3, #3
 800da8a:	f000 bf43 	b.w	800e914 <HAL_RCC_OscConfig+0x106c>
 800da8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800da92:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da96:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800da9a:	fa93 f3a3 	rbit	r3, r3
 800da9e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800daa2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800daa6:	fab3 f383 	clz	r3, r3
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	095b      	lsrs	r3, r3, #5
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	f043 0301 	orr.w	r3, r3, #1
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d102      	bne.n	800dac0 <HAL_RCC_OscConfig+0x218>
 800daba:	4b47      	ldr	r3, [pc, #284]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	e015      	b.n	800daec <HAL_RCC_OscConfig+0x244>
 800dac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dac4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dac8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800dacc:	fa93 f3a3 	rbit	r3, r3
 800dad0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800dad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dad8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800dadc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800dae0:	fa93 f3a3 	rbit	r3, r3
 800dae4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800dae8:	4b3b      	ldr	r3, [pc, #236]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800daea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800daf0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800daf4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800daf8:	fa92 f2a2 	rbit	r2, r2
 800dafc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800db00:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800db04:	fab2 f282 	clz	r2, r2
 800db08:	b2d2      	uxtb	r2, r2
 800db0a:	f042 0220 	orr.w	r2, r2, #32
 800db0e:	b2d2      	uxtb	r2, r2
 800db10:	f002 021f 	and.w	r2, r2, #31
 800db14:	2101      	movs	r1, #1
 800db16:	fa01 f202 	lsl.w	r2, r1, r2
 800db1a:	4013      	ands	r3, r2
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d0ab      	beq.n	800da78 <HAL_RCC_OscConfig+0x1d0>
 800db20:	e05d      	b.n	800dbde <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db22:	f7fa fe5d 	bl	80087e0 <HAL_GetTick>
 800db26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db2a:	e00a      	b.n	800db42 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800db2c:	f7fa fe58 	bl	80087e0 <HAL_GetTick>
 800db30:	4602      	mov	r2, r0
 800db32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800db36:	1ad3      	subs	r3, r2, r3
 800db38:	2b64      	cmp	r3, #100	; 0x64
 800db3a:	d902      	bls.n	800db42 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800db3c:	2303      	movs	r3, #3
 800db3e:	f000 bee9 	b.w	800e914 <HAL_RCC_OscConfig+0x106c>
 800db42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800db46:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db4a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800db4e:	fa93 f3a3 	rbit	r3, r3
 800db52:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800db56:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db5a:	fab3 f383 	clz	r3, r3
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	095b      	lsrs	r3, r3, #5
 800db62:	b2db      	uxtb	r3, r3
 800db64:	f043 0301 	orr.w	r3, r3, #1
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d102      	bne.n	800db74 <HAL_RCC_OscConfig+0x2cc>
 800db6e:	4b1a      	ldr	r3, [pc, #104]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	e015      	b.n	800dba0 <HAL_RCC_OscConfig+0x2f8>
 800db74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800db78:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db7c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800db80:	fa93 f3a3 	rbit	r3, r3
 800db84:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800db88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800db8c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800db90:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800db94:	fa93 f3a3 	rbit	r3, r3
 800db98:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800db9c:	4b0e      	ldr	r3, [pc, #56]	; (800dbd8 <HAL_RCC_OscConfig+0x330>)
 800db9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800dba4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800dba8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800dbac:	fa92 f2a2 	rbit	r2, r2
 800dbb0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800dbb4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800dbb8:	fab2 f282 	clz	r2, r2
 800dbbc:	b2d2      	uxtb	r2, r2
 800dbbe:	f042 0220 	orr.w	r2, r2, #32
 800dbc2:	b2d2      	uxtb	r2, r2
 800dbc4:	f002 021f 	and.w	r2, r2, #31
 800dbc8:	2101      	movs	r1, #1
 800dbca:	fa01 f202 	lsl.w	r2, r1, r2
 800dbce:	4013      	ands	r3, r2
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d1ab      	bne.n	800db2c <HAL_RCC_OscConfig+0x284>
 800dbd4:	e003      	b.n	800dbde <HAL_RCC_OscConfig+0x336>
 800dbd6:	bf00      	nop
 800dbd8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dbdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dbde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dbe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f003 0302 	and.w	r3, r3, #2
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	f000 817d 	beq.w	800deee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800dbf4:	4ba6      	ldr	r3, [pc, #664]	; (800de90 <HAL_RCC_OscConfig+0x5e8>)
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	f003 030c 	and.w	r3, r3, #12
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00b      	beq.n	800dc18 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800dc00:	4ba3      	ldr	r3, [pc, #652]	; (800de90 <HAL_RCC_OscConfig+0x5e8>)
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	f003 030c 	and.w	r3, r3, #12
 800dc08:	2b08      	cmp	r3, #8
 800dc0a:	d172      	bne.n	800dcf2 <HAL_RCC_OscConfig+0x44a>
 800dc0c:	4ba0      	ldr	r3, [pc, #640]	; (800de90 <HAL_RCC_OscConfig+0x5e8>)
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d16c      	bne.n	800dcf2 <HAL_RCC_OscConfig+0x44a>
 800dc18:	2302      	movs	r3, #2
 800dc1a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc1e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800dc22:	fa93 f3a3 	rbit	r3, r3
 800dc26:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800dc2a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dc2e:	fab3 f383 	clz	r3, r3
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	095b      	lsrs	r3, r3, #5
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	f043 0301 	orr.w	r3, r3, #1
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d102      	bne.n	800dc48 <HAL_RCC_OscConfig+0x3a0>
 800dc42:	4b93      	ldr	r3, [pc, #588]	; (800de90 <HAL_RCC_OscConfig+0x5e8>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	e013      	b.n	800dc70 <HAL_RCC_OscConfig+0x3c8>
 800dc48:	2302      	movs	r3, #2
 800dc4a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc4e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800dc52:	fa93 f3a3 	rbit	r3, r3
 800dc56:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800dc5a:	2302      	movs	r3, #2
 800dc5c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800dc60:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800dc64:	fa93 f3a3 	rbit	r3, r3
 800dc68:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800dc6c:	4b88      	ldr	r3, [pc, #544]	; (800de90 <HAL_RCC_OscConfig+0x5e8>)
 800dc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc70:	2202      	movs	r2, #2
 800dc72:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800dc76:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800dc7a:	fa92 f2a2 	rbit	r2, r2
 800dc7e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800dc82:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800dc86:	fab2 f282 	clz	r2, r2
 800dc8a:	b2d2      	uxtb	r2, r2
 800dc8c:	f042 0220 	orr.w	r2, r2, #32
 800dc90:	b2d2      	uxtb	r2, r2
 800dc92:	f002 021f 	and.w	r2, r2, #31
 800dc96:	2101      	movs	r1, #1
 800dc98:	fa01 f202 	lsl.w	r2, r1, r2
 800dc9c:	4013      	ands	r3, r2
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d00a      	beq.n	800dcb8 <HAL_RCC_OscConfig+0x410>
 800dca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	691b      	ldr	r3, [r3, #16]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d002      	beq.n	800dcb8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	f000 be2e 	b.w	800e914 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dcb8:	4b75      	ldr	r3, [pc, #468]	; (800de90 <HAL_RCC_OscConfig+0x5e8>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dcc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dcc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	695b      	ldr	r3, [r3, #20]
 800dccc:	21f8      	movs	r1, #248	; 0xf8
 800dcce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dcd2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800dcd6:	fa91 f1a1 	rbit	r1, r1
 800dcda:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800dcde:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800dce2:	fab1 f181 	clz	r1, r1
 800dce6:	b2c9      	uxtb	r1, r1
 800dce8:	408b      	lsls	r3, r1
 800dcea:	4969      	ldr	r1, [pc, #420]	; (800de90 <HAL_RCC_OscConfig+0x5e8>)
 800dcec:	4313      	orrs	r3, r2
 800dcee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dcf0:	e0fd      	b.n	800deee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800dcf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dcf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	691b      	ldr	r3, [r3, #16]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	f000 8088 	beq.w	800de14 <HAL_RCC_OscConfig+0x56c>
 800dd04:	2301      	movs	r3, #1
 800dd06:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd0a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800dd0e:	fa93 f3a3 	rbit	r3, r3
 800dd12:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800dd16:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dd1a:	fab3 f383 	clz	r3, r3
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800dd24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd30:	f7fa fd56 	bl	80087e0 <HAL_GetTick>
 800dd34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd38:	e00a      	b.n	800dd50 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dd3a:	f7fa fd51 	bl	80087e0 <HAL_GetTick>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	d902      	bls.n	800dd50 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800dd4a:	2303      	movs	r3, #3
 800dd4c:	f000 bde2 	b.w	800e914 <HAL_RCC_OscConfig+0x106c>
 800dd50:	2302      	movs	r3, #2
 800dd52:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd56:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800dd5a:	fa93 f3a3 	rbit	r3, r3
 800dd5e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800dd62:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd66:	fab3 f383 	clz	r3, r3
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	095b      	lsrs	r3, r3, #5
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	f043 0301 	orr.w	r3, r3, #1
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d102      	bne.n	800dd80 <HAL_RCC_OscConfig+0x4d8>
 800dd7a:	4b45      	ldr	r3, [pc, #276]	; (800de90 <HAL_RCC_OscConfig+0x5e8>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	e013      	b.n	800dda8 <HAL_RCC_OscConfig+0x500>
 800dd80:	2302      	movs	r3, #2
 800dd82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd86:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd8a:	fa93 f3a3 	rbit	r3, r3
 800dd8e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800dd92:	2302      	movs	r3, #2
 800dd94:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800dd98:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800dd9c:	fa93 f3a3 	rbit	r3, r3
 800dda0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800dda4:	4b3a      	ldr	r3, [pc, #232]	; (800de90 <HAL_RCC_OscConfig+0x5e8>)
 800dda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda8:	2202      	movs	r2, #2
 800ddaa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800ddae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ddb2:	fa92 f2a2 	rbit	r2, r2
 800ddb6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800ddba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800ddbe:	fab2 f282 	clz	r2, r2
 800ddc2:	b2d2      	uxtb	r2, r2
 800ddc4:	f042 0220 	orr.w	r2, r2, #32
 800ddc8:	b2d2      	uxtb	r2, r2
 800ddca:	f002 021f 	and.w	r2, r2, #31
 800ddce:	2101      	movs	r1, #1
 800ddd0:	fa01 f202 	lsl.w	r2, r1, r2
 800ddd4:	4013      	ands	r3, r2
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d0af      	beq.n	800dd3a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ddda:	4b2d      	ldr	r3, [pc, #180]	; (800de90 <HAL_RCC_OscConfig+0x5e8>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dde2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dde6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	695b      	ldr	r3, [r3, #20]
 800ddee:	21f8      	movs	r1, #248	; 0xf8
 800ddf0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddf4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800ddf8:	fa91 f1a1 	rbit	r1, r1
 800ddfc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800de00:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800de04:	fab1 f181 	clz	r1, r1
 800de08:	b2c9      	uxtb	r1, r1
 800de0a:	408b      	lsls	r3, r1
 800de0c:	4920      	ldr	r1, [pc, #128]	; (800de90 <HAL_RCC_OscConfig+0x5e8>)
 800de0e:	4313      	orrs	r3, r2
 800de10:	600b      	str	r3, [r1, #0]
 800de12:	e06c      	b.n	800deee <HAL_RCC_OscConfig+0x646>
 800de14:	2301      	movs	r3, #1
 800de16:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800de1e:	fa93 f3a3 	rbit	r3, r3
 800de22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800de26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800de2a:	fab3 f383 	clz	r3, r3
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800de34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	461a      	mov	r2, r3
 800de3c:	2300      	movs	r3, #0
 800de3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de40:	f7fa fcce 	bl	80087e0 <HAL_GetTick>
 800de44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800de48:	e00a      	b.n	800de60 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800de4a:	f7fa fcc9 	bl	80087e0 <HAL_GetTick>
 800de4e:	4602      	mov	r2, r0
 800de50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800de54:	1ad3      	subs	r3, r2, r3
 800de56:	2b02      	cmp	r3, #2
 800de58:	d902      	bls.n	800de60 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800de5a:	2303      	movs	r3, #3
 800de5c:	f000 bd5a 	b.w	800e914 <HAL_RCC_OscConfig+0x106c>
 800de60:	2302      	movs	r3, #2
 800de62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800de6a:	fa93 f3a3 	rbit	r3, r3
 800de6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800de72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800de76:	fab3 f383 	clz	r3, r3
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	095b      	lsrs	r3, r3, #5
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	f043 0301 	orr.w	r3, r3, #1
 800de84:	b2db      	uxtb	r3, r3
 800de86:	2b01      	cmp	r3, #1
 800de88:	d104      	bne.n	800de94 <HAL_RCC_OscConfig+0x5ec>
 800de8a:	4b01      	ldr	r3, [pc, #4]	; (800de90 <HAL_RCC_OscConfig+0x5e8>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	e015      	b.n	800debc <HAL_RCC_OscConfig+0x614>
 800de90:	40021000 	.word	0x40021000
 800de94:	2302      	movs	r3, #2
 800de96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de9e:	fa93 f3a3 	rbit	r3, r3
 800dea2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800dea6:	2302      	movs	r3, #2
 800dea8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800deac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800deb0:	fa93 f3a3 	rbit	r3, r3
 800deb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800deb8:	4bc8      	ldr	r3, [pc, #800]	; (800e1dc <HAL_RCC_OscConfig+0x934>)
 800deba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800debc:	2202      	movs	r2, #2
 800debe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800dec2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800dec6:	fa92 f2a2 	rbit	r2, r2
 800deca:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800dece:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800ded2:	fab2 f282 	clz	r2, r2
 800ded6:	b2d2      	uxtb	r2, r2
 800ded8:	f042 0220 	orr.w	r2, r2, #32
 800dedc:	b2d2      	uxtb	r2, r2
 800dede:	f002 021f 	and.w	r2, r2, #31
 800dee2:	2101      	movs	r1, #1
 800dee4:	fa01 f202 	lsl.w	r2, r1, r2
 800dee8:	4013      	ands	r3, r2
 800deea:	2b00      	cmp	r3, #0
 800deec:	d1ad      	bne.n	800de4a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800deee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800def2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f003 0308 	and.w	r3, r3, #8
 800defe:	2b00      	cmp	r3, #0
 800df00:	f000 8110 	beq.w	800e124 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800df04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	699b      	ldr	r3, [r3, #24]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d079      	beq.n	800e008 <HAL_RCC_OscConfig+0x760>
 800df14:	2301      	movs	r3, #1
 800df16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800df1e:	fa93 f3a3 	rbit	r3, r3
 800df22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800df26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800df2a:	fab3 f383 	clz	r3, r3
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	461a      	mov	r2, r3
 800df32:	4bab      	ldr	r3, [pc, #684]	; (800e1e0 <HAL_RCC_OscConfig+0x938>)
 800df34:	4413      	add	r3, r2
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	461a      	mov	r2, r3
 800df3a:	2301      	movs	r3, #1
 800df3c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800df3e:	f7fa fc4f 	bl	80087e0 <HAL_GetTick>
 800df42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800df46:	e00a      	b.n	800df5e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800df48:	f7fa fc4a 	bl	80087e0 <HAL_GetTick>
 800df4c:	4602      	mov	r2, r0
 800df4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800df52:	1ad3      	subs	r3, r2, r3
 800df54:	2b02      	cmp	r3, #2
 800df56:	d902      	bls.n	800df5e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800df58:	2303      	movs	r3, #3
 800df5a:	f000 bcdb 	b.w	800e914 <HAL_RCC_OscConfig+0x106c>
 800df5e:	2302      	movs	r3, #2
 800df60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800df68:	fa93 f3a3 	rbit	r3, r3
 800df6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800df70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df74:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800df78:	2202      	movs	r2, #2
 800df7a:	601a      	str	r2, [r3, #0]
 800df7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	fa93 f2a3 	rbit	r2, r3
 800df8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df92:	601a      	str	r2, [r3, #0]
 800df94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800df98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df9c:	2202      	movs	r2, #2
 800df9e:	601a      	str	r2, [r3, #0]
 800dfa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dfa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	fa93 f2a3 	rbit	r2, r3
 800dfae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dfb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800dfb6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dfb8:	4b88      	ldr	r3, [pc, #544]	; (800e1dc <HAL_RCC_OscConfig+0x934>)
 800dfba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dfc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800dfc4:	2102      	movs	r1, #2
 800dfc6:	6019      	str	r1, [r3, #0]
 800dfc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dfcc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	fa93 f1a3 	rbit	r1, r3
 800dfd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dfda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800dfde:	6019      	str	r1, [r3, #0]
  return result;
 800dfe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dfe4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	fab3 f383 	clz	r3, r3
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	f003 031f 	and.w	r3, r3, #31
 800dffa:	2101      	movs	r1, #1
 800dffc:	fa01 f303 	lsl.w	r3, r1, r3
 800e000:	4013      	ands	r3, r2
 800e002:	2b00      	cmp	r3, #0
 800e004:	d0a0      	beq.n	800df48 <HAL_RCC_OscConfig+0x6a0>
 800e006:	e08d      	b.n	800e124 <HAL_RCC_OscConfig+0x87c>
 800e008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e00c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800e010:	2201      	movs	r2, #1
 800e012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e018:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	fa93 f2a3 	rbit	r2, r3
 800e022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e026:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800e02a:	601a      	str	r2, [r3, #0]
  return result;
 800e02c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e030:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800e034:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e036:	fab3 f383 	clz	r3, r3
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	461a      	mov	r2, r3
 800e03e:	4b68      	ldr	r3, [pc, #416]	; (800e1e0 <HAL_RCC_OscConfig+0x938>)
 800e040:	4413      	add	r3, r2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	461a      	mov	r2, r3
 800e046:	2300      	movs	r3, #0
 800e048:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e04a:	f7fa fbc9 	bl	80087e0 <HAL_GetTick>
 800e04e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e052:	e00a      	b.n	800e06a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e054:	f7fa fbc4 	bl	80087e0 <HAL_GetTick>
 800e058:	4602      	mov	r2, r0
 800e05a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e05e:	1ad3      	subs	r3, r2, r3
 800e060:	2b02      	cmp	r3, #2
 800e062:	d902      	bls.n	800e06a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800e064:	2303      	movs	r3, #3
 800e066:	f000 bc55 	b.w	800e914 <HAL_RCC_OscConfig+0x106c>
 800e06a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e06e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e072:	2202      	movs	r2, #2
 800e074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e07a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	fa93 f2a3 	rbit	r2, r3
 800e084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e088:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e08c:	601a      	str	r2, [r3, #0]
 800e08e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e092:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e096:	2202      	movs	r2, #2
 800e098:	601a      	str	r2, [r3, #0]
 800e09a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e09e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	fa93 f2a3 	rbit	r2, r3
 800e0a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e0ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e0b0:	601a      	str	r2, [r3, #0]
 800e0b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e0b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e0ba:	2202      	movs	r2, #2
 800e0bc:	601a      	str	r2, [r3, #0]
 800e0be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e0c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	fa93 f2a3 	rbit	r2, r3
 800e0cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e0d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e0d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e0d6:	4b41      	ldr	r3, [pc, #260]	; (800e1dc <HAL_RCC_OscConfig+0x934>)
 800e0d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e0de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e0e2:	2102      	movs	r1, #2
 800e0e4:	6019      	str	r1, [r3, #0]
 800e0e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e0ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	fa93 f1a3 	rbit	r1, r3
 800e0f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e0f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e0fc:	6019      	str	r1, [r3, #0]
  return result;
 800e0fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e102:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	fab3 f383 	clz	r3, r3
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e112:	b2db      	uxtb	r3, r3
 800e114:	f003 031f 	and.w	r3, r3, #31
 800e118:	2101      	movs	r1, #1
 800e11a:	fa01 f303 	lsl.w	r3, r1, r3
 800e11e:	4013      	ands	r3, r2
 800e120:	2b00      	cmp	r3, #0
 800e122:	d197      	bne.n	800e054 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e128:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f003 0304 	and.w	r3, r3, #4
 800e134:	2b00      	cmp	r3, #0
 800e136:	f000 81a1 	beq.w	800e47c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e13a:	2300      	movs	r3, #0
 800e13c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e140:	4b26      	ldr	r3, [pc, #152]	; (800e1dc <HAL_RCC_OscConfig+0x934>)
 800e142:	69db      	ldr	r3, [r3, #28]
 800e144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d116      	bne.n	800e17a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e14c:	4b23      	ldr	r3, [pc, #140]	; (800e1dc <HAL_RCC_OscConfig+0x934>)
 800e14e:	69db      	ldr	r3, [r3, #28]
 800e150:	4a22      	ldr	r2, [pc, #136]	; (800e1dc <HAL_RCC_OscConfig+0x934>)
 800e152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e156:	61d3      	str	r3, [r2, #28]
 800e158:	4b20      	ldr	r3, [pc, #128]	; (800e1dc <HAL_RCC_OscConfig+0x934>)
 800e15a:	69db      	ldr	r3, [r3, #28]
 800e15c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800e160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e164:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800e168:	601a      	str	r2, [r3, #0]
 800e16a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e16e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800e172:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800e174:	2301      	movs	r3, #1
 800e176:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e17a:	4b1a      	ldr	r3, [pc, #104]	; (800e1e4 <HAL_RCC_OscConfig+0x93c>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e182:	2b00      	cmp	r3, #0
 800e184:	d11a      	bne.n	800e1bc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e186:	4b17      	ldr	r3, [pc, #92]	; (800e1e4 <HAL_RCC_OscConfig+0x93c>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a16      	ldr	r2, [pc, #88]	; (800e1e4 <HAL_RCC_OscConfig+0x93c>)
 800e18c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e190:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e192:	f7fa fb25 	bl	80087e0 <HAL_GetTick>
 800e196:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e19a:	e009      	b.n	800e1b0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e19c:	f7fa fb20 	bl	80087e0 <HAL_GetTick>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	2b64      	cmp	r3, #100	; 0x64
 800e1aa:	d901      	bls.n	800e1b0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800e1ac:	2303      	movs	r3, #3
 800e1ae:	e3b1      	b.n	800e914 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e1b0:	4b0c      	ldr	r3, [pc, #48]	; (800e1e4 <HAL_RCC_OscConfig+0x93c>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d0ef      	beq.n	800e19c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e1bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e1c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d10d      	bne.n	800e1e8 <HAL_RCC_OscConfig+0x940>
 800e1cc:	4b03      	ldr	r3, [pc, #12]	; (800e1dc <HAL_RCC_OscConfig+0x934>)
 800e1ce:	6a1b      	ldr	r3, [r3, #32]
 800e1d0:	4a02      	ldr	r2, [pc, #8]	; (800e1dc <HAL_RCC_OscConfig+0x934>)
 800e1d2:	f043 0301 	orr.w	r3, r3, #1
 800e1d6:	6213      	str	r3, [r2, #32]
 800e1d8:	e03c      	b.n	800e254 <HAL_RCC_OscConfig+0x9ac>
 800e1da:	bf00      	nop
 800e1dc:	40021000 	.word	0x40021000
 800e1e0:	10908120 	.word	0x10908120
 800e1e4:	40007000 	.word	0x40007000
 800e1e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e1ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d10c      	bne.n	800e212 <HAL_RCC_OscConfig+0x96a>
 800e1f8:	4bc1      	ldr	r3, [pc, #772]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e1fa:	6a1b      	ldr	r3, [r3, #32]
 800e1fc:	4ac0      	ldr	r2, [pc, #768]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e1fe:	f023 0301 	bic.w	r3, r3, #1
 800e202:	6213      	str	r3, [r2, #32]
 800e204:	4bbe      	ldr	r3, [pc, #760]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e206:	6a1b      	ldr	r3, [r3, #32]
 800e208:	4abd      	ldr	r2, [pc, #756]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e20a:	f023 0304 	bic.w	r3, r3, #4
 800e20e:	6213      	str	r3, [r2, #32]
 800e210:	e020      	b.n	800e254 <HAL_RCC_OscConfig+0x9ac>
 800e212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	2b05      	cmp	r3, #5
 800e220:	d10c      	bne.n	800e23c <HAL_RCC_OscConfig+0x994>
 800e222:	4bb7      	ldr	r3, [pc, #732]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e224:	6a1b      	ldr	r3, [r3, #32]
 800e226:	4ab6      	ldr	r2, [pc, #728]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e228:	f043 0304 	orr.w	r3, r3, #4
 800e22c:	6213      	str	r3, [r2, #32]
 800e22e:	4bb4      	ldr	r3, [pc, #720]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e230:	6a1b      	ldr	r3, [r3, #32]
 800e232:	4ab3      	ldr	r2, [pc, #716]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e234:	f043 0301 	orr.w	r3, r3, #1
 800e238:	6213      	str	r3, [r2, #32]
 800e23a:	e00b      	b.n	800e254 <HAL_RCC_OscConfig+0x9ac>
 800e23c:	4bb0      	ldr	r3, [pc, #704]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e23e:	6a1b      	ldr	r3, [r3, #32]
 800e240:	4aaf      	ldr	r2, [pc, #700]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e242:	f023 0301 	bic.w	r3, r3, #1
 800e246:	6213      	str	r3, [r2, #32]
 800e248:	4bad      	ldr	r3, [pc, #692]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e24a:	6a1b      	ldr	r3, [r3, #32]
 800e24c:	4aac      	ldr	r2, [pc, #688]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e24e:	f023 0304 	bic.w	r3, r3, #4
 800e252:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e258:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	2b00      	cmp	r3, #0
 800e262:	f000 8081 	beq.w	800e368 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e266:	f7fa fabb 	bl	80087e0 <HAL_GetTick>
 800e26a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e26e:	e00b      	b.n	800e288 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e270:	f7fa fab6 	bl	80087e0 <HAL_GetTick>
 800e274:	4602      	mov	r2, r0
 800e276:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e280:	4293      	cmp	r3, r2
 800e282:	d901      	bls.n	800e288 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800e284:	2303      	movs	r3, #3
 800e286:	e345      	b.n	800e914 <HAL_RCC_OscConfig+0x106c>
 800e288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e28c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e290:	2202      	movs	r2, #2
 800e292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e298:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	fa93 f2a3 	rbit	r2, r3
 800e2a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e2a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e2aa:	601a      	str	r2, [r3, #0]
 800e2ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e2b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e2b4:	2202      	movs	r2, #2
 800e2b6:	601a      	str	r2, [r3, #0]
 800e2b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e2bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	fa93 f2a3 	rbit	r2, r3
 800e2c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e2ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e2ce:	601a      	str	r2, [r3, #0]
  return result;
 800e2d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e2d4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e2d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e2da:	fab3 f383 	clz	r3, r3
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	095b      	lsrs	r3, r3, #5
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	f043 0302 	orr.w	r3, r3, #2
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	2b02      	cmp	r3, #2
 800e2ec:	d102      	bne.n	800e2f4 <HAL_RCC_OscConfig+0xa4c>
 800e2ee:	4b84      	ldr	r3, [pc, #528]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e2f0:	6a1b      	ldr	r3, [r3, #32]
 800e2f2:	e013      	b.n	800e31c <HAL_RCC_OscConfig+0xa74>
 800e2f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e2f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800e2fc:	2202      	movs	r2, #2
 800e2fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e304:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	fa93 f2a3 	rbit	r2, r3
 800e30e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e312:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800e316:	601a      	str	r2, [r3, #0]
 800e318:	4b79      	ldr	r3, [pc, #484]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e31c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e320:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800e324:	2102      	movs	r1, #2
 800e326:	6011      	str	r1, [r2, #0]
 800e328:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e32c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800e330:	6812      	ldr	r2, [r2, #0]
 800e332:	fa92 f1a2 	rbit	r1, r2
 800e336:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e33a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800e33e:	6011      	str	r1, [r2, #0]
  return result;
 800e340:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e344:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800e348:	6812      	ldr	r2, [r2, #0]
 800e34a:	fab2 f282 	clz	r2, r2
 800e34e:	b2d2      	uxtb	r2, r2
 800e350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e354:	b2d2      	uxtb	r2, r2
 800e356:	f002 021f 	and.w	r2, r2, #31
 800e35a:	2101      	movs	r1, #1
 800e35c:	fa01 f202 	lsl.w	r2, r1, r2
 800e360:	4013      	ands	r3, r2
 800e362:	2b00      	cmp	r3, #0
 800e364:	d084      	beq.n	800e270 <HAL_RCC_OscConfig+0x9c8>
 800e366:	e07f      	b.n	800e468 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e368:	f7fa fa3a 	bl	80087e0 <HAL_GetTick>
 800e36c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e370:	e00b      	b.n	800e38a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e372:	f7fa fa35 	bl	80087e0 <HAL_GetTick>
 800e376:	4602      	mov	r2, r0
 800e378:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e37c:	1ad3      	subs	r3, r2, r3
 800e37e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e382:	4293      	cmp	r3, r2
 800e384:	d901      	bls.n	800e38a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800e386:	2303      	movs	r3, #3
 800e388:	e2c4      	b.n	800e914 <HAL_RCC_OscConfig+0x106c>
 800e38a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e38e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800e392:	2202      	movs	r2, #2
 800e394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e39a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	fa93 f2a3 	rbit	r2, r3
 800e3a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e3a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800e3ac:	601a      	str	r2, [r3, #0]
 800e3ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e3b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800e3b6:	2202      	movs	r2, #2
 800e3b8:	601a      	str	r2, [r3, #0]
 800e3ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e3be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	fa93 f2a3 	rbit	r2, r3
 800e3c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e3cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800e3d0:	601a      	str	r2, [r3, #0]
  return result;
 800e3d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e3d6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800e3da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e3dc:	fab3 f383 	clz	r3, r3
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	095b      	lsrs	r3, r3, #5
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	f043 0302 	orr.w	r3, r3, #2
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	2b02      	cmp	r3, #2
 800e3ee:	d102      	bne.n	800e3f6 <HAL_RCC_OscConfig+0xb4e>
 800e3f0:	4b43      	ldr	r3, [pc, #268]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e3f2:	6a1b      	ldr	r3, [r3, #32]
 800e3f4:	e013      	b.n	800e41e <HAL_RCC_OscConfig+0xb76>
 800e3f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e3fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800e3fe:	2202      	movs	r2, #2
 800e400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e406:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	fa93 f2a3 	rbit	r2, r3
 800e410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e414:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800e418:	601a      	str	r2, [r3, #0]
 800e41a:	4b39      	ldr	r3, [pc, #228]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e41e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e422:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800e426:	2102      	movs	r1, #2
 800e428:	6011      	str	r1, [r2, #0]
 800e42a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e42e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800e432:	6812      	ldr	r2, [r2, #0]
 800e434:	fa92 f1a2 	rbit	r1, r2
 800e438:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e43c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800e440:	6011      	str	r1, [r2, #0]
  return result;
 800e442:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e446:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800e44a:	6812      	ldr	r2, [r2, #0]
 800e44c:	fab2 f282 	clz	r2, r2
 800e450:	b2d2      	uxtb	r2, r2
 800e452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e456:	b2d2      	uxtb	r2, r2
 800e458:	f002 021f 	and.w	r2, r2, #31
 800e45c:	2101      	movs	r1, #1
 800e45e:	fa01 f202 	lsl.w	r2, r1, r2
 800e462:	4013      	ands	r3, r2
 800e464:	2b00      	cmp	r3, #0
 800e466:	d184      	bne.n	800e372 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800e468:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d105      	bne.n	800e47c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e470:	4b23      	ldr	r3, [pc, #140]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e472:	69db      	ldr	r3, [r3, #28]
 800e474:	4a22      	ldr	r2, [pc, #136]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e47a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e47c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e480:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	69db      	ldr	r3, [r3, #28]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f000 8242 	beq.w	800e912 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e48e:	4b1c      	ldr	r3, [pc, #112]	; (800e500 <HAL_RCC_OscConfig+0xc58>)
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	f003 030c 	and.w	r3, r3, #12
 800e496:	2b08      	cmp	r3, #8
 800e498:	f000 8213 	beq.w	800e8c2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e49c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e4a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	69db      	ldr	r3, [r3, #28]
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	f040 8162 	bne.w	800e772 <HAL_RCC_OscConfig+0xeca>
 800e4ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e4b2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800e4b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e4ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e4bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e4c0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	fa93 f2a3 	rbit	r2, r3
 800e4ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e4ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800e4d2:	601a      	str	r2, [r3, #0]
  return result;
 800e4d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e4d8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800e4dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e4de:	fab3 f383 	clz	r3, r3
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800e4e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e4f4:	f7fa f974 	bl	80087e0 <HAL_GetTick>
 800e4f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e4fc:	e00c      	b.n	800e518 <HAL_RCC_OscConfig+0xc70>
 800e4fe:	bf00      	nop
 800e500:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e504:	f7fa f96c 	bl	80087e0 <HAL_GetTick>
 800e508:	4602      	mov	r2, r0
 800e50a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e50e:	1ad3      	subs	r3, r2, r3
 800e510:	2b02      	cmp	r3, #2
 800e512:	d901      	bls.n	800e518 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800e514:	2303      	movs	r3, #3
 800e516:	e1fd      	b.n	800e914 <HAL_RCC_OscConfig+0x106c>
 800e518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e51c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800e520:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e52a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	fa93 f2a3 	rbit	r2, r3
 800e534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e538:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800e53c:	601a      	str	r2, [r3, #0]
  return result;
 800e53e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e542:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800e546:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e548:	fab3 f383 	clz	r3, r3
 800e54c:	b2db      	uxtb	r3, r3
 800e54e:	095b      	lsrs	r3, r3, #5
 800e550:	b2db      	uxtb	r3, r3
 800e552:	f043 0301 	orr.w	r3, r3, #1
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d102      	bne.n	800e562 <HAL_RCC_OscConfig+0xcba>
 800e55c:	4bb0      	ldr	r3, [pc, #704]	; (800e820 <HAL_RCC_OscConfig+0xf78>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	e027      	b.n	800e5b2 <HAL_RCC_OscConfig+0xd0a>
 800e562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e566:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800e56a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e56e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e574:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	fa93 f2a3 	rbit	r2, r3
 800e57e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e582:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800e586:	601a      	str	r2, [r3, #0]
 800e588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e58c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800e590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e594:	601a      	str	r2, [r3, #0]
 800e596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e59a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	fa93 f2a3 	rbit	r2, r3
 800e5a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e5a8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800e5ac:	601a      	str	r2, [r3, #0]
 800e5ae:	4b9c      	ldr	r3, [pc, #624]	; (800e820 <HAL_RCC_OscConfig+0xf78>)
 800e5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e5b6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800e5ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800e5be:	6011      	str	r1, [r2, #0]
 800e5c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e5c4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800e5c8:	6812      	ldr	r2, [r2, #0]
 800e5ca:	fa92 f1a2 	rbit	r1, r2
 800e5ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e5d2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800e5d6:	6011      	str	r1, [r2, #0]
  return result;
 800e5d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e5dc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800e5e0:	6812      	ldr	r2, [r2, #0]
 800e5e2:	fab2 f282 	clz	r2, r2
 800e5e6:	b2d2      	uxtb	r2, r2
 800e5e8:	f042 0220 	orr.w	r2, r2, #32
 800e5ec:	b2d2      	uxtb	r2, r2
 800e5ee:	f002 021f 	and.w	r2, r2, #31
 800e5f2:	2101      	movs	r1, #1
 800e5f4:	fa01 f202 	lsl.w	r2, r1, r2
 800e5f8:	4013      	ands	r3, r2
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d182      	bne.n	800e504 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e5fe:	4b88      	ldr	r3, [pc, #544]	; (800e820 <HAL_RCC_OscConfig+0xf78>)
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800e606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e60a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e616:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	6a1b      	ldr	r3, [r3, #32]
 800e61e:	430b      	orrs	r3, r1
 800e620:	497f      	ldr	r1, [pc, #508]	; (800e820 <HAL_RCC_OscConfig+0xf78>)
 800e622:	4313      	orrs	r3, r2
 800e624:	604b      	str	r3, [r1, #4]
 800e626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e62a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800e62e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e638:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	fa93 f2a3 	rbit	r2, r3
 800e642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e646:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e64a:	601a      	str	r2, [r3, #0]
  return result;
 800e64c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e650:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e654:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e656:	fab3 f383 	clz	r3, r3
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800e660:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800e664:	009b      	lsls	r3, r3, #2
 800e666:	461a      	mov	r2, r3
 800e668:	2301      	movs	r3, #1
 800e66a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e66c:	f7fa f8b8 	bl	80087e0 <HAL_GetTick>
 800e670:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800e674:	e009      	b.n	800e68a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e676:	f7fa f8b3 	bl	80087e0 <HAL_GetTick>
 800e67a:	4602      	mov	r2, r0
 800e67c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	2b02      	cmp	r3, #2
 800e684:	d901      	bls.n	800e68a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800e686:	2303      	movs	r3, #3
 800e688:	e144      	b.n	800e914 <HAL_RCC_OscConfig+0x106c>
 800e68a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e68e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e69c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	fa93 f2a3 	rbit	r2, r3
 800e6a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e6aa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800e6ae:	601a      	str	r2, [r3, #0]
  return result;
 800e6b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e6b4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800e6b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800e6ba:	fab3 f383 	clz	r3, r3
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	095b      	lsrs	r3, r3, #5
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	f043 0301 	orr.w	r3, r3, #1
 800e6c8:	b2db      	uxtb	r3, r3
 800e6ca:	2b01      	cmp	r3, #1
 800e6cc:	d102      	bne.n	800e6d4 <HAL_RCC_OscConfig+0xe2c>
 800e6ce:	4b54      	ldr	r3, [pc, #336]	; (800e820 <HAL_RCC_OscConfig+0xf78>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	e027      	b.n	800e724 <HAL_RCC_OscConfig+0xe7c>
 800e6d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e6d8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e6dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e6e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e6e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e6e6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	fa93 f2a3 	rbit	r2, r3
 800e6f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e6f4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e6f8:	601a      	str	r2, [r3, #0]
 800e6fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e6fe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800e702:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e706:	601a      	str	r2, [r3, #0]
 800e708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e70c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	fa93 f2a3 	rbit	r2, r3
 800e716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e71a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800e71e:	601a      	str	r2, [r3, #0]
 800e720:	4b3f      	ldr	r3, [pc, #252]	; (800e820 <HAL_RCC_OscConfig+0xf78>)
 800e722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e724:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e728:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800e72c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800e730:	6011      	str	r1, [r2, #0]
 800e732:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e736:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800e73a:	6812      	ldr	r2, [r2, #0]
 800e73c:	fa92 f1a2 	rbit	r1, r2
 800e740:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e744:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800e748:	6011      	str	r1, [r2, #0]
  return result;
 800e74a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e74e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800e752:	6812      	ldr	r2, [r2, #0]
 800e754:	fab2 f282 	clz	r2, r2
 800e758:	b2d2      	uxtb	r2, r2
 800e75a:	f042 0220 	orr.w	r2, r2, #32
 800e75e:	b2d2      	uxtb	r2, r2
 800e760:	f002 021f 	and.w	r2, r2, #31
 800e764:	2101      	movs	r1, #1
 800e766:	fa01 f202 	lsl.w	r2, r1, r2
 800e76a:	4013      	ands	r3, r2
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d082      	beq.n	800e676 <HAL_RCC_OscConfig+0xdce>
 800e770:	e0cf      	b.n	800e912 <HAL_RCC_OscConfig+0x106a>
 800e772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e776:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800e77a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e77e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e784:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	fa93 f2a3 	rbit	r2, r3
 800e78e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e792:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800e796:	601a      	str	r2, [r3, #0]
  return result;
 800e798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e79c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800e7a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e7a2:	fab3 f383 	clz	r3, r3
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800e7ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e7b8:	f7fa f812 	bl	80087e0 <HAL_GetTick>
 800e7bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e7c0:	e009      	b.n	800e7d6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e7c2:	f7fa f80d 	bl	80087e0 <HAL_GetTick>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e7cc:	1ad3      	subs	r3, r2, r3
 800e7ce:	2b02      	cmp	r3, #2
 800e7d0:	d901      	bls.n	800e7d6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800e7d2:	2303      	movs	r3, #3
 800e7d4:	e09e      	b.n	800e914 <HAL_RCC_OscConfig+0x106c>
 800e7d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e7da:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800e7de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e7e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e7e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e7e8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	fa93 f2a3 	rbit	r2, r3
 800e7f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e7f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800e7fa:	601a      	str	r2, [r3, #0]
  return result;
 800e7fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e800:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800e804:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e806:	fab3 f383 	clz	r3, r3
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	095b      	lsrs	r3, r3, #5
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	f043 0301 	orr.w	r3, r3, #1
 800e814:	b2db      	uxtb	r3, r3
 800e816:	2b01      	cmp	r3, #1
 800e818:	d104      	bne.n	800e824 <HAL_RCC_OscConfig+0xf7c>
 800e81a:	4b01      	ldr	r3, [pc, #4]	; (800e820 <HAL_RCC_OscConfig+0xf78>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	e029      	b.n	800e874 <HAL_RCC_OscConfig+0xfcc>
 800e820:	40021000 	.word	0x40021000
 800e824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e828:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800e82c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e836:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	fa93 f2a3 	rbit	r2, r3
 800e840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e844:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800e848:	601a      	str	r2, [r3, #0]
 800e84a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e84e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800e852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e856:	601a      	str	r2, [r3, #0]
 800e858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e85c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	fa93 f2a3 	rbit	r2, r3
 800e866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e86a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800e86e:	601a      	str	r2, [r3, #0]
 800e870:	4b2b      	ldr	r3, [pc, #172]	; (800e920 <HAL_RCC_OscConfig+0x1078>)
 800e872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e874:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e878:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800e87c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800e880:	6011      	str	r1, [r2, #0]
 800e882:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e886:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800e88a:	6812      	ldr	r2, [r2, #0]
 800e88c:	fa92 f1a2 	rbit	r1, r2
 800e890:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e894:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800e898:	6011      	str	r1, [r2, #0]
  return result;
 800e89a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e89e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800e8a2:	6812      	ldr	r2, [r2, #0]
 800e8a4:	fab2 f282 	clz	r2, r2
 800e8a8:	b2d2      	uxtb	r2, r2
 800e8aa:	f042 0220 	orr.w	r2, r2, #32
 800e8ae:	b2d2      	uxtb	r2, r2
 800e8b0:	f002 021f 	and.w	r2, r2, #31
 800e8b4:	2101      	movs	r1, #1
 800e8b6:	fa01 f202 	lsl.w	r2, r1, r2
 800e8ba:	4013      	ands	r3, r2
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d180      	bne.n	800e7c2 <HAL_RCC_OscConfig+0xf1a>
 800e8c0:	e027      	b.n	800e912 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e8c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e8c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	69db      	ldr	r3, [r3, #28]
 800e8ce:	2b01      	cmp	r3, #1
 800e8d0:	d101      	bne.n	800e8d6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	e01e      	b.n	800e914 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800e8d6:	4b12      	ldr	r3, [pc, #72]	; (800e920 <HAL_RCC_OscConfig+0x1078>)
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800e8de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e8e2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800e8e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e8ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	6a1b      	ldr	r3, [r3, #32]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d10b      	bne.n	800e90e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800e8f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e8fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800e8fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d001      	beq.n	800e912 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800e90e:	2301      	movs	r3, #1
 800e910:	e000      	b.n	800e914 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	40021000 	.word	0x40021000

0800e924 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b09e      	sub	sp, #120	; 0x78
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800e92e:	2300      	movs	r3, #0
 800e930:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d101      	bne.n	800e93c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800e938:	2301      	movs	r3, #1
 800e93a:	e162      	b.n	800ec02 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e93c:	4b90      	ldr	r3, [pc, #576]	; (800eb80 <HAL_RCC_ClockConfig+0x25c>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f003 0307 	and.w	r3, r3, #7
 800e944:	683a      	ldr	r2, [r7, #0]
 800e946:	429a      	cmp	r2, r3
 800e948:	d910      	bls.n	800e96c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e94a:	4b8d      	ldr	r3, [pc, #564]	; (800eb80 <HAL_RCC_ClockConfig+0x25c>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f023 0207 	bic.w	r2, r3, #7
 800e952:	498b      	ldr	r1, [pc, #556]	; (800eb80 <HAL_RCC_ClockConfig+0x25c>)
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	4313      	orrs	r3, r2
 800e958:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e95a:	4b89      	ldr	r3, [pc, #548]	; (800eb80 <HAL_RCC_ClockConfig+0x25c>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f003 0307 	and.w	r3, r3, #7
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	429a      	cmp	r2, r3
 800e966:	d001      	beq.n	800e96c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e968:	2301      	movs	r3, #1
 800e96a:	e14a      	b.n	800ec02 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f003 0302 	and.w	r3, r3, #2
 800e974:	2b00      	cmp	r3, #0
 800e976:	d008      	beq.n	800e98a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e978:	4b82      	ldr	r3, [pc, #520]	; (800eb84 <HAL_RCC_ClockConfig+0x260>)
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	497f      	ldr	r1, [pc, #508]	; (800eb84 <HAL_RCC_ClockConfig+0x260>)
 800e986:	4313      	orrs	r3, r2
 800e988:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f003 0301 	and.w	r3, r3, #1
 800e992:	2b00      	cmp	r3, #0
 800e994:	f000 80dc 	beq.w	800eb50 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d13c      	bne.n	800ea1a <HAL_RCC_ClockConfig+0xf6>
 800e9a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e9a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e9a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e9a8:	fa93 f3a3 	rbit	r3, r3
 800e9ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800e9ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9b0:	fab3 f383 	clz	r3, r3
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	095b      	lsrs	r3, r3, #5
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	f043 0301 	orr.w	r3, r3, #1
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d102      	bne.n	800e9ca <HAL_RCC_ClockConfig+0xa6>
 800e9c4:	4b6f      	ldr	r3, [pc, #444]	; (800eb84 <HAL_RCC_ClockConfig+0x260>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	e00f      	b.n	800e9ea <HAL_RCC_ClockConfig+0xc6>
 800e9ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e9ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e9d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9d2:	fa93 f3a3 	rbit	r3, r3
 800e9d6:	667b      	str	r3, [r7, #100]	; 0x64
 800e9d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e9dc:	663b      	str	r3, [r7, #96]	; 0x60
 800e9de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9e0:	fa93 f3a3 	rbit	r3, r3
 800e9e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e9e6:	4b67      	ldr	r3, [pc, #412]	; (800eb84 <HAL_RCC_ClockConfig+0x260>)
 800e9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e9ee:	65ba      	str	r2, [r7, #88]	; 0x58
 800e9f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9f2:	fa92 f2a2 	rbit	r2, r2
 800e9f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800e9f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e9fa:	fab2 f282 	clz	r2, r2
 800e9fe:	b2d2      	uxtb	r2, r2
 800ea00:	f042 0220 	orr.w	r2, r2, #32
 800ea04:	b2d2      	uxtb	r2, r2
 800ea06:	f002 021f 	and.w	r2, r2, #31
 800ea0a:	2101      	movs	r1, #1
 800ea0c:	fa01 f202 	lsl.w	r2, r1, r2
 800ea10:	4013      	ands	r3, r2
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d17b      	bne.n	800eb0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800ea16:	2301      	movs	r3, #1
 800ea18:	e0f3      	b.n	800ec02 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	2b02      	cmp	r3, #2
 800ea20:	d13c      	bne.n	800ea9c <HAL_RCC_ClockConfig+0x178>
 800ea22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ea26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ea28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea2a:	fa93 f3a3 	rbit	r3, r3
 800ea2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800ea30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea32:	fab3 f383 	clz	r3, r3
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	095b      	lsrs	r3, r3, #5
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	f043 0301 	orr.w	r3, r3, #1
 800ea40:	b2db      	uxtb	r3, r3
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d102      	bne.n	800ea4c <HAL_RCC_ClockConfig+0x128>
 800ea46:	4b4f      	ldr	r3, [pc, #316]	; (800eb84 <HAL_RCC_ClockConfig+0x260>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	e00f      	b.n	800ea6c <HAL_RCC_ClockConfig+0x148>
 800ea4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ea50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ea52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea54:	fa93 f3a3 	rbit	r3, r3
 800ea58:	647b      	str	r3, [r7, #68]	; 0x44
 800ea5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ea5e:	643b      	str	r3, [r7, #64]	; 0x40
 800ea60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea62:	fa93 f3a3 	rbit	r3, r3
 800ea66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea68:	4b46      	ldr	r3, [pc, #280]	; (800eb84 <HAL_RCC_ClockConfig+0x260>)
 800ea6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ea70:	63ba      	str	r2, [r7, #56]	; 0x38
 800ea72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea74:	fa92 f2a2 	rbit	r2, r2
 800ea78:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800ea7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea7c:	fab2 f282 	clz	r2, r2
 800ea80:	b2d2      	uxtb	r2, r2
 800ea82:	f042 0220 	orr.w	r2, r2, #32
 800ea86:	b2d2      	uxtb	r2, r2
 800ea88:	f002 021f 	and.w	r2, r2, #31
 800ea8c:	2101      	movs	r1, #1
 800ea8e:	fa01 f202 	lsl.w	r2, r1, r2
 800ea92:	4013      	ands	r3, r2
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d13a      	bne.n	800eb0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	e0b2      	b.n	800ec02 <HAL_RCC_ClockConfig+0x2de>
 800ea9c:	2302      	movs	r3, #2
 800ea9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa2:	fa93 f3a3 	rbit	r3, r3
 800eaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800eaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eaaa:	fab3 f383 	clz	r3, r3
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	095b      	lsrs	r3, r3, #5
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	f043 0301 	orr.w	r3, r3, #1
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d102      	bne.n	800eac4 <HAL_RCC_ClockConfig+0x1a0>
 800eabe:	4b31      	ldr	r3, [pc, #196]	; (800eb84 <HAL_RCC_ClockConfig+0x260>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	e00d      	b.n	800eae0 <HAL_RCC_ClockConfig+0x1bc>
 800eac4:	2302      	movs	r3, #2
 800eac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaca:	fa93 f3a3 	rbit	r3, r3
 800eace:	627b      	str	r3, [r7, #36]	; 0x24
 800ead0:	2302      	movs	r3, #2
 800ead2:	623b      	str	r3, [r7, #32]
 800ead4:	6a3b      	ldr	r3, [r7, #32]
 800ead6:	fa93 f3a3 	rbit	r3, r3
 800eada:	61fb      	str	r3, [r7, #28]
 800eadc:	4b29      	ldr	r3, [pc, #164]	; (800eb84 <HAL_RCC_ClockConfig+0x260>)
 800eade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae0:	2202      	movs	r2, #2
 800eae2:	61ba      	str	r2, [r7, #24]
 800eae4:	69ba      	ldr	r2, [r7, #24]
 800eae6:	fa92 f2a2 	rbit	r2, r2
 800eaea:	617a      	str	r2, [r7, #20]
  return result;
 800eaec:	697a      	ldr	r2, [r7, #20]
 800eaee:	fab2 f282 	clz	r2, r2
 800eaf2:	b2d2      	uxtb	r2, r2
 800eaf4:	f042 0220 	orr.w	r2, r2, #32
 800eaf8:	b2d2      	uxtb	r2, r2
 800eafa:	f002 021f 	and.w	r2, r2, #31
 800eafe:	2101      	movs	r1, #1
 800eb00:	fa01 f202 	lsl.w	r2, r1, r2
 800eb04:	4013      	ands	r3, r2
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d101      	bne.n	800eb0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	e079      	b.n	800ec02 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800eb0e:	4b1d      	ldr	r3, [pc, #116]	; (800eb84 <HAL_RCC_ClockConfig+0x260>)
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	f023 0203 	bic.w	r2, r3, #3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	491a      	ldr	r1, [pc, #104]	; (800eb84 <HAL_RCC_ClockConfig+0x260>)
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800eb20:	f7f9 fe5e 	bl	80087e0 <HAL_GetTick>
 800eb24:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eb26:	e00a      	b.n	800eb3e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eb28:	f7f9 fe5a 	bl	80087e0 <HAL_GetTick>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d901      	bls.n	800eb3e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800eb3a:	2303      	movs	r3, #3
 800eb3c:	e061      	b.n	800ec02 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eb3e:	4b11      	ldr	r3, [pc, #68]	; (800eb84 <HAL_RCC_ClockConfig+0x260>)
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	f003 020c 	and.w	r2, r3, #12
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	009b      	lsls	r3, r3, #2
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d1eb      	bne.n	800eb28 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800eb50:	4b0b      	ldr	r3, [pc, #44]	; (800eb80 <HAL_RCC_ClockConfig+0x25c>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f003 0307 	and.w	r3, r3, #7
 800eb58:	683a      	ldr	r2, [r7, #0]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d214      	bcs.n	800eb88 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eb5e:	4b08      	ldr	r3, [pc, #32]	; (800eb80 <HAL_RCC_ClockConfig+0x25c>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f023 0207 	bic.w	r2, r3, #7
 800eb66:	4906      	ldr	r1, [pc, #24]	; (800eb80 <HAL_RCC_ClockConfig+0x25c>)
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb6e:	4b04      	ldr	r3, [pc, #16]	; (800eb80 <HAL_RCC_ClockConfig+0x25c>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f003 0307 	and.w	r3, r3, #7
 800eb76:	683a      	ldr	r2, [r7, #0]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d005      	beq.n	800eb88 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	e040      	b.n	800ec02 <HAL_RCC_ClockConfig+0x2de>
 800eb80:	40022000 	.word	0x40022000
 800eb84:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f003 0304 	and.w	r3, r3, #4
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d008      	beq.n	800eba6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eb94:	4b1d      	ldr	r3, [pc, #116]	; (800ec0c <HAL_RCC_ClockConfig+0x2e8>)
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	491a      	ldr	r1, [pc, #104]	; (800ec0c <HAL_RCC_ClockConfig+0x2e8>)
 800eba2:	4313      	orrs	r3, r2
 800eba4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f003 0308 	and.w	r3, r3, #8
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d009      	beq.n	800ebc6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ebb2:	4b16      	ldr	r3, [pc, #88]	; (800ec0c <HAL_RCC_ClockConfig+0x2e8>)
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	691b      	ldr	r3, [r3, #16]
 800ebbe:	00db      	lsls	r3, r3, #3
 800ebc0:	4912      	ldr	r1, [pc, #72]	; (800ec0c <HAL_RCC_ClockConfig+0x2e8>)
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800ebc6:	f000 f85b 	bl	800ec80 <HAL_RCC_GetSysClockFreq>
 800ebca:	4601      	mov	r1, r0
 800ebcc:	4b0f      	ldr	r3, [pc, #60]	; (800ec0c <HAL_RCC_ClockConfig+0x2e8>)
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ebd4:	22f0      	movs	r2, #240	; 0xf0
 800ebd6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ebd8:	693a      	ldr	r2, [r7, #16]
 800ebda:	fa92 f2a2 	rbit	r2, r2
 800ebde:	60fa      	str	r2, [r7, #12]
  return result;
 800ebe0:	68fa      	ldr	r2, [r7, #12]
 800ebe2:	fab2 f282 	clz	r2, r2
 800ebe6:	b2d2      	uxtb	r2, r2
 800ebe8:	40d3      	lsrs	r3, r2
 800ebea:	4a09      	ldr	r2, [pc, #36]	; (800ec10 <HAL_RCC_ClockConfig+0x2ec>)
 800ebec:	5cd3      	ldrb	r3, [r2, r3]
 800ebee:	fa21 f303 	lsr.w	r3, r1, r3
 800ebf2:	4a08      	ldr	r2, [pc, #32]	; (800ec14 <HAL_RCC_ClockConfig+0x2f0>)
 800ebf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800ebf6:	4b08      	ldr	r3, [pc, #32]	; (800ec18 <HAL_RCC_ClockConfig+0x2f4>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7f7 fdf8 	bl	80067f0 <HAL_InitTick>
  
  return HAL_OK;
 800ec00:	2300      	movs	r3, #0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3778      	adds	r7, #120	; 0x78
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	40021000 	.word	0x40021000
 800ec10:	08017ca8 	.word	0x08017ca8
 800ec14:	20000010 	.word	0x20000010
 800ec18:	20000014 	.word	0x20000014

0800ec1c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b08a      	sub	sp, #40	; 0x28
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	60b9      	str	r1, [r7, #8]
 800ec26:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800ec28:	2302      	movs	r3, #2
 800ec2a:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800ec2c:	2303      	movs	r3, #3
 800ec2e:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 800ec30:	2300      	movs	r3, #0
 800ec32:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 800ec34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec38:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800ec3e:	4b0f      	ldr	r3, [pc, #60]	; (800ec7c <HAL_RCC_MCOConfig+0x60>)
 800ec40:	695b      	ldr	r3, [r3, #20]
 800ec42:	4a0e      	ldr	r2, [pc, #56]	; (800ec7c <HAL_RCC_MCOConfig+0x60>)
 800ec44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec48:	6153      	str	r3, [r2, #20]
 800ec4a:	4b0c      	ldr	r3, [pc, #48]	; (800ec7c <HAL_RCC_MCOConfig+0x60>)
 800ec4c:	695b      	ldr	r3, [r3, #20]
 800ec4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec52:	613b      	str	r3, [r7, #16]
 800ec54:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800ec56:	f107 0314 	add.w	r3, r7, #20
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ec60:	f7fb ffbe 	bl	800abe0 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800ec64:	4b05      	ldr	r3, [pc, #20]	; (800ec7c <HAL_RCC_MCOConfig+0x60>)
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ec6c:	4903      	ldr	r1, [pc, #12]	; (800ec7c <HAL_RCC_MCOConfig+0x60>)
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	4313      	orrs	r3, r2
 800ec72:	604b      	str	r3, [r1, #4]
}
 800ec74:	bf00      	nop
 800ec76:	3728      	adds	r7, #40	; 0x28
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	40021000 	.word	0x40021000

0800ec80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b08b      	sub	sp, #44	; 0x2c
 800ec84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ec86:	2300      	movs	r3, #0
 800ec88:	61fb      	str	r3, [r7, #28]
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	61bb      	str	r3, [r7, #24]
 800ec8e:	2300      	movs	r3, #0
 800ec90:	627b      	str	r3, [r7, #36]	; 0x24
 800ec92:	2300      	movs	r3, #0
 800ec94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800ec96:	2300      	movs	r3, #0
 800ec98:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800ec9a:	4b29      	ldr	r3, [pc, #164]	; (800ed40 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	f003 030c 	and.w	r3, r3, #12
 800eca6:	2b04      	cmp	r3, #4
 800eca8:	d002      	beq.n	800ecb0 <HAL_RCC_GetSysClockFreq+0x30>
 800ecaa:	2b08      	cmp	r3, #8
 800ecac:	d003      	beq.n	800ecb6 <HAL_RCC_GetSysClockFreq+0x36>
 800ecae:	e03c      	b.n	800ed2a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ecb0:	4b24      	ldr	r3, [pc, #144]	; (800ed44 <HAL_RCC_GetSysClockFreq+0xc4>)
 800ecb2:	623b      	str	r3, [r7, #32]
      break;
 800ecb4:	e03c      	b.n	800ed30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800ecb6:	69fb      	ldr	r3, [r7, #28]
 800ecb8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800ecbc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800ecc0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ecc2:	68ba      	ldr	r2, [r7, #8]
 800ecc4:	fa92 f2a2 	rbit	r2, r2
 800ecc8:	607a      	str	r2, [r7, #4]
  return result;
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	fab2 f282 	clz	r2, r2
 800ecd0:	b2d2      	uxtb	r2, r2
 800ecd2:	40d3      	lsrs	r3, r2
 800ecd4:	4a1c      	ldr	r2, [pc, #112]	; (800ed48 <HAL_RCC_GetSysClockFreq+0xc8>)
 800ecd6:	5cd3      	ldrb	r3, [r2, r3]
 800ecd8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800ecda:	4b19      	ldr	r3, [pc, #100]	; (800ed40 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ecdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecde:	f003 030f 	and.w	r3, r3, #15
 800ece2:	220f      	movs	r2, #15
 800ece4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ece6:	693a      	ldr	r2, [r7, #16]
 800ece8:	fa92 f2a2 	rbit	r2, r2
 800ecec:	60fa      	str	r2, [r7, #12]
  return result;
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	fab2 f282 	clz	r2, r2
 800ecf4:	b2d2      	uxtb	r2, r2
 800ecf6:	40d3      	lsrs	r3, r2
 800ecf8:	4a14      	ldr	r2, [pc, #80]	; (800ed4c <HAL_RCC_GetSysClockFreq+0xcc>)
 800ecfa:	5cd3      	ldrb	r3, [r2, r3]
 800ecfc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d008      	beq.n	800ed1a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800ed08:	4a0e      	ldr	r2, [pc, #56]	; (800ed44 <HAL_RCC_GetSysClockFreq+0xc4>)
 800ed0a:	69bb      	ldr	r3, [r7, #24]
 800ed0c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	fb02 f303 	mul.w	r3, r2, r3
 800ed16:	627b      	str	r3, [r7, #36]	; 0x24
 800ed18:	e004      	b.n	800ed24 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	4a0c      	ldr	r2, [pc, #48]	; (800ed50 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ed1e:	fb02 f303 	mul.w	r3, r2, r3
 800ed22:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800ed24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed26:	623b      	str	r3, [r7, #32]
      break;
 800ed28:	e002      	b.n	800ed30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ed2a:	4b06      	ldr	r3, [pc, #24]	; (800ed44 <HAL_RCC_GetSysClockFreq+0xc4>)
 800ed2c:	623b      	str	r3, [r7, #32]
      break;
 800ed2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ed30:	6a3b      	ldr	r3, [r7, #32]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	372c      	adds	r7, #44	; 0x2c
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr
 800ed3e:	bf00      	nop
 800ed40:	40021000 	.word	0x40021000
 800ed44:	007a1200 	.word	0x007a1200
 800ed48:	080181d8 	.word	0x080181d8
 800ed4c:	080181e8 	.word	0x080181e8
 800ed50:	003d0900 	.word	0x003d0900

0800ed54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ed54:	b480      	push	{r7}
 800ed56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ed58:	4b03      	ldr	r3, [pc, #12]	; (800ed68 <HAL_RCC_GetHCLKFreq+0x14>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	20000010 	.word	0x20000010

0800ed6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800ed72:	f7ff ffef 	bl	800ed54 <HAL_RCC_GetHCLKFreq>
 800ed76:	4601      	mov	r1, r0
 800ed78:	4b0b      	ldr	r3, [pc, #44]	; (800eda8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed80:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800ed84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	fa92 f2a2 	rbit	r2, r2
 800ed8c:	603a      	str	r2, [r7, #0]
  return result;
 800ed8e:	683a      	ldr	r2, [r7, #0]
 800ed90:	fab2 f282 	clz	r2, r2
 800ed94:	b2d2      	uxtb	r2, r2
 800ed96:	40d3      	lsrs	r3, r2
 800ed98:	4a04      	ldr	r2, [pc, #16]	; (800edac <HAL_RCC_GetPCLK1Freq+0x40>)
 800ed9a:	5cd3      	ldrb	r3, [r2, r3]
 800ed9c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800eda0:	4618      	mov	r0, r3
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	40021000 	.word	0x40021000
 800edac:	08017cb8 	.word	0x08017cb8

0800edb0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	220f      	movs	r2, #15
 800edbe:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800edc0:	4b12      	ldr	r3, [pc, #72]	; (800ee0c <HAL_RCC_GetClockConfig+0x5c>)
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	f003 0203 	and.w	r2, r3, #3
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800edcc:	4b0f      	ldr	r3, [pc, #60]	; (800ee0c <HAL_RCC_GetClockConfig+0x5c>)
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800edd8:	4b0c      	ldr	r3, [pc, #48]	; (800ee0c <HAL_RCC_GetClockConfig+0x5c>)
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ede4:	4b09      	ldr	r3, [pc, #36]	; (800ee0c <HAL_RCC_GetClockConfig+0x5c>)
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	08db      	lsrs	r3, r3, #3
 800edea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800edf2:	4b07      	ldr	r3, [pc, #28]	; (800ee10 <HAL_RCC_GetClockConfig+0x60>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f003 0207 	and.w	r2, r3, #7
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	601a      	str	r2, [r3, #0]
}
 800edfe:	bf00      	nop
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop
 800ee0c:	40021000 	.word	0x40021000
 800ee10:	40022000 	.word	0x40022000

0800ee14 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b092      	sub	sp, #72	; 0x48
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800ee20:	2300      	movs	r3, #0
 800ee22:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800ee24:	2300      	movs	r3, #0
 800ee26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	f000 80d4 	beq.w	800efe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ee38:	4b4e      	ldr	r3, [pc, #312]	; (800ef74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ee3a:	69db      	ldr	r3, [r3, #28]
 800ee3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d10e      	bne.n	800ee62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ee44:	4b4b      	ldr	r3, [pc, #300]	; (800ef74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ee46:	69db      	ldr	r3, [r3, #28]
 800ee48:	4a4a      	ldr	r2, [pc, #296]	; (800ef74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ee4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee4e:	61d3      	str	r3, [r2, #28]
 800ee50:	4b48      	ldr	r3, [pc, #288]	; (800ef74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ee52:	69db      	ldr	r3, [r3, #28]
 800ee54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee58:	60bb      	str	r3, [r7, #8]
 800ee5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee62:	4b45      	ldr	r3, [pc, #276]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d118      	bne.n	800eea0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ee6e:	4b42      	ldr	r3, [pc, #264]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a41      	ldr	r2, [pc, #260]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ee74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ee7a:	f7f9 fcb1 	bl	80087e0 <HAL_GetTick>
 800ee7e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee80:	e008      	b.n	800ee94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ee82:	f7f9 fcad 	bl	80087e0 <HAL_GetTick>
 800ee86:	4602      	mov	r2, r0
 800ee88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee8a:	1ad3      	subs	r3, r2, r3
 800ee8c:	2b64      	cmp	r3, #100	; 0x64
 800ee8e:	d901      	bls.n	800ee94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800ee90:	2303      	movs	r3, #3
 800ee92:	e169      	b.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee94:	4b38      	ldr	r3, [pc, #224]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d0f0      	beq.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800eea0:	4b34      	ldr	r3, [pc, #208]	; (800ef74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800eea2:	6a1b      	ldr	r3, [r3, #32]
 800eea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eea8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800eeaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f000 8084 	beq.w	800efba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eeba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d07c      	beq.n	800efba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800eec0:	4b2c      	ldr	r3, [pc, #176]	; (800ef74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800eec2:	6a1b      	ldr	r3, [r3, #32]
 800eec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eeca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800eece:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed2:	fa93 f3a3 	rbit	r3, r3
 800eed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800eed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800eeda:	fab3 f383 	clz	r3, r3
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	461a      	mov	r2, r3
 800eee2:	4b26      	ldr	r3, [pc, #152]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800eee4:	4413      	add	r3, r2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	461a      	mov	r2, r3
 800eeea:	2301      	movs	r3, #1
 800eeec:	6013      	str	r3, [r2, #0]
 800eeee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800eef2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef6:	fa93 f3a3 	rbit	r3, r3
 800eefa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800eefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800eefe:	fab3 f383 	clz	r3, r3
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	461a      	mov	r2, r3
 800ef06:	4b1d      	ldr	r3, [pc, #116]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ef08:	4413      	add	r3, r2
 800ef0a:	009b      	lsls	r3, r3, #2
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	2300      	movs	r3, #0
 800ef10:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800ef12:	4a18      	ldr	r2, [pc, #96]	; (800ef74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ef14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef16:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800ef18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef1a:	f003 0301 	and.w	r3, r3, #1
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d04b      	beq.n	800efba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef22:	f7f9 fc5d 	bl	80087e0 <HAL_GetTick>
 800ef26:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ef28:	e00a      	b.n	800ef40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef2a:	f7f9 fc59 	bl	80087e0 <HAL_GetTick>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef32:	1ad3      	subs	r3, r2, r3
 800ef34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d901      	bls.n	800ef40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800ef3c:	2303      	movs	r3, #3
 800ef3e:	e113      	b.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800ef40:	2302      	movs	r3, #2
 800ef42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ef44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef46:	fa93 f3a3 	rbit	r3, r3
 800ef4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ef4c:	2302      	movs	r3, #2
 800ef4e:	623b      	str	r3, [r7, #32]
 800ef50:	6a3b      	ldr	r3, [r7, #32]
 800ef52:	fa93 f3a3 	rbit	r3, r3
 800ef56:	61fb      	str	r3, [r7, #28]
  return result;
 800ef58:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ef5a:	fab3 f383 	clz	r3, r3
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	095b      	lsrs	r3, r3, #5
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	f043 0302 	orr.w	r3, r3, #2
 800ef68:	b2db      	uxtb	r3, r3
 800ef6a:	2b02      	cmp	r3, #2
 800ef6c:	d108      	bne.n	800ef80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800ef6e:	4b01      	ldr	r3, [pc, #4]	; (800ef74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ef70:	6a1b      	ldr	r3, [r3, #32]
 800ef72:	e00d      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800ef74:	40021000 	.word	0x40021000
 800ef78:	40007000 	.word	0x40007000
 800ef7c:	10908100 	.word	0x10908100
 800ef80:	2302      	movs	r3, #2
 800ef82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	fa93 f3a3 	rbit	r3, r3
 800ef8a:	617b      	str	r3, [r7, #20]
 800ef8c:	4b78      	ldr	r3, [pc, #480]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ef8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef90:	2202      	movs	r2, #2
 800ef92:	613a      	str	r2, [r7, #16]
 800ef94:	693a      	ldr	r2, [r7, #16]
 800ef96:	fa92 f2a2 	rbit	r2, r2
 800ef9a:	60fa      	str	r2, [r7, #12]
  return result;
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	fab2 f282 	clz	r2, r2
 800efa2:	b2d2      	uxtb	r2, r2
 800efa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800efa8:	b2d2      	uxtb	r2, r2
 800efaa:	f002 021f 	and.w	r2, r2, #31
 800efae:	2101      	movs	r1, #1
 800efb0:	fa01 f202 	lsl.w	r2, r1, r2
 800efb4:	4013      	ands	r3, r2
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d0b7      	beq.n	800ef2a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800efba:	4b6d      	ldr	r3, [pc, #436]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800efbc:	6a1b      	ldr	r3, [r3, #32]
 800efbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	496a      	ldr	r1, [pc, #424]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800efc8:	4313      	orrs	r3, r2
 800efca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800efcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d105      	bne.n	800efe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800efd4:	4b66      	ldr	r3, [pc, #408]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800efd6:	69db      	ldr	r3, [r3, #28]
 800efd8:	4a65      	ldr	r2, [pc, #404]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800efda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800efde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f003 0301 	and.w	r3, r3, #1
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d008      	beq.n	800effe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800efec:	4b60      	ldr	r3, [pc, #384]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800efee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eff0:	f023 0203 	bic.w	r2, r3, #3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	689b      	ldr	r3, [r3, #8]
 800eff8:	495d      	ldr	r1, [pc, #372]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800effa:	4313      	orrs	r3, r2
 800effc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f003 0302 	and.w	r3, r3, #2
 800f006:	2b00      	cmp	r3, #0
 800f008:	d008      	beq.n	800f01c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f00a:	4b59      	ldr	r3, [pc, #356]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f00e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	4956      	ldr	r1, [pc, #344]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f018:	4313      	orrs	r3, r2
 800f01a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f003 0304 	and.w	r3, r3, #4
 800f024:	2b00      	cmp	r3, #0
 800f026:	d008      	beq.n	800f03a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f028:	4b51      	ldr	r3, [pc, #324]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f02c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	691b      	ldr	r3, [r3, #16]
 800f034:	494e      	ldr	r1, [pc, #312]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f036:	4313      	orrs	r3, r2
 800f038:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f003 0320 	and.w	r3, r3, #32
 800f042:	2b00      	cmp	r3, #0
 800f044:	d008      	beq.n	800f058 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f046:	4b4a      	ldr	r3, [pc, #296]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f04a:	f023 0210 	bic.w	r2, r3, #16
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	69db      	ldr	r3, [r3, #28]
 800f052:	4947      	ldr	r1, [pc, #284]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f054:	4313      	orrs	r3, r2
 800f056:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f060:	2b00      	cmp	r3, #0
 800f062:	d008      	beq.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800f064:	4b42      	ldr	r3, [pc, #264]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f070:	493f      	ldr	r1, [pc, #252]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f072:	4313      	orrs	r3, r2
 800f074:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d008      	beq.n	800f094 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f082:	4b3b      	ldr	r3, [pc, #236]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f086:	f023 0220 	bic.w	r2, r3, #32
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6a1b      	ldr	r3, [r3, #32]
 800f08e:	4938      	ldr	r1, [pc, #224]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f090:	4313      	orrs	r3, r2
 800f092:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f003 0308 	and.w	r3, r3, #8
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d008      	beq.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f0a0:	4b33      	ldr	r3, [pc, #204]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	695b      	ldr	r3, [r3, #20]
 800f0ac:	4930      	ldr	r1, [pc, #192]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f003 0310 	and.w	r3, r3, #16
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d008      	beq.n	800f0d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f0be:	4b2c      	ldr	r3, [pc, #176]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	699b      	ldr	r3, [r3, #24]
 800f0ca:	4929      	ldr	r1, [pc, #164]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0cc:	4313      	orrs	r3, r2
 800f0ce:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d008      	beq.n	800f0ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f0dc:	4b24      	ldr	r3, [pc, #144]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e8:	4921      	ldr	r1, [pc, #132]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d008      	beq.n	800f10c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800f0fa:	4b1d      	ldr	r3, [pc, #116]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0fe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f106:	491a      	ldr	r1, [pc, #104]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f108:	4313      	orrs	r3, r2
 800f10a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f114:	2b00      	cmp	r3, #0
 800f116:	d008      	beq.n	800f12a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800f118:	4b15      	ldr	r3, [pc, #84]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f11c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f124:	4912      	ldr	r1, [pc, #72]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f126:	4313      	orrs	r3, r2
 800f128:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f132:	2b00      	cmp	r3, #0
 800f134:	d008      	beq.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800f136:	4b0e      	ldr	r3, [pc, #56]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f13a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f142:	490b      	ldr	r1, [pc, #44]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f144:	4313      	orrs	r3, r2
 800f146:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f150:	2b00      	cmp	r3, #0
 800f152:	d008      	beq.n	800f166 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800f154:	4b06      	ldr	r3, [pc, #24]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f158:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f160:	4903      	ldr	r1, [pc, #12]	; (800f170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800f162:	4313      	orrs	r3, r2
 800f164:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800f166:	2300      	movs	r3, #0
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3748      	adds	r7, #72	; 0x48
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	40021000 	.word	0x40021000

0800f174 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d101      	bne.n	800f186 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800f182:	2301      	movs	r3, #1
 800f184:	e083      	b.n	800f28e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	7f5b      	ldrb	r3, [r3, #29]
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d105      	bne.n	800f19c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f7f7 fac2 	bl	8006720 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2202      	movs	r2, #2
 800f1a0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	22ca      	movs	r2, #202	; 0xca
 800f1a8:	625a      	str	r2, [r3, #36]	; 0x24
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	2253      	movs	r2, #83	; 0x53
 800f1b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f000 faa8 	bl	800f708 <RTC_EnterInitMode>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d008      	beq.n	800f1d0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	22ff      	movs	r2, #255	; 0xff
 800f1c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2204      	movs	r2, #4
 800f1ca:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	e05e      	b.n	800f28e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	689b      	ldr	r3, [r3, #8]
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	6812      	ldr	r2, [r2, #0]
 800f1da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1e2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	6899      	ldr	r1, [r3, #8]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	685a      	ldr	r2, [r3, #4]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	691b      	ldr	r3, [r3, #16]
 800f1f2:	431a      	orrs	r2, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	695b      	ldr	r3, [r3, #20]
 800f1f8:	431a      	orrs	r2, r3
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	430a      	orrs	r2, r1
 800f200:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	68d2      	ldr	r2, [r2, #12]
 800f20a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	6919      	ldr	r1, [r3, #16]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	689b      	ldr	r3, [r3, #8]
 800f216:	041a      	lsls	r2, r3, #16
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	430a      	orrs	r2, r1
 800f21e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	68da      	ldr	r2, [r3, #12]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f22e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	689b      	ldr	r3, [r3, #8]
 800f236:	f003 0320 	and.w	r3, r3, #32
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d10e      	bne.n	800f25c <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f000 fa3a 	bl	800f6b8 <HAL_RTC_WaitForSynchro>
 800f244:	4603      	mov	r3, r0
 800f246:	2b00      	cmp	r3, #0
 800f248:	d008      	beq.n	800f25c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	22ff      	movs	r2, #255	; 0xff
 800f250:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2204      	movs	r2, #4
 800f256:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800f258:	2301      	movs	r3, #1
 800f25a:	e018      	b.n	800f28e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f26a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	699a      	ldr	r2, [r3, #24]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	430a      	orrs	r2, r1
 800f27c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	22ff      	movs	r2, #255	; 0xff
 800f284:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2201      	movs	r2, #1
 800f28a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800f28c:	2300      	movs	r3, #0
  }
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3708      	adds	r7, #8
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f296:	b590      	push	{r4, r7, lr}
 800f298:	b087      	sub	sp, #28
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	60f8      	str	r0, [r7, #12]
 800f29e:	60b9      	str	r1, [r7, #8]
 800f2a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	7f1b      	ldrb	r3, [r3, #28]
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d101      	bne.n	800f2b2 <HAL_RTC_SetTime+0x1c>
 800f2ae:	2302      	movs	r3, #2
 800f2b0:	e0aa      	b.n	800f408 <HAL_RTC_SetTime+0x172>
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	2202      	movs	r2, #2
 800f2bc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d126      	bne.n	800f312 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	689b      	ldr	r3, [r3, #8]
 800f2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d102      	bne.n	800f2d8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f000 fa3f 	bl	800f760 <RTC_ByteToBcd2>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	785b      	ldrb	r3, [r3, #1]
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f000 fa38 	bl	800f760 <RTC_ByteToBcd2>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f2f4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	789b      	ldrb	r3, [r3, #2]
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f000 fa30 	bl	800f760 <RTC_ByteToBcd2>
 800f300:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f302:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	78db      	ldrb	r3, [r3, #3]
 800f30a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f30c:	4313      	orrs	r3, r2
 800f30e:	617b      	str	r3, [r7, #20]
 800f310:	e018      	b.n	800f344 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	689b      	ldr	r3, [r3, #8]
 800f318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d102      	bne.n	800f326 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	2200      	movs	r2, #0
 800f324:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	785b      	ldrb	r3, [r3, #1]
 800f330:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f332:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800f334:	68ba      	ldr	r2, [r7, #8]
 800f336:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f338:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	78db      	ldrb	r3, [r3, #3]
 800f33e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f340:	4313      	orrs	r3, r2
 800f342:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	22ca      	movs	r2, #202	; 0xca
 800f34a:	625a      	str	r2, [r3, #36]	; 0x24
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2253      	movs	r2, #83	; 0x53
 800f352:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f354:	68f8      	ldr	r0, [r7, #12]
 800f356:	f000 f9d7 	bl	800f708 <RTC_EnterInitMode>
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d00b      	beq.n	800f378 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	22ff      	movs	r2, #255	; 0xff
 800f366:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2204      	movs	r2, #4
 800f36c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2200      	movs	r2, #0
 800f372:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f374:	2301      	movs	r3, #1
 800f376:	e047      	b.n	800f408 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f382:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f386:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	689a      	ldr	r2, [r3, #8]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f396:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	6899      	ldr	r1, [r3, #8]
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	68da      	ldr	r2, [r3, #12]
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	691b      	ldr	r3, [r3, #16]
 800f3a6:	431a      	orrs	r2, r3
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	430a      	orrs	r2, r1
 800f3ae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	68da      	ldr	r2, [r3, #12]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f3be:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	f003 0320 	and.w	r3, r3, #32
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d111      	bne.n	800f3f2 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f3ce:	68f8      	ldr	r0, [r7, #12]
 800f3d0:	f000 f972 	bl	800f6b8 <HAL_RTC_WaitForSynchro>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d00b      	beq.n	800f3f2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	22ff      	movs	r2, #255	; 0xff
 800f3e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2204      	movs	r2, #4
 800f3e6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	e00a      	b.n	800f408 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	22ff      	movs	r2, #255	; 0xff
 800f3f8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2200      	movs	r2, #0
 800f404:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800f406:	2300      	movs	r3, #0
  }
}
 800f408:	4618      	mov	r0, r3
 800f40a:	371c      	adds	r7, #28
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd90      	pop	{r4, r7, pc}

0800f410 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800f41c:	2300      	movs	r3, #0
 800f41e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	691b      	ldr	r3, [r3, #16]
 800f430:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f442:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f446:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	0c1b      	lsrs	r3, r3, #16
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f452:	b2da      	uxtb	r2, r3
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	0a1b      	lsrs	r3, r3, #8
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f462:	b2da      	uxtb	r2, r3
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f470:	b2da      	uxtb	r2, r3
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	0c1b      	lsrs	r3, r3, #16
 800f47a:	b2db      	uxtb	r3, r3
 800f47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f480:	b2da      	uxtb	r2, r3
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d11a      	bne.n	800f4c2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	4618      	mov	r0, r3
 800f492:	f000 f983 	bl	800f79c <RTC_Bcd2ToByte>
 800f496:	4603      	mov	r3, r0
 800f498:	461a      	mov	r2, r3
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	785b      	ldrb	r3, [r3, #1]
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f000 f97a 	bl	800f79c <RTC_Bcd2ToByte>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	789b      	ldrb	r3, [r3, #2]
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f000 f971 	bl	800f79c <RTC_Bcd2ToByte>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	461a      	mov	r2, r3
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800f4c2:	2300      	movs	r3, #0
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3718      	adds	r7, #24
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f4cc:	b590      	push	{r4, r7, lr}
 800f4ce:	b087      	sub	sp, #28
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	60f8      	str	r0, [r7, #12]
 800f4d4:	60b9      	str	r1, [r7, #8]
 800f4d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	7f1b      	ldrb	r3, [r3, #28]
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d101      	bne.n	800f4e8 <HAL_RTC_SetDate+0x1c>
 800f4e4:	2302      	movs	r3, #2
 800f4e6:	e094      	b.n	800f612 <HAL_RTC_SetDate+0x146>
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2202      	movs	r2, #2
 800f4f2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d10e      	bne.n	800f518 <HAL_RTC_SetDate+0x4c>
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	785b      	ldrb	r3, [r3, #1]
 800f4fe:	f003 0310 	and.w	r3, r3, #16
 800f502:	2b00      	cmp	r3, #0
 800f504:	d008      	beq.n	800f518 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	785b      	ldrb	r3, [r3, #1]
 800f50a:	f023 0310 	bic.w	r3, r3, #16
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	330a      	adds	r3, #10
 800f512:	b2da      	uxtb	r2, r3
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d11c      	bne.n	800f558 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	78db      	ldrb	r3, [r3, #3]
 800f522:	4618      	mov	r0, r3
 800f524:	f000 f91c 	bl	800f760 <RTC_ByteToBcd2>
 800f528:	4603      	mov	r3, r0
 800f52a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	785b      	ldrb	r3, [r3, #1]
 800f530:	4618      	mov	r0, r3
 800f532:	f000 f915 	bl	800f760 <RTC_ByteToBcd2>
 800f536:	4603      	mov	r3, r0
 800f538:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f53a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	789b      	ldrb	r3, [r3, #2]
 800f540:	4618      	mov	r0, r3
 800f542:	f000 f90d 	bl	800f760 <RTC_ByteToBcd2>
 800f546:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f548:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f552:	4313      	orrs	r3, r2
 800f554:	617b      	str	r3, [r7, #20]
 800f556:	e00e      	b.n	800f576 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	78db      	ldrb	r3, [r3, #3]
 800f55c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	785b      	ldrb	r3, [r3, #1]
 800f562:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f564:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800f566:	68ba      	ldr	r2, [r7, #8]
 800f568:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800f56a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f572:	4313      	orrs	r3, r2
 800f574:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	22ca      	movs	r2, #202	; 0xca
 800f57c:	625a      	str	r2, [r3, #36]	; 0x24
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2253      	movs	r2, #83	; 0x53
 800f584:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f586:	68f8      	ldr	r0, [r7, #12]
 800f588:	f000 f8be 	bl	800f708 <RTC_EnterInitMode>
 800f58c:	4603      	mov	r3, r0
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d00b      	beq.n	800f5aa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	22ff      	movs	r2, #255	; 0xff
 800f598:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2204      	movs	r2, #4
 800f59e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	e033      	b.n	800f612 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f5b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f5b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	68da      	ldr	r2, [r3, #12]
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f5c8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	f003 0320 	and.w	r3, r3, #32
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d111      	bne.n	800f5fc <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f000 f86d 	bl	800f6b8 <HAL_RTC_WaitForSynchro>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d00b      	beq.n	800f5fc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	22ff      	movs	r2, #255	; 0xff
 800f5ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2204      	movs	r2, #4
 800f5f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	e00a      	b.n	800f612 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	22ff      	movs	r2, #255	; 0xff
 800f602:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2201      	movs	r2, #1
 800f608:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2200      	movs	r2, #0
 800f60e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800f610:	2300      	movs	r3, #0
  }
}
 800f612:	4618      	mov	r0, r3
 800f614:	371c      	adds	r7, #28
 800f616:	46bd      	mov	sp, r7
 800f618:	bd90      	pop	{r4, r7, pc}

0800f61a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b086      	sub	sp, #24
 800f61e:	af00      	add	r7, sp, #0
 800f620:	60f8      	str	r0, [r7, #12]
 800f622:	60b9      	str	r1, [r7, #8]
 800f624:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800f626:	2300      	movs	r3, #0
 800f628:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f634:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f638:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	0c1b      	lsrs	r3, r3, #16
 800f63e:	b2da      	uxtb	r2, r3
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	0a1b      	lsrs	r3, r3, #8
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	f003 031f 	and.w	r3, r3, #31
 800f64e:	b2da      	uxtb	r2, r3
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	b2db      	uxtb	r3, r3
 800f658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f65c:	b2da      	uxtb	r2, r3
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	0b5b      	lsrs	r3, r3, #13
 800f666:	b2db      	uxtb	r3, r3
 800f668:	f003 0307 	and.w	r3, r3, #7
 800f66c:	b2da      	uxtb	r2, r3
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d11a      	bne.n	800f6ae <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	78db      	ldrb	r3, [r3, #3]
 800f67c:	4618      	mov	r0, r3
 800f67e:	f000 f88d 	bl	800f79c <RTC_Bcd2ToByte>
 800f682:	4603      	mov	r3, r0
 800f684:	461a      	mov	r2, r3
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	785b      	ldrb	r3, [r3, #1]
 800f68e:	4618      	mov	r0, r3
 800f690:	f000 f884 	bl	800f79c <RTC_Bcd2ToByte>
 800f694:	4603      	mov	r3, r0
 800f696:	461a      	mov	r2, r3
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	789b      	ldrb	r3, [r3, #2]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f000 f87b 	bl	800f79c <RTC_Bcd2ToByte>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800f6ae:	2300      	movs	r3, #0
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3718      	adds	r7, #24
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	68da      	ldr	r2, [r3, #12]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800f6d2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800f6d4:	f7f9 f884 	bl	80087e0 <HAL_GetTick>
 800f6d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800f6da:	e009      	b.n	800f6f0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f6dc:	f7f9 f880 	bl	80087e0 <HAL_GetTick>
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	1ad3      	subs	r3, r2, r3
 800f6e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f6ea:	d901      	bls.n	800f6f0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800f6ec:	2303      	movs	r3, #3
 800f6ee:	e007      	b.n	800f700 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	f003 0320 	and.w	r3, r3, #32
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d0ee      	beq.n	800f6dc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800f6fe:	2300      	movs	r3, #0
}
 800f700:	4618      	mov	r0, r3
 800f702:	3710      	adds	r7, #16
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b084      	sub	sp, #16
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f710:	2300      	movs	r3, #0
 800f712:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d119      	bne.n	800f756 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f04f 32ff 	mov.w	r2, #4294967295
 800f72a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f72c:	f7f9 f858 	bl	80087e0 <HAL_GetTick>
 800f730:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f732:	e009      	b.n	800f748 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f734:	f7f9 f854 	bl	80087e0 <HAL_GetTick>
 800f738:	4602      	mov	r2, r0
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	1ad3      	subs	r3, r2, r3
 800f73e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f742:	d901      	bls.n	800f748 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800f744:	2303      	movs	r3, #3
 800f746:	e007      	b.n	800f758 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	68db      	ldr	r3, [r3, #12]
 800f74e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f752:	2b00      	cmp	r3, #0
 800f754:	d0ee      	beq.n	800f734 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800f756:	2300      	movs	r3, #0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3710      	adds	r7, #16
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800f760:	b480      	push	{r7}
 800f762:	b085      	sub	sp, #20
 800f764:	af00      	add	r7, sp, #0
 800f766:	4603      	mov	r3, r0
 800f768:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800f76a:	2300      	movs	r3, #0
 800f76c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800f76e:	e005      	b.n	800f77c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	3301      	adds	r3, #1
 800f774:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800f776:	79fb      	ldrb	r3, [r7, #7]
 800f778:	3b0a      	subs	r3, #10
 800f77a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800f77c:	79fb      	ldrb	r3, [r7, #7]
 800f77e:	2b09      	cmp	r3, #9
 800f780:	d8f6      	bhi.n	800f770 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	b2db      	uxtb	r3, r3
 800f786:	011b      	lsls	r3, r3, #4
 800f788:	b2da      	uxtb	r2, r3
 800f78a:	79fb      	ldrb	r3, [r7, #7]
 800f78c:	4313      	orrs	r3, r2
 800f78e:	b2db      	uxtb	r3, r3
}
 800f790:	4618      	mov	r0, r3
 800f792:	3714      	adds	r7, #20
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr

0800f79c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800f79c:	b480      	push	{r7}
 800f79e:	b085      	sub	sp, #20
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800f7aa:	79fb      	ldrb	r3, [r7, #7]
 800f7ac:	091b      	lsrs	r3, r3, #4
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	4613      	mov	r3, r2
 800f7b4:	009b      	lsls	r3, r3, #2
 800f7b6:	4413      	add	r3, r2
 800f7b8:	005b      	lsls	r3, r3, #1
 800f7ba:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 800f7bc:	79fb      	ldrb	r3, [r7, #7]
 800f7be:	f003 030f 	and.w	r3, r3, #15
 800f7c2:	b2da      	uxtb	r2, r3
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	4413      	add	r3, r2
 800f7ca:	b2db      	uxtb	r3, r3
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3714      	adds	r7, #20
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr

0800f7d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d101      	bne.n	800f7ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	e09d      	b.n	800f926 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d108      	bne.n	800f804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	685b      	ldr	r3, [r3, #4]
 800f7f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f7fa:	d009      	beq.n	800f810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2200      	movs	r2, #0
 800f800:	61da      	str	r2, [r3, #28]
 800f802:	e005      	b.n	800f810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2200      	movs	r2, #0
 800f808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2200      	movs	r2, #0
 800f80e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2200      	movs	r2, #0
 800f814:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d106      	bne.n	800f830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f7f6 ff9e 	bl	800676c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2202      	movs	r2, #2
 800f834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f846:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f850:	d902      	bls.n	800f858 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f852:	2300      	movs	r3, #0
 800f854:	60fb      	str	r3, [r7, #12]
 800f856:	e002      	b.n	800f85e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f85c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	68db      	ldr	r3, [r3, #12]
 800f862:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800f866:	d007      	beq.n	800f878 <HAL_SPI_Init+0xa0>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f870:	d002      	beq.n	800f878 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2200      	movs	r2, #0
 800f876:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	689b      	ldr	r3, [r3, #8]
 800f884:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f888:	431a      	orrs	r2, r3
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	691b      	ldr	r3, [r3, #16]
 800f88e:	f003 0302 	and.w	r3, r3, #2
 800f892:	431a      	orrs	r2, r3
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	695b      	ldr	r3, [r3, #20]
 800f898:	f003 0301 	and.w	r3, r3, #1
 800f89c:	431a      	orrs	r2, r3
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	699b      	ldr	r3, [r3, #24]
 800f8a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f8a6:	431a      	orrs	r2, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	69db      	ldr	r3, [r3, #28]
 800f8ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f8b0:	431a      	orrs	r2, r3
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6a1b      	ldr	r3, [r3, #32]
 800f8b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8ba:	ea42 0103 	orr.w	r1, r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	430a      	orrs	r2, r1
 800f8cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	699b      	ldr	r3, [r3, #24]
 800f8d2:	0c1b      	lsrs	r3, r3, #16
 800f8d4:	f003 0204 	and.w	r2, r3, #4
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8dc:	f003 0310 	and.w	r3, r3, #16
 800f8e0:	431a      	orrs	r2, r3
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8e6:	f003 0308 	and.w	r3, r3, #8
 800f8ea:	431a      	orrs	r2, r3
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f8f4:	ea42 0103 	orr.w	r1, r2, r3
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	430a      	orrs	r2, r1
 800f904:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	69da      	ldr	r2, [r3, #28]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f914:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2200      	movs	r2, #0
 800f91a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2201      	movs	r2, #1
 800f920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800f924:	2300      	movs	r3, #0
}
 800f926:	4618      	mov	r0, r3
 800f928:	3710      	adds	r7, #16
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}

0800f92e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f92e:	b580      	push	{r7, lr}
 800f930:	b082      	sub	sp, #8
 800f932:	af00      	add	r7, sp, #0
 800f934:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d101      	bne.n	800f940 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f93c:	2301      	movs	r3, #1
 800f93e:	e049      	b.n	800f9d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f946:	b2db      	uxtb	r3, r3
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d106      	bne.n	800f95a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2200      	movs	r2, #0
 800f950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f000 f841 	bl	800f9dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2202      	movs	r2, #2
 800f95e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	3304      	adds	r3, #4
 800f96a:	4619      	mov	r1, r3
 800f96c:	4610      	mov	r0, r2
 800f96e:	f000 f9f1 	bl	800fd54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2201      	movs	r2, #1
 800f976:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2201      	movs	r2, #1
 800f97e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2201      	movs	r2, #1
 800f986:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2201      	movs	r2, #1
 800f98e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2201      	movs	r2, #1
 800f996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2201      	movs	r2, #1
 800f99e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2201      	movs	r2, #1
 800f9be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2201      	movs	r2, #1
 800f9c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2201      	movs	r2, #1
 800f9ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f9d2:	2300      	movs	r3, #0
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3708      	adds	r7, #8
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800f9e4:	bf00      	nop
 800f9e6:	370c      	adds	r7, #12
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b085      	sub	sp, #20
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d001      	beq.n	800fa08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fa04:	2301      	movs	r3, #1
 800fa06:	e04a      	b.n	800fa9e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2202      	movs	r2, #2
 800fa0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	68da      	ldr	r2, [r3, #12]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f042 0201 	orr.w	r2, r2, #1
 800fa1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	4a21      	ldr	r2, [pc, #132]	; (800faac <HAL_TIM_Base_Start_IT+0xbc>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d018      	beq.n	800fa5c <HAL_TIM_Base_Start_IT+0x6c>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa32:	d013      	beq.n	800fa5c <HAL_TIM_Base_Start_IT+0x6c>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4a1d      	ldr	r2, [pc, #116]	; (800fab0 <HAL_TIM_Base_Start_IT+0xc0>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d00e      	beq.n	800fa5c <HAL_TIM_Base_Start_IT+0x6c>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	4a1c      	ldr	r2, [pc, #112]	; (800fab4 <HAL_TIM_Base_Start_IT+0xc4>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d009      	beq.n	800fa5c <HAL_TIM_Base_Start_IT+0x6c>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	4a1a      	ldr	r2, [pc, #104]	; (800fab8 <HAL_TIM_Base_Start_IT+0xc8>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d004      	beq.n	800fa5c <HAL_TIM_Base_Start_IT+0x6c>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a19      	ldr	r2, [pc, #100]	; (800fabc <HAL_TIM_Base_Start_IT+0xcc>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d115      	bne.n	800fa88 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	689a      	ldr	r2, [r3, #8]
 800fa62:	4b17      	ldr	r3, [pc, #92]	; (800fac0 <HAL_TIM_Base_Start_IT+0xd0>)
 800fa64:	4013      	ands	r3, r2
 800fa66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	2b06      	cmp	r3, #6
 800fa6c:	d015      	beq.n	800fa9a <HAL_TIM_Base_Start_IT+0xaa>
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa74:	d011      	beq.n	800fa9a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f042 0201 	orr.w	r2, r2, #1
 800fa84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa86:	e008      	b.n	800fa9a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f042 0201 	orr.w	r2, r2, #1
 800fa96:	601a      	str	r2, [r3, #0]
 800fa98:	e000      	b.n	800fa9c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fa9c:	2300      	movs	r3, #0
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3714      	adds	r7, #20
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop
 800faac:	40012c00 	.word	0x40012c00
 800fab0:	40000400 	.word	0x40000400
 800fab4:	40000800 	.word	0x40000800
 800fab8:	40013400 	.word	0x40013400
 800fabc:	40014000 	.word	0x40014000
 800fac0:	00010007 	.word	0x00010007

0800fac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	691b      	ldr	r3, [r3, #16]
 800fad2:	f003 0302 	and.w	r3, r3, #2
 800fad6:	2b02      	cmp	r3, #2
 800fad8:	d122      	bne.n	800fb20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	68db      	ldr	r3, [r3, #12]
 800fae0:	f003 0302 	and.w	r3, r3, #2
 800fae4:	2b02      	cmp	r3, #2
 800fae6:	d11b      	bne.n	800fb20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	f06f 0202 	mvn.w	r2, #2
 800faf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2201      	movs	r2, #1
 800faf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	699b      	ldr	r3, [r3, #24]
 800fafe:	f003 0303 	and.w	r3, r3, #3
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d003      	beq.n	800fb0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f000 f905 	bl	800fd16 <HAL_TIM_IC_CaptureCallback>
 800fb0c:	e005      	b.n	800fb1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 f8f7 	bl	800fd02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f000 f908 	bl	800fd2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	691b      	ldr	r3, [r3, #16]
 800fb26:	f003 0304 	and.w	r3, r3, #4
 800fb2a:	2b04      	cmp	r3, #4
 800fb2c:	d122      	bne.n	800fb74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	f003 0304 	and.w	r3, r3, #4
 800fb38:	2b04      	cmp	r3, #4
 800fb3a:	d11b      	bne.n	800fb74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	f06f 0204 	mvn.w	r2, #4
 800fb44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2202      	movs	r2, #2
 800fb4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	699b      	ldr	r3, [r3, #24]
 800fb52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d003      	beq.n	800fb62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f000 f8db 	bl	800fd16 <HAL_TIM_IC_CaptureCallback>
 800fb60:	e005      	b.n	800fb6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 f8cd 	bl	800fd02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f000 f8de 	bl	800fd2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2200      	movs	r2, #0
 800fb72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	691b      	ldr	r3, [r3, #16]
 800fb7a:	f003 0308 	and.w	r3, r3, #8
 800fb7e:	2b08      	cmp	r3, #8
 800fb80:	d122      	bne.n	800fbc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	68db      	ldr	r3, [r3, #12]
 800fb88:	f003 0308 	and.w	r3, r3, #8
 800fb8c:	2b08      	cmp	r3, #8
 800fb8e:	d11b      	bne.n	800fbc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	f06f 0208 	mvn.w	r2, #8
 800fb98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2204      	movs	r2, #4
 800fb9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	69db      	ldr	r3, [r3, #28]
 800fba6:	f003 0303 	and.w	r3, r3, #3
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d003      	beq.n	800fbb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f000 f8b1 	bl	800fd16 <HAL_TIM_IC_CaptureCallback>
 800fbb4:	e005      	b.n	800fbc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f000 f8a3 	bl	800fd02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f000 f8b4 	bl	800fd2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	691b      	ldr	r3, [r3, #16]
 800fbce:	f003 0310 	and.w	r3, r3, #16
 800fbd2:	2b10      	cmp	r3, #16
 800fbd4:	d122      	bne.n	800fc1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	f003 0310 	and.w	r3, r3, #16
 800fbe0:	2b10      	cmp	r3, #16
 800fbe2:	d11b      	bne.n	800fc1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f06f 0210 	mvn.w	r2, #16
 800fbec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2208      	movs	r2, #8
 800fbf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	69db      	ldr	r3, [r3, #28]
 800fbfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d003      	beq.n	800fc0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f000 f887 	bl	800fd16 <HAL_TIM_IC_CaptureCallback>
 800fc08:	e005      	b.n	800fc16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 f879 	bl	800fd02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f000 f88a 	bl	800fd2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	691b      	ldr	r3, [r3, #16]
 800fc22:	f003 0301 	and.w	r3, r3, #1
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	d10e      	bne.n	800fc48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	68db      	ldr	r3, [r3, #12]
 800fc30:	f003 0301 	and.w	r3, r3, #1
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d107      	bne.n	800fc48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f06f 0201 	mvn.w	r2, #1
 800fc40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f7f3 fe08 	bl	8003858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	691b      	ldr	r3, [r3, #16]
 800fc4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc52:	2b80      	cmp	r3, #128	; 0x80
 800fc54:	d10e      	bne.n	800fc74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc60:	2b80      	cmp	r3, #128	; 0x80
 800fc62:	d107      	bne.n	800fc74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fc6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 f90a 	bl	800fe88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	691b      	ldr	r3, [r3, #16]
 800fc7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc82:	d10e      	bne.n	800fca2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	68db      	ldr	r3, [r3, #12]
 800fc8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc8e:	2b80      	cmp	r3, #128	; 0x80
 800fc90:	d107      	bne.n	800fca2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fc9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f000 f8fd 	bl	800fe9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	691b      	ldr	r3, [r3, #16]
 800fca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcac:	2b40      	cmp	r3, #64	; 0x40
 800fcae:	d10e      	bne.n	800fcce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	68db      	ldr	r3, [r3, #12]
 800fcb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcba:	2b40      	cmp	r3, #64	; 0x40
 800fcbc:	d107      	bne.n	800fcce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fcc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f000 f838 	bl	800fd3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	f003 0320 	and.w	r3, r3, #32
 800fcd8:	2b20      	cmp	r3, #32
 800fcda:	d10e      	bne.n	800fcfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	f003 0320 	and.w	r3, r3, #32
 800fce6:	2b20      	cmp	r3, #32
 800fce8:	d107      	bne.n	800fcfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f06f 0220 	mvn.w	r2, #32
 800fcf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f000 f8bd 	bl	800fe74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fcfa:	bf00      	nop
 800fcfc:	3708      	adds	r7, #8
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}

0800fd02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fd02:	b480      	push	{r7}
 800fd04:	b083      	sub	sp, #12
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fd0a:	bf00      	nop
 800fd0c:	370c      	adds	r7, #12
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr

0800fd16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fd16:	b480      	push	{r7}
 800fd18:	b083      	sub	sp, #12
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fd1e:	bf00      	nop
 800fd20:	370c      	adds	r7, #12
 800fd22:	46bd      	mov	sp, r7
 800fd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd28:	4770      	bx	lr

0800fd2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fd2a:	b480      	push	{r7}
 800fd2c:	b083      	sub	sp, #12
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fd32:	bf00      	nop
 800fd34:	370c      	adds	r7, #12
 800fd36:	46bd      	mov	sp, r7
 800fd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3c:	4770      	bx	lr

0800fd3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fd3e:	b480      	push	{r7}
 800fd40:	b083      	sub	sp, #12
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fd46:	bf00      	nop
 800fd48:	370c      	adds	r7, #12
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr
	...

0800fd54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b085      	sub	sp, #20
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	4a3c      	ldr	r2, [pc, #240]	; (800fe58 <TIM_Base_SetConfig+0x104>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d00f      	beq.n	800fd8c <TIM_Base_SetConfig+0x38>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd72:	d00b      	beq.n	800fd8c <TIM_Base_SetConfig+0x38>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4a39      	ldr	r2, [pc, #228]	; (800fe5c <TIM_Base_SetConfig+0x108>)
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d007      	beq.n	800fd8c <TIM_Base_SetConfig+0x38>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	4a38      	ldr	r2, [pc, #224]	; (800fe60 <TIM_Base_SetConfig+0x10c>)
 800fd80:	4293      	cmp	r3, r2
 800fd82:	d003      	beq.n	800fd8c <TIM_Base_SetConfig+0x38>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	4a37      	ldr	r2, [pc, #220]	; (800fe64 <TIM_Base_SetConfig+0x110>)
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d108      	bne.n	800fd9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	68fa      	ldr	r2, [r7, #12]
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	4a2d      	ldr	r2, [pc, #180]	; (800fe58 <TIM_Base_SetConfig+0x104>)
 800fda2:	4293      	cmp	r3, r2
 800fda4:	d01b      	beq.n	800fdde <TIM_Base_SetConfig+0x8a>
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdac:	d017      	beq.n	800fdde <TIM_Base_SetConfig+0x8a>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4a2a      	ldr	r2, [pc, #168]	; (800fe5c <TIM_Base_SetConfig+0x108>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d013      	beq.n	800fdde <TIM_Base_SetConfig+0x8a>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4a29      	ldr	r2, [pc, #164]	; (800fe60 <TIM_Base_SetConfig+0x10c>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d00f      	beq.n	800fdde <TIM_Base_SetConfig+0x8a>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	4a28      	ldr	r2, [pc, #160]	; (800fe64 <TIM_Base_SetConfig+0x110>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d00b      	beq.n	800fdde <TIM_Base_SetConfig+0x8a>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	4a27      	ldr	r2, [pc, #156]	; (800fe68 <TIM_Base_SetConfig+0x114>)
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d007      	beq.n	800fdde <TIM_Base_SetConfig+0x8a>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4a26      	ldr	r2, [pc, #152]	; (800fe6c <TIM_Base_SetConfig+0x118>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d003      	beq.n	800fdde <TIM_Base_SetConfig+0x8a>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	4a25      	ldr	r2, [pc, #148]	; (800fe70 <TIM_Base_SetConfig+0x11c>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d108      	bne.n	800fdf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fde4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	68db      	ldr	r3, [r3, #12]
 800fdea:	68fa      	ldr	r2, [r7, #12]
 800fdec:	4313      	orrs	r3, r2
 800fdee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	695b      	ldr	r3, [r3, #20]
 800fdfa:	4313      	orrs	r3, r2
 800fdfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	68fa      	ldr	r2, [r7, #12]
 800fe02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	689a      	ldr	r2, [r3, #8]
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	4a10      	ldr	r2, [pc, #64]	; (800fe58 <TIM_Base_SetConfig+0x104>)
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	d00f      	beq.n	800fe3c <TIM_Base_SetConfig+0xe8>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	4a11      	ldr	r2, [pc, #68]	; (800fe64 <TIM_Base_SetConfig+0x110>)
 800fe20:	4293      	cmp	r3, r2
 800fe22:	d00b      	beq.n	800fe3c <TIM_Base_SetConfig+0xe8>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	4a10      	ldr	r2, [pc, #64]	; (800fe68 <TIM_Base_SetConfig+0x114>)
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d007      	beq.n	800fe3c <TIM_Base_SetConfig+0xe8>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	4a0f      	ldr	r2, [pc, #60]	; (800fe6c <TIM_Base_SetConfig+0x118>)
 800fe30:	4293      	cmp	r3, r2
 800fe32:	d003      	beq.n	800fe3c <TIM_Base_SetConfig+0xe8>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	4a0e      	ldr	r2, [pc, #56]	; (800fe70 <TIM_Base_SetConfig+0x11c>)
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	d103      	bne.n	800fe44 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	691a      	ldr	r2, [r3, #16]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2201      	movs	r2, #1
 800fe48:	615a      	str	r2, [r3, #20]
}
 800fe4a:	bf00      	nop
 800fe4c:	3714      	adds	r7, #20
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe54:	4770      	bx	lr
 800fe56:	bf00      	nop
 800fe58:	40012c00 	.word	0x40012c00
 800fe5c:	40000400 	.word	0x40000400
 800fe60:	40000800 	.word	0x40000800
 800fe64:	40013400 	.word	0x40013400
 800fe68:	40014000 	.word	0x40014000
 800fe6c:	40014400 	.word	0x40014400
 800fe70:	40014800 	.word	0x40014800

0800fe74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fe7c:	bf00      	nop
 800fe7e:	370c      	adds	r7, #12
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr

0800fe88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b083      	sub	sp, #12
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fe90:	bf00      	nop
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fea4:	bf00      	nop
 800fea6:	370c      	adds	r7, #12
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr

0800feb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b085      	sub	sp, #20
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2200      	movs	r2, #0
 800febc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fec0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800fec4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	b29a      	uxth	r2, r3
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fed0:	2300      	movs	r3, #0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3714      	adds	r7, #20
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr

0800fede <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800fede:	b480      	push	{r7}
 800fee0:	b085      	sub	sp, #20
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fee6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800feea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800fef2:	b29a      	uxth	r2, r3
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	43db      	mvns	r3, r3
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	4013      	ands	r3, r2
 800fefe:	b29a      	uxth	r2, r3
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ff06:	2300      	movs	r3, #0
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3714      	adds	r7, #20
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr

0800ff14 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ff14:	b084      	sub	sp, #16
 800ff16:	b480      	push	{r7}
 800ff18:	b083      	sub	sp, #12
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
 800ff1e:	f107 0014 	add.w	r0, r7, #20
 800ff22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2201      	movs	r2, #1
 800ff2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2200      	movs	r2, #0
 800ff32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ff46:	2300      	movs	r3, #0
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	b004      	add	sp, #16
 800ff54:	4770      	bx	lr
	...

0800ff58 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b09d      	sub	sp, #116	; 0x74
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ff62:	2300      	movs	r3, #0
 800ff64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	009b      	lsls	r3, r3, #2
 800ff70:	4413      	add	r3, r2
 800ff72:	881b      	ldrh	r3, [r3, #0]
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ff7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff7e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	78db      	ldrb	r3, [r3, #3]
 800ff86:	2b03      	cmp	r3, #3
 800ff88:	d81f      	bhi.n	800ffca <USB_ActivateEndpoint+0x72>
 800ff8a:	a201      	add	r2, pc, #4	; (adr r2, 800ff90 <USB_ActivateEndpoint+0x38>)
 800ff8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff90:	0800ffa1 	.word	0x0800ffa1
 800ff94:	0800ffbd 	.word	0x0800ffbd
 800ff98:	0800ffd3 	.word	0x0800ffd3
 800ff9c:	0800ffaf 	.word	0x0800ffaf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ffa0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ffa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ffa8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ffac:	e012      	b.n	800ffd4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ffae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ffb2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800ffb6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ffba:	e00b      	b.n	800ffd4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ffbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ffc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ffc4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ffc8:	e004      	b.n	800ffd4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800ffd0:	e000      	b.n	800ffd4 <USB_ActivateEndpoint+0x7c>
      break;
 800ffd2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	009b      	lsls	r3, r3, #2
 800ffdc:	441a      	add	r2, r3
 800ffde:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ffe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	009b      	lsls	r3, r3, #2
 800fffe:	4413      	add	r3, r2
 8010000:	881b      	ldrh	r3, [r3, #0]
 8010002:	b29b      	uxth	r3, r3
 8010004:	b21b      	sxth	r3, r3
 8010006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801000a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801000e:	b21a      	sxth	r2, r3
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	b21b      	sxth	r3, r3
 8010016:	4313      	orrs	r3, r2
 8010018:	b21b      	sxth	r3, r3
 801001a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	009b      	lsls	r3, r3, #2
 8010026:	441a      	add	r2, r3
 8010028:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801002c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801003c:	b29b      	uxth	r3, r3
 801003e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	7b1b      	ldrb	r3, [r3, #12]
 8010044:	2b00      	cmp	r3, #0
 8010046:	f040 8149 	bne.w	80102dc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	785b      	ldrb	r3, [r3, #1]
 801004e:	2b00      	cmp	r3, #0
 8010050:	f000 8084 	beq.w	801015c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	61bb      	str	r3, [r7, #24]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801005e:	b29b      	uxth	r3, r3
 8010060:	461a      	mov	r2, r3
 8010062:	69bb      	ldr	r3, [r7, #24]
 8010064:	4413      	add	r3, r2
 8010066:	61bb      	str	r3, [r7, #24]
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	781b      	ldrb	r3, [r3, #0]
 801006c:	011a      	lsls	r2, r3, #4
 801006e:	69bb      	ldr	r3, [r7, #24]
 8010070:	4413      	add	r3, r2
 8010072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010076:	617b      	str	r3, [r7, #20]
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	88db      	ldrh	r3, [r3, #6]
 801007c:	085b      	lsrs	r3, r3, #1
 801007e:	b29b      	uxth	r3, r3
 8010080:	005b      	lsls	r3, r3, #1
 8010082:	b29a      	uxth	r2, r3
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	4413      	add	r3, r2
 8010092:	881b      	ldrh	r3, [r3, #0]
 8010094:	827b      	strh	r3, [r7, #18]
 8010096:	8a7b      	ldrh	r3, [r7, #18]
 8010098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801009c:	2b00      	cmp	r3, #0
 801009e:	d01b      	beq.n	80100d8 <USB_ActivateEndpoint+0x180>
 80100a0:	687a      	ldr	r2, [r7, #4]
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	4413      	add	r3, r2
 80100aa:	881b      	ldrh	r3, [r3, #0]
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100b6:	823b      	strh	r3, [r7, #16]
 80100b8:	687a      	ldr	r2, [r7, #4]
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	441a      	add	r2, r3
 80100c2:	8a3b      	ldrh	r3, [r7, #16]
 80100c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	78db      	ldrb	r3, [r3, #3]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d020      	beq.n	8010122 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	009b      	lsls	r3, r3, #2
 80100e8:	4413      	add	r3, r2
 80100ea:	881b      	ldrh	r3, [r3, #0]
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100f6:	81bb      	strh	r3, [r7, #12]
 80100f8:	89bb      	ldrh	r3, [r7, #12]
 80100fa:	f083 0320 	eor.w	r3, r3, #32
 80100fe:	81bb      	strh	r3, [r7, #12]
 8010100:	687a      	ldr	r2, [r7, #4]
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	009b      	lsls	r3, r3, #2
 8010108:	441a      	add	r2, r3
 801010a:	89bb      	ldrh	r3, [r7, #12]
 801010c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801011c:	b29b      	uxth	r3, r3
 801011e:	8013      	strh	r3, [r2, #0]
 8010120:	e2a6      	b.n	8010670 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010122:	687a      	ldr	r2, [r7, #4]
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	781b      	ldrb	r3, [r3, #0]
 8010128:	009b      	lsls	r3, r3, #2
 801012a:	4413      	add	r3, r2
 801012c:	881b      	ldrh	r3, [r3, #0]
 801012e:	b29b      	uxth	r3, r3
 8010130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010138:	81fb      	strh	r3, [r7, #14]
 801013a:	687a      	ldr	r2, [r7, #4]
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	441a      	add	r2, r3
 8010144:	89fb      	ldrh	r3, [r7, #14]
 8010146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801014a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801014e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010156:	b29b      	uxth	r3, r3
 8010158:	8013      	strh	r3, [r2, #0]
 801015a:	e289      	b.n	8010670 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	633b      	str	r3, [r7, #48]	; 0x30
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010166:	b29b      	uxth	r3, r3
 8010168:	461a      	mov	r2, r3
 801016a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801016c:	4413      	add	r3, r2
 801016e:	633b      	str	r3, [r7, #48]	; 0x30
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	011a      	lsls	r2, r3, #4
 8010176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010178:	4413      	add	r3, r2
 801017a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801017e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	88db      	ldrh	r3, [r3, #6]
 8010184:	085b      	lsrs	r3, r3, #1
 8010186:	b29b      	uxth	r3, r3
 8010188:	005b      	lsls	r3, r3, #1
 801018a:	b29a      	uxth	r2, r3
 801018c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	62bb      	str	r3, [r7, #40]	; 0x28
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801019a:	b29b      	uxth	r3, r3
 801019c:	461a      	mov	r2, r3
 801019e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a0:	4413      	add	r3, r2
 80101a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	011a      	lsls	r2, r3, #4
 80101aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ac:	4413      	add	r3, r2
 80101ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80101b2:	627b      	str	r3, [r7, #36]	; 0x24
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	691b      	ldr	r3, [r3, #16]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d112      	bne.n	80101e2 <USB_ActivateEndpoint+0x28a>
 80101bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80101c6:	b29a      	uxth	r2, r3
 80101c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ca:	801a      	strh	r2, [r3, #0]
 80101cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ce:	881b      	ldrh	r3, [r3, #0]
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80101d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80101da:	b29a      	uxth	r2, r3
 80101dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101de:	801a      	strh	r2, [r3, #0]
 80101e0:	e02f      	b.n	8010242 <USB_ActivateEndpoint+0x2ea>
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	691b      	ldr	r3, [r3, #16]
 80101e6:	2b3e      	cmp	r3, #62	; 0x3e
 80101e8:	d813      	bhi.n	8010212 <USB_ActivateEndpoint+0x2ba>
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	691b      	ldr	r3, [r3, #16]
 80101ee:	085b      	lsrs	r3, r3, #1
 80101f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	691b      	ldr	r3, [r3, #16]
 80101f6:	f003 0301 	and.w	r3, r3, #1
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d002      	beq.n	8010204 <USB_ActivateEndpoint+0x2ac>
 80101fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010200:	3301      	adds	r3, #1
 8010202:	66bb      	str	r3, [r7, #104]	; 0x68
 8010204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010206:	b29b      	uxth	r3, r3
 8010208:	029b      	lsls	r3, r3, #10
 801020a:	b29a      	uxth	r2, r3
 801020c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020e:	801a      	strh	r2, [r3, #0]
 8010210:	e017      	b.n	8010242 <USB_ActivateEndpoint+0x2ea>
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	691b      	ldr	r3, [r3, #16]
 8010216:	095b      	lsrs	r3, r3, #5
 8010218:	66bb      	str	r3, [r7, #104]	; 0x68
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	691b      	ldr	r3, [r3, #16]
 801021e:	f003 031f 	and.w	r3, r3, #31
 8010222:	2b00      	cmp	r3, #0
 8010224:	d102      	bne.n	801022c <USB_ActivateEndpoint+0x2d4>
 8010226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010228:	3b01      	subs	r3, #1
 801022a:	66bb      	str	r3, [r7, #104]	; 0x68
 801022c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801022e:	b29b      	uxth	r3, r3
 8010230:	029b      	lsls	r3, r3, #10
 8010232:	b29b      	uxth	r3, r3
 8010234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801023c:	b29a      	uxth	r2, r3
 801023e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010240:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010242:	687a      	ldr	r2, [r7, #4]
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	781b      	ldrb	r3, [r3, #0]
 8010248:	009b      	lsls	r3, r3, #2
 801024a:	4413      	add	r3, r2
 801024c:	881b      	ldrh	r3, [r3, #0]
 801024e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010250:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010256:	2b00      	cmp	r3, #0
 8010258:	d01b      	beq.n	8010292 <USB_ActivateEndpoint+0x33a>
 801025a:	687a      	ldr	r2, [r7, #4]
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	009b      	lsls	r3, r3, #2
 8010262:	4413      	add	r3, r2
 8010264:	881b      	ldrh	r3, [r3, #0]
 8010266:	b29b      	uxth	r3, r3
 8010268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801026c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010270:	843b      	strh	r3, [r7, #32]
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	009b      	lsls	r3, r3, #2
 801027a:	441a      	add	r2, r3
 801027c:	8c3b      	ldrh	r3, [r7, #32]
 801027e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010286:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801028a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801028e:	b29b      	uxth	r3, r3
 8010290:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010292:	687a      	ldr	r2, [r7, #4]
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	4413      	add	r3, r2
 801029c:	881b      	ldrh	r3, [r3, #0]
 801029e:	b29b      	uxth	r3, r3
 80102a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80102a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102a8:	83fb      	strh	r3, [r7, #30]
 80102aa:	8bfb      	ldrh	r3, [r7, #30]
 80102ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80102b0:	83fb      	strh	r3, [r7, #30]
 80102b2:	8bfb      	ldrh	r3, [r7, #30]
 80102b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80102b8:	83fb      	strh	r3, [r7, #30]
 80102ba:	687a      	ldr	r2, [r7, #4]
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	009b      	lsls	r3, r3, #2
 80102c2:	441a      	add	r2, r3
 80102c4:	8bfb      	ldrh	r3, [r7, #30]
 80102c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102d6:	b29b      	uxth	r3, r3
 80102d8:	8013      	strh	r3, [r2, #0]
 80102da:	e1c9      	b.n	8010670 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	78db      	ldrb	r3, [r3, #3]
 80102e0:	2b02      	cmp	r3, #2
 80102e2:	d11e      	bne.n	8010322 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	009b      	lsls	r3, r3, #2
 80102ec:	4413      	add	r3, r2
 80102ee:	881b      	ldrh	r3, [r3, #0]
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102fa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	781b      	ldrb	r3, [r3, #0]
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	441a      	add	r2, r3
 8010308:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801030c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010314:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801031c:	b29b      	uxth	r3, r3
 801031e:	8013      	strh	r3, [r2, #0]
 8010320:	e01d      	b.n	801035e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	009b      	lsls	r3, r3, #2
 801032a:	4413      	add	r3, r2
 801032c:	881b      	ldrh	r3, [r3, #0]
 801032e:	b29b      	uxth	r3, r3
 8010330:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010338:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	009b      	lsls	r3, r3, #2
 8010344:	441a      	add	r2, r3
 8010346:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801034a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801034e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801035a:	b29b      	uxth	r3, r3
 801035c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010368:	b29b      	uxth	r3, r3
 801036a:	461a      	mov	r2, r3
 801036c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801036e:	4413      	add	r3, r2
 8010370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	011a      	lsls	r2, r3, #4
 8010378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801037a:	4413      	add	r3, r2
 801037c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010380:	65bb      	str	r3, [r7, #88]	; 0x58
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	891b      	ldrh	r3, [r3, #8]
 8010386:	085b      	lsrs	r3, r3, #1
 8010388:	b29b      	uxth	r3, r3
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	b29a      	uxth	r2, r3
 801038e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010390:	801a      	strh	r2, [r3, #0]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	657b      	str	r3, [r7, #84]	; 0x54
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801039c:	b29b      	uxth	r3, r3
 801039e:	461a      	mov	r2, r3
 80103a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103a2:	4413      	add	r3, r2
 80103a4:	657b      	str	r3, [r7, #84]	; 0x54
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	781b      	ldrb	r3, [r3, #0]
 80103aa:	011a      	lsls	r2, r3, #4
 80103ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103ae:	4413      	add	r3, r2
 80103b0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80103b4:	653b      	str	r3, [r7, #80]	; 0x50
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	895b      	ldrh	r3, [r3, #10]
 80103ba:	085b      	lsrs	r3, r3, #1
 80103bc:	b29b      	uxth	r3, r3
 80103be:	005b      	lsls	r3, r3, #1
 80103c0:	b29a      	uxth	r2, r3
 80103c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103c4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	785b      	ldrb	r3, [r3, #1]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	f040 8093 	bne.w	80104f6 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	4413      	add	r3, r2
 80103da:	881b      	ldrh	r3, [r3, #0]
 80103dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80103e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80103e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d01b      	beq.n	8010424 <USB_ActivateEndpoint+0x4cc>
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	009b      	lsls	r3, r3, #2
 80103f4:	4413      	add	r3, r2
 80103f6:	881b      	ldrh	r3, [r3, #0]
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010402:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010404:	687a      	ldr	r2, [r7, #4]
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	441a      	add	r2, r3
 801040e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801041c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010420:	b29b      	uxth	r3, r3
 8010422:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	4413      	add	r3, r2
 801042e:	881b      	ldrh	r3, [r3, #0]
 8010430:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010432:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010438:	2b00      	cmp	r3, #0
 801043a:	d01b      	beq.n	8010474 <USB_ActivateEndpoint+0x51c>
 801043c:	687a      	ldr	r2, [r7, #4]
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	009b      	lsls	r3, r3, #2
 8010444:	4413      	add	r3, r2
 8010446:	881b      	ldrh	r3, [r3, #0]
 8010448:	b29b      	uxth	r3, r3
 801044a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801044e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010452:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010454:	687a      	ldr	r2, [r7, #4]
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	441a      	add	r2, r3
 801045e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801046c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010470:	b29b      	uxth	r3, r3
 8010472:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010474:	687a      	ldr	r2, [r7, #4]
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	781b      	ldrb	r3, [r3, #0]
 801047a:	009b      	lsls	r3, r3, #2
 801047c:	4413      	add	r3, r2
 801047e:	881b      	ldrh	r3, [r3, #0]
 8010480:	b29b      	uxth	r3, r3
 8010482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801048a:	873b      	strh	r3, [r7, #56]	; 0x38
 801048c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801048e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010492:	873b      	strh	r3, [r7, #56]	; 0x38
 8010494:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010496:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801049a:	873b      	strh	r3, [r7, #56]	; 0x38
 801049c:	687a      	ldr	r2, [r7, #4]
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	009b      	lsls	r3, r3, #2
 80104a4:	441a      	add	r2, r3
 80104a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80104a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80104bc:	687a      	ldr	r2, [r7, #4]
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	009b      	lsls	r3, r3, #2
 80104c4:	4413      	add	r3, r2
 80104c6:	881b      	ldrh	r3, [r3, #0]
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104d2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	781b      	ldrb	r3, [r3, #0]
 80104da:	009b      	lsls	r3, r3, #2
 80104dc:	441a      	add	r2, r3
 80104de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80104e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	8013      	strh	r3, [r2, #0]
 80104f4:	e0bc      	b.n	8010670 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	4413      	add	r3, r2
 8010500:	881b      	ldrh	r3, [r3, #0]
 8010502:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8010506:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801050a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801050e:	2b00      	cmp	r3, #0
 8010510:	d01d      	beq.n	801054e <USB_ActivateEndpoint+0x5f6>
 8010512:	687a      	ldr	r2, [r7, #4]
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	4413      	add	r3, r2
 801051c:	881b      	ldrh	r3, [r3, #0]
 801051e:	b29b      	uxth	r3, r3
 8010520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010528:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 801052c:	687a      	ldr	r2, [r7, #4]
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	009b      	lsls	r3, r3, #2
 8010534:	441a      	add	r2, r3
 8010536:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801053a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801053e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801054a:	b29b      	uxth	r3, r3
 801054c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	009b      	lsls	r3, r3, #2
 8010556:	4413      	add	r3, r2
 8010558:	881b      	ldrh	r3, [r3, #0]
 801055a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801055e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8010562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010566:	2b00      	cmp	r3, #0
 8010568:	d01d      	beq.n	80105a6 <USB_ActivateEndpoint+0x64e>
 801056a:	687a      	ldr	r2, [r7, #4]
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	009b      	lsls	r3, r3, #2
 8010572:	4413      	add	r3, r2
 8010574:	881b      	ldrh	r3, [r3, #0]
 8010576:	b29b      	uxth	r3, r3
 8010578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801057c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010580:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8010584:	687a      	ldr	r2, [r7, #4]
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	441a      	add	r2, r3
 801058e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8010592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801059a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801059e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	78db      	ldrb	r3, [r3, #3]
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d024      	beq.n	80105f8 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	009b      	lsls	r3, r3, #2
 80105b6:	4413      	add	r3, r2
 80105b8:	881b      	ldrh	r3, [r3, #0]
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80105c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80105cc:	f083 0320 	eor.w	r3, r3, #32
 80105d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	781b      	ldrb	r3, [r3, #0]
 80105da:	009b      	lsls	r3, r3, #2
 80105dc:	441a      	add	r2, r3
 80105de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80105e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80105ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105f2:	b29b      	uxth	r3, r3
 80105f4:	8013      	strh	r3, [r2, #0]
 80105f6:	e01d      	b.n	8010634 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80105f8:	687a      	ldr	r2, [r7, #4]
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	781b      	ldrb	r3, [r3, #0]
 80105fe:	009b      	lsls	r3, r3, #2
 8010600:	4413      	add	r3, r2
 8010602:	881b      	ldrh	r3, [r3, #0]
 8010604:	b29b      	uxth	r3, r3
 8010606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801060a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801060e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	009b      	lsls	r3, r3, #2
 801061a:	441a      	add	r2, r3
 801061c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801062c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010630:	b29b      	uxth	r3, r3
 8010632:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	009b      	lsls	r3, r3, #2
 801063c:	4413      	add	r3, r2
 801063e:	881b      	ldrh	r3, [r3, #0]
 8010640:	b29b      	uxth	r3, r3
 8010642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801064a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801064e:	687a      	ldr	r2, [r7, #4]
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	009b      	lsls	r3, r3, #2
 8010656:	441a      	add	r2, r3
 8010658:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801065c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801066c:	b29b      	uxth	r3, r3
 801066e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8010670:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8010674:	4618      	mov	r0, r3
 8010676:	3774      	adds	r7, #116	; 0x74
 8010678:	46bd      	mov	sp, r7
 801067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067e:	4770      	bx	lr

08010680 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010680:	b480      	push	{r7}
 8010682:	b08d      	sub	sp, #52	; 0x34
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	7b1b      	ldrb	r3, [r3, #12]
 801068e:	2b00      	cmp	r3, #0
 8010690:	f040 808e 	bne.w	80107b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	785b      	ldrb	r3, [r3, #1]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d044      	beq.n	8010726 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801069c:	687a      	ldr	r2, [r7, #4]
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	009b      	lsls	r3, r3, #2
 80106a4:	4413      	add	r3, r2
 80106a6:	881b      	ldrh	r3, [r3, #0]
 80106a8:	81bb      	strh	r3, [r7, #12]
 80106aa:	89bb      	ldrh	r3, [r7, #12]
 80106ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d01b      	beq.n	80106ec <USB_DeactivateEndpoint+0x6c>
 80106b4:	687a      	ldr	r2, [r7, #4]
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	009b      	lsls	r3, r3, #2
 80106bc:	4413      	add	r3, r2
 80106be:	881b      	ldrh	r3, [r3, #0]
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80106c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106ca:	817b      	strh	r3, [r7, #10]
 80106cc:	687a      	ldr	r2, [r7, #4]
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	441a      	add	r2, r3
 80106d6:	897b      	ldrh	r3, [r7, #10]
 80106d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80106e8:	b29b      	uxth	r3, r3
 80106ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80106ec:	687a      	ldr	r2, [r7, #4]
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	781b      	ldrb	r3, [r3, #0]
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	4413      	add	r3, r2
 80106f6:	881b      	ldrh	r3, [r3, #0]
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80106fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010702:	813b      	strh	r3, [r7, #8]
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	781b      	ldrb	r3, [r3, #0]
 801070a:	009b      	lsls	r3, r3, #2
 801070c:	441a      	add	r2, r3
 801070e:	893b      	ldrh	r3, [r7, #8]
 8010710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010720:	b29b      	uxth	r3, r3
 8010722:	8013      	strh	r3, [r2, #0]
 8010724:	e192      	b.n	8010a4c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010726:	687a      	ldr	r2, [r7, #4]
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	009b      	lsls	r3, r3, #2
 801072e:	4413      	add	r3, r2
 8010730:	881b      	ldrh	r3, [r3, #0]
 8010732:	827b      	strh	r3, [r7, #18]
 8010734:	8a7b      	ldrh	r3, [r7, #18]
 8010736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801073a:	2b00      	cmp	r3, #0
 801073c:	d01b      	beq.n	8010776 <USB_DeactivateEndpoint+0xf6>
 801073e:	687a      	ldr	r2, [r7, #4]
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	781b      	ldrb	r3, [r3, #0]
 8010744:	009b      	lsls	r3, r3, #2
 8010746:	4413      	add	r3, r2
 8010748:	881b      	ldrh	r3, [r3, #0]
 801074a:	b29b      	uxth	r3, r3
 801074c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010754:	823b      	strh	r3, [r7, #16]
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	009b      	lsls	r3, r3, #2
 801075e:	441a      	add	r2, r3
 8010760:	8a3b      	ldrh	r3, [r7, #16]
 8010762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801076a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801076e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010772:	b29b      	uxth	r3, r3
 8010774:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010776:	687a      	ldr	r2, [r7, #4]
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	009b      	lsls	r3, r3, #2
 801077e:	4413      	add	r3, r2
 8010780:	881b      	ldrh	r3, [r3, #0]
 8010782:	b29b      	uxth	r3, r3
 8010784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801078c:	81fb      	strh	r3, [r7, #14]
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	009b      	lsls	r3, r3, #2
 8010796:	441a      	add	r2, r3
 8010798:	89fb      	ldrh	r3, [r7, #14]
 801079a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801079e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	8013      	strh	r3, [r2, #0]
 80107ae:	e14d      	b.n	8010a4c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	785b      	ldrb	r3, [r3, #1]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	f040 80a5 	bne.w	8010904 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	009b      	lsls	r3, r3, #2
 80107c2:	4413      	add	r3, r2
 80107c4:	881b      	ldrh	r3, [r3, #0]
 80107c6:	843b      	strh	r3, [r7, #32]
 80107c8:	8c3b      	ldrh	r3, [r7, #32]
 80107ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d01b      	beq.n	801080a <USB_DeactivateEndpoint+0x18a>
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	009b      	lsls	r3, r3, #2
 80107da:	4413      	add	r3, r2
 80107dc:	881b      	ldrh	r3, [r3, #0]
 80107de:	b29b      	uxth	r3, r3
 80107e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80107e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107e8:	83fb      	strh	r3, [r7, #30]
 80107ea:	687a      	ldr	r2, [r7, #4]
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	781b      	ldrb	r3, [r3, #0]
 80107f0:	009b      	lsls	r3, r3, #2
 80107f2:	441a      	add	r2, r3
 80107f4:	8bfb      	ldrh	r3, [r7, #30]
 80107f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010806:	b29b      	uxth	r3, r3
 8010808:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	4413      	add	r3, r2
 8010814:	881b      	ldrh	r3, [r3, #0]
 8010816:	83bb      	strh	r3, [r7, #28]
 8010818:	8bbb      	ldrh	r3, [r7, #28]
 801081a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801081e:	2b00      	cmp	r3, #0
 8010820:	d01b      	beq.n	801085a <USB_DeactivateEndpoint+0x1da>
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	009b      	lsls	r3, r3, #2
 801082a:	4413      	add	r3, r2
 801082c:	881b      	ldrh	r3, [r3, #0]
 801082e:	b29b      	uxth	r3, r3
 8010830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010838:	837b      	strh	r3, [r7, #26]
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	009b      	lsls	r3, r3, #2
 8010842:	441a      	add	r2, r3
 8010844:	8b7b      	ldrh	r3, [r7, #26]
 8010846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801084a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801084e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010852:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010856:	b29b      	uxth	r3, r3
 8010858:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	009b      	lsls	r3, r3, #2
 8010862:	4413      	add	r3, r2
 8010864:	881b      	ldrh	r3, [r3, #0]
 8010866:	b29b      	uxth	r3, r3
 8010868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801086c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010870:	833b      	strh	r3, [r7, #24]
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	009b      	lsls	r3, r3, #2
 801087a:	441a      	add	r2, r3
 801087c:	8b3b      	ldrh	r3, [r7, #24]
 801087e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801088a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801088e:	b29b      	uxth	r3, r3
 8010890:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010892:	687a      	ldr	r2, [r7, #4]
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	009b      	lsls	r3, r3, #2
 801089a:	4413      	add	r3, r2
 801089c:	881b      	ldrh	r3, [r3, #0]
 801089e:	b29b      	uxth	r3, r3
 80108a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80108a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108a8:	82fb      	strh	r3, [r7, #22]
 80108aa:	687a      	ldr	r2, [r7, #4]
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	781b      	ldrb	r3, [r3, #0]
 80108b0:	009b      	lsls	r3, r3, #2
 80108b2:	441a      	add	r2, r3
 80108b4:	8afb      	ldrh	r3, [r7, #22]
 80108b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80108ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80108be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80108c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80108ca:	687a      	ldr	r2, [r7, #4]
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	009b      	lsls	r3, r3, #2
 80108d2:	4413      	add	r3, r2
 80108d4:	881b      	ldrh	r3, [r3, #0]
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80108dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108e0:	82bb      	strh	r3, [r7, #20]
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	441a      	add	r2, r3
 80108ec:	8abb      	ldrh	r3, [r7, #20]
 80108ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80108f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80108f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80108fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108fe:	b29b      	uxth	r3, r3
 8010900:	8013      	strh	r3, [r2, #0]
 8010902:	e0a3      	b.n	8010a4c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010904:	687a      	ldr	r2, [r7, #4]
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	009b      	lsls	r3, r3, #2
 801090c:	4413      	add	r3, r2
 801090e:	881b      	ldrh	r3, [r3, #0]
 8010910:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010912:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010918:	2b00      	cmp	r3, #0
 801091a:	d01b      	beq.n	8010954 <USB_DeactivateEndpoint+0x2d4>
 801091c:	687a      	ldr	r2, [r7, #4]
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	009b      	lsls	r3, r3, #2
 8010924:	4413      	add	r3, r2
 8010926:	881b      	ldrh	r3, [r3, #0]
 8010928:	b29b      	uxth	r3, r3
 801092a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801092e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010932:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010934:	687a      	ldr	r2, [r7, #4]
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	009b      	lsls	r3, r3, #2
 801093c:	441a      	add	r2, r3
 801093e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010950:	b29b      	uxth	r3, r3
 8010952:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	009b      	lsls	r3, r3, #2
 801095c:	4413      	add	r3, r2
 801095e:	881b      	ldrh	r3, [r3, #0]
 8010960:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010962:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010968:	2b00      	cmp	r3, #0
 801096a:	d01b      	beq.n	80109a4 <USB_DeactivateEndpoint+0x324>
 801096c:	687a      	ldr	r2, [r7, #4]
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	4413      	add	r3, r2
 8010976:	881b      	ldrh	r3, [r3, #0]
 8010978:	b29b      	uxth	r3, r3
 801097a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801097e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010982:	853b      	strh	r3, [r7, #40]	; 0x28
 8010984:	687a      	ldr	r2, [r7, #4]
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	009b      	lsls	r3, r3, #2
 801098c:	441a      	add	r2, r3
 801098e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801099c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80109a4:	687a      	ldr	r2, [r7, #4]
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	4413      	add	r3, r2
 80109ae:	881b      	ldrh	r3, [r3, #0]
 80109b0:	b29b      	uxth	r3, r3
 80109b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80109b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80109bc:	687a      	ldr	r2, [r7, #4]
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	781b      	ldrb	r3, [r3, #0]
 80109c2:	009b      	lsls	r3, r3, #2
 80109c4:	441a      	add	r2, r3
 80109c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80109c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80109cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80109d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80109d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109d8:	b29b      	uxth	r3, r3
 80109da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80109dc:	687a      	ldr	r2, [r7, #4]
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	781b      	ldrb	r3, [r3, #0]
 80109e2:	009b      	lsls	r3, r3, #2
 80109e4:	4413      	add	r3, r2
 80109e6:	881b      	ldrh	r3, [r3, #0]
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80109ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80109f4:	687a      	ldr	r2, [r7, #4]
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	441a      	add	r2, r3
 80109fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010a14:	687a      	ldr	r2, [r7, #4]
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	4413      	add	r3, r2
 8010a1e:	881b      	ldrh	r3, [r3, #0]
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	441a      	add	r2, r3
 8010a36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010a4c:	2300      	movs	r3, #0
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3734      	adds	r7, #52	; 0x34
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr

08010a5a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010a5a:	b580      	push	{r7, lr}
 8010a5c:	b0c2      	sub	sp, #264	; 0x108
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a68:	6018      	str	r0, [r3, #0]
 8010a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a72:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	785b      	ldrb	r3, [r3, #1]
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	f040 867b 	bne.w	801177c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8010a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	699a      	ldr	r2, [r3, #24]
 8010a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	691b      	ldr	r3, [r3, #16]
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d908      	bls.n	8010ab4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8010aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	691b      	ldr	r3, [r3, #16]
 8010aae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010ab2:	e007      	b.n	8010ac4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8010ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	699b      	ldr	r3, [r3, #24]
 8010ac0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	7b1b      	ldrb	r3, [r3, #12]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d13a      	bne.n	8010b4a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	6959      	ldr	r1, [r3, #20]
 8010ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	88da      	ldrh	r2, [r3, #6]
 8010aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010af6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010afa:	6800      	ldr	r0, [r0, #0]
 8010afc:	f001 fc11 	bl	8012322 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	613b      	str	r3, [r7, #16]
 8010b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	4413      	add	r3, r2
 8010b22:	613b      	str	r3, [r7, #16]
 8010b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	781b      	ldrb	r3, [r3, #0]
 8010b30:	011a      	lsls	r2, r3, #4
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	4413      	add	r3, r2
 8010b36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010b3a:	60fb      	str	r3, [r7, #12]
 8010b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b40:	b29a      	uxth	r2, r3
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	801a      	strh	r2, [r3, #0]
 8010b46:	f000 bde3 	b.w	8011710 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	78db      	ldrb	r3, [r3, #3]
 8010b56:	2b02      	cmp	r3, #2
 8010b58:	f040 843a 	bne.w	80113d0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	6a1a      	ldr	r2, [r3, #32]
 8010b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	691b      	ldr	r3, [r3, #16]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	f240 83b7 	bls.w	80112e8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b82:	681a      	ldr	r2, [r3, #0]
 8010b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	009b      	lsls	r3, r3, #2
 8010b92:	4413      	add	r3, r2
 8010b94:	881b      	ldrh	r3, [r3, #0]
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ba0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8010ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bac:	681a      	ldr	r2, [r3, #0]
 8010bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	009b      	lsls	r3, r3, #2
 8010bbc:	441a      	add	r2, r3
 8010bbe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010bca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8010bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	6a1a      	ldr	r2, [r3, #32]
 8010be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010be6:	1ad2      	subs	r2, r2, r3
 8010be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bfc:	681a      	ldr	r2, [r3, #0]
 8010bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	009b      	lsls	r3, r3, #2
 8010c0c:	4413      	add	r3, r2
 8010c0e:	881b      	ldrh	r3, [r3, #0]
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	f000 81b3 	beq.w	8010f82 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	633b      	str	r3, [r7, #48]	; 0x30
 8010c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	785b      	ldrb	r3, [r3, #1]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d16d      	bne.n	8010d14 <USB_EPStartXfer+0x2ba>
 8010c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c52:	b29b      	uxth	r3, r3
 8010c54:	461a      	mov	r2, r3
 8010c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c58:	4413      	add	r3, r2
 8010c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	011a      	lsls	r2, r3, #4
 8010c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c6c:	4413      	add	r3, r2
 8010c6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010c72:	627b      	str	r3, [r7, #36]	; 0x24
 8010c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d112      	bne.n	8010ca2 <USB_EPStartXfer+0x248>
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7e:	881b      	ldrh	r3, [r3, #0]
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c8a:	801a      	strh	r2, [r3, #0]
 8010c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c8e:	881b      	ldrh	r3, [r3, #0]
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c9a:	b29a      	uxth	r2, r3
 8010c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9e:	801a      	strh	r2, [r3, #0]
 8010ca0:	e05d      	b.n	8010d5e <USB_EPStartXfer+0x304>
 8010ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8010ca8:	d817      	bhi.n	8010cda <USB_EPStartXfer+0x280>
 8010caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cae:	085b      	lsrs	r3, r3, #1
 8010cb0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cb8:	f003 0301 	and.w	r3, r3, #1
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d004      	beq.n	8010cca <USB_EPStartXfer+0x270>
 8010cc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010cc4:	3301      	adds	r3, #1
 8010cc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010cca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	029b      	lsls	r3, r3, #10
 8010cd2:	b29a      	uxth	r2, r3
 8010cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd6:	801a      	strh	r2, [r3, #0]
 8010cd8:	e041      	b.n	8010d5e <USB_EPStartXfer+0x304>
 8010cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cde:	095b      	lsrs	r3, r3, #5
 8010ce0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ce8:	f003 031f 	and.w	r3, r3, #31
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d104      	bne.n	8010cfa <USB_EPStartXfer+0x2a0>
 8010cf0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010cf4:	3b01      	subs	r3, #1
 8010cf6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010cfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010cfe:	b29b      	uxth	r3, r3
 8010d00:	029b      	lsls	r3, r3, #10
 8010d02:	b29b      	uxth	r3, r3
 8010d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d0c:	b29a      	uxth	r2, r3
 8010d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d10:	801a      	strh	r2, [r3, #0]
 8010d12:	e024      	b.n	8010d5e <USB_EPStartXfer+0x304>
 8010d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	785b      	ldrb	r3, [r3, #1]
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d11c      	bne.n	8010d5e <USB_EPStartXfer+0x304>
 8010d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	461a      	mov	r2, r3
 8010d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d38:	4413      	add	r3, r2
 8010d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8010d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	011a      	lsls	r2, r3, #4
 8010d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4c:	4413      	add	r3, r2
 8010d4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d58:	b29a      	uxth	r2, r3
 8010d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	895b      	ldrh	r3, [r3, #10]
 8010d6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	6959      	ldr	r1, [r3, #20]
 8010d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010d84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010d88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010d8c:	6800      	ldr	r0, [r0, #0]
 8010d8e:	f001 fac8 	bl	8012322 <USB_WritePMA>
            ep->xfer_buff += len;
 8010d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	695a      	ldr	r2, [r3, #20]
 8010d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010da2:	441a      	add	r2, r3
 8010da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	6a1a      	ldr	r2, [r3, #32]
 8010dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	691b      	ldr	r3, [r3, #16]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d90f      	bls.n	8010dec <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8010dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	6a1a      	ldr	r2, [r3, #32]
 8010dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ddc:	1ad2      	subs	r2, r2, r3
 8010dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	621a      	str	r2, [r3, #32]
 8010dea:	e00e      	b.n	8010e0a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8010dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	6a1b      	ldr	r3, [r3, #32]
 8010df8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	2200      	movs	r2, #0
 8010e08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	785b      	ldrb	r3, [r3, #1]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d16d      	bne.n	8010ef6 <USB_EPStartXfer+0x49c>
 8010e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	61bb      	str	r3, [r7, #24]
 8010e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	461a      	mov	r2, r3
 8010e38:	69bb      	ldr	r3, [r7, #24]
 8010e3a:	4413      	add	r3, r2
 8010e3c:	61bb      	str	r3, [r7, #24]
 8010e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	781b      	ldrb	r3, [r3, #0]
 8010e4a:	011a      	lsls	r2, r3, #4
 8010e4c:	69bb      	ldr	r3, [r7, #24]
 8010e4e:	4413      	add	r3, r2
 8010e50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010e54:	617b      	str	r3, [r7, #20]
 8010e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d112      	bne.n	8010e84 <USB_EPStartXfer+0x42a>
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	881b      	ldrh	r3, [r3, #0]
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010e68:	b29a      	uxth	r2, r3
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	801a      	strh	r2, [r3, #0]
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	881b      	ldrh	r3, [r3, #0]
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e7c:	b29a      	uxth	r2, r3
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	801a      	strh	r2, [r3, #0]
 8010e82:	e063      	b.n	8010f4c <USB_EPStartXfer+0x4f2>
 8010e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e88:	2b3e      	cmp	r3, #62	; 0x3e
 8010e8a:	d817      	bhi.n	8010ebc <USB_EPStartXfer+0x462>
 8010e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e90:	085b      	lsrs	r3, r3, #1
 8010e92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e9a:	f003 0301 	and.w	r3, r3, #1
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d004      	beq.n	8010eac <USB_EPStartXfer+0x452>
 8010ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	029b      	lsls	r3, r3, #10
 8010eb4:	b29a      	uxth	r2, r3
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	801a      	strh	r2, [r3, #0]
 8010eba:	e047      	b.n	8010f4c <USB_EPStartXfer+0x4f2>
 8010ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ec0:	095b      	lsrs	r3, r3, #5
 8010ec2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010eca:	f003 031f 	and.w	r3, r3, #31
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d104      	bne.n	8010edc <USB_EPStartXfer+0x482>
 8010ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010ed6:	3b01      	subs	r3, #1
 8010ed8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	029b      	lsls	r3, r3, #10
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010eee:	b29a      	uxth	r2, r3
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	801a      	strh	r2, [r3, #0]
 8010ef4:	e02a      	b.n	8010f4c <USB_EPStartXfer+0x4f2>
 8010ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	785b      	ldrb	r3, [r3, #1]
 8010f02:	2b01      	cmp	r3, #1
 8010f04:	d122      	bne.n	8010f4c <USB_EPStartXfer+0x4f2>
 8010f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	623b      	str	r3, [r7, #32]
 8010f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	461a      	mov	r2, r3
 8010f24:	6a3b      	ldr	r3, [r7, #32]
 8010f26:	4413      	add	r3, r2
 8010f28:	623b      	str	r3, [r7, #32]
 8010f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	011a      	lsls	r2, r3, #4
 8010f38:	6a3b      	ldr	r3, [r7, #32]
 8010f3a:	4413      	add	r3, r2
 8010f3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010f40:	61fb      	str	r3, [r7, #28]
 8010f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	69fb      	ldr	r3, [r7, #28]
 8010f4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	891b      	ldrh	r3, [r3, #8]
 8010f58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	6959      	ldr	r1, [r3, #20]
 8010f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010f72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010f76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010f7a:	6800      	ldr	r0, [r0, #0]
 8010f7c:	f001 f9d1 	bl	8012322 <USB_WritePMA>
 8010f80:	e3c6      	b.n	8011710 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	785b      	ldrb	r3, [r3, #1]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d16d      	bne.n	801106e <USB_EPStartXfer+0x614>
 8010f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	461a      	mov	r2, r3
 8010fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fb2:	4413      	add	r3, r2
 8010fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8010fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	011a      	lsls	r2, r3, #4
 8010fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fc6:	4413      	add	r3, r2
 8010fc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8010fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d112      	bne.n	8010ffc <USB_EPStartXfer+0x5a2>
 8010fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fd8:	881b      	ldrh	r3, [r3, #0]
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010fe0:	b29a      	uxth	r2, r3
 8010fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fe4:	801a      	strh	r2, [r3, #0]
 8010fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fe8:	881b      	ldrh	r3, [r3, #0]
 8010fea:	b29b      	uxth	r3, r3
 8010fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ff4:	b29a      	uxth	r2, r3
 8010ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ff8:	801a      	strh	r2, [r3, #0]
 8010ffa:	e063      	b.n	80110c4 <USB_EPStartXfer+0x66a>
 8010ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011000:	2b3e      	cmp	r3, #62	; 0x3e
 8011002:	d817      	bhi.n	8011034 <USB_EPStartXfer+0x5da>
 8011004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011008:	085b      	lsrs	r3, r3, #1
 801100a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801100e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011012:	f003 0301 	and.w	r3, r3, #1
 8011016:	2b00      	cmp	r3, #0
 8011018:	d004      	beq.n	8011024 <USB_EPStartXfer+0x5ca>
 801101a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801101e:	3301      	adds	r3, #1
 8011020:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011024:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011028:	b29b      	uxth	r3, r3
 801102a:	029b      	lsls	r3, r3, #10
 801102c:	b29a      	uxth	r2, r3
 801102e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011030:	801a      	strh	r2, [r3, #0]
 8011032:	e047      	b.n	80110c4 <USB_EPStartXfer+0x66a>
 8011034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011038:	095b      	lsrs	r3, r3, #5
 801103a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801103e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011042:	f003 031f 	and.w	r3, r3, #31
 8011046:	2b00      	cmp	r3, #0
 8011048:	d104      	bne.n	8011054 <USB_EPStartXfer+0x5fa>
 801104a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801104e:	3b01      	subs	r3, #1
 8011050:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011054:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011058:	b29b      	uxth	r3, r3
 801105a:	029b      	lsls	r3, r3, #10
 801105c:	b29b      	uxth	r3, r3
 801105e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011066:	b29a      	uxth	r2, r3
 8011068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801106a:	801a      	strh	r2, [r3, #0]
 801106c:	e02a      	b.n	80110c4 <USB_EPStartXfer+0x66a>
 801106e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	785b      	ldrb	r3, [r3, #1]
 801107a:	2b01      	cmp	r3, #1
 801107c:	d122      	bne.n	80110c4 <USB_EPStartXfer+0x66a>
 801107e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	653b      	str	r3, [r7, #80]	; 0x50
 801108a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801108e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011098:	b29b      	uxth	r3, r3
 801109a:	461a      	mov	r2, r3
 801109c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801109e:	4413      	add	r3, r2
 80110a0:	653b      	str	r3, [r7, #80]	; 0x50
 80110a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	011a      	lsls	r2, r3, #4
 80110b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110b2:	4413      	add	r3, r2
 80110b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80110b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80110ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110be:	b29a      	uxth	r2, r3
 80110c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80110c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	891b      	ldrh	r3, [r3, #8]
 80110d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80110d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	6959      	ldr	r1, [r3, #20]
 80110e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80110ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80110ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80110f2:	6800      	ldr	r0, [r0, #0]
 80110f4:	f001 f915 	bl	8012322 <USB_WritePMA>
            ep->xfer_buff += len;
 80110f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	695a      	ldr	r2, [r3, #20]
 8011104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011108:	441a      	add	r2, r3
 801110a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801110e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801111a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	6a1a      	ldr	r2, [r3, #32]
 8011122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	691b      	ldr	r3, [r3, #16]
 801112e:	429a      	cmp	r2, r3
 8011130:	d90f      	bls.n	8011152 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8011132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	6a1a      	ldr	r2, [r3, #32]
 801113e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011142:	1ad2      	subs	r2, r2, r3
 8011144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	621a      	str	r2, [r3, #32]
 8011150:	e00e      	b.n	8011170 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8011152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	6a1b      	ldr	r3, [r3, #32]
 801115e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	2200      	movs	r2, #0
 801116e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	643b      	str	r3, [r7, #64]	; 0x40
 801117c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	785b      	ldrb	r3, [r3, #1]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d16d      	bne.n	8011268 <USB_EPStartXfer+0x80e>
 801118c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	63bb      	str	r3, [r7, #56]	; 0x38
 8011198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801119c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	461a      	mov	r2, r3
 80111aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ac:	4413      	add	r3, r2
 80111ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80111b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	011a      	lsls	r2, r3, #4
 80111be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c0:	4413      	add	r3, r2
 80111c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80111c6:	637b      	str	r3, [r7, #52]	; 0x34
 80111c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d112      	bne.n	80111f6 <USB_EPStartXfer+0x79c>
 80111d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d2:	881b      	ldrh	r3, [r3, #0]
 80111d4:	b29b      	uxth	r3, r3
 80111d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80111da:	b29a      	uxth	r2, r3
 80111dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111de:	801a      	strh	r2, [r3, #0]
 80111e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111e2:	881b      	ldrh	r3, [r3, #0]
 80111e4:	b29b      	uxth	r3, r3
 80111e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111ee:	b29a      	uxth	r2, r3
 80111f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111f2:	801a      	strh	r2, [r3, #0]
 80111f4:	e05d      	b.n	80112b2 <USB_EPStartXfer+0x858>
 80111f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111fa:	2b3e      	cmp	r3, #62	; 0x3e
 80111fc:	d817      	bhi.n	801122e <USB_EPStartXfer+0x7d4>
 80111fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011202:	085b      	lsrs	r3, r3, #1
 8011204:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801120c:	f003 0301 	and.w	r3, r3, #1
 8011210:	2b00      	cmp	r3, #0
 8011212:	d004      	beq.n	801121e <USB_EPStartXfer+0x7c4>
 8011214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011218:	3301      	adds	r3, #1
 801121a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801121e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011222:	b29b      	uxth	r3, r3
 8011224:	029b      	lsls	r3, r3, #10
 8011226:	b29a      	uxth	r2, r3
 8011228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801122a:	801a      	strh	r2, [r3, #0]
 801122c:	e041      	b.n	80112b2 <USB_EPStartXfer+0x858>
 801122e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011232:	095b      	lsrs	r3, r3, #5
 8011234:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801123c:	f003 031f 	and.w	r3, r3, #31
 8011240:	2b00      	cmp	r3, #0
 8011242:	d104      	bne.n	801124e <USB_EPStartXfer+0x7f4>
 8011244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011248:	3b01      	subs	r3, #1
 801124a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801124e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011252:	b29b      	uxth	r3, r3
 8011254:	029b      	lsls	r3, r3, #10
 8011256:	b29b      	uxth	r3, r3
 8011258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801125c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011260:	b29a      	uxth	r2, r3
 8011262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011264:	801a      	strh	r2, [r3, #0]
 8011266:	e024      	b.n	80112b2 <USB_EPStartXfer+0x858>
 8011268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801126c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	785b      	ldrb	r3, [r3, #1]
 8011274:	2b01      	cmp	r3, #1
 8011276:	d11c      	bne.n	80112b2 <USB_EPStartXfer+0x858>
 8011278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801127c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011286:	b29b      	uxth	r3, r3
 8011288:	461a      	mov	r2, r3
 801128a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801128c:	4413      	add	r3, r2
 801128e:	643b      	str	r3, [r7, #64]	; 0x40
 8011290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	011a      	lsls	r2, r3, #4
 801129e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112a0:	4413      	add	r3, r2
 80112a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80112a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112ac:	b29a      	uxth	r2, r3
 80112ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80112b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	895b      	ldrh	r3, [r3, #10]
 80112be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80112c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	6959      	ldr	r1, [r3, #20]
 80112ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80112d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80112dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80112e0:	6800      	ldr	r0, [r0, #0]
 80112e2:	f001 f81e 	bl	8012322 <USB_WritePMA>
 80112e6:	e213      	b.n	8011710 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80112e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	6a1b      	ldr	r3, [r3, #32]
 80112f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80112f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011300:	681a      	ldr	r2, [r3, #0]
 8011302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	4413      	add	r3, r2
 8011312:	881b      	ldrh	r3, [r3, #0]
 8011314:	b29b      	uxth	r3, r3
 8011316:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801131a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801131e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8011322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011326:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	009b      	lsls	r3, r3, #2
 801133a:	441a      	add	r2, r3
 801133c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801134c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011350:	b29b      	uxth	r3, r3
 8011352:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801136e:	b29b      	uxth	r3, r3
 8011370:	461a      	mov	r2, r3
 8011372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011374:	4413      	add	r3, r2
 8011376:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801137c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	011a      	lsls	r2, r3, #4
 8011386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011388:	4413      	add	r3, r2
 801138a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801138e:	65bb      	str	r3, [r7, #88]	; 0x58
 8011390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011394:	b29a      	uxth	r2, r3
 8011396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011398:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801139a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801139e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	891b      	ldrh	r3, [r3, #8]
 80113a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80113aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	6959      	ldr	r1, [r3, #20]
 80113b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80113c0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80113c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80113c8:	6800      	ldr	r0, [r0, #0]
 80113ca:	f000 ffaa 	bl	8012322 <USB_WritePMA>
 80113ce:	e19f      	b.n	8011710 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80113d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	6a1a      	ldr	r2, [r3, #32]
 80113dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113e0:	1ad2      	subs	r2, r2, r3
 80113e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80113ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	009b      	lsls	r3, r3, #2
 8011406:	4413      	add	r3, r2
 8011408:	881b      	ldrh	r3, [r3, #0]
 801140a:	b29b      	uxth	r3, r3
 801140c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011410:	2b00      	cmp	r3, #0
 8011412:	f000 80bc 	beq.w	801158e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801141a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	673b      	str	r3, [r7, #112]	; 0x70
 8011422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	785b      	ldrb	r3, [r3, #1]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d16d      	bne.n	801150e <USB_EPStartXfer+0xab4>
 8011432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	66bb      	str	r3, [r7, #104]	; 0x68
 801143e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801144c:	b29b      	uxth	r3, r3
 801144e:	461a      	mov	r2, r3
 8011450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011452:	4413      	add	r3, r2
 8011454:	66bb      	str	r3, [r7, #104]	; 0x68
 8011456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801145a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	011a      	lsls	r2, r3, #4
 8011464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011466:	4413      	add	r3, r2
 8011468:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801146c:	667b      	str	r3, [r7, #100]	; 0x64
 801146e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011472:	2b00      	cmp	r3, #0
 8011474:	d112      	bne.n	801149c <USB_EPStartXfer+0xa42>
 8011476:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011478:	881b      	ldrh	r3, [r3, #0]
 801147a:	b29b      	uxth	r3, r3
 801147c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011480:	b29a      	uxth	r2, r3
 8011482:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011484:	801a      	strh	r2, [r3, #0]
 8011486:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011488:	881b      	ldrh	r3, [r3, #0]
 801148a:	b29b      	uxth	r3, r3
 801148c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011494:	b29a      	uxth	r2, r3
 8011496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011498:	801a      	strh	r2, [r3, #0]
 801149a:	e05d      	b.n	8011558 <USB_EPStartXfer+0xafe>
 801149c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114a0:	2b3e      	cmp	r3, #62	; 0x3e
 80114a2:	d817      	bhi.n	80114d4 <USB_EPStartXfer+0xa7a>
 80114a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114a8:	085b      	lsrs	r3, r3, #1
 80114aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80114ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114b2:	f003 0301 	and.w	r3, r3, #1
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d004      	beq.n	80114c4 <USB_EPStartXfer+0xa6a>
 80114ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80114be:	3301      	adds	r3, #1
 80114c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80114c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80114c8:	b29b      	uxth	r3, r3
 80114ca:	029b      	lsls	r3, r3, #10
 80114cc:	b29a      	uxth	r2, r3
 80114ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114d0:	801a      	strh	r2, [r3, #0]
 80114d2:	e041      	b.n	8011558 <USB_EPStartXfer+0xafe>
 80114d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114d8:	095b      	lsrs	r3, r3, #5
 80114da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80114de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114e2:	f003 031f 	and.w	r3, r3, #31
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d104      	bne.n	80114f4 <USB_EPStartXfer+0xa9a>
 80114ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80114ee:	3b01      	subs	r3, #1
 80114f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80114f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	029b      	lsls	r3, r3, #10
 80114fc:	b29b      	uxth	r3, r3
 80114fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011506:	b29a      	uxth	r2, r3
 8011508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801150a:	801a      	strh	r2, [r3, #0]
 801150c:	e024      	b.n	8011558 <USB_EPStartXfer+0xafe>
 801150e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	785b      	ldrb	r3, [r3, #1]
 801151a:	2b01      	cmp	r3, #1
 801151c:	d11c      	bne.n	8011558 <USB_EPStartXfer+0xafe>
 801151e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801152c:	b29b      	uxth	r3, r3
 801152e:	461a      	mov	r2, r3
 8011530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011532:	4413      	add	r3, r2
 8011534:	673b      	str	r3, [r7, #112]	; 0x70
 8011536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801153a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	781b      	ldrb	r3, [r3, #0]
 8011542:	011a      	lsls	r2, r3, #4
 8011544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011546:	4413      	add	r3, r2
 8011548:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801154c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801154e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011552:	b29a      	uxth	r2, r3
 8011554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011556:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801155c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	895b      	ldrh	r3, [r3, #10]
 8011564:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801156c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	6959      	ldr	r1, [r3, #20]
 8011574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011578:	b29b      	uxth	r3, r3
 801157a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801157e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011582:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011586:	6800      	ldr	r0, [r0, #0]
 8011588:	f000 fecb 	bl	8012322 <USB_WritePMA>
 801158c:	e0c0      	b.n	8011710 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801158e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	785b      	ldrb	r3, [r3, #1]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d16d      	bne.n	801167a <USB_EPStartXfer+0xc20>
 801159e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80115aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80115b8:	b29b      	uxth	r3, r3
 80115ba:	461a      	mov	r2, r3
 80115bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80115be:	4413      	add	r3, r2
 80115c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80115c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	011a      	lsls	r2, r3, #4
 80115d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80115d2:	4413      	add	r3, r2
 80115d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80115d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80115da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d112      	bne.n	8011608 <USB_EPStartXfer+0xbae>
 80115e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80115e4:	881b      	ldrh	r3, [r3, #0]
 80115e6:	b29b      	uxth	r3, r3
 80115e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80115ec:	b29a      	uxth	r2, r3
 80115ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80115f0:	801a      	strh	r2, [r3, #0]
 80115f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80115f4:	881b      	ldrh	r3, [r3, #0]
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011600:	b29a      	uxth	r2, r3
 8011602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011604:	801a      	strh	r2, [r3, #0]
 8011606:	e069      	b.n	80116dc <USB_EPStartXfer+0xc82>
 8011608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801160c:	2b3e      	cmp	r3, #62	; 0x3e
 801160e:	d817      	bhi.n	8011640 <USB_EPStartXfer+0xbe6>
 8011610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011614:	085b      	lsrs	r3, r3, #1
 8011616:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801161a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801161e:	f003 0301 	and.w	r3, r3, #1
 8011622:	2b00      	cmp	r3, #0
 8011624:	d004      	beq.n	8011630 <USB_EPStartXfer+0xbd6>
 8011626:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801162a:	3301      	adds	r3, #1
 801162c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011630:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011634:	b29b      	uxth	r3, r3
 8011636:	029b      	lsls	r3, r3, #10
 8011638:	b29a      	uxth	r2, r3
 801163a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801163c:	801a      	strh	r2, [r3, #0]
 801163e:	e04d      	b.n	80116dc <USB_EPStartXfer+0xc82>
 8011640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011644:	095b      	lsrs	r3, r3, #5
 8011646:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801164a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801164e:	f003 031f 	and.w	r3, r3, #31
 8011652:	2b00      	cmp	r3, #0
 8011654:	d104      	bne.n	8011660 <USB_EPStartXfer+0xc06>
 8011656:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801165a:	3b01      	subs	r3, #1
 801165c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011660:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011664:	b29b      	uxth	r3, r3
 8011666:	029b      	lsls	r3, r3, #10
 8011668:	b29b      	uxth	r3, r3
 801166a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801166e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011672:	b29a      	uxth	r2, r3
 8011674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011676:	801a      	strh	r2, [r3, #0]
 8011678:	e030      	b.n	80116dc <USB_EPStartXfer+0xc82>
 801167a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801167e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	785b      	ldrb	r3, [r3, #1]
 8011686:	2b01      	cmp	r3, #1
 8011688:	d128      	bne.n	80116dc <USB_EPStartXfer+0xc82>
 801168a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801168e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801169c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80116a6:	b29b      	uxth	r3, r3
 80116a8:	461a      	mov	r2, r3
 80116aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80116ae:	4413      	add	r3, r2
 80116b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80116b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	011a      	lsls	r2, r3, #4
 80116c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80116c6:	4413      	add	r3, r2
 80116c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80116cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80116d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116d4:	b29a      	uxth	r2, r3
 80116d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80116da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80116dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	891b      	ldrh	r3, [r3, #8]
 80116e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80116ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	6959      	ldr	r1, [r3, #20]
 80116f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011702:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011706:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801170a:	6800      	ldr	r0, [r0, #0]
 801170c:	f000 fe09 	bl	8012322 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011714:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801171e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	009b      	lsls	r3, r3, #2
 8011728:	4413      	add	r3, r2
 801172a:	881b      	ldrh	r3, [r3, #0]
 801172c:	b29b      	uxth	r3, r3
 801172e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011736:	817b      	strh	r3, [r7, #10]
 8011738:	897b      	ldrh	r3, [r7, #10]
 801173a:	f083 0310 	eor.w	r3, r3, #16
 801173e:	817b      	strh	r3, [r7, #10]
 8011740:	897b      	ldrh	r3, [r7, #10]
 8011742:	f083 0320 	eor.w	r3, r3, #32
 8011746:	817b      	strh	r3, [r7, #10]
 8011748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801174c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	781b      	ldrb	r3, [r3, #0]
 801175e:	009b      	lsls	r3, r3, #2
 8011760:	441a      	add	r2, r3
 8011762:	897b      	ldrh	r3, [r7, #10]
 8011764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801176c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011774:	b29b      	uxth	r3, r3
 8011776:	8013      	strh	r3, [r2, #0]
 8011778:	f000 bc9f 	b.w	80120ba <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801177c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	7b1b      	ldrb	r3, [r3, #12]
 8011788:	2b00      	cmp	r3, #0
 801178a:	f040 80ae 	bne.w	80118ea <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801178e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	699a      	ldr	r2, [r3, #24]
 801179a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801179e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	691b      	ldr	r3, [r3, #16]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d917      	bls.n	80117da <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80117aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	691b      	ldr	r3, [r3, #16]
 80117b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80117ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	699a      	ldr	r2, [r3, #24]
 80117c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117ca:	1ad2      	subs	r2, r2, r3
 80117cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	619a      	str	r2, [r3, #24]
 80117d8:	e00e      	b.n	80117f8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80117da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	699b      	ldr	r3, [r3, #24]
 80117e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80117ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	2200      	movs	r2, #0
 80117f6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80117f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801180a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011814:	b29b      	uxth	r3, r3
 8011816:	461a      	mov	r2, r3
 8011818:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801181c:	4413      	add	r3, r2
 801181e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	011a      	lsls	r2, r3, #4
 8011830:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011834:	4413      	add	r3, r2
 8011836:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801183a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801183e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011842:	2b00      	cmp	r3, #0
 8011844:	d116      	bne.n	8011874 <USB_EPStartXfer+0xe1a>
 8011846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801184a:	881b      	ldrh	r3, [r3, #0]
 801184c:	b29b      	uxth	r3, r3
 801184e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011852:	b29a      	uxth	r2, r3
 8011854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011858:	801a      	strh	r2, [r3, #0]
 801185a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801185e:	881b      	ldrh	r3, [r3, #0]
 8011860:	b29b      	uxth	r3, r3
 8011862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801186a:	b29a      	uxth	r2, r3
 801186c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011870:	801a      	strh	r2, [r3, #0]
 8011872:	e3e8      	b.n	8012046 <USB_EPStartXfer+0x15ec>
 8011874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011878:	2b3e      	cmp	r3, #62	; 0x3e
 801187a:	d818      	bhi.n	80118ae <USB_EPStartXfer+0xe54>
 801187c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011880:	085b      	lsrs	r3, r3, #1
 8011882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801188a:	f003 0301 	and.w	r3, r3, #1
 801188e:	2b00      	cmp	r3, #0
 8011890:	d004      	beq.n	801189c <USB_EPStartXfer+0xe42>
 8011892:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011896:	3301      	adds	r3, #1
 8011898:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801189c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80118a0:	b29b      	uxth	r3, r3
 80118a2:	029b      	lsls	r3, r3, #10
 80118a4:	b29a      	uxth	r2, r3
 80118a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80118aa:	801a      	strh	r2, [r3, #0]
 80118ac:	e3cb      	b.n	8012046 <USB_EPStartXfer+0x15ec>
 80118ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118b2:	095b      	lsrs	r3, r3, #5
 80118b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80118b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118bc:	f003 031f 	and.w	r3, r3, #31
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d104      	bne.n	80118ce <USB_EPStartXfer+0xe74>
 80118c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80118c8:	3b01      	subs	r3, #1
 80118ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80118ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80118d2:	b29b      	uxth	r3, r3
 80118d4:	029b      	lsls	r3, r3, #10
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80118dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80118e0:	b29a      	uxth	r2, r3
 80118e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80118e6:	801a      	strh	r2, [r3, #0]
 80118e8:	e3ad      	b.n	8012046 <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80118ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	78db      	ldrb	r3, [r3, #3]
 80118f6:	2b02      	cmp	r3, #2
 80118f8:	f040 8200 	bne.w	8011cfc <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80118fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	785b      	ldrb	r3, [r3, #1]
 8011908:	2b00      	cmp	r3, #0
 801190a:	f040 8091 	bne.w	8011a30 <USB_EPStartXfer+0xfd6>
 801190e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801191c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801192a:	b29b      	uxth	r3, r3
 801192c:	461a      	mov	r2, r3
 801192e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011932:	4413      	add	r3, r2
 8011934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801193c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	011a      	lsls	r2, r3, #4
 8011946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801194a:	4413      	add	r3, r2
 801194c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	691b      	ldr	r3, [r3, #16]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d116      	bne.n	8011992 <USB_EPStartXfer+0xf38>
 8011964:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011968:	881b      	ldrh	r3, [r3, #0]
 801196a:	b29b      	uxth	r3, r3
 801196c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011970:	b29a      	uxth	r2, r3
 8011972:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011976:	801a      	strh	r2, [r3, #0]
 8011978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801197c:	881b      	ldrh	r3, [r3, #0]
 801197e:	b29b      	uxth	r3, r3
 8011980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011988:	b29a      	uxth	r2, r3
 801198a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801198e:	801a      	strh	r2, [r3, #0]
 8011990:	e083      	b.n	8011a9a <USB_EPStartXfer+0x1040>
 8011992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	691b      	ldr	r3, [r3, #16]
 801199e:	2b3e      	cmp	r3, #62	; 0x3e
 80119a0:	d820      	bhi.n	80119e4 <USB_EPStartXfer+0xf8a>
 80119a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	691b      	ldr	r3, [r3, #16]
 80119ae:	085b      	lsrs	r3, r3, #1
 80119b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80119b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	691b      	ldr	r3, [r3, #16]
 80119c0:	f003 0301 	and.w	r3, r3, #1
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d004      	beq.n	80119d2 <USB_EPStartXfer+0xf78>
 80119c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119cc:	3301      	adds	r3, #1
 80119ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80119d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	029b      	lsls	r3, r3, #10
 80119da:	b29a      	uxth	r2, r3
 80119dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80119e0:	801a      	strh	r2, [r3, #0]
 80119e2:	e05a      	b.n	8011a9a <USB_EPStartXfer+0x1040>
 80119e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	691b      	ldr	r3, [r3, #16]
 80119f0:	095b      	lsrs	r3, r3, #5
 80119f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80119f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	691b      	ldr	r3, [r3, #16]
 8011a02:	f003 031f 	and.w	r3, r3, #31
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d104      	bne.n	8011a14 <USB_EPStartXfer+0xfba>
 8011a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011a0e:	3b01      	subs	r3, #1
 8011a10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	029b      	lsls	r3, r3, #10
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a26:	b29a      	uxth	r2, r3
 8011a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011a2c:	801a      	strh	r2, [r3, #0]
 8011a2e:	e034      	b.n	8011a9a <USB_EPStartXfer+0x1040>
 8011a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	785b      	ldrb	r3, [r3, #1]
 8011a3c:	2b01      	cmp	r3, #1
 8011a3e:	d12c      	bne.n	8011a9a <USB_EPStartXfer+0x1040>
 8011a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	461a      	mov	r2, r3
 8011a60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011a64:	4413      	add	r3, r2
 8011a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	011a      	lsls	r2, r3, #4
 8011a78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011a7c:	4413      	add	r3, r2
 8011a7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011a82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	691b      	ldr	r3, [r3, #16]
 8011a92:	b29a      	uxth	r2, r3
 8011a94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011a98:	801a      	strh	r2, [r3, #0]
 8011a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	785b      	ldrb	r3, [r3, #1]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	f040 8091 	bne.w	8011bdc <USB_EPStartXfer+0x1182>
 8011aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011abe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011acc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ad6:	b29b      	uxth	r3, r3
 8011ad8:	461a      	mov	r2, r3
 8011ada:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011ade:	4413      	add	r3, r2
 8011ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	781b      	ldrb	r3, [r3, #0]
 8011af0:	011a      	lsls	r2, r3, #4
 8011af2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011af6:	4413      	add	r3, r2
 8011af8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	691b      	ldr	r3, [r3, #16]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d116      	bne.n	8011b3e <USB_EPStartXfer+0x10e4>
 8011b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b14:	881b      	ldrh	r3, [r3, #0]
 8011b16:	b29b      	uxth	r3, r3
 8011b18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011b1c:	b29a      	uxth	r2, r3
 8011b1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b22:	801a      	strh	r2, [r3, #0]
 8011b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b28:	881b      	ldrh	r3, [r3, #0]
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011b34:	b29a      	uxth	r2, r3
 8011b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b3a:	801a      	strh	r2, [r3, #0]
 8011b3c:	e07c      	b.n	8011c38 <USB_EPStartXfer+0x11de>
 8011b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	691b      	ldr	r3, [r3, #16]
 8011b4a:	2b3e      	cmp	r3, #62	; 0x3e
 8011b4c:	d820      	bhi.n	8011b90 <USB_EPStartXfer+0x1136>
 8011b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	691b      	ldr	r3, [r3, #16]
 8011b5a:	085b      	lsrs	r3, r3, #1
 8011b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	691b      	ldr	r3, [r3, #16]
 8011b6c:	f003 0301 	and.w	r3, r3, #1
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d004      	beq.n	8011b7e <USB_EPStartXfer+0x1124>
 8011b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b78:	3301      	adds	r3, #1
 8011b7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	029b      	lsls	r3, r3, #10
 8011b86:	b29a      	uxth	r2, r3
 8011b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b8c:	801a      	strh	r2, [r3, #0]
 8011b8e:	e053      	b.n	8011c38 <USB_EPStartXfer+0x11de>
 8011b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	691b      	ldr	r3, [r3, #16]
 8011b9c:	095b      	lsrs	r3, r3, #5
 8011b9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	691b      	ldr	r3, [r3, #16]
 8011bae:	f003 031f 	and.w	r3, r3, #31
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d104      	bne.n	8011bc0 <USB_EPStartXfer+0x1166>
 8011bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011bba:	3b01      	subs	r3, #1
 8011bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	029b      	lsls	r3, r3, #10
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011bd2:	b29a      	uxth	r2, r3
 8011bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011bd8:	801a      	strh	r2, [r3, #0]
 8011bda:	e02d      	b.n	8011c38 <USB_EPStartXfer+0x11de>
 8011bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	785b      	ldrb	r3, [r3, #1]
 8011be8:	2b01      	cmp	r3, #1
 8011bea:	d125      	bne.n	8011c38 <USB_EPStartXfer+0x11de>
 8011bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011bfa:	b29b      	uxth	r3, r3
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011c02:	4413      	add	r3, r2
 8011c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	011a      	lsls	r2, r3, #4
 8011c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011c1a:	4413      	add	r3, r2
 8011c1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011c20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	691b      	ldr	r3, [r3, #16]
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011c36:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	69db      	ldr	r3, [r3, #28]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	f000 81fe 	beq.w	8012046 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c52:	681a      	ldr	r2, [r3, #0]
 8011c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	009b      	lsls	r3, r3, #2
 8011c62:	4413      	add	r3, r2
 8011c64:	881b      	ldrh	r3, [r3, #0]
 8011c66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011c6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d005      	beq.n	8011c82 <USB_EPStartXfer+0x1228>
 8011c76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d10d      	bne.n	8011c9e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011c82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	f040 81db 	bne.w	8012046 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011c90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	f040 81d4 	bne.w	8012046 <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8011c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ca6:	681a      	ldr	r2, [r3, #0]
 8011ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	781b      	ldrb	r3, [r3, #0]
 8011cb4:	009b      	lsls	r3, r3, #2
 8011cb6:	4413      	add	r3, r2
 8011cb8:	881b      	ldrh	r3, [r3, #0]
 8011cba:	b29b      	uxth	r3, r3
 8011cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011cc4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8011cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ccc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	441a      	add	r2, r3
 8011ce2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8011ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011cf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	8013      	strh	r3, [r2, #0]
 8011cfa:	e1a4      	b.n	8012046 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	78db      	ldrb	r3, [r3, #3]
 8011d08:	2b01      	cmp	r3, #1
 8011d0a:	f040 819a 	bne.w	8012042 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8011d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	699a      	ldr	r2, [r3, #24]
 8011d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	691b      	ldr	r3, [r3, #16]
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d917      	bls.n	8011d5a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8011d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	691b      	ldr	r3, [r3, #16]
 8011d36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8011d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	699a      	ldr	r2, [r3, #24]
 8011d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d4a:	1ad2      	subs	r2, r2, r3
 8011d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	619a      	str	r2, [r3, #24]
 8011d58:	e00e      	b.n	8011d78 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8011d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	699b      	ldr	r3, [r3, #24]
 8011d66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8011d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	2200      	movs	r2, #0
 8011d76:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8011d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	785b      	ldrb	r3, [r3, #1]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d178      	bne.n	8011e7a <USB_EPStartXfer+0x1420>
 8011d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011da4:	b29b      	uxth	r3, r3
 8011da6:	461a      	mov	r2, r3
 8011da8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011dac:	4413      	add	r3, r2
 8011dae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	011a      	lsls	r2, r3, #4
 8011dc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011dc4:	4413      	add	r3, r2
 8011dc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011dca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d116      	bne.n	8011e04 <USB_EPStartXfer+0x13aa>
 8011dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011dda:	881b      	ldrh	r3, [r3, #0]
 8011ddc:	b29b      	uxth	r3, r3
 8011dde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011de2:	b29a      	uxth	r2, r3
 8011de4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011de8:	801a      	strh	r2, [r3, #0]
 8011dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011dee:	881b      	ldrh	r3, [r3, #0]
 8011df0:	b29b      	uxth	r3, r3
 8011df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011dfa:	b29a      	uxth	r2, r3
 8011dfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011e00:	801a      	strh	r2, [r3, #0]
 8011e02:	e06b      	b.n	8011edc <USB_EPStartXfer+0x1482>
 8011e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e08:	2b3e      	cmp	r3, #62	; 0x3e
 8011e0a:	d818      	bhi.n	8011e3e <USB_EPStartXfer+0x13e4>
 8011e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e10:	085b      	lsrs	r3, r3, #1
 8011e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e1a:	f003 0301 	and.w	r3, r3, #1
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d004      	beq.n	8011e2c <USB_EPStartXfer+0x13d2>
 8011e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011e26:	3301      	adds	r3, #1
 8011e28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	029b      	lsls	r3, r3, #10
 8011e34:	b29a      	uxth	r2, r3
 8011e36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011e3a:	801a      	strh	r2, [r3, #0]
 8011e3c:	e04e      	b.n	8011edc <USB_EPStartXfer+0x1482>
 8011e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e42:	095b      	lsrs	r3, r3, #5
 8011e44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e4c:	f003 031f 	and.w	r3, r3, #31
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d104      	bne.n	8011e5e <USB_EPStartXfer+0x1404>
 8011e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011e58:	3b01      	subs	r3, #1
 8011e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011e62:	b29b      	uxth	r3, r3
 8011e64:	029b      	lsls	r3, r3, #10
 8011e66:	b29b      	uxth	r3, r3
 8011e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e70:	b29a      	uxth	r2, r3
 8011e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011e76:	801a      	strh	r2, [r3, #0]
 8011e78:	e030      	b.n	8011edc <USB_EPStartXfer+0x1482>
 8011e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	785b      	ldrb	r3, [r3, #1]
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	d128      	bne.n	8011edc <USB_EPStartXfer+0x1482>
 8011e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011eae:	4413      	add	r3, r2
 8011eb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	781b      	ldrb	r3, [r3, #0]
 8011ec0:	011a      	lsls	r2, r3, #4
 8011ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011ec6:	4413      	add	r3, r2
 8011ec8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ed4:	b29a      	uxth	r2, r3
 8011ed6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011eda:	801a      	strh	r2, [r3, #0]
 8011edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	785b      	ldrb	r3, [r3, #1]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d178      	bne.n	8011fec <USB_EPStartXfer+0x1592>
 8011efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011efe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	461a      	mov	r2, r3
 8011f1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011f1e:	4413      	add	r3, r2
 8011f20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	011a      	lsls	r2, r3, #4
 8011f32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011f36:	4413      	add	r3, r2
 8011f38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d116      	bne.n	8011f76 <USB_EPStartXfer+0x151c>
 8011f48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011f4c:	881b      	ldrh	r3, [r3, #0]
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011f54:	b29a      	uxth	r2, r3
 8011f56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011f5a:	801a      	strh	r2, [r3, #0]
 8011f5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011f60:	881b      	ldrh	r3, [r3, #0]
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f6c:	b29a      	uxth	r2, r3
 8011f6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011f72:	801a      	strh	r2, [r3, #0]
 8011f74:	e067      	b.n	8012046 <USB_EPStartXfer+0x15ec>
 8011f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f7a:	2b3e      	cmp	r3, #62	; 0x3e
 8011f7c:	d818      	bhi.n	8011fb0 <USB_EPStartXfer+0x1556>
 8011f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f82:	085b      	lsrs	r3, r3, #1
 8011f84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f8c:	f003 0301 	and.w	r3, r3, #1
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d004      	beq.n	8011f9e <USB_EPStartXfer+0x1544>
 8011f94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011f98:	3301      	adds	r3, #1
 8011f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	029b      	lsls	r3, r3, #10
 8011fa6:	b29a      	uxth	r2, r3
 8011fa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011fac:	801a      	strh	r2, [r3, #0]
 8011fae:	e04a      	b.n	8012046 <USB_EPStartXfer+0x15ec>
 8011fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fb4:	095b      	lsrs	r3, r3, #5
 8011fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fbe:	f003 031f 	and.w	r3, r3, #31
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d104      	bne.n	8011fd0 <USB_EPStartXfer+0x1576>
 8011fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011fca:	3b01      	subs	r3, #1
 8011fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011fd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011fd4:	b29b      	uxth	r3, r3
 8011fd6:	029b      	lsls	r3, r3, #10
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011fe2:	b29a      	uxth	r2, r3
 8011fe4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011fe8:	801a      	strh	r2, [r3, #0]
 8011fea:	e02c      	b.n	8012046 <USB_EPStartXfer+0x15ec>
 8011fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	785b      	ldrb	r3, [r3, #1]
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d124      	bne.n	8012046 <USB_EPStartXfer+0x15ec>
 8011ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012000:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801200a:	b29b      	uxth	r3, r3
 801200c:	461a      	mov	r2, r3
 801200e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012012:	4413      	add	r3, r2
 8012014:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801201c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	011a      	lsls	r2, r3, #4
 8012026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801202a:	4413      	add	r3, r2
 801202c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8012030:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012038:	b29a      	uxth	r2, r3
 801203a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801203e:	801a      	strh	r2, [r3, #0]
 8012040:	e001      	b.n	8012046 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8012042:	2301      	movs	r3, #1
 8012044:	e03a      	b.n	80120bc <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801204a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801204e:	681a      	ldr	r2, [r3, #0]
 8012050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	781b      	ldrb	r3, [r3, #0]
 801205c:	009b      	lsls	r3, r3, #2
 801205e:	4413      	add	r3, r2
 8012060:	881b      	ldrh	r3, [r3, #0]
 8012062:	b29b      	uxth	r3, r3
 8012064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801206c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012070:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012074:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012078:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801207c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012080:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012084:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801208c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012090:	681a      	ldr	r2, [r3, #0]
 8012092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	009b      	lsls	r3, r3, #2
 80120a0:	441a      	add	r2, r3
 80120a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80120a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80120aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80120ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80120b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80120ba:	2300      	movs	r3, #0
}
 80120bc:	4618      	mov	r0, r3
 80120be:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}

080120c6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80120c6:	b480      	push	{r7}
 80120c8:	b085      	sub	sp, #20
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	6078      	str	r0, [r7, #4]
 80120ce:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	785b      	ldrb	r3, [r3, #1]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d020      	beq.n	801211a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80120d8:	687a      	ldr	r2, [r7, #4]
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	009b      	lsls	r3, r3, #2
 80120e0:	4413      	add	r3, r2
 80120e2:	881b      	ldrh	r3, [r3, #0]
 80120e4:	b29b      	uxth	r3, r3
 80120e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80120ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80120ee:	81bb      	strh	r3, [r7, #12]
 80120f0:	89bb      	ldrh	r3, [r7, #12]
 80120f2:	f083 0310 	eor.w	r3, r3, #16
 80120f6:	81bb      	strh	r3, [r7, #12]
 80120f8:	687a      	ldr	r2, [r7, #4]
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	781b      	ldrb	r3, [r3, #0]
 80120fe:	009b      	lsls	r3, r3, #2
 8012100:	441a      	add	r2, r3
 8012102:	89bb      	ldrh	r3, [r7, #12]
 8012104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801210c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012114:	b29b      	uxth	r3, r3
 8012116:	8013      	strh	r3, [r2, #0]
 8012118:	e01f      	b.n	801215a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801211a:	687a      	ldr	r2, [r7, #4]
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	009b      	lsls	r3, r3, #2
 8012122:	4413      	add	r3, r2
 8012124:	881b      	ldrh	r3, [r3, #0]
 8012126:	b29b      	uxth	r3, r3
 8012128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801212c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012130:	81fb      	strh	r3, [r7, #14]
 8012132:	89fb      	ldrh	r3, [r7, #14]
 8012134:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012138:	81fb      	strh	r3, [r7, #14]
 801213a:	687a      	ldr	r2, [r7, #4]
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	009b      	lsls	r3, r3, #2
 8012142:	441a      	add	r2, r3
 8012144:	89fb      	ldrh	r3, [r7, #14]
 8012146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801214a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801214e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012156:	b29b      	uxth	r3, r3
 8012158:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801215a:	2300      	movs	r3, #0
}
 801215c:	4618      	mov	r0, r3
 801215e:	3714      	adds	r7, #20
 8012160:	46bd      	mov	sp, r7
 8012162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012166:	4770      	bx	lr

08012168 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012168:	b480      	push	{r7}
 801216a:	b087      	sub	sp, #28
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	7b1b      	ldrb	r3, [r3, #12]
 8012176:	2b00      	cmp	r3, #0
 8012178:	f040 809d 	bne.w	80122b6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	785b      	ldrb	r3, [r3, #1]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d04c      	beq.n	801221e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012184:	687a      	ldr	r2, [r7, #4]
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	781b      	ldrb	r3, [r3, #0]
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	4413      	add	r3, r2
 801218e:	881b      	ldrh	r3, [r3, #0]
 8012190:	823b      	strh	r3, [r7, #16]
 8012192:	8a3b      	ldrh	r3, [r7, #16]
 8012194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012198:	2b00      	cmp	r3, #0
 801219a:	d01b      	beq.n	80121d4 <USB_EPClearStall+0x6c>
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	009b      	lsls	r3, r3, #2
 80121a4:	4413      	add	r3, r2
 80121a6:	881b      	ldrh	r3, [r3, #0]
 80121a8:	b29b      	uxth	r3, r3
 80121aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80121ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80121b2:	81fb      	strh	r3, [r7, #14]
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	009b      	lsls	r3, r3, #2
 80121bc:	441a      	add	r2, r3
 80121be:	89fb      	ldrh	r3, [r7, #14]
 80121c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80121c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80121c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80121cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80121d0:	b29b      	uxth	r3, r3
 80121d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	78db      	ldrb	r3, [r3, #3]
 80121d8:	2b01      	cmp	r3, #1
 80121da:	d06c      	beq.n	80122b6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80121dc:	687a      	ldr	r2, [r7, #4]
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	781b      	ldrb	r3, [r3, #0]
 80121e2:	009b      	lsls	r3, r3, #2
 80121e4:	4413      	add	r3, r2
 80121e6:	881b      	ldrh	r3, [r3, #0]
 80121e8:	b29b      	uxth	r3, r3
 80121ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80121ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80121f2:	81bb      	strh	r3, [r7, #12]
 80121f4:	89bb      	ldrh	r3, [r7, #12]
 80121f6:	f083 0320 	eor.w	r3, r3, #32
 80121fa:	81bb      	strh	r3, [r7, #12]
 80121fc:	687a      	ldr	r2, [r7, #4]
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	009b      	lsls	r3, r3, #2
 8012204:	441a      	add	r2, r3
 8012206:	89bb      	ldrh	r3, [r7, #12]
 8012208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801220c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012218:	b29b      	uxth	r3, r3
 801221a:	8013      	strh	r3, [r2, #0]
 801221c:	e04b      	b.n	80122b6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801221e:	687a      	ldr	r2, [r7, #4]
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	781b      	ldrb	r3, [r3, #0]
 8012224:	009b      	lsls	r3, r3, #2
 8012226:	4413      	add	r3, r2
 8012228:	881b      	ldrh	r3, [r3, #0]
 801222a:	82fb      	strh	r3, [r7, #22]
 801222c:	8afb      	ldrh	r3, [r7, #22]
 801222e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012232:	2b00      	cmp	r3, #0
 8012234:	d01b      	beq.n	801226e <USB_EPClearStall+0x106>
 8012236:	687a      	ldr	r2, [r7, #4]
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	009b      	lsls	r3, r3, #2
 801223e:	4413      	add	r3, r2
 8012240:	881b      	ldrh	r3, [r3, #0]
 8012242:	b29b      	uxth	r3, r3
 8012244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801224c:	82bb      	strh	r3, [r7, #20]
 801224e:	687a      	ldr	r2, [r7, #4]
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	009b      	lsls	r3, r3, #2
 8012256:	441a      	add	r2, r3
 8012258:	8abb      	ldrh	r3, [r7, #20]
 801225a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801225e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801226a:	b29b      	uxth	r3, r3
 801226c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	009b      	lsls	r3, r3, #2
 8012276:	4413      	add	r3, r2
 8012278:	881b      	ldrh	r3, [r3, #0]
 801227a:	b29b      	uxth	r3, r3
 801227c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012284:	827b      	strh	r3, [r7, #18]
 8012286:	8a7b      	ldrh	r3, [r7, #18]
 8012288:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801228c:	827b      	strh	r3, [r7, #18]
 801228e:	8a7b      	ldrh	r3, [r7, #18]
 8012290:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012294:	827b      	strh	r3, [r7, #18]
 8012296:	687a      	ldr	r2, [r7, #4]
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	781b      	ldrb	r3, [r3, #0]
 801229c:	009b      	lsls	r3, r3, #2
 801229e:	441a      	add	r2, r3
 80122a0:	8a7b      	ldrh	r3, [r7, #18]
 80122a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80122a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80122aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80122ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80122b6:	2300      	movs	r3, #0
}
 80122b8:	4618      	mov	r0, r3
 80122ba:	371c      	adds	r7, #28
 80122bc:	46bd      	mov	sp, r7
 80122be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c2:	4770      	bx	lr

080122c4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80122c4:	b480      	push	{r7}
 80122c6:	b083      	sub	sp, #12
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	460b      	mov	r3, r1
 80122ce:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80122d0:	78fb      	ldrb	r3, [r7, #3]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d103      	bne.n	80122de <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2280      	movs	r2, #128	; 0x80
 80122da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80122de:	2300      	movs	r3, #0
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	370c      	adds	r7, #12
 80122e4:	46bd      	mov	sp, r7
 80122e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ea:	4770      	bx	lr

080122ec <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80122ec:	b480      	push	{r7}
 80122ee:	b083      	sub	sp, #12
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80122f4:	2300      	movs	r3, #0
}
 80122f6:	4618      	mov	r0, r3
 80122f8:	370c      	adds	r7, #12
 80122fa:	46bd      	mov	sp, r7
 80122fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012300:	4770      	bx	lr

08012302 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8012302:	b480      	push	{r7}
 8012304:	b085      	sub	sp, #20
 8012306:	af00      	add	r7, sp, #0
 8012308:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012310:	b29b      	uxth	r3, r3
 8012312:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012314:	68fb      	ldr	r3, [r7, #12]
}
 8012316:	4618      	mov	r0, r3
 8012318:	3714      	adds	r7, #20
 801231a:	46bd      	mov	sp, r7
 801231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012320:	4770      	bx	lr

08012322 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012322:	b480      	push	{r7}
 8012324:	b08d      	sub	sp, #52	; 0x34
 8012326:	af00      	add	r7, sp, #0
 8012328:	60f8      	str	r0, [r7, #12]
 801232a:	60b9      	str	r1, [r7, #8]
 801232c:	4611      	mov	r1, r2
 801232e:	461a      	mov	r2, r3
 8012330:	460b      	mov	r3, r1
 8012332:	80fb      	strh	r3, [r7, #6]
 8012334:	4613      	mov	r3, r2
 8012336:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012338:	88bb      	ldrh	r3, [r7, #4]
 801233a:	3301      	adds	r3, #1
 801233c:	085b      	lsrs	r3, r3, #1
 801233e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012348:	88fb      	ldrh	r3, [r7, #6]
 801234a:	005a      	lsls	r2, r3, #1
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	4413      	add	r3, r2
 8012350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012354:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8012356:	6a3b      	ldr	r3, [r7, #32]
 8012358:	62fb      	str	r3, [r7, #44]	; 0x2c
 801235a:	e01e      	b.n	801239a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 801235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235e:	781b      	ldrb	r3, [r3, #0]
 8012360:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8012362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012364:	3301      	adds	r3, #1
 8012366:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8012368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236a:	781b      	ldrb	r3, [r3, #0]
 801236c:	b29b      	uxth	r3, r3
 801236e:	021b      	lsls	r3, r3, #8
 8012370:	b29b      	uxth	r3, r3
 8012372:	461a      	mov	r2, r3
 8012374:	69bb      	ldr	r3, [r7, #24]
 8012376:	4313      	orrs	r3, r2
 8012378:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	b29a      	uxth	r2, r3
 801237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012380:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012384:	3302      	adds	r3, #2
 8012386:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8012388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801238a:	3302      	adds	r3, #2
 801238c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 801238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012390:	3301      	adds	r3, #1
 8012392:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8012394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012396:	3b01      	subs	r3, #1
 8012398:	62fb      	str	r3, [r7, #44]	; 0x2c
 801239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239c:	2b00      	cmp	r3, #0
 801239e:	d1dd      	bne.n	801235c <USB_WritePMA+0x3a>
  }
}
 80123a0:	bf00      	nop
 80123a2:	bf00      	nop
 80123a4:	3734      	adds	r7, #52	; 0x34
 80123a6:	46bd      	mov	sp, r7
 80123a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ac:	4770      	bx	lr

080123ae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80123ae:	b480      	push	{r7}
 80123b0:	b08b      	sub	sp, #44	; 0x2c
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	60f8      	str	r0, [r7, #12]
 80123b6:	60b9      	str	r1, [r7, #8]
 80123b8:	4611      	mov	r1, r2
 80123ba:	461a      	mov	r2, r3
 80123bc:	460b      	mov	r3, r1
 80123be:	80fb      	strh	r3, [r7, #6]
 80123c0:	4613      	mov	r3, r2
 80123c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80123c4:	88bb      	ldrh	r3, [r7, #4]
 80123c6:	085b      	lsrs	r3, r3, #1
 80123c8:	b29b      	uxth	r3, r3
 80123ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80123d4:	88fb      	ldrh	r3, [r7, #6]
 80123d6:	005a      	lsls	r2, r3, #1
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	4413      	add	r3, r2
 80123dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80123e0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80123e2:	69bb      	ldr	r3, [r7, #24]
 80123e4:	627b      	str	r3, [r7, #36]	; 0x24
 80123e6:	e01b      	b.n	8012420 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80123e8:	6a3b      	ldr	r3, [r7, #32]
 80123ea:	881b      	ldrh	r3, [r3, #0]
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80123f0:	6a3b      	ldr	r3, [r7, #32]
 80123f2:	3302      	adds	r3, #2
 80123f4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	b2da      	uxtb	r2, r3
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80123fe:	69fb      	ldr	r3, [r7, #28]
 8012400:	3301      	adds	r3, #1
 8012402:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	0a1b      	lsrs	r3, r3, #8
 8012408:	b2da      	uxtb	r2, r3
 801240a:	69fb      	ldr	r3, [r7, #28]
 801240c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801240e:	69fb      	ldr	r3, [r7, #28]
 8012410:	3301      	adds	r3, #1
 8012412:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8012414:	6a3b      	ldr	r3, [r7, #32]
 8012416:	3302      	adds	r3, #2
 8012418:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 801241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241c:	3b01      	subs	r3, #1
 801241e:	627b      	str	r3, [r7, #36]	; 0x24
 8012420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012422:	2b00      	cmp	r3, #0
 8012424:	d1e0      	bne.n	80123e8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8012426:	88bb      	ldrh	r3, [r7, #4]
 8012428:	f003 0301 	and.w	r3, r3, #1
 801242c:	b29b      	uxth	r3, r3
 801242e:	2b00      	cmp	r3, #0
 8012430:	d007      	beq.n	8012442 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8012432:	6a3b      	ldr	r3, [r7, #32]
 8012434:	881b      	ldrh	r3, [r3, #0]
 8012436:	b29b      	uxth	r3, r3
 8012438:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	b2da      	uxtb	r2, r3
 801243e:	69fb      	ldr	r3, [r7, #28]
 8012440:	701a      	strb	r2, [r3, #0]
  }
}
 8012442:	bf00      	nop
 8012444:	372c      	adds	r7, #44	; 0x2c
 8012446:	46bd      	mov	sp, r7
 8012448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244c:	4770      	bx	lr

0801244e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801244e:	b580      	push	{r7, lr}
 8012450:	b084      	sub	sp, #16
 8012452:	af00      	add	r7, sp, #0
 8012454:	6078      	str	r0, [r7, #4]
 8012456:	460b      	mov	r3, r1
 8012458:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801245a:	2300      	movs	r3, #0
 801245c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	7c1b      	ldrb	r3, [r3, #16]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d115      	bne.n	8012492 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012466:	f44f 7300 	mov.w	r3, #512	; 0x200
 801246a:	2202      	movs	r2, #2
 801246c:	2181      	movs	r1, #129	; 0x81
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f004 fc3d 	bl	8016cee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2201      	movs	r2, #1
 8012478:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801247a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801247e:	2202      	movs	r2, #2
 8012480:	2101      	movs	r1, #1
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f004 fc33 	bl	8016cee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2201      	movs	r2, #1
 801248c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8012490:	e012      	b.n	80124b8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012492:	2340      	movs	r3, #64	; 0x40
 8012494:	2202      	movs	r2, #2
 8012496:	2181      	movs	r1, #129	; 0x81
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f004 fc28 	bl	8016cee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2201      	movs	r2, #1
 80124a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80124a4:	2340      	movs	r3, #64	; 0x40
 80124a6:	2202      	movs	r2, #2
 80124a8:	2101      	movs	r1, #1
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f004 fc1f 	bl	8016cee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2201      	movs	r2, #1
 80124b4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80124b8:	2308      	movs	r3, #8
 80124ba:	2203      	movs	r2, #3
 80124bc:	2182      	movs	r1, #130	; 0x82
 80124be:	6878      	ldr	r0, [r7, #4]
 80124c0:	f004 fc15 	bl	8016cee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2201      	movs	r2, #1
 80124c8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80124ca:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80124ce:	f004 fd37 	bl	8016f40 <USBD_static_malloc>
 80124d2:	4602      	mov	r2, r0
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d102      	bne.n	80124ea <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80124e4:	2301      	movs	r3, #1
 80124e6:	73fb      	strb	r3, [r7, #15]
 80124e8:	e026      	b.n	8012538 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124f0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	2200      	movs	r2, #0
 8012500:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	2200      	movs	r2, #0
 8012508:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	7c1b      	ldrb	r3, [r3, #16]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d109      	bne.n	8012528 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801251a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801251e:	2101      	movs	r1, #1
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f004 fcd6 	bl	8016ed2 <USBD_LL_PrepareReceive>
 8012526:	e007      	b.n	8012538 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801252e:	2340      	movs	r3, #64	; 0x40
 8012530:	2101      	movs	r1, #1
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f004 fccd 	bl	8016ed2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8012538:	7bfb      	ldrb	r3, [r7, #15]
}
 801253a:	4618      	mov	r0, r3
 801253c:	3710      	adds	r7, #16
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}

08012542 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012542:	b580      	push	{r7, lr}
 8012544:	b084      	sub	sp, #16
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
 801254a:	460b      	mov	r3, r1
 801254c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801254e:	2300      	movs	r3, #0
 8012550:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012552:	2181      	movs	r1, #129	; 0x81
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f004 fbf0 	bl	8016d3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	2200      	movs	r2, #0
 801255e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012560:	2101      	movs	r1, #1
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f004 fbe9 	bl	8016d3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2200      	movs	r2, #0
 801256c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012570:	2182      	movs	r1, #130	; 0x82
 8012572:	6878      	ldr	r0, [r7, #4]
 8012574:	f004 fbe1 	bl	8016d3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2200      	movs	r2, #0
 801257c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012584:	2b00      	cmp	r3, #0
 8012586:	d00e      	beq.n	80125a6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801258e:	685b      	ldr	r3, [r3, #4]
 8012590:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012598:	4618      	mov	r0, r3
 801259a:	f004 fcdf 	bl	8016f5c <USBD_static_free>
    pdev->pClassData = NULL;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2200      	movs	r2, #0
 80125a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80125a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3710      	adds	r7, #16
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}

080125b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b086      	sub	sp, #24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125c0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80125c2:	2300      	movs	r3, #0
 80125c4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80125c6:	2300      	movs	r3, #0
 80125c8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80125ca:	2300      	movs	r3, #0
 80125cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d039      	beq.n	801264e <USBD_CDC_Setup+0x9e>
 80125da:	2b20      	cmp	r3, #32
 80125dc:	d17f      	bne.n	80126de <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	88db      	ldrh	r3, [r3, #6]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d029      	beq.n	801263a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	781b      	ldrb	r3, [r3, #0]
 80125ea:	b25b      	sxtb	r3, r3
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	da11      	bge.n	8012614 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80125f6:	689b      	ldr	r3, [r3, #8]
 80125f8:	683a      	ldr	r2, [r7, #0]
 80125fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80125fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80125fe:	683a      	ldr	r2, [r7, #0]
 8012600:	88d2      	ldrh	r2, [r2, #6]
 8012602:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8012604:	6939      	ldr	r1, [r7, #16]
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	88db      	ldrh	r3, [r3, #6]
 801260a:	461a      	mov	r2, r3
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f001 fa14 	bl	8013a3a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8012612:	e06b      	b.n	80126ec <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	785a      	ldrb	r2, [r3, #1]
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	88db      	ldrh	r3, [r3, #6]
 8012622:	b2da      	uxtb	r2, r3
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801262a:	6939      	ldr	r1, [r7, #16]
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	88db      	ldrh	r3, [r3, #6]
 8012630:	461a      	mov	r2, r3
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	f001 fa2f 	bl	8013a96 <USBD_CtlPrepareRx>
      break;
 8012638:	e058      	b.n	80126ec <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012640:	689b      	ldr	r3, [r3, #8]
 8012642:	683a      	ldr	r2, [r7, #0]
 8012644:	7850      	ldrb	r0, [r2, #1]
 8012646:	2200      	movs	r2, #0
 8012648:	6839      	ldr	r1, [r7, #0]
 801264a:	4798      	blx	r3
      break;
 801264c:	e04e      	b.n	80126ec <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	785b      	ldrb	r3, [r3, #1]
 8012652:	2b0b      	cmp	r3, #11
 8012654:	d02e      	beq.n	80126b4 <USBD_CDC_Setup+0x104>
 8012656:	2b0b      	cmp	r3, #11
 8012658:	dc38      	bgt.n	80126cc <USBD_CDC_Setup+0x11c>
 801265a:	2b00      	cmp	r3, #0
 801265c:	d002      	beq.n	8012664 <USBD_CDC_Setup+0xb4>
 801265e:	2b0a      	cmp	r3, #10
 8012660:	d014      	beq.n	801268c <USBD_CDC_Setup+0xdc>
 8012662:	e033      	b.n	80126cc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801266a:	2b03      	cmp	r3, #3
 801266c:	d107      	bne.n	801267e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801266e:	f107 030c 	add.w	r3, r7, #12
 8012672:	2202      	movs	r2, #2
 8012674:	4619      	mov	r1, r3
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f001 f9df 	bl	8013a3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801267c:	e02e      	b.n	80126dc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 801267e:	6839      	ldr	r1, [r7, #0]
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f001 f96f 	bl	8013964 <USBD_CtlError>
            ret = USBD_FAIL;
 8012686:	2302      	movs	r3, #2
 8012688:	75fb      	strb	r3, [r7, #23]
          break;
 801268a:	e027      	b.n	80126dc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012692:	2b03      	cmp	r3, #3
 8012694:	d107      	bne.n	80126a6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8012696:	f107 030f 	add.w	r3, r7, #15
 801269a:	2201      	movs	r2, #1
 801269c:	4619      	mov	r1, r3
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f001 f9cb 	bl	8013a3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80126a4:	e01a      	b.n	80126dc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80126a6:	6839      	ldr	r1, [r7, #0]
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f001 f95b 	bl	8013964 <USBD_CtlError>
            ret = USBD_FAIL;
 80126ae:	2302      	movs	r3, #2
 80126b0:	75fb      	strb	r3, [r7, #23]
          break;
 80126b2:	e013      	b.n	80126dc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126ba:	2b03      	cmp	r3, #3
 80126bc:	d00d      	beq.n	80126da <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80126be:	6839      	ldr	r1, [r7, #0]
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f001 f94f 	bl	8013964 <USBD_CtlError>
            ret = USBD_FAIL;
 80126c6:	2302      	movs	r3, #2
 80126c8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80126ca:	e006      	b.n	80126da <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80126cc:	6839      	ldr	r1, [r7, #0]
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f001 f948 	bl	8013964 <USBD_CtlError>
          ret = USBD_FAIL;
 80126d4:	2302      	movs	r3, #2
 80126d6:	75fb      	strb	r3, [r7, #23]
          break;
 80126d8:	e000      	b.n	80126dc <USBD_CDC_Setup+0x12c>
          break;
 80126da:	bf00      	nop
      }
      break;
 80126dc:	e006      	b.n	80126ec <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80126de:	6839      	ldr	r1, [r7, #0]
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f001 f93f 	bl	8013964 <USBD_CtlError>
      ret = USBD_FAIL;
 80126e6:	2302      	movs	r3, #2
 80126e8:	75fb      	strb	r3, [r7, #23]
      break;
 80126ea:	bf00      	nop
  }

  return ret;
 80126ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3718      	adds	r7, #24
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}

080126f6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80126f6:	b580      	push	{r7, lr}
 80126f8:	b084      	sub	sp, #16
 80126fa:	af00      	add	r7, sp, #0
 80126fc:	6078      	str	r0, [r7, #4]
 80126fe:	460b      	mov	r3, r1
 8012700:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012708:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012710:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012718:	2b00      	cmp	r3, #0
 801271a:	d03a      	beq.n	8012792 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801271c:	78fa      	ldrb	r2, [r7, #3]
 801271e:	6879      	ldr	r1, [r7, #4]
 8012720:	4613      	mov	r3, r2
 8012722:	009b      	lsls	r3, r3, #2
 8012724:	4413      	add	r3, r2
 8012726:	009b      	lsls	r3, r3, #2
 8012728:	440b      	add	r3, r1
 801272a:	331c      	adds	r3, #28
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d029      	beq.n	8012786 <USBD_CDC_DataIn+0x90>
 8012732:	78fa      	ldrb	r2, [r7, #3]
 8012734:	6879      	ldr	r1, [r7, #4]
 8012736:	4613      	mov	r3, r2
 8012738:	009b      	lsls	r3, r3, #2
 801273a:	4413      	add	r3, r2
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	440b      	add	r3, r1
 8012740:	331c      	adds	r3, #28
 8012742:	681a      	ldr	r2, [r3, #0]
 8012744:	78f9      	ldrb	r1, [r7, #3]
 8012746:	68b8      	ldr	r0, [r7, #8]
 8012748:	460b      	mov	r3, r1
 801274a:	009b      	lsls	r3, r3, #2
 801274c:	440b      	add	r3, r1
 801274e:	00db      	lsls	r3, r3, #3
 8012750:	4403      	add	r3, r0
 8012752:	3338      	adds	r3, #56	; 0x38
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	fbb2 f1f3 	udiv	r1, r2, r3
 801275a:	fb01 f303 	mul.w	r3, r1, r3
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	2b00      	cmp	r3, #0
 8012762:	d110      	bne.n	8012786 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8012764:	78fa      	ldrb	r2, [r7, #3]
 8012766:	6879      	ldr	r1, [r7, #4]
 8012768:	4613      	mov	r3, r2
 801276a:	009b      	lsls	r3, r3, #2
 801276c:	4413      	add	r3, r2
 801276e:	009b      	lsls	r3, r3, #2
 8012770:	440b      	add	r3, r1
 8012772:	331c      	adds	r3, #28
 8012774:	2200      	movs	r2, #0
 8012776:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012778:	78f9      	ldrb	r1, [r7, #3]
 801277a:	2300      	movs	r3, #0
 801277c:	2200      	movs	r2, #0
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f004 fb84 	bl	8016e8c <USBD_LL_Transmit>
 8012784:	e003      	b.n	801278e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	2200      	movs	r2, #0
 801278a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 801278e:	2300      	movs	r3, #0
 8012790:	e000      	b.n	8012794 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8012792:	2302      	movs	r3, #2
  }
}
 8012794:	4618      	mov	r0, r3
 8012796:	3710      	adds	r7, #16
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}

0801279c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b084      	sub	sp, #16
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	460b      	mov	r3, r1
 80127a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127ae:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80127b0:	78fb      	ldrb	r3, [r7, #3]
 80127b2:	4619      	mov	r1, r3
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f004 fbaf 	bl	8016f18 <USBD_LL_GetRxDataSize>
 80127ba:	4602      	mov	r2, r0
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d00d      	beq.n	80127e8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80127d2:	68db      	ldr	r3, [r3, #12]
 80127d4:	68fa      	ldr	r2, [r7, #12]
 80127d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80127da:	68fa      	ldr	r2, [r7, #12]
 80127dc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80127e0:	4611      	mov	r1, r2
 80127e2:	4798      	blx	r3

    return USBD_OK;
 80127e4:	2300      	movs	r3, #0
 80127e6:	e000      	b.n	80127ea <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80127e8:	2302      	movs	r3, #2
  }
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3710      	adds	r7, #16
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}

080127f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80127f2:	b580      	push	{r7, lr}
 80127f4:	b084      	sub	sp, #16
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012800:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012808:	2b00      	cmp	r3, #0
 801280a:	d015      	beq.n	8012838 <USBD_CDC_EP0_RxReady+0x46>
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012812:	2bff      	cmp	r3, #255	; 0xff
 8012814:	d010      	beq.n	8012838 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801281c:	689b      	ldr	r3, [r3, #8]
 801281e:	68fa      	ldr	r2, [r7, #12]
 8012820:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8012824:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8012826:	68fa      	ldr	r2, [r7, #12]
 8012828:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801282c:	b292      	uxth	r2, r2
 801282e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	22ff      	movs	r2, #255	; 0xff
 8012834:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8012838:	2300      	movs	r3, #0
}
 801283a:	4618      	mov	r0, r3
 801283c:	3710      	adds	r7, #16
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
	...

08012844 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012844:	b480      	push	{r7}
 8012846:	b083      	sub	sp, #12
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2243      	movs	r2, #67	; 0x43
 8012850:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8012852:	4b03      	ldr	r3, [pc, #12]	; (8012860 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012854:	4618      	mov	r0, r3
 8012856:	370c      	adds	r7, #12
 8012858:	46bd      	mov	sp, r7
 801285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285e:	4770      	bx	lr
 8012860:	200000a4 	.word	0x200000a4

08012864 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012864:	b480      	push	{r7}
 8012866:	b083      	sub	sp, #12
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2243      	movs	r2, #67	; 0x43
 8012870:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8012872:	4b03      	ldr	r3, [pc, #12]	; (8012880 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012874:	4618      	mov	r0, r3
 8012876:	370c      	adds	r7, #12
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr
 8012880:	20000060 	.word	0x20000060

08012884 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012884:	b480      	push	{r7}
 8012886:	b083      	sub	sp, #12
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2243      	movs	r2, #67	; 0x43
 8012890:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8012892:	4b03      	ldr	r3, [pc, #12]	; (80128a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012894:	4618      	mov	r0, r3
 8012896:	370c      	adds	r7, #12
 8012898:	46bd      	mov	sp, r7
 801289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289e:	4770      	bx	lr
 80128a0:	200000e8 	.word	0x200000e8

080128a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80128a4:	b480      	push	{r7}
 80128a6:	b083      	sub	sp, #12
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	220a      	movs	r2, #10
 80128b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80128b2:	4b03      	ldr	r3, [pc, #12]	; (80128c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	370c      	adds	r7, #12
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr
 80128c0:	2000001c 	.word	0x2000001c

080128c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80128c4:	b480      	push	{r7}
 80128c6:	b085      	sub	sp, #20
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
 80128cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80128ce:	2302      	movs	r3, #2
 80128d0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d005      	beq.n	80128e4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	683a      	ldr	r2, [r7, #0]
 80128dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80128e0:	2300      	movs	r3, #0
 80128e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80128e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3714      	adds	r7, #20
 80128ea:	46bd      	mov	sp, r7
 80128ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f0:	4770      	bx	lr

080128f2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80128f2:	b480      	push	{r7}
 80128f4:	b087      	sub	sp, #28
 80128f6:	af00      	add	r7, sp, #0
 80128f8:	60f8      	str	r0, [r7, #12]
 80128fa:	60b9      	str	r1, [r7, #8]
 80128fc:	4613      	mov	r3, r2
 80128fe:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012906:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	68ba      	ldr	r2, [r7, #8]
 801290c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8012910:	88fa      	ldrh	r2, [r7, #6]
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8012918:	2300      	movs	r3, #0
}
 801291a:	4618      	mov	r0, r3
 801291c:	371c      	adds	r7, #28
 801291e:	46bd      	mov	sp, r7
 8012920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012924:	4770      	bx	lr

08012926 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8012926:	b480      	push	{r7}
 8012928:	b085      	sub	sp, #20
 801292a:	af00      	add	r7, sp, #0
 801292c:	6078      	str	r0, [r7, #4]
 801292e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012936:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	683a      	ldr	r2, [r7, #0]
 801293c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8012940:	2300      	movs	r3, #0
}
 8012942:	4618      	mov	r0, r3
 8012944:	3714      	adds	r7, #20
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr

0801294e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801294e:	b580      	push	{r7, lr}
 8012950:	b084      	sub	sp, #16
 8012952:	af00      	add	r7, sp, #0
 8012954:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801295c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012964:	2b00      	cmp	r3, #0
 8012966:	d01c      	beq.n	80129a2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801296e:	2b00      	cmp	r3, #0
 8012970:	d115      	bne.n	801299e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	2201      	movs	r2, #1
 8012976:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8012990:	b29b      	uxth	r3, r3
 8012992:	2181      	movs	r1, #129	; 0x81
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f004 fa79 	bl	8016e8c <USBD_LL_Transmit>

      return USBD_OK;
 801299a:	2300      	movs	r3, #0
 801299c:	e002      	b.n	80129a4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 801299e:	2301      	movs	r3, #1
 80129a0:	e000      	b.n	80129a4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80129a2:	2302      	movs	r3, #2
  }
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3710      	adds	r7, #16
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b084      	sub	sp, #16
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129ba:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d017      	beq.n	80129f6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	7c1b      	ldrb	r3, [r3, #16]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d109      	bne.n	80129e2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80129d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80129d8:	2101      	movs	r1, #1
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f004 fa79 	bl	8016ed2 <USBD_LL_PrepareReceive>
 80129e0:	e007      	b.n	80129f2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80129e8:	2340      	movs	r3, #64	; 0x40
 80129ea:	2101      	movs	r1, #1
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	f004 fa70 	bl	8016ed2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80129f2:	2300      	movs	r3, #0
 80129f4:	e000      	b.n	80129f8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80129f6:	2302      	movs	r3, #2
  }
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3710      	adds	r7, #16
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}

08012a00 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b084      	sub	sp, #16
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	60f8      	str	r0, [r7, #12]
 8012a08:	60b9      	str	r1, [r7, #8]
 8012a0a:	4613      	mov	r3, r2
 8012a0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d101      	bne.n	8012a18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8012a14:	2302      	movs	r3, #2
 8012a16:	e01a      	b.n	8012a4e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d003      	beq.n	8012a2a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	2200      	movs	r2, #0
 8012a26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012a2a:	68bb      	ldr	r3, [r7, #8]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d003      	beq.n	8012a38 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	68ba      	ldr	r2, [r7, #8]
 8012a34:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	2201      	movs	r2, #1
 8012a3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	79fa      	ldrb	r2, [r7, #7]
 8012a44:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8012a46:	68f8      	ldr	r0, [r7, #12]
 8012a48:	f004 f8dc 	bl	8016c04 <USBD_LL_Init>

  return USBD_OK;
 8012a4c:	2300      	movs	r3, #0
}
 8012a4e:	4618      	mov	r0, r3
 8012a50:	3710      	adds	r7, #16
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}

08012a56 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012a56:	b480      	push	{r7}
 8012a58:	b085      	sub	sp, #20
 8012a5a:	af00      	add	r7, sp, #0
 8012a5c:	6078      	str	r0, [r7, #4]
 8012a5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8012a60:	2300      	movs	r3, #0
 8012a62:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d006      	beq.n	8012a78 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	683a      	ldr	r2, [r7, #0]
 8012a6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8012a72:	2300      	movs	r3, #0
 8012a74:	73fb      	strb	r3, [r7, #15]
 8012a76:	e001      	b.n	8012a7c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8012a78:	2302      	movs	r3, #2
 8012a7a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3714      	adds	r7, #20
 8012a82:	46bd      	mov	sp, r7
 8012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a88:	4770      	bx	lr

08012a8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012a8a:	b580      	push	{r7, lr}
 8012a8c:	b082      	sub	sp, #8
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	f004 f910 	bl	8016cb8 <USBD_LL_Start>

  return USBD_OK;
 8012a98:	2300      	movs	r3, #0
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	3708      	adds	r7, #8
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}

08012aa2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012aa2:	b480      	push	{r7}
 8012aa4:	b083      	sub	sp, #12
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012aaa:	2300      	movs	r3, #0
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	370c      	adds	r7, #12
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab6:	4770      	bx	lr

08012ab8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b084      	sub	sp, #16
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	460b      	mov	r3, r1
 8012ac2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8012ac4:	2302      	movs	r3, #2
 8012ac6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d00c      	beq.n	8012aec <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	78fa      	ldrb	r2, [r7, #3]
 8012adc:	4611      	mov	r1, r2
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	4798      	blx	r3
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d101      	bne.n	8012aec <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8012aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3710      	adds	r7, #16
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}

08012af6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012af6:	b580      	push	{r7, lr}
 8012af8:	b082      	sub	sp, #8
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
 8012afe:	460b      	mov	r3, r1
 8012b00:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b08:	685b      	ldr	r3, [r3, #4]
 8012b0a:	78fa      	ldrb	r2, [r7, #3]
 8012b0c:	4611      	mov	r1, r2
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	4798      	blx	r3

  return USBD_OK;
 8012b12:	2300      	movs	r3, #0
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3708      	adds	r7, #8
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012b2c:	6839      	ldr	r1, [r7, #0]
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f000 fedb 	bl	80138ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2201      	movs	r2, #1
 8012b38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8012b42:	461a      	mov	r2, r3
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8012b50:	f003 031f 	and.w	r3, r3, #31
 8012b54:	2b02      	cmp	r3, #2
 8012b56:	d016      	beq.n	8012b86 <USBD_LL_SetupStage+0x6a>
 8012b58:	2b02      	cmp	r3, #2
 8012b5a:	d81c      	bhi.n	8012b96 <USBD_LL_SetupStage+0x7a>
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d002      	beq.n	8012b66 <USBD_LL_SetupStage+0x4a>
 8012b60:	2b01      	cmp	r3, #1
 8012b62:	d008      	beq.n	8012b76 <USBD_LL_SetupStage+0x5a>
 8012b64:	e017      	b.n	8012b96 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	6878      	ldr	r0, [r7, #4]
 8012b70:	f000 f9ce 	bl	8012f10 <USBD_StdDevReq>
      break;
 8012b74:	e01a      	b.n	8012bac <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f000 fa30 	bl	8012fe4 <USBD_StdItfReq>
      break;
 8012b84:	e012      	b.n	8012bac <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f000 fa70 	bl	8013074 <USBD_StdEPReq>
      break;
 8012b94:	e00a      	b.n	8012bac <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8012b9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	4619      	mov	r1, r3
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f004 f8e7 	bl	8016d78 <USBD_LL_StallEP>
      break;
 8012baa:	bf00      	nop
  }

  return USBD_OK;
 8012bac:	2300      	movs	r3, #0
}
 8012bae:	4618      	mov	r0, r3
 8012bb0:	3708      	adds	r7, #8
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}

08012bb6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012bb6:	b580      	push	{r7, lr}
 8012bb8:	b086      	sub	sp, #24
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	60f8      	str	r0, [r7, #12]
 8012bbe:	460b      	mov	r3, r1
 8012bc0:	607a      	str	r2, [r7, #4]
 8012bc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012bc4:	7afb      	ldrb	r3, [r7, #11]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d14b      	bne.n	8012c62 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012bd0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012bd8:	2b03      	cmp	r3, #3
 8012bda:	d134      	bne.n	8012c46 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	68da      	ldr	r2, [r3, #12]
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	691b      	ldr	r3, [r3, #16]
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d919      	bls.n	8012c1c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	68da      	ldr	r2, [r3, #12]
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	691b      	ldr	r3, [r3, #16]
 8012bf0:	1ad2      	subs	r2, r2, r3
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	68da      	ldr	r2, [r3, #12]
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	d203      	bcs.n	8012c0a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012c02:	697b      	ldr	r3, [r7, #20]
 8012c04:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	e002      	b.n	8012c10 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012c0a:	697b      	ldr	r3, [r7, #20]
 8012c0c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	461a      	mov	r2, r3
 8012c12:	6879      	ldr	r1, [r7, #4]
 8012c14:	68f8      	ldr	r0, [r7, #12]
 8012c16:	f000 ff5c 	bl	8013ad2 <USBD_CtlContinueRx>
 8012c1a:	e038      	b.n	8012c8e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c22:	691b      	ldr	r3, [r3, #16]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d00a      	beq.n	8012c3e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8012c2e:	2b03      	cmp	r3, #3
 8012c30:	d105      	bne.n	8012c3e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c38:	691b      	ldr	r3, [r3, #16]
 8012c3a:	68f8      	ldr	r0, [r7, #12]
 8012c3c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8012c3e:	68f8      	ldr	r0, [r7, #12]
 8012c40:	f000 ff59 	bl	8013af6 <USBD_CtlSendStatus>
 8012c44:	e023      	b.n	8012c8e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012c4c:	2b05      	cmp	r3, #5
 8012c4e:	d11e      	bne.n	8012c8e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	2200      	movs	r2, #0
 8012c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8012c58:	2100      	movs	r1, #0
 8012c5a:	68f8      	ldr	r0, [r7, #12]
 8012c5c:	f004 f88c 	bl	8016d78 <USBD_LL_StallEP>
 8012c60:	e015      	b.n	8012c8e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c68:	699b      	ldr	r3, [r3, #24]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d00d      	beq.n	8012c8a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8012c74:	2b03      	cmp	r3, #3
 8012c76:	d108      	bne.n	8012c8a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c7e:	699b      	ldr	r3, [r3, #24]
 8012c80:	7afa      	ldrb	r2, [r7, #11]
 8012c82:	4611      	mov	r1, r2
 8012c84:	68f8      	ldr	r0, [r7, #12]
 8012c86:	4798      	blx	r3
 8012c88:	e001      	b.n	8012c8e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012c8a:	2302      	movs	r3, #2
 8012c8c:	e000      	b.n	8012c90 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8012c8e:	2300      	movs	r3, #0
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	3718      	adds	r7, #24
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}

08012c98 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b086      	sub	sp, #24
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	60f8      	str	r0, [r7, #12]
 8012ca0:	460b      	mov	r3, r1
 8012ca2:	607a      	str	r2, [r7, #4]
 8012ca4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012ca6:	7afb      	ldrb	r3, [r7, #11]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d17f      	bne.n	8012dac <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	3314      	adds	r3, #20
 8012cb0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012cb8:	2b02      	cmp	r3, #2
 8012cba:	d15c      	bne.n	8012d76 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	68da      	ldr	r2, [r3, #12]
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	691b      	ldr	r3, [r3, #16]
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	d915      	bls.n	8012cf4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	68da      	ldr	r2, [r3, #12]
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	691b      	ldr	r3, [r3, #16]
 8012cd0:	1ad2      	subs	r2, r2, r3
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	68db      	ldr	r3, [r3, #12]
 8012cda:	b29b      	uxth	r3, r3
 8012cdc:	461a      	mov	r2, r3
 8012cde:	6879      	ldr	r1, [r7, #4]
 8012ce0:	68f8      	ldr	r0, [r7, #12]
 8012ce2:	f000 fec6 	bl	8013a72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	2200      	movs	r2, #0
 8012cea:	2100      	movs	r1, #0
 8012cec:	68f8      	ldr	r0, [r7, #12]
 8012cee:	f004 f8f0 	bl	8016ed2 <USBD_LL_PrepareReceive>
 8012cf2:	e04e      	b.n	8012d92 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8012cf4:	697b      	ldr	r3, [r7, #20]
 8012cf6:	689b      	ldr	r3, [r3, #8]
 8012cf8:	697a      	ldr	r2, [r7, #20]
 8012cfa:	6912      	ldr	r2, [r2, #16]
 8012cfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d00:	fb01 f202 	mul.w	r2, r1, r2
 8012d04:	1a9b      	subs	r3, r3, r2
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d11c      	bne.n	8012d44 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	689a      	ldr	r2, [r3, #8]
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8012d12:	429a      	cmp	r2, r3
 8012d14:	d316      	bcc.n	8012d44 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8012d16:	697b      	ldr	r3, [r7, #20]
 8012d18:	689a      	ldr	r2, [r3, #8]
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d20f      	bcs.n	8012d44 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012d24:	2200      	movs	r2, #0
 8012d26:	2100      	movs	r1, #0
 8012d28:	68f8      	ldr	r0, [r7, #12]
 8012d2a:	f000 fea2 	bl	8013a72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	2200      	movs	r2, #0
 8012d32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012d36:	2300      	movs	r3, #0
 8012d38:	2200      	movs	r2, #0
 8012d3a:	2100      	movs	r1, #0
 8012d3c:	68f8      	ldr	r0, [r7, #12]
 8012d3e:	f004 f8c8 	bl	8016ed2 <USBD_LL_PrepareReceive>
 8012d42:	e026      	b.n	8012d92 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d4a:	68db      	ldr	r3, [r3, #12]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d00a      	beq.n	8012d66 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8012d56:	2b03      	cmp	r3, #3
 8012d58:	d105      	bne.n	8012d66 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d60:	68db      	ldr	r3, [r3, #12]
 8012d62:	68f8      	ldr	r0, [r7, #12]
 8012d64:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8012d66:	2180      	movs	r1, #128	; 0x80
 8012d68:	68f8      	ldr	r0, [r7, #12]
 8012d6a:	f004 f805 	bl	8016d78 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8012d6e:	68f8      	ldr	r0, [r7, #12]
 8012d70:	f000 fed4 	bl	8013b1c <USBD_CtlReceiveStatus>
 8012d74:	e00d      	b.n	8012d92 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012d7c:	2b04      	cmp	r3, #4
 8012d7e:	d004      	beq.n	8012d8a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d103      	bne.n	8012d92 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8012d8a:	2180      	movs	r1, #128	; 0x80
 8012d8c:	68f8      	ldr	r0, [r7, #12]
 8012d8e:	f003 fff3 	bl	8016d78 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012d98:	2b01      	cmp	r3, #1
 8012d9a:	d11d      	bne.n	8012dd8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8012d9c:	68f8      	ldr	r0, [r7, #12]
 8012d9e:	f7ff fe80 	bl	8012aa2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	2200      	movs	r2, #0
 8012da6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012daa:	e015      	b.n	8012dd8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012db2:	695b      	ldr	r3, [r3, #20]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d00d      	beq.n	8012dd4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8012dbe:	2b03      	cmp	r3, #3
 8012dc0:	d108      	bne.n	8012dd4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012dc8:	695b      	ldr	r3, [r3, #20]
 8012dca:	7afa      	ldrb	r2, [r7, #11]
 8012dcc:	4611      	mov	r1, r2
 8012dce:	68f8      	ldr	r0, [r7, #12]
 8012dd0:	4798      	blx	r3
 8012dd2:	e001      	b.n	8012dd8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012dd4:	2302      	movs	r3, #2
 8012dd6:	e000      	b.n	8012dda <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8012dd8:	2300      	movs	r3, #0
}
 8012dda:	4618      	mov	r0, r3
 8012ddc:	3718      	adds	r7, #24
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}

08012de2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012de2:	b580      	push	{r7, lr}
 8012de4:	b082      	sub	sp, #8
 8012de6:	af00      	add	r7, sp, #0
 8012de8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012dea:	2340      	movs	r3, #64	; 0x40
 8012dec:	2200      	movs	r2, #0
 8012dee:	2100      	movs	r1, #0
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f003 ff7c 	bl	8016cee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2201      	movs	r2, #1
 8012dfa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2240      	movs	r2, #64	; 0x40
 8012e02:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012e06:	2340      	movs	r3, #64	; 0x40
 8012e08:	2200      	movs	r2, #0
 8012e0a:	2180      	movs	r1, #128	; 0x80
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f003 ff6e 	bl	8016cee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2201      	movs	r2, #1
 8012e16:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2240      	movs	r2, #64	; 0x40
 8012e1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	2201      	movs	r2, #1
 8012e22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	2200      	movs	r2, #0
 8012e2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	2200      	movs	r2, #0
 8012e32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2200      	movs	r2, #0
 8012e38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d009      	beq.n	8012e5a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	687a      	ldr	r2, [r7, #4]
 8012e50:	6852      	ldr	r2, [r2, #4]
 8012e52:	b2d2      	uxtb	r2, r2
 8012e54:	4611      	mov	r1, r2
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	4798      	blx	r3
  }

  return USBD_OK;
 8012e5a:	2300      	movs	r3, #0
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3708      	adds	r7, #8
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}

08012e64 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012e64:	b480      	push	{r7}
 8012e66:	b083      	sub	sp, #12
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	460b      	mov	r3, r1
 8012e6e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	78fa      	ldrb	r2, [r7, #3]
 8012e74:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012e76:	2300      	movs	r3, #0
}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	370c      	adds	r7, #12
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e82:	4770      	bx	lr

08012e84 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012e84:	b480      	push	{r7}
 8012e86:	b083      	sub	sp, #12
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2204      	movs	r2, #4
 8012e9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012ea0:	2300      	movs	r3, #0
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	370c      	adds	r7, #12
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eac:	4770      	bx	lr

08012eae <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012eae:	b480      	push	{r7}
 8012eb0:	b083      	sub	sp, #12
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ebc:	2b04      	cmp	r3, #4
 8012ebe:	d105      	bne.n	8012ecc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012ecc:	2300      	movs	r3, #0
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	370c      	adds	r7, #12
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr

08012eda <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012eda:	b580      	push	{r7, lr}
 8012edc:	b082      	sub	sp, #8
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ee8:	2b03      	cmp	r3, #3
 8012eea:	d10b      	bne.n	8012f04 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ef2:	69db      	ldr	r3, [r3, #28]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d005      	beq.n	8012f04 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012efe:	69db      	ldr	r3, [r3, #28]
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012f04:	2300      	movs	r3, #0
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3708      	adds	r7, #8
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
	...

08012f10 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b084      	sub	sp, #16
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
 8012f18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	781b      	ldrb	r3, [r3, #0]
 8012f22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012f26:	2b40      	cmp	r3, #64	; 0x40
 8012f28:	d005      	beq.n	8012f36 <USBD_StdDevReq+0x26>
 8012f2a:	2b40      	cmp	r3, #64	; 0x40
 8012f2c:	d84f      	bhi.n	8012fce <USBD_StdDevReq+0xbe>
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d009      	beq.n	8012f46 <USBD_StdDevReq+0x36>
 8012f32:	2b20      	cmp	r3, #32
 8012f34:	d14b      	bne.n	8012fce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012f3c:	689b      	ldr	r3, [r3, #8]
 8012f3e:	6839      	ldr	r1, [r7, #0]
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	4798      	blx	r3
      break;
 8012f44:	e048      	b.n	8012fd8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	785b      	ldrb	r3, [r3, #1]
 8012f4a:	2b09      	cmp	r3, #9
 8012f4c:	d839      	bhi.n	8012fc2 <USBD_StdDevReq+0xb2>
 8012f4e:	a201      	add	r2, pc, #4	; (adr r2, 8012f54 <USBD_StdDevReq+0x44>)
 8012f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f54:	08012fa5 	.word	0x08012fa5
 8012f58:	08012fb9 	.word	0x08012fb9
 8012f5c:	08012fc3 	.word	0x08012fc3
 8012f60:	08012faf 	.word	0x08012faf
 8012f64:	08012fc3 	.word	0x08012fc3
 8012f68:	08012f87 	.word	0x08012f87
 8012f6c:	08012f7d 	.word	0x08012f7d
 8012f70:	08012fc3 	.word	0x08012fc3
 8012f74:	08012f9b 	.word	0x08012f9b
 8012f78:	08012f91 	.word	0x08012f91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012f7c:	6839      	ldr	r1, [r7, #0]
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f000 f9dc 	bl	801333c <USBD_GetDescriptor>
          break;
 8012f84:	e022      	b.n	8012fcc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012f86:	6839      	ldr	r1, [r7, #0]
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f000 fb3f 	bl	801360c <USBD_SetAddress>
          break;
 8012f8e:	e01d      	b.n	8012fcc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8012f90:	6839      	ldr	r1, [r7, #0]
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	f000 fb7e 	bl	8013694 <USBD_SetConfig>
          break;
 8012f98:	e018      	b.n	8012fcc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012f9a:	6839      	ldr	r1, [r7, #0]
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f000 fc07 	bl	80137b0 <USBD_GetConfig>
          break;
 8012fa2:	e013      	b.n	8012fcc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012fa4:	6839      	ldr	r1, [r7, #0]
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f000 fc37 	bl	801381a <USBD_GetStatus>
          break;
 8012fac:	e00e      	b.n	8012fcc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012fae:	6839      	ldr	r1, [r7, #0]
 8012fb0:	6878      	ldr	r0, [r7, #4]
 8012fb2:	f000 fc65 	bl	8013880 <USBD_SetFeature>
          break;
 8012fb6:	e009      	b.n	8012fcc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012fb8:	6839      	ldr	r1, [r7, #0]
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f000 fc74 	bl	80138a8 <USBD_ClrFeature>
          break;
 8012fc0:	e004      	b.n	8012fcc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8012fc2:	6839      	ldr	r1, [r7, #0]
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f000 fccd 	bl	8013964 <USBD_CtlError>
          break;
 8012fca:	bf00      	nop
      }
      break;
 8012fcc:	e004      	b.n	8012fd8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8012fce:	6839      	ldr	r1, [r7, #0]
 8012fd0:	6878      	ldr	r0, [r7, #4]
 8012fd2:	f000 fcc7 	bl	8013964 <USBD_CtlError>
      break;
 8012fd6:	bf00      	nop
  }

  return ret;
 8012fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3710      	adds	r7, #16
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}
 8012fe2:	bf00      	nop

08012fe4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b084      	sub	sp, #16
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012ff2:	683b      	ldr	r3, [r7, #0]
 8012ff4:	781b      	ldrb	r3, [r3, #0]
 8012ff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012ffa:	2b40      	cmp	r3, #64	; 0x40
 8012ffc:	d005      	beq.n	801300a <USBD_StdItfReq+0x26>
 8012ffe:	2b40      	cmp	r3, #64	; 0x40
 8013000:	d82e      	bhi.n	8013060 <USBD_StdItfReq+0x7c>
 8013002:	2b00      	cmp	r3, #0
 8013004:	d001      	beq.n	801300a <USBD_StdItfReq+0x26>
 8013006:	2b20      	cmp	r3, #32
 8013008:	d12a      	bne.n	8013060 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013010:	3b01      	subs	r3, #1
 8013012:	2b02      	cmp	r3, #2
 8013014:	d81d      	bhi.n	8013052 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	889b      	ldrh	r3, [r3, #4]
 801301a:	b2db      	uxtb	r3, r3
 801301c:	2b01      	cmp	r3, #1
 801301e:	d813      	bhi.n	8013048 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013026:	689b      	ldr	r3, [r3, #8]
 8013028:	6839      	ldr	r1, [r7, #0]
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	4798      	blx	r3
 801302e:	4603      	mov	r3, r0
 8013030:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	88db      	ldrh	r3, [r3, #6]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d110      	bne.n	801305c <USBD_StdItfReq+0x78>
 801303a:	7bfb      	ldrb	r3, [r7, #15]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d10d      	bne.n	801305c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f000 fd58 	bl	8013af6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013046:	e009      	b.n	801305c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8013048:	6839      	ldr	r1, [r7, #0]
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f000 fc8a 	bl	8013964 <USBD_CtlError>
          break;
 8013050:	e004      	b.n	801305c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8013052:	6839      	ldr	r1, [r7, #0]
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f000 fc85 	bl	8013964 <USBD_CtlError>
          break;
 801305a:	e000      	b.n	801305e <USBD_StdItfReq+0x7a>
          break;
 801305c:	bf00      	nop
      }
      break;
 801305e:	e004      	b.n	801306a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8013060:	6839      	ldr	r1, [r7, #0]
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f000 fc7e 	bl	8013964 <USBD_CtlError>
      break;
 8013068:	bf00      	nop
  }

  return USBD_OK;
 801306a:	2300      	movs	r3, #0
}
 801306c:	4618      	mov	r0, r3
 801306e:	3710      	adds	r7, #16
 8013070:	46bd      	mov	sp, r7
 8013072:	bd80      	pop	{r7, pc}

08013074 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b084      	sub	sp, #16
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801307e:	2300      	movs	r3, #0
 8013080:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8013082:	683b      	ldr	r3, [r7, #0]
 8013084:	889b      	ldrh	r3, [r3, #4]
 8013086:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013090:	2b40      	cmp	r3, #64	; 0x40
 8013092:	d007      	beq.n	80130a4 <USBD_StdEPReq+0x30>
 8013094:	2b40      	cmp	r3, #64	; 0x40
 8013096:	f200 8146 	bhi.w	8013326 <USBD_StdEPReq+0x2b2>
 801309a:	2b00      	cmp	r3, #0
 801309c:	d00a      	beq.n	80130b4 <USBD_StdEPReq+0x40>
 801309e:	2b20      	cmp	r3, #32
 80130a0:	f040 8141 	bne.w	8013326 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80130aa:	689b      	ldr	r3, [r3, #8]
 80130ac:	6839      	ldr	r1, [r7, #0]
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	4798      	blx	r3
      break;
 80130b2:	e13d      	b.n	8013330 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	781b      	ldrb	r3, [r3, #0]
 80130b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80130bc:	2b20      	cmp	r3, #32
 80130be:	d10a      	bne.n	80130d6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80130c6:	689b      	ldr	r3, [r3, #8]
 80130c8:	6839      	ldr	r1, [r7, #0]
 80130ca:	6878      	ldr	r0, [r7, #4]
 80130cc:	4798      	blx	r3
 80130ce:	4603      	mov	r3, r0
 80130d0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80130d2:	7bfb      	ldrb	r3, [r7, #15]
 80130d4:	e12d      	b.n	8013332 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	785b      	ldrb	r3, [r3, #1]
 80130da:	2b03      	cmp	r3, #3
 80130dc:	d007      	beq.n	80130ee <USBD_StdEPReq+0x7a>
 80130de:	2b03      	cmp	r3, #3
 80130e0:	f300 811b 	bgt.w	801331a <USBD_StdEPReq+0x2a6>
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d072      	beq.n	80131ce <USBD_StdEPReq+0x15a>
 80130e8:	2b01      	cmp	r3, #1
 80130ea:	d03a      	beq.n	8013162 <USBD_StdEPReq+0xee>
 80130ec:	e115      	b.n	801331a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130f4:	2b02      	cmp	r3, #2
 80130f6:	d002      	beq.n	80130fe <USBD_StdEPReq+0x8a>
 80130f8:	2b03      	cmp	r3, #3
 80130fa:	d015      	beq.n	8013128 <USBD_StdEPReq+0xb4>
 80130fc:	e02b      	b.n	8013156 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80130fe:	7bbb      	ldrb	r3, [r7, #14]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d00c      	beq.n	801311e <USBD_StdEPReq+0xaa>
 8013104:	7bbb      	ldrb	r3, [r7, #14]
 8013106:	2b80      	cmp	r3, #128	; 0x80
 8013108:	d009      	beq.n	801311e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801310a:	7bbb      	ldrb	r3, [r7, #14]
 801310c:	4619      	mov	r1, r3
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f003 fe32 	bl	8016d78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013114:	2180      	movs	r1, #128	; 0x80
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f003 fe2e 	bl	8016d78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801311c:	e020      	b.n	8013160 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 801311e:	6839      	ldr	r1, [r7, #0]
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f000 fc1f 	bl	8013964 <USBD_CtlError>
              break;
 8013126:	e01b      	b.n	8013160 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	885b      	ldrh	r3, [r3, #2]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d10e      	bne.n	801314e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8013130:	7bbb      	ldrb	r3, [r7, #14]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d00b      	beq.n	801314e <USBD_StdEPReq+0xda>
 8013136:	7bbb      	ldrb	r3, [r7, #14]
 8013138:	2b80      	cmp	r3, #128	; 0x80
 801313a:	d008      	beq.n	801314e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	88db      	ldrh	r3, [r3, #6]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d104      	bne.n	801314e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8013144:	7bbb      	ldrb	r3, [r7, #14]
 8013146:	4619      	mov	r1, r3
 8013148:	6878      	ldr	r0, [r7, #4]
 801314a:	f003 fe15 	bl	8016d78 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f000 fcd1 	bl	8013af6 <USBD_CtlSendStatus>

              break;
 8013154:	e004      	b.n	8013160 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8013156:	6839      	ldr	r1, [r7, #0]
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f000 fc03 	bl	8013964 <USBD_CtlError>
              break;
 801315e:	bf00      	nop
          }
          break;
 8013160:	e0e0      	b.n	8013324 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013168:	2b02      	cmp	r3, #2
 801316a:	d002      	beq.n	8013172 <USBD_StdEPReq+0xfe>
 801316c:	2b03      	cmp	r3, #3
 801316e:	d015      	beq.n	801319c <USBD_StdEPReq+0x128>
 8013170:	e026      	b.n	80131c0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013172:	7bbb      	ldrb	r3, [r7, #14]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d00c      	beq.n	8013192 <USBD_StdEPReq+0x11e>
 8013178:	7bbb      	ldrb	r3, [r7, #14]
 801317a:	2b80      	cmp	r3, #128	; 0x80
 801317c:	d009      	beq.n	8013192 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801317e:	7bbb      	ldrb	r3, [r7, #14]
 8013180:	4619      	mov	r1, r3
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f003 fdf8 	bl	8016d78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013188:	2180      	movs	r1, #128	; 0x80
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f003 fdf4 	bl	8016d78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013190:	e01c      	b.n	80131cc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8013192:	6839      	ldr	r1, [r7, #0]
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f000 fbe5 	bl	8013964 <USBD_CtlError>
              break;
 801319a:	e017      	b.n	80131cc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	885b      	ldrh	r3, [r3, #2]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d112      	bne.n	80131ca <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80131a4:	7bbb      	ldrb	r3, [r7, #14]
 80131a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d004      	beq.n	80131b8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80131ae:	7bbb      	ldrb	r3, [r7, #14]
 80131b0:	4619      	mov	r1, r3
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f003 fdff 	bl	8016db6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80131b8:	6878      	ldr	r0, [r7, #4]
 80131ba:	f000 fc9c 	bl	8013af6 <USBD_CtlSendStatus>
              }
              break;
 80131be:	e004      	b.n	80131ca <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80131c0:	6839      	ldr	r1, [r7, #0]
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f000 fbce 	bl	8013964 <USBD_CtlError>
              break;
 80131c8:	e000      	b.n	80131cc <USBD_StdEPReq+0x158>
              break;
 80131ca:	bf00      	nop
          }
          break;
 80131cc:	e0aa      	b.n	8013324 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80131d4:	2b02      	cmp	r3, #2
 80131d6:	d002      	beq.n	80131de <USBD_StdEPReq+0x16a>
 80131d8:	2b03      	cmp	r3, #3
 80131da:	d032      	beq.n	8013242 <USBD_StdEPReq+0x1ce>
 80131dc:	e097      	b.n	801330e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80131de:	7bbb      	ldrb	r3, [r7, #14]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d007      	beq.n	80131f4 <USBD_StdEPReq+0x180>
 80131e4:	7bbb      	ldrb	r3, [r7, #14]
 80131e6:	2b80      	cmp	r3, #128	; 0x80
 80131e8:	d004      	beq.n	80131f4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80131ea:	6839      	ldr	r1, [r7, #0]
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f000 fbb9 	bl	8013964 <USBD_CtlError>
                break;
 80131f2:	e091      	b.n	8013318 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80131f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	da0b      	bge.n	8013214 <USBD_StdEPReq+0x1a0>
 80131fc:	7bbb      	ldrb	r3, [r7, #14]
 80131fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013202:	4613      	mov	r3, r2
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	4413      	add	r3, r2
 8013208:	009b      	lsls	r3, r3, #2
 801320a:	3310      	adds	r3, #16
 801320c:	687a      	ldr	r2, [r7, #4]
 801320e:	4413      	add	r3, r2
 8013210:	3304      	adds	r3, #4
 8013212:	e00b      	b.n	801322c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013214:	7bbb      	ldrb	r3, [r7, #14]
 8013216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801321a:	4613      	mov	r3, r2
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	4413      	add	r3, r2
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013226:	687a      	ldr	r2, [r7, #4]
 8013228:	4413      	add	r3, r2
 801322a:	3304      	adds	r3, #4
 801322c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	2200      	movs	r2, #0
 8013232:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	2202      	movs	r2, #2
 8013238:	4619      	mov	r1, r3
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f000 fbfd 	bl	8013a3a <USBD_CtlSendData>
              break;
 8013240:	e06a      	b.n	8013318 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013242:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013246:	2b00      	cmp	r3, #0
 8013248:	da11      	bge.n	801326e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801324a:	7bbb      	ldrb	r3, [r7, #14]
 801324c:	f003 020f 	and.w	r2, r3, #15
 8013250:	6879      	ldr	r1, [r7, #4]
 8013252:	4613      	mov	r3, r2
 8013254:	009b      	lsls	r3, r3, #2
 8013256:	4413      	add	r3, r2
 8013258:	009b      	lsls	r3, r3, #2
 801325a:	440b      	add	r3, r1
 801325c:	3318      	adds	r3, #24
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d117      	bne.n	8013294 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8013264:	6839      	ldr	r1, [r7, #0]
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f000 fb7c 	bl	8013964 <USBD_CtlError>
                  break;
 801326c:	e054      	b.n	8013318 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801326e:	7bbb      	ldrb	r3, [r7, #14]
 8013270:	f003 020f 	and.w	r2, r3, #15
 8013274:	6879      	ldr	r1, [r7, #4]
 8013276:	4613      	mov	r3, r2
 8013278:	009b      	lsls	r3, r3, #2
 801327a:	4413      	add	r3, r2
 801327c:	009b      	lsls	r3, r3, #2
 801327e:	440b      	add	r3, r1
 8013280:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d104      	bne.n	8013294 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 801328a:	6839      	ldr	r1, [r7, #0]
 801328c:	6878      	ldr	r0, [r7, #4]
 801328e:	f000 fb69 	bl	8013964 <USBD_CtlError>
                  break;
 8013292:	e041      	b.n	8013318 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013294:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013298:	2b00      	cmp	r3, #0
 801329a:	da0b      	bge.n	80132b4 <USBD_StdEPReq+0x240>
 801329c:	7bbb      	ldrb	r3, [r7, #14]
 801329e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80132a2:	4613      	mov	r3, r2
 80132a4:	009b      	lsls	r3, r3, #2
 80132a6:	4413      	add	r3, r2
 80132a8:	009b      	lsls	r3, r3, #2
 80132aa:	3310      	adds	r3, #16
 80132ac:	687a      	ldr	r2, [r7, #4]
 80132ae:	4413      	add	r3, r2
 80132b0:	3304      	adds	r3, #4
 80132b2:	e00b      	b.n	80132cc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80132b4:	7bbb      	ldrb	r3, [r7, #14]
 80132b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80132ba:	4613      	mov	r3, r2
 80132bc:	009b      	lsls	r3, r3, #2
 80132be:	4413      	add	r3, r2
 80132c0:	009b      	lsls	r3, r3, #2
 80132c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80132c6:	687a      	ldr	r2, [r7, #4]
 80132c8:	4413      	add	r3, r2
 80132ca:	3304      	adds	r3, #4
 80132cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80132ce:	7bbb      	ldrb	r3, [r7, #14]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d002      	beq.n	80132da <USBD_StdEPReq+0x266>
 80132d4:	7bbb      	ldrb	r3, [r7, #14]
 80132d6:	2b80      	cmp	r3, #128	; 0x80
 80132d8:	d103      	bne.n	80132e2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	2200      	movs	r2, #0
 80132de:	601a      	str	r2, [r3, #0]
 80132e0:	e00e      	b.n	8013300 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80132e2:	7bbb      	ldrb	r3, [r7, #14]
 80132e4:	4619      	mov	r1, r3
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f003 fd84 	bl	8016df4 <USBD_LL_IsStallEP>
 80132ec:	4603      	mov	r3, r0
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d003      	beq.n	80132fa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	2201      	movs	r2, #1
 80132f6:	601a      	str	r2, [r3, #0]
 80132f8:	e002      	b.n	8013300 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	2200      	movs	r2, #0
 80132fe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8013300:	68bb      	ldr	r3, [r7, #8]
 8013302:	2202      	movs	r2, #2
 8013304:	4619      	mov	r1, r3
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f000 fb97 	bl	8013a3a <USBD_CtlSendData>
              break;
 801330c:	e004      	b.n	8013318 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 801330e:	6839      	ldr	r1, [r7, #0]
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f000 fb27 	bl	8013964 <USBD_CtlError>
              break;
 8013316:	bf00      	nop
          }
          break;
 8013318:	e004      	b.n	8013324 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 801331a:	6839      	ldr	r1, [r7, #0]
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f000 fb21 	bl	8013964 <USBD_CtlError>
          break;
 8013322:	bf00      	nop
      }
      break;
 8013324:	e004      	b.n	8013330 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8013326:	6839      	ldr	r1, [r7, #0]
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f000 fb1b 	bl	8013964 <USBD_CtlError>
      break;
 801332e:	bf00      	nop
  }

  return ret;
 8013330:	7bfb      	ldrb	r3, [r7, #15]
}
 8013332:	4618      	mov	r0, r3
 8013334:	3710      	adds	r7, #16
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}
	...

0801333c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013346:	2300      	movs	r3, #0
 8013348:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801334a:	2300      	movs	r3, #0
 801334c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801334e:	2300      	movs	r3, #0
 8013350:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	885b      	ldrh	r3, [r3, #2]
 8013356:	0a1b      	lsrs	r3, r3, #8
 8013358:	b29b      	uxth	r3, r3
 801335a:	3b01      	subs	r3, #1
 801335c:	2b06      	cmp	r3, #6
 801335e:	f200 8128 	bhi.w	80135b2 <USBD_GetDescriptor+0x276>
 8013362:	a201      	add	r2, pc, #4	; (adr r2, 8013368 <USBD_GetDescriptor+0x2c>)
 8013364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013368:	08013385 	.word	0x08013385
 801336c:	0801339d 	.word	0x0801339d
 8013370:	080133dd 	.word	0x080133dd
 8013374:	080135b3 	.word	0x080135b3
 8013378:	080135b3 	.word	0x080135b3
 801337c:	08013553 	.word	0x08013553
 8013380:	0801357f 	.word	0x0801357f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	7c12      	ldrb	r2, [r2, #16]
 8013390:	f107 0108 	add.w	r1, r7, #8
 8013394:	4610      	mov	r0, r2
 8013396:	4798      	blx	r3
 8013398:	60f8      	str	r0, [r7, #12]
      break;
 801339a:	e112      	b.n	80135c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	7c1b      	ldrb	r3, [r3, #16]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10d      	bne.n	80133c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80133aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133ac:	f107 0208 	add.w	r2, r7, #8
 80133b0:	4610      	mov	r0, r2
 80133b2:	4798      	blx	r3
 80133b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	3301      	adds	r3, #1
 80133ba:	2202      	movs	r2, #2
 80133bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80133be:	e100      	b.n	80135c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80133c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133c8:	f107 0208 	add.w	r2, r7, #8
 80133cc:	4610      	mov	r0, r2
 80133ce:	4798      	blx	r3
 80133d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	3301      	adds	r3, #1
 80133d6:	2202      	movs	r2, #2
 80133d8:	701a      	strb	r2, [r3, #0]
      break;
 80133da:	e0f2      	b.n	80135c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	885b      	ldrh	r3, [r3, #2]
 80133e0:	b2db      	uxtb	r3, r3
 80133e2:	2b05      	cmp	r3, #5
 80133e4:	f200 80ac 	bhi.w	8013540 <USBD_GetDescriptor+0x204>
 80133e8:	a201      	add	r2, pc, #4	; (adr r2, 80133f0 <USBD_GetDescriptor+0xb4>)
 80133ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ee:	bf00      	nop
 80133f0:	08013409 	.word	0x08013409
 80133f4:	0801343d 	.word	0x0801343d
 80133f8:	08013471 	.word	0x08013471
 80133fc:	080134a5 	.word	0x080134a5
 8013400:	080134d9 	.word	0x080134d9
 8013404:	0801350d 	.word	0x0801350d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801340e:	685b      	ldr	r3, [r3, #4]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d00b      	beq.n	801342c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801341a:	685b      	ldr	r3, [r3, #4]
 801341c:	687a      	ldr	r2, [r7, #4]
 801341e:	7c12      	ldrb	r2, [r2, #16]
 8013420:	f107 0108 	add.w	r1, r7, #8
 8013424:	4610      	mov	r0, r2
 8013426:	4798      	blx	r3
 8013428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801342a:	e091      	b.n	8013550 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801342c:	6839      	ldr	r1, [r7, #0]
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f000 fa98 	bl	8013964 <USBD_CtlError>
            err++;
 8013434:	7afb      	ldrb	r3, [r7, #11]
 8013436:	3301      	adds	r3, #1
 8013438:	72fb      	strb	r3, [r7, #11]
          break;
 801343a:	e089      	b.n	8013550 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013442:	689b      	ldr	r3, [r3, #8]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d00b      	beq.n	8013460 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801344e:	689b      	ldr	r3, [r3, #8]
 8013450:	687a      	ldr	r2, [r7, #4]
 8013452:	7c12      	ldrb	r2, [r2, #16]
 8013454:	f107 0108 	add.w	r1, r7, #8
 8013458:	4610      	mov	r0, r2
 801345a:	4798      	blx	r3
 801345c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801345e:	e077      	b.n	8013550 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013460:	6839      	ldr	r1, [r7, #0]
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f000 fa7e 	bl	8013964 <USBD_CtlError>
            err++;
 8013468:	7afb      	ldrb	r3, [r7, #11]
 801346a:	3301      	adds	r3, #1
 801346c:	72fb      	strb	r3, [r7, #11]
          break;
 801346e:	e06f      	b.n	8013550 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013476:	68db      	ldr	r3, [r3, #12]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d00b      	beq.n	8013494 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013482:	68db      	ldr	r3, [r3, #12]
 8013484:	687a      	ldr	r2, [r7, #4]
 8013486:	7c12      	ldrb	r2, [r2, #16]
 8013488:	f107 0108 	add.w	r1, r7, #8
 801348c:	4610      	mov	r0, r2
 801348e:	4798      	blx	r3
 8013490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013492:	e05d      	b.n	8013550 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013494:	6839      	ldr	r1, [r7, #0]
 8013496:	6878      	ldr	r0, [r7, #4]
 8013498:	f000 fa64 	bl	8013964 <USBD_CtlError>
            err++;
 801349c:	7afb      	ldrb	r3, [r7, #11]
 801349e:	3301      	adds	r3, #1
 80134a0:	72fb      	strb	r3, [r7, #11]
          break;
 80134a2:	e055      	b.n	8013550 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80134aa:	691b      	ldr	r3, [r3, #16]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d00b      	beq.n	80134c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80134b6:	691b      	ldr	r3, [r3, #16]
 80134b8:	687a      	ldr	r2, [r7, #4]
 80134ba:	7c12      	ldrb	r2, [r2, #16]
 80134bc:	f107 0108 	add.w	r1, r7, #8
 80134c0:	4610      	mov	r0, r2
 80134c2:	4798      	blx	r3
 80134c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80134c6:	e043      	b.n	8013550 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80134c8:	6839      	ldr	r1, [r7, #0]
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f000 fa4a 	bl	8013964 <USBD_CtlError>
            err++;
 80134d0:	7afb      	ldrb	r3, [r7, #11]
 80134d2:	3301      	adds	r3, #1
 80134d4:	72fb      	strb	r3, [r7, #11]
          break;
 80134d6:	e03b      	b.n	8013550 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80134de:	695b      	ldr	r3, [r3, #20]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d00b      	beq.n	80134fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80134ea:	695b      	ldr	r3, [r3, #20]
 80134ec:	687a      	ldr	r2, [r7, #4]
 80134ee:	7c12      	ldrb	r2, [r2, #16]
 80134f0:	f107 0108 	add.w	r1, r7, #8
 80134f4:	4610      	mov	r0, r2
 80134f6:	4798      	blx	r3
 80134f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80134fa:	e029      	b.n	8013550 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80134fc:	6839      	ldr	r1, [r7, #0]
 80134fe:	6878      	ldr	r0, [r7, #4]
 8013500:	f000 fa30 	bl	8013964 <USBD_CtlError>
            err++;
 8013504:	7afb      	ldrb	r3, [r7, #11]
 8013506:	3301      	adds	r3, #1
 8013508:	72fb      	strb	r3, [r7, #11]
          break;
 801350a:	e021      	b.n	8013550 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013512:	699b      	ldr	r3, [r3, #24]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d00b      	beq.n	8013530 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801351e:	699b      	ldr	r3, [r3, #24]
 8013520:	687a      	ldr	r2, [r7, #4]
 8013522:	7c12      	ldrb	r2, [r2, #16]
 8013524:	f107 0108 	add.w	r1, r7, #8
 8013528:	4610      	mov	r0, r2
 801352a:	4798      	blx	r3
 801352c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801352e:	e00f      	b.n	8013550 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013530:	6839      	ldr	r1, [r7, #0]
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f000 fa16 	bl	8013964 <USBD_CtlError>
            err++;
 8013538:	7afb      	ldrb	r3, [r7, #11]
 801353a:	3301      	adds	r3, #1
 801353c:	72fb      	strb	r3, [r7, #11]
          break;
 801353e:	e007      	b.n	8013550 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8013540:	6839      	ldr	r1, [r7, #0]
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	f000 fa0e 	bl	8013964 <USBD_CtlError>
          err++;
 8013548:	7afb      	ldrb	r3, [r7, #11]
 801354a:	3301      	adds	r3, #1
 801354c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801354e:	e038      	b.n	80135c2 <USBD_GetDescriptor+0x286>
 8013550:	e037      	b.n	80135c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	7c1b      	ldrb	r3, [r3, #16]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d109      	bne.n	801356e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013562:	f107 0208 	add.w	r2, r7, #8
 8013566:	4610      	mov	r0, r2
 8013568:	4798      	blx	r3
 801356a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801356c:	e029      	b.n	80135c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801356e:	6839      	ldr	r1, [r7, #0]
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f000 f9f7 	bl	8013964 <USBD_CtlError>
        err++;
 8013576:	7afb      	ldrb	r3, [r7, #11]
 8013578:	3301      	adds	r3, #1
 801357a:	72fb      	strb	r3, [r7, #11]
      break;
 801357c:	e021      	b.n	80135c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	7c1b      	ldrb	r3, [r3, #16]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d10d      	bne.n	80135a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801358e:	f107 0208 	add.w	r2, r7, #8
 8013592:	4610      	mov	r0, r2
 8013594:	4798      	blx	r3
 8013596:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	3301      	adds	r3, #1
 801359c:	2207      	movs	r2, #7
 801359e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80135a0:	e00f      	b.n	80135c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80135a2:	6839      	ldr	r1, [r7, #0]
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f000 f9dd 	bl	8013964 <USBD_CtlError>
        err++;
 80135aa:	7afb      	ldrb	r3, [r7, #11]
 80135ac:	3301      	adds	r3, #1
 80135ae:	72fb      	strb	r3, [r7, #11]
      break;
 80135b0:	e007      	b.n	80135c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80135b2:	6839      	ldr	r1, [r7, #0]
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f000 f9d5 	bl	8013964 <USBD_CtlError>
      err++;
 80135ba:	7afb      	ldrb	r3, [r7, #11]
 80135bc:	3301      	adds	r3, #1
 80135be:	72fb      	strb	r3, [r7, #11]
      break;
 80135c0:	bf00      	nop
  }

  if (err != 0U)
 80135c2:	7afb      	ldrb	r3, [r7, #11]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d11c      	bne.n	8013602 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80135c8:	893b      	ldrh	r3, [r7, #8]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d011      	beq.n	80135f2 <USBD_GetDescriptor+0x2b6>
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	88db      	ldrh	r3, [r3, #6]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d00d      	beq.n	80135f2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	88da      	ldrh	r2, [r3, #6]
 80135da:	893b      	ldrh	r3, [r7, #8]
 80135dc:	4293      	cmp	r3, r2
 80135de:	bf28      	it	cs
 80135e0:	4613      	movcs	r3, r2
 80135e2:	b29b      	uxth	r3, r3
 80135e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80135e6:	893b      	ldrh	r3, [r7, #8]
 80135e8:	461a      	mov	r2, r3
 80135ea:	68f9      	ldr	r1, [r7, #12]
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f000 fa24 	bl	8013a3a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	88db      	ldrh	r3, [r3, #6]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d104      	bne.n	8013604 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f000 fa7b 	bl	8013af6 <USBD_CtlSendStatus>
 8013600:	e000      	b.n	8013604 <USBD_GetDescriptor+0x2c8>
    return;
 8013602:	bf00      	nop
    }
  }
}
 8013604:	3710      	adds	r7, #16
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop

0801360c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b084      	sub	sp, #16
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013616:	683b      	ldr	r3, [r7, #0]
 8013618:	889b      	ldrh	r3, [r3, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d130      	bne.n	8013680 <USBD_SetAddress+0x74>
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	88db      	ldrh	r3, [r3, #6]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d12c      	bne.n	8013680 <USBD_SetAddress+0x74>
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	885b      	ldrh	r3, [r3, #2]
 801362a:	2b7f      	cmp	r3, #127	; 0x7f
 801362c:	d828      	bhi.n	8013680 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	885b      	ldrh	r3, [r3, #2]
 8013632:	b2db      	uxtb	r3, r3
 8013634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013638:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013640:	2b03      	cmp	r3, #3
 8013642:	d104      	bne.n	801364e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8013644:	6839      	ldr	r1, [r7, #0]
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f000 f98c 	bl	8013964 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801364c:	e01d      	b.n	801368a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	7bfa      	ldrb	r2, [r7, #15]
 8013652:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013656:	7bfb      	ldrb	r3, [r7, #15]
 8013658:	4619      	mov	r1, r3
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f003 fbf7 	bl	8016e4e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f000 fa48 	bl	8013af6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013666:	7bfb      	ldrb	r3, [r7, #15]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d004      	beq.n	8013676 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2202      	movs	r2, #2
 8013670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013674:	e009      	b.n	801368a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	2201      	movs	r2, #1
 801367a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801367e:	e004      	b.n	801368a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013680:	6839      	ldr	r1, [r7, #0]
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f000 f96e 	bl	8013964 <USBD_CtlError>
  }
}
 8013688:	bf00      	nop
 801368a:	bf00      	nop
 801368c:	3710      	adds	r7, #16
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
	...

08013694 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	885b      	ldrh	r3, [r3, #2]
 80136a2:	b2da      	uxtb	r2, r3
 80136a4:	4b41      	ldr	r3, [pc, #260]	; (80137ac <USBD_SetConfig+0x118>)
 80136a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80136a8:	4b40      	ldr	r3, [pc, #256]	; (80137ac <USBD_SetConfig+0x118>)
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	2b01      	cmp	r3, #1
 80136ae:	d904      	bls.n	80136ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80136b0:	6839      	ldr	r1, [r7, #0]
 80136b2:	6878      	ldr	r0, [r7, #4]
 80136b4:	f000 f956 	bl	8013964 <USBD_CtlError>
 80136b8:	e075      	b.n	80137a6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136c0:	2b02      	cmp	r3, #2
 80136c2:	d002      	beq.n	80136ca <USBD_SetConfig+0x36>
 80136c4:	2b03      	cmp	r3, #3
 80136c6:	d023      	beq.n	8013710 <USBD_SetConfig+0x7c>
 80136c8:	e062      	b.n	8013790 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80136ca:	4b38      	ldr	r3, [pc, #224]	; (80137ac <USBD_SetConfig+0x118>)
 80136cc:	781b      	ldrb	r3, [r3, #0]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d01a      	beq.n	8013708 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80136d2:	4b36      	ldr	r3, [pc, #216]	; (80137ac <USBD_SetConfig+0x118>)
 80136d4:	781b      	ldrb	r3, [r3, #0]
 80136d6:	461a      	mov	r2, r3
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2203      	movs	r2, #3
 80136e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80136e4:	4b31      	ldr	r3, [pc, #196]	; (80137ac <USBD_SetConfig+0x118>)
 80136e6:	781b      	ldrb	r3, [r3, #0]
 80136e8:	4619      	mov	r1, r3
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	f7ff f9e4 	bl	8012ab8 <USBD_SetClassConfig>
 80136f0:	4603      	mov	r3, r0
 80136f2:	2b02      	cmp	r3, #2
 80136f4:	d104      	bne.n	8013700 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80136f6:	6839      	ldr	r1, [r7, #0]
 80136f8:	6878      	ldr	r0, [r7, #4]
 80136fa:	f000 f933 	bl	8013964 <USBD_CtlError>
            return;
 80136fe:	e052      	b.n	80137a6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f000 f9f8 	bl	8013af6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8013706:	e04e      	b.n	80137a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	f000 f9f4 	bl	8013af6 <USBD_CtlSendStatus>
        break;
 801370e:	e04a      	b.n	80137a6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8013710:	4b26      	ldr	r3, [pc, #152]	; (80137ac <USBD_SetConfig+0x118>)
 8013712:	781b      	ldrb	r3, [r3, #0]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d112      	bne.n	801373e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2202      	movs	r2, #2
 801371c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8013720:	4b22      	ldr	r3, [pc, #136]	; (80137ac <USBD_SetConfig+0x118>)
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	461a      	mov	r2, r3
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801372a:	4b20      	ldr	r3, [pc, #128]	; (80137ac <USBD_SetConfig+0x118>)
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	4619      	mov	r1, r3
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f7ff f9e0 	bl	8012af6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	f000 f9dd 	bl	8013af6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801373c:	e033      	b.n	80137a6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801373e:	4b1b      	ldr	r3, [pc, #108]	; (80137ac <USBD_SetConfig+0x118>)
 8013740:	781b      	ldrb	r3, [r3, #0]
 8013742:	461a      	mov	r2, r3
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	685b      	ldr	r3, [r3, #4]
 8013748:	429a      	cmp	r2, r3
 801374a:	d01d      	beq.n	8013788 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	b2db      	uxtb	r3, r3
 8013752:	4619      	mov	r1, r3
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f7ff f9ce 	bl	8012af6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801375a:	4b14      	ldr	r3, [pc, #80]	; (80137ac <USBD_SetConfig+0x118>)
 801375c:	781b      	ldrb	r3, [r3, #0]
 801375e:	461a      	mov	r2, r3
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8013764:	4b11      	ldr	r3, [pc, #68]	; (80137ac <USBD_SetConfig+0x118>)
 8013766:	781b      	ldrb	r3, [r3, #0]
 8013768:	4619      	mov	r1, r3
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	f7ff f9a4 	bl	8012ab8 <USBD_SetClassConfig>
 8013770:	4603      	mov	r3, r0
 8013772:	2b02      	cmp	r3, #2
 8013774:	d104      	bne.n	8013780 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8013776:	6839      	ldr	r1, [r7, #0]
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f000 f8f3 	bl	8013964 <USBD_CtlError>
            return;
 801377e:	e012      	b.n	80137a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f000 f9b8 	bl	8013af6 <USBD_CtlSendStatus>
        break;
 8013786:	e00e      	b.n	80137a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f000 f9b4 	bl	8013af6 <USBD_CtlSendStatus>
        break;
 801378e:	e00a      	b.n	80137a6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8013790:	6839      	ldr	r1, [r7, #0]
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f000 f8e6 	bl	8013964 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8013798:	4b04      	ldr	r3, [pc, #16]	; (80137ac <USBD_SetConfig+0x118>)
 801379a:	781b      	ldrb	r3, [r3, #0]
 801379c:	4619      	mov	r1, r3
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f7ff f9a9 	bl	8012af6 <USBD_ClrClassConfig>
        break;
 80137a4:	bf00      	nop
    }
  }
}
 80137a6:	3708      	adds	r7, #8
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd80      	pop	{r7, pc}
 80137ac:	200026ec 	.word	0x200026ec

080137b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b082      	sub	sp, #8
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
 80137b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	88db      	ldrh	r3, [r3, #6]
 80137be:	2b01      	cmp	r3, #1
 80137c0:	d004      	beq.n	80137cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80137c2:	6839      	ldr	r1, [r7, #0]
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f000 f8cd 	bl	8013964 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80137ca:	e022      	b.n	8013812 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137d2:	2b02      	cmp	r3, #2
 80137d4:	dc02      	bgt.n	80137dc <USBD_GetConfig+0x2c>
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	dc03      	bgt.n	80137e2 <USBD_GetConfig+0x32>
 80137da:	e015      	b.n	8013808 <USBD_GetConfig+0x58>
 80137dc:	2b03      	cmp	r3, #3
 80137de:	d00b      	beq.n	80137f8 <USBD_GetConfig+0x48>
 80137e0:	e012      	b.n	8013808 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2200      	movs	r2, #0
 80137e6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	3308      	adds	r3, #8
 80137ec:	2201      	movs	r2, #1
 80137ee:	4619      	mov	r1, r3
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f000 f922 	bl	8013a3a <USBD_CtlSendData>
        break;
 80137f6:	e00c      	b.n	8013812 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	3304      	adds	r3, #4
 80137fc:	2201      	movs	r2, #1
 80137fe:	4619      	mov	r1, r3
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	f000 f91a 	bl	8013a3a <USBD_CtlSendData>
        break;
 8013806:	e004      	b.n	8013812 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8013808:	6839      	ldr	r1, [r7, #0]
 801380a:	6878      	ldr	r0, [r7, #4]
 801380c:	f000 f8aa 	bl	8013964 <USBD_CtlError>
        break;
 8013810:	bf00      	nop
}
 8013812:	bf00      	nop
 8013814:	3708      	adds	r7, #8
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}

0801381a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801381a:	b580      	push	{r7, lr}
 801381c:	b082      	sub	sp, #8
 801381e:	af00      	add	r7, sp, #0
 8013820:	6078      	str	r0, [r7, #4]
 8013822:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801382a:	3b01      	subs	r3, #1
 801382c:	2b02      	cmp	r3, #2
 801382e:	d81e      	bhi.n	801386e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	88db      	ldrh	r3, [r3, #6]
 8013834:	2b02      	cmp	r3, #2
 8013836:	d004      	beq.n	8013842 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8013838:	6839      	ldr	r1, [r7, #0]
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f000 f892 	bl	8013964 <USBD_CtlError>
        break;
 8013840:	e01a      	b.n	8013878 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	2201      	movs	r2, #1
 8013846:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801384e:	2b00      	cmp	r3, #0
 8013850:	d005      	beq.n	801385e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	68db      	ldr	r3, [r3, #12]
 8013856:	f043 0202 	orr.w	r2, r3, #2
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	330c      	adds	r3, #12
 8013862:	2202      	movs	r2, #2
 8013864:	4619      	mov	r1, r3
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f000 f8e7 	bl	8013a3a <USBD_CtlSendData>
      break;
 801386c:	e004      	b.n	8013878 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801386e:	6839      	ldr	r1, [r7, #0]
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f000 f877 	bl	8013964 <USBD_CtlError>
      break;
 8013876:	bf00      	nop
  }
}
 8013878:	bf00      	nop
 801387a:	3708      	adds	r7, #8
 801387c:	46bd      	mov	sp, r7
 801387e:	bd80      	pop	{r7, pc}

08013880 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b082      	sub	sp, #8
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
 8013888:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	885b      	ldrh	r3, [r3, #2]
 801388e:	2b01      	cmp	r3, #1
 8013890:	d106      	bne.n	80138a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2201      	movs	r2, #1
 8013896:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f000 f92b 	bl	8013af6 <USBD_CtlSendStatus>
  }
}
 80138a0:	bf00      	nop
 80138a2:	3708      	adds	r7, #8
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}

080138a8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b082      	sub	sp, #8
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138b8:	3b01      	subs	r3, #1
 80138ba:	2b02      	cmp	r3, #2
 80138bc:	d80b      	bhi.n	80138d6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	885b      	ldrh	r3, [r3, #2]
 80138c2:	2b01      	cmp	r3, #1
 80138c4:	d10c      	bne.n	80138e0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	2200      	movs	r2, #0
 80138ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f000 f911 	bl	8013af6 <USBD_CtlSendStatus>
      }
      break;
 80138d4:	e004      	b.n	80138e0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80138d6:	6839      	ldr	r1, [r7, #0]
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f000 f843 	bl	8013964 <USBD_CtlError>
      break;
 80138de:	e000      	b.n	80138e2 <USBD_ClrFeature+0x3a>
      break;
 80138e0:	bf00      	nop
  }
}
 80138e2:	bf00      	nop
 80138e4:	3708      	adds	r7, #8
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}

080138ea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80138ea:	b480      	push	{r7}
 80138ec:	b083      	sub	sp, #12
 80138ee:	af00      	add	r7, sp, #0
 80138f0:	6078      	str	r0, [r7, #4]
 80138f2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	781a      	ldrb	r2, [r3, #0]
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	785a      	ldrb	r2, [r3, #1]
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	3302      	adds	r3, #2
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	b29a      	uxth	r2, r3
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	3303      	adds	r3, #3
 8013910:	781b      	ldrb	r3, [r3, #0]
 8013912:	b29b      	uxth	r3, r3
 8013914:	021b      	lsls	r3, r3, #8
 8013916:	b29b      	uxth	r3, r3
 8013918:	4413      	add	r3, r2
 801391a:	b29a      	uxth	r2, r3
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	3304      	adds	r3, #4
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	b29a      	uxth	r2, r3
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	3305      	adds	r3, #5
 801392c:	781b      	ldrb	r3, [r3, #0]
 801392e:	b29b      	uxth	r3, r3
 8013930:	021b      	lsls	r3, r3, #8
 8013932:	b29b      	uxth	r3, r3
 8013934:	4413      	add	r3, r2
 8013936:	b29a      	uxth	r2, r3
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	3306      	adds	r3, #6
 8013940:	781b      	ldrb	r3, [r3, #0]
 8013942:	b29a      	uxth	r2, r3
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	3307      	adds	r3, #7
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	b29b      	uxth	r3, r3
 801394c:	021b      	lsls	r3, r3, #8
 801394e:	b29b      	uxth	r3, r3
 8013950:	4413      	add	r3, r2
 8013952:	b29a      	uxth	r2, r3
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	80da      	strh	r2, [r3, #6]

}
 8013958:	bf00      	nop
 801395a:	370c      	adds	r7, #12
 801395c:	46bd      	mov	sp, r7
 801395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013962:	4770      	bx	lr

08013964 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b082      	sub	sp, #8
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
 801396c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801396e:	2180      	movs	r1, #128	; 0x80
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f003 fa01 	bl	8016d78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8013976:	2100      	movs	r1, #0
 8013978:	6878      	ldr	r0, [r7, #4]
 801397a:	f003 f9fd 	bl	8016d78 <USBD_LL_StallEP>
}
 801397e:	bf00      	nop
 8013980:	3708      	adds	r7, #8
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}

08013986 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013986:	b580      	push	{r7, lr}
 8013988:	b086      	sub	sp, #24
 801398a:	af00      	add	r7, sp, #0
 801398c:	60f8      	str	r0, [r7, #12]
 801398e:	60b9      	str	r1, [r7, #8]
 8013990:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013992:	2300      	movs	r3, #0
 8013994:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d032      	beq.n	8013a02 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801399c:	68f8      	ldr	r0, [r7, #12]
 801399e:	f000 f834 	bl	8013a0a <USBD_GetLen>
 80139a2:	4603      	mov	r3, r0
 80139a4:	3301      	adds	r3, #1
 80139a6:	b29b      	uxth	r3, r3
 80139a8:	005b      	lsls	r3, r3, #1
 80139aa:	b29a      	uxth	r2, r3
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80139b0:	7dfb      	ldrb	r3, [r7, #23]
 80139b2:	1c5a      	adds	r2, r3, #1
 80139b4:	75fa      	strb	r2, [r7, #23]
 80139b6:	461a      	mov	r2, r3
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	4413      	add	r3, r2
 80139bc:	687a      	ldr	r2, [r7, #4]
 80139be:	7812      	ldrb	r2, [r2, #0]
 80139c0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80139c2:	7dfb      	ldrb	r3, [r7, #23]
 80139c4:	1c5a      	adds	r2, r3, #1
 80139c6:	75fa      	strb	r2, [r7, #23]
 80139c8:	461a      	mov	r2, r3
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	4413      	add	r3, r2
 80139ce:	2203      	movs	r2, #3
 80139d0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80139d2:	e012      	b.n	80139fa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	1c5a      	adds	r2, r3, #1
 80139d8:	60fa      	str	r2, [r7, #12]
 80139da:	7dfa      	ldrb	r2, [r7, #23]
 80139dc:	1c51      	adds	r1, r2, #1
 80139de:	75f9      	strb	r1, [r7, #23]
 80139e0:	4611      	mov	r1, r2
 80139e2:	68ba      	ldr	r2, [r7, #8]
 80139e4:	440a      	add	r2, r1
 80139e6:	781b      	ldrb	r3, [r3, #0]
 80139e8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80139ea:	7dfb      	ldrb	r3, [r7, #23]
 80139ec:	1c5a      	adds	r2, r3, #1
 80139ee:	75fa      	strb	r2, [r7, #23]
 80139f0:	461a      	mov	r2, r3
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	4413      	add	r3, r2
 80139f6:	2200      	movs	r2, #0
 80139f8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d1e8      	bne.n	80139d4 <USBD_GetString+0x4e>
    }
  }
}
 8013a02:	bf00      	nop
 8013a04:	3718      	adds	r7, #24
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}

08013a0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013a0a:	b480      	push	{r7}
 8013a0c:	b085      	sub	sp, #20
 8013a0e:	af00      	add	r7, sp, #0
 8013a10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013a12:	2300      	movs	r3, #0
 8013a14:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8013a16:	e005      	b.n	8013a24 <USBD_GetLen+0x1a>
  {
    len++;
 8013a18:	7bfb      	ldrb	r3, [r7, #15]
 8013a1a:	3301      	adds	r3, #1
 8013a1c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	3301      	adds	r3, #1
 8013a22:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	781b      	ldrb	r3, [r3, #0]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d1f5      	bne.n	8013a18 <USBD_GetLen+0xe>
  }

  return len;
 8013a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a2e:	4618      	mov	r0, r3
 8013a30:	3714      	adds	r7, #20
 8013a32:	46bd      	mov	sp, r7
 8013a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a38:	4770      	bx	lr

08013a3a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8013a3a:	b580      	push	{r7, lr}
 8013a3c:	b084      	sub	sp, #16
 8013a3e:	af00      	add	r7, sp, #0
 8013a40:	60f8      	str	r0, [r7, #12]
 8013a42:	60b9      	str	r1, [r7, #8]
 8013a44:	4613      	mov	r3, r2
 8013a46:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	2202      	movs	r2, #2
 8013a4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8013a50:	88fa      	ldrh	r2, [r7, #6]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8013a56:	88fa      	ldrh	r2, [r7, #6]
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013a5c:	88fb      	ldrh	r3, [r7, #6]
 8013a5e:	68ba      	ldr	r2, [r7, #8]
 8013a60:	2100      	movs	r1, #0
 8013a62:	68f8      	ldr	r0, [r7, #12]
 8013a64:	f003 fa12 	bl	8016e8c <USBD_LL_Transmit>

  return USBD_OK;
 8013a68:	2300      	movs	r3, #0
}
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	3710      	adds	r7, #16
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}

08013a72 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8013a72:	b580      	push	{r7, lr}
 8013a74:	b084      	sub	sp, #16
 8013a76:	af00      	add	r7, sp, #0
 8013a78:	60f8      	str	r0, [r7, #12]
 8013a7a:	60b9      	str	r1, [r7, #8]
 8013a7c:	4613      	mov	r3, r2
 8013a7e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013a80:	88fb      	ldrh	r3, [r7, #6]
 8013a82:	68ba      	ldr	r2, [r7, #8]
 8013a84:	2100      	movs	r1, #0
 8013a86:	68f8      	ldr	r0, [r7, #12]
 8013a88:	f003 fa00 	bl	8016e8c <USBD_LL_Transmit>

  return USBD_OK;
 8013a8c:	2300      	movs	r3, #0
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3710      	adds	r7, #16
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}

08013a96 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8013a96:	b580      	push	{r7, lr}
 8013a98:	b084      	sub	sp, #16
 8013a9a:	af00      	add	r7, sp, #0
 8013a9c:	60f8      	str	r0, [r7, #12]
 8013a9e:	60b9      	str	r1, [r7, #8]
 8013aa0:	4613      	mov	r3, r2
 8013aa2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	2203      	movs	r2, #3
 8013aa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8013aac:	88fa      	ldrh	r2, [r7, #6]
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8013ab4:	88fa      	ldrh	r2, [r7, #6]
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013abc:	88fb      	ldrh	r3, [r7, #6]
 8013abe:	68ba      	ldr	r2, [r7, #8]
 8013ac0:	2100      	movs	r1, #0
 8013ac2:	68f8      	ldr	r0, [r7, #12]
 8013ac4:	f003 fa05 	bl	8016ed2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013ac8:	2300      	movs	r3, #0
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3710      	adds	r7, #16
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}

08013ad2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8013ad2:	b580      	push	{r7, lr}
 8013ad4:	b084      	sub	sp, #16
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	60f8      	str	r0, [r7, #12]
 8013ada:	60b9      	str	r1, [r7, #8]
 8013adc:	4613      	mov	r3, r2
 8013ade:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013ae0:	88fb      	ldrh	r3, [r7, #6]
 8013ae2:	68ba      	ldr	r2, [r7, #8]
 8013ae4:	2100      	movs	r1, #0
 8013ae6:	68f8      	ldr	r0, [r7, #12]
 8013ae8:	f003 f9f3 	bl	8016ed2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013aec:	2300      	movs	r3, #0
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	3710      	adds	r7, #16
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}

08013af6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013af6:	b580      	push	{r7, lr}
 8013af8:	b082      	sub	sp, #8
 8013afa:	af00      	add	r7, sp, #0
 8013afc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	2204      	movs	r2, #4
 8013b02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013b06:	2300      	movs	r3, #0
 8013b08:	2200      	movs	r2, #0
 8013b0a:	2100      	movs	r1, #0
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f003 f9bd 	bl	8016e8c <USBD_LL_Transmit>

  return USBD_OK;
 8013b12:	2300      	movs	r3, #0
}
 8013b14:	4618      	mov	r0, r3
 8013b16:	3708      	adds	r7, #8
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bd80      	pop	{r7, pc}

08013b1c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b082      	sub	sp, #8
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	2205      	movs	r2, #5
 8013b28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	2200      	movs	r2, #0
 8013b30:	2100      	movs	r1, #0
 8013b32:	6878      	ldr	r0, [r7, #4]
 8013b34:	f003 f9cd 	bl	8016ed2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013b38:	2300      	movs	r3, #0
}
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	3708      	adds	r7, #8
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}
	...

08013b44 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013b44:	b480      	push	{r7}
 8013b46:	b085      	sub	sp, #20
 8013b48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b4a:	f3ef 8305 	mrs	r3, IPSR
 8013b4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8013b50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d10f      	bne.n	8013b76 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b56:	f3ef 8310 	mrs	r3, PRIMASK
 8013b5a:	607b      	str	r3, [r7, #4]
  return(result);
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d109      	bne.n	8013b76 <osKernelInitialize+0x32>
 8013b62:	4b11      	ldr	r3, [pc, #68]	; (8013ba8 <osKernelInitialize+0x64>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	2b02      	cmp	r3, #2
 8013b68:	d109      	bne.n	8013b7e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013b6a:	f3ef 8311 	mrs	r3, BASEPRI
 8013b6e:	603b      	str	r3, [r7, #0]
  return(result);
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d003      	beq.n	8013b7e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8013b76:	f06f 0305 	mvn.w	r3, #5
 8013b7a:	60fb      	str	r3, [r7, #12]
 8013b7c:	e00c      	b.n	8013b98 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013b7e:	4b0a      	ldr	r3, [pc, #40]	; (8013ba8 <osKernelInitialize+0x64>)
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d105      	bne.n	8013b92 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8013b86:	4b08      	ldr	r3, [pc, #32]	; (8013ba8 <osKernelInitialize+0x64>)
 8013b88:	2201      	movs	r2, #1
 8013b8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	60fb      	str	r3, [r7, #12]
 8013b90:	e002      	b.n	8013b98 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8013b92:	f04f 33ff 	mov.w	r3, #4294967295
 8013b96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013b98:	68fb      	ldr	r3, [r7, #12]
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3714      	adds	r7, #20
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba4:	4770      	bx	lr
 8013ba6:	bf00      	nop
 8013ba8:	200026f0 	.word	0x200026f0

08013bac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b084      	sub	sp, #16
 8013bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013bb2:	f3ef 8305 	mrs	r3, IPSR
 8013bb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8013bb8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d10f      	bne.n	8013bde <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8013bc2:	607b      	str	r3, [r7, #4]
  return(result);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d109      	bne.n	8013bde <osKernelStart+0x32>
 8013bca:	4b11      	ldr	r3, [pc, #68]	; (8013c10 <osKernelStart+0x64>)
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	2b02      	cmp	r3, #2
 8013bd0:	d109      	bne.n	8013be6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013bd2:	f3ef 8311 	mrs	r3, BASEPRI
 8013bd6:	603b      	str	r3, [r7, #0]
  return(result);
 8013bd8:	683b      	ldr	r3, [r7, #0]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d003      	beq.n	8013be6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8013bde:	f06f 0305 	mvn.w	r3, #5
 8013be2:	60fb      	str	r3, [r7, #12]
 8013be4:	e00e      	b.n	8013c04 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8013be6:	4b0a      	ldr	r3, [pc, #40]	; (8013c10 <osKernelStart+0x64>)
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	2b01      	cmp	r3, #1
 8013bec:	d107      	bne.n	8013bfe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8013bee:	4b08      	ldr	r3, [pc, #32]	; (8013c10 <osKernelStart+0x64>)
 8013bf0:	2202      	movs	r2, #2
 8013bf2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8013bf4:	f001 fb16 	bl	8015224 <vTaskStartScheduler>
      stat = osOK;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	60fb      	str	r3, [r7, #12]
 8013bfc:	e002      	b.n	8013c04 <osKernelStart+0x58>
    } else {
      stat = osError;
 8013bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8013c02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013c04:	68fb      	ldr	r3, [r7, #12]
}
 8013c06:	4618      	mov	r0, r3
 8013c08:	3710      	adds	r7, #16
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}
 8013c0e:	bf00      	nop
 8013c10:	200026f0 	.word	0x200026f0

08013c14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b092      	sub	sp, #72	; 0x48
 8013c18:	af04      	add	r7, sp, #16
 8013c1a:	60f8      	str	r0, [r7, #12]
 8013c1c:	60b9      	str	r1, [r7, #8]
 8013c1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013c20:	2300      	movs	r3, #0
 8013c22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013c24:	f3ef 8305 	mrs	r3, IPSR
 8013c28:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	f040 8094 	bne.w	8013d5a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c32:	f3ef 8310 	mrs	r3, PRIMASK
 8013c36:	623b      	str	r3, [r7, #32]
  return(result);
 8013c38:	6a3b      	ldr	r3, [r7, #32]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	f040 808d 	bne.w	8013d5a <osThreadNew+0x146>
 8013c40:	4b48      	ldr	r3, [pc, #288]	; (8013d64 <osThreadNew+0x150>)
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	2b02      	cmp	r3, #2
 8013c46:	d106      	bne.n	8013c56 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013c48:	f3ef 8311 	mrs	r3, BASEPRI
 8013c4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8013c4e:	69fb      	ldr	r3, [r7, #28]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	f040 8082 	bne.w	8013d5a <osThreadNew+0x146>
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d07e      	beq.n	8013d5a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8013c5c:	2380      	movs	r3, #128	; 0x80
 8013c5e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8013c60:	2318      	movs	r3, #24
 8013c62:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8013c64:	2300      	movs	r3, #0
 8013c66:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8013c68:	f107 031b 	add.w	r3, r7, #27
 8013c6c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8013c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8013c72:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d045      	beq.n	8013d06 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d002      	beq.n	8013c88 <osThreadNew+0x74>
        name = attr->name;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	699b      	ldr	r3, [r3, #24]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d002      	beq.n	8013c96 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	699b      	ldr	r3, [r3, #24]
 8013c94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d008      	beq.n	8013cae <osThreadNew+0x9a>
 8013c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c9e:	2b38      	cmp	r3, #56	; 0x38
 8013ca0:	d805      	bhi.n	8013cae <osThreadNew+0x9a>
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	685b      	ldr	r3, [r3, #4]
 8013ca6:	f003 0301 	and.w	r3, r3, #1
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d001      	beq.n	8013cb2 <osThreadNew+0x9e>
        return (NULL);
 8013cae:	2300      	movs	r3, #0
 8013cb0:	e054      	b.n	8013d5c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	695b      	ldr	r3, [r3, #20]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d003      	beq.n	8013cc2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	695b      	ldr	r3, [r3, #20]
 8013cbe:	089b      	lsrs	r3, r3, #2
 8013cc0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	689b      	ldr	r3, [r3, #8]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d00e      	beq.n	8013ce8 <osThreadNew+0xd4>
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	68db      	ldr	r3, [r3, #12]
 8013cce:	2b5b      	cmp	r3, #91	; 0x5b
 8013cd0:	d90a      	bls.n	8013ce8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d006      	beq.n	8013ce8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	695b      	ldr	r3, [r3, #20]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d002      	beq.n	8013ce8 <osThreadNew+0xd4>
        mem = 1;
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8013ce6:	e010      	b.n	8013d0a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	689b      	ldr	r3, [r3, #8]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d10c      	bne.n	8013d0a <osThreadNew+0xf6>
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	68db      	ldr	r3, [r3, #12]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d108      	bne.n	8013d0a <osThreadNew+0xf6>
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	691b      	ldr	r3, [r3, #16]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d104      	bne.n	8013d0a <osThreadNew+0xf6>
          mem = 0;
 8013d00:	2300      	movs	r3, #0
 8013d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8013d04:	e001      	b.n	8013d0a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8013d06:	2300      	movs	r3, #0
 8013d08:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8013d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d0c:	2b01      	cmp	r3, #1
 8013d0e:	d110      	bne.n	8013d32 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8013d14:	687a      	ldr	r2, [r7, #4]
 8013d16:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013d18:	9202      	str	r2, [sp, #8]
 8013d1a:	9301      	str	r3, [sp, #4]
 8013d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d1e:	9300      	str	r3, [sp, #0]
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013d26:	68f8      	ldr	r0, [r7, #12]
 8013d28:	f001 f8b0 	bl	8014e8c <xTaskCreateStatic>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	617b      	str	r3, [r7, #20]
 8013d30:	e013      	b.n	8013d5a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8013d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d110      	bne.n	8013d5a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d3a:	b29a      	uxth	r2, r3
 8013d3c:	f107 0314 	add.w	r3, r7, #20
 8013d40:	9301      	str	r3, [sp, #4]
 8013d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d44:	9300      	str	r3, [sp, #0]
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013d4a:	68f8      	ldr	r0, [r7, #12]
 8013d4c:	f001 f8fa 	bl	8014f44 <xTaskCreate>
 8013d50:	4603      	mov	r3, r0
 8013d52:	2b01      	cmp	r3, #1
 8013d54:	d001      	beq.n	8013d5a <osThreadNew+0x146>
          hTask = NULL;
 8013d56:	2300      	movs	r3, #0
 8013d58:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013d5a:	697b      	ldr	r3, [r7, #20]
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3738      	adds	r7, #56	; 0x38
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}
 8013d64:	200026f0 	.word	0x200026f0

08013d68 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b086      	sub	sp, #24
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013d70:	f3ef 8305 	mrs	r3, IPSR
 8013d74:	613b      	str	r3, [r7, #16]
  return(result);
 8013d76:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d10f      	bne.n	8013d9c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8013d80:	60fb      	str	r3, [r7, #12]
  return(result);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d109      	bne.n	8013d9c <osDelay+0x34>
 8013d88:	4b0d      	ldr	r3, [pc, #52]	; (8013dc0 <osDelay+0x58>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	2b02      	cmp	r3, #2
 8013d8e:	d109      	bne.n	8013da4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013d90:	f3ef 8311 	mrs	r3, BASEPRI
 8013d94:	60bb      	str	r3, [r7, #8]
  return(result);
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d003      	beq.n	8013da4 <osDelay+0x3c>
    stat = osErrorISR;
 8013d9c:	f06f 0305 	mvn.w	r3, #5
 8013da0:	617b      	str	r3, [r7, #20]
 8013da2:	e007      	b.n	8013db4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8013da4:	2300      	movs	r3, #0
 8013da6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d002      	beq.n	8013db4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	f001 fa04 	bl	80151bc <vTaskDelay>
    }
  }

  return (stat);
 8013db4:	697b      	ldr	r3, [r7, #20]
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	3718      	adds	r7, #24
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}
 8013dbe:	bf00      	nop
 8013dc0:	200026f0 	.word	0x200026f0

08013dc4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b08c      	sub	sp, #48	; 0x30
 8013dc8:	af02      	add	r7, sp, #8
 8013dca:	60f8      	str	r0, [r7, #12]
 8013dcc:	60b9      	str	r1, [r7, #8]
 8013dce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013dd4:	f3ef 8305 	mrs	r3, IPSR
 8013dd8:	61bb      	str	r3, [r7, #24]
  return(result);
 8013dda:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d16f      	bne.n	8013ec0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013de0:	f3ef 8310 	mrs	r3, PRIMASK
 8013de4:	617b      	str	r3, [r7, #20]
  return(result);
 8013de6:	697b      	ldr	r3, [r7, #20]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d169      	bne.n	8013ec0 <osMessageQueueNew+0xfc>
 8013dec:	4b37      	ldr	r3, [pc, #220]	; (8013ecc <osMessageQueueNew+0x108>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	2b02      	cmp	r3, #2
 8013df2:	d105      	bne.n	8013e00 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013df4:	f3ef 8311 	mrs	r3, BASEPRI
 8013df8:	613b      	str	r3, [r7, #16]
  return(result);
 8013dfa:	693b      	ldr	r3, [r7, #16]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d15f      	bne.n	8013ec0 <osMessageQueueNew+0xfc>
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d05c      	beq.n	8013ec0 <osMessageQueueNew+0xfc>
 8013e06:	68bb      	ldr	r3, [r7, #8]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d059      	beq.n	8013ec0 <osMessageQueueNew+0xfc>
    mem = -1;
 8013e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e10:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d029      	beq.n	8013e6c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	689b      	ldr	r3, [r3, #8]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d012      	beq.n	8013e46 <osMessageQueueNew+0x82>
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	68db      	ldr	r3, [r3, #12]
 8013e24:	2b4f      	cmp	r3, #79	; 0x4f
 8013e26:	d90e      	bls.n	8013e46 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d00a      	beq.n	8013e46 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	695a      	ldr	r2, [r3, #20]
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	68b9      	ldr	r1, [r7, #8]
 8013e38:	fb01 f303 	mul.w	r3, r1, r3
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d302      	bcc.n	8013e46 <osMessageQueueNew+0x82>
        mem = 1;
 8013e40:	2301      	movs	r3, #1
 8013e42:	623b      	str	r3, [r7, #32]
 8013e44:	e014      	b.n	8013e70 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	689b      	ldr	r3, [r3, #8]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d110      	bne.n	8013e70 <osMessageQueueNew+0xac>
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	68db      	ldr	r3, [r3, #12]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d10c      	bne.n	8013e70 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d108      	bne.n	8013e70 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	695b      	ldr	r3, [r3, #20]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d104      	bne.n	8013e70 <osMessageQueueNew+0xac>
          mem = 0;
 8013e66:	2300      	movs	r3, #0
 8013e68:	623b      	str	r3, [r7, #32]
 8013e6a:	e001      	b.n	8013e70 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013e70:	6a3b      	ldr	r3, [r7, #32]
 8013e72:	2b01      	cmp	r3, #1
 8013e74:	d10b      	bne.n	8013e8e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	691a      	ldr	r2, [r3, #16]
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	689b      	ldr	r3, [r3, #8]
 8013e7e:	2100      	movs	r1, #0
 8013e80:	9100      	str	r1, [sp, #0]
 8013e82:	68b9      	ldr	r1, [r7, #8]
 8013e84:	68f8      	ldr	r0, [r7, #12]
 8013e86:	f000 fa8b 	bl	80143a0 <xQueueGenericCreateStatic>
 8013e8a:	6278      	str	r0, [r7, #36]	; 0x24
 8013e8c:	e008      	b.n	8013ea0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8013e8e:	6a3b      	ldr	r3, [r7, #32]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d105      	bne.n	8013ea0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8013e94:	2200      	movs	r2, #0
 8013e96:	68b9      	ldr	r1, [r7, #8]
 8013e98:	68f8      	ldr	r0, [r7, #12]
 8013e9a:	f000 faf8 	bl	801448e <xQueueGenericCreate>
 8013e9e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d00c      	beq.n	8013ec0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d003      	beq.n	8013eb4 <osMessageQueueNew+0xf0>
        name = attr->name;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	61fb      	str	r3, [r7, #28]
 8013eb2:	e001      	b.n	8013eb8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8013eb8:	69f9      	ldr	r1, [r7, #28]
 8013eba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ebc:	f000 ff88 	bl	8014dd0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3728      	adds	r7, #40	; 0x28
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}
 8013eca:	bf00      	nop
 8013ecc:	200026f0 	.word	0x200026f0

08013ed0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b08a      	sub	sp, #40	; 0x28
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	60f8      	str	r0, [r7, #12]
 8013ed8:	60b9      	str	r1, [r7, #8]
 8013eda:	603b      	str	r3, [r7, #0]
 8013edc:	4613      	mov	r3, r2
 8013ede:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013ee8:	f3ef 8305 	mrs	r3, IPSR
 8013eec:	61fb      	str	r3, [r7, #28]
  return(result);
 8013eee:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d10f      	bne.n	8013f14 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8013ef8:	61bb      	str	r3, [r7, #24]
  return(result);
 8013efa:	69bb      	ldr	r3, [r7, #24]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d109      	bne.n	8013f14 <osMessageQueuePut+0x44>
 8013f00:	4b2b      	ldr	r3, [pc, #172]	; (8013fb0 <osMessageQueuePut+0xe0>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	2b02      	cmp	r3, #2
 8013f06:	d12e      	bne.n	8013f66 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013f08:	f3ef 8311 	mrs	r3, BASEPRI
 8013f0c:	617b      	str	r3, [r7, #20]
  return(result);
 8013f0e:	697b      	ldr	r3, [r7, #20]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d028      	beq.n	8013f66 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013f14:	6a3b      	ldr	r3, [r7, #32]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d005      	beq.n	8013f26 <osMessageQueuePut+0x56>
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d002      	beq.n	8013f26 <osMessageQueuePut+0x56>
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d003      	beq.n	8013f2e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8013f26:	f06f 0303 	mvn.w	r3, #3
 8013f2a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013f2c:	e039      	b.n	8013fa2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8013f2e:	2300      	movs	r3, #0
 8013f30:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013f32:	f107 0210 	add.w	r2, r7, #16
 8013f36:	2300      	movs	r3, #0
 8013f38:	68b9      	ldr	r1, [r7, #8]
 8013f3a:	6a38      	ldr	r0, [r7, #32]
 8013f3c:	f000 fc06 	bl	801474c <xQueueGenericSendFromISR>
 8013f40:	4603      	mov	r3, r0
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	d003      	beq.n	8013f4e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8013f46:	f06f 0302 	mvn.w	r3, #2
 8013f4a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013f4c:	e029      	b.n	8013fa2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8013f4e:	693b      	ldr	r3, [r7, #16]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d026      	beq.n	8013fa2 <osMessageQueuePut+0xd2>
 8013f54:	4b17      	ldr	r3, [pc, #92]	; (8013fb4 <osMessageQueuePut+0xe4>)
 8013f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f5a:	601a      	str	r2, [r3, #0]
 8013f5c:	f3bf 8f4f 	dsb	sy
 8013f60:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013f64:	e01d      	b.n	8013fa2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013f66:	6a3b      	ldr	r3, [r7, #32]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d002      	beq.n	8013f72 <osMessageQueuePut+0xa2>
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d103      	bne.n	8013f7a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8013f72:	f06f 0303 	mvn.w	r3, #3
 8013f76:	627b      	str	r3, [r7, #36]	; 0x24
 8013f78:	e014      	b.n	8013fa4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	683a      	ldr	r2, [r7, #0]
 8013f7e:	68b9      	ldr	r1, [r7, #8]
 8013f80:	6a38      	ldr	r0, [r7, #32]
 8013f82:	f000 fae5 	bl	8014550 <xQueueGenericSend>
 8013f86:	4603      	mov	r3, r0
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	d00b      	beq.n	8013fa4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d003      	beq.n	8013f9a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8013f92:	f06f 0301 	mvn.w	r3, #1
 8013f96:	627b      	str	r3, [r7, #36]	; 0x24
 8013f98:	e004      	b.n	8013fa4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8013f9a:	f06f 0302 	mvn.w	r3, #2
 8013f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8013fa0:	e000      	b.n	8013fa4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013fa2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	3728      	adds	r7, #40	; 0x28
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}
 8013fae:	bf00      	nop
 8013fb0:	200026f0 	.word	0x200026f0
 8013fb4:	e000ed04 	.word	0xe000ed04

08013fb8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b08a      	sub	sp, #40	; 0x28
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	60f8      	str	r0, [r7, #12]
 8013fc0:	60b9      	str	r1, [r7, #8]
 8013fc2:	607a      	str	r2, [r7, #4]
 8013fc4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013fce:	f3ef 8305 	mrs	r3, IPSR
 8013fd2:	61fb      	str	r3, [r7, #28]
  return(result);
 8013fd4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d10f      	bne.n	8013ffa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013fda:	f3ef 8310 	mrs	r3, PRIMASK
 8013fde:	61bb      	str	r3, [r7, #24]
  return(result);
 8013fe0:	69bb      	ldr	r3, [r7, #24]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d109      	bne.n	8013ffa <osMessageQueueGet+0x42>
 8013fe6:	4b2b      	ldr	r3, [pc, #172]	; (8014094 <osMessageQueueGet+0xdc>)
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	2b02      	cmp	r3, #2
 8013fec:	d12e      	bne.n	801404c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013fee:	f3ef 8311 	mrs	r3, BASEPRI
 8013ff2:	617b      	str	r3, [r7, #20]
  return(result);
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d028      	beq.n	801404c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013ffa:	6a3b      	ldr	r3, [r7, #32]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d005      	beq.n	801400c <osMessageQueueGet+0x54>
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d002      	beq.n	801400c <osMessageQueueGet+0x54>
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d003      	beq.n	8014014 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 801400c:	f06f 0303 	mvn.w	r3, #3
 8014010:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014012:	e038      	b.n	8014086 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8014014:	2300      	movs	r3, #0
 8014016:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8014018:	f107 0310 	add.w	r3, r7, #16
 801401c:	461a      	mov	r2, r3
 801401e:	68b9      	ldr	r1, [r7, #8]
 8014020:	6a38      	ldr	r0, [r7, #32]
 8014022:	f000 fd0b 	bl	8014a3c <xQueueReceiveFromISR>
 8014026:	4603      	mov	r3, r0
 8014028:	2b01      	cmp	r3, #1
 801402a:	d003      	beq.n	8014034 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 801402c:	f06f 0302 	mvn.w	r3, #2
 8014030:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014032:	e028      	b.n	8014086 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8014034:	693b      	ldr	r3, [r7, #16]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d025      	beq.n	8014086 <osMessageQueueGet+0xce>
 801403a:	4b17      	ldr	r3, [pc, #92]	; (8014098 <osMessageQueueGet+0xe0>)
 801403c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014040:	601a      	str	r2, [r3, #0]
 8014042:	f3bf 8f4f 	dsb	sy
 8014046:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801404a:	e01c      	b.n	8014086 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801404c:	6a3b      	ldr	r3, [r7, #32]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d002      	beq.n	8014058 <osMessageQueueGet+0xa0>
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d103      	bne.n	8014060 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8014058:	f06f 0303 	mvn.w	r3, #3
 801405c:	627b      	str	r3, [r7, #36]	; 0x24
 801405e:	e013      	b.n	8014088 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014060:	683a      	ldr	r2, [r7, #0]
 8014062:	68b9      	ldr	r1, [r7, #8]
 8014064:	6a38      	ldr	r0, [r7, #32]
 8014066:	f000 fc09 	bl	801487c <xQueueReceive>
 801406a:	4603      	mov	r3, r0
 801406c:	2b01      	cmp	r3, #1
 801406e:	d00b      	beq.n	8014088 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d003      	beq.n	801407e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8014076:	f06f 0301 	mvn.w	r3, #1
 801407a:	627b      	str	r3, [r7, #36]	; 0x24
 801407c:	e004      	b.n	8014088 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801407e:	f06f 0302 	mvn.w	r3, #2
 8014082:	627b      	str	r3, [r7, #36]	; 0x24
 8014084:	e000      	b.n	8014088 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014086:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8014088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801408a:	4618      	mov	r0, r3
 801408c:	3728      	adds	r7, #40	; 0x28
 801408e:	46bd      	mov	sp, r7
 8014090:	bd80      	pop	{r7, pc}
 8014092:	bf00      	nop
 8014094:	200026f0 	.word	0x200026f0
 8014098:	e000ed04 	.word	0xe000ed04

0801409c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 801409c:	b580      	push	{r7, lr}
 801409e:	b088      	sub	sp, #32
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80140a8:	69bb      	ldr	r3, [r7, #24]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d102      	bne.n	80140b4 <osMessageQueueGetCount+0x18>
    count = 0U;
 80140ae:	2300      	movs	r3, #0
 80140b0:	61fb      	str	r3, [r7, #28]
 80140b2:	e01e      	b.n	80140f2 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80140b4:	f3ef 8305 	mrs	r3, IPSR
 80140b8:	617b      	str	r3, [r7, #20]
  return(result);
 80140ba:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d10f      	bne.n	80140e0 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80140c0:	f3ef 8310 	mrs	r3, PRIMASK
 80140c4:	613b      	str	r3, [r7, #16]
  return(result);
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d109      	bne.n	80140e0 <osMessageQueueGetCount+0x44>
 80140cc:	4b0b      	ldr	r3, [pc, #44]	; (80140fc <osMessageQueueGetCount+0x60>)
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	2b02      	cmp	r3, #2
 80140d2:	d10a      	bne.n	80140ea <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80140d4:	f3ef 8311 	mrs	r3, BASEPRI
 80140d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d004      	beq.n	80140ea <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80140e0:	69b8      	ldr	r0, [r7, #24]
 80140e2:	f000 fd49 	bl	8014b78 <uxQueueMessagesWaitingFromISR>
 80140e6:	61f8      	str	r0, [r7, #28]
 80140e8:	e003      	b.n	80140f2 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80140ea:	69b8      	ldr	r0, [r7, #24]
 80140ec:	f000 fd26 	bl	8014b3c <uxQueueMessagesWaiting>
 80140f0:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80140f2:	69fb      	ldr	r3, [r7, #28]
}
 80140f4:	4618      	mov	r0, r3
 80140f6:	3720      	adds	r7, #32
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	200026f0 	.word	0x200026f0

08014100 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014100:	b480      	push	{r7}
 8014102:	b085      	sub	sp, #20
 8014104:	af00      	add	r7, sp, #0
 8014106:	60f8      	str	r0, [r7, #12]
 8014108:	60b9      	str	r1, [r7, #8]
 801410a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	4a07      	ldr	r2, [pc, #28]	; (801412c <vApplicationGetIdleTaskMemory+0x2c>)
 8014110:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	4a06      	ldr	r2, [pc, #24]	; (8014130 <vApplicationGetIdleTaskMemory+0x30>)
 8014116:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	2280      	movs	r2, #128	; 0x80
 801411c:	601a      	str	r2, [r3, #0]
}
 801411e:	bf00      	nop
 8014120:	3714      	adds	r7, #20
 8014122:	46bd      	mov	sp, r7
 8014124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014128:	4770      	bx	lr
 801412a:	bf00      	nop
 801412c:	200026f4 	.word	0x200026f4
 8014130:	20002750 	.word	0x20002750

08014134 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014134:	b480      	push	{r7}
 8014136:	b085      	sub	sp, #20
 8014138:	af00      	add	r7, sp, #0
 801413a:	60f8      	str	r0, [r7, #12]
 801413c:	60b9      	str	r1, [r7, #8]
 801413e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	4a07      	ldr	r2, [pc, #28]	; (8014160 <vApplicationGetTimerTaskMemory+0x2c>)
 8014144:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	4a06      	ldr	r2, [pc, #24]	; (8014164 <vApplicationGetTimerTaskMemory+0x30>)
 801414a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014152:	601a      	str	r2, [r3, #0]
}
 8014154:	bf00      	nop
 8014156:	3714      	adds	r7, #20
 8014158:	46bd      	mov	sp, r7
 801415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415e:	4770      	bx	lr
 8014160:	20002950 	.word	0x20002950
 8014164:	200029ac 	.word	0x200029ac

08014168 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014168:	b480      	push	{r7}
 801416a:	b083      	sub	sp, #12
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f103 0208 	add.w	r2, r3, #8
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f04f 32ff 	mov.w	r2, #4294967295
 8014180:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f103 0208 	add.w	r2, r3, #8
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f103 0208 	add.w	r2, r3, #8
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2200      	movs	r2, #0
 801419a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801419c:	bf00      	nop
 801419e:	370c      	adds	r7, #12
 80141a0:	46bd      	mov	sp, r7
 80141a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a6:	4770      	bx	lr

080141a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80141a8:	b480      	push	{r7}
 80141aa:	b083      	sub	sp, #12
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	2200      	movs	r2, #0
 80141b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80141b6:	bf00      	nop
 80141b8:	370c      	adds	r7, #12
 80141ba:	46bd      	mov	sp, r7
 80141bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c0:	4770      	bx	lr

080141c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80141c2:	b480      	push	{r7}
 80141c4:	b085      	sub	sp, #20
 80141c6:	af00      	add	r7, sp, #0
 80141c8:	6078      	str	r0, [r7, #4]
 80141ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	685b      	ldr	r3, [r3, #4]
 80141d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	68fa      	ldr	r2, [r7, #12]
 80141d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	689a      	ldr	r2, [r3, #8]
 80141dc:	683b      	ldr	r3, [r7, #0]
 80141de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	689b      	ldr	r3, [r3, #8]
 80141e4:	683a      	ldr	r2, [r7, #0]
 80141e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	683a      	ldr	r2, [r7, #0]
 80141ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	687a      	ldr	r2, [r7, #4]
 80141f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	1c5a      	adds	r2, r3, #1
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	601a      	str	r2, [r3, #0]
}
 80141fe:	bf00      	nop
 8014200:	3714      	adds	r7, #20
 8014202:	46bd      	mov	sp, r7
 8014204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014208:	4770      	bx	lr

0801420a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801420a:	b480      	push	{r7}
 801420c:	b085      	sub	sp, #20
 801420e:	af00      	add	r7, sp, #0
 8014210:	6078      	str	r0, [r7, #4]
 8014212:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014214:	683b      	ldr	r3, [r7, #0]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014220:	d103      	bne.n	801422a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	691b      	ldr	r3, [r3, #16]
 8014226:	60fb      	str	r3, [r7, #12]
 8014228:	e00c      	b.n	8014244 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	3308      	adds	r3, #8
 801422e:	60fb      	str	r3, [r7, #12]
 8014230:	e002      	b.n	8014238 <vListInsert+0x2e>
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	60fb      	str	r3, [r7, #12]
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	685b      	ldr	r3, [r3, #4]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	68ba      	ldr	r2, [r7, #8]
 8014240:	429a      	cmp	r2, r3
 8014242:	d2f6      	bcs.n	8014232 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	685a      	ldr	r2, [r3, #4]
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	685b      	ldr	r3, [r3, #4]
 8014250:	683a      	ldr	r2, [r7, #0]
 8014252:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014254:	683b      	ldr	r3, [r7, #0]
 8014256:	68fa      	ldr	r2, [r7, #12]
 8014258:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	683a      	ldr	r2, [r7, #0]
 801425e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014260:	683b      	ldr	r3, [r7, #0]
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	1c5a      	adds	r2, r3, #1
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	601a      	str	r2, [r3, #0]
}
 8014270:	bf00      	nop
 8014272:	3714      	adds	r7, #20
 8014274:	46bd      	mov	sp, r7
 8014276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427a:	4770      	bx	lr

0801427c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801427c:	b480      	push	{r7}
 801427e:	b085      	sub	sp, #20
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	691b      	ldr	r3, [r3, #16]
 8014288:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	685b      	ldr	r3, [r3, #4]
 801428e:	687a      	ldr	r2, [r7, #4]
 8014290:	6892      	ldr	r2, [r2, #8]
 8014292:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	689b      	ldr	r3, [r3, #8]
 8014298:	687a      	ldr	r2, [r7, #4]
 801429a:	6852      	ldr	r2, [r2, #4]
 801429c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	685b      	ldr	r3, [r3, #4]
 80142a2:	687a      	ldr	r2, [r7, #4]
 80142a4:	429a      	cmp	r2, r3
 80142a6:	d103      	bne.n	80142b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	689a      	ldr	r2, [r3, #8]
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2200      	movs	r2, #0
 80142b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	1e5a      	subs	r2, r3, #1
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	681b      	ldr	r3, [r3, #0]
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3714      	adds	r7, #20
 80142c8:	46bd      	mov	sp, r7
 80142ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ce:	4770      	bx	lr

080142d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b084      	sub	sp, #16
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d10a      	bne.n	80142fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80142e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142e8:	f383 8811 	msr	BASEPRI, r3
 80142ec:	f3bf 8f6f 	isb	sy
 80142f0:	f3bf 8f4f 	dsb	sy
 80142f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80142f6:	bf00      	nop
 80142f8:	e7fe      	b.n	80142f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80142fa:	f002 f903 	bl	8016504 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	681a      	ldr	r2, [r3, #0]
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014306:	68f9      	ldr	r1, [r7, #12]
 8014308:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801430a:	fb01 f303 	mul.w	r3, r1, r3
 801430e:	441a      	add	r2, r3
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	2200      	movs	r2, #0
 8014318:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	681a      	ldr	r2, [r3, #0]
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	681a      	ldr	r2, [r3, #0]
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801432a:	3b01      	subs	r3, #1
 801432c:	68f9      	ldr	r1, [r7, #12]
 801432e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014330:	fb01 f303 	mul.w	r3, r1, r3
 8014334:	441a      	add	r2, r3
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	22ff      	movs	r2, #255	; 0xff
 801433e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	22ff      	movs	r2, #255	; 0xff
 8014346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801434a:	683b      	ldr	r3, [r7, #0]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d114      	bne.n	801437a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	691b      	ldr	r3, [r3, #16]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d01a      	beq.n	801438e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	3310      	adds	r3, #16
 801435c:	4618      	mov	r0, r3
 801435e:	f001 f9ef 	bl	8015740 <xTaskRemoveFromEventList>
 8014362:	4603      	mov	r3, r0
 8014364:	2b00      	cmp	r3, #0
 8014366:	d012      	beq.n	801438e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014368:	4b0c      	ldr	r3, [pc, #48]	; (801439c <xQueueGenericReset+0xcc>)
 801436a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801436e:	601a      	str	r2, [r3, #0]
 8014370:	f3bf 8f4f 	dsb	sy
 8014374:	f3bf 8f6f 	isb	sy
 8014378:	e009      	b.n	801438e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	3310      	adds	r3, #16
 801437e:	4618      	mov	r0, r3
 8014380:	f7ff fef2 	bl	8014168 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	3324      	adds	r3, #36	; 0x24
 8014388:	4618      	mov	r0, r3
 801438a:	f7ff feed 	bl	8014168 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801438e:	f002 f8e9 	bl	8016564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014392:	2301      	movs	r3, #1
}
 8014394:	4618      	mov	r0, r3
 8014396:	3710      	adds	r7, #16
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}
 801439c:	e000ed04 	.word	0xe000ed04

080143a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b08e      	sub	sp, #56	; 0x38
 80143a4:	af02      	add	r7, sp, #8
 80143a6:	60f8      	str	r0, [r7, #12]
 80143a8:	60b9      	str	r1, [r7, #8]
 80143aa:	607a      	str	r2, [r7, #4]
 80143ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d10a      	bne.n	80143ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80143b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143b8:	f383 8811 	msr	BASEPRI, r3
 80143bc:	f3bf 8f6f 	isb	sy
 80143c0:	f3bf 8f4f 	dsb	sy
 80143c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80143c6:	bf00      	nop
 80143c8:	e7fe      	b.n	80143c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d10a      	bne.n	80143e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80143d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143d4:	f383 8811 	msr	BASEPRI, r3
 80143d8:	f3bf 8f6f 	isb	sy
 80143dc:	f3bf 8f4f 	dsb	sy
 80143e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80143e2:	bf00      	nop
 80143e4:	e7fe      	b.n	80143e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d002      	beq.n	80143f2 <xQueueGenericCreateStatic+0x52>
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d001      	beq.n	80143f6 <xQueueGenericCreateStatic+0x56>
 80143f2:	2301      	movs	r3, #1
 80143f4:	e000      	b.n	80143f8 <xQueueGenericCreateStatic+0x58>
 80143f6:	2300      	movs	r3, #0
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d10a      	bne.n	8014412 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80143fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014400:	f383 8811 	msr	BASEPRI, r3
 8014404:	f3bf 8f6f 	isb	sy
 8014408:	f3bf 8f4f 	dsb	sy
 801440c:	623b      	str	r3, [r7, #32]
}
 801440e:	bf00      	nop
 8014410:	e7fe      	b.n	8014410 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d102      	bne.n	801441e <xQueueGenericCreateStatic+0x7e>
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d101      	bne.n	8014422 <xQueueGenericCreateStatic+0x82>
 801441e:	2301      	movs	r3, #1
 8014420:	e000      	b.n	8014424 <xQueueGenericCreateStatic+0x84>
 8014422:	2300      	movs	r3, #0
 8014424:	2b00      	cmp	r3, #0
 8014426:	d10a      	bne.n	801443e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801442c:	f383 8811 	msr	BASEPRI, r3
 8014430:	f3bf 8f6f 	isb	sy
 8014434:	f3bf 8f4f 	dsb	sy
 8014438:	61fb      	str	r3, [r7, #28]
}
 801443a:	bf00      	nop
 801443c:	e7fe      	b.n	801443c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801443e:	2350      	movs	r3, #80	; 0x50
 8014440:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	2b50      	cmp	r3, #80	; 0x50
 8014446:	d00a      	beq.n	801445e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801444c:	f383 8811 	msr	BASEPRI, r3
 8014450:	f3bf 8f6f 	isb	sy
 8014454:	f3bf 8f4f 	dsb	sy
 8014458:	61bb      	str	r3, [r7, #24]
}
 801445a:	bf00      	nop
 801445c:	e7fe      	b.n	801445c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014464:	2b00      	cmp	r3, #0
 8014466:	d00d      	beq.n	8014484 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801446a:	2201      	movs	r2, #1
 801446c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014470:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014476:	9300      	str	r3, [sp, #0]
 8014478:	4613      	mov	r3, r2
 801447a:	687a      	ldr	r2, [r7, #4]
 801447c:	68b9      	ldr	r1, [r7, #8]
 801447e:	68f8      	ldr	r0, [r7, #12]
 8014480:	f000 f843 	bl	801450a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8014484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014486:	4618      	mov	r0, r3
 8014488:	3730      	adds	r7, #48	; 0x30
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}

0801448e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801448e:	b580      	push	{r7, lr}
 8014490:	b08a      	sub	sp, #40	; 0x28
 8014492:	af02      	add	r7, sp, #8
 8014494:	60f8      	str	r0, [r7, #12]
 8014496:	60b9      	str	r1, [r7, #8]
 8014498:	4613      	mov	r3, r2
 801449a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d10a      	bne.n	80144b8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80144a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144a6:	f383 8811 	msr	BASEPRI, r3
 80144aa:	f3bf 8f6f 	isb	sy
 80144ae:	f3bf 8f4f 	dsb	sy
 80144b2:	613b      	str	r3, [r7, #16]
}
 80144b4:	bf00      	nop
 80144b6:	e7fe      	b.n	80144b6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d102      	bne.n	80144c4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80144be:	2300      	movs	r3, #0
 80144c0:	61fb      	str	r3, [r7, #28]
 80144c2:	e004      	b.n	80144ce <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	68ba      	ldr	r2, [r7, #8]
 80144c8:	fb02 f303 	mul.w	r3, r2, r3
 80144cc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80144ce:	69fb      	ldr	r3, [r7, #28]
 80144d0:	3350      	adds	r3, #80	; 0x50
 80144d2:	4618      	mov	r0, r3
 80144d4:	f002 f938 	bl	8016748 <pvPortMalloc>
 80144d8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d00f      	beq.n	8014500 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80144e0:	69bb      	ldr	r3, [r7, #24]
 80144e2:	3350      	adds	r3, #80	; 0x50
 80144e4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80144e6:	69bb      	ldr	r3, [r7, #24]
 80144e8:	2200      	movs	r2, #0
 80144ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80144ee:	79fa      	ldrb	r2, [r7, #7]
 80144f0:	69bb      	ldr	r3, [r7, #24]
 80144f2:	9300      	str	r3, [sp, #0]
 80144f4:	4613      	mov	r3, r2
 80144f6:	697a      	ldr	r2, [r7, #20]
 80144f8:	68b9      	ldr	r1, [r7, #8]
 80144fa:	68f8      	ldr	r0, [r7, #12]
 80144fc:	f000 f805 	bl	801450a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8014500:	69bb      	ldr	r3, [r7, #24]
	}
 8014502:	4618      	mov	r0, r3
 8014504:	3720      	adds	r7, #32
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}

0801450a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801450a:	b580      	push	{r7, lr}
 801450c:	b084      	sub	sp, #16
 801450e:	af00      	add	r7, sp, #0
 8014510:	60f8      	str	r0, [r7, #12]
 8014512:	60b9      	str	r1, [r7, #8]
 8014514:	607a      	str	r2, [r7, #4]
 8014516:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d103      	bne.n	8014526 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	69ba      	ldr	r2, [r7, #24]
 8014522:	601a      	str	r2, [r3, #0]
 8014524:	e002      	b.n	801452c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014526:	69bb      	ldr	r3, [r7, #24]
 8014528:	687a      	ldr	r2, [r7, #4]
 801452a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801452c:	69bb      	ldr	r3, [r7, #24]
 801452e:	68fa      	ldr	r2, [r7, #12]
 8014530:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014532:	69bb      	ldr	r3, [r7, #24]
 8014534:	68ba      	ldr	r2, [r7, #8]
 8014536:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014538:	2101      	movs	r1, #1
 801453a:	69b8      	ldr	r0, [r7, #24]
 801453c:	f7ff fec8 	bl	80142d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014540:	69bb      	ldr	r3, [r7, #24]
 8014542:	78fa      	ldrb	r2, [r7, #3]
 8014544:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014548:	bf00      	nop
 801454a:	3710      	adds	r7, #16
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}

08014550 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b08e      	sub	sp, #56	; 0x38
 8014554:	af00      	add	r7, sp, #0
 8014556:	60f8      	str	r0, [r7, #12]
 8014558:	60b9      	str	r1, [r7, #8]
 801455a:	607a      	str	r2, [r7, #4]
 801455c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801455e:	2300      	movs	r3, #0
 8014560:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014568:	2b00      	cmp	r3, #0
 801456a:	d10a      	bne.n	8014582 <xQueueGenericSend+0x32>
	__asm volatile
 801456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014570:	f383 8811 	msr	BASEPRI, r3
 8014574:	f3bf 8f6f 	isb	sy
 8014578:	f3bf 8f4f 	dsb	sy
 801457c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801457e:	bf00      	nop
 8014580:	e7fe      	b.n	8014580 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d103      	bne.n	8014590 <xQueueGenericSend+0x40>
 8014588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801458c:	2b00      	cmp	r3, #0
 801458e:	d101      	bne.n	8014594 <xQueueGenericSend+0x44>
 8014590:	2301      	movs	r3, #1
 8014592:	e000      	b.n	8014596 <xQueueGenericSend+0x46>
 8014594:	2300      	movs	r3, #0
 8014596:	2b00      	cmp	r3, #0
 8014598:	d10a      	bne.n	80145b0 <xQueueGenericSend+0x60>
	__asm volatile
 801459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801459e:	f383 8811 	msr	BASEPRI, r3
 80145a2:	f3bf 8f6f 	isb	sy
 80145a6:	f3bf 8f4f 	dsb	sy
 80145aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80145ac:	bf00      	nop
 80145ae:	e7fe      	b.n	80145ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	2b02      	cmp	r3, #2
 80145b4:	d103      	bne.n	80145be <xQueueGenericSend+0x6e>
 80145b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145ba:	2b01      	cmp	r3, #1
 80145bc:	d101      	bne.n	80145c2 <xQueueGenericSend+0x72>
 80145be:	2301      	movs	r3, #1
 80145c0:	e000      	b.n	80145c4 <xQueueGenericSend+0x74>
 80145c2:	2300      	movs	r3, #0
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d10a      	bne.n	80145de <xQueueGenericSend+0x8e>
	__asm volatile
 80145c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145cc:	f383 8811 	msr	BASEPRI, r3
 80145d0:	f3bf 8f6f 	isb	sy
 80145d4:	f3bf 8f4f 	dsb	sy
 80145d8:	623b      	str	r3, [r7, #32]
}
 80145da:	bf00      	nop
 80145dc:	e7fe      	b.n	80145dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80145de:	f001 fa73 	bl	8015ac8 <xTaskGetSchedulerState>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d102      	bne.n	80145ee <xQueueGenericSend+0x9e>
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d101      	bne.n	80145f2 <xQueueGenericSend+0xa2>
 80145ee:	2301      	movs	r3, #1
 80145f0:	e000      	b.n	80145f4 <xQueueGenericSend+0xa4>
 80145f2:	2300      	movs	r3, #0
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d10a      	bne.n	801460e <xQueueGenericSend+0xbe>
	__asm volatile
 80145f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145fc:	f383 8811 	msr	BASEPRI, r3
 8014600:	f3bf 8f6f 	isb	sy
 8014604:	f3bf 8f4f 	dsb	sy
 8014608:	61fb      	str	r3, [r7, #28]
}
 801460a:	bf00      	nop
 801460c:	e7fe      	b.n	801460c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801460e:	f001 ff79 	bl	8016504 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801461a:	429a      	cmp	r2, r3
 801461c:	d302      	bcc.n	8014624 <xQueueGenericSend+0xd4>
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	2b02      	cmp	r3, #2
 8014622:	d129      	bne.n	8014678 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014624:	683a      	ldr	r2, [r7, #0]
 8014626:	68b9      	ldr	r1, [r7, #8]
 8014628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801462a:	f000 fac1 	bl	8014bb0 <prvCopyDataToQueue>
 801462e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014634:	2b00      	cmp	r3, #0
 8014636:	d010      	beq.n	801465a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801463a:	3324      	adds	r3, #36	; 0x24
 801463c:	4618      	mov	r0, r3
 801463e:	f001 f87f 	bl	8015740 <xTaskRemoveFromEventList>
 8014642:	4603      	mov	r3, r0
 8014644:	2b00      	cmp	r3, #0
 8014646:	d013      	beq.n	8014670 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014648:	4b3f      	ldr	r3, [pc, #252]	; (8014748 <xQueueGenericSend+0x1f8>)
 801464a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801464e:	601a      	str	r2, [r3, #0]
 8014650:	f3bf 8f4f 	dsb	sy
 8014654:	f3bf 8f6f 	isb	sy
 8014658:	e00a      	b.n	8014670 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801465c:	2b00      	cmp	r3, #0
 801465e:	d007      	beq.n	8014670 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014660:	4b39      	ldr	r3, [pc, #228]	; (8014748 <xQueueGenericSend+0x1f8>)
 8014662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014666:	601a      	str	r2, [r3, #0]
 8014668:	f3bf 8f4f 	dsb	sy
 801466c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014670:	f001 ff78 	bl	8016564 <vPortExitCritical>
				return pdPASS;
 8014674:	2301      	movs	r3, #1
 8014676:	e063      	b.n	8014740 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d103      	bne.n	8014686 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801467e:	f001 ff71 	bl	8016564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014682:	2300      	movs	r3, #0
 8014684:	e05c      	b.n	8014740 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014688:	2b00      	cmp	r3, #0
 801468a:	d106      	bne.n	801469a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801468c:	f107 0314 	add.w	r3, r7, #20
 8014690:	4618      	mov	r0, r3
 8014692:	f001 f8b9 	bl	8015808 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014696:	2301      	movs	r3, #1
 8014698:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801469a:	f001 ff63 	bl	8016564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801469e:	f000 fe27 	bl	80152f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80146a2:	f001 ff2f 	bl	8016504 <vPortEnterCritical>
 80146a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80146ac:	b25b      	sxtb	r3, r3
 80146ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146b2:	d103      	bne.n	80146bc <xQueueGenericSend+0x16c>
 80146b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b6:	2200      	movs	r2, #0
 80146b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80146bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80146c2:	b25b      	sxtb	r3, r3
 80146c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146c8:	d103      	bne.n	80146d2 <xQueueGenericSend+0x182>
 80146ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146cc:	2200      	movs	r2, #0
 80146ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80146d2:	f001 ff47 	bl	8016564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80146d6:	1d3a      	adds	r2, r7, #4
 80146d8:	f107 0314 	add.w	r3, r7, #20
 80146dc:	4611      	mov	r1, r2
 80146de:	4618      	mov	r0, r3
 80146e0:	f001 f8a8 	bl	8015834 <xTaskCheckForTimeOut>
 80146e4:	4603      	mov	r3, r0
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d124      	bne.n	8014734 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80146ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146ec:	f000 fb58 	bl	8014da0 <prvIsQueueFull>
 80146f0:	4603      	mov	r3, r0
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d018      	beq.n	8014728 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80146f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f8:	3310      	adds	r3, #16
 80146fa:	687a      	ldr	r2, [r7, #4]
 80146fc:	4611      	mov	r1, r2
 80146fe:	4618      	mov	r0, r3
 8014700:	f000 ffce 	bl	80156a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014706:	f000 fae3 	bl	8014cd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801470a:	f000 fdff 	bl	801530c <xTaskResumeAll>
 801470e:	4603      	mov	r3, r0
 8014710:	2b00      	cmp	r3, #0
 8014712:	f47f af7c 	bne.w	801460e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8014716:	4b0c      	ldr	r3, [pc, #48]	; (8014748 <xQueueGenericSend+0x1f8>)
 8014718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801471c:	601a      	str	r2, [r3, #0]
 801471e:	f3bf 8f4f 	dsb	sy
 8014722:	f3bf 8f6f 	isb	sy
 8014726:	e772      	b.n	801460e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801472a:	f000 fad1 	bl	8014cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801472e:	f000 fded 	bl	801530c <xTaskResumeAll>
 8014732:	e76c      	b.n	801460e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014736:	f000 facb 	bl	8014cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801473a:	f000 fde7 	bl	801530c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801473e:	2300      	movs	r3, #0
		}
	}
}
 8014740:	4618      	mov	r0, r3
 8014742:	3738      	adds	r7, #56	; 0x38
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}
 8014748:	e000ed04 	.word	0xe000ed04

0801474c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b08e      	sub	sp, #56	; 0x38
 8014750:	af00      	add	r7, sp, #0
 8014752:	60f8      	str	r0, [r7, #12]
 8014754:	60b9      	str	r1, [r7, #8]
 8014756:	607a      	str	r2, [r7, #4]
 8014758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014760:	2b00      	cmp	r3, #0
 8014762:	d10a      	bne.n	801477a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014768:	f383 8811 	msr	BASEPRI, r3
 801476c:	f3bf 8f6f 	isb	sy
 8014770:	f3bf 8f4f 	dsb	sy
 8014774:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014776:	bf00      	nop
 8014778:	e7fe      	b.n	8014778 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d103      	bne.n	8014788 <xQueueGenericSendFromISR+0x3c>
 8014780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014784:	2b00      	cmp	r3, #0
 8014786:	d101      	bne.n	801478c <xQueueGenericSendFromISR+0x40>
 8014788:	2301      	movs	r3, #1
 801478a:	e000      	b.n	801478e <xQueueGenericSendFromISR+0x42>
 801478c:	2300      	movs	r3, #0
 801478e:	2b00      	cmp	r3, #0
 8014790:	d10a      	bne.n	80147a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8014792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014796:	f383 8811 	msr	BASEPRI, r3
 801479a:	f3bf 8f6f 	isb	sy
 801479e:	f3bf 8f4f 	dsb	sy
 80147a2:	623b      	str	r3, [r7, #32]
}
 80147a4:	bf00      	nop
 80147a6:	e7fe      	b.n	80147a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	2b02      	cmp	r3, #2
 80147ac:	d103      	bne.n	80147b6 <xQueueGenericSendFromISR+0x6a>
 80147ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80147b2:	2b01      	cmp	r3, #1
 80147b4:	d101      	bne.n	80147ba <xQueueGenericSendFromISR+0x6e>
 80147b6:	2301      	movs	r3, #1
 80147b8:	e000      	b.n	80147bc <xQueueGenericSendFromISR+0x70>
 80147ba:	2300      	movs	r3, #0
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d10a      	bne.n	80147d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80147c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c4:	f383 8811 	msr	BASEPRI, r3
 80147c8:	f3bf 8f6f 	isb	sy
 80147cc:	f3bf 8f4f 	dsb	sy
 80147d0:	61fb      	str	r3, [r7, #28]
}
 80147d2:	bf00      	nop
 80147d4:	e7fe      	b.n	80147d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80147d6:	f001 ff77 	bl	80166c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80147da:	f3ef 8211 	mrs	r2, BASEPRI
 80147de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147e2:	f383 8811 	msr	BASEPRI, r3
 80147e6:	f3bf 8f6f 	isb	sy
 80147ea:	f3bf 8f4f 	dsb	sy
 80147ee:	61ba      	str	r2, [r7, #24]
 80147f0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80147f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80147f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80147f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80147fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80147fe:	429a      	cmp	r2, r3
 8014800:	d302      	bcc.n	8014808 <xQueueGenericSendFromISR+0xbc>
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	2b02      	cmp	r3, #2
 8014806:	d12c      	bne.n	8014862 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801480a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801480e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014812:	683a      	ldr	r2, [r7, #0]
 8014814:	68b9      	ldr	r1, [r7, #8]
 8014816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014818:	f000 f9ca 	bl	8014bb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801481c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8014820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014824:	d112      	bne.n	801484c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801482a:	2b00      	cmp	r3, #0
 801482c:	d016      	beq.n	801485c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014830:	3324      	adds	r3, #36	; 0x24
 8014832:	4618      	mov	r0, r3
 8014834:	f000 ff84 	bl	8015740 <xTaskRemoveFromEventList>
 8014838:	4603      	mov	r3, r0
 801483a:	2b00      	cmp	r3, #0
 801483c:	d00e      	beq.n	801485c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d00b      	beq.n	801485c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2201      	movs	r2, #1
 8014848:	601a      	str	r2, [r3, #0]
 801484a:	e007      	b.n	801485c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801484c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014850:	3301      	adds	r3, #1
 8014852:	b2db      	uxtb	r3, r3
 8014854:	b25a      	sxtb	r2, r3
 8014856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801485c:	2301      	movs	r3, #1
 801485e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8014860:	e001      	b.n	8014866 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014862:	2300      	movs	r3, #0
 8014864:	637b      	str	r3, [r7, #52]	; 0x34
 8014866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014868:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014870:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014874:	4618      	mov	r0, r3
 8014876:	3738      	adds	r7, #56	; 0x38
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b08c      	sub	sp, #48	; 0x30
 8014880:	af00      	add	r7, sp, #0
 8014882:	60f8      	str	r0, [r7, #12]
 8014884:	60b9      	str	r1, [r7, #8]
 8014886:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014888:	2300      	movs	r3, #0
 801488a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014892:	2b00      	cmp	r3, #0
 8014894:	d10a      	bne.n	80148ac <xQueueReceive+0x30>
	__asm volatile
 8014896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801489a:	f383 8811 	msr	BASEPRI, r3
 801489e:	f3bf 8f6f 	isb	sy
 80148a2:	f3bf 8f4f 	dsb	sy
 80148a6:	623b      	str	r3, [r7, #32]
}
 80148a8:	bf00      	nop
 80148aa:	e7fe      	b.n	80148aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80148ac:	68bb      	ldr	r3, [r7, #8]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d103      	bne.n	80148ba <xQueueReceive+0x3e>
 80148b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d101      	bne.n	80148be <xQueueReceive+0x42>
 80148ba:	2301      	movs	r3, #1
 80148bc:	e000      	b.n	80148c0 <xQueueReceive+0x44>
 80148be:	2300      	movs	r3, #0
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d10a      	bne.n	80148da <xQueueReceive+0x5e>
	__asm volatile
 80148c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148c8:	f383 8811 	msr	BASEPRI, r3
 80148cc:	f3bf 8f6f 	isb	sy
 80148d0:	f3bf 8f4f 	dsb	sy
 80148d4:	61fb      	str	r3, [r7, #28]
}
 80148d6:	bf00      	nop
 80148d8:	e7fe      	b.n	80148d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80148da:	f001 f8f5 	bl	8015ac8 <xTaskGetSchedulerState>
 80148de:	4603      	mov	r3, r0
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d102      	bne.n	80148ea <xQueueReceive+0x6e>
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d101      	bne.n	80148ee <xQueueReceive+0x72>
 80148ea:	2301      	movs	r3, #1
 80148ec:	e000      	b.n	80148f0 <xQueueReceive+0x74>
 80148ee:	2300      	movs	r3, #0
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d10a      	bne.n	801490a <xQueueReceive+0x8e>
	__asm volatile
 80148f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148f8:	f383 8811 	msr	BASEPRI, r3
 80148fc:	f3bf 8f6f 	isb	sy
 8014900:	f3bf 8f4f 	dsb	sy
 8014904:	61bb      	str	r3, [r7, #24]
}
 8014906:	bf00      	nop
 8014908:	e7fe      	b.n	8014908 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801490a:	f001 fdfb 	bl	8016504 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014912:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014916:	2b00      	cmp	r3, #0
 8014918:	d01f      	beq.n	801495a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801491a:	68b9      	ldr	r1, [r7, #8]
 801491c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801491e:	f000 f9b1 	bl	8014c84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014924:	1e5a      	subs	r2, r3, #1
 8014926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014928:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801492c:	691b      	ldr	r3, [r3, #16]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d00f      	beq.n	8014952 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014934:	3310      	adds	r3, #16
 8014936:	4618      	mov	r0, r3
 8014938:	f000 ff02 	bl	8015740 <xTaskRemoveFromEventList>
 801493c:	4603      	mov	r3, r0
 801493e:	2b00      	cmp	r3, #0
 8014940:	d007      	beq.n	8014952 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014942:	4b3d      	ldr	r3, [pc, #244]	; (8014a38 <xQueueReceive+0x1bc>)
 8014944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014948:	601a      	str	r2, [r3, #0]
 801494a:	f3bf 8f4f 	dsb	sy
 801494e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014952:	f001 fe07 	bl	8016564 <vPortExitCritical>
				return pdPASS;
 8014956:	2301      	movs	r3, #1
 8014958:	e069      	b.n	8014a2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d103      	bne.n	8014968 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014960:	f001 fe00 	bl	8016564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014964:	2300      	movs	r3, #0
 8014966:	e062      	b.n	8014a2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801496a:	2b00      	cmp	r3, #0
 801496c:	d106      	bne.n	801497c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801496e:	f107 0310 	add.w	r3, r7, #16
 8014972:	4618      	mov	r0, r3
 8014974:	f000 ff48 	bl	8015808 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014978:	2301      	movs	r3, #1
 801497a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801497c:	f001 fdf2 	bl	8016564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014980:	f000 fcb6 	bl	80152f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014984:	f001 fdbe 	bl	8016504 <vPortEnterCritical>
 8014988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801498a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801498e:	b25b      	sxtb	r3, r3
 8014990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014994:	d103      	bne.n	801499e <xQueueReceive+0x122>
 8014996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014998:	2200      	movs	r2, #0
 801499a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80149a4:	b25b      	sxtb	r3, r3
 80149a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149aa:	d103      	bne.n	80149b4 <xQueueReceive+0x138>
 80149ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ae:	2200      	movs	r2, #0
 80149b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80149b4:	f001 fdd6 	bl	8016564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80149b8:	1d3a      	adds	r2, r7, #4
 80149ba:	f107 0310 	add.w	r3, r7, #16
 80149be:	4611      	mov	r1, r2
 80149c0:	4618      	mov	r0, r3
 80149c2:	f000 ff37 	bl	8015834 <xTaskCheckForTimeOut>
 80149c6:	4603      	mov	r3, r0
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d123      	bne.n	8014a14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80149cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149ce:	f000 f9d1 	bl	8014d74 <prvIsQueueEmpty>
 80149d2:	4603      	mov	r3, r0
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d017      	beq.n	8014a08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80149d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149da:	3324      	adds	r3, #36	; 0x24
 80149dc:	687a      	ldr	r2, [r7, #4]
 80149de:	4611      	mov	r1, r2
 80149e0:	4618      	mov	r0, r3
 80149e2:	f000 fe5d 	bl	80156a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80149e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149e8:	f000 f972 	bl	8014cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80149ec:	f000 fc8e 	bl	801530c <xTaskResumeAll>
 80149f0:	4603      	mov	r3, r0
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d189      	bne.n	801490a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80149f6:	4b10      	ldr	r3, [pc, #64]	; (8014a38 <xQueueReceive+0x1bc>)
 80149f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149fc:	601a      	str	r2, [r3, #0]
 80149fe:	f3bf 8f4f 	dsb	sy
 8014a02:	f3bf 8f6f 	isb	sy
 8014a06:	e780      	b.n	801490a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a0a:	f000 f961 	bl	8014cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014a0e:	f000 fc7d 	bl	801530c <xTaskResumeAll>
 8014a12:	e77a      	b.n	801490a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a16:	f000 f95b 	bl	8014cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014a1a:	f000 fc77 	bl	801530c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a20:	f000 f9a8 	bl	8014d74 <prvIsQueueEmpty>
 8014a24:	4603      	mov	r3, r0
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	f43f af6f 	beq.w	801490a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014a2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8014a2e:	4618      	mov	r0, r3
 8014a30:	3730      	adds	r7, #48	; 0x30
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}
 8014a36:	bf00      	nop
 8014a38:	e000ed04 	.word	0xe000ed04

08014a3c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b08e      	sub	sp, #56	; 0x38
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	60b9      	str	r1, [r7, #8]
 8014a46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d10a      	bne.n	8014a68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a56:	f383 8811 	msr	BASEPRI, r3
 8014a5a:	f3bf 8f6f 	isb	sy
 8014a5e:	f3bf 8f4f 	dsb	sy
 8014a62:	623b      	str	r3, [r7, #32]
}
 8014a64:	bf00      	nop
 8014a66:	e7fe      	b.n	8014a66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d103      	bne.n	8014a76 <xQueueReceiveFromISR+0x3a>
 8014a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d101      	bne.n	8014a7a <xQueueReceiveFromISR+0x3e>
 8014a76:	2301      	movs	r3, #1
 8014a78:	e000      	b.n	8014a7c <xQueueReceiveFromISR+0x40>
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d10a      	bne.n	8014a96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a84:	f383 8811 	msr	BASEPRI, r3
 8014a88:	f3bf 8f6f 	isb	sy
 8014a8c:	f3bf 8f4f 	dsb	sy
 8014a90:	61fb      	str	r3, [r7, #28]
}
 8014a92:	bf00      	nop
 8014a94:	e7fe      	b.n	8014a94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014a96:	f001 fe17 	bl	80166c8 <vPortValidateInterruptPriority>
	__asm volatile
 8014a9a:	f3ef 8211 	mrs	r2, BASEPRI
 8014a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aa2:	f383 8811 	msr	BASEPRI, r3
 8014aa6:	f3bf 8f6f 	isb	sy
 8014aaa:	f3bf 8f4f 	dsb	sy
 8014aae:	61ba      	str	r2, [r7, #24]
 8014ab0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014ab2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014aba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d02f      	beq.n	8014b22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014acc:	68b9      	ldr	r1, [r7, #8]
 8014ace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ad0:	f000 f8d8 	bl	8014c84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ad6:	1e5a      	subs	r2, r3, #1
 8014ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ada:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014adc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ae4:	d112      	bne.n	8014b0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae8:	691b      	ldr	r3, [r3, #16]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d016      	beq.n	8014b1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af0:	3310      	adds	r3, #16
 8014af2:	4618      	mov	r0, r3
 8014af4:	f000 fe24 	bl	8015740 <xTaskRemoveFromEventList>
 8014af8:	4603      	mov	r3, r0
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d00e      	beq.n	8014b1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d00b      	beq.n	8014b1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2201      	movs	r2, #1
 8014b08:	601a      	str	r2, [r3, #0]
 8014b0a:	e007      	b.n	8014b1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b10:	3301      	adds	r3, #1
 8014b12:	b2db      	uxtb	r3, r3
 8014b14:	b25a      	sxtb	r2, r3
 8014b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014b1c:	2301      	movs	r3, #1
 8014b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8014b20:	e001      	b.n	8014b26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8014b22:	2300      	movs	r3, #0
 8014b24:	637b      	str	r3, [r7, #52]	; 0x34
 8014b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	f383 8811 	msr	BASEPRI, r3
}
 8014b30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014b34:	4618      	mov	r0, r3
 8014b36:	3738      	adds	r7, #56	; 0x38
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}

08014b3c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b084      	sub	sp, #16
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d10a      	bne.n	8014b60 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8014b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b4e:	f383 8811 	msr	BASEPRI, r3
 8014b52:	f3bf 8f6f 	isb	sy
 8014b56:	f3bf 8f4f 	dsb	sy
 8014b5a:	60bb      	str	r3, [r7, #8]
}
 8014b5c:	bf00      	nop
 8014b5e:	e7fe      	b.n	8014b5e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8014b60:	f001 fcd0 	bl	8016504 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b68:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8014b6a:	f001 fcfb 	bl	8016564 <vPortExitCritical>

	return uxReturn;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014b70:	4618      	mov	r0, r3
 8014b72:	3710      	adds	r7, #16
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}

08014b78 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8014b78:	b480      	push	{r7}
 8014b7a:	b085      	sub	sp, #20
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d10a      	bne.n	8014b9c <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8014b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b8a:	f383 8811 	msr	BASEPRI, r3
 8014b8e:	f3bf 8f6f 	isb	sy
 8014b92:	f3bf 8f4f 	dsb	sy
 8014b96:	60bb      	str	r3, [r7, #8]
}
 8014b98:	bf00      	nop
 8014b9a:	e7fe      	b.n	8014b9a <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ba0:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8014ba2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	3714      	adds	r7, #20
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bae:	4770      	bx	lr

08014bb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b086      	sub	sp, #24
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	60f8      	str	r0, [r7, #12]
 8014bb8:	60b9      	str	r1, [r7, #8]
 8014bba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d10d      	bne.n	8014bea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d14d      	bne.n	8014c72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	685b      	ldr	r3, [r3, #4]
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f000 ff92 	bl	8015b04 <xTaskPriorityDisinherit>
 8014be0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	2200      	movs	r2, #0
 8014be6:	605a      	str	r2, [r3, #4]
 8014be8:	e043      	b.n	8014c72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d119      	bne.n	8014c24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	6898      	ldr	r0, [r3, #8]
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bf8:	461a      	mov	r2, r3
 8014bfa:	68b9      	ldr	r1, [r7, #8]
 8014bfc:	f002 fa1a 	bl	8017034 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	689a      	ldr	r2, [r3, #8]
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c08:	441a      	add	r2, r3
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	689a      	ldr	r2, [r3, #8]
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	685b      	ldr	r3, [r3, #4]
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d32b      	bcc.n	8014c72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	681a      	ldr	r2, [r3, #0]
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	609a      	str	r2, [r3, #8]
 8014c22:	e026      	b.n	8014c72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	68d8      	ldr	r0, [r3, #12]
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c2c:	461a      	mov	r2, r3
 8014c2e:	68b9      	ldr	r1, [r7, #8]
 8014c30:	f002 fa00 	bl	8017034 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	68da      	ldr	r2, [r3, #12]
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c3c:	425b      	negs	r3, r3
 8014c3e:	441a      	add	r2, r3
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	68da      	ldr	r2, [r3, #12]
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d207      	bcs.n	8014c60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	685a      	ldr	r2, [r3, #4]
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c58:	425b      	negs	r3, r3
 8014c5a:	441a      	add	r2, r3
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2b02      	cmp	r3, #2
 8014c64:	d105      	bne.n	8014c72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c66:	693b      	ldr	r3, [r7, #16]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d002      	beq.n	8014c72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014c6c:	693b      	ldr	r3, [r7, #16]
 8014c6e:	3b01      	subs	r3, #1
 8014c70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	1c5a      	adds	r2, r3, #1
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014c7a:	697b      	ldr	r3, [r7, #20]
}
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	3718      	adds	r7, #24
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b082      	sub	sp, #8
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d018      	beq.n	8014cc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	68da      	ldr	r2, [r3, #12]
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c9e:	441a      	add	r2, r3
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	68da      	ldr	r2, [r3, #12]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	685b      	ldr	r3, [r3, #4]
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d303      	bcc.n	8014cb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681a      	ldr	r2, [r3, #0]
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	68d9      	ldr	r1, [r3, #12]
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cc0:	461a      	mov	r2, r3
 8014cc2:	6838      	ldr	r0, [r7, #0]
 8014cc4:	f002 f9b6 	bl	8017034 <memcpy>
	}
}
 8014cc8:	bf00      	nop
 8014cca:	3708      	adds	r7, #8
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b084      	sub	sp, #16
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014cd8:	f001 fc14 	bl	8016504 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014ce2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014ce4:	e011      	b.n	8014d0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d012      	beq.n	8014d14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	3324      	adds	r3, #36	; 0x24
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f000 fd24 	bl	8015740 <xTaskRemoveFromEventList>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d001      	beq.n	8014d02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014cfe:	f000 fdfb 	bl	80158f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014d02:	7bfb      	ldrb	r3, [r7, #15]
 8014d04:	3b01      	subs	r3, #1
 8014d06:	b2db      	uxtb	r3, r3
 8014d08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	dce9      	bgt.n	8014ce6 <prvUnlockQueue+0x16>
 8014d12:	e000      	b.n	8014d16 <prvUnlockQueue+0x46>
					break;
 8014d14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	22ff      	movs	r2, #255	; 0xff
 8014d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014d1e:	f001 fc21 	bl	8016564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014d22:	f001 fbef 	bl	8016504 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014d2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014d2e:	e011      	b.n	8014d54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	691b      	ldr	r3, [r3, #16]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d012      	beq.n	8014d5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	3310      	adds	r3, #16
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f000 fcff 	bl	8015740 <xTaskRemoveFromEventList>
 8014d42:	4603      	mov	r3, r0
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d001      	beq.n	8014d4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014d48:	f000 fdd6 	bl	80158f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014d4c:	7bbb      	ldrb	r3, [r7, #14]
 8014d4e:	3b01      	subs	r3, #1
 8014d50:	b2db      	uxtb	r3, r3
 8014d52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014d54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	dce9      	bgt.n	8014d30 <prvUnlockQueue+0x60>
 8014d5c:	e000      	b.n	8014d60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014d5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	22ff      	movs	r2, #255	; 0xff
 8014d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014d68:	f001 fbfc 	bl	8016564 <vPortExitCritical>
}
 8014d6c:	bf00      	nop
 8014d6e:	3710      	adds	r7, #16
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b084      	sub	sp, #16
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014d7c:	f001 fbc2 	bl	8016504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d102      	bne.n	8014d8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014d88:	2301      	movs	r3, #1
 8014d8a:	60fb      	str	r3, [r7, #12]
 8014d8c:	e001      	b.n	8014d92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014d92:	f001 fbe7 	bl	8016564 <vPortExitCritical>

	return xReturn;
 8014d96:	68fb      	ldr	r3, [r7, #12]
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	3710      	adds	r7, #16
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bd80      	pop	{r7, pc}

08014da0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b084      	sub	sp, #16
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014da8:	f001 fbac 	bl	8016504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014db4:	429a      	cmp	r2, r3
 8014db6:	d102      	bne.n	8014dbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014db8:	2301      	movs	r3, #1
 8014dba:	60fb      	str	r3, [r7, #12]
 8014dbc:	e001      	b.n	8014dc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014dc2:	f001 fbcf 	bl	8016564 <vPortExitCritical>

	return xReturn;
 8014dc6:	68fb      	ldr	r3, [r7, #12]
}
 8014dc8:	4618      	mov	r0, r3
 8014dca:	3710      	adds	r7, #16
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}

08014dd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014dd0:	b480      	push	{r7}
 8014dd2:	b085      	sub	sp, #20
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
 8014dd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014dda:	2300      	movs	r3, #0
 8014ddc:	60fb      	str	r3, [r7, #12]
 8014dde:	e014      	b.n	8014e0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014de0:	4a0f      	ldr	r2, [pc, #60]	; (8014e20 <vQueueAddToRegistry+0x50>)
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d10b      	bne.n	8014e04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014dec:	490c      	ldr	r1, [pc, #48]	; (8014e20 <vQueueAddToRegistry+0x50>)
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	683a      	ldr	r2, [r7, #0]
 8014df2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014df6:	4a0a      	ldr	r2, [pc, #40]	; (8014e20 <vQueueAddToRegistry+0x50>)
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	00db      	lsls	r3, r3, #3
 8014dfc:	4413      	add	r3, r2
 8014dfe:	687a      	ldr	r2, [r7, #4]
 8014e00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014e02:	e006      	b.n	8014e12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	3301      	adds	r3, #1
 8014e08:	60fb      	str	r3, [r7, #12]
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	2b07      	cmp	r3, #7
 8014e0e:	d9e7      	bls.n	8014de0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014e10:	bf00      	nop
 8014e12:	bf00      	nop
 8014e14:	3714      	adds	r7, #20
 8014e16:	46bd      	mov	sp, r7
 8014e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1c:	4770      	bx	lr
 8014e1e:	bf00      	nop
 8014e20:	20002dac 	.word	0x20002dac

08014e24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b086      	sub	sp, #24
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	60f8      	str	r0, [r7, #12]
 8014e2c:	60b9      	str	r1, [r7, #8]
 8014e2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014e34:	f001 fb66 	bl	8016504 <vPortEnterCritical>
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014e3e:	b25b      	sxtb	r3, r3
 8014e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e44:	d103      	bne.n	8014e4e <vQueueWaitForMessageRestricted+0x2a>
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014e54:	b25b      	sxtb	r3, r3
 8014e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e5a:	d103      	bne.n	8014e64 <vQueueWaitForMessageRestricted+0x40>
 8014e5c:	697b      	ldr	r3, [r7, #20]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014e64:	f001 fb7e 	bl	8016564 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d106      	bne.n	8014e7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	3324      	adds	r3, #36	; 0x24
 8014e74:	687a      	ldr	r2, [r7, #4]
 8014e76:	68b9      	ldr	r1, [r7, #8]
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f000 fc35 	bl	80156e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014e7e:	6978      	ldr	r0, [r7, #20]
 8014e80:	f7ff ff26 	bl	8014cd0 <prvUnlockQueue>
	}
 8014e84:	bf00      	nop
 8014e86:	3718      	adds	r7, #24
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}

08014e8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b08e      	sub	sp, #56	; 0x38
 8014e90:	af04      	add	r7, sp, #16
 8014e92:	60f8      	str	r0, [r7, #12]
 8014e94:	60b9      	str	r1, [r7, #8]
 8014e96:	607a      	str	r2, [r7, #4]
 8014e98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d10a      	bne.n	8014eb6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8014ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea4:	f383 8811 	msr	BASEPRI, r3
 8014ea8:	f3bf 8f6f 	isb	sy
 8014eac:	f3bf 8f4f 	dsb	sy
 8014eb0:	623b      	str	r3, [r7, #32]
}
 8014eb2:	bf00      	nop
 8014eb4:	e7fe      	b.n	8014eb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d10a      	bne.n	8014ed2 <xTaskCreateStatic+0x46>
	__asm volatile
 8014ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ec0:	f383 8811 	msr	BASEPRI, r3
 8014ec4:	f3bf 8f6f 	isb	sy
 8014ec8:	f3bf 8f4f 	dsb	sy
 8014ecc:	61fb      	str	r3, [r7, #28]
}
 8014ece:	bf00      	nop
 8014ed0:	e7fe      	b.n	8014ed0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014ed2:	235c      	movs	r3, #92	; 0x5c
 8014ed4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014ed6:	693b      	ldr	r3, [r7, #16]
 8014ed8:	2b5c      	cmp	r3, #92	; 0x5c
 8014eda:	d00a      	beq.n	8014ef2 <xTaskCreateStatic+0x66>
	__asm volatile
 8014edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ee0:	f383 8811 	msr	BASEPRI, r3
 8014ee4:	f3bf 8f6f 	isb	sy
 8014ee8:	f3bf 8f4f 	dsb	sy
 8014eec:	61bb      	str	r3, [r7, #24]
}
 8014eee:	bf00      	nop
 8014ef0:	e7fe      	b.n	8014ef0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d01e      	beq.n	8014f36 <xTaskCreateStatic+0xaa>
 8014ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d01b      	beq.n	8014f36 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f00:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f06:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f0a:	2202      	movs	r2, #2
 8014f0c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014f10:	2300      	movs	r3, #0
 8014f12:	9303      	str	r3, [sp, #12]
 8014f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f16:	9302      	str	r3, [sp, #8]
 8014f18:	f107 0314 	add.w	r3, r7, #20
 8014f1c:	9301      	str	r3, [sp, #4]
 8014f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f20:	9300      	str	r3, [sp, #0]
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	687a      	ldr	r2, [r7, #4]
 8014f26:	68b9      	ldr	r1, [r7, #8]
 8014f28:	68f8      	ldr	r0, [r7, #12]
 8014f2a:	f000 f850 	bl	8014fce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f30:	f000 f8d4 	bl	80150dc <prvAddNewTaskToReadyList>
 8014f34:	e001      	b.n	8014f3a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8014f36:	2300      	movs	r3, #0
 8014f38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014f3a:	697b      	ldr	r3, [r7, #20]
	}
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	3728      	adds	r7, #40	; 0x28
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bd80      	pop	{r7, pc}

08014f44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b08c      	sub	sp, #48	; 0x30
 8014f48:	af04      	add	r7, sp, #16
 8014f4a:	60f8      	str	r0, [r7, #12]
 8014f4c:	60b9      	str	r1, [r7, #8]
 8014f4e:	603b      	str	r3, [r7, #0]
 8014f50:	4613      	mov	r3, r2
 8014f52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f54:	88fb      	ldrh	r3, [r7, #6]
 8014f56:	009b      	lsls	r3, r3, #2
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f001 fbf5 	bl	8016748 <pvPortMalloc>
 8014f5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d00e      	beq.n	8014f84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8014f66:	205c      	movs	r0, #92	; 0x5c
 8014f68:	f001 fbee 	bl	8016748 <pvPortMalloc>
 8014f6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014f6e:	69fb      	ldr	r3, [r7, #28]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d003      	beq.n	8014f7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014f74:	69fb      	ldr	r3, [r7, #28]
 8014f76:	697a      	ldr	r2, [r7, #20]
 8014f78:	631a      	str	r2, [r3, #48]	; 0x30
 8014f7a:	e005      	b.n	8014f88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014f7c:	6978      	ldr	r0, [r7, #20]
 8014f7e:	f001 fc29 	bl	80167d4 <vPortFree>
 8014f82:	e001      	b.n	8014f88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014f84:	2300      	movs	r3, #0
 8014f86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014f88:	69fb      	ldr	r3, [r7, #28]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d017      	beq.n	8014fbe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	2200      	movs	r2, #0
 8014f92:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014f96:	88fa      	ldrh	r2, [r7, #6]
 8014f98:	2300      	movs	r3, #0
 8014f9a:	9303      	str	r3, [sp, #12]
 8014f9c:	69fb      	ldr	r3, [r7, #28]
 8014f9e:	9302      	str	r3, [sp, #8]
 8014fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fa2:	9301      	str	r3, [sp, #4]
 8014fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fa6:	9300      	str	r3, [sp, #0]
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	68b9      	ldr	r1, [r7, #8]
 8014fac:	68f8      	ldr	r0, [r7, #12]
 8014fae:	f000 f80e 	bl	8014fce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014fb2:	69f8      	ldr	r0, [r7, #28]
 8014fb4:	f000 f892 	bl	80150dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014fb8:	2301      	movs	r3, #1
 8014fba:	61bb      	str	r3, [r7, #24]
 8014fbc:	e002      	b.n	8014fc4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8014fc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014fc4:	69bb      	ldr	r3, [r7, #24]
	}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	3720      	adds	r7, #32
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd80      	pop	{r7, pc}

08014fce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014fce:	b580      	push	{r7, lr}
 8014fd0:	b088      	sub	sp, #32
 8014fd2:	af00      	add	r7, sp, #0
 8014fd4:	60f8      	str	r0, [r7, #12]
 8014fd6:	60b9      	str	r1, [r7, #8]
 8014fd8:	607a      	str	r2, [r7, #4]
 8014fda:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	009b      	lsls	r3, r3, #2
 8014fe4:	461a      	mov	r2, r3
 8014fe6:	21a5      	movs	r1, #165	; 0xa5
 8014fe8:	f002 f832 	bl	8017050 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8014fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014ff6:	3b01      	subs	r3, #1
 8014ff8:	009b      	lsls	r3, r3, #2
 8014ffa:	4413      	add	r3, r2
 8014ffc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8014ffe:	69bb      	ldr	r3, [r7, #24]
 8015000:	f023 0307 	bic.w	r3, r3, #7
 8015004:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015006:	69bb      	ldr	r3, [r7, #24]
 8015008:	f003 0307 	and.w	r3, r3, #7
 801500c:	2b00      	cmp	r3, #0
 801500e:	d00a      	beq.n	8015026 <prvInitialiseNewTask+0x58>
	__asm volatile
 8015010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015014:	f383 8811 	msr	BASEPRI, r3
 8015018:	f3bf 8f6f 	isb	sy
 801501c:	f3bf 8f4f 	dsb	sy
 8015020:	617b      	str	r3, [r7, #20]
}
 8015022:	bf00      	nop
 8015024:	e7fe      	b.n	8015024 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015026:	2300      	movs	r3, #0
 8015028:	61fb      	str	r3, [r7, #28]
 801502a:	e012      	b.n	8015052 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801502c:	68ba      	ldr	r2, [r7, #8]
 801502e:	69fb      	ldr	r3, [r7, #28]
 8015030:	4413      	add	r3, r2
 8015032:	7819      	ldrb	r1, [r3, #0]
 8015034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015036:	69fb      	ldr	r3, [r7, #28]
 8015038:	4413      	add	r3, r2
 801503a:	3334      	adds	r3, #52	; 0x34
 801503c:	460a      	mov	r2, r1
 801503e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8015040:	68ba      	ldr	r2, [r7, #8]
 8015042:	69fb      	ldr	r3, [r7, #28]
 8015044:	4413      	add	r3, r2
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d006      	beq.n	801505a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801504c:	69fb      	ldr	r3, [r7, #28]
 801504e:	3301      	adds	r3, #1
 8015050:	61fb      	str	r3, [r7, #28]
 8015052:	69fb      	ldr	r3, [r7, #28]
 8015054:	2b0f      	cmp	r3, #15
 8015056:	d9e9      	bls.n	801502c <prvInitialiseNewTask+0x5e>
 8015058:	e000      	b.n	801505c <prvInitialiseNewTask+0x8e>
		{
			break;
 801505a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801505e:	2200      	movs	r2, #0
 8015060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015066:	2b37      	cmp	r3, #55	; 0x37
 8015068:	d901      	bls.n	801506e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801506a:	2337      	movs	r3, #55	; 0x37
 801506c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015072:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015078:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801507c:	2200      	movs	r2, #0
 801507e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015082:	3304      	adds	r3, #4
 8015084:	4618      	mov	r0, r3
 8015086:	f7ff f88f 	bl	80141a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801508c:	3318      	adds	r3, #24
 801508e:	4618      	mov	r0, r3
 8015090:	f7ff f88a 	bl	80141a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015098:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801509c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80150a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80150a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80150aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ac:	2200      	movs	r2, #0
 80150ae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80150b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b2:	2200      	movs	r2, #0
 80150b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80150b8:	683a      	ldr	r2, [r7, #0]
 80150ba:	68f9      	ldr	r1, [r7, #12]
 80150bc:	69b8      	ldr	r0, [r7, #24]
 80150be:	f001 f8f5 	bl	80162ac <pxPortInitialiseStack>
 80150c2:	4602      	mov	r2, r0
 80150c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80150c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d002      	beq.n	80150d4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80150ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80150d4:	bf00      	nop
 80150d6:	3720      	adds	r7, #32
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}

080150dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80150e4:	f001 fa0e 	bl	8016504 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80150e8:	4b2d      	ldr	r3, [pc, #180]	; (80151a0 <prvAddNewTaskToReadyList+0xc4>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	3301      	adds	r3, #1
 80150ee:	4a2c      	ldr	r2, [pc, #176]	; (80151a0 <prvAddNewTaskToReadyList+0xc4>)
 80150f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80150f2:	4b2c      	ldr	r3, [pc, #176]	; (80151a4 <prvAddNewTaskToReadyList+0xc8>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d109      	bne.n	801510e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80150fa:	4a2a      	ldr	r2, [pc, #168]	; (80151a4 <prvAddNewTaskToReadyList+0xc8>)
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015100:	4b27      	ldr	r3, [pc, #156]	; (80151a0 <prvAddNewTaskToReadyList+0xc4>)
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	2b01      	cmp	r3, #1
 8015106:	d110      	bne.n	801512a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015108:	f000 fc1a 	bl	8015940 <prvInitialiseTaskLists>
 801510c:	e00d      	b.n	801512a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801510e:	4b26      	ldr	r3, [pc, #152]	; (80151a8 <prvAddNewTaskToReadyList+0xcc>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d109      	bne.n	801512a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015116:	4b23      	ldr	r3, [pc, #140]	; (80151a4 <prvAddNewTaskToReadyList+0xc8>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015120:	429a      	cmp	r2, r3
 8015122:	d802      	bhi.n	801512a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015124:	4a1f      	ldr	r2, [pc, #124]	; (80151a4 <prvAddNewTaskToReadyList+0xc8>)
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801512a:	4b20      	ldr	r3, [pc, #128]	; (80151ac <prvAddNewTaskToReadyList+0xd0>)
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	3301      	adds	r3, #1
 8015130:	4a1e      	ldr	r2, [pc, #120]	; (80151ac <prvAddNewTaskToReadyList+0xd0>)
 8015132:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015134:	4b1d      	ldr	r3, [pc, #116]	; (80151ac <prvAddNewTaskToReadyList+0xd0>)
 8015136:	681a      	ldr	r2, [r3, #0]
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015140:	4b1b      	ldr	r3, [pc, #108]	; (80151b0 <prvAddNewTaskToReadyList+0xd4>)
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	429a      	cmp	r2, r3
 8015146:	d903      	bls.n	8015150 <prvAddNewTaskToReadyList+0x74>
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801514c:	4a18      	ldr	r2, [pc, #96]	; (80151b0 <prvAddNewTaskToReadyList+0xd4>)
 801514e:	6013      	str	r3, [r2, #0]
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015154:	4613      	mov	r3, r2
 8015156:	009b      	lsls	r3, r3, #2
 8015158:	4413      	add	r3, r2
 801515a:	009b      	lsls	r3, r3, #2
 801515c:	4a15      	ldr	r2, [pc, #84]	; (80151b4 <prvAddNewTaskToReadyList+0xd8>)
 801515e:	441a      	add	r2, r3
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	3304      	adds	r3, #4
 8015164:	4619      	mov	r1, r3
 8015166:	4610      	mov	r0, r2
 8015168:	f7ff f82b 	bl	80141c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801516c:	f001 f9fa 	bl	8016564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015170:	4b0d      	ldr	r3, [pc, #52]	; (80151a8 <prvAddNewTaskToReadyList+0xcc>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d00e      	beq.n	8015196 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015178:	4b0a      	ldr	r3, [pc, #40]	; (80151a4 <prvAddNewTaskToReadyList+0xc8>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015182:	429a      	cmp	r2, r3
 8015184:	d207      	bcs.n	8015196 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015186:	4b0c      	ldr	r3, [pc, #48]	; (80151b8 <prvAddNewTaskToReadyList+0xdc>)
 8015188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801518c:	601a      	str	r2, [r3, #0]
 801518e:	f3bf 8f4f 	dsb	sy
 8015192:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015196:	bf00      	nop
 8015198:	3708      	adds	r7, #8
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}
 801519e:	bf00      	nop
 80151a0:	200032c0 	.word	0x200032c0
 80151a4:	20002dec 	.word	0x20002dec
 80151a8:	200032cc 	.word	0x200032cc
 80151ac:	200032dc 	.word	0x200032dc
 80151b0:	200032c8 	.word	0x200032c8
 80151b4:	20002df0 	.word	0x20002df0
 80151b8:	e000ed04 	.word	0xe000ed04

080151bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b084      	sub	sp, #16
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80151c4:	2300      	movs	r3, #0
 80151c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d017      	beq.n	80151fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80151ce:	4b13      	ldr	r3, [pc, #76]	; (801521c <vTaskDelay+0x60>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d00a      	beq.n	80151ec <vTaskDelay+0x30>
	__asm volatile
 80151d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151da:	f383 8811 	msr	BASEPRI, r3
 80151de:	f3bf 8f6f 	isb	sy
 80151e2:	f3bf 8f4f 	dsb	sy
 80151e6:	60bb      	str	r3, [r7, #8]
}
 80151e8:	bf00      	nop
 80151ea:	e7fe      	b.n	80151ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80151ec:	f000 f880 	bl	80152f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80151f0:	2100      	movs	r1, #0
 80151f2:	6878      	ldr	r0, [r7, #4]
 80151f4:	f000 fcf4 	bl	8015be0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80151f8:	f000 f888 	bl	801530c <xTaskResumeAll>
 80151fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d107      	bne.n	8015214 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015204:	4b06      	ldr	r3, [pc, #24]	; (8015220 <vTaskDelay+0x64>)
 8015206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801520a:	601a      	str	r2, [r3, #0]
 801520c:	f3bf 8f4f 	dsb	sy
 8015210:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015214:	bf00      	nop
 8015216:	3710      	adds	r7, #16
 8015218:	46bd      	mov	sp, r7
 801521a:	bd80      	pop	{r7, pc}
 801521c:	200032e8 	.word	0x200032e8
 8015220:	e000ed04 	.word	0xe000ed04

08015224 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b08a      	sub	sp, #40	; 0x28
 8015228:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801522a:	2300      	movs	r3, #0
 801522c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801522e:	2300      	movs	r3, #0
 8015230:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015232:	463a      	mov	r2, r7
 8015234:	1d39      	adds	r1, r7, #4
 8015236:	f107 0308 	add.w	r3, r7, #8
 801523a:	4618      	mov	r0, r3
 801523c:	f7fe ff60 	bl	8014100 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015240:	6839      	ldr	r1, [r7, #0]
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	68ba      	ldr	r2, [r7, #8]
 8015246:	9202      	str	r2, [sp, #8]
 8015248:	9301      	str	r3, [sp, #4]
 801524a:	2300      	movs	r3, #0
 801524c:	9300      	str	r3, [sp, #0]
 801524e:	2300      	movs	r3, #0
 8015250:	460a      	mov	r2, r1
 8015252:	4921      	ldr	r1, [pc, #132]	; (80152d8 <vTaskStartScheduler+0xb4>)
 8015254:	4821      	ldr	r0, [pc, #132]	; (80152dc <vTaskStartScheduler+0xb8>)
 8015256:	f7ff fe19 	bl	8014e8c <xTaskCreateStatic>
 801525a:	4603      	mov	r3, r0
 801525c:	4a20      	ldr	r2, [pc, #128]	; (80152e0 <vTaskStartScheduler+0xbc>)
 801525e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015260:	4b1f      	ldr	r3, [pc, #124]	; (80152e0 <vTaskStartScheduler+0xbc>)
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d002      	beq.n	801526e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015268:	2301      	movs	r3, #1
 801526a:	617b      	str	r3, [r7, #20]
 801526c:	e001      	b.n	8015272 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801526e:	2300      	movs	r3, #0
 8015270:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	2b01      	cmp	r3, #1
 8015276:	d102      	bne.n	801527e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015278:	f000 fd06 	bl	8015c88 <xTimerCreateTimerTask>
 801527c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801527e:	697b      	ldr	r3, [r7, #20]
 8015280:	2b01      	cmp	r3, #1
 8015282:	d116      	bne.n	80152b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8015284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015288:	f383 8811 	msr	BASEPRI, r3
 801528c:	f3bf 8f6f 	isb	sy
 8015290:	f3bf 8f4f 	dsb	sy
 8015294:	613b      	str	r3, [r7, #16]
}
 8015296:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015298:	4b12      	ldr	r3, [pc, #72]	; (80152e4 <vTaskStartScheduler+0xc0>)
 801529a:	f04f 32ff 	mov.w	r2, #4294967295
 801529e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80152a0:	4b11      	ldr	r3, [pc, #68]	; (80152e8 <vTaskStartScheduler+0xc4>)
 80152a2:	2201      	movs	r2, #1
 80152a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80152a6:	4b11      	ldr	r3, [pc, #68]	; (80152ec <vTaskStartScheduler+0xc8>)
 80152a8:	2200      	movs	r2, #0
 80152aa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80152ac:	f001 f888 	bl	80163c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80152b0:	e00e      	b.n	80152d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80152b2:	697b      	ldr	r3, [r7, #20]
 80152b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152b8:	d10a      	bne.n	80152d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80152ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152be:	f383 8811 	msr	BASEPRI, r3
 80152c2:	f3bf 8f6f 	isb	sy
 80152c6:	f3bf 8f4f 	dsb	sy
 80152ca:	60fb      	str	r3, [r7, #12]
}
 80152cc:	bf00      	nop
 80152ce:	e7fe      	b.n	80152ce <vTaskStartScheduler+0xaa>
}
 80152d0:	bf00      	nop
 80152d2:	3718      	adds	r7, #24
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}
 80152d8:	08017b94 	.word	0x08017b94
 80152dc:	08015911 	.word	0x08015911
 80152e0:	200032e4 	.word	0x200032e4
 80152e4:	200032e0 	.word	0x200032e0
 80152e8:	200032cc 	.word	0x200032cc
 80152ec:	200032c4 	.word	0x200032c4

080152f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80152f0:	b480      	push	{r7}
 80152f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80152f4:	4b04      	ldr	r3, [pc, #16]	; (8015308 <vTaskSuspendAll+0x18>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	3301      	adds	r3, #1
 80152fa:	4a03      	ldr	r2, [pc, #12]	; (8015308 <vTaskSuspendAll+0x18>)
 80152fc:	6013      	str	r3, [r2, #0]
}
 80152fe:	bf00      	nop
 8015300:	46bd      	mov	sp, r7
 8015302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015306:	4770      	bx	lr
 8015308:	200032e8 	.word	0x200032e8

0801530c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b084      	sub	sp, #16
 8015310:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015312:	2300      	movs	r3, #0
 8015314:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015316:	2300      	movs	r3, #0
 8015318:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801531a:	4b42      	ldr	r3, [pc, #264]	; (8015424 <xTaskResumeAll+0x118>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d10a      	bne.n	8015338 <xTaskResumeAll+0x2c>
	__asm volatile
 8015322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015326:	f383 8811 	msr	BASEPRI, r3
 801532a:	f3bf 8f6f 	isb	sy
 801532e:	f3bf 8f4f 	dsb	sy
 8015332:	603b      	str	r3, [r7, #0]
}
 8015334:	bf00      	nop
 8015336:	e7fe      	b.n	8015336 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015338:	f001 f8e4 	bl	8016504 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801533c:	4b39      	ldr	r3, [pc, #228]	; (8015424 <xTaskResumeAll+0x118>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	3b01      	subs	r3, #1
 8015342:	4a38      	ldr	r2, [pc, #224]	; (8015424 <xTaskResumeAll+0x118>)
 8015344:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015346:	4b37      	ldr	r3, [pc, #220]	; (8015424 <xTaskResumeAll+0x118>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d162      	bne.n	8015414 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801534e:	4b36      	ldr	r3, [pc, #216]	; (8015428 <xTaskResumeAll+0x11c>)
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d05e      	beq.n	8015414 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015356:	e02f      	b.n	80153b8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8015358:	4b34      	ldr	r3, [pc, #208]	; (801542c <xTaskResumeAll+0x120>)
 801535a:	68db      	ldr	r3, [r3, #12]
 801535c:	68db      	ldr	r3, [r3, #12]
 801535e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	3318      	adds	r3, #24
 8015364:	4618      	mov	r0, r3
 8015366:	f7fe ff89 	bl	801427c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	3304      	adds	r3, #4
 801536e:	4618      	mov	r0, r3
 8015370:	f7fe ff84 	bl	801427c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015378:	4b2d      	ldr	r3, [pc, #180]	; (8015430 <xTaskResumeAll+0x124>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	429a      	cmp	r2, r3
 801537e:	d903      	bls.n	8015388 <xTaskResumeAll+0x7c>
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015384:	4a2a      	ldr	r2, [pc, #168]	; (8015430 <xTaskResumeAll+0x124>)
 8015386:	6013      	str	r3, [r2, #0]
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801538c:	4613      	mov	r3, r2
 801538e:	009b      	lsls	r3, r3, #2
 8015390:	4413      	add	r3, r2
 8015392:	009b      	lsls	r3, r3, #2
 8015394:	4a27      	ldr	r2, [pc, #156]	; (8015434 <xTaskResumeAll+0x128>)
 8015396:	441a      	add	r2, r3
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	3304      	adds	r3, #4
 801539c:	4619      	mov	r1, r3
 801539e:	4610      	mov	r0, r2
 80153a0:	f7fe ff0f 	bl	80141c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153a8:	4b23      	ldr	r3, [pc, #140]	; (8015438 <xTaskResumeAll+0x12c>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d302      	bcc.n	80153b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80153b2:	4b22      	ldr	r3, [pc, #136]	; (801543c <xTaskResumeAll+0x130>)
 80153b4:	2201      	movs	r2, #1
 80153b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80153b8:	4b1c      	ldr	r3, [pc, #112]	; (801542c <xTaskResumeAll+0x120>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d1cb      	bne.n	8015358 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d001      	beq.n	80153ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80153c6:	f000 fb59 	bl	8015a7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80153ca:	4b1d      	ldr	r3, [pc, #116]	; (8015440 <xTaskResumeAll+0x134>)
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d010      	beq.n	80153f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80153d6:	f000 f847 	bl	8015468 <xTaskIncrementTick>
 80153da:	4603      	mov	r3, r0
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d002      	beq.n	80153e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80153e0:	4b16      	ldr	r3, [pc, #88]	; (801543c <xTaskResumeAll+0x130>)
 80153e2:	2201      	movs	r2, #1
 80153e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	3b01      	subs	r3, #1
 80153ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d1f1      	bne.n	80153d6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80153f2:	4b13      	ldr	r3, [pc, #76]	; (8015440 <xTaskResumeAll+0x134>)
 80153f4:	2200      	movs	r2, #0
 80153f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80153f8:	4b10      	ldr	r3, [pc, #64]	; (801543c <xTaskResumeAll+0x130>)
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d009      	beq.n	8015414 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015400:	2301      	movs	r3, #1
 8015402:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015404:	4b0f      	ldr	r3, [pc, #60]	; (8015444 <xTaskResumeAll+0x138>)
 8015406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801540a:	601a      	str	r2, [r3, #0]
 801540c:	f3bf 8f4f 	dsb	sy
 8015410:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015414:	f001 f8a6 	bl	8016564 <vPortExitCritical>

	return xAlreadyYielded;
 8015418:	68bb      	ldr	r3, [r7, #8]
}
 801541a:	4618      	mov	r0, r3
 801541c:	3710      	adds	r7, #16
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}
 8015422:	bf00      	nop
 8015424:	200032e8 	.word	0x200032e8
 8015428:	200032c0 	.word	0x200032c0
 801542c:	20003280 	.word	0x20003280
 8015430:	200032c8 	.word	0x200032c8
 8015434:	20002df0 	.word	0x20002df0
 8015438:	20002dec 	.word	0x20002dec
 801543c:	200032d4 	.word	0x200032d4
 8015440:	200032d0 	.word	0x200032d0
 8015444:	e000ed04 	.word	0xe000ed04

08015448 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801544e:	4b05      	ldr	r3, [pc, #20]	; (8015464 <xTaskGetTickCount+0x1c>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015454:	687b      	ldr	r3, [r7, #4]
}
 8015456:	4618      	mov	r0, r3
 8015458:	370c      	adds	r7, #12
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr
 8015462:	bf00      	nop
 8015464:	200032c4 	.word	0x200032c4

08015468 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b086      	sub	sp, #24
 801546c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801546e:	2300      	movs	r3, #0
 8015470:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015472:	4b51      	ldr	r3, [pc, #324]	; (80155b8 <xTaskIncrementTick+0x150>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	2b00      	cmp	r3, #0
 8015478:	f040 808e 	bne.w	8015598 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801547c:	4b4f      	ldr	r3, [pc, #316]	; (80155bc <xTaskIncrementTick+0x154>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	3301      	adds	r3, #1
 8015482:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015484:	4a4d      	ldr	r2, [pc, #308]	; (80155bc <xTaskIncrementTick+0x154>)
 8015486:	693b      	ldr	r3, [r7, #16]
 8015488:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801548a:	693b      	ldr	r3, [r7, #16]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d120      	bne.n	80154d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8015490:	4b4b      	ldr	r3, [pc, #300]	; (80155c0 <xTaskIncrementTick+0x158>)
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d00a      	beq.n	80154b0 <xTaskIncrementTick+0x48>
	__asm volatile
 801549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801549e:	f383 8811 	msr	BASEPRI, r3
 80154a2:	f3bf 8f6f 	isb	sy
 80154a6:	f3bf 8f4f 	dsb	sy
 80154aa:	603b      	str	r3, [r7, #0]
}
 80154ac:	bf00      	nop
 80154ae:	e7fe      	b.n	80154ae <xTaskIncrementTick+0x46>
 80154b0:	4b43      	ldr	r3, [pc, #268]	; (80155c0 <xTaskIncrementTick+0x158>)
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	60fb      	str	r3, [r7, #12]
 80154b6:	4b43      	ldr	r3, [pc, #268]	; (80155c4 <xTaskIncrementTick+0x15c>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	4a41      	ldr	r2, [pc, #260]	; (80155c0 <xTaskIncrementTick+0x158>)
 80154bc:	6013      	str	r3, [r2, #0]
 80154be:	4a41      	ldr	r2, [pc, #260]	; (80155c4 <xTaskIncrementTick+0x15c>)
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	6013      	str	r3, [r2, #0]
 80154c4:	4b40      	ldr	r3, [pc, #256]	; (80155c8 <xTaskIncrementTick+0x160>)
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	3301      	adds	r3, #1
 80154ca:	4a3f      	ldr	r2, [pc, #252]	; (80155c8 <xTaskIncrementTick+0x160>)
 80154cc:	6013      	str	r3, [r2, #0]
 80154ce:	f000 fad5 	bl	8015a7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80154d2:	4b3e      	ldr	r3, [pc, #248]	; (80155cc <xTaskIncrementTick+0x164>)
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	693a      	ldr	r2, [r7, #16]
 80154d8:	429a      	cmp	r2, r3
 80154da:	d34e      	bcc.n	801557a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80154dc:	4b38      	ldr	r3, [pc, #224]	; (80155c0 <xTaskIncrementTick+0x158>)
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d101      	bne.n	80154ea <xTaskIncrementTick+0x82>
 80154e6:	2301      	movs	r3, #1
 80154e8:	e000      	b.n	80154ec <xTaskIncrementTick+0x84>
 80154ea:	2300      	movs	r3, #0
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d004      	beq.n	80154fa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80154f0:	4b36      	ldr	r3, [pc, #216]	; (80155cc <xTaskIncrementTick+0x164>)
 80154f2:	f04f 32ff 	mov.w	r2, #4294967295
 80154f6:	601a      	str	r2, [r3, #0]
					break;
 80154f8:	e03f      	b.n	801557a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80154fa:	4b31      	ldr	r3, [pc, #196]	; (80155c0 <xTaskIncrementTick+0x158>)
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	68db      	ldr	r3, [r3, #12]
 8015500:	68db      	ldr	r3, [r3, #12]
 8015502:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801550a:	693a      	ldr	r2, [r7, #16]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	429a      	cmp	r2, r3
 8015510:	d203      	bcs.n	801551a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015512:	4a2e      	ldr	r2, [pc, #184]	; (80155cc <xTaskIncrementTick+0x164>)
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	6013      	str	r3, [r2, #0]
						break;
 8015518:	e02f      	b.n	801557a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	3304      	adds	r3, #4
 801551e:	4618      	mov	r0, r3
 8015520:	f7fe feac 	bl	801427c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015524:	68bb      	ldr	r3, [r7, #8]
 8015526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015528:	2b00      	cmp	r3, #0
 801552a:	d004      	beq.n	8015536 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	3318      	adds	r3, #24
 8015530:	4618      	mov	r0, r3
 8015532:	f7fe fea3 	bl	801427c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801553a:	4b25      	ldr	r3, [pc, #148]	; (80155d0 <xTaskIncrementTick+0x168>)
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	429a      	cmp	r2, r3
 8015540:	d903      	bls.n	801554a <xTaskIncrementTick+0xe2>
 8015542:	68bb      	ldr	r3, [r7, #8]
 8015544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015546:	4a22      	ldr	r2, [pc, #136]	; (80155d0 <xTaskIncrementTick+0x168>)
 8015548:	6013      	str	r3, [r2, #0]
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801554e:	4613      	mov	r3, r2
 8015550:	009b      	lsls	r3, r3, #2
 8015552:	4413      	add	r3, r2
 8015554:	009b      	lsls	r3, r3, #2
 8015556:	4a1f      	ldr	r2, [pc, #124]	; (80155d4 <xTaskIncrementTick+0x16c>)
 8015558:	441a      	add	r2, r3
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	3304      	adds	r3, #4
 801555e:	4619      	mov	r1, r3
 8015560:	4610      	mov	r0, r2
 8015562:	f7fe fe2e 	bl	80141c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801556a:	4b1b      	ldr	r3, [pc, #108]	; (80155d8 <xTaskIncrementTick+0x170>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015570:	429a      	cmp	r2, r3
 8015572:	d3b3      	bcc.n	80154dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015574:	2301      	movs	r3, #1
 8015576:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015578:	e7b0      	b.n	80154dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801557a:	4b17      	ldr	r3, [pc, #92]	; (80155d8 <xTaskIncrementTick+0x170>)
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015580:	4914      	ldr	r1, [pc, #80]	; (80155d4 <xTaskIncrementTick+0x16c>)
 8015582:	4613      	mov	r3, r2
 8015584:	009b      	lsls	r3, r3, #2
 8015586:	4413      	add	r3, r2
 8015588:	009b      	lsls	r3, r3, #2
 801558a:	440b      	add	r3, r1
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	2b01      	cmp	r3, #1
 8015590:	d907      	bls.n	80155a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8015592:	2301      	movs	r3, #1
 8015594:	617b      	str	r3, [r7, #20]
 8015596:	e004      	b.n	80155a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015598:	4b10      	ldr	r3, [pc, #64]	; (80155dc <xTaskIncrementTick+0x174>)
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	3301      	adds	r3, #1
 801559e:	4a0f      	ldr	r2, [pc, #60]	; (80155dc <xTaskIncrementTick+0x174>)
 80155a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80155a2:	4b0f      	ldr	r3, [pc, #60]	; (80155e0 <xTaskIncrementTick+0x178>)
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d001      	beq.n	80155ae <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80155aa:	2301      	movs	r3, #1
 80155ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80155ae:	697b      	ldr	r3, [r7, #20]
}
 80155b0:	4618      	mov	r0, r3
 80155b2:	3718      	adds	r7, #24
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}
 80155b8:	200032e8 	.word	0x200032e8
 80155bc:	200032c4 	.word	0x200032c4
 80155c0:	20003278 	.word	0x20003278
 80155c4:	2000327c 	.word	0x2000327c
 80155c8:	200032d8 	.word	0x200032d8
 80155cc:	200032e0 	.word	0x200032e0
 80155d0:	200032c8 	.word	0x200032c8
 80155d4:	20002df0 	.word	0x20002df0
 80155d8:	20002dec 	.word	0x20002dec
 80155dc:	200032d0 	.word	0x200032d0
 80155e0:	200032d4 	.word	0x200032d4

080155e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80155e4:	b480      	push	{r7}
 80155e6:	b085      	sub	sp, #20
 80155e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80155ea:	4b28      	ldr	r3, [pc, #160]	; (801568c <vTaskSwitchContext+0xa8>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d003      	beq.n	80155fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80155f2:	4b27      	ldr	r3, [pc, #156]	; (8015690 <vTaskSwitchContext+0xac>)
 80155f4:	2201      	movs	r2, #1
 80155f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80155f8:	e041      	b.n	801567e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80155fa:	4b25      	ldr	r3, [pc, #148]	; (8015690 <vTaskSwitchContext+0xac>)
 80155fc:	2200      	movs	r2, #0
 80155fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8015600:	4b24      	ldr	r3, [pc, #144]	; (8015694 <vTaskSwitchContext+0xb0>)
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	60fb      	str	r3, [r7, #12]
 8015606:	e010      	b.n	801562a <vTaskSwitchContext+0x46>
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d10a      	bne.n	8015624 <vTaskSwitchContext+0x40>
	__asm volatile
 801560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015612:	f383 8811 	msr	BASEPRI, r3
 8015616:	f3bf 8f6f 	isb	sy
 801561a:	f3bf 8f4f 	dsb	sy
 801561e:	607b      	str	r3, [r7, #4]
}
 8015620:	bf00      	nop
 8015622:	e7fe      	b.n	8015622 <vTaskSwitchContext+0x3e>
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	3b01      	subs	r3, #1
 8015628:	60fb      	str	r3, [r7, #12]
 801562a:	491b      	ldr	r1, [pc, #108]	; (8015698 <vTaskSwitchContext+0xb4>)
 801562c:	68fa      	ldr	r2, [r7, #12]
 801562e:	4613      	mov	r3, r2
 8015630:	009b      	lsls	r3, r3, #2
 8015632:	4413      	add	r3, r2
 8015634:	009b      	lsls	r3, r3, #2
 8015636:	440b      	add	r3, r1
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d0e4      	beq.n	8015608 <vTaskSwitchContext+0x24>
 801563e:	68fa      	ldr	r2, [r7, #12]
 8015640:	4613      	mov	r3, r2
 8015642:	009b      	lsls	r3, r3, #2
 8015644:	4413      	add	r3, r2
 8015646:	009b      	lsls	r3, r3, #2
 8015648:	4a13      	ldr	r2, [pc, #76]	; (8015698 <vTaskSwitchContext+0xb4>)
 801564a:	4413      	add	r3, r2
 801564c:	60bb      	str	r3, [r7, #8]
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	685b      	ldr	r3, [r3, #4]
 8015652:	685a      	ldr	r2, [r3, #4]
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	605a      	str	r2, [r3, #4]
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	685a      	ldr	r2, [r3, #4]
 801565c:	68bb      	ldr	r3, [r7, #8]
 801565e:	3308      	adds	r3, #8
 8015660:	429a      	cmp	r2, r3
 8015662:	d104      	bne.n	801566e <vTaskSwitchContext+0x8a>
 8015664:	68bb      	ldr	r3, [r7, #8]
 8015666:	685b      	ldr	r3, [r3, #4]
 8015668:	685a      	ldr	r2, [r3, #4]
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	605a      	str	r2, [r3, #4]
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	685b      	ldr	r3, [r3, #4]
 8015672:	68db      	ldr	r3, [r3, #12]
 8015674:	4a09      	ldr	r2, [pc, #36]	; (801569c <vTaskSwitchContext+0xb8>)
 8015676:	6013      	str	r3, [r2, #0]
 8015678:	4a06      	ldr	r2, [pc, #24]	; (8015694 <vTaskSwitchContext+0xb0>)
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	6013      	str	r3, [r2, #0]
}
 801567e:	bf00      	nop
 8015680:	3714      	adds	r7, #20
 8015682:	46bd      	mov	sp, r7
 8015684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015688:	4770      	bx	lr
 801568a:	bf00      	nop
 801568c:	200032e8 	.word	0x200032e8
 8015690:	200032d4 	.word	0x200032d4
 8015694:	200032c8 	.word	0x200032c8
 8015698:	20002df0 	.word	0x20002df0
 801569c:	20002dec 	.word	0x20002dec

080156a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b084      	sub	sp, #16
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
 80156a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d10a      	bne.n	80156c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80156b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156b4:	f383 8811 	msr	BASEPRI, r3
 80156b8:	f3bf 8f6f 	isb	sy
 80156bc:	f3bf 8f4f 	dsb	sy
 80156c0:	60fb      	str	r3, [r7, #12]
}
 80156c2:	bf00      	nop
 80156c4:	e7fe      	b.n	80156c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80156c6:	4b07      	ldr	r3, [pc, #28]	; (80156e4 <vTaskPlaceOnEventList+0x44>)
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	3318      	adds	r3, #24
 80156cc:	4619      	mov	r1, r3
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f7fe fd9b 	bl	801420a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80156d4:	2101      	movs	r1, #1
 80156d6:	6838      	ldr	r0, [r7, #0]
 80156d8:	f000 fa82 	bl	8015be0 <prvAddCurrentTaskToDelayedList>
}
 80156dc:	bf00      	nop
 80156de:	3710      	adds	r7, #16
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}
 80156e4:	20002dec 	.word	0x20002dec

080156e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b086      	sub	sp, #24
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	60f8      	str	r0, [r7, #12]
 80156f0:	60b9      	str	r1, [r7, #8]
 80156f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d10a      	bne.n	8015710 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80156fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156fe:	f383 8811 	msr	BASEPRI, r3
 8015702:	f3bf 8f6f 	isb	sy
 8015706:	f3bf 8f4f 	dsb	sy
 801570a:	617b      	str	r3, [r7, #20]
}
 801570c:	bf00      	nop
 801570e:	e7fe      	b.n	801570e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015710:	4b0a      	ldr	r3, [pc, #40]	; (801573c <vTaskPlaceOnEventListRestricted+0x54>)
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	3318      	adds	r3, #24
 8015716:	4619      	mov	r1, r3
 8015718:	68f8      	ldr	r0, [r7, #12]
 801571a:	f7fe fd52 	bl	80141c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d002      	beq.n	801572a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8015724:	f04f 33ff 	mov.w	r3, #4294967295
 8015728:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801572a:	6879      	ldr	r1, [r7, #4]
 801572c:	68b8      	ldr	r0, [r7, #8]
 801572e:	f000 fa57 	bl	8015be0 <prvAddCurrentTaskToDelayedList>
	}
 8015732:	bf00      	nop
 8015734:	3718      	adds	r7, #24
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}
 801573a:	bf00      	nop
 801573c:	20002dec 	.word	0x20002dec

08015740 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b086      	sub	sp, #24
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	68db      	ldr	r3, [r3, #12]
 801574c:	68db      	ldr	r3, [r3, #12]
 801574e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015750:	693b      	ldr	r3, [r7, #16]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d10a      	bne.n	801576c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801575a:	f383 8811 	msr	BASEPRI, r3
 801575e:	f3bf 8f6f 	isb	sy
 8015762:	f3bf 8f4f 	dsb	sy
 8015766:	60fb      	str	r3, [r7, #12]
}
 8015768:	bf00      	nop
 801576a:	e7fe      	b.n	801576a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801576c:	693b      	ldr	r3, [r7, #16]
 801576e:	3318      	adds	r3, #24
 8015770:	4618      	mov	r0, r3
 8015772:	f7fe fd83 	bl	801427c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015776:	4b1e      	ldr	r3, [pc, #120]	; (80157f0 <xTaskRemoveFromEventList+0xb0>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d11d      	bne.n	80157ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801577e:	693b      	ldr	r3, [r7, #16]
 8015780:	3304      	adds	r3, #4
 8015782:	4618      	mov	r0, r3
 8015784:	f7fe fd7a 	bl	801427c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801578c:	4b19      	ldr	r3, [pc, #100]	; (80157f4 <xTaskRemoveFromEventList+0xb4>)
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	429a      	cmp	r2, r3
 8015792:	d903      	bls.n	801579c <xTaskRemoveFromEventList+0x5c>
 8015794:	693b      	ldr	r3, [r7, #16]
 8015796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015798:	4a16      	ldr	r2, [pc, #88]	; (80157f4 <xTaskRemoveFromEventList+0xb4>)
 801579a:	6013      	str	r3, [r2, #0]
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157a0:	4613      	mov	r3, r2
 80157a2:	009b      	lsls	r3, r3, #2
 80157a4:	4413      	add	r3, r2
 80157a6:	009b      	lsls	r3, r3, #2
 80157a8:	4a13      	ldr	r2, [pc, #76]	; (80157f8 <xTaskRemoveFromEventList+0xb8>)
 80157aa:	441a      	add	r2, r3
 80157ac:	693b      	ldr	r3, [r7, #16]
 80157ae:	3304      	adds	r3, #4
 80157b0:	4619      	mov	r1, r3
 80157b2:	4610      	mov	r0, r2
 80157b4:	f7fe fd05 	bl	80141c2 <vListInsertEnd>
 80157b8:	e005      	b.n	80157c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80157ba:	693b      	ldr	r3, [r7, #16]
 80157bc:	3318      	adds	r3, #24
 80157be:	4619      	mov	r1, r3
 80157c0:	480e      	ldr	r0, [pc, #56]	; (80157fc <xTaskRemoveFromEventList+0xbc>)
 80157c2:	f7fe fcfe 	bl	80141c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80157c6:	693b      	ldr	r3, [r7, #16]
 80157c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157ca:	4b0d      	ldr	r3, [pc, #52]	; (8015800 <xTaskRemoveFromEventList+0xc0>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d905      	bls.n	80157e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80157d4:	2301      	movs	r3, #1
 80157d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80157d8:	4b0a      	ldr	r3, [pc, #40]	; (8015804 <xTaskRemoveFromEventList+0xc4>)
 80157da:	2201      	movs	r2, #1
 80157dc:	601a      	str	r2, [r3, #0]
 80157de:	e001      	b.n	80157e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80157e0:	2300      	movs	r3, #0
 80157e2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80157e4:	697b      	ldr	r3, [r7, #20]
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3718      	adds	r7, #24
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}
 80157ee:	bf00      	nop
 80157f0:	200032e8 	.word	0x200032e8
 80157f4:	200032c8 	.word	0x200032c8
 80157f8:	20002df0 	.word	0x20002df0
 80157fc:	20003280 	.word	0x20003280
 8015800:	20002dec 	.word	0x20002dec
 8015804:	200032d4 	.word	0x200032d4

08015808 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015808:	b480      	push	{r7}
 801580a:	b083      	sub	sp, #12
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015810:	4b06      	ldr	r3, [pc, #24]	; (801582c <vTaskInternalSetTimeOutState+0x24>)
 8015812:	681a      	ldr	r2, [r3, #0]
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015818:	4b05      	ldr	r3, [pc, #20]	; (8015830 <vTaskInternalSetTimeOutState+0x28>)
 801581a:	681a      	ldr	r2, [r3, #0]
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	605a      	str	r2, [r3, #4]
}
 8015820:	bf00      	nop
 8015822:	370c      	adds	r7, #12
 8015824:	46bd      	mov	sp, r7
 8015826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582a:	4770      	bx	lr
 801582c:	200032d8 	.word	0x200032d8
 8015830:	200032c4 	.word	0x200032c4

08015834 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b088      	sub	sp, #32
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
 801583c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d10a      	bne.n	801585a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015848:	f383 8811 	msr	BASEPRI, r3
 801584c:	f3bf 8f6f 	isb	sy
 8015850:	f3bf 8f4f 	dsb	sy
 8015854:	613b      	str	r3, [r7, #16]
}
 8015856:	bf00      	nop
 8015858:	e7fe      	b.n	8015858 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d10a      	bne.n	8015876 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015864:	f383 8811 	msr	BASEPRI, r3
 8015868:	f3bf 8f6f 	isb	sy
 801586c:	f3bf 8f4f 	dsb	sy
 8015870:	60fb      	str	r3, [r7, #12]
}
 8015872:	bf00      	nop
 8015874:	e7fe      	b.n	8015874 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015876:	f000 fe45 	bl	8016504 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801587a:	4b1d      	ldr	r3, [pc, #116]	; (80158f0 <xTaskCheckForTimeOut+0xbc>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	69ba      	ldr	r2, [r7, #24]
 8015886:	1ad3      	subs	r3, r2, r3
 8015888:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801588a:	683b      	ldr	r3, [r7, #0]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015892:	d102      	bne.n	801589a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015894:	2300      	movs	r3, #0
 8015896:	61fb      	str	r3, [r7, #28]
 8015898:	e023      	b.n	80158e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681a      	ldr	r2, [r3, #0]
 801589e:	4b15      	ldr	r3, [pc, #84]	; (80158f4 <xTaskCheckForTimeOut+0xc0>)
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d007      	beq.n	80158b6 <xTaskCheckForTimeOut+0x82>
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	69ba      	ldr	r2, [r7, #24]
 80158ac:	429a      	cmp	r2, r3
 80158ae:	d302      	bcc.n	80158b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80158b0:	2301      	movs	r3, #1
 80158b2:	61fb      	str	r3, [r7, #28]
 80158b4:	e015      	b.n	80158e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80158b6:	683b      	ldr	r3, [r7, #0]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	697a      	ldr	r2, [r7, #20]
 80158bc:	429a      	cmp	r2, r3
 80158be:	d20b      	bcs.n	80158d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80158c0:	683b      	ldr	r3, [r7, #0]
 80158c2:	681a      	ldr	r2, [r3, #0]
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	1ad2      	subs	r2, r2, r3
 80158c8:	683b      	ldr	r3, [r7, #0]
 80158ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f7ff ff9b 	bl	8015808 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80158d2:	2300      	movs	r3, #0
 80158d4:	61fb      	str	r3, [r7, #28]
 80158d6:	e004      	b.n	80158e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80158d8:	683b      	ldr	r3, [r7, #0]
 80158da:	2200      	movs	r2, #0
 80158dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80158de:	2301      	movs	r3, #1
 80158e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80158e2:	f000 fe3f 	bl	8016564 <vPortExitCritical>

	return xReturn;
 80158e6:	69fb      	ldr	r3, [r7, #28]
}
 80158e8:	4618      	mov	r0, r3
 80158ea:	3720      	adds	r7, #32
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bd80      	pop	{r7, pc}
 80158f0:	200032c4 	.word	0x200032c4
 80158f4:	200032d8 	.word	0x200032d8

080158f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80158f8:	b480      	push	{r7}
 80158fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80158fc:	4b03      	ldr	r3, [pc, #12]	; (801590c <vTaskMissedYield+0x14>)
 80158fe:	2201      	movs	r2, #1
 8015900:	601a      	str	r2, [r3, #0]
}
 8015902:	bf00      	nop
 8015904:	46bd      	mov	sp, r7
 8015906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801590a:	4770      	bx	lr
 801590c:	200032d4 	.word	0x200032d4

08015910 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b082      	sub	sp, #8
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015918:	f000 f852 	bl	80159c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801591c:	4b06      	ldr	r3, [pc, #24]	; (8015938 <prvIdleTask+0x28>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	2b01      	cmp	r3, #1
 8015922:	d9f9      	bls.n	8015918 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015924:	4b05      	ldr	r3, [pc, #20]	; (801593c <prvIdleTask+0x2c>)
 8015926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801592a:	601a      	str	r2, [r3, #0]
 801592c:	f3bf 8f4f 	dsb	sy
 8015930:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015934:	e7f0      	b.n	8015918 <prvIdleTask+0x8>
 8015936:	bf00      	nop
 8015938:	20002df0 	.word	0x20002df0
 801593c:	e000ed04 	.word	0xe000ed04

08015940 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b082      	sub	sp, #8
 8015944:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015946:	2300      	movs	r3, #0
 8015948:	607b      	str	r3, [r7, #4]
 801594a:	e00c      	b.n	8015966 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	4613      	mov	r3, r2
 8015950:	009b      	lsls	r3, r3, #2
 8015952:	4413      	add	r3, r2
 8015954:	009b      	lsls	r3, r3, #2
 8015956:	4a12      	ldr	r2, [pc, #72]	; (80159a0 <prvInitialiseTaskLists+0x60>)
 8015958:	4413      	add	r3, r2
 801595a:	4618      	mov	r0, r3
 801595c:	f7fe fc04 	bl	8014168 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	3301      	adds	r3, #1
 8015964:	607b      	str	r3, [r7, #4]
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	2b37      	cmp	r3, #55	; 0x37
 801596a:	d9ef      	bls.n	801594c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801596c:	480d      	ldr	r0, [pc, #52]	; (80159a4 <prvInitialiseTaskLists+0x64>)
 801596e:	f7fe fbfb 	bl	8014168 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015972:	480d      	ldr	r0, [pc, #52]	; (80159a8 <prvInitialiseTaskLists+0x68>)
 8015974:	f7fe fbf8 	bl	8014168 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015978:	480c      	ldr	r0, [pc, #48]	; (80159ac <prvInitialiseTaskLists+0x6c>)
 801597a:	f7fe fbf5 	bl	8014168 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801597e:	480c      	ldr	r0, [pc, #48]	; (80159b0 <prvInitialiseTaskLists+0x70>)
 8015980:	f7fe fbf2 	bl	8014168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015984:	480b      	ldr	r0, [pc, #44]	; (80159b4 <prvInitialiseTaskLists+0x74>)
 8015986:	f7fe fbef 	bl	8014168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801598a:	4b0b      	ldr	r3, [pc, #44]	; (80159b8 <prvInitialiseTaskLists+0x78>)
 801598c:	4a05      	ldr	r2, [pc, #20]	; (80159a4 <prvInitialiseTaskLists+0x64>)
 801598e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015990:	4b0a      	ldr	r3, [pc, #40]	; (80159bc <prvInitialiseTaskLists+0x7c>)
 8015992:	4a05      	ldr	r2, [pc, #20]	; (80159a8 <prvInitialiseTaskLists+0x68>)
 8015994:	601a      	str	r2, [r3, #0]
}
 8015996:	bf00      	nop
 8015998:	3708      	adds	r7, #8
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}
 801599e:	bf00      	nop
 80159a0:	20002df0 	.word	0x20002df0
 80159a4:	20003250 	.word	0x20003250
 80159a8:	20003264 	.word	0x20003264
 80159ac:	20003280 	.word	0x20003280
 80159b0:	20003294 	.word	0x20003294
 80159b4:	200032ac 	.word	0x200032ac
 80159b8:	20003278 	.word	0x20003278
 80159bc:	2000327c 	.word	0x2000327c

080159c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b082      	sub	sp, #8
 80159c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80159c6:	e019      	b.n	80159fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80159c8:	f000 fd9c 	bl	8016504 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80159cc:	4b10      	ldr	r3, [pc, #64]	; (8015a10 <prvCheckTasksWaitingTermination+0x50>)
 80159ce:	68db      	ldr	r3, [r3, #12]
 80159d0:	68db      	ldr	r3, [r3, #12]
 80159d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	3304      	adds	r3, #4
 80159d8:	4618      	mov	r0, r3
 80159da:	f7fe fc4f 	bl	801427c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80159de:	4b0d      	ldr	r3, [pc, #52]	; (8015a14 <prvCheckTasksWaitingTermination+0x54>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	3b01      	subs	r3, #1
 80159e4:	4a0b      	ldr	r2, [pc, #44]	; (8015a14 <prvCheckTasksWaitingTermination+0x54>)
 80159e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80159e8:	4b0b      	ldr	r3, [pc, #44]	; (8015a18 <prvCheckTasksWaitingTermination+0x58>)
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	3b01      	subs	r3, #1
 80159ee:	4a0a      	ldr	r2, [pc, #40]	; (8015a18 <prvCheckTasksWaitingTermination+0x58>)
 80159f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80159f2:	f000 fdb7 	bl	8016564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80159f6:	6878      	ldr	r0, [r7, #4]
 80159f8:	f000 f810 	bl	8015a1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80159fc:	4b06      	ldr	r3, [pc, #24]	; (8015a18 <prvCheckTasksWaitingTermination+0x58>)
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d1e1      	bne.n	80159c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015a04:	bf00      	nop
 8015a06:	bf00      	nop
 8015a08:	3708      	adds	r7, #8
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bd80      	pop	{r7, pc}
 8015a0e:	bf00      	nop
 8015a10:	20003294 	.word	0x20003294
 8015a14:	200032c0 	.word	0x200032c0
 8015a18:	200032a8 	.word	0x200032a8

08015a1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b084      	sub	sp, #16
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d108      	bne.n	8015a40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a32:	4618      	mov	r0, r3
 8015a34:	f000 fece 	bl	80167d4 <vPortFree>
				vPortFree( pxTCB );
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	f000 fecb 	bl	80167d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015a3e:	e018      	b.n	8015a72 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015a46:	2b01      	cmp	r3, #1
 8015a48:	d103      	bne.n	8015a52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f000 fec2 	bl	80167d4 <vPortFree>
	}
 8015a50:	e00f      	b.n	8015a72 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015a58:	2b02      	cmp	r3, #2
 8015a5a:	d00a      	beq.n	8015a72 <prvDeleteTCB+0x56>
	__asm volatile
 8015a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a60:	f383 8811 	msr	BASEPRI, r3
 8015a64:	f3bf 8f6f 	isb	sy
 8015a68:	f3bf 8f4f 	dsb	sy
 8015a6c:	60fb      	str	r3, [r7, #12]
}
 8015a6e:	bf00      	nop
 8015a70:	e7fe      	b.n	8015a70 <prvDeleteTCB+0x54>
	}
 8015a72:	bf00      	nop
 8015a74:	3710      	adds	r7, #16
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}
	...

08015a7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015a7c:	b480      	push	{r7}
 8015a7e:	b083      	sub	sp, #12
 8015a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015a82:	4b0f      	ldr	r3, [pc, #60]	; (8015ac0 <prvResetNextTaskUnblockTime+0x44>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d101      	bne.n	8015a90 <prvResetNextTaskUnblockTime+0x14>
 8015a8c:	2301      	movs	r3, #1
 8015a8e:	e000      	b.n	8015a92 <prvResetNextTaskUnblockTime+0x16>
 8015a90:	2300      	movs	r3, #0
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d004      	beq.n	8015aa0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015a96:	4b0b      	ldr	r3, [pc, #44]	; (8015ac4 <prvResetNextTaskUnblockTime+0x48>)
 8015a98:	f04f 32ff 	mov.w	r2, #4294967295
 8015a9c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015a9e:	e008      	b.n	8015ab2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8015aa0:	4b07      	ldr	r3, [pc, #28]	; (8015ac0 <prvResetNextTaskUnblockTime+0x44>)
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	68db      	ldr	r3, [r3, #12]
 8015aa6:	68db      	ldr	r3, [r3, #12]
 8015aa8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	685b      	ldr	r3, [r3, #4]
 8015aae:	4a05      	ldr	r2, [pc, #20]	; (8015ac4 <prvResetNextTaskUnblockTime+0x48>)
 8015ab0:	6013      	str	r3, [r2, #0]
}
 8015ab2:	bf00      	nop
 8015ab4:	370c      	adds	r7, #12
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015abc:	4770      	bx	lr
 8015abe:	bf00      	nop
 8015ac0:	20003278 	.word	0x20003278
 8015ac4:	200032e0 	.word	0x200032e0

08015ac8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015ac8:	b480      	push	{r7}
 8015aca:	b083      	sub	sp, #12
 8015acc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015ace:	4b0b      	ldr	r3, [pc, #44]	; (8015afc <xTaskGetSchedulerState+0x34>)
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d102      	bne.n	8015adc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	607b      	str	r3, [r7, #4]
 8015ada:	e008      	b.n	8015aee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015adc:	4b08      	ldr	r3, [pc, #32]	; (8015b00 <xTaskGetSchedulerState+0x38>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d102      	bne.n	8015aea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015ae4:	2302      	movs	r3, #2
 8015ae6:	607b      	str	r3, [r7, #4]
 8015ae8:	e001      	b.n	8015aee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015aea:	2300      	movs	r3, #0
 8015aec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015aee:	687b      	ldr	r3, [r7, #4]
	}
 8015af0:	4618      	mov	r0, r3
 8015af2:	370c      	adds	r7, #12
 8015af4:	46bd      	mov	sp, r7
 8015af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afa:	4770      	bx	lr
 8015afc:	200032cc 	.word	0x200032cc
 8015b00:	200032e8 	.word	0x200032e8

08015b04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b086      	sub	sp, #24
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015b10:	2300      	movs	r3, #0
 8015b12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d056      	beq.n	8015bc8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015b1a:	4b2e      	ldr	r3, [pc, #184]	; (8015bd4 <xTaskPriorityDisinherit+0xd0>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	693a      	ldr	r2, [r7, #16]
 8015b20:	429a      	cmp	r2, r3
 8015b22:	d00a      	beq.n	8015b3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b28:	f383 8811 	msr	BASEPRI, r3
 8015b2c:	f3bf 8f6f 	isb	sy
 8015b30:	f3bf 8f4f 	dsb	sy
 8015b34:	60fb      	str	r3, [r7, #12]
}
 8015b36:	bf00      	nop
 8015b38:	e7fe      	b.n	8015b38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015b3a:	693b      	ldr	r3, [r7, #16]
 8015b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d10a      	bne.n	8015b58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b46:	f383 8811 	msr	BASEPRI, r3
 8015b4a:	f3bf 8f6f 	isb	sy
 8015b4e:	f3bf 8f4f 	dsb	sy
 8015b52:	60bb      	str	r3, [r7, #8]
}
 8015b54:	bf00      	nop
 8015b56:	e7fe      	b.n	8015b56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015b58:	693b      	ldr	r3, [r7, #16]
 8015b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b5c:	1e5a      	subs	r2, r3, #1
 8015b5e:	693b      	ldr	r3, [r7, #16]
 8015b60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b66:	693b      	ldr	r3, [r7, #16]
 8015b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d02c      	beq.n	8015bc8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015b6e:	693b      	ldr	r3, [r7, #16]
 8015b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d128      	bne.n	8015bc8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b76:	693b      	ldr	r3, [r7, #16]
 8015b78:	3304      	adds	r3, #4
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7fe fb7e 	bl	801427c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015b80:	693b      	ldr	r3, [r7, #16]
 8015b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015b84:	693b      	ldr	r3, [r7, #16]
 8015b86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b88:	693b      	ldr	r3, [r7, #16]
 8015b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015b90:	693b      	ldr	r3, [r7, #16]
 8015b92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b98:	4b0f      	ldr	r3, [pc, #60]	; (8015bd8 <xTaskPriorityDisinherit+0xd4>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	429a      	cmp	r2, r3
 8015b9e:	d903      	bls.n	8015ba8 <xTaskPriorityDisinherit+0xa4>
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ba4:	4a0c      	ldr	r2, [pc, #48]	; (8015bd8 <xTaskPriorityDisinherit+0xd4>)
 8015ba6:	6013      	str	r3, [r2, #0]
 8015ba8:	693b      	ldr	r3, [r7, #16]
 8015baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015bac:	4613      	mov	r3, r2
 8015bae:	009b      	lsls	r3, r3, #2
 8015bb0:	4413      	add	r3, r2
 8015bb2:	009b      	lsls	r3, r3, #2
 8015bb4:	4a09      	ldr	r2, [pc, #36]	; (8015bdc <xTaskPriorityDisinherit+0xd8>)
 8015bb6:	441a      	add	r2, r3
 8015bb8:	693b      	ldr	r3, [r7, #16]
 8015bba:	3304      	adds	r3, #4
 8015bbc:	4619      	mov	r1, r3
 8015bbe:	4610      	mov	r0, r2
 8015bc0:	f7fe faff 	bl	80141c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015bc8:	697b      	ldr	r3, [r7, #20]
	}
 8015bca:	4618      	mov	r0, r3
 8015bcc:	3718      	adds	r7, #24
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}
 8015bd2:	bf00      	nop
 8015bd4:	20002dec 	.word	0x20002dec
 8015bd8:	200032c8 	.word	0x200032c8
 8015bdc:	20002df0 	.word	0x20002df0

08015be0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b084      	sub	sp, #16
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015bea:	4b21      	ldr	r3, [pc, #132]	; (8015c70 <prvAddCurrentTaskToDelayedList+0x90>)
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015bf0:	4b20      	ldr	r3, [pc, #128]	; (8015c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	3304      	adds	r3, #4
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	f7fe fb40 	bl	801427c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c02:	d10a      	bne.n	8015c1a <prvAddCurrentTaskToDelayedList+0x3a>
 8015c04:	683b      	ldr	r3, [r7, #0]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d007      	beq.n	8015c1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015c0a:	4b1a      	ldr	r3, [pc, #104]	; (8015c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	3304      	adds	r3, #4
 8015c10:	4619      	mov	r1, r3
 8015c12:	4819      	ldr	r0, [pc, #100]	; (8015c78 <prvAddCurrentTaskToDelayedList+0x98>)
 8015c14:	f7fe fad5 	bl	80141c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015c18:	e026      	b.n	8015c68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015c1a:	68fa      	ldr	r2, [r7, #12]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	4413      	add	r3, r2
 8015c20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015c22:	4b14      	ldr	r3, [pc, #80]	; (8015c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	68ba      	ldr	r2, [r7, #8]
 8015c28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015c2a:	68ba      	ldr	r2, [r7, #8]
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d209      	bcs.n	8015c46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015c32:	4b12      	ldr	r3, [pc, #72]	; (8015c7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8015c34:	681a      	ldr	r2, [r3, #0]
 8015c36:	4b0f      	ldr	r3, [pc, #60]	; (8015c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	3304      	adds	r3, #4
 8015c3c:	4619      	mov	r1, r3
 8015c3e:	4610      	mov	r0, r2
 8015c40:	f7fe fae3 	bl	801420a <vListInsert>
}
 8015c44:	e010      	b.n	8015c68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015c46:	4b0e      	ldr	r3, [pc, #56]	; (8015c80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015c48:	681a      	ldr	r2, [r3, #0]
 8015c4a:	4b0a      	ldr	r3, [pc, #40]	; (8015c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	3304      	adds	r3, #4
 8015c50:	4619      	mov	r1, r3
 8015c52:	4610      	mov	r0, r2
 8015c54:	f7fe fad9 	bl	801420a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015c58:	4b0a      	ldr	r3, [pc, #40]	; (8015c84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	68ba      	ldr	r2, [r7, #8]
 8015c5e:	429a      	cmp	r2, r3
 8015c60:	d202      	bcs.n	8015c68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015c62:	4a08      	ldr	r2, [pc, #32]	; (8015c84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015c64:	68bb      	ldr	r3, [r7, #8]
 8015c66:	6013      	str	r3, [r2, #0]
}
 8015c68:	bf00      	nop
 8015c6a:	3710      	adds	r7, #16
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}
 8015c70:	200032c4 	.word	0x200032c4
 8015c74:	20002dec 	.word	0x20002dec
 8015c78:	200032ac 	.word	0x200032ac
 8015c7c:	2000327c 	.word	0x2000327c
 8015c80:	20003278 	.word	0x20003278
 8015c84:	200032e0 	.word	0x200032e0

08015c88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b08a      	sub	sp, #40	; 0x28
 8015c8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015c92:	f000 facb 	bl	801622c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015c96:	4b1c      	ldr	r3, [pc, #112]	; (8015d08 <xTimerCreateTimerTask+0x80>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d021      	beq.n	8015ce2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015ca6:	1d3a      	adds	r2, r7, #4
 8015ca8:	f107 0108 	add.w	r1, r7, #8
 8015cac:	f107 030c 	add.w	r3, r7, #12
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f7fe fa3f 	bl	8014134 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015cb6:	6879      	ldr	r1, [r7, #4]
 8015cb8:	68bb      	ldr	r3, [r7, #8]
 8015cba:	68fa      	ldr	r2, [r7, #12]
 8015cbc:	9202      	str	r2, [sp, #8]
 8015cbe:	9301      	str	r3, [sp, #4]
 8015cc0:	2302      	movs	r3, #2
 8015cc2:	9300      	str	r3, [sp, #0]
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	460a      	mov	r2, r1
 8015cc8:	4910      	ldr	r1, [pc, #64]	; (8015d0c <xTimerCreateTimerTask+0x84>)
 8015cca:	4811      	ldr	r0, [pc, #68]	; (8015d10 <xTimerCreateTimerTask+0x88>)
 8015ccc:	f7ff f8de 	bl	8014e8c <xTaskCreateStatic>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	4a10      	ldr	r2, [pc, #64]	; (8015d14 <xTimerCreateTimerTask+0x8c>)
 8015cd4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015cd6:	4b0f      	ldr	r3, [pc, #60]	; (8015d14 <xTimerCreateTimerTask+0x8c>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d001      	beq.n	8015ce2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015cde:	2301      	movs	r3, #1
 8015ce0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d10a      	bne.n	8015cfe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cec:	f383 8811 	msr	BASEPRI, r3
 8015cf0:	f3bf 8f6f 	isb	sy
 8015cf4:	f3bf 8f4f 	dsb	sy
 8015cf8:	613b      	str	r3, [r7, #16]
}
 8015cfa:	bf00      	nop
 8015cfc:	e7fe      	b.n	8015cfc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015cfe:	697b      	ldr	r3, [r7, #20]
}
 8015d00:	4618      	mov	r0, r3
 8015d02:	3718      	adds	r7, #24
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bd80      	pop	{r7, pc}
 8015d08:	2000331c 	.word	0x2000331c
 8015d0c:	08017b9c 	.word	0x08017b9c
 8015d10:	08015e35 	.word	0x08015e35
 8015d14:	20003320 	.word	0x20003320

08015d18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b08a      	sub	sp, #40	; 0x28
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	60f8      	str	r0, [r7, #12]
 8015d20:	60b9      	str	r1, [r7, #8]
 8015d22:	607a      	str	r2, [r7, #4]
 8015d24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015d26:	2300      	movs	r3, #0
 8015d28:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d10a      	bne.n	8015d46 <xTimerGenericCommand+0x2e>
	__asm volatile
 8015d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d34:	f383 8811 	msr	BASEPRI, r3
 8015d38:	f3bf 8f6f 	isb	sy
 8015d3c:	f3bf 8f4f 	dsb	sy
 8015d40:	623b      	str	r3, [r7, #32]
}
 8015d42:	bf00      	nop
 8015d44:	e7fe      	b.n	8015d44 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015d46:	4b1a      	ldr	r3, [pc, #104]	; (8015db0 <xTimerGenericCommand+0x98>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d02a      	beq.n	8015da4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015d4e:	68bb      	ldr	r3, [r7, #8]
 8015d50:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015d5a:	68bb      	ldr	r3, [r7, #8]
 8015d5c:	2b05      	cmp	r3, #5
 8015d5e:	dc18      	bgt.n	8015d92 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015d60:	f7ff feb2 	bl	8015ac8 <xTaskGetSchedulerState>
 8015d64:	4603      	mov	r3, r0
 8015d66:	2b02      	cmp	r3, #2
 8015d68:	d109      	bne.n	8015d7e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015d6a:	4b11      	ldr	r3, [pc, #68]	; (8015db0 <xTimerGenericCommand+0x98>)
 8015d6c:	6818      	ldr	r0, [r3, #0]
 8015d6e:	f107 0110 	add.w	r1, r7, #16
 8015d72:	2300      	movs	r3, #0
 8015d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d76:	f7fe fbeb 	bl	8014550 <xQueueGenericSend>
 8015d7a:	6278      	str	r0, [r7, #36]	; 0x24
 8015d7c:	e012      	b.n	8015da4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015d7e:	4b0c      	ldr	r3, [pc, #48]	; (8015db0 <xTimerGenericCommand+0x98>)
 8015d80:	6818      	ldr	r0, [r3, #0]
 8015d82:	f107 0110 	add.w	r1, r7, #16
 8015d86:	2300      	movs	r3, #0
 8015d88:	2200      	movs	r2, #0
 8015d8a:	f7fe fbe1 	bl	8014550 <xQueueGenericSend>
 8015d8e:	6278      	str	r0, [r7, #36]	; 0x24
 8015d90:	e008      	b.n	8015da4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015d92:	4b07      	ldr	r3, [pc, #28]	; (8015db0 <xTimerGenericCommand+0x98>)
 8015d94:	6818      	ldr	r0, [r3, #0]
 8015d96:	f107 0110 	add.w	r1, r7, #16
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	683a      	ldr	r2, [r7, #0]
 8015d9e:	f7fe fcd5 	bl	801474c <xQueueGenericSendFromISR>
 8015da2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015da6:	4618      	mov	r0, r3
 8015da8:	3728      	adds	r7, #40	; 0x28
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bd80      	pop	{r7, pc}
 8015dae:	bf00      	nop
 8015db0:	2000331c 	.word	0x2000331c

08015db4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b088      	sub	sp, #32
 8015db8:	af02      	add	r7, sp, #8
 8015dba:	6078      	str	r0, [r7, #4]
 8015dbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015dbe:	4b1c      	ldr	r3, [pc, #112]	; (8015e30 <prvProcessExpiredTimer+0x7c>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	68db      	ldr	r3, [r3, #12]
 8015dc4:	68db      	ldr	r3, [r3, #12]
 8015dc6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	3304      	adds	r3, #4
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f7fe fa55 	bl	801427c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	69db      	ldr	r3, [r3, #28]
 8015dd6:	2b01      	cmp	r3, #1
 8015dd8:	d122      	bne.n	8015e20 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015dda:	697b      	ldr	r3, [r7, #20]
 8015ddc:	699a      	ldr	r2, [r3, #24]
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	18d1      	adds	r1, r2, r3
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	683a      	ldr	r2, [r7, #0]
 8015de6:	6978      	ldr	r0, [r7, #20]
 8015de8:	f000 f8c8 	bl	8015f7c <prvInsertTimerInActiveList>
 8015dec:	4603      	mov	r3, r0
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d016      	beq.n	8015e20 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015df2:	2300      	movs	r3, #0
 8015df4:	9300      	str	r3, [sp, #0]
 8015df6:	2300      	movs	r3, #0
 8015df8:	687a      	ldr	r2, [r7, #4]
 8015dfa:	2100      	movs	r1, #0
 8015dfc:	6978      	ldr	r0, [r7, #20]
 8015dfe:	f7ff ff8b 	bl	8015d18 <xTimerGenericCommand>
 8015e02:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015e04:	693b      	ldr	r3, [r7, #16]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d10a      	bne.n	8015e20 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8015e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e0e:	f383 8811 	msr	BASEPRI, r3
 8015e12:	f3bf 8f6f 	isb	sy
 8015e16:	f3bf 8f4f 	dsb	sy
 8015e1a:	60fb      	str	r3, [r7, #12]
}
 8015e1c:	bf00      	nop
 8015e1e:	e7fe      	b.n	8015e1e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e24:	6978      	ldr	r0, [r7, #20]
 8015e26:	4798      	blx	r3
}
 8015e28:	bf00      	nop
 8015e2a:	3718      	adds	r7, #24
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	bd80      	pop	{r7, pc}
 8015e30:	20003314 	.word	0x20003314

08015e34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b084      	sub	sp, #16
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015e3c:	f107 0308 	add.w	r3, r7, #8
 8015e40:	4618      	mov	r0, r3
 8015e42:	f000 f857 	bl	8015ef4 <prvGetNextExpireTime>
 8015e46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015e48:	68bb      	ldr	r3, [r7, #8]
 8015e4a:	4619      	mov	r1, r3
 8015e4c:	68f8      	ldr	r0, [r7, #12]
 8015e4e:	f000 f803 	bl	8015e58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015e52:	f000 f8d5 	bl	8016000 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015e56:	e7f1      	b.n	8015e3c <prvTimerTask+0x8>

08015e58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b084      	sub	sp, #16
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
 8015e60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015e62:	f7ff fa45 	bl	80152f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015e66:	f107 0308 	add.w	r3, r7, #8
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f000 f866 	bl	8015f3c <prvSampleTimeNow>
 8015e70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015e72:	68bb      	ldr	r3, [r7, #8]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d130      	bne.n	8015eda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d10a      	bne.n	8015e94 <prvProcessTimerOrBlockTask+0x3c>
 8015e7e:	687a      	ldr	r2, [r7, #4]
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	429a      	cmp	r2, r3
 8015e84:	d806      	bhi.n	8015e94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015e86:	f7ff fa41 	bl	801530c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015e8a:	68f9      	ldr	r1, [r7, #12]
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f7ff ff91 	bl	8015db4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015e92:	e024      	b.n	8015ede <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d008      	beq.n	8015eac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015e9a:	4b13      	ldr	r3, [pc, #76]	; (8015ee8 <prvProcessTimerOrBlockTask+0x90>)
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	bf0c      	ite	eq
 8015ea4:	2301      	moveq	r3, #1
 8015ea6:	2300      	movne	r3, #0
 8015ea8:	b2db      	uxtb	r3, r3
 8015eaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015eac:	4b0f      	ldr	r3, [pc, #60]	; (8015eec <prvProcessTimerOrBlockTask+0x94>)
 8015eae:	6818      	ldr	r0, [r3, #0]
 8015eb0:	687a      	ldr	r2, [r7, #4]
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	1ad3      	subs	r3, r2, r3
 8015eb6:	683a      	ldr	r2, [r7, #0]
 8015eb8:	4619      	mov	r1, r3
 8015eba:	f7fe ffb3 	bl	8014e24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015ebe:	f7ff fa25 	bl	801530c <xTaskResumeAll>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d10a      	bne.n	8015ede <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015ec8:	4b09      	ldr	r3, [pc, #36]	; (8015ef0 <prvProcessTimerOrBlockTask+0x98>)
 8015eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ece:	601a      	str	r2, [r3, #0]
 8015ed0:	f3bf 8f4f 	dsb	sy
 8015ed4:	f3bf 8f6f 	isb	sy
}
 8015ed8:	e001      	b.n	8015ede <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015eda:	f7ff fa17 	bl	801530c <xTaskResumeAll>
}
 8015ede:	bf00      	nop
 8015ee0:	3710      	adds	r7, #16
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}
 8015ee6:	bf00      	nop
 8015ee8:	20003318 	.word	0x20003318
 8015eec:	2000331c 	.word	0x2000331c
 8015ef0:	e000ed04 	.word	0xe000ed04

08015ef4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015ef4:	b480      	push	{r7}
 8015ef6:	b085      	sub	sp, #20
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015efc:	4b0e      	ldr	r3, [pc, #56]	; (8015f38 <prvGetNextExpireTime+0x44>)
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	bf0c      	ite	eq
 8015f06:	2301      	moveq	r3, #1
 8015f08:	2300      	movne	r3, #0
 8015f0a:	b2db      	uxtb	r3, r3
 8015f0c:	461a      	mov	r2, r3
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d105      	bne.n	8015f26 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015f1a:	4b07      	ldr	r3, [pc, #28]	; (8015f38 <prvGetNextExpireTime+0x44>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	68db      	ldr	r3, [r3, #12]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	60fb      	str	r3, [r7, #12]
 8015f24:	e001      	b.n	8015f2a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015f26:	2300      	movs	r3, #0
 8015f28:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015f2a:	68fb      	ldr	r3, [r7, #12]
}
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	3714      	adds	r7, #20
 8015f30:	46bd      	mov	sp, r7
 8015f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f36:	4770      	bx	lr
 8015f38:	20003314 	.word	0x20003314

08015f3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b084      	sub	sp, #16
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015f44:	f7ff fa80 	bl	8015448 <xTaskGetTickCount>
 8015f48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015f4a:	4b0b      	ldr	r3, [pc, #44]	; (8015f78 <prvSampleTimeNow+0x3c>)
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	68fa      	ldr	r2, [r7, #12]
 8015f50:	429a      	cmp	r2, r3
 8015f52:	d205      	bcs.n	8015f60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015f54:	f000 f908 	bl	8016168 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2201      	movs	r2, #1
 8015f5c:	601a      	str	r2, [r3, #0]
 8015f5e:	e002      	b.n	8015f66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2200      	movs	r2, #0
 8015f64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015f66:	4a04      	ldr	r2, [pc, #16]	; (8015f78 <prvSampleTimeNow+0x3c>)
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015f6c:	68fb      	ldr	r3, [r7, #12]
}
 8015f6e:	4618      	mov	r0, r3
 8015f70:	3710      	adds	r7, #16
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}
 8015f76:	bf00      	nop
 8015f78:	20003324 	.word	0x20003324

08015f7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b086      	sub	sp, #24
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	60f8      	str	r0, [r7, #12]
 8015f84:	60b9      	str	r1, [r7, #8]
 8015f86:	607a      	str	r2, [r7, #4]
 8015f88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	68ba      	ldr	r2, [r7, #8]
 8015f92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	68fa      	ldr	r2, [r7, #12]
 8015f98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015f9a:	68ba      	ldr	r2, [r7, #8]
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	d812      	bhi.n	8015fc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015fa2:	687a      	ldr	r2, [r7, #4]
 8015fa4:	683b      	ldr	r3, [r7, #0]
 8015fa6:	1ad2      	subs	r2, r2, r3
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	699b      	ldr	r3, [r3, #24]
 8015fac:	429a      	cmp	r2, r3
 8015fae:	d302      	bcc.n	8015fb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015fb0:	2301      	movs	r3, #1
 8015fb2:	617b      	str	r3, [r7, #20]
 8015fb4:	e01b      	b.n	8015fee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015fb6:	4b10      	ldr	r3, [pc, #64]	; (8015ff8 <prvInsertTimerInActiveList+0x7c>)
 8015fb8:	681a      	ldr	r2, [r3, #0]
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	3304      	adds	r3, #4
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	4610      	mov	r0, r2
 8015fc2:	f7fe f922 	bl	801420a <vListInsert>
 8015fc6:	e012      	b.n	8015fee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015fc8:	687a      	ldr	r2, [r7, #4]
 8015fca:	683b      	ldr	r3, [r7, #0]
 8015fcc:	429a      	cmp	r2, r3
 8015fce:	d206      	bcs.n	8015fde <prvInsertTimerInActiveList+0x62>
 8015fd0:	68ba      	ldr	r2, [r7, #8]
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	429a      	cmp	r2, r3
 8015fd6:	d302      	bcc.n	8015fde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015fd8:	2301      	movs	r3, #1
 8015fda:	617b      	str	r3, [r7, #20]
 8015fdc:	e007      	b.n	8015fee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015fde:	4b07      	ldr	r3, [pc, #28]	; (8015ffc <prvInsertTimerInActiveList+0x80>)
 8015fe0:	681a      	ldr	r2, [r3, #0]
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	3304      	adds	r3, #4
 8015fe6:	4619      	mov	r1, r3
 8015fe8:	4610      	mov	r0, r2
 8015fea:	f7fe f90e 	bl	801420a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015fee:	697b      	ldr	r3, [r7, #20]
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3718      	adds	r7, #24
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}
 8015ff8:	20003318 	.word	0x20003318
 8015ffc:	20003314 	.word	0x20003314

08016000 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b08e      	sub	sp, #56	; 0x38
 8016004:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016006:	e09d      	b.n	8016144 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2b00      	cmp	r3, #0
 801600c:	da18      	bge.n	8016040 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801600e:	1d3b      	adds	r3, r7, #4
 8016010:	3304      	adds	r3, #4
 8016012:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016016:	2b00      	cmp	r3, #0
 8016018:	d10a      	bne.n	8016030 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801601e:	f383 8811 	msr	BASEPRI, r3
 8016022:	f3bf 8f6f 	isb	sy
 8016026:	f3bf 8f4f 	dsb	sy
 801602a:	61fb      	str	r3, [r7, #28]
}
 801602c:	bf00      	nop
 801602e:	e7fe      	b.n	801602e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016036:	6850      	ldr	r0, [r2, #4]
 8016038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801603a:	6892      	ldr	r2, [r2, #8]
 801603c:	4611      	mov	r1, r2
 801603e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	2b00      	cmp	r3, #0
 8016044:	db7d      	blt.n	8016142 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801604c:	695b      	ldr	r3, [r3, #20]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d004      	beq.n	801605c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016054:	3304      	adds	r3, #4
 8016056:	4618      	mov	r0, r3
 8016058:	f7fe f910 	bl	801427c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801605c:	463b      	mov	r3, r7
 801605e:	4618      	mov	r0, r3
 8016060:	f7ff ff6c 	bl	8015f3c <prvSampleTimeNow>
 8016064:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	2b09      	cmp	r3, #9
 801606a:	d86b      	bhi.n	8016144 <prvProcessReceivedCommands+0x144>
 801606c:	a201      	add	r2, pc, #4	; (adr r2, 8016074 <prvProcessReceivedCommands+0x74>)
 801606e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016072:	bf00      	nop
 8016074:	0801609d 	.word	0x0801609d
 8016078:	0801609d 	.word	0x0801609d
 801607c:	0801609d 	.word	0x0801609d
 8016080:	08016145 	.word	0x08016145
 8016084:	080160f9 	.word	0x080160f9
 8016088:	08016131 	.word	0x08016131
 801608c:	0801609d 	.word	0x0801609d
 8016090:	0801609d 	.word	0x0801609d
 8016094:	08016145 	.word	0x08016145
 8016098:	080160f9 	.word	0x080160f9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801609c:	68ba      	ldr	r2, [r7, #8]
 801609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a0:	699b      	ldr	r3, [r3, #24]
 80160a2:	18d1      	adds	r1, r2, r3
 80160a4:	68bb      	ldr	r3, [r7, #8]
 80160a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160aa:	f7ff ff67 	bl	8015f7c <prvInsertTimerInActiveList>
 80160ae:	4603      	mov	r3, r0
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d047      	beq.n	8016144 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80160b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160ba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80160bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160be:	69db      	ldr	r3, [r3, #28]
 80160c0:	2b01      	cmp	r3, #1
 80160c2:	d13f      	bne.n	8016144 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80160c4:	68ba      	ldr	r2, [r7, #8]
 80160c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160c8:	699b      	ldr	r3, [r3, #24]
 80160ca:	441a      	add	r2, r3
 80160cc:	2300      	movs	r3, #0
 80160ce:	9300      	str	r3, [sp, #0]
 80160d0:	2300      	movs	r3, #0
 80160d2:	2100      	movs	r1, #0
 80160d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160d6:	f7ff fe1f 	bl	8015d18 <xTimerGenericCommand>
 80160da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80160dc:	6a3b      	ldr	r3, [r7, #32]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d130      	bne.n	8016144 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80160e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160e6:	f383 8811 	msr	BASEPRI, r3
 80160ea:	f3bf 8f6f 	isb	sy
 80160ee:	f3bf 8f4f 	dsb	sy
 80160f2:	61bb      	str	r3, [r7, #24]
}
 80160f4:	bf00      	nop
 80160f6:	e7fe      	b.n	80160f6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80160f8:	68ba      	ldr	r2, [r7, #8]
 80160fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80160fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016100:	699b      	ldr	r3, [r3, #24]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d10a      	bne.n	801611c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8016106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801610a:	f383 8811 	msr	BASEPRI, r3
 801610e:	f3bf 8f6f 	isb	sy
 8016112:	f3bf 8f4f 	dsb	sy
 8016116:	617b      	str	r3, [r7, #20]
}
 8016118:	bf00      	nop
 801611a:	e7fe      	b.n	801611a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801611e:	699a      	ldr	r2, [r3, #24]
 8016120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016122:	18d1      	adds	r1, r2, r3
 8016124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801612a:	f7ff ff27 	bl	8015f7c <prvInsertTimerInActiveList>
					break;
 801612e:	e009      	b.n	8016144 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016132:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016136:	2b00      	cmp	r3, #0
 8016138:	d104      	bne.n	8016144 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 801613a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801613c:	f000 fb4a 	bl	80167d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8016140:	e000      	b.n	8016144 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8016142:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016144:	4b07      	ldr	r3, [pc, #28]	; (8016164 <prvProcessReceivedCommands+0x164>)
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	1d39      	adds	r1, r7, #4
 801614a:	2200      	movs	r2, #0
 801614c:	4618      	mov	r0, r3
 801614e:	f7fe fb95 	bl	801487c <xQueueReceive>
 8016152:	4603      	mov	r3, r0
 8016154:	2b00      	cmp	r3, #0
 8016156:	f47f af57 	bne.w	8016008 <prvProcessReceivedCommands+0x8>
	}
}
 801615a:	bf00      	nop
 801615c:	bf00      	nop
 801615e:	3730      	adds	r7, #48	; 0x30
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}
 8016164:	2000331c 	.word	0x2000331c

08016168 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b088      	sub	sp, #32
 801616c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801616e:	e045      	b.n	80161fc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016170:	4b2c      	ldr	r3, [pc, #176]	; (8016224 <prvSwitchTimerLists+0xbc>)
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	68db      	ldr	r3, [r3, #12]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801617a:	4b2a      	ldr	r3, [pc, #168]	; (8016224 <prvSwitchTimerLists+0xbc>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	68db      	ldr	r3, [r3, #12]
 8016180:	68db      	ldr	r3, [r3, #12]
 8016182:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	3304      	adds	r3, #4
 8016188:	4618      	mov	r0, r3
 801618a:	f7fe f877 	bl	801427c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016192:	68f8      	ldr	r0, [r7, #12]
 8016194:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	69db      	ldr	r3, [r3, #28]
 801619a:	2b01      	cmp	r3, #1
 801619c:	d12e      	bne.n	80161fc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	699b      	ldr	r3, [r3, #24]
 80161a2:	693a      	ldr	r2, [r7, #16]
 80161a4:	4413      	add	r3, r2
 80161a6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80161a8:	68ba      	ldr	r2, [r7, #8]
 80161aa:	693b      	ldr	r3, [r7, #16]
 80161ac:	429a      	cmp	r2, r3
 80161ae:	d90e      	bls.n	80161ce <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	68ba      	ldr	r2, [r7, #8]
 80161b4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	68fa      	ldr	r2, [r7, #12]
 80161ba:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80161bc:	4b19      	ldr	r3, [pc, #100]	; (8016224 <prvSwitchTimerLists+0xbc>)
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	3304      	adds	r3, #4
 80161c4:	4619      	mov	r1, r3
 80161c6:	4610      	mov	r0, r2
 80161c8:	f7fe f81f 	bl	801420a <vListInsert>
 80161cc:	e016      	b.n	80161fc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80161ce:	2300      	movs	r3, #0
 80161d0:	9300      	str	r3, [sp, #0]
 80161d2:	2300      	movs	r3, #0
 80161d4:	693a      	ldr	r2, [r7, #16]
 80161d6:	2100      	movs	r1, #0
 80161d8:	68f8      	ldr	r0, [r7, #12]
 80161da:	f7ff fd9d 	bl	8015d18 <xTimerGenericCommand>
 80161de:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d10a      	bne.n	80161fc <prvSwitchTimerLists+0x94>
	__asm volatile
 80161e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ea:	f383 8811 	msr	BASEPRI, r3
 80161ee:	f3bf 8f6f 	isb	sy
 80161f2:	f3bf 8f4f 	dsb	sy
 80161f6:	603b      	str	r3, [r7, #0]
}
 80161f8:	bf00      	nop
 80161fa:	e7fe      	b.n	80161fa <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80161fc:	4b09      	ldr	r3, [pc, #36]	; (8016224 <prvSwitchTimerLists+0xbc>)
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d1b4      	bne.n	8016170 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016206:	4b07      	ldr	r3, [pc, #28]	; (8016224 <prvSwitchTimerLists+0xbc>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801620c:	4b06      	ldr	r3, [pc, #24]	; (8016228 <prvSwitchTimerLists+0xc0>)
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	4a04      	ldr	r2, [pc, #16]	; (8016224 <prvSwitchTimerLists+0xbc>)
 8016212:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016214:	4a04      	ldr	r2, [pc, #16]	; (8016228 <prvSwitchTimerLists+0xc0>)
 8016216:	697b      	ldr	r3, [r7, #20]
 8016218:	6013      	str	r3, [r2, #0]
}
 801621a:	bf00      	nop
 801621c:	3718      	adds	r7, #24
 801621e:	46bd      	mov	sp, r7
 8016220:	bd80      	pop	{r7, pc}
 8016222:	bf00      	nop
 8016224:	20003314 	.word	0x20003314
 8016228:	20003318 	.word	0x20003318

0801622c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b082      	sub	sp, #8
 8016230:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016232:	f000 f967 	bl	8016504 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016236:	4b15      	ldr	r3, [pc, #84]	; (801628c <prvCheckForValidListAndQueue+0x60>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d120      	bne.n	8016280 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801623e:	4814      	ldr	r0, [pc, #80]	; (8016290 <prvCheckForValidListAndQueue+0x64>)
 8016240:	f7fd ff92 	bl	8014168 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016244:	4813      	ldr	r0, [pc, #76]	; (8016294 <prvCheckForValidListAndQueue+0x68>)
 8016246:	f7fd ff8f 	bl	8014168 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801624a:	4b13      	ldr	r3, [pc, #76]	; (8016298 <prvCheckForValidListAndQueue+0x6c>)
 801624c:	4a10      	ldr	r2, [pc, #64]	; (8016290 <prvCheckForValidListAndQueue+0x64>)
 801624e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016250:	4b12      	ldr	r3, [pc, #72]	; (801629c <prvCheckForValidListAndQueue+0x70>)
 8016252:	4a10      	ldr	r2, [pc, #64]	; (8016294 <prvCheckForValidListAndQueue+0x68>)
 8016254:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016256:	2300      	movs	r3, #0
 8016258:	9300      	str	r3, [sp, #0]
 801625a:	4b11      	ldr	r3, [pc, #68]	; (80162a0 <prvCheckForValidListAndQueue+0x74>)
 801625c:	4a11      	ldr	r2, [pc, #68]	; (80162a4 <prvCheckForValidListAndQueue+0x78>)
 801625e:	2110      	movs	r1, #16
 8016260:	200a      	movs	r0, #10
 8016262:	f7fe f89d 	bl	80143a0 <xQueueGenericCreateStatic>
 8016266:	4603      	mov	r3, r0
 8016268:	4a08      	ldr	r2, [pc, #32]	; (801628c <prvCheckForValidListAndQueue+0x60>)
 801626a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801626c:	4b07      	ldr	r3, [pc, #28]	; (801628c <prvCheckForValidListAndQueue+0x60>)
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d005      	beq.n	8016280 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016274:	4b05      	ldr	r3, [pc, #20]	; (801628c <prvCheckForValidListAndQueue+0x60>)
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	490b      	ldr	r1, [pc, #44]	; (80162a8 <prvCheckForValidListAndQueue+0x7c>)
 801627a:	4618      	mov	r0, r3
 801627c:	f7fe fda8 	bl	8014dd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016280:	f000 f970 	bl	8016564 <vPortExitCritical>
}
 8016284:	bf00      	nop
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}
 801628a:	bf00      	nop
 801628c:	2000331c 	.word	0x2000331c
 8016290:	200032ec 	.word	0x200032ec
 8016294:	20003300 	.word	0x20003300
 8016298:	20003314 	.word	0x20003314
 801629c:	20003318 	.word	0x20003318
 80162a0:	200033c8 	.word	0x200033c8
 80162a4:	20003328 	.word	0x20003328
 80162a8:	08017ba4 	.word	0x08017ba4

080162ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80162ac:	b480      	push	{r7}
 80162ae:	b085      	sub	sp, #20
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	60f8      	str	r0, [r7, #12]
 80162b4:	60b9      	str	r1, [r7, #8]
 80162b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	3b04      	subs	r3, #4
 80162bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80162c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	3b04      	subs	r3, #4
 80162ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80162cc:	68bb      	ldr	r3, [r7, #8]
 80162ce:	f023 0201 	bic.w	r2, r3, #1
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	3b04      	subs	r3, #4
 80162da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80162dc:	4a0c      	ldr	r2, [pc, #48]	; (8016310 <pxPortInitialiseStack+0x64>)
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	3b14      	subs	r3, #20
 80162e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80162e8:	687a      	ldr	r2, [r7, #4]
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	3b04      	subs	r3, #4
 80162f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	f06f 0202 	mvn.w	r2, #2
 80162fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	3b20      	subs	r3, #32
 8016300:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016302:	68fb      	ldr	r3, [r7, #12]
}
 8016304:	4618      	mov	r0, r3
 8016306:	3714      	adds	r7, #20
 8016308:	46bd      	mov	sp, r7
 801630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630e:	4770      	bx	lr
 8016310:	08016315 	.word	0x08016315

08016314 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016314:	b480      	push	{r7}
 8016316:	b085      	sub	sp, #20
 8016318:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801631a:	2300      	movs	r3, #0
 801631c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801631e:	4b12      	ldr	r3, [pc, #72]	; (8016368 <prvTaskExitError+0x54>)
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016326:	d00a      	beq.n	801633e <prvTaskExitError+0x2a>
	__asm volatile
 8016328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801632c:	f383 8811 	msr	BASEPRI, r3
 8016330:	f3bf 8f6f 	isb	sy
 8016334:	f3bf 8f4f 	dsb	sy
 8016338:	60fb      	str	r3, [r7, #12]
}
 801633a:	bf00      	nop
 801633c:	e7fe      	b.n	801633c <prvTaskExitError+0x28>
	__asm volatile
 801633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016342:	f383 8811 	msr	BASEPRI, r3
 8016346:	f3bf 8f6f 	isb	sy
 801634a:	f3bf 8f4f 	dsb	sy
 801634e:	60bb      	str	r3, [r7, #8]
}
 8016350:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016352:	bf00      	nop
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d0fc      	beq.n	8016354 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801635a:	bf00      	nop
 801635c:	bf00      	nop
 801635e:	3714      	adds	r7, #20
 8016360:	46bd      	mov	sp, r7
 8016362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016366:	4770      	bx	lr
 8016368:	2000012c 	.word	0x2000012c
 801636c:	00000000 	.word	0x00000000

08016370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016370:	4b07      	ldr	r3, [pc, #28]	; (8016390 <pxCurrentTCBConst2>)
 8016372:	6819      	ldr	r1, [r3, #0]
 8016374:	6808      	ldr	r0, [r1, #0]
 8016376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801637a:	f380 8809 	msr	PSP, r0
 801637e:	f3bf 8f6f 	isb	sy
 8016382:	f04f 0000 	mov.w	r0, #0
 8016386:	f380 8811 	msr	BASEPRI, r0
 801638a:	4770      	bx	lr
 801638c:	f3af 8000 	nop.w

08016390 <pxCurrentTCBConst2>:
 8016390:	20002dec 	.word	0x20002dec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016394:	bf00      	nop
 8016396:	bf00      	nop

08016398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016398:	4808      	ldr	r0, [pc, #32]	; (80163bc <prvPortStartFirstTask+0x24>)
 801639a:	6800      	ldr	r0, [r0, #0]
 801639c:	6800      	ldr	r0, [r0, #0]
 801639e:	f380 8808 	msr	MSP, r0
 80163a2:	f04f 0000 	mov.w	r0, #0
 80163a6:	f380 8814 	msr	CONTROL, r0
 80163aa:	b662      	cpsie	i
 80163ac:	b661      	cpsie	f
 80163ae:	f3bf 8f4f 	dsb	sy
 80163b2:	f3bf 8f6f 	isb	sy
 80163b6:	df00      	svc	0
 80163b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80163ba:	bf00      	nop
 80163bc:	e000ed08 	.word	0xe000ed08

080163c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b086      	sub	sp, #24
 80163c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80163c6:	4b46      	ldr	r3, [pc, #280]	; (80164e0 <xPortStartScheduler+0x120>)
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	4a46      	ldr	r2, [pc, #280]	; (80164e4 <xPortStartScheduler+0x124>)
 80163cc:	4293      	cmp	r3, r2
 80163ce:	d10a      	bne.n	80163e6 <xPortStartScheduler+0x26>
	__asm volatile
 80163d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163d4:	f383 8811 	msr	BASEPRI, r3
 80163d8:	f3bf 8f6f 	isb	sy
 80163dc:	f3bf 8f4f 	dsb	sy
 80163e0:	613b      	str	r3, [r7, #16]
}
 80163e2:	bf00      	nop
 80163e4:	e7fe      	b.n	80163e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80163e6:	4b3e      	ldr	r3, [pc, #248]	; (80164e0 <xPortStartScheduler+0x120>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	4a3f      	ldr	r2, [pc, #252]	; (80164e8 <xPortStartScheduler+0x128>)
 80163ec:	4293      	cmp	r3, r2
 80163ee:	d10a      	bne.n	8016406 <xPortStartScheduler+0x46>
	__asm volatile
 80163f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163f4:	f383 8811 	msr	BASEPRI, r3
 80163f8:	f3bf 8f6f 	isb	sy
 80163fc:	f3bf 8f4f 	dsb	sy
 8016400:	60fb      	str	r3, [r7, #12]
}
 8016402:	bf00      	nop
 8016404:	e7fe      	b.n	8016404 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016406:	4b39      	ldr	r3, [pc, #228]	; (80164ec <xPortStartScheduler+0x12c>)
 8016408:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801640a:	697b      	ldr	r3, [r7, #20]
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	b2db      	uxtb	r3, r3
 8016410:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016412:	697b      	ldr	r3, [r7, #20]
 8016414:	22ff      	movs	r2, #255	; 0xff
 8016416:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016418:	697b      	ldr	r3, [r7, #20]
 801641a:	781b      	ldrb	r3, [r3, #0]
 801641c:	b2db      	uxtb	r3, r3
 801641e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016420:	78fb      	ldrb	r3, [r7, #3]
 8016422:	b2db      	uxtb	r3, r3
 8016424:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016428:	b2da      	uxtb	r2, r3
 801642a:	4b31      	ldr	r3, [pc, #196]	; (80164f0 <xPortStartScheduler+0x130>)
 801642c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801642e:	4b31      	ldr	r3, [pc, #196]	; (80164f4 <xPortStartScheduler+0x134>)
 8016430:	2207      	movs	r2, #7
 8016432:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016434:	e009      	b.n	801644a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016436:	4b2f      	ldr	r3, [pc, #188]	; (80164f4 <xPortStartScheduler+0x134>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	3b01      	subs	r3, #1
 801643c:	4a2d      	ldr	r2, [pc, #180]	; (80164f4 <xPortStartScheduler+0x134>)
 801643e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016440:	78fb      	ldrb	r3, [r7, #3]
 8016442:	b2db      	uxtb	r3, r3
 8016444:	005b      	lsls	r3, r3, #1
 8016446:	b2db      	uxtb	r3, r3
 8016448:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801644a:	78fb      	ldrb	r3, [r7, #3]
 801644c:	b2db      	uxtb	r3, r3
 801644e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016452:	2b80      	cmp	r3, #128	; 0x80
 8016454:	d0ef      	beq.n	8016436 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016456:	4b27      	ldr	r3, [pc, #156]	; (80164f4 <xPortStartScheduler+0x134>)
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	f1c3 0307 	rsb	r3, r3, #7
 801645e:	2b04      	cmp	r3, #4
 8016460:	d00a      	beq.n	8016478 <xPortStartScheduler+0xb8>
	__asm volatile
 8016462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016466:	f383 8811 	msr	BASEPRI, r3
 801646a:	f3bf 8f6f 	isb	sy
 801646e:	f3bf 8f4f 	dsb	sy
 8016472:	60bb      	str	r3, [r7, #8]
}
 8016474:	bf00      	nop
 8016476:	e7fe      	b.n	8016476 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016478:	4b1e      	ldr	r3, [pc, #120]	; (80164f4 <xPortStartScheduler+0x134>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	021b      	lsls	r3, r3, #8
 801647e:	4a1d      	ldr	r2, [pc, #116]	; (80164f4 <xPortStartScheduler+0x134>)
 8016480:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016482:	4b1c      	ldr	r3, [pc, #112]	; (80164f4 <xPortStartScheduler+0x134>)
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801648a:	4a1a      	ldr	r2, [pc, #104]	; (80164f4 <xPortStartScheduler+0x134>)
 801648c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	b2da      	uxtb	r2, r3
 8016492:	697b      	ldr	r3, [r7, #20]
 8016494:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016496:	4b18      	ldr	r3, [pc, #96]	; (80164f8 <xPortStartScheduler+0x138>)
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	4a17      	ldr	r2, [pc, #92]	; (80164f8 <xPortStartScheduler+0x138>)
 801649c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80164a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80164a2:	4b15      	ldr	r3, [pc, #84]	; (80164f8 <xPortStartScheduler+0x138>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	4a14      	ldr	r2, [pc, #80]	; (80164f8 <xPortStartScheduler+0x138>)
 80164a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80164ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80164ae:	f000 f8dd 	bl	801666c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80164b2:	4b12      	ldr	r3, [pc, #72]	; (80164fc <xPortStartScheduler+0x13c>)
 80164b4:	2200      	movs	r2, #0
 80164b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80164b8:	f000 f8fc 	bl	80166b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80164bc:	4b10      	ldr	r3, [pc, #64]	; (8016500 <xPortStartScheduler+0x140>)
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	4a0f      	ldr	r2, [pc, #60]	; (8016500 <xPortStartScheduler+0x140>)
 80164c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80164c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80164c8:	f7ff ff66 	bl	8016398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80164cc:	f7ff f88a 	bl	80155e4 <vTaskSwitchContext>
	prvTaskExitError();
 80164d0:	f7ff ff20 	bl	8016314 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80164d4:	2300      	movs	r3, #0
}
 80164d6:	4618      	mov	r0, r3
 80164d8:	3718      	adds	r7, #24
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}
 80164de:	bf00      	nop
 80164e0:	e000ed00 	.word	0xe000ed00
 80164e4:	410fc271 	.word	0x410fc271
 80164e8:	410fc270 	.word	0x410fc270
 80164ec:	e000e400 	.word	0xe000e400
 80164f0:	20003418 	.word	0x20003418
 80164f4:	2000341c 	.word	0x2000341c
 80164f8:	e000ed20 	.word	0xe000ed20
 80164fc:	2000012c 	.word	0x2000012c
 8016500:	e000ef34 	.word	0xe000ef34

08016504 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016504:	b480      	push	{r7}
 8016506:	b083      	sub	sp, #12
 8016508:	af00      	add	r7, sp, #0
	__asm volatile
 801650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801650e:	f383 8811 	msr	BASEPRI, r3
 8016512:	f3bf 8f6f 	isb	sy
 8016516:	f3bf 8f4f 	dsb	sy
 801651a:	607b      	str	r3, [r7, #4]
}
 801651c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801651e:	4b0f      	ldr	r3, [pc, #60]	; (801655c <vPortEnterCritical+0x58>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	3301      	adds	r3, #1
 8016524:	4a0d      	ldr	r2, [pc, #52]	; (801655c <vPortEnterCritical+0x58>)
 8016526:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016528:	4b0c      	ldr	r3, [pc, #48]	; (801655c <vPortEnterCritical+0x58>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	2b01      	cmp	r3, #1
 801652e:	d10f      	bne.n	8016550 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016530:	4b0b      	ldr	r3, [pc, #44]	; (8016560 <vPortEnterCritical+0x5c>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	b2db      	uxtb	r3, r3
 8016536:	2b00      	cmp	r3, #0
 8016538:	d00a      	beq.n	8016550 <vPortEnterCritical+0x4c>
	__asm volatile
 801653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801653e:	f383 8811 	msr	BASEPRI, r3
 8016542:	f3bf 8f6f 	isb	sy
 8016546:	f3bf 8f4f 	dsb	sy
 801654a:	603b      	str	r3, [r7, #0]
}
 801654c:	bf00      	nop
 801654e:	e7fe      	b.n	801654e <vPortEnterCritical+0x4a>
	}
}
 8016550:	bf00      	nop
 8016552:	370c      	adds	r7, #12
 8016554:	46bd      	mov	sp, r7
 8016556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655a:	4770      	bx	lr
 801655c:	2000012c 	.word	0x2000012c
 8016560:	e000ed04 	.word	0xe000ed04

08016564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016564:	b480      	push	{r7}
 8016566:	b083      	sub	sp, #12
 8016568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801656a:	4b12      	ldr	r3, [pc, #72]	; (80165b4 <vPortExitCritical+0x50>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d10a      	bne.n	8016588 <vPortExitCritical+0x24>
	__asm volatile
 8016572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016576:	f383 8811 	msr	BASEPRI, r3
 801657a:	f3bf 8f6f 	isb	sy
 801657e:	f3bf 8f4f 	dsb	sy
 8016582:	607b      	str	r3, [r7, #4]
}
 8016584:	bf00      	nop
 8016586:	e7fe      	b.n	8016586 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016588:	4b0a      	ldr	r3, [pc, #40]	; (80165b4 <vPortExitCritical+0x50>)
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	3b01      	subs	r3, #1
 801658e:	4a09      	ldr	r2, [pc, #36]	; (80165b4 <vPortExitCritical+0x50>)
 8016590:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016592:	4b08      	ldr	r3, [pc, #32]	; (80165b4 <vPortExitCritical+0x50>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d105      	bne.n	80165a6 <vPortExitCritical+0x42>
 801659a:	2300      	movs	r3, #0
 801659c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801659e:	683b      	ldr	r3, [r7, #0]
 80165a0:	f383 8811 	msr	BASEPRI, r3
}
 80165a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80165a6:	bf00      	nop
 80165a8:	370c      	adds	r7, #12
 80165aa:	46bd      	mov	sp, r7
 80165ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b0:	4770      	bx	lr
 80165b2:	bf00      	nop
 80165b4:	2000012c 	.word	0x2000012c
	...

080165c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80165c0:	f3ef 8009 	mrs	r0, PSP
 80165c4:	f3bf 8f6f 	isb	sy
 80165c8:	4b15      	ldr	r3, [pc, #84]	; (8016620 <pxCurrentTCBConst>)
 80165ca:	681a      	ldr	r2, [r3, #0]
 80165cc:	f01e 0f10 	tst.w	lr, #16
 80165d0:	bf08      	it	eq
 80165d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80165d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165da:	6010      	str	r0, [r2, #0]
 80165dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80165e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80165e4:	f380 8811 	msr	BASEPRI, r0
 80165e8:	f3bf 8f4f 	dsb	sy
 80165ec:	f3bf 8f6f 	isb	sy
 80165f0:	f7fe fff8 	bl	80155e4 <vTaskSwitchContext>
 80165f4:	f04f 0000 	mov.w	r0, #0
 80165f8:	f380 8811 	msr	BASEPRI, r0
 80165fc:	bc09      	pop	{r0, r3}
 80165fe:	6819      	ldr	r1, [r3, #0]
 8016600:	6808      	ldr	r0, [r1, #0]
 8016602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016606:	f01e 0f10 	tst.w	lr, #16
 801660a:	bf08      	it	eq
 801660c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016610:	f380 8809 	msr	PSP, r0
 8016614:	f3bf 8f6f 	isb	sy
 8016618:	4770      	bx	lr
 801661a:	bf00      	nop
 801661c:	f3af 8000 	nop.w

08016620 <pxCurrentTCBConst>:
 8016620:	20002dec 	.word	0x20002dec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016624:	bf00      	nop
 8016626:	bf00      	nop

08016628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b082      	sub	sp, #8
 801662c:	af00      	add	r7, sp, #0
	__asm volatile
 801662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016632:	f383 8811 	msr	BASEPRI, r3
 8016636:	f3bf 8f6f 	isb	sy
 801663a:	f3bf 8f4f 	dsb	sy
 801663e:	607b      	str	r3, [r7, #4]
}
 8016640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016642:	f7fe ff11 	bl	8015468 <xTaskIncrementTick>
 8016646:	4603      	mov	r3, r0
 8016648:	2b00      	cmp	r3, #0
 801664a:	d003      	beq.n	8016654 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801664c:	4b06      	ldr	r3, [pc, #24]	; (8016668 <SysTick_Handler+0x40>)
 801664e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016652:	601a      	str	r2, [r3, #0]
 8016654:	2300      	movs	r3, #0
 8016656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016658:	683b      	ldr	r3, [r7, #0]
 801665a:	f383 8811 	msr	BASEPRI, r3
}
 801665e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016660:	bf00      	nop
 8016662:	3708      	adds	r7, #8
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}
 8016668:	e000ed04 	.word	0xe000ed04

0801666c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801666c:	b480      	push	{r7}
 801666e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016670:	4b0b      	ldr	r3, [pc, #44]	; (80166a0 <vPortSetupTimerInterrupt+0x34>)
 8016672:	2200      	movs	r2, #0
 8016674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016676:	4b0b      	ldr	r3, [pc, #44]	; (80166a4 <vPortSetupTimerInterrupt+0x38>)
 8016678:	2200      	movs	r2, #0
 801667a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801667c:	4b0a      	ldr	r3, [pc, #40]	; (80166a8 <vPortSetupTimerInterrupt+0x3c>)
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	4a0a      	ldr	r2, [pc, #40]	; (80166ac <vPortSetupTimerInterrupt+0x40>)
 8016682:	fba2 2303 	umull	r2, r3, r2, r3
 8016686:	099b      	lsrs	r3, r3, #6
 8016688:	4a09      	ldr	r2, [pc, #36]	; (80166b0 <vPortSetupTimerInterrupt+0x44>)
 801668a:	3b01      	subs	r3, #1
 801668c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801668e:	4b04      	ldr	r3, [pc, #16]	; (80166a0 <vPortSetupTimerInterrupt+0x34>)
 8016690:	2207      	movs	r2, #7
 8016692:	601a      	str	r2, [r3, #0]
}
 8016694:	bf00      	nop
 8016696:	46bd      	mov	sp, r7
 8016698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669c:	4770      	bx	lr
 801669e:	bf00      	nop
 80166a0:	e000e010 	.word	0xe000e010
 80166a4:	e000e018 	.word	0xe000e018
 80166a8:	20000010 	.word	0x20000010
 80166ac:	10624dd3 	.word	0x10624dd3
 80166b0:	e000e014 	.word	0xe000e014

080166b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80166b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80166c4 <vPortEnableVFP+0x10>
 80166b8:	6801      	ldr	r1, [r0, #0]
 80166ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80166be:	6001      	str	r1, [r0, #0]
 80166c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80166c2:	bf00      	nop
 80166c4:	e000ed88 	.word	0xe000ed88

080166c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80166c8:	b480      	push	{r7}
 80166ca:	b085      	sub	sp, #20
 80166cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80166ce:	f3ef 8305 	mrs	r3, IPSR
 80166d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	2b0f      	cmp	r3, #15
 80166d8:	d914      	bls.n	8016704 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80166da:	4a17      	ldr	r2, [pc, #92]	; (8016738 <vPortValidateInterruptPriority+0x70>)
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	4413      	add	r3, r2
 80166e0:	781b      	ldrb	r3, [r3, #0]
 80166e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80166e4:	4b15      	ldr	r3, [pc, #84]	; (801673c <vPortValidateInterruptPriority+0x74>)
 80166e6:	781b      	ldrb	r3, [r3, #0]
 80166e8:	7afa      	ldrb	r2, [r7, #11]
 80166ea:	429a      	cmp	r2, r3
 80166ec:	d20a      	bcs.n	8016704 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80166ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166f2:	f383 8811 	msr	BASEPRI, r3
 80166f6:	f3bf 8f6f 	isb	sy
 80166fa:	f3bf 8f4f 	dsb	sy
 80166fe:	607b      	str	r3, [r7, #4]
}
 8016700:	bf00      	nop
 8016702:	e7fe      	b.n	8016702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016704:	4b0e      	ldr	r3, [pc, #56]	; (8016740 <vPortValidateInterruptPriority+0x78>)
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801670c:	4b0d      	ldr	r3, [pc, #52]	; (8016744 <vPortValidateInterruptPriority+0x7c>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	429a      	cmp	r2, r3
 8016712:	d90a      	bls.n	801672a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016718:	f383 8811 	msr	BASEPRI, r3
 801671c:	f3bf 8f6f 	isb	sy
 8016720:	f3bf 8f4f 	dsb	sy
 8016724:	603b      	str	r3, [r7, #0]
}
 8016726:	bf00      	nop
 8016728:	e7fe      	b.n	8016728 <vPortValidateInterruptPriority+0x60>
	}
 801672a:	bf00      	nop
 801672c:	3714      	adds	r7, #20
 801672e:	46bd      	mov	sp, r7
 8016730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016734:	4770      	bx	lr
 8016736:	bf00      	nop
 8016738:	e000e3f0 	.word	0xe000e3f0
 801673c:	20003418 	.word	0x20003418
 8016740:	e000ed0c 	.word	0xe000ed0c
 8016744:	2000341c 	.word	0x2000341c

08016748 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016748:	b580      	push	{r7, lr}
 801674a:	b084      	sub	sp, #16
 801674c:	af00      	add	r7, sp, #0
 801674e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8016750:	2300      	movs	r3, #0
 8016752:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f003 0307 	and.w	r3, r3, #7
 801675a:	2b00      	cmp	r3, #0
 801675c:	d004      	beq.n	8016768 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	f023 0307 	bic.w	r3, r3, #7
 8016764:	3308      	adds	r3, #8
 8016766:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8016768:	f7fe fdc2 	bl	80152f0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 801676c:	4b16      	ldr	r3, [pc, #88]	; (80167c8 <pvPortMalloc+0x80>)
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d105      	bne.n	8016780 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8016774:	4b15      	ldr	r3, [pc, #84]	; (80167cc <pvPortMalloc+0x84>)
 8016776:	f023 0307 	bic.w	r3, r3, #7
 801677a:	461a      	mov	r2, r3
 801677c:	4b12      	ldr	r3, [pc, #72]	; (80167c8 <pvPortMalloc+0x80>)
 801677e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8016780:	4b13      	ldr	r3, [pc, #76]	; (80167d0 <pvPortMalloc+0x88>)
 8016782:	681a      	ldr	r2, [r3, #0]
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	4413      	add	r3, r2
 8016788:	f241 72f7 	movw	r2, #6135	; 0x17f7
 801678c:	4293      	cmp	r3, r2
 801678e:	d813      	bhi.n	80167b8 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8016790:	4b0f      	ldr	r3, [pc, #60]	; (80167d0 <pvPortMalloc+0x88>)
 8016792:	681a      	ldr	r2, [r3, #0]
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	441a      	add	r2, r3
 8016798:	4b0d      	ldr	r3, [pc, #52]	; (80167d0 <pvPortMalloc+0x88>)
 801679a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 801679c:	429a      	cmp	r2, r3
 801679e:	d90b      	bls.n	80167b8 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80167a0:	4b09      	ldr	r3, [pc, #36]	; (80167c8 <pvPortMalloc+0x80>)
 80167a2:	681a      	ldr	r2, [r3, #0]
 80167a4:	4b0a      	ldr	r3, [pc, #40]	; (80167d0 <pvPortMalloc+0x88>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	4413      	add	r3, r2
 80167aa:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80167ac:	4b08      	ldr	r3, [pc, #32]	; (80167d0 <pvPortMalloc+0x88>)
 80167ae:	681a      	ldr	r2, [r3, #0]
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	4413      	add	r3, r2
 80167b4:	4a06      	ldr	r2, [pc, #24]	; (80167d0 <pvPortMalloc+0x88>)
 80167b6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80167b8:	f7fe fda8 	bl	801530c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80167bc:	68fb      	ldr	r3, [r7, #12]
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3710      	adds	r7, #16
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
 80167c6:	bf00      	nop
 80167c8:	20004c24 	.word	0x20004c24
 80167cc:	20003428 	.word	0x20003428
 80167d0:	20004c20 	.word	0x20004c20

080167d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80167d4:	b480      	push	{r7}
 80167d6:	b085      	sub	sp, #20
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d00a      	beq.n	80167f8 <vPortFree+0x24>
	__asm volatile
 80167e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167e6:	f383 8811 	msr	BASEPRI, r3
 80167ea:	f3bf 8f6f 	isb	sy
 80167ee:	f3bf 8f4f 	dsb	sy
 80167f2:	60fb      	str	r3, [r7, #12]
}
 80167f4:	bf00      	nop
 80167f6:	e7fe      	b.n	80167f6 <vPortFree+0x22>
}
 80167f8:	bf00      	nop
 80167fa:	3714      	adds	r7, #20
 80167fc:	46bd      	mov	sp, r7
 80167fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016802:	4770      	bx	lr

08016804 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016804:	b480      	push	{r7}
 8016806:	b083      	sub	sp, #12
 8016808:	af00      	add	r7, sp, #0
 801680a:	4603      	mov	r3, r0
 801680c:	6039      	str	r1, [r7, #0]
 801680e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016810:	683b      	ldr	r3, [r7, #0]
 8016812:	2212      	movs	r2, #18
 8016814:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016816:	4b03      	ldr	r3, [pc, #12]	; (8016824 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016818:	4618      	mov	r0, r3
 801681a:	370c      	adds	r7, #12
 801681c:	46bd      	mov	sp, r7
 801681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016822:	4770      	bx	lr
 8016824:	2000014c 	.word	0x2000014c

08016828 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016828:	b480      	push	{r7}
 801682a:	b083      	sub	sp, #12
 801682c:	af00      	add	r7, sp, #0
 801682e:	4603      	mov	r3, r0
 8016830:	6039      	str	r1, [r7, #0]
 8016832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	2204      	movs	r2, #4
 8016838:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801683a:	4b03      	ldr	r3, [pc, #12]	; (8016848 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801683c:	4618      	mov	r0, r3
 801683e:	370c      	adds	r7, #12
 8016840:	46bd      	mov	sp, r7
 8016842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016846:	4770      	bx	lr
 8016848:	20000160 	.word	0x20000160

0801684c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801684c:	b580      	push	{r7, lr}
 801684e:	b082      	sub	sp, #8
 8016850:	af00      	add	r7, sp, #0
 8016852:	4603      	mov	r3, r0
 8016854:	6039      	str	r1, [r7, #0]
 8016856:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016858:	79fb      	ldrb	r3, [r7, #7]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d105      	bne.n	801686a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801685e:	683a      	ldr	r2, [r7, #0]
 8016860:	4907      	ldr	r1, [pc, #28]	; (8016880 <USBD_FS_ProductStrDescriptor+0x34>)
 8016862:	4808      	ldr	r0, [pc, #32]	; (8016884 <USBD_FS_ProductStrDescriptor+0x38>)
 8016864:	f7fd f88f 	bl	8013986 <USBD_GetString>
 8016868:	e004      	b.n	8016874 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801686a:	683a      	ldr	r2, [r7, #0]
 801686c:	4904      	ldr	r1, [pc, #16]	; (8016880 <USBD_FS_ProductStrDescriptor+0x34>)
 801686e:	4805      	ldr	r0, [pc, #20]	; (8016884 <USBD_FS_ProductStrDescriptor+0x38>)
 8016870:	f7fd f889 	bl	8013986 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016874:	4b02      	ldr	r3, [pc, #8]	; (8016880 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016876:	4618      	mov	r0, r3
 8016878:	3708      	adds	r7, #8
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}
 801687e:	bf00      	nop
 8016880:	20004c28 	.word	0x20004c28
 8016884:	08017bac 	.word	0x08017bac

08016888 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b082      	sub	sp, #8
 801688c:	af00      	add	r7, sp, #0
 801688e:	4603      	mov	r3, r0
 8016890:	6039      	str	r1, [r7, #0]
 8016892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016894:	683a      	ldr	r2, [r7, #0]
 8016896:	4904      	ldr	r1, [pc, #16]	; (80168a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016898:	4804      	ldr	r0, [pc, #16]	; (80168ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801689a:	f7fd f874 	bl	8013986 <USBD_GetString>
  return USBD_StrDesc;
 801689e:	4b02      	ldr	r3, [pc, #8]	; (80168a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80168a0:	4618      	mov	r0, r3
 80168a2:	3708      	adds	r7, #8
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	20004c28 	.word	0x20004c28
 80168ac:	08017bc4 	.word	0x08017bc4

080168b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	4603      	mov	r3, r0
 80168b8:	6039      	str	r1, [r7, #0]
 80168ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80168bc:	683b      	ldr	r3, [r7, #0]
 80168be:	221a      	movs	r2, #26
 80168c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80168c2:	f000 f843 	bl	801694c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80168c6:	4b02      	ldr	r3, [pc, #8]	; (80168d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80168c8:	4618      	mov	r0, r3
 80168ca:	3708      	adds	r7, #8
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}
 80168d0:	20000164 	.word	0x20000164

080168d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	4603      	mov	r3, r0
 80168dc:	6039      	str	r1, [r7, #0]
 80168de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80168e0:	79fb      	ldrb	r3, [r7, #7]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d105      	bne.n	80168f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80168e6:	683a      	ldr	r2, [r7, #0]
 80168e8:	4907      	ldr	r1, [pc, #28]	; (8016908 <USBD_FS_ConfigStrDescriptor+0x34>)
 80168ea:	4808      	ldr	r0, [pc, #32]	; (801690c <USBD_FS_ConfigStrDescriptor+0x38>)
 80168ec:	f7fd f84b 	bl	8013986 <USBD_GetString>
 80168f0:	e004      	b.n	80168fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80168f2:	683a      	ldr	r2, [r7, #0]
 80168f4:	4904      	ldr	r1, [pc, #16]	; (8016908 <USBD_FS_ConfigStrDescriptor+0x34>)
 80168f6:	4805      	ldr	r0, [pc, #20]	; (801690c <USBD_FS_ConfigStrDescriptor+0x38>)
 80168f8:	f7fd f845 	bl	8013986 <USBD_GetString>
  }
  return USBD_StrDesc;
 80168fc:	4b02      	ldr	r3, [pc, #8]	; (8016908 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80168fe:	4618      	mov	r0, r3
 8016900:	3708      	adds	r7, #8
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}
 8016906:	bf00      	nop
 8016908:	20004c28 	.word	0x20004c28
 801690c:	08017bd8 	.word	0x08017bd8

08016910 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	4603      	mov	r3, r0
 8016918:	6039      	str	r1, [r7, #0]
 801691a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801691c:	79fb      	ldrb	r3, [r7, #7]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d105      	bne.n	801692e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016922:	683a      	ldr	r2, [r7, #0]
 8016924:	4907      	ldr	r1, [pc, #28]	; (8016944 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016926:	4808      	ldr	r0, [pc, #32]	; (8016948 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016928:	f7fd f82d 	bl	8013986 <USBD_GetString>
 801692c:	e004      	b.n	8016938 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801692e:	683a      	ldr	r2, [r7, #0]
 8016930:	4904      	ldr	r1, [pc, #16]	; (8016944 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016932:	4805      	ldr	r0, [pc, #20]	; (8016948 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016934:	f7fd f827 	bl	8013986 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016938:	4b02      	ldr	r3, [pc, #8]	; (8016944 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801693a:	4618      	mov	r0, r3
 801693c:	3708      	adds	r7, #8
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}
 8016942:	bf00      	nop
 8016944:	20004c28 	.word	0x20004c28
 8016948:	08017be4 	.word	0x08017be4

0801694c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b084      	sub	sp, #16
 8016950:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016952:	4b0f      	ldr	r3, [pc, #60]	; (8016990 <Get_SerialNum+0x44>)
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016958:	4b0e      	ldr	r3, [pc, #56]	; (8016994 <Get_SerialNum+0x48>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801695e:	4b0e      	ldr	r3, [pc, #56]	; (8016998 <Get_SerialNum+0x4c>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016964:	68fa      	ldr	r2, [r7, #12]
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	4413      	add	r3, r2
 801696a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d009      	beq.n	8016986 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016972:	2208      	movs	r2, #8
 8016974:	4909      	ldr	r1, [pc, #36]	; (801699c <Get_SerialNum+0x50>)
 8016976:	68f8      	ldr	r0, [r7, #12]
 8016978:	f000 f814 	bl	80169a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801697c:	2204      	movs	r2, #4
 801697e:	4908      	ldr	r1, [pc, #32]	; (80169a0 <Get_SerialNum+0x54>)
 8016980:	68b8      	ldr	r0, [r7, #8]
 8016982:	f000 f80f 	bl	80169a4 <IntToUnicode>
  }
}
 8016986:	bf00      	nop
 8016988:	3710      	adds	r7, #16
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}
 801698e:	bf00      	nop
 8016990:	1ffff7ac 	.word	0x1ffff7ac
 8016994:	1ffff7b0 	.word	0x1ffff7b0
 8016998:	1ffff7b4 	.word	0x1ffff7b4
 801699c:	20000166 	.word	0x20000166
 80169a0:	20000176 	.word	0x20000176

080169a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80169a4:	b480      	push	{r7}
 80169a6:	b087      	sub	sp, #28
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	60f8      	str	r0, [r7, #12]
 80169ac:	60b9      	str	r1, [r7, #8]
 80169ae:	4613      	mov	r3, r2
 80169b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80169b2:	2300      	movs	r3, #0
 80169b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80169b6:	2300      	movs	r3, #0
 80169b8:	75fb      	strb	r3, [r7, #23]
 80169ba:	e027      	b.n	8016a0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	0f1b      	lsrs	r3, r3, #28
 80169c0:	2b09      	cmp	r3, #9
 80169c2:	d80b      	bhi.n	80169dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	0f1b      	lsrs	r3, r3, #28
 80169c8:	b2da      	uxtb	r2, r3
 80169ca:	7dfb      	ldrb	r3, [r7, #23]
 80169cc:	005b      	lsls	r3, r3, #1
 80169ce:	4619      	mov	r1, r3
 80169d0:	68bb      	ldr	r3, [r7, #8]
 80169d2:	440b      	add	r3, r1
 80169d4:	3230      	adds	r2, #48	; 0x30
 80169d6:	b2d2      	uxtb	r2, r2
 80169d8:	701a      	strb	r2, [r3, #0]
 80169da:	e00a      	b.n	80169f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	0f1b      	lsrs	r3, r3, #28
 80169e0:	b2da      	uxtb	r2, r3
 80169e2:	7dfb      	ldrb	r3, [r7, #23]
 80169e4:	005b      	lsls	r3, r3, #1
 80169e6:	4619      	mov	r1, r3
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	440b      	add	r3, r1
 80169ec:	3237      	adds	r2, #55	; 0x37
 80169ee:	b2d2      	uxtb	r2, r2
 80169f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	011b      	lsls	r3, r3, #4
 80169f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80169f8:	7dfb      	ldrb	r3, [r7, #23]
 80169fa:	005b      	lsls	r3, r3, #1
 80169fc:	3301      	adds	r3, #1
 80169fe:	68ba      	ldr	r2, [r7, #8]
 8016a00:	4413      	add	r3, r2
 8016a02:	2200      	movs	r2, #0
 8016a04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016a06:	7dfb      	ldrb	r3, [r7, #23]
 8016a08:	3301      	adds	r3, #1
 8016a0a:	75fb      	strb	r3, [r7, #23]
 8016a0c:	7dfa      	ldrb	r2, [r7, #23]
 8016a0e:	79fb      	ldrb	r3, [r7, #7]
 8016a10:	429a      	cmp	r2, r3
 8016a12:	d3d3      	bcc.n	80169bc <IntToUnicode+0x18>
  }
}
 8016a14:	bf00      	nop
 8016a16:	bf00      	nop
 8016a18:	371c      	adds	r7, #28
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a20:	4770      	bx	lr
	...

08016a24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b08a      	sub	sp, #40	; 0x28
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016a2c:	f107 0314 	add.w	r3, r7, #20
 8016a30:	2200      	movs	r2, #0
 8016a32:	601a      	str	r2, [r3, #0]
 8016a34:	605a      	str	r2, [r3, #4]
 8016a36:	609a      	str	r2, [r3, #8]
 8016a38:	60da      	str	r2, [r3, #12]
 8016a3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	4a1f      	ldr	r2, [pc, #124]	; (8016ac0 <HAL_PCD_MspInit+0x9c>)
 8016a42:	4293      	cmp	r3, r2
 8016a44:	d137      	bne.n	8016ab6 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016a46:	4b1f      	ldr	r3, [pc, #124]	; (8016ac4 <HAL_PCD_MspInit+0xa0>)
 8016a48:	695b      	ldr	r3, [r3, #20]
 8016a4a:	4a1e      	ldr	r2, [pc, #120]	; (8016ac4 <HAL_PCD_MspInit+0xa0>)
 8016a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016a50:	6153      	str	r3, [r2, #20]
 8016a52:	4b1c      	ldr	r3, [pc, #112]	; (8016ac4 <HAL_PCD_MspInit+0xa0>)
 8016a54:	695b      	ldr	r3, [r3, #20]
 8016a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016a5a:	613b      	str	r3, [r7, #16]
 8016a5c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016a5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016a64:	2302      	movs	r3, #2
 8016a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8016a6c:	2303      	movs	r3, #3
 8016a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8016a70:	230e      	movs	r3, #14
 8016a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016a74:	f107 0314 	add.w	r3, r7, #20
 8016a78:	4619      	mov	r1, r3
 8016a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016a7e:	f7f4 f8af 	bl	800abe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8016a82:	4b10      	ldr	r3, [pc, #64]	; (8016ac4 <HAL_PCD_MspInit+0xa0>)
 8016a84:	69db      	ldr	r3, [r3, #28]
 8016a86:	4a0f      	ldr	r2, [pc, #60]	; (8016ac4 <HAL_PCD_MspInit+0xa0>)
 8016a88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016a8c:	61d3      	str	r3, [r2, #28]
 8016a8e:	4b0d      	ldr	r3, [pc, #52]	; (8016ac4 <HAL_PCD_MspInit+0xa0>)
 8016a90:	69db      	ldr	r3, [r3, #28]
 8016a92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016a96:	60fb      	str	r3, [r7, #12]
 8016a98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 8016a9a:	4b0b      	ldr	r3, [pc, #44]	; (8016ac8 <HAL_PCD_MspInit+0xa4>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	4a0a      	ldr	r2, [pc, #40]	; (8016ac8 <HAL_PCD_MspInit+0xa4>)
 8016aa0:	f043 0320 	orr.w	r3, r3, #32
 8016aa4:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	2105      	movs	r1, #5
 8016aaa:	204b      	movs	r0, #75	; 0x4b
 8016aac:	f7f3 fdd0 	bl	800a650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8016ab0:	204b      	movs	r0, #75	; 0x4b
 8016ab2:	f7f3 fde9 	bl	800a688 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8016ab6:	bf00      	nop
 8016ab8:	3728      	adds	r7, #40	; 0x28
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bd80      	pop	{r7, pc}
 8016abe:	bf00      	nop
 8016ac0:	40005c00 	.word	0x40005c00
 8016ac4:	40021000 	.word	0x40021000
 8016ac8:	40010000 	.word	0x40010000

08016acc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b082      	sub	sp, #8
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8016ae0:	4619      	mov	r1, r3
 8016ae2:	4610      	mov	r0, r2
 8016ae4:	f7fc f81a 	bl	8012b1c <USBD_LL_SetupStage>
}
 8016ae8:	bf00      	nop
 8016aea:	3708      	adds	r7, #8
 8016aec:	46bd      	mov	sp, r7
 8016aee:	bd80      	pop	{r7, pc}

08016af0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b082      	sub	sp, #8
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
 8016af8:	460b      	mov	r3, r1
 8016afa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8016b02:	78fa      	ldrb	r2, [r7, #3]
 8016b04:	6879      	ldr	r1, [r7, #4]
 8016b06:	4613      	mov	r3, r2
 8016b08:	009b      	lsls	r3, r3, #2
 8016b0a:	4413      	add	r3, r2
 8016b0c:	00db      	lsls	r3, r3, #3
 8016b0e:	440b      	add	r3, r1
 8016b10:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8016b14:	681a      	ldr	r2, [r3, #0]
 8016b16:	78fb      	ldrb	r3, [r7, #3]
 8016b18:	4619      	mov	r1, r3
 8016b1a:	f7fc f84c 	bl	8012bb6 <USBD_LL_DataOutStage>
}
 8016b1e:	bf00      	nop
 8016b20:	3708      	adds	r7, #8
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd80      	pop	{r7, pc}

08016b26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b26:	b580      	push	{r7, lr}
 8016b28:	b082      	sub	sp, #8
 8016b2a:	af00      	add	r7, sp, #0
 8016b2c:	6078      	str	r0, [r7, #4]
 8016b2e:	460b      	mov	r3, r1
 8016b30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8016b38:	78fa      	ldrb	r2, [r7, #3]
 8016b3a:	6879      	ldr	r1, [r7, #4]
 8016b3c:	4613      	mov	r3, r2
 8016b3e:	009b      	lsls	r3, r3, #2
 8016b40:	4413      	add	r3, r2
 8016b42:	00db      	lsls	r3, r3, #3
 8016b44:	440b      	add	r3, r1
 8016b46:	333c      	adds	r3, #60	; 0x3c
 8016b48:	681a      	ldr	r2, [r3, #0]
 8016b4a:	78fb      	ldrb	r3, [r7, #3]
 8016b4c:	4619      	mov	r1, r3
 8016b4e:	f7fc f8a3 	bl	8012c98 <USBD_LL_DataInStage>
}
 8016b52:	bf00      	nop
 8016b54:	3708      	adds	r7, #8
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}

08016b5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b5a:	b580      	push	{r7, lr}
 8016b5c:	b082      	sub	sp, #8
 8016b5e:	af00      	add	r7, sp, #0
 8016b60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f7fc f9b6 	bl	8012eda <USBD_LL_SOF>
}
 8016b6e:	bf00      	nop
 8016b70:	3708      	adds	r7, #8
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}

08016b76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b76:	b580      	push	{r7, lr}
 8016b78:	b084      	sub	sp, #16
 8016b7a:	af00      	add	r7, sp, #0
 8016b7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016b7e:	2301      	movs	r3, #1
 8016b80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	689b      	ldr	r3, [r3, #8]
 8016b86:	2b02      	cmp	r3, #2
 8016b88:	d001      	beq.n	8016b8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8016b8a:	f7ec fe77 	bl	800387c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8016b94:	7bfa      	ldrb	r2, [r7, #15]
 8016b96:	4611      	mov	r1, r2
 8016b98:	4618      	mov	r0, r3
 8016b9a:	f7fc f963 	bl	8012e64 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	f7fc f91c 	bl	8012de2 <USBD_LL_Reset>
}
 8016baa:	bf00      	nop
 8016bac:	3710      	adds	r7, #16
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	bd80      	pop	{r7, pc}
	...

08016bb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b082      	sub	sp, #8
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	f7fc f95e 	bl	8012e84 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	699b      	ldr	r3, [r3, #24]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d005      	beq.n	8016bdc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016bd0:	4b04      	ldr	r3, [pc, #16]	; (8016be4 <HAL_PCD_SuspendCallback+0x30>)
 8016bd2:	691b      	ldr	r3, [r3, #16]
 8016bd4:	4a03      	ldr	r2, [pc, #12]	; (8016be4 <HAL_PCD_SuspendCallback+0x30>)
 8016bd6:	f043 0306 	orr.w	r3, r3, #6
 8016bda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016bdc:	bf00      	nop
 8016bde:	3708      	adds	r7, #8
 8016be0:	46bd      	mov	sp, r7
 8016be2:	bd80      	pop	{r7, pc}
 8016be4:	e000ed00 	.word	0xe000ed00

08016be8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b082      	sub	sp, #8
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	f7fc f959 	bl	8012eae <USBD_LL_Resume>
}
 8016bfc:	bf00      	nop
 8016bfe:	3708      	adds	r7, #8
 8016c00:	46bd      	mov	sp, r7
 8016c02:	bd80      	pop	{r7, pc}

08016c04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b082      	sub	sp, #8
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8016c0c:	4a28      	ldr	r2, [pc, #160]	; (8016cb0 <USBD_LL_Init+0xac>)
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	4a26      	ldr	r2, [pc, #152]	; (8016cb0 <USBD_LL_Init+0xac>)
 8016c18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8016c1c:	4b24      	ldr	r3, [pc, #144]	; (8016cb0 <USBD_LL_Init+0xac>)
 8016c1e:	4a25      	ldr	r2, [pc, #148]	; (8016cb4 <USBD_LL_Init+0xb0>)
 8016c20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8016c22:	4b23      	ldr	r3, [pc, #140]	; (8016cb0 <USBD_LL_Init+0xac>)
 8016c24:	2208      	movs	r2, #8
 8016c26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016c28:	4b21      	ldr	r3, [pc, #132]	; (8016cb0 <USBD_LL_Init+0xac>)
 8016c2a:	2202      	movs	r2, #2
 8016c2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016c2e:	4b20      	ldr	r3, [pc, #128]	; (8016cb0 <USBD_LL_Init+0xac>)
 8016c30:	2202      	movs	r2, #2
 8016c32:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016c34:	4b1e      	ldr	r3, [pc, #120]	; (8016cb0 <USBD_LL_Init+0xac>)
 8016c36:	2200      	movs	r2, #0
 8016c38:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8016c3a:	4b1d      	ldr	r3, [pc, #116]	; (8016cb0 <USBD_LL_Init+0xac>)
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016c40:	481b      	ldr	r0, [pc, #108]	; (8016cb0 <USBD_LL_Init+0xac>)
 8016c42:	f7f5 f936 	bl	800beb2 <HAL_PCD_Init>
 8016c46:	4603      	mov	r3, r0
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d001      	beq.n	8016c50 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8016c4c:	f7ec fe16 	bl	800387c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016c56:	2318      	movs	r3, #24
 8016c58:	2200      	movs	r2, #0
 8016c5a:	2100      	movs	r1, #0
 8016c5c:	f7f6 fdd1 	bl	800d802 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016c66:	2358      	movs	r3, #88	; 0x58
 8016c68:	2200      	movs	r2, #0
 8016c6a:	2180      	movs	r1, #128	; 0x80
 8016c6c:	f7f6 fdc9 	bl	800d802 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016c76:	23c0      	movs	r3, #192	; 0xc0
 8016c78:	2200      	movs	r2, #0
 8016c7a:	2181      	movs	r1, #129	; 0x81
 8016c7c:	f7f6 fdc1 	bl	800d802 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016c86:	f44f 7388 	mov.w	r3, #272	; 0x110
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	2101      	movs	r1, #1
 8016c8e:	f7f6 fdb8 	bl	800d802 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	2182      	movs	r1, #130	; 0x82
 8016ca0:	f7f6 fdaf 	bl	800d802 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8016ca4:	2300      	movs	r3, #0
}
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	3708      	adds	r7, #8
 8016caa:	46bd      	mov	sp, r7
 8016cac:	bd80      	pop	{r7, pc}
 8016cae:	bf00      	nop
 8016cb0:	20004e28 	.word	0x20004e28
 8016cb4:	40005c00 	.word	0x40005c00

08016cb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b084      	sub	sp, #16
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7f5 f9cd 	bl	800c06e <HAL_PCD_Start>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cd8:	7bfb      	ldrb	r3, [r7, #15]
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f000 f954 	bl	8016f88 <USBD_Get_USB_Status>
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	3710      	adds	r7, #16
 8016cea:	46bd      	mov	sp, r7
 8016cec:	bd80      	pop	{r7, pc}

08016cee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016cee:	b580      	push	{r7, lr}
 8016cf0:	b084      	sub	sp, #16
 8016cf2:	af00      	add	r7, sp, #0
 8016cf4:	6078      	str	r0, [r7, #4]
 8016cf6:	4608      	mov	r0, r1
 8016cf8:	4611      	mov	r1, r2
 8016cfa:	461a      	mov	r2, r3
 8016cfc:	4603      	mov	r3, r0
 8016cfe:	70fb      	strb	r3, [r7, #3]
 8016d00:	460b      	mov	r3, r1
 8016d02:	70bb      	strb	r3, [r7, #2]
 8016d04:	4613      	mov	r3, r2
 8016d06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d08:	2300      	movs	r3, #0
 8016d0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016d16:	78bb      	ldrb	r3, [r7, #2]
 8016d18:	883a      	ldrh	r2, [r7, #0]
 8016d1a:	78f9      	ldrb	r1, [r7, #3]
 8016d1c:	f7f5 fae9 	bl	800c2f2 <HAL_PCD_EP_Open>
 8016d20:	4603      	mov	r3, r0
 8016d22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d24:	7bfb      	ldrb	r3, [r7, #15]
 8016d26:	4618      	mov	r0, r3
 8016d28:	f000 f92e 	bl	8016f88 <USBD_Get_USB_Status>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d32:	4618      	mov	r0, r3
 8016d34:	3710      	adds	r7, #16
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bd80      	pop	{r7, pc}

08016d3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d3a:	b580      	push	{r7, lr}
 8016d3c:	b084      	sub	sp, #16
 8016d3e:	af00      	add	r7, sp, #0
 8016d40:	6078      	str	r0, [r7, #4]
 8016d42:	460b      	mov	r3, r1
 8016d44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d46:	2300      	movs	r3, #0
 8016d48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016d54:	78fa      	ldrb	r2, [r7, #3]
 8016d56:	4611      	mov	r1, r2
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7f5 fb30 	bl	800c3be <HAL_PCD_EP_Close>
 8016d5e:	4603      	mov	r3, r0
 8016d60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d62:	7bfb      	ldrb	r3, [r7, #15]
 8016d64:	4618      	mov	r0, r3
 8016d66:	f000 f90f 	bl	8016f88 <USBD_Get_USB_Status>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d70:	4618      	mov	r0, r3
 8016d72:	3710      	adds	r7, #16
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}

08016d78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b084      	sub	sp, #16
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
 8016d80:	460b      	mov	r3, r1
 8016d82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d84:	2300      	movs	r3, #0
 8016d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d88:	2300      	movs	r3, #0
 8016d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016d92:	78fa      	ldrb	r2, [r7, #3]
 8016d94:	4611      	mov	r1, r2
 8016d96:	4618      	mov	r0, r3
 8016d98:	f7f5 fbf1 	bl	800c57e <HAL_PCD_EP_SetStall>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016da0:	7bfb      	ldrb	r3, [r7, #15]
 8016da2:	4618      	mov	r0, r3
 8016da4:	f000 f8f0 	bl	8016f88 <USBD_Get_USB_Status>
 8016da8:	4603      	mov	r3, r0
 8016daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dae:	4618      	mov	r0, r3
 8016db0:	3710      	adds	r7, #16
 8016db2:	46bd      	mov	sp, r7
 8016db4:	bd80      	pop	{r7, pc}

08016db6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016db6:	b580      	push	{r7, lr}
 8016db8:	b084      	sub	sp, #16
 8016dba:	af00      	add	r7, sp, #0
 8016dbc:	6078      	str	r0, [r7, #4]
 8016dbe:	460b      	mov	r3, r1
 8016dc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016dd0:	78fa      	ldrb	r2, [r7, #3]
 8016dd2:	4611      	mov	r1, r2
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f7f5 fc24 	bl	800c622 <HAL_PCD_EP_ClrStall>
 8016dda:	4603      	mov	r3, r0
 8016ddc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dde:	7bfb      	ldrb	r3, [r7, #15]
 8016de0:	4618      	mov	r0, r3
 8016de2:	f000 f8d1 	bl	8016f88 <USBD_Get_USB_Status>
 8016de6:	4603      	mov	r3, r0
 8016de8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016dea:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dec:	4618      	mov	r0, r3
 8016dee:	3710      	adds	r7, #16
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd80      	pop	{r7, pc}

08016df4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016df4:	b480      	push	{r7}
 8016df6:	b085      	sub	sp, #20
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	6078      	str	r0, [r7, #4]
 8016dfc:	460b      	mov	r3, r1
 8016dfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016e06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	da0c      	bge.n	8016e2a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016e10:	78fb      	ldrb	r3, [r7, #3]
 8016e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e16:	68f9      	ldr	r1, [r7, #12]
 8016e18:	1c5a      	adds	r2, r3, #1
 8016e1a:	4613      	mov	r3, r2
 8016e1c:	009b      	lsls	r3, r3, #2
 8016e1e:	4413      	add	r3, r2
 8016e20:	00db      	lsls	r3, r3, #3
 8016e22:	440b      	add	r3, r1
 8016e24:	3302      	adds	r3, #2
 8016e26:	781b      	ldrb	r3, [r3, #0]
 8016e28:	e00b      	b.n	8016e42 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016e2a:	78fb      	ldrb	r3, [r7, #3]
 8016e2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e30:	68f9      	ldr	r1, [r7, #12]
 8016e32:	4613      	mov	r3, r2
 8016e34:	009b      	lsls	r3, r3, #2
 8016e36:	4413      	add	r3, r2
 8016e38:	00db      	lsls	r3, r3, #3
 8016e3a:	440b      	add	r3, r1
 8016e3c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8016e40:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	3714      	adds	r7, #20
 8016e46:	46bd      	mov	sp, r7
 8016e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4c:	4770      	bx	lr

08016e4e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016e4e:	b580      	push	{r7, lr}
 8016e50:	b084      	sub	sp, #16
 8016e52:	af00      	add	r7, sp, #0
 8016e54:	6078      	str	r0, [r7, #4]
 8016e56:	460b      	mov	r3, r1
 8016e58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016e68:	78fa      	ldrb	r2, [r7, #3]
 8016e6a:	4611      	mov	r1, r2
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	f7f5 fa1b 	bl	800c2a8 <HAL_PCD_SetAddress>
 8016e72:	4603      	mov	r3, r0
 8016e74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e76:	7bfb      	ldrb	r3, [r7, #15]
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f000 f885 	bl	8016f88 <USBD_Get_USB_Status>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e82:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e84:	4618      	mov	r0, r3
 8016e86:	3710      	adds	r7, #16
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	bd80      	pop	{r7, pc}

08016e8c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b086      	sub	sp, #24
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	60f8      	str	r0, [r7, #12]
 8016e94:	607a      	str	r2, [r7, #4]
 8016e96:	461a      	mov	r2, r3
 8016e98:	460b      	mov	r3, r1
 8016e9a:	72fb      	strb	r3, [r7, #11]
 8016e9c:	4613      	mov	r3, r2
 8016e9e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016eae:	893b      	ldrh	r3, [r7, #8]
 8016eb0:	7af9      	ldrb	r1, [r7, #11]
 8016eb2:	687a      	ldr	r2, [r7, #4]
 8016eb4:	f7f5 fb20 	bl	800c4f8 <HAL_PCD_EP_Transmit>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ebc:	7dfb      	ldrb	r3, [r7, #23]
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f000 f862 	bl	8016f88 <USBD_Get_USB_Status>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016ec8:	7dbb      	ldrb	r3, [r7, #22]
}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	3718      	adds	r7, #24
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}

08016ed2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016ed2:	b580      	push	{r7, lr}
 8016ed4:	b086      	sub	sp, #24
 8016ed6:	af00      	add	r7, sp, #0
 8016ed8:	60f8      	str	r0, [r7, #12]
 8016eda:	607a      	str	r2, [r7, #4]
 8016edc:	461a      	mov	r2, r3
 8016ede:	460b      	mov	r3, r1
 8016ee0:	72fb      	strb	r3, [r7, #11]
 8016ee2:	4613      	mov	r3, r2
 8016ee4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016eea:	2300      	movs	r3, #0
 8016eec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016ef4:	893b      	ldrh	r3, [r7, #8]
 8016ef6:	7af9      	ldrb	r1, [r7, #11]
 8016ef8:	687a      	ldr	r2, [r7, #4]
 8016efa:	f7f5 faa8 	bl	800c44e <HAL_PCD_EP_Receive>
 8016efe:	4603      	mov	r3, r0
 8016f00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f02:	7dfb      	ldrb	r3, [r7, #23]
 8016f04:	4618      	mov	r0, r3
 8016f06:	f000 f83f 	bl	8016f88 <USBD_Get_USB_Status>
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f10:	4618      	mov	r0, r3
 8016f12:	3718      	adds	r7, #24
 8016f14:	46bd      	mov	sp, r7
 8016f16:	bd80      	pop	{r7, pc}

08016f18 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b082      	sub	sp, #8
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
 8016f20:	460b      	mov	r3, r1
 8016f22:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016f2a:	78fa      	ldrb	r2, [r7, #3]
 8016f2c:	4611      	mov	r1, r2
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f7f5 faca 	bl	800c4c8 <HAL_PCD_EP_GetRxCount>
 8016f34:	4603      	mov	r3, r0
}
 8016f36:	4618      	mov	r0, r3
 8016f38:	3708      	adds	r7, #8
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}
	...

08016f40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016f40:	b480      	push	{r7}
 8016f42:	b083      	sub	sp, #12
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016f48:	4b03      	ldr	r3, [pc, #12]	; (8016f58 <USBD_static_malloc+0x18>)
}
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	370c      	adds	r7, #12
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f54:	4770      	bx	lr
 8016f56:	bf00      	nop
 8016f58:	20005114 	.word	0x20005114

08016f5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016f5c:	b480      	push	{r7}
 8016f5e:	b083      	sub	sp, #12
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]

}
 8016f64:	bf00      	nop
 8016f66:	370c      	adds	r7, #12
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f6e:	4770      	bx	lr

08016f70 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f70:	b480      	push	{r7}
 8016f72:	b083      	sub	sp, #12
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
 8016f78:	460b      	mov	r3, r1
 8016f7a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8016f7c:	bf00      	nop
 8016f7e:	370c      	adds	r7, #12
 8016f80:	46bd      	mov	sp, r7
 8016f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f86:	4770      	bx	lr

08016f88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016f88:	b480      	push	{r7}
 8016f8a:	b085      	sub	sp, #20
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	4603      	mov	r3, r0
 8016f90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f92:	2300      	movs	r3, #0
 8016f94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016f96:	79fb      	ldrb	r3, [r7, #7]
 8016f98:	2b03      	cmp	r3, #3
 8016f9a:	d817      	bhi.n	8016fcc <USBD_Get_USB_Status+0x44>
 8016f9c:	a201      	add	r2, pc, #4	; (adr r2, 8016fa4 <USBD_Get_USB_Status+0x1c>)
 8016f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fa2:	bf00      	nop
 8016fa4:	08016fb5 	.word	0x08016fb5
 8016fa8:	08016fbb 	.word	0x08016fbb
 8016fac:	08016fc1 	.word	0x08016fc1
 8016fb0:	08016fc7 	.word	0x08016fc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8016fb8:	e00b      	b.n	8016fd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016fba:	2302      	movs	r3, #2
 8016fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8016fbe:	e008      	b.n	8016fd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8016fc4:	e005      	b.n	8016fd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016fc6:	2302      	movs	r3, #2
 8016fc8:	73fb      	strb	r3, [r7, #15]
    break;
 8016fca:	e002      	b.n	8016fd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016fcc:	2302      	movs	r3, #2
 8016fce:	73fb      	strb	r3, [r7, #15]
    break;
 8016fd0:	bf00      	nop
  }
  return usb_status;
 8016fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	3714      	adds	r7, #20
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fde:	4770      	bx	lr

08016fe0 <__errno>:
 8016fe0:	4b01      	ldr	r3, [pc, #4]	; (8016fe8 <__errno+0x8>)
 8016fe2:	6818      	ldr	r0, [r3, #0]
 8016fe4:	4770      	bx	lr
 8016fe6:	bf00      	nop
 8016fe8:	20000180 	.word	0x20000180

08016fec <__libc_init_array>:
 8016fec:	b570      	push	{r4, r5, r6, lr}
 8016fee:	4d0d      	ldr	r5, [pc, #52]	; (8017024 <__libc_init_array+0x38>)
 8016ff0:	4c0d      	ldr	r4, [pc, #52]	; (8017028 <__libc_init_array+0x3c>)
 8016ff2:	1b64      	subs	r4, r4, r5
 8016ff4:	10a4      	asrs	r4, r4, #2
 8016ff6:	2600      	movs	r6, #0
 8016ff8:	42a6      	cmp	r6, r4
 8016ffa:	d109      	bne.n	8017010 <__libc_init_array+0x24>
 8016ffc:	4d0b      	ldr	r5, [pc, #44]	; (801702c <__libc_init_array+0x40>)
 8016ffe:	4c0c      	ldr	r4, [pc, #48]	; (8017030 <__libc_init_array+0x44>)
 8017000:	f000 fd2c 	bl	8017a5c <_init>
 8017004:	1b64      	subs	r4, r4, r5
 8017006:	10a4      	asrs	r4, r4, #2
 8017008:	2600      	movs	r6, #0
 801700a:	42a6      	cmp	r6, r4
 801700c:	d105      	bne.n	801701a <__libc_init_array+0x2e>
 801700e:	bd70      	pop	{r4, r5, r6, pc}
 8017010:	f855 3b04 	ldr.w	r3, [r5], #4
 8017014:	4798      	blx	r3
 8017016:	3601      	adds	r6, #1
 8017018:	e7ee      	b.n	8016ff8 <__libc_init_array+0xc>
 801701a:	f855 3b04 	ldr.w	r3, [r5], #4
 801701e:	4798      	blx	r3
 8017020:	3601      	adds	r6, #1
 8017022:	e7f2      	b.n	801700a <__libc_init_array+0x1e>
 8017024:	0801825c 	.word	0x0801825c
 8017028:	0801825c 	.word	0x0801825c
 801702c:	0801825c 	.word	0x0801825c
 8017030:	08018260 	.word	0x08018260

08017034 <memcpy>:
 8017034:	440a      	add	r2, r1
 8017036:	4291      	cmp	r1, r2
 8017038:	f100 33ff 	add.w	r3, r0, #4294967295
 801703c:	d100      	bne.n	8017040 <memcpy+0xc>
 801703e:	4770      	bx	lr
 8017040:	b510      	push	{r4, lr}
 8017042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017046:	f803 4f01 	strb.w	r4, [r3, #1]!
 801704a:	4291      	cmp	r1, r2
 801704c:	d1f9      	bne.n	8017042 <memcpy+0xe>
 801704e:	bd10      	pop	{r4, pc}

08017050 <memset>:
 8017050:	4402      	add	r2, r0
 8017052:	4603      	mov	r3, r0
 8017054:	4293      	cmp	r3, r2
 8017056:	d100      	bne.n	801705a <memset+0xa>
 8017058:	4770      	bx	lr
 801705a:	f803 1b01 	strb.w	r1, [r3], #1
 801705e:	e7f9      	b.n	8017054 <memset+0x4>

08017060 <_puts_r>:
 8017060:	b570      	push	{r4, r5, r6, lr}
 8017062:	460e      	mov	r6, r1
 8017064:	4605      	mov	r5, r0
 8017066:	b118      	cbz	r0, 8017070 <_puts_r+0x10>
 8017068:	6983      	ldr	r3, [r0, #24]
 801706a:	b90b      	cbnz	r3, 8017070 <_puts_r+0x10>
 801706c:	f000 fa48 	bl	8017500 <__sinit>
 8017070:	69ab      	ldr	r3, [r5, #24]
 8017072:	68ac      	ldr	r4, [r5, #8]
 8017074:	b913      	cbnz	r3, 801707c <_puts_r+0x1c>
 8017076:	4628      	mov	r0, r5
 8017078:	f000 fa42 	bl	8017500 <__sinit>
 801707c:	4b2c      	ldr	r3, [pc, #176]	; (8017130 <_puts_r+0xd0>)
 801707e:	429c      	cmp	r4, r3
 8017080:	d120      	bne.n	80170c4 <_puts_r+0x64>
 8017082:	686c      	ldr	r4, [r5, #4]
 8017084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017086:	07db      	lsls	r3, r3, #31
 8017088:	d405      	bmi.n	8017096 <_puts_r+0x36>
 801708a:	89a3      	ldrh	r3, [r4, #12]
 801708c:	0598      	lsls	r0, r3, #22
 801708e:	d402      	bmi.n	8017096 <_puts_r+0x36>
 8017090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017092:	f000 fad3 	bl	801763c <__retarget_lock_acquire_recursive>
 8017096:	89a3      	ldrh	r3, [r4, #12]
 8017098:	0719      	lsls	r1, r3, #28
 801709a:	d51d      	bpl.n	80170d8 <_puts_r+0x78>
 801709c:	6923      	ldr	r3, [r4, #16]
 801709e:	b1db      	cbz	r3, 80170d8 <_puts_r+0x78>
 80170a0:	3e01      	subs	r6, #1
 80170a2:	68a3      	ldr	r3, [r4, #8]
 80170a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80170a8:	3b01      	subs	r3, #1
 80170aa:	60a3      	str	r3, [r4, #8]
 80170ac:	bb39      	cbnz	r1, 80170fe <_puts_r+0x9e>
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	da38      	bge.n	8017124 <_puts_r+0xc4>
 80170b2:	4622      	mov	r2, r4
 80170b4:	210a      	movs	r1, #10
 80170b6:	4628      	mov	r0, r5
 80170b8:	f000 f848 	bl	801714c <__swbuf_r>
 80170bc:	3001      	adds	r0, #1
 80170be:	d011      	beq.n	80170e4 <_puts_r+0x84>
 80170c0:	250a      	movs	r5, #10
 80170c2:	e011      	b.n	80170e8 <_puts_r+0x88>
 80170c4:	4b1b      	ldr	r3, [pc, #108]	; (8017134 <_puts_r+0xd4>)
 80170c6:	429c      	cmp	r4, r3
 80170c8:	d101      	bne.n	80170ce <_puts_r+0x6e>
 80170ca:	68ac      	ldr	r4, [r5, #8]
 80170cc:	e7da      	b.n	8017084 <_puts_r+0x24>
 80170ce:	4b1a      	ldr	r3, [pc, #104]	; (8017138 <_puts_r+0xd8>)
 80170d0:	429c      	cmp	r4, r3
 80170d2:	bf08      	it	eq
 80170d4:	68ec      	ldreq	r4, [r5, #12]
 80170d6:	e7d5      	b.n	8017084 <_puts_r+0x24>
 80170d8:	4621      	mov	r1, r4
 80170da:	4628      	mov	r0, r5
 80170dc:	f000 f888 	bl	80171f0 <__swsetup_r>
 80170e0:	2800      	cmp	r0, #0
 80170e2:	d0dd      	beq.n	80170a0 <_puts_r+0x40>
 80170e4:	f04f 35ff 	mov.w	r5, #4294967295
 80170e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80170ea:	07da      	lsls	r2, r3, #31
 80170ec:	d405      	bmi.n	80170fa <_puts_r+0x9a>
 80170ee:	89a3      	ldrh	r3, [r4, #12]
 80170f0:	059b      	lsls	r3, r3, #22
 80170f2:	d402      	bmi.n	80170fa <_puts_r+0x9a>
 80170f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80170f6:	f000 faa2 	bl	801763e <__retarget_lock_release_recursive>
 80170fa:	4628      	mov	r0, r5
 80170fc:	bd70      	pop	{r4, r5, r6, pc}
 80170fe:	2b00      	cmp	r3, #0
 8017100:	da04      	bge.n	801710c <_puts_r+0xac>
 8017102:	69a2      	ldr	r2, [r4, #24]
 8017104:	429a      	cmp	r2, r3
 8017106:	dc06      	bgt.n	8017116 <_puts_r+0xb6>
 8017108:	290a      	cmp	r1, #10
 801710a:	d004      	beq.n	8017116 <_puts_r+0xb6>
 801710c:	6823      	ldr	r3, [r4, #0]
 801710e:	1c5a      	adds	r2, r3, #1
 8017110:	6022      	str	r2, [r4, #0]
 8017112:	7019      	strb	r1, [r3, #0]
 8017114:	e7c5      	b.n	80170a2 <_puts_r+0x42>
 8017116:	4622      	mov	r2, r4
 8017118:	4628      	mov	r0, r5
 801711a:	f000 f817 	bl	801714c <__swbuf_r>
 801711e:	3001      	adds	r0, #1
 8017120:	d1bf      	bne.n	80170a2 <_puts_r+0x42>
 8017122:	e7df      	b.n	80170e4 <_puts_r+0x84>
 8017124:	6823      	ldr	r3, [r4, #0]
 8017126:	250a      	movs	r5, #10
 8017128:	1c5a      	adds	r2, r3, #1
 801712a:	6022      	str	r2, [r4, #0]
 801712c:	701d      	strb	r5, [r3, #0]
 801712e:	e7db      	b.n	80170e8 <_puts_r+0x88>
 8017130:	0801821c 	.word	0x0801821c
 8017134:	0801823c 	.word	0x0801823c
 8017138:	080181fc 	.word	0x080181fc

0801713c <puts>:
 801713c:	4b02      	ldr	r3, [pc, #8]	; (8017148 <puts+0xc>)
 801713e:	4601      	mov	r1, r0
 8017140:	6818      	ldr	r0, [r3, #0]
 8017142:	f7ff bf8d 	b.w	8017060 <_puts_r>
 8017146:	bf00      	nop
 8017148:	20000180 	.word	0x20000180

0801714c <__swbuf_r>:
 801714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801714e:	460e      	mov	r6, r1
 8017150:	4614      	mov	r4, r2
 8017152:	4605      	mov	r5, r0
 8017154:	b118      	cbz	r0, 801715e <__swbuf_r+0x12>
 8017156:	6983      	ldr	r3, [r0, #24]
 8017158:	b90b      	cbnz	r3, 801715e <__swbuf_r+0x12>
 801715a:	f000 f9d1 	bl	8017500 <__sinit>
 801715e:	4b21      	ldr	r3, [pc, #132]	; (80171e4 <__swbuf_r+0x98>)
 8017160:	429c      	cmp	r4, r3
 8017162:	d12b      	bne.n	80171bc <__swbuf_r+0x70>
 8017164:	686c      	ldr	r4, [r5, #4]
 8017166:	69a3      	ldr	r3, [r4, #24]
 8017168:	60a3      	str	r3, [r4, #8]
 801716a:	89a3      	ldrh	r3, [r4, #12]
 801716c:	071a      	lsls	r2, r3, #28
 801716e:	d52f      	bpl.n	80171d0 <__swbuf_r+0x84>
 8017170:	6923      	ldr	r3, [r4, #16]
 8017172:	b36b      	cbz	r3, 80171d0 <__swbuf_r+0x84>
 8017174:	6923      	ldr	r3, [r4, #16]
 8017176:	6820      	ldr	r0, [r4, #0]
 8017178:	1ac0      	subs	r0, r0, r3
 801717a:	6963      	ldr	r3, [r4, #20]
 801717c:	b2f6      	uxtb	r6, r6
 801717e:	4283      	cmp	r3, r0
 8017180:	4637      	mov	r7, r6
 8017182:	dc04      	bgt.n	801718e <__swbuf_r+0x42>
 8017184:	4621      	mov	r1, r4
 8017186:	4628      	mov	r0, r5
 8017188:	f000 f926 	bl	80173d8 <_fflush_r>
 801718c:	bb30      	cbnz	r0, 80171dc <__swbuf_r+0x90>
 801718e:	68a3      	ldr	r3, [r4, #8]
 8017190:	3b01      	subs	r3, #1
 8017192:	60a3      	str	r3, [r4, #8]
 8017194:	6823      	ldr	r3, [r4, #0]
 8017196:	1c5a      	adds	r2, r3, #1
 8017198:	6022      	str	r2, [r4, #0]
 801719a:	701e      	strb	r6, [r3, #0]
 801719c:	6963      	ldr	r3, [r4, #20]
 801719e:	3001      	adds	r0, #1
 80171a0:	4283      	cmp	r3, r0
 80171a2:	d004      	beq.n	80171ae <__swbuf_r+0x62>
 80171a4:	89a3      	ldrh	r3, [r4, #12]
 80171a6:	07db      	lsls	r3, r3, #31
 80171a8:	d506      	bpl.n	80171b8 <__swbuf_r+0x6c>
 80171aa:	2e0a      	cmp	r6, #10
 80171ac:	d104      	bne.n	80171b8 <__swbuf_r+0x6c>
 80171ae:	4621      	mov	r1, r4
 80171b0:	4628      	mov	r0, r5
 80171b2:	f000 f911 	bl	80173d8 <_fflush_r>
 80171b6:	b988      	cbnz	r0, 80171dc <__swbuf_r+0x90>
 80171b8:	4638      	mov	r0, r7
 80171ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171bc:	4b0a      	ldr	r3, [pc, #40]	; (80171e8 <__swbuf_r+0x9c>)
 80171be:	429c      	cmp	r4, r3
 80171c0:	d101      	bne.n	80171c6 <__swbuf_r+0x7a>
 80171c2:	68ac      	ldr	r4, [r5, #8]
 80171c4:	e7cf      	b.n	8017166 <__swbuf_r+0x1a>
 80171c6:	4b09      	ldr	r3, [pc, #36]	; (80171ec <__swbuf_r+0xa0>)
 80171c8:	429c      	cmp	r4, r3
 80171ca:	bf08      	it	eq
 80171cc:	68ec      	ldreq	r4, [r5, #12]
 80171ce:	e7ca      	b.n	8017166 <__swbuf_r+0x1a>
 80171d0:	4621      	mov	r1, r4
 80171d2:	4628      	mov	r0, r5
 80171d4:	f000 f80c 	bl	80171f0 <__swsetup_r>
 80171d8:	2800      	cmp	r0, #0
 80171da:	d0cb      	beq.n	8017174 <__swbuf_r+0x28>
 80171dc:	f04f 37ff 	mov.w	r7, #4294967295
 80171e0:	e7ea      	b.n	80171b8 <__swbuf_r+0x6c>
 80171e2:	bf00      	nop
 80171e4:	0801821c 	.word	0x0801821c
 80171e8:	0801823c 	.word	0x0801823c
 80171ec:	080181fc 	.word	0x080181fc

080171f0 <__swsetup_r>:
 80171f0:	4b32      	ldr	r3, [pc, #200]	; (80172bc <__swsetup_r+0xcc>)
 80171f2:	b570      	push	{r4, r5, r6, lr}
 80171f4:	681d      	ldr	r5, [r3, #0]
 80171f6:	4606      	mov	r6, r0
 80171f8:	460c      	mov	r4, r1
 80171fa:	b125      	cbz	r5, 8017206 <__swsetup_r+0x16>
 80171fc:	69ab      	ldr	r3, [r5, #24]
 80171fe:	b913      	cbnz	r3, 8017206 <__swsetup_r+0x16>
 8017200:	4628      	mov	r0, r5
 8017202:	f000 f97d 	bl	8017500 <__sinit>
 8017206:	4b2e      	ldr	r3, [pc, #184]	; (80172c0 <__swsetup_r+0xd0>)
 8017208:	429c      	cmp	r4, r3
 801720a:	d10f      	bne.n	801722c <__swsetup_r+0x3c>
 801720c:	686c      	ldr	r4, [r5, #4]
 801720e:	89a3      	ldrh	r3, [r4, #12]
 8017210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017214:	0719      	lsls	r1, r3, #28
 8017216:	d42c      	bmi.n	8017272 <__swsetup_r+0x82>
 8017218:	06dd      	lsls	r5, r3, #27
 801721a:	d411      	bmi.n	8017240 <__swsetup_r+0x50>
 801721c:	2309      	movs	r3, #9
 801721e:	6033      	str	r3, [r6, #0]
 8017220:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017224:	81a3      	strh	r3, [r4, #12]
 8017226:	f04f 30ff 	mov.w	r0, #4294967295
 801722a:	e03e      	b.n	80172aa <__swsetup_r+0xba>
 801722c:	4b25      	ldr	r3, [pc, #148]	; (80172c4 <__swsetup_r+0xd4>)
 801722e:	429c      	cmp	r4, r3
 8017230:	d101      	bne.n	8017236 <__swsetup_r+0x46>
 8017232:	68ac      	ldr	r4, [r5, #8]
 8017234:	e7eb      	b.n	801720e <__swsetup_r+0x1e>
 8017236:	4b24      	ldr	r3, [pc, #144]	; (80172c8 <__swsetup_r+0xd8>)
 8017238:	429c      	cmp	r4, r3
 801723a:	bf08      	it	eq
 801723c:	68ec      	ldreq	r4, [r5, #12]
 801723e:	e7e6      	b.n	801720e <__swsetup_r+0x1e>
 8017240:	0758      	lsls	r0, r3, #29
 8017242:	d512      	bpl.n	801726a <__swsetup_r+0x7a>
 8017244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017246:	b141      	cbz	r1, 801725a <__swsetup_r+0x6a>
 8017248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801724c:	4299      	cmp	r1, r3
 801724e:	d002      	beq.n	8017256 <__swsetup_r+0x66>
 8017250:	4630      	mov	r0, r6
 8017252:	f000 fa5b 	bl	801770c <_free_r>
 8017256:	2300      	movs	r3, #0
 8017258:	6363      	str	r3, [r4, #52]	; 0x34
 801725a:	89a3      	ldrh	r3, [r4, #12]
 801725c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017260:	81a3      	strh	r3, [r4, #12]
 8017262:	2300      	movs	r3, #0
 8017264:	6063      	str	r3, [r4, #4]
 8017266:	6923      	ldr	r3, [r4, #16]
 8017268:	6023      	str	r3, [r4, #0]
 801726a:	89a3      	ldrh	r3, [r4, #12]
 801726c:	f043 0308 	orr.w	r3, r3, #8
 8017270:	81a3      	strh	r3, [r4, #12]
 8017272:	6923      	ldr	r3, [r4, #16]
 8017274:	b94b      	cbnz	r3, 801728a <__swsetup_r+0x9a>
 8017276:	89a3      	ldrh	r3, [r4, #12]
 8017278:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801727c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017280:	d003      	beq.n	801728a <__swsetup_r+0x9a>
 8017282:	4621      	mov	r1, r4
 8017284:	4630      	mov	r0, r6
 8017286:	f000 fa01 	bl	801768c <__smakebuf_r>
 801728a:	89a0      	ldrh	r0, [r4, #12]
 801728c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017290:	f010 0301 	ands.w	r3, r0, #1
 8017294:	d00a      	beq.n	80172ac <__swsetup_r+0xbc>
 8017296:	2300      	movs	r3, #0
 8017298:	60a3      	str	r3, [r4, #8]
 801729a:	6963      	ldr	r3, [r4, #20]
 801729c:	425b      	negs	r3, r3
 801729e:	61a3      	str	r3, [r4, #24]
 80172a0:	6923      	ldr	r3, [r4, #16]
 80172a2:	b943      	cbnz	r3, 80172b6 <__swsetup_r+0xc6>
 80172a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80172a8:	d1ba      	bne.n	8017220 <__swsetup_r+0x30>
 80172aa:	bd70      	pop	{r4, r5, r6, pc}
 80172ac:	0781      	lsls	r1, r0, #30
 80172ae:	bf58      	it	pl
 80172b0:	6963      	ldrpl	r3, [r4, #20]
 80172b2:	60a3      	str	r3, [r4, #8]
 80172b4:	e7f4      	b.n	80172a0 <__swsetup_r+0xb0>
 80172b6:	2000      	movs	r0, #0
 80172b8:	e7f7      	b.n	80172aa <__swsetup_r+0xba>
 80172ba:	bf00      	nop
 80172bc:	20000180 	.word	0x20000180
 80172c0:	0801821c 	.word	0x0801821c
 80172c4:	0801823c 	.word	0x0801823c
 80172c8:	080181fc 	.word	0x080181fc

080172cc <__sflush_r>:
 80172cc:	898a      	ldrh	r2, [r1, #12]
 80172ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172d2:	4605      	mov	r5, r0
 80172d4:	0710      	lsls	r0, r2, #28
 80172d6:	460c      	mov	r4, r1
 80172d8:	d458      	bmi.n	801738c <__sflush_r+0xc0>
 80172da:	684b      	ldr	r3, [r1, #4]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	dc05      	bgt.n	80172ec <__sflush_r+0x20>
 80172e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	dc02      	bgt.n	80172ec <__sflush_r+0x20>
 80172e6:	2000      	movs	r0, #0
 80172e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172ee:	2e00      	cmp	r6, #0
 80172f0:	d0f9      	beq.n	80172e6 <__sflush_r+0x1a>
 80172f2:	2300      	movs	r3, #0
 80172f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80172f8:	682f      	ldr	r7, [r5, #0]
 80172fa:	602b      	str	r3, [r5, #0]
 80172fc:	d032      	beq.n	8017364 <__sflush_r+0x98>
 80172fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017300:	89a3      	ldrh	r3, [r4, #12]
 8017302:	075a      	lsls	r2, r3, #29
 8017304:	d505      	bpl.n	8017312 <__sflush_r+0x46>
 8017306:	6863      	ldr	r3, [r4, #4]
 8017308:	1ac0      	subs	r0, r0, r3
 801730a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801730c:	b10b      	cbz	r3, 8017312 <__sflush_r+0x46>
 801730e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017310:	1ac0      	subs	r0, r0, r3
 8017312:	2300      	movs	r3, #0
 8017314:	4602      	mov	r2, r0
 8017316:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017318:	6a21      	ldr	r1, [r4, #32]
 801731a:	4628      	mov	r0, r5
 801731c:	47b0      	blx	r6
 801731e:	1c43      	adds	r3, r0, #1
 8017320:	89a3      	ldrh	r3, [r4, #12]
 8017322:	d106      	bne.n	8017332 <__sflush_r+0x66>
 8017324:	6829      	ldr	r1, [r5, #0]
 8017326:	291d      	cmp	r1, #29
 8017328:	d82c      	bhi.n	8017384 <__sflush_r+0xb8>
 801732a:	4a2a      	ldr	r2, [pc, #168]	; (80173d4 <__sflush_r+0x108>)
 801732c:	40ca      	lsrs	r2, r1
 801732e:	07d6      	lsls	r6, r2, #31
 8017330:	d528      	bpl.n	8017384 <__sflush_r+0xb8>
 8017332:	2200      	movs	r2, #0
 8017334:	6062      	str	r2, [r4, #4]
 8017336:	04d9      	lsls	r1, r3, #19
 8017338:	6922      	ldr	r2, [r4, #16]
 801733a:	6022      	str	r2, [r4, #0]
 801733c:	d504      	bpl.n	8017348 <__sflush_r+0x7c>
 801733e:	1c42      	adds	r2, r0, #1
 8017340:	d101      	bne.n	8017346 <__sflush_r+0x7a>
 8017342:	682b      	ldr	r3, [r5, #0]
 8017344:	b903      	cbnz	r3, 8017348 <__sflush_r+0x7c>
 8017346:	6560      	str	r0, [r4, #84]	; 0x54
 8017348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801734a:	602f      	str	r7, [r5, #0]
 801734c:	2900      	cmp	r1, #0
 801734e:	d0ca      	beq.n	80172e6 <__sflush_r+0x1a>
 8017350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017354:	4299      	cmp	r1, r3
 8017356:	d002      	beq.n	801735e <__sflush_r+0x92>
 8017358:	4628      	mov	r0, r5
 801735a:	f000 f9d7 	bl	801770c <_free_r>
 801735e:	2000      	movs	r0, #0
 8017360:	6360      	str	r0, [r4, #52]	; 0x34
 8017362:	e7c1      	b.n	80172e8 <__sflush_r+0x1c>
 8017364:	6a21      	ldr	r1, [r4, #32]
 8017366:	2301      	movs	r3, #1
 8017368:	4628      	mov	r0, r5
 801736a:	47b0      	blx	r6
 801736c:	1c41      	adds	r1, r0, #1
 801736e:	d1c7      	bne.n	8017300 <__sflush_r+0x34>
 8017370:	682b      	ldr	r3, [r5, #0]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d0c4      	beq.n	8017300 <__sflush_r+0x34>
 8017376:	2b1d      	cmp	r3, #29
 8017378:	d001      	beq.n	801737e <__sflush_r+0xb2>
 801737a:	2b16      	cmp	r3, #22
 801737c:	d101      	bne.n	8017382 <__sflush_r+0xb6>
 801737e:	602f      	str	r7, [r5, #0]
 8017380:	e7b1      	b.n	80172e6 <__sflush_r+0x1a>
 8017382:	89a3      	ldrh	r3, [r4, #12]
 8017384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017388:	81a3      	strh	r3, [r4, #12]
 801738a:	e7ad      	b.n	80172e8 <__sflush_r+0x1c>
 801738c:	690f      	ldr	r7, [r1, #16]
 801738e:	2f00      	cmp	r7, #0
 8017390:	d0a9      	beq.n	80172e6 <__sflush_r+0x1a>
 8017392:	0793      	lsls	r3, r2, #30
 8017394:	680e      	ldr	r6, [r1, #0]
 8017396:	bf08      	it	eq
 8017398:	694b      	ldreq	r3, [r1, #20]
 801739a:	600f      	str	r7, [r1, #0]
 801739c:	bf18      	it	ne
 801739e:	2300      	movne	r3, #0
 80173a0:	eba6 0807 	sub.w	r8, r6, r7
 80173a4:	608b      	str	r3, [r1, #8]
 80173a6:	f1b8 0f00 	cmp.w	r8, #0
 80173aa:	dd9c      	ble.n	80172e6 <__sflush_r+0x1a>
 80173ac:	6a21      	ldr	r1, [r4, #32]
 80173ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80173b0:	4643      	mov	r3, r8
 80173b2:	463a      	mov	r2, r7
 80173b4:	4628      	mov	r0, r5
 80173b6:	47b0      	blx	r6
 80173b8:	2800      	cmp	r0, #0
 80173ba:	dc06      	bgt.n	80173ca <__sflush_r+0xfe>
 80173bc:	89a3      	ldrh	r3, [r4, #12]
 80173be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173c2:	81a3      	strh	r3, [r4, #12]
 80173c4:	f04f 30ff 	mov.w	r0, #4294967295
 80173c8:	e78e      	b.n	80172e8 <__sflush_r+0x1c>
 80173ca:	4407      	add	r7, r0
 80173cc:	eba8 0800 	sub.w	r8, r8, r0
 80173d0:	e7e9      	b.n	80173a6 <__sflush_r+0xda>
 80173d2:	bf00      	nop
 80173d4:	20400001 	.word	0x20400001

080173d8 <_fflush_r>:
 80173d8:	b538      	push	{r3, r4, r5, lr}
 80173da:	690b      	ldr	r3, [r1, #16]
 80173dc:	4605      	mov	r5, r0
 80173de:	460c      	mov	r4, r1
 80173e0:	b913      	cbnz	r3, 80173e8 <_fflush_r+0x10>
 80173e2:	2500      	movs	r5, #0
 80173e4:	4628      	mov	r0, r5
 80173e6:	bd38      	pop	{r3, r4, r5, pc}
 80173e8:	b118      	cbz	r0, 80173f2 <_fflush_r+0x1a>
 80173ea:	6983      	ldr	r3, [r0, #24]
 80173ec:	b90b      	cbnz	r3, 80173f2 <_fflush_r+0x1a>
 80173ee:	f000 f887 	bl	8017500 <__sinit>
 80173f2:	4b14      	ldr	r3, [pc, #80]	; (8017444 <_fflush_r+0x6c>)
 80173f4:	429c      	cmp	r4, r3
 80173f6:	d11b      	bne.n	8017430 <_fflush_r+0x58>
 80173f8:	686c      	ldr	r4, [r5, #4]
 80173fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d0ef      	beq.n	80173e2 <_fflush_r+0xa>
 8017402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017404:	07d0      	lsls	r0, r2, #31
 8017406:	d404      	bmi.n	8017412 <_fflush_r+0x3a>
 8017408:	0599      	lsls	r1, r3, #22
 801740a:	d402      	bmi.n	8017412 <_fflush_r+0x3a>
 801740c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801740e:	f000 f915 	bl	801763c <__retarget_lock_acquire_recursive>
 8017412:	4628      	mov	r0, r5
 8017414:	4621      	mov	r1, r4
 8017416:	f7ff ff59 	bl	80172cc <__sflush_r>
 801741a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801741c:	07da      	lsls	r2, r3, #31
 801741e:	4605      	mov	r5, r0
 8017420:	d4e0      	bmi.n	80173e4 <_fflush_r+0xc>
 8017422:	89a3      	ldrh	r3, [r4, #12]
 8017424:	059b      	lsls	r3, r3, #22
 8017426:	d4dd      	bmi.n	80173e4 <_fflush_r+0xc>
 8017428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801742a:	f000 f908 	bl	801763e <__retarget_lock_release_recursive>
 801742e:	e7d9      	b.n	80173e4 <_fflush_r+0xc>
 8017430:	4b05      	ldr	r3, [pc, #20]	; (8017448 <_fflush_r+0x70>)
 8017432:	429c      	cmp	r4, r3
 8017434:	d101      	bne.n	801743a <_fflush_r+0x62>
 8017436:	68ac      	ldr	r4, [r5, #8]
 8017438:	e7df      	b.n	80173fa <_fflush_r+0x22>
 801743a:	4b04      	ldr	r3, [pc, #16]	; (801744c <_fflush_r+0x74>)
 801743c:	429c      	cmp	r4, r3
 801743e:	bf08      	it	eq
 8017440:	68ec      	ldreq	r4, [r5, #12]
 8017442:	e7da      	b.n	80173fa <_fflush_r+0x22>
 8017444:	0801821c 	.word	0x0801821c
 8017448:	0801823c 	.word	0x0801823c
 801744c:	080181fc 	.word	0x080181fc

08017450 <std>:
 8017450:	2300      	movs	r3, #0
 8017452:	b510      	push	{r4, lr}
 8017454:	4604      	mov	r4, r0
 8017456:	e9c0 3300 	strd	r3, r3, [r0]
 801745a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801745e:	6083      	str	r3, [r0, #8]
 8017460:	8181      	strh	r1, [r0, #12]
 8017462:	6643      	str	r3, [r0, #100]	; 0x64
 8017464:	81c2      	strh	r2, [r0, #14]
 8017466:	6183      	str	r3, [r0, #24]
 8017468:	4619      	mov	r1, r3
 801746a:	2208      	movs	r2, #8
 801746c:	305c      	adds	r0, #92	; 0x5c
 801746e:	f7ff fdef 	bl	8017050 <memset>
 8017472:	4b05      	ldr	r3, [pc, #20]	; (8017488 <std+0x38>)
 8017474:	6263      	str	r3, [r4, #36]	; 0x24
 8017476:	4b05      	ldr	r3, [pc, #20]	; (801748c <std+0x3c>)
 8017478:	62a3      	str	r3, [r4, #40]	; 0x28
 801747a:	4b05      	ldr	r3, [pc, #20]	; (8017490 <std+0x40>)
 801747c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801747e:	4b05      	ldr	r3, [pc, #20]	; (8017494 <std+0x44>)
 8017480:	6224      	str	r4, [r4, #32]
 8017482:	6323      	str	r3, [r4, #48]	; 0x30
 8017484:	bd10      	pop	{r4, pc}
 8017486:	bf00      	nop
 8017488:	080178ed 	.word	0x080178ed
 801748c:	0801790f 	.word	0x0801790f
 8017490:	08017947 	.word	0x08017947
 8017494:	0801796b 	.word	0x0801796b

08017498 <_cleanup_r>:
 8017498:	4901      	ldr	r1, [pc, #4]	; (80174a0 <_cleanup_r+0x8>)
 801749a:	f000 b8af 	b.w	80175fc <_fwalk_reent>
 801749e:	bf00      	nop
 80174a0:	080173d9 	.word	0x080173d9

080174a4 <__sfmoreglue>:
 80174a4:	b570      	push	{r4, r5, r6, lr}
 80174a6:	2268      	movs	r2, #104	; 0x68
 80174a8:	1e4d      	subs	r5, r1, #1
 80174aa:	4355      	muls	r5, r2
 80174ac:	460e      	mov	r6, r1
 80174ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80174b2:	f000 f997 	bl	80177e4 <_malloc_r>
 80174b6:	4604      	mov	r4, r0
 80174b8:	b140      	cbz	r0, 80174cc <__sfmoreglue+0x28>
 80174ba:	2100      	movs	r1, #0
 80174bc:	e9c0 1600 	strd	r1, r6, [r0]
 80174c0:	300c      	adds	r0, #12
 80174c2:	60a0      	str	r0, [r4, #8]
 80174c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80174c8:	f7ff fdc2 	bl	8017050 <memset>
 80174cc:	4620      	mov	r0, r4
 80174ce:	bd70      	pop	{r4, r5, r6, pc}

080174d0 <__sfp_lock_acquire>:
 80174d0:	4801      	ldr	r0, [pc, #4]	; (80174d8 <__sfp_lock_acquire+0x8>)
 80174d2:	f000 b8b3 	b.w	801763c <__retarget_lock_acquire_recursive>
 80174d6:	bf00      	nop
 80174d8:	20005335 	.word	0x20005335

080174dc <__sfp_lock_release>:
 80174dc:	4801      	ldr	r0, [pc, #4]	; (80174e4 <__sfp_lock_release+0x8>)
 80174de:	f000 b8ae 	b.w	801763e <__retarget_lock_release_recursive>
 80174e2:	bf00      	nop
 80174e4:	20005335 	.word	0x20005335

080174e8 <__sinit_lock_acquire>:
 80174e8:	4801      	ldr	r0, [pc, #4]	; (80174f0 <__sinit_lock_acquire+0x8>)
 80174ea:	f000 b8a7 	b.w	801763c <__retarget_lock_acquire_recursive>
 80174ee:	bf00      	nop
 80174f0:	20005336 	.word	0x20005336

080174f4 <__sinit_lock_release>:
 80174f4:	4801      	ldr	r0, [pc, #4]	; (80174fc <__sinit_lock_release+0x8>)
 80174f6:	f000 b8a2 	b.w	801763e <__retarget_lock_release_recursive>
 80174fa:	bf00      	nop
 80174fc:	20005336 	.word	0x20005336

08017500 <__sinit>:
 8017500:	b510      	push	{r4, lr}
 8017502:	4604      	mov	r4, r0
 8017504:	f7ff fff0 	bl	80174e8 <__sinit_lock_acquire>
 8017508:	69a3      	ldr	r3, [r4, #24]
 801750a:	b11b      	cbz	r3, 8017514 <__sinit+0x14>
 801750c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017510:	f7ff bff0 	b.w	80174f4 <__sinit_lock_release>
 8017514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017518:	6523      	str	r3, [r4, #80]	; 0x50
 801751a:	4b13      	ldr	r3, [pc, #76]	; (8017568 <__sinit+0x68>)
 801751c:	4a13      	ldr	r2, [pc, #76]	; (801756c <__sinit+0x6c>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	62a2      	str	r2, [r4, #40]	; 0x28
 8017522:	42a3      	cmp	r3, r4
 8017524:	bf04      	itt	eq
 8017526:	2301      	moveq	r3, #1
 8017528:	61a3      	streq	r3, [r4, #24]
 801752a:	4620      	mov	r0, r4
 801752c:	f000 f820 	bl	8017570 <__sfp>
 8017530:	6060      	str	r0, [r4, #4]
 8017532:	4620      	mov	r0, r4
 8017534:	f000 f81c 	bl	8017570 <__sfp>
 8017538:	60a0      	str	r0, [r4, #8]
 801753a:	4620      	mov	r0, r4
 801753c:	f000 f818 	bl	8017570 <__sfp>
 8017540:	2200      	movs	r2, #0
 8017542:	60e0      	str	r0, [r4, #12]
 8017544:	2104      	movs	r1, #4
 8017546:	6860      	ldr	r0, [r4, #4]
 8017548:	f7ff ff82 	bl	8017450 <std>
 801754c:	68a0      	ldr	r0, [r4, #8]
 801754e:	2201      	movs	r2, #1
 8017550:	2109      	movs	r1, #9
 8017552:	f7ff ff7d 	bl	8017450 <std>
 8017556:	68e0      	ldr	r0, [r4, #12]
 8017558:	2202      	movs	r2, #2
 801755a:	2112      	movs	r1, #18
 801755c:	f7ff ff78 	bl	8017450 <std>
 8017560:	2301      	movs	r3, #1
 8017562:	61a3      	str	r3, [r4, #24]
 8017564:	e7d2      	b.n	801750c <__sinit+0xc>
 8017566:	bf00      	nop
 8017568:	080181f8 	.word	0x080181f8
 801756c:	08017499 	.word	0x08017499

08017570 <__sfp>:
 8017570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017572:	4607      	mov	r7, r0
 8017574:	f7ff ffac 	bl	80174d0 <__sfp_lock_acquire>
 8017578:	4b1e      	ldr	r3, [pc, #120]	; (80175f4 <__sfp+0x84>)
 801757a:	681e      	ldr	r6, [r3, #0]
 801757c:	69b3      	ldr	r3, [r6, #24]
 801757e:	b913      	cbnz	r3, 8017586 <__sfp+0x16>
 8017580:	4630      	mov	r0, r6
 8017582:	f7ff ffbd 	bl	8017500 <__sinit>
 8017586:	3648      	adds	r6, #72	; 0x48
 8017588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801758c:	3b01      	subs	r3, #1
 801758e:	d503      	bpl.n	8017598 <__sfp+0x28>
 8017590:	6833      	ldr	r3, [r6, #0]
 8017592:	b30b      	cbz	r3, 80175d8 <__sfp+0x68>
 8017594:	6836      	ldr	r6, [r6, #0]
 8017596:	e7f7      	b.n	8017588 <__sfp+0x18>
 8017598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801759c:	b9d5      	cbnz	r5, 80175d4 <__sfp+0x64>
 801759e:	4b16      	ldr	r3, [pc, #88]	; (80175f8 <__sfp+0x88>)
 80175a0:	60e3      	str	r3, [r4, #12]
 80175a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80175a6:	6665      	str	r5, [r4, #100]	; 0x64
 80175a8:	f000 f847 	bl	801763a <__retarget_lock_init_recursive>
 80175ac:	f7ff ff96 	bl	80174dc <__sfp_lock_release>
 80175b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80175b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80175b8:	6025      	str	r5, [r4, #0]
 80175ba:	61a5      	str	r5, [r4, #24]
 80175bc:	2208      	movs	r2, #8
 80175be:	4629      	mov	r1, r5
 80175c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80175c4:	f7ff fd44 	bl	8017050 <memset>
 80175c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80175cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80175d0:	4620      	mov	r0, r4
 80175d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175d4:	3468      	adds	r4, #104	; 0x68
 80175d6:	e7d9      	b.n	801758c <__sfp+0x1c>
 80175d8:	2104      	movs	r1, #4
 80175da:	4638      	mov	r0, r7
 80175dc:	f7ff ff62 	bl	80174a4 <__sfmoreglue>
 80175e0:	4604      	mov	r4, r0
 80175e2:	6030      	str	r0, [r6, #0]
 80175e4:	2800      	cmp	r0, #0
 80175e6:	d1d5      	bne.n	8017594 <__sfp+0x24>
 80175e8:	f7ff ff78 	bl	80174dc <__sfp_lock_release>
 80175ec:	230c      	movs	r3, #12
 80175ee:	603b      	str	r3, [r7, #0]
 80175f0:	e7ee      	b.n	80175d0 <__sfp+0x60>
 80175f2:	bf00      	nop
 80175f4:	080181f8 	.word	0x080181f8
 80175f8:	ffff0001 	.word	0xffff0001

080175fc <_fwalk_reent>:
 80175fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017600:	4606      	mov	r6, r0
 8017602:	4688      	mov	r8, r1
 8017604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017608:	2700      	movs	r7, #0
 801760a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801760e:	f1b9 0901 	subs.w	r9, r9, #1
 8017612:	d505      	bpl.n	8017620 <_fwalk_reent+0x24>
 8017614:	6824      	ldr	r4, [r4, #0]
 8017616:	2c00      	cmp	r4, #0
 8017618:	d1f7      	bne.n	801760a <_fwalk_reent+0xe>
 801761a:	4638      	mov	r0, r7
 801761c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017620:	89ab      	ldrh	r3, [r5, #12]
 8017622:	2b01      	cmp	r3, #1
 8017624:	d907      	bls.n	8017636 <_fwalk_reent+0x3a>
 8017626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801762a:	3301      	adds	r3, #1
 801762c:	d003      	beq.n	8017636 <_fwalk_reent+0x3a>
 801762e:	4629      	mov	r1, r5
 8017630:	4630      	mov	r0, r6
 8017632:	47c0      	blx	r8
 8017634:	4307      	orrs	r7, r0
 8017636:	3568      	adds	r5, #104	; 0x68
 8017638:	e7e9      	b.n	801760e <_fwalk_reent+0x12>

0801763a <__retarget_lock_init_recursive>:
 801763a:	4770      	bx	lr

0801763c <__retarget_lock_acquire_recursive>:
 801763c:	4770      	bx	lr

0801763e <__retarget_lock_release_recursive>:
 801763e:	4770      	bx	lr

08017640 <__swhatbuf_r>:
 8017640:	b570      	push	{r4, r5, r6, lr}
 8017642:	460e      	mov	r6, r1
 8017644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017648:	2900      	cmp	r1, #0
 801764a:	b096      	sub	sp, #88	; 0x58
 801764c:	4614      	mov	r4, r2
 801764e:	461d      	mov	r5, r3
 8017650:	da08      	bge.n	8017664 <__swhatbuf_r+0x24>
 8017652:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017656:	2200      	movs	r2, #0
 8017658:	602a      	str	r2, [r5, #0]
 801765a:	061a      	lsls	r2, r3, #24
 801765c:	d410      	bmi.n	8017680 <__swhatbuf_r+0x40>
 801765e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017662:	e00e      	b.n	8017682 <__swhatbuf_r+0x42>
 8017664:	466a      	mov	r2, sp
 8017666:	f000 f9a7 	bl	80179b8 <_fstat_r>
 801766a:	2800      	cmp	r0, #0
 801766c:	dbf1      	blt.n	8017652 <__swhatbuf_r+0x12>
 801766e:	9a01      	ldr	r2, [sp, #4]
 8017670:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017674:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017678:	425a      	negs	r2, r3
 801767a:	415a      	adcs	r2, r3
 801767c:	602a      	str	r2, [r5, #0]
 801767e:	e7ee      	b.n	801765e <__swhatbuf_r+0x1e>
 8017680:	2340      	movs	r3, #64	; 0x40
 8017682:	2000      	movs	r0, #0
 8017684:	6023      	str	r3, [r4, #0]
 8017686:	b016      	add	sp, #88	; 0x58
 8017688:	bd70      	pop	{r4, r5, r6, pc}
	...

0801768c <__smakebuf_r>:
 801768c:	898b      	ldrh	r3, [r1, #12]
 801768e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017690:	079d      	lsls	r5, r3, #30
 8017692:	4606      	mov	r6, r0
 8017694:	460c      	mov	r4, r1
 8017696:	d507      	bpl.n	80176a8 <__smakebuf_r+0x1c>
 8017698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801769c:	6023      	str	r3, [r4, #0]
 801769e:	6123      	str	r3, [r4, #16]
 80176a0:	2301      	movs	r3, #1
 80176a2:	6163      	str	r3, [r4, #20]
 80176a4:	b002      	add	sp, #8
 80176a6:	bd70      	pop	{r4, r5, r6, pc}
 80176a8:	ab01      	add	r3, sp, #4
 80176aa:	466a      	mov	r2, sp
 80176ac:	f7ff ffc8 	bl	8017640 <__swhatbuf_r>
 80176b0:	9900      	ldr	r1, [sp, #0]
 80176b2:	4605      	mov	r5, r0
 80176b4:	4630      	mov	r0, r6
 80176b6:	f000 f895 	bl	80177e4 <_malloc_r>
 80176ba:	b948      	cbnz	r0, 80176d0 <__smakebuf_r+0x44>
 80176bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176c0:	059a      	lsls	r2, r3, #22
 80176c2:	d4ef      	bmi.n	80176a4 <__smakebuf_r+0x18>
 80176c4:	f023 0303 	bic.w	r3, r3, #3
 80176c8:	f043 0302 	orr.w	r3, r3, #2
 80176cc:	81a3      	strh	r3, [r4, #12]
 80176ce:	e7e3      	b.n	8017698 <__smakebuf_r+0xc>
 80176d0:	4b0d      	ldr	r3, [pc, #52]	; (8017708 <__smakebuf_r+0x7c>)
 80176d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80176d4:	89a3      	ldrh	r3, [r4, #12]
 80176d6:	6020      	str	r0, [r4, #0]
 80176d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80176dc:	81a3      	strh	r3, [r4, #12]
 80176de:	9b00      	ldr	r3, [sp, #0]
 80176e0:	6163      	str	r3, [r4, #20]
 80176e2:	9b01      	ldr	r3, [sp, #4]
 80176e4:	6120      	str	r0, [r4, #16]
 80176e6:	b15b      	cbz	r3, 8017700 <__smakebuf_r+0x74>
 80176e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80176ec:	4630      	mov	r0, r6
 80176ee:	f000 f975 	bl	80179dc <_isatty_r>
 80176f2:	b128      	cbz	r0, 8017700 <__smakebuf_r+0x74>
 80176f4:	89a3      	ldrh	r3, [r4, #12]
 80176f6:	f023 0303 	bic.w	r3, r3, #3
 80176fa:	f043 0301 	orr.w	r3, r3, #1
 80176fe:	81a3      	strh	r3, [r4, #12]
 8017700:	89a0      	ldrh	r0, [r4, #12]
 8017702:	4305      	orrs	r5, r0
 8017704:	81a5      	strh	r5, [r4, #12]
 8017706:	e7cd      	b.n	80176a4 <__smakebuf_r+0x18>
 8017708:	08017499 	.word	0x08017499

0801770c <_free_r>:
 801770c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801770e:	2900      	cmp	r1, #0
 8017710:	d044      	beq.n	801779c <_free_r+0x90>
 8017712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017716:	9001      	str	r0, [sp, #4]
 8017718:	2b00      	cmp	r3, #0
 801771a:	f1a1 0404 	sub.w	r4, r1, #4
 801771e:	bfb8      	it	lt
 8017720:	18e4      	addlt	r4, r4, r3
 8017722:	f000 f97d 	bl	8017a20 <__malloc_lock>
 8017726:	4a1e      	ldr	r2, [pc, #120]	; (80177a0 <_free_r+0x94>)
 8017728:	9801      	ldr	r0, [sp, #4]
 801772a:	6813      	ldr	r3, [r2, #0]
 801772c:	b933      	cbnz	r3, 801773c <_free_r+0x30>
 801772e:	6063      	str	r3, [r4, #4]
 8017730:	6014      	str	r4, [r2, #0]
 8017732:	b003      	add	sp, #12
 8017734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017738:	f000 b978 	b.w	8017a2c <__malloc_unlock>
 801773c:	42a3      	cmp	r3, r4
 801773e:	d908      	bls.n	8017752 <_free_r+0x46>
 8017740:	6825      	ldr	r5, [r4, #0]
 8017742:	1961      	adds	r1, r4, r5
 8017744:	428b      	cmp	r3, r1
 8017746:	bf01      	itttt	eq
 8017748:	6819      	ldreq	r1, [r3, #0]
 801774a:	685b      	ldreq	r3, [r3, #4]
 801774c:	1949      	addeq	r1, r1, r5
 801774e:	6021      	streq	r1, [r4, #0]
 8017750:	e7ed      	b.n	801772e <_free_r+0x22>
 8017752:	461a      	mov	r2, r3
 8017754:	685b      	ldr	r3, [r3, #4]
 8017756:	b10b      	cbz	r3, 801775c <_free_r+0x50>
 8017758:	42a3      	cmp	r3, r4
 801775a:	d9fa      	bls.n	8017752 <_free_r+0x46>
 801775c:	6811      	ldr	r1, [r2, #0]
 801775e:	1855      	adds	r5, r2, r1
 8017760:	42a5      	cmp	r5, r4
 8017762:	d10b      	bne.n	801777c <_free_r+0x70>
 8017764:	6824      	ldr	r4, [r4, #0]
 8017766:	4421      	add	r1, r4
 8017768:	1854      	adds	r4, r2, r1
 801776a:	42a3      	cmp	r3, r4
 801776c:	6011      	str	r1, [r2, #0]
 801776e:	d1e0      	bne.n	8017732 <_free_r+0x26>
 8017770:	681c      	ldr	r4, [r3, #0]
 8017772:	685b      	ldr	r3, [r3, #4]
 8017774:	6053      	str	r3, [r2, #4]
 8017776:	4421      	add	r1, r4
 8017778:	6011      	str	r1, [r2, #0]
 801777a:	e7da      	b.n	8017732 <_free_r+0x26>
 801777c:	d902      	bls.n	8017784 <_free_r+0x78>
 801777e:	230c      	movs	r3, #12
 8017780:	6003      	str	r3, [r0, #0]
 8017782:	e7d6      	b.n	8017732 <_free_r+0x26>
 8017784:	6825      	ldr	r5, [r4, #0]
 8017786:	1961      	adds	r1, r4, r5
 8017788:	428b      	cmp	r3, r1
 801778a:	bf04      	itt	eq
 801778c:	6819      	ldreq	r1, [r3, #0]
 801778e:	685b      	ldreq	r3, [r3, #4]
 8017790:	6063      	str	r3, [r4, #4]
 8017792:	bf04      	itt	eq
 8017794:	1949      	addeq	r1, r1, r5
 8017796:	6021      	streq	r1, [r4, #0]
 8017798:	6054      	str	r4, [r2, #4]
 801779a:	e7ca      	b.n	8017732 <_free_r+0x26>
 801779c:	b003      	add	sp, #12
 801779e:	bd30      	pop	{r4, r5, pc}
 80177a0:	20005338 	.word	0x20005338

080177a4 <sbrk_aligned>:
 80177a4:	b570      	push	{r4, r5, r6, lr}
 80177a6:	4e0e      	ldr	r6, [pc, #56]	; (80177e0 <sbrk_aligned+0x3c>)
 80177a8:	460c      	mov	r4, r1
 80177aa:	6831      	ldr	r1, [r6, #0]
 80177ac:	4605      	mov	r5, r0
 80177ae:	b911      	cbnz	r1, 80177b6 <sbrk_aligned+0x12>
 80177b0:	f000 f88c 	bl	80178cc <_sbrk_r>
 80177b4:	6030      	str	r0, [r6, #0]
 80177b6:	4621      	mov	r1, r4
 80177b8:	4628      	mov	r0, r5
 80177ba:	f000 f887 	bl	80178cc <_sbrk_r>
 80177be:	1c43      	adds	r3, r0, #1
 80177c0:	d00a      	beq.n	80177d8 <sbrk_aligned+0x34>
 80177c2:	1cc4      	adds	r4, r0, #3
 80177c4:	f024 0403 	bic.w	r4, r4, #3
 80177c8:	42a0      	cmp	r0, r4
 80177ca:	d007      	beq.n	80177dc <sbrk_aligned+0x38>
 80177cc:	1a21      	subs	r1, r4, r0
 80177ce:	4628      	mov	r0, r5
 80177d0:	f000 f87c 	bl	80178cc <_sbrk_r>
 80177d4:	3001      	adds	r0, #1
 80177d6:	d101      	bne.n	80177dc <sbrk_aligned+0x38>
 80177d8:	f04f 34ff 	mov.w	r4, #4294967295
 80177dc:	4620      	mov	r0, r4
 80177de:	bd70      	pop	{r4, r5, r6, pc}
 80177e0:	2000533c 	.word	0x2000533c

080177e4 <_malloc_r>:
 80177e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177e8:	1ccd      	adds	r5, r1, #3
 80177ea:	f025 0503 	bic.w	r5, r5, #3
 80177ee:	3508      	adds	r5, #8
 80177f0:	2d0c      	cmp	r5, #12
 80177f2:	bf38      	it	cc
 80177f4:	250c      	movcc	r5, #12
 80177f6:	2d00      	cmp	r5, #0
 80177f8:	4607      	mov	r7, r0
 80177fa:	db01      	blt.n	8017800 <_malloc_r+0x1c>
 80177fc:	42a9      	cmp	r1, r5
 80177fe:	d905      	bls.n	801780c <_malloc_r+0x28>
 8017800:	230c      	movs	r3, #12
 8017802:	603b      	str	r3, [r7, #0]
 8017804:	2600      	movs	r6, #0
 8017806:	4630      	mov	r0, r6
 8017808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801780c:	4e2e      	ldr	r6, [pc, #184]	; (80178c8 <_malloc_r+0xe4>)
 801780e:	f000 f907 	bl	8017a20 <__malloc_lock>
 8017812:	6833      	ldr	r3, [r6, #0]
 8017814:	461c      	mov	r4, r3
 8017816:	bb34      	cbnz	r4, 8017866 <_malloc_r+0x82>
 8017818:	4629      	mov	r1, r5
 801781a:	4638      	mov	r0, r7
 801781c:	f7ff ffc2 	bl	80177a4 <sbrk_aligned>
 8017820:	1c43      	adds	r3, r0, #1
 8017822:	4604      	mov	r4, r0
 8017824:	d14d      	bne.n	80178c2 <_malloc_r+0xde>
 8017826:	6834      	ldr	r4, [r6, #0]
 8017828:	4626      	mov	r6, r4
 801782a:	2e00      	cmp	r6, #0
 801782c:	d140      	bne.n	80178b0 <_malloc_r+0xcc>
 801782e:	6823      	ldr	r3, [r4, #0]
 8017830:	4631      	mov	r1, r6
 8017832:	4638      	mov	r0, r7
 8017834:	eb04 0803 	add.w	r8, r4, r3
 8017838:	f000 f848 	bl	80178cc <_sbrk_r>
 801783c:	4580      	cmp	r8, r0
 801783e:	d13a      	bne.n	80178b6 <_malloc_r+0xd2>
 8017840:	6821      	ldr	r1, [r4, #0]
 8017842:	3503      	adds	r5, #3
 8017844:	1a6d      	subs	r5, r5, r1
 8017846:	f025 0503 	bic.w	r5, r5, #3
 801784a:	3508      	adds	r5, #8
 801784c:	2d0c      	cmp	r5, #12
 801784e:	bf38      	it	cc
 8017850:	250c      	movcc	r5, #12
 8017852:	4629      	mov	r1, r5
 8017854:	4638      	mov	r0, r7
 8017856:	f7ff ffa5 	bl	80177a4 <sbrk_aligned>
 801785a:	3001      	adds	r0, #1
 801785c:	d02b      	beq.n	80178b6 <_malloc_r+0xd2>
 801785e:	6823      	ldr	r3, [r4, #0]
 8017860:	442b      	add	r3, r5
 8017862:	6023      	str	r3, [r4, #0]
 8017864:	e00e      	b.n	8017884 <_malloc_r+0xa0>
 8017866:	6822      	ldr	r2, [r4, #0]
 8017868:	1b52      	subs	r2, r2, r5
 801786a:	d41e      	bmi.n	80178aa <_malloc_r+0xc6>
 801786c:	2a0b      	cmp	r2, #11
 801786e:	d916      	bls.n	801789e <_malloc_r+0xba>
 8017870:	1961      	adds	r1, r4, r5
 8017872:	42a3      	cmp	r3, r4
 8017874:	6025      	str	r5, [r4, #0]
 8017876:	bf18      	it	ne
 8017878:	6059      	strne	r1, [r3, #4]
 801787a:	6863      	ldr	r3, [r4, #4]
 801787c:	bf08      	it	eq
 801787e:	6031      	streq	r1, [r6, #0]
 8017880:	5162      	str	r2, [r4, r5]
 8017882:	604b      	str	r3, [r1, #4]
 8017884:	4638      	mov	r0, r7
 8017886:	f104 060b 	add.w	r6, r4, #11
 801788a:	f000 f8cf 	bl	8017a2c <__malloc_unlock>
 801788e:	f026 0607 	bic.w	r6, r6, #7
 8017892:	1d23      	adds	r3, r4, #4
 8017894:	1af2      	subs	r2, r6, r3
 8017896:	d0b6      	beq.n	8017806 <_malloc_r+0x22>
 8017898:	1b9b      	subs	r3, r3, r6
 801789a:	50a3      	str	r3, [r4, r2]
 801789c:	e7b3      	b.n	8017806 <_malloc_r+0x22>
 801789e:	6862      	ldr	r2, [r4, #4]
 80178a0:	42a3      	cmp	r3, r4
 80178a2:	bf0c      	ite	eq
 80178a4:	6032      	streq	r2, [r6, #0]
 80178a6:	605a      	strne	r2, [r3, #4]
 80178a8:	e7ec      	b.n	8017884 <_malloc_r+0xa0>
 80178aa:	4623      	mov	r3, r4
 80178ac:	6864      	ldr	r4, [r4, #4]
 80178ae:	e7b2      	b.n	8017816 <_malloc_r+0x32>
 80178b0:	4634      	mov	r4, r6
 80178b2:	6876      	ldr	r6, [r6, #4]
 80178b4:	e7b9      	b.n	801782a <_malloc_r+0x46>
 80178b6:	230c      	movs	r3, #12
 80178b8:	603b      	str	r3, [r7, #0]
 80178ba:	4638      	mov	r0, r7
 80178bc:	f000 f8b6 	bl	8017a2c <__malloc_unlock>
 80178c0:	e7a1      	b.n	8017806 <_malloc_r+0x22>
 80178c2:	6025      	str	r5, [r4, #0]
 80178c4:	e7de      	b.n	8017884 <_malloc_r+0xa0>
 80178c6:	bf00      	nop
 80178c8:	20005338 	.word	0x20005338

080178cc <_sbrk_r>:
 80178cc:	b538      	push	{r3, r4, r5, lr}
 80178ce:	4d06      	ldr	r5, [pc, #24]	; (80178e8 <_sbrk_r+0x1c>)
 80178d0:	2300      	movs	r3, #0
 80178d2:	4604      	mov	r4, r0
 80178d4:	4608      	mov	r0, r1
 80178d6:	602b      	str	r3, [r5, #0]
 80178d8:	f7ef f882 	bl	80069e0 <_sbrk>
 80178dc:	1c43      	adds	r3, r0, #1
 80178de:	d102      	bne.n	80178e6 <_sbrk_r+0x1a>
 80178e0:	682b      	ldr	r3, [r5, #0]
 80178e2:	b103      	cbz	r3, 80178e6 <_sbrk_r+0x1a>
 80178e4:	6023      	str	r3, [r4, #0]
 80178e6:	bd38      	pop	{r3, r4, r5, pc}
 80178e8:	20005340 	.word	0x20005340

080178ec <__sread>:
 80178ec:	b510      	push	{r4, lr}
 80178ee:	460c      	mov	r4, r1
 80178f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178f4:	f000 f8a0 	bl	8017a38 <_read_r>
 80178f8:	2800      	cmp	r0, #0
 80178fa:	bfab      	itete	ge
 80178fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80178fe:	89a3      	ldrhlt	r3, [r4, #12]
 8017900:	181b      	addge	r3, r3, r0
 8017902:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017906:	bfac      	ite	ge
 8017908:	6563      	strge	r3, [r4, #84]	; 0x54
 801790a:	81a3      	strhlt	r3, [r4, #12]
 801790c:	bd10      	pop	{r4, pc}

0801790e <__swrite>:
 801790e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017912:	461f      	mov	r7, r3
 8017914:	898b      	ldrh	r3, [r1, #12]
 8017916:	05db      	lsls	r3, r3, #23
 8017918:	4605      	mov	r5, r0
 801791a:	460c      	mov	r4, r1
 801791c:	4616      	mov	r6, r2
 801791e:	d505      	bpl.n	801792c <__swrite+0x1e>
 8017920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017924:	2302      	movs	r3, #2
 8017926:	2200      	movs	r2, #0
 8017928:	f000 f868 	bl	80179fc <_lseek_r>
 801792c:	89a3      	ldrh	r3, [r4, #12]
 801792e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017936:	81a3      	strh	r3, [r4, #12]
 8017938:	4632      	mov	r2, r6
 801793a:	463b      	mov	r3, r7
 801793c:	4628      	mov	r0, r5
 801793e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017942:	f000 b817 	b.w	8017974 <_write_r>

08017946 <__sseek>:
 8017946:	b510      	push	{r4, lr}
 8017948:	460c      	mov	r4, r1
 801794a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801794e:	f000 f855 	bl	80179fc <_lseek_r>
 8017952:	1c43      	adds	r3, r0, #1
 8017954:	89a3      	ldrh	r3, [r4, #12]
 8017956:	bf15      	itete	ne
 8017958:	6560      	strne	r0, [r4, #84]	; 0x54
 801795a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801795e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017962:	81a3      	strheq	r3, [r4, #12]
 8017964:	bf18      	it	ne
 8017966:	81a3      	strhne	r3, [r4, #12]
 8017968:	bd10      	pop	{r4, pc}

0801796a <__sclose>:
 801796a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801796e:	f000 b813 	b.w	8017998 <_close_r>
	...

08017974 <_write_r>:
 8017974:	b538      	push	{r3, r4, r5, lr}
 8017976:	4d07      	ldr	r5, [pc, #28]	; (8017994 <_write_r+0x20>)
 8017978:	4604      	mov	r4, r0
 801797a:	4608      	mov	r0, r1
 801797c:	4611      	mov	r1, r2
 801797e:	2200      	movs	r2, #0
 8017980:	602a      	str	r2, [r5, #0]
 8017982:	461a      	mov	r2, r3
 8017984:	f7eb f8ec 	bl	8002b60 <_write>
 8017988:	1c43      	adds	r3, r0, #1
 801798a:	d102      	bne.n	8017992 <_write_r+0x1e>
 801798c:	682b      	ldr	r3, [r5, #0]
 801798e:	b103      	cbz	r3, 8017992 <_write_r+0x1e>
 8017990:	6023      	str	r3, [r4, #0]
 8017992:	bd38      	pop	{r3, r4, r5, pc}
 8017994:	20005340 	.word	0x20005340

08017998 <_close_r>:
 8017998:	b538      	push	{r3, r4, r5, lr}
 801799a:	4d06      	ldr	r5, [pc, #24]	; (80179b4 <_close_r+0x1c>)
 801799c:	2300      	movs	r3, #0
 801799e:	4604      	mov	r4, r0
 80179a0:	4608      	mov	r0, r1
 80179a2:	602b      	str	r3, [r5, #0]
 80179a4:	f7ee ffe7 	bl	8006976 <_close>
 80179a8:	1c43      	adds	r3, r0, #1
 80179aa:	d102      	bne.n	80179b2 <_close_r+0x1a>
 80179ac:	682b      	ldr	r3, [r5, #0]
 80179ae:	b103      	cbz	r3, 80179b2 <_close_r+0x1a>
 80179b0:	6023      	str	r3, [r4, #0]
 80179b2:	bd38      	pop	{r3, r4, r5, pc}
 80179b4:	20005340 	.word	0x20005340

080179b8 <_fstat_r>:
 80179b8:	b538      	push	{r3, r4, r5, lr}
 80179ba:	4d07      	ldr	r5, [pc, #28]	; (80179d8 <_fstat_r+0x20>)
 80179bc:	2300      	movs	r3, #0
 80179be:	4604      	mov	r4, r0
 80179c0:	4608      	mov	r0, r1
 80179c2:	4611      	mov	r1, r2
 80179c4:	602b      	str	r3, [r5, #0]
 80179c6:	f7ee ffe2 	bl	800698e <_fstat>
 80179ca:	1c43      	adds	r3, r0, #1
 80179cc:	d102      	bne.n	80179d4 <_fstat_r+0x1c>
 80179ce:	682b      	ldr	r3, [r5, #0]
 80179d0:	b103      	cbz	r3, 80179d4 <_fstat_r+0x1c>
 80179d2:	6023      	str	r3, [r4, #0]
 80179d4:	bd38      	pop	{r3, r4, r5, pc}
 80179d6:	bf00      	nop
 80179d8:	20005340 	.word	0x20005340

080179dc <_isatty_r>:
 80179dc:	b538      	push	{r3, r4, r5, lr}
 80179de:	4d06      	ldr	r5, [pc, #24]	; (80179f8 <_isatty_r+0x1c>)
 80179e0:	2300      	movs	r3, #0
 80179e2:	4604      	mov	r4, r0
 80179e4:	4608      	mov	r0, r1
 80179e6:	602b      	str	r3, [r5, #0]
 80179e8:	f7ee ffe1 	bl	80069ae <_isatty>
 80179ec:	1c43      	adds	r3, r0, #1
 80179ee:	d102      	bne.n	80179f6 <_isatty_r+0x1a>
 80179f0:	682b      	ldr	r3, [r5, #0]
 80179f2:	b103      	cbz	r3, 80179f6 <_isatty_r+0x1a>
 80179f4:	6023      	str	r3, [r4, #0]
 80179f6:	bd38      	pop	{r3, r4, r5, pc}
 80179f8:	20005340 	.word	0x20005340

080179fc <_lseek_r>:
 80179fc:	b538      	push	{r3, r4, r5, lr}
 80179fe:	4d07      	ldr	r5, [pc, #28]	; (8017a1c <_lseek_r+0x20>)
 8017a00:	4604      	mov	r4, r0
 8017a02:	4608      	mov	r0, r1
 8017a04:	4611      	mov	r1, r2
 8017a06:	2200      	movs	r2, #0
 8017a08:	602a      	str	r2, [r5, #0]
 8017a0a:	461a      	mov	r2, r3
 8017a0c:	f7ee ffda 	bl	80069c4 <_lseek>
 8017a10:	1c43      	adds	r3, r0, #1
 8017a12:	d102      	bne.n	8017a1a <_lseek_r+0x1e>
 8017a14:	682b      	ldr	r3, [r5, #0]
 8017a16:	b103      	cbz	r3, 8017a1a <_lseek_r+0x1e>
 8017a18:	6023      	str	r3, [r4, #0]
 8017a1a:	bd38      	pop	{r3, r4, r5, pc}
 8017a1c:	20005340 	.word	0x20005340

08017a20 <__malloc_lock>:
 8017a20:	4801      	ldr	r0, [pc, #4]	; (8017a28 <__malloc_lock+0x8>)
 8017a22:	f7ff be0b 	b.w	801763c <__retarget_lock_acquire_recursive>
 8017a26:	bf00      	nop
 8017a28:	20005334 	.word	0x20005334

08017a2c <__malloc_unlock>:
 8017a2c:	4801      	ldr	r0, [pc, #4]	; (8017a34 <__malloc_unlock+0x8>)
 8017a2e:	f7ff be06 	b.w	801763e <__retarget_lock_release_recursive>
 8017a32:	bf00      	nop
 8017a34:	20005334 	.word	0x20005334

08017a38 <_read_r>:
 8017a38:	b538      	push	{r3, r4, r5, lr}
 8017a3a:	4d07      	ldr	r5, [pc, #28]	; (8017a58 <_read_r+0x20>)
 8017a3c:	4604      	mov	r4, r0
 8017a3e:	4608      	mov	r0, r1
 8017a40:	4611      	mov	r1, r2
 8017a42:	2200      	movs	r2, #0
 8017a44:	602a      	str	r2, [r5, #0]
 8017a46:	461a      	mov	r2, r3
 8017a48:	f7ee ff78 	bl	800693c <_read>
 8017a4c:	1c43      	adds	r3, r0, #1
 8017a4e:	d102      	bne.n	8017a56 <_read_r+0x1e>
 8017a50:	682b      	ldr	r3, [r5, #0]
 8017a52:	b103      	cbz	r3, 8017a56 <_read_r+0x1e>
 8017a54:	6023      	str	r3, [r4, #0]
 8017a56:	bd38      	pop	{r3, r4, r5, pc}
 8017a58:	20005340 	.word	0x20005340

08017a5c <_init>:
 8017a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a5e:	bf00      	nop
 8017a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a62:	bc08      	pop	{r3}
 8017a64:	469e      	mov	lr, r3
 8017a66:	4770      	bx	lr

08017a68 <_fini>:
 8017a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a6a:	bf00      	nop
 8017a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a6e:	bc08      	pop	{r3}
 8017a70:	469e      	mov	lr, r3
 8017a72:	4770      	bx	lr
